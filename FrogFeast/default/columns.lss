
columns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000e888  0000e988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e888  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ee0  00800120  00800120  0000e9a0  2**5
                  ALLOC
  3 .debug_aranges 00000538  00000000  00000000  0000e990  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00001360  00000000  00000000  0000eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007a75  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c1e  00000000  00000000  00017c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005218  00000000  00000000  000188bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000850  00000000  00000000  0001dad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001639  00000000  00000000  0001e324  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004343  00000000  00000000  0001f95d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cb8  00000000  00000000  00023ca0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 78 46 	jmp	0x8cf0	; 0x8cf0 <__ctors_end>

void SetSongTempo(int t){
	songTempo = t;
}

int GetSongTempo(){
       4:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
       8:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
		return pos+rtl_FontStartOffset;
	}
}


uint8_t rtl_SearchCharList(int8_t ch, const int8_t *chrlst){
       c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      10:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      14:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      18:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      1c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      20:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      24:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      28:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      2c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      30:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      34:	0c 94 25 48 	jmp	0x904a	; 0x904a <__vector_13>
      38:	0c 94 62 48 	jmp	0x90c4	; 0x90c4 <__vector_14>
      3c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      40:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      44:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      48:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      4c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      50:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      54:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      58:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      5c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      60:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      64:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      68:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>
      6c:	0c 94 e0 46 	jmp	0x8dc0	; 0x8dc0 <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	86 4b 89 4b e8 4f 71 4c 6b 4c 92 4b 97 4b 9c 4b     .K.K.OqLkL.K.K.K
      ce:	5d 4c 9f 4b a2 4b a5 4b e9 4b                       ]L.K.K.K.K

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <ColumnsTiles>:
	...
     124:	06 07 03 00 00 02 03 03 57 07 05 03 00 00 02 03     ........W.......
     134:	06 05 06 05 01 00 01 00 05 05 06 06 04 01 00 01     ................
     144:	05 05 06 07 06 02 00 01 05 05 05 06 05 03 01 00     ................
     154:	04 05 05 05 03 02 01 00 04 04 04 04 01 01 03 03     ................
     164:	03 01 01 05 06 06 03 00 01 00 03 57 06 06 05 02     ...........W....
     174:	01 02 07 57 05 06 07 04 02 06 57 06 05 05 06 0f     ...W......W.....
     184:	02 07 57 06 05 05 05 06 01 04 05 05 05 05 04 04     ..W.............
     194:	00 02 04 05 04 05 04 03 01 01 03 04 04 04 03 03     ................
     1a4:	02 02 04 04 02 00 04 57 01 02 04 03 01 03 57 ff     .......W......W.
     1b4:	01 01 02 02 02 57 ff a7 03 01 01 02 07 af 57 06     .....W........W.
     1c4:	05 02 01 01 07 56 06 05 04 02 00 01 03 05 05 06     .....V..........
     1d4:	02 02 02 01 01 03 05 05 01 04 06 02 00 03 03 04     ................
     1e4:	02 03 02 00 02 07 a7 07 02 02 01 00 05 af 07 0f     ................
     1f4:	00 01 00 02 07 56 06 05 00 01 01 03 07 06 04 05     .....V..........
     204:	00 01 02 03 06 05 05 05 01 01 02 03 03 04 05 05     ................
     214:	01 01 00 02 02 04 05 05 02 03 00 01 02 03 03 05     ................
     224:	04 01 01 02 03 03 02 00 0f 03 01 01 03 02 00 03     ................
     234:	06 05 03 01 02 00 02 07 05 05 04 02 01 01 06 af     ................
     244:	06 06 04 02 00 01 03 0f 05 05 05 02 00 00 03 05     ................
     254:	05 04 03 00 01 00 01 03 04 03 02 00 05 02 01 03     ................
     264:	04 a7 57 06 03 00 02 03 56 5e 07 06 05 01 01 02     ..W.....V^......
     274:	5f 07 05 06 06 03 00 00 07 04 05 06 07 05 02 00     _...............
     284:	06 05 06 05 05 05 03 01 05 05 06 05 04 04 03 01     ................
     294:	05 05 05 04 04 03 01 01 03 04 04 04 04 02 01 02     ................
     2a4:	e5 e5 93 8a 8a dc dc dc dc 93 8a dc e5 8a dc 93     ................
     2b4:	93 8a dc dc dc e5 8a dc 8a dc 93 dc 93 dc e5 8a     ................
     2c4:	8a 93 dc e5 dc dc dc e5 f7 8a 93 dc dc 93 dc dc     ................
     2d4:	e5 f7 8a 93 dc dc dc e5 dc e5 dc 8a 93 dc dc dc     ................
     2e4:	93 8a e5 8a 8a 93 dc dc 93 93 8a dc e5 8a 93 dc     ................
     2f4:	93 8a dc 93 e5 e5 8a 93 8a dc dc dc dc 93 e5 8a     ................
     304:	dc dc dc e5 dc dc 93 8a dc e5 dc dc dc 93 8a f7     ................
     314:	dc dc 93 dc 93 8a f7 e5 dc 93 dc 93 8a f7 e5 e5     ................
     324:	e5 dc 93 8a 8a 93 dc dc dc 93 8a f7 f7 8a 93 dc     ................
     334:	93 8a f7 e5 e5 f7 8a 93 8a f7 ee e5 e5 ee f7 8a     ................
     344:	8a dc e5 ee dc e5 e5 f7 e5 8a dc e5 e5 ee e5 e5     ................
     354:	e5 e5 8a dc e5 e5 dc ee dc dc e5 8a dc e5 ee e5     ................
     364:	e5 dc 93 8a 8a 93 dc e5 dc 93 8a f7 f7 8a 93 dc     ................
     374:	93 8a f7 e5 e5 f7 8a 93 8a f7 e5 e5 ee e5 f7 8a     ................
     384:	f7 e5 e5 e5 dc e5 dc 8a e5 dc e5 e5 e5 dc 8a dc     ................
     394:	e5 e5 ee e5 dc 8a dc dc dc ee e5 dc 8a dc dc dc     ................
     3a4:	93 dc 93 8a e5 dc dc dc 93 93 8a e5 dc dc 93 e5     ................
     3b4:	93 8a e5 dc dc dc dc dc 8a e5 dc 93 e5 dc dc 93     ................
     3c4:	8a 93 dc dc dc dc 93 8a f7 8a 93 dc dc 93 8a f7     ................
     3d4:	e5 f7 8a 93 93 8a f7 e5 e5 e5 f7 8a 8a f7 dc e5     ................
     3e4:	dc dc dc e5 8a dc e5 e5 dc 93 dc dc e5 8a dc dc     ................
     3f4:	dc dc e5 dc dc e5 8a dc 93 dc dc 93 dc dc e5 8a     ................
     404:	8a 93 dc dc dc dc 93 8a 8a 8a 93 dc dc 93 8a e5     ................
     414:	93 8a 8a 93 93 8a e5 e5 e5 93 8a 8a 8a e5 e5 e5     ................
     424:	dc dc 93 8a f7 e5 e5 e5 dc 93 8a f7 e5 ee e5 ee     ................
     434:	93 8a f7 e5 dc e5 e5 dc 8a dc e5 e5 e5 e5 dc 93     ................
     444:	8a 93 dc ee e5 dc 93 8a f7 8a 93 dc dc 93 8a e5     ................
     454:	e5 f7 8a 93 93 8a e5 dc e5 e5 dc 8a 93 e5 dc dc     ................
     464:	e5 e5 e5 f7 8a 93 e5 dc e5 e5 e5 e5 f7 8a 93 dc     ................
     474:	dc ee e5 dc e5 f7 8a 93 93 dc e5 e5 e5 dc dc 8a     ................
     484:	8a 93 dc ee dc 93 8a f7 e5 8a 93 dc 93 8a f7 ee     ................
     494:	dc e5 8a 93 8a f7 ee dc 93 dc e5 8a f7 ee e5 e5     ................
     4a4:	93 dc 93 8a e5 dc dc dc 93 93 8a e5 dc dc 93 e5     ................
     4b4:	dc 8a e5 dc dc dc dc dc 8a e5 dc 93 e5 dc dc 93     ................
     4c4:	8a 93 dc dc dc dc 93 8a f7 8a 93 dc dc 93 8a f7     ................
     4d4:	e5 f7 8a 93 93 8a f7 e5 e5 e5 f7 8a 8a f7 dc e5     ................
     4e4:	dc dc dc e5 8a dc e5 e5 dc 93 dc dc e5 8a dc dc     ................
     4f4:	dc dc e5 dc dc e5 8a dc 93 dc dc 93 dc dc e5 8a     ................
     504:	8a 93 dc dc dc dc 93 8a 8a 8a 93 dc dc 93 8a e5     ................
     514:	93 8a 8a 93 93 8a e5 e5 93 93 8a 8a 8a e5 e5 e5     ................
	...
     530:	04 04 04 04 00 00 00 04 0f ff ff a7 00 00 04 0f     ................
     540:	ff ff ff a7 00 04 0f ff ff ff a7 a7 00 04 0f ff     ................
     550:	ff a7 a7 0f 00 04 03 a7 a7 a7 0f 04 00 04 03 04     ................
     560:	0f 0f 04 04 00 00 00 00 00 00 00 00 04 04 04 04     ................
     570:	00 00 00 00 04 04 03 03 04 00 00 00 04 04 04 04     ................
     580:	03 04 00 00 0f 0f 04 04 04 03 04 00 0f 0f 0f 04     ................
     590:	04 04 04 00 0f 0f 0f 0f 04 04 04 00 04 0f 0f 0f     ................
     5a0:	04 04 04 00 00 04 03 03 04 04 04 04 00 04 03 03     ................
     5b0:	03 03 04 04 00 04 04 03 03 03 04 04 00 04 0f 04     ................
     5c0:	04 04 04 04 00 04 04 0f 04 04 04 0f 00 00 04 04     ................
     5d0:	0f 0f 0f 0f 00 00 00 04 04 04 04 03 00 00 00 00     ................
     5e0:	04 04 04 04 04 0f 0f 0f 04 04 04 00 04 0f 0f 0f     ................
     5f0:	04 04 04 00 04 0f 0f a7 04 04 04 00 0f 0f a7 a7     ................
     600:	04 04 04 00 0f a7 a7 04 04 03 04 00 0f 04 04 04     ................
     610:	03 04 00 00 03 03 03 03 04 00 00 00 04 04 04 04     ................
	...
     628:	00 00 00 27 00 00 00 00 00 0f 27 77 00 00 00 0f     ...'......'w....
     638:	0f ff ff 27 00 0f 0f 77 77 27 27 0f 00 0f 77 27     ...'...ww''...w'
     648:	27 0f 0f 04 00 0f 27 0f 0f 04 04 04 00 0f 27 0f     '.....'.......'.
     658:	04 04 04 04 00 0f 27 0f 04 04 04 04 27 00 00 00     ......'.....'...
     668:	00 00 00 00 27 27 27 00 00 00 00 00 0f 27 27 27     ....'''......'''
     678:	27 00 00 00 0f 0f 0f 27 27 0f 0f 00 27 0f 0f 0f     '......''...'...
     688:	0f 77 0f 00 27 77 27 0f 0f 27 0f 00 27 ff ff 27     .w..'w'..'..'..'
     698:	27 0f 0f 00 0f 27 27 27 27 77 0f 00 00 0f 27 0f     '....''''w....'.
     6a8:	0f 0f 0f 0f 00 0f 27 0f 0f 27 27 0f 00 0f 27 0f     ......'..''...'.
     6b8:	0f 27 77 0f 00 0f 27 27 27 0f 0f 0f 00 04 04 77     .'w...'''......w
     6c8:	77 27 27 0f 00 00 00 04 04 77 77 0f 00 00 00 00     w''......ww.....
     6d8:	00 04 04 27 00 00 00 00 00 00 00 04 04 04 04 04     ...'............
     6e8:	0f 77 0f 00 04 04 04 04 0f 77 0f 00 04 04 04 0f     .w.......w......
     6f8:	0f 27 0f 00 04 0f 0f 0f 0f 27 0f 00 0f 0f 0f 27     .'.......'.....'
     708:	27 04 04 00 0f 27 27 04 04 00 00 00 27 04 04 00     '....''.....'...
     718:	00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00     ................
     728:	00 00 00 00 00 00 00 26 37 37 b6 b6 00 00 26 3f     .......&77....&?
     738:	3f 26 26 26 00 26 1e 1e 37 26 1e 1e 00 26 ff ff     ?&&&.&..7&...&..
     748:	26 1e 1e 1e 00 26 ff ff 26 ff ff 3f 00 26 b6 b6     &....&..&..?.&..
     758:	26 ff ff 26 00 26 1e 1e 26 1e 1e 1e 00 00 00 00     &..&.&..&.......
     768:	00 00 00 00 ff ff ff b6 26 00 00 00 26 37 3f ff     ........&...&7?.
     778:	b6 26 00 00 1e 26 37 3f 3f 3f 26 00 37 37 26 26     .&...&7???&.77&&
     788:	3f 3f 26 00 26 26 3f 3f 26 26 26 00 3f 3f 3f 26     ??&.&&??&&&.???&
     798:	1e 1e 26 00 26 26 26 1e 1e 1e 26 00 00 26 1e 26     ..&.&&&...&..&.&
     7a8:	26 1e 1e 1e 00 26 26 37 26 1e 1e 1e 00 26 37 3f     &....&&7&....&7?
     7b8:	26 26 1e 1e 00 26 b6 37 37 26 26 26 00 26 b6 3f     &&...&.77&&&.&.?
     7c8:	37 37 26 26 00 26 b6 b6 3f 37 26 26 00 00 26 b6     77&&.&..?7&&..&.
     7d8:	b6 26 1e 1e 00 00 00 26 26 26 26 26 1e 1e 26 1e     .&.....&&&&&..&.
     7e8:	26 1e 26 00 1e 1e 26 1e 26 1e 26 00 1e 1e 26 1e     &.&...&.&.&...&.
     7f8:	26 26 26 00 26 26 26 26 26 37 26 00 26 37 37 37     &&&.&&&&&7&.&777
     808:	3f 3f 26 00 37 37 37 3f 3f 3f 26 00 1e 1e 26 3f     ??&.777???&...&?
     818:	3f 26 00 00 26 26 26 26 26 00 00 00 00 00 00 00     ?&..&&&&&.......
     828:	00 00 00 00 00 00 00 21 21 21 21 21 00 00 21 b9     .......!!!!!..!.
     838:	18 21 30 30 00 21 b9 ff 18 18 21 30 00 21 18 18     .!00.!....!0.!..
     848:	b9 18 ff f0 00 21 21 18 ff 21 18 18 00 30 21 18     .....!!..!...0!.
     858:	ff 18 18 18 00 b9 21 21 ff 18 18 18 00 00 00 00     ......!!........
     868:	00 00 00 00 30 30 30 21 21 00 00 00 b9 30 21 30     ....000!!....0!0
     878:	b9 21 00 00 b9 30 21 f0 f0 b9 21 00 30 30 21 b9     .!...0!...!.00!.
     888:	f0 30 21 00 18 18 21 b9 21 18 30 00 18 21 18 30     .0!...!.!.0..!.0
     898:	21 18 30 00 21 30 21 30 21 18 30 00 00 b9 30 21     !.0.!0!0!.0...0!
     8a8:	b9 18 18 18 00 30 f0 21 b9 18 18 21 00 30 f0 21     .....0.!...!.0.!
     8b8:	f0 21 18 18 00 30 b9 30 21 21 21 21 00 21 18 30     .!...0.0!!!!.!.0
     8c8:	18 18 18 18 00 21 18 18 21 21 21 21 00 00 21 18     .....!..!!!!..!.
     8d8:	18 18 18 18 00 00 00 21 21 30 30 b9 21 30 21 30     .......!!00.!0!0
     8e8:	21 21 30 00 21 21 18 30 21 21 30 00 18 18 21 b9     !!0.!!.0!!0...!.
     8f8:	21 21 30 00 30 30 b9 30 30 30 30 00 21 21 30 30     !!0.00.0000.!!00
     908:	f0 30 21 00 30 30 21 f0 f0 b9 21 00 21 21 21 21     .0!.00!...!.!!!!
     918:	b9 21 00 00 f0 b9 30 21 21 00 00 00 00 00 00 00     .!....0!!.......
     928:	00 00 00 00 00 00 d9 ff f0 f0 e3 e3 00 d9 ff d9     ................
     938:	d9 e3 e3 d9 00 d9 ff ff d9 e3 f4 e3 00 d9 f0 ff     ................
     948:	f0 e3 ff f4 00 d9 f4 f4 f0 ff ff ff 00 d9 f0 f4     ................
     958:	f0 e3 f4 e3 00 d9 e3 f0 f0 e3 f4 d9 00 00 00 00     ................
     968:	00 00 00 00 e3 e3 f0 f0 ff d9 00 00 d9 d9 e3 e3     ................
     978:	e3 ff d9 00 e3 e3 f4 f0 ff ff d9 00 f4 f4 ff ff     ................
     988:	ff f0 d9 00 ff ff ff ff f4 f0 d9 00 e3 e3 f4 e3     ................
     998:	f4 f0 d9 00 e3 d9 f4 e3 f0 e3 d9 00 00 d9 d9 e3     ................
     9a8:	f0 e3 f0 d9 00 d9 48 d9 f0 e3 e3 d9 00 d9 48 48     ......H.......HH
     9b8:	d9 d9 e3 d9 00 d9 48 48 e3 d9 d9 e3 00 e3 48 d9     ......HH......H.
     9c8:	d9 d9 e3 e3 00 e3 d9 e3 d9 f0 f0 f4 00 e3 d9 d9     ................
     9d8:	f4 f0 e3 d9 00 00 e3 e3 e3 e3 e3 e3 d9 d9 f0 e3     ................
     9e8:	f0 e3 d9 00 d9 d9 f0 e3 e3 d9 d9 00 d9 d9 f0 e3     ................
     9f8:	d9 48 d9 00 e3 d9 d9 d9 48 48 d9 00 e3 e3 d9 48     .H......HH.....H
     a08:	d9 48 e3 00 f4 f0 f0 d9 e3 d9 e3 00 d9 e3 f0 f0     .H..............
     a18:	d9 d9 e3 00 e3 e3 e3 e3 e3 e3 00 00 00 00 00 00     ................
     a28:	00 00 00 00 00 00 00 84 84 cf e7 e7 00 00 00 84     ................
     a38:	84 cf 43 ff 00 00 84 43 cf cf 43 e6 00 00 84 43     ..C....C..C....C
     a48:	cf 84 43 84 00 84 43 e7 84 43 43 84 00 84 43 e6     ..C...C..CC...C.
     a58:	43 43 43 84 84 43 43 ff 43 84 84 84 00 00 00 00     CCC..CC.C.......
     a68:	00 00 00 00 e7 e7 cf 84 84 00 00 00 ff ff 43 43     ..............CC
     a78:	84 00 00 00 e6 e6 84 43 e6 84 00 00 cf cf 84 84     .......C........
     a88:	e6 84 00 00 cf ff e7 84 84 43 84 00 cf e6 e7 84     .........C......
     a98:	84 43 84 00 cf cf e7 84 84 43 43 84 84 43 43 ff     .C.......CC..CC.
     aa8:	43 cf 84 84 84 43 43 ff 43 cf 84 84 00 84 43 e6     C....CC.C.....C.
     ab8:	43 e7 cf 84 00 84 43 e6 cf e7 cf 84 00 00 84 43     C.....C........C
     ac8:	cf e7 e7 43 00 00 84 43 43 e7 ff 43 00 00 00 84     ...C...CC..C....
     ad8:	43 ff ff ff 00 00 00 84 84 84 84 84 84 84 cf 84     C...............
     ae8:	84 43 43 84 84 84 cf 84 84 43 43 84 84 84 cf 84     .CC......CC.....
     af8:	84 43 84 00 84 84 cf 84 cf 43 84 00 84 84 cf cf     .C.......C......
     b08:	e7 84 00 00 43 84 e7 e7 43 84 00 00 43 43 43 43     ....C...C...CCCC
     b18:	84 00 00 00 84 84 84 84 84 00 00 00 00 00 00 00     ................
     b28:	00 00 00 00 00 00 00 37 37 37 00 00 00 00 37 00     .......777....7.
     b38:	00 00 37 00 00 37 00 00 00 00 37 00 00 37 00 00     ..7..7....7..7..
     b48:	00 00 37 00 00 37 00 00 00 00 37 00 00 37 00 00     ..7..7....7..7..
     b58:	00 37 00 00 00 00 37 37 37 00 00 00 00 00 00 00     .7....777.......
	...
     b70:	37 00 00 00 00 00 00 37 37 00 00 00 00 00 00 00     7......77.......
     b80:	37 00 00 00 00 00 00 00 37 00 00 00 00 00 00 37     7.......7......7
     b90:	00 00 00 00 00 00 00 37 00 00 00 00 00 00 37 37     .......7......77
     ba0:	37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 37     7..............7
     bb0:	37 37 00 00 00 00 37 00 00 00 37 00 00 00 00 00     77....7...7.....
     bc0:	00 00 37 00 00 00 00 00 37 37 00 00 00 00 37 37     ..7.....77....77
     bd0:	00 00 00 00 00 37 00 00 00 00 00 00 00 37 37 37     .....7.......777
     be0:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 00 37     77.............7
     bf0:	37 37 00 00 00 00 37 00 00 00 37 00 00 00 00 00     77....7...7.....
     c00:	00 00 37 00 00 00 00 00 37 37 00 00 00 00 00 00     ..7.....77......
     c10:	00 00 37 00 00 37 00 00 00 00 37 00 00 00 37 37     ..7..7....7...77
     c20:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00     77..............
     c30:	00 37 37 00 00 00 00 00 37 00 37 00 00 00 00 37     .77.....7.7....7
     c40:	00 00 37 00 00 00 37 00 00 00 37 00 00 37 00 00     ..7...7...7..7..
     c50:	00 37 00 00 00 37 37 37 37 37 37 00 00 00 00 00     .7...777777.....
     c60:	00 37 00 00 00 00 00 00 00 00 00 00 00 00 37 37     .7............77
     c70:	37 37 37 00 00 00 37 00 00 00 00 00 00 37 00 00     777...7......7..
     c80:	00 00 00 00 00 37 37 37 37 37 00 00 00 00 00 00     .....77777......
     c90:	00 00 37 00 00 00 00 00 00 00 37 00 00 37 37 37     ..7.......7..777
     ca0:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 00 37     77.............7
     cb0:	37 37 37 00 00 00 37 00 00 00 00 00 00 37 00 00     777...7......7..
     cc0:	00 00 00 00 00 37 37 37 37 37 00 00 00 37 00 00     .....77777...7..
     cd0:	00 00 37 00 00 37 00 00 00 00 37 00 00 00 37 37     ..7..7....7...77
     ce0:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 37 37     77............77
     cf0:	37 37 37 00 00 37 00 00 00 00 37 00 00 00 00 00     777..7....7.....
     d00:	00 00 37 00 00 00 00 00 00 37 00 00 00 00 00 00     ..7......7......
     d10:	37 00 00 00 00 00 00 37 00 00 00 00 00 00 37 00     7......7......7.
	...
     d2c:	00 00 00 37 37 37 00 00 00 00 37 00 00 00 37 00     ...777....7...7.
     d3c:	00 00 37 00 00 00 37 00 00 00 37 37 37 37 00 00     ..7...7...7777..
     d4c:	00 37 00 00 00 00 37 00 00 37 00 00 00 00 37 00     .7....7..7....7.
     d5c:	00 00 37 37 37 37 00 00 00 00 00 00 00 00 00 00     ..7777..........
     d6c:	00 00 00 37 37 37 00 00 00 00 37 00 00 00 37 00     ...777....7...7.
     d7c:	00 00 37 00 00 00 37 00 00 00 00 37 37 37 37 00     ..7...7....7777.
     d8c:	00 00 00 00 00 00 37 00 00 37 00 00 00 00 37 00     ......7..7....7.
     d9c:	00 00 37 37 37 37 00 00                             ..7777..

00000da4 <BannerTiles>:
     da4:	80 80 80 80 91 91 91 91 a2 a2 a2 a2 b3 b3 b3 b3     ................
     db4:	b3 b3 b3 b3 c4 c4 c4 c4 d5 d5 d5 d5 d5 d5 d5 d5     ................
     dc4:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 e6     ................
     dd4:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 e6     ................
     de4:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 64     ...............d
     df4:	e6 b3 e6 a2 e6 b3 64 a2 b3 e6 a2 c4 b3 64 a2 c4     ......d......d..
     e04:	e6 b3 64 a2 e6 a2 c4 a2 a2 c4 a2 c4 a2 c4 a2 46     ..d............F
     e14:	c4 a2 46 b3 c4 a2 46 32 a2 c4 b3 c4 a2 c4 b3 c4     ..F...F2........
     e24:	c4 a2 e6 b3 c4 a2 c4 b3 a2 c4 a2 46 b3 64 a2 c4     ...........F.d..
     e34:	e6 b3 c4 a2 c4 b3 64 a2 a2 e6 32 c4 23 e6 32 c4     ......d...2.#.2.
     e44:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 e6     ................
     e54:	e6 b3 e6 32 e6 b3 64 a2 b3 c4 a2 c4 a2 c4 a2 c4     ...2..d.........
     e64:	e6 a2 c4 a2 e6 a2 c4 a2 32 c4 a2 c4 a2 c4 a2 c4     ........2.......
     e74:	c4 a2 c4 a2 c4 a2 c4 a2 a2 c4 a2 c4 a2 c4 a2 c4     ................
     e84:	c4 a2 e6 a2 c4 a2 e6 a2 a2 c4 23 64 a2 c4 a2 e6     ..........#d....
     e94:	c4 a2 c4 a2 c4 a2 c4 a2 a2 c4 a2 c4 a2 c4 a2 c4     ................
     ea4:	46 b3 c4 23 c4 a2 c4 23 a2 c4 a2 e6 32 c4 b3 e6     F..#...#....2...
     eb4:	e6 b3 e6 b3 c4 b3 e6 b3 a2 c4 a2 e6 a2 c4 a2 c4     ................
     ec4:	d5 d5 d5 d5 d5 d5 d5 d5 a2 a2 a2 a2 b3 b3 b3 b3     ................
     ed4:	b3 b3 b3 b3 c4 c4 c4 c4 77 77 77 77 77 77 77 77     ........wwwwwwww

00000ee4 <BannerPallet>:
     ee4:	02 0b 64 0a 5b 14 13 0a 64                          ..d.[...d

00000eed <TitleMap>:
     eed:	01 01 01 01 01 01 02 03 04 05 02 03 06 07 08 09     ................
     efd:	06 07 0a 0a 0a 0a 0a 0a                             ........

00000f05 <FieldMap>:
     f05:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f15:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f25:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f35:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f45:	01 02 03 01 04 05 06 04 01 02 03 01 07 08 09 0a     ................
     f55:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f65:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f75:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f85:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f95:	0b 0c 0d 0e 09 0a 07 08                             ........

00000f9d <GridTiles>:
     f9d:	ff 80 80 80 80 80 80 80 fe 00 00 00 00 00 00 00     ................
     fad:	80 80 80 80 80 80 80 00                             ........

00000fb5 <MagicPallet>:
     fb5:	00 ff 03 07 a7 06 00 ff 16 27 77 17 00 ff 13 2f     .........'w..../
     fc5:	3f 1d 00 ff 10 78 b0 28 00 ff 88 e1 f0 d1 00 ff     ?....x.(........
     fd5:	42 c6 df 84                                         B...

00000fd9 <MagicTiles>:
     fd9:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 02 03     ................
     fe9:	00 00 00 00 00 00 02 04 00 00 00 00 00 02 03 01     ................
     ff9:	00 00 00 00 00 03 04 01 00 00 00 00 02 03 03 01     ................
    1009:	00 00 00 00 02 01 05 04 00 00 00 02 04 01 03 05     ................
    1019:	02 00 00 00 00 00 00 00 03 02 00 00 00 00 00 00     ................
    1029:	04 02 00 00 00 00 00 00 01 03 02 00 00 00 00 00     ................
    1039:	01 04 03 00 00 00 00 00 01 03 03 02 00 00 00 00     ................
    1049:	04 05 01 02 00 00 00 00 05 03 01 04 02 00 00 00     ................
    1059:	00 00 00 02 01 01 04 01 00 00 02 04 05 03 04 01     ................
    1069:	00 00 02 04 05 01 03 05 00 02 03 05 01 01 05 03     ................
    1079:	00 02 04 01 01 01 03 01 02 04 01 01 01 03 04 01     ................
    1089:	02 01 04 04 03 02 03 04 00 02 02 02 02 02 02 02     ................
    1099:	01 04 01 01 02 00 00 00 01 04 03 05 04 02 00 00     ................
    10a9:	05 03 01 05 04 02 00 00 03 05 01 01 05 03 02 00     ................
    10b9:	01 03 01 01 01 04 02 00 01 04 03 01 01 01 04 02     ................
    10c9:	04 03 02 03 04 04 01 02 02 02 02 02 02 02 02 00     ................
    10d9:	00 00 00 00 00 02 02 02 00 01 04 02 02 04 04 04     ................
    10e9:	00 04 02 04 04 03 04 04 00 02 04 01 01 04 03 03     ................
    10f9:	00 02 04 01 01 01 05 04 02 05 05 04 01 05 01 01     ................
    1109:	02 03 03 03 05 01 01 01 02 04 04 04 04 01 01 01     ................
    1119:	02 02 02 00 00 00 00 00 01 01 01 02 02 04 01 00     ................
    1129:	01 01 03 04 04 02 04 00 03 03 04 01 01 04 02 00     ................
    1139:	04 05 01 01 01 04 02 00 01 01 05 01 04 03 04 02     ................
    1149:	01 01 01 05 03 04 01 02 01 01 01 04 04 01 01 02     ................
    1159:	02 01 01 04 04 01 01 01 02 01 04 03 05 01 01 01     ................
    1169:	02 04 03 04 01 05 01 01 00 02 04 01 01 01 05 05     ................
    1179:	00 02 04 01 01 04 03 03 00 01 02 04 04 03 03 03     ................
    1189:	00 04 04 02 02 04 04 04 00 00 00 00 00 02 02 02     ................
    1199:	04 01 01 04 04 04 04 02 04 04 01 05 03 03 03 02     ................
    11a9:	04 04 05 01 04 05 05 02 05 05 01 01 01 04 02 00     ................
    11b9:	03 03 04 01 01 04 02 00 03 03 03 04 04 02 01 00     ................
    11c9:	01 01 01 02 02 04 04 00 02 02 02 00 00 00 00 00     ................
    11d9:	00 02 02 02 02 02 02 02 02 01 04 04 03 02 03 04     ................
    11e9:	02 04 01 01 01 03 04 01 00 02 04 01 01 01 03 01     ................
    11f9:	00 02 03 05 01 01 05 03 00 00 02 04 05 01 03 05     ................
    1209:	00 00 02 04 05 03 04 01 00 00 00 02 01 01 04 01     ................
    1219:	02 02 02 02 02 02 02 00 04 03 02 03 04 04 01 02     ................
    1229:	01 04 03 01 01 01 04 02 01 03 01 01 01 04 02 00     ................
    1239:	03 05 01 01 05 03 02 00 05 03 01 05 04 02 00 00     ................
    1249:	01 04 03 05 04 02 00 00 01 04 01 01 02 00 00 00     ................
    1259:	00 00 00 02 04 01 03 05 00 00 00 00 02 01 05 04     ................
    1269:	00 00 00 00 02 03 03 01 00 00 00 00 00 03 04 01     ................
    1279:	00 00 00 00 00 02 03 01 00 00 00 00 00 00 02 04     ................
    1289:	00 00 00 00 00 00 02 03 00 00 00 00 00 00 00 02     ................
    1299:	05 03 01 04 02 00 00 00 04 05 01 02 00 00 00 00     ................
    12a9:	01 03 03 02 00 00 00 00 01 04 03 00 00 00 00 00     ................
    12b9:	01 03 02 00 00 00 00 00 04 02 00 00 00 00 00 00     ................
    12c9:	03 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................

000012d9 <CrashTiles>:
    12d9:	00 00 15 55 25 55 29 55 2a 55 2a 95 2a a5 2a a9     ...U%U)U*U*.*.*.
    12e9:	00 00 55 54 55 58 55 68 55 a8 56 a8 5a a8 6a a8     ..UTUXUhU.V.Z.j.
    12f9:	2a a8 2a a0 2a 80 2a 00 28 00 20 00 00 00 00 00     *.*.*.*.(. .....
    1309:	2a a8 0a a8 02 a8 00 a8 00 28 00 08 00 00 00 00     *........(......

00001319 <ExplosionTiles>:
	...
    133d:	ff 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    134d:	00 3f 00 37 00 00 37 00 00 00 37 3f 00 00 00 00     .?.7..7...7?....
	...
    1369:	37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     7...............
    1379:	00 00 00 ff 00 00 00 00 00 3f 00 00 00 00 00 00     .........?......
    1389:	37 00 00 00 00 00 00 00 3f 37 ff 00 00 00 00 00     7.......?7......
    1399:	00 00 00 00 00 ff 37 3f 00 00 00 00 00 00 00 37     ......7?.......7
    13a9:	00 00 00 00 00 00 3f 00 00 00 00 00 ff 00 00 00     ......?.........
	...
    13c5:	00 00 00 37 00 00 00 00 00 00 00 00 00 00 00 00     ...7............
    13d5:	00 00 00 00 3f 37 00 00 00 37 00 00 37 00 3f 00     ....?7...7..7.?.
    13e5:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 ff     ................
	...
    1419:	ff 00 00 00 00 00 00 00 00 00 3f 00 00 00 00 00     ..........?.....
	...
    1431:	00 00 00 3f 00 3f 00 00 00 00 00 00 00 00 00 37     ...?.?.........7
    1441:	00 00 00 37 00 0f 00 00 00 00 00 00 00 00 ff 00     ...7............
    1451:	3f 00 00 00 00 0f 00 0f 3f 00 00 00 00 00 00 ff     ?.......?.......
	...
    146d:	00 00 3f 00 00 00 37 00 3f 00 00 00 00 00 00 00     ..?...7.?.......
    147d:	00 00 00 00 0f 00 0f 00 3f 00 00 00 00 ff 00 00     ........?.......
    148d:	00 00 00 00 0f 00 00 37 00 00 00 00 00 00 00 00     .......7........
    149d:	37 00 00 0f 00 00 00 00 00 00 ff 00 00 00 00 3f     7..............?
    14ad:	00 0f 00 0f 00 00 00 00 00 00 00 00 00 00 00 3f     ...............?
    14bd:	00 37 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .7...?..........
    14cd:	00 00 00 00 ff 00 00 00 00 00 00 3f 0f 00 0f 00     ...........?....
    14dd:	00 00 00 3f 00 ff 00 00 00 00 00 00 00 00 0f 00     ...?............
    14ed:	37 00 00 00 37 00 00 00 00 00 00 00 00 00 3f 00     7...7.........?.
    14fd:	3f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    150d:	00 3f 00 00 00 00 00 00 00 00 00 ff a7 0f a7 00     .?..............
    151d:	a7 00 00 00 0f 00 00 37 00 00 00 00 a7 00 00 00     .......7........
    152d:	00 0f 00 00 00 37 00 a7 00 00 00 ff a7 00 00 00     .....7..........
    153d:	37 00 00 00 00 00 0f 00 00 00 ff 00 00 00 00 00     7...............
    154d:	ff 00 00 37 0f 00 00 00 00 00 2e 0f 0f 00 00 a7     ...7............
    155d:	00 a7 0f a7 00 00 00 00 37 00 00 0f 00 00 0f 00     ........7.......
    156d:	00 00 00 a7 00 00 00 00 a7 00 37 00 00 ff 00 37     ..........7....7
    157d:	00 00 00 a7 00 00 00 00 00 0f 00 00 2e 00 ff 00     ................
    158d:	00 00 00 00 0f 37 00 00 ff 00 00 00 00 00 00 ff     .....7..........
    159d:	00 00 37 0f 00 00 00 00 00 ff 00 2e 00 00 0f 00     ..7.............
    15ad:	00 00 00 00 a7 00 00 00 37 00 ff 00 00 37 00 a7     ........7....7..
    15bd:	00 00 00 00 a7 00 00 00 00 0f 00 00 0f 00 00 37     ...............7
    15cd:	00 00 00 00 a7 0f a7 00 a7 00 00 0f 0f 2e 00 00     ................
    15dd:	00 00 00 0f 37 00 00 ff 00 00 00 00 00 ff 00 00     ....7...........
    15ed:	00 0f 00 00 00 00 00 37 00 00 00 a7 ff 00 00 00     .......7........
    15fd:	a7 00 37 00 00 00 0f 00 00 00 00 a7 00 00 00 00     ..7.............
    160d:	37 00 00 0f 00 00 00 a7 00 a7 0f a7 0f 00 00 0f     7...............
    161d:	00 00 00 00 00 a7 00 00 00 00 00 00 00 00 e2 00     ................
    162d:	00 00 00 e2 0f 00 00 ff 00 ff 00 00 00 00 00 00     ................
    163d:	00 00 00 00 00 00 00 ff 00 00 f0 00 00 00 00 00     ................
    164d:	00 e2 00 00 a7 00 00 00 00 00 fd 00 a7 00 00 00     ................
    165d:	0f 00 00 0f 00 00 00 00 00 00 a7 00 00 00 00 00     ................
    166d:	00 e2 00 00 00 00 ff 00 ff 00 00 0f 00 00 00 00     ................
    167d:	00 00 00 00 00 e2 00 00 ff 00 00 00 fd 00 f0 00     ................
	...
    1695:	00 e2 00 00 00 00 e2 00 00 00 00 00 00 00 00 00     ................
    16a5:	00 f0 00 fd 00 00 00 ff 00 00 e2 00 00 00 00 00     ................
    16b5:	00 00 00 00 0f 00 00 ff 00 ff 00 00 00 00 e2 00     ................
    16c5:	00 00 00 00 00 a7 00 00 00 00 00 00 0f 00 00 0f     ................
    16d5:	00 00 00 a7 00 fd 00 00 00 00 00 a7 00 00 e2 00     ................
    16e5:	00 00 00 00 00 f0 00 00 ff 00 00 00 00 00 00 00     ................
    16f5:	00 00 00 00 00 00 ff 00 ff 00 00 0f e2 00 00 00     ................
    1705:	00 e2 00 00 00 00 00 00 00 00 a7 00 00 00 00 00     ................
    1715:	0f 00 00 0f 2e 00 ff 00 37 00 00 00 00 00 00 00     ........7.......
    1725:	00 00 00 e2 ff 00 fd 00 e2 00 00 00 00 00 00 00     ................
    1735:	00 00 00 00 37 00 e2 00 fd 00 f0 00 00 00 00 00     ....7...........
	...
    174d:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 37     ...............7
    175d:	00 ff 00 2e 00 00 00 00 00 00 00 00 00 00 00 e2     ................
    176d:	00 fd 00 ff 00 00 00 00 00 00 00 00 00 e2 00 fd     ................
    177d:	00 e2 00 37 00 00 00 00 00 00 00 00 00 00 00 f0     ...7............
	...
    1795:	00 00 e2 00 00 e2 00 00 00 00 00 00 00 00 00 00     ................
    17a5:	f0 00 00 00 00 00 00 00 00 00 00 00 37 00 e2 00     ............7...
    17b5:	fd 00 e2 00 00 00 00 00 00 00 00 00 ff 00 fd 00     ................
    17c5:	e2 00 00 00 00 00 00 00 00 00 00 00 2e 00 ff 00     ................
    17d5:	37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 e2     7...............
	...
    17f1:	00 f0 00 fd 00 e2 00 37 00 00 00 00 00 00 00 00     .......7........
    1801:	00 00 00 e2 00 fd 00 ff e2 00 00 00 00 00 00 00     ................
    1811:	00 00 00 37 00 ff 00 2e ff 00 fd 00 00 00 00 e2     ...7............
    1821:	00 00 00 00 fd 00 00 00 fd 00 00 00 00 00 00 00     ................
	...
    1839:	00 e2 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    185d:	00 fd 00 ff 00 00 00 e2 00 00 00 00 00 00 00 00     ................
    186d:	00 00 00 fd 00 00 00 00 00 00 00 00 00 00 00 00     ................
    187d:	00 00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1895:	00 00 00 e2 e2 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18b1:	00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18c1:	fd 00 00 00 00 00 00 00 00 00 00 00 e2 00 00 00     ................
    18d1:	ff 00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18f5:	00 00 e2 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1905:	00 00 00 fd 00 00 00 fd 00 00 00 00 e2 00 00 00     ................
    1915:	00 fd 00 ff 00 00 00 00 f0 00 00 00 00 da 00 00     ................
	...
    1939:	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1959:	00 00 00 f0 00 00 00 00 00 00 00 00 00 00 da 00     ................
	...
    197d:	00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19b1:	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19c9:	00 da 00 00 00 00 00 00 00 00 00 00 f0 00 00 00     ................
	...
    19f5:	00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a0d:	00 00 da 00 00 00 00 f0 00 00 00 00                 ............

00001a19 <GetReadyPallet>:
    1a19:	07 07 07 06 06 05 03 02 01 02 02 03 05 06 07 07     ................
    1a29:	8a 8a 93 93 dc dc e5 e5 ee ee e5 e5 dc dc 93 93     ................

00001a39 <CrashPallet>:
    1a39:	01 03 04 00 03 05 07 00 8a 93 dc 00 dc e5 ee 00     ................

00001a49 <GridPallet>:
    1a49:	01 03 07 47 4f 0f c8                                ...GO..

00001a50 <compfont>:
    1a50:	00 30 00 00 30 00 00 00 38 44 44 08 10 00 10 00     .0..0...8DD.....
    1a60:	08 0c fe ff ff fe 0c 08 3f 7f ff f0 e0 e0 e0 e0     ........?.......
    1a70:	fc fe ff 0f 07 07 07 07 e0 e0 e0 e0 f0 ff 7f 3f     ...............?
    1a80:	07 07 07 07 0f ff fe fc e0 e0 e0 e0 e0 e0 e0 e0     ................
    1a90:	07 07 07 07 07 07 07 07 ff ff ff 00 00 00 00 00     ................
    1aa0:	00 00 00 00 00 ff ff ff 06 06 0c 08 10 00 20 00     .............. .
    1ab0:	38 28 44 44 7c 82 82 00 f8 44 42 7c 42 44 f8 00     8(DD|....DB|BD..
    1ac0:	1e 22 40 80 40 22 1e 00 f0 48 44 42 44 48 f0 00     ."@.@"...HDBDH..
    1ad0:	1e 20 40 fc 40 20 1e 00 1e 20 40 fc 40 40 40 00     . @.@ ... @.@@@.
    1ae0:	3c 40 80 8e 44 28 10 00 c6 44 44 fe 44 44 c6 00     <@..D(...DD.DD..
    1af0:	38 10 10 10 10 10 38 00 1e 02 02 c2 82 44 38 00     8.....8......D8.
    1b00:	c6 88 90 e0 90 88 c6 00 70 40 40 40 40 42 fe 00     ........p@@@@B..
    1b10:	c6 c6 aa aa 92 92 c6 00 c4 c4 a4 b4 94 8c 8c 00     ................
    1b20:	38 44 82 92 82 44 38 00 f8 84 82 84 f8 80 80 00     8D...D8.........
    1b30:	38 44 82 92 8a 44 3a 00 f8 84 82 84 f8 88 86 00     8D...D:.........
    1b40:	3e 40 80 7c 02 04 f8 00 fe 92 10 10 10 10 38 00     >@.|..........8.
    1b50:	c6 44 44 44 44 44 38 00 c6 44 44 28 28 10 10 00     .DDDDD8..DD((...
    1b60:	c6 82 92 92 aa 6c 44 00 82 44 28 10 28 44 82 00     .....lD..D(.(D..
    1b70:	82 44 28 10 10 10 10 00 fe 44 08 10 20 44 fe 00     .D(......D.. D..
    1b80:	38 44 84 84 84 88 70 00 10 30 10 10 20 20 70 00     8D....p..0..  p.
    1b90:	38 44 04 18 60 80 f8 00 38 44 04 18 04 84 78 00     8D..`...8D....x.
    1ba0:	0c 14 24 44 88 fc 08 00 7c 40 80 f8 04 04 f8 00     ..$D....|@......
    1bb0:	3c 40 80 f8 84 84 78 00 7c 84 04 08 10 20 40 00     <@....x.|.... @.
    1bc0:	38 44 44 78 84 84 78 00 38 44 44 3c 04 84 78 00     8DDx..x.8DD<..x.
    1bd0:	3c 3c 3c 3c ff 7e 3c 18                             <<<<.~<.

00001bd8 <compfontspeckles>:
    1bd8:	ff ff ff ff ff ff ff ff ff ff ff ff 02 00 03 00     ................
    1be8:	03 03 02 00 02 02 00 01 00 00 02 00 02 00 02 00     ................
    1bf8:	00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    1c08:	ff ff ff ff ff ff ff ff ff ff                       ..........

00001c12 <charlist>:
    1c12:	3a 3f 3e 7b 7d 5b 5d 2c 2e 5e 76 21 41 42 43 44     :?>{}[],.^v!ABCD
    1c22:	45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     EFGHIJKLMNOPQRST
    1c32:	55 56 57 58 59 5a 30 31 32 33 34 35 36 37 38 39     UVWXYZ0123456789
    1c42:	7c 00                                               |.

00001c44 <patch00>:
    1c44:	00 02 03 00 07 37 00 00 08 00 06 00 00 00 f9 06     .....7..........
    1c54:	05 00 00 ff                                         ....

00001c58 <patch01>:
    1c58:	00 09 64 00 0a 3c 00 02 03 00 07 37 00 00 08 00     ..d..<.....7....
    1c68:	06 00 00 00 fd 0c 05 00 00 ff                       ..........

00001c72 <patch02>:
    1c72:	00 02 00 00 07 3e 00 00 08 01 06 00 00 00 f9 07     .....>..........
    1c82:	05 00 00 ff                                         ....

00001c86 <patch03>:
    1c86:	00 ff                                               ..

00001c88 <patch04>:
    1c88:	00 09 aa 00 0a b4 00 02 04 00 07 5c 00 00 10 01     ...........\....
    1c98:	06 00 00 00 f8 08 05 00 00 ff                       ..........

00001ca2 <patch05>:
    1ca2:	00 02 01 00 07 38 00 00 08 01 06 00 00 00 f0 08     .....8..........
    1cb2:	05 00 00 ff                                         ....

00001cb6 <patch06>:
    1cb6:	00 02 04 00 07 3c 00 00 08 03 00 f0 0e 05 00 00     .....<..........
    1cc6:	ff                                                  .

00001cc7 <patch07>:
    1cc7:	00 09 aa 00 0a b4 00 02 04 00 07 5c 00 00 10 01     ...........\....
    1cd7:	06 00 00 00 f8 08 05 00 00 ff                       ..........

00001ce1 <patch08>:
    1ce1:	00 09 b1 00 0a 6f 00 02 00 00 07 5a 00 00 10 01     .....o.....Z....
    1cf1:	06 00 00 00 fa 3c 05 00 00 ff                       .....<....

00001cfb <patch09>:
    1cfb:	00 02 02 00 07 76 01 06 00 00 09 b4 00 0a de 00     .....v..........
    1d0b:	00 fe 3c 05 00 00 ff                                ..<....

00001d12 <patch10>:
    1d12:	00 09 3c 00 0a 18 00 02 04 00 07 57 00 00 08 01     ..<........W....
    1d22:	06 00 00 00 fc 3c 05 00 00 ff                       .....<....

00001d2c <patch11>:
    1d2c:	00 ff                                               ..

00001d2e <patch12>:
    1d2e:	00 09 b4 00 0a 08 00 02 02 00 07 01 00 00 08 03     ................
    1d3e:	00 f4 10 05 00 00 ff                                .......

00001d45 <patch13>:
    1d45:	00 02 00 00 07 01 00 00 08 03 00 f4 10 05 00 00     ................
    1d55:	ff                                                  .

00001d56 <patch14>:
    1d56:	00 02 01 00 07 01 00 00 08 03 00 f4 10 05 00 00     ................
    1d66:	ff                                                  .

00001d67 <patch15>:
    1d67:	00 ff                                               ..

00001d69 <patch16>:
    1d69:	00 09 aa 00 0a b4 00 02 04 00 07 5c 00 00 10 01     ...........\....
    1d79:	06 00 00 00 f8 08 05 00 00 ff                       ..........

00001d83 <patch17>:
    1d83:	00 09 b4 00 0a 24 00 02 03 00 07 56 00 00 10 01     .....$.....V....
    1d93:	06 00 00 00 fa 10 05 00 00 ff                       ..........

00001d9d <patch18>:
    1d9d:	01 02 00 00 07 38 00 00 09 04 00 f4 14 05 00 00     .....8..........
    1dad:	ff                                                  .

00001dae <patch19>:
    1dae:	00 ff                                               ..

00001db0 <patch20>:
    1db0:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1dc0:	00 fc 05 05 00 00 ff                                .......

00001dc7 <patch21>:
    1dc7:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1dd7:	05 00 00 ff                                         ....

00001ddb <patch22>:
    1ddb:	00 01 02 00 07 28 00 00 e2 01 00 f1 01 05 00 00     .....(..........
    1deb:	ff                                                  .

00001dec <patch23>:
    1dec:	00 ff                                               ..

00001dee <patch24>:
    1dee:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1dfe:	00 fc 05 05 00 00 ff                                .......

00001e05 <patch25>:
    1e05:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1e15:	05 00 00 ff                                         ....

00001e19 <patch26>:
    1e19:	00 01 02 00 07 46 00 00 e2 01 00 f1 01 05 00 00     .....F..........
    1e29:	ff                                                  .

00001e2a <patch27>:
    1e2a:	00 01 16 00 07 50 00 00 e2 01 00 f1 01 05 00 00     .....P..........
    1e3a:	ff                                                  .

00001e3b <patch28>:
    1e3b:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1e4b:	00 fc 05 05 00 00 ff                                .......

00001e52 <patch29>:
    1e52:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1e62:	05 00 00 ff                                         ....

00001e66 <patch30>:
    1e66:	00 01 02 00 07 28 00 00 e2 01 00 f1 01 05 00 00     .....(..........
    1e76:	ff                                                  .

00001e77 <patch31>:
    1e77:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1e87:	05 00 00 ff                                         ....

00001e8b <patch32>:
    1e8b:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1e9b:	00 fc 05 05 00 00 ff                                .......

00001ea2 <patch33>:
    1ea2:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1eb2:	05 00 00 ff                                         ....

00001eb6 <patch34>:
    1eb6:	00 01 02 00 07 28 00 00 e2 01 00 f1 01 05 00 00     .....(..........
    1ec6:	ff                                                  .

00001ec7 <patch35>:
    1ec7:	00 ff                                               ..

00001ec9 <patch36>:
    1ec9:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1ed9:	00 fc 05 05 00 00 ff                                .......

00001ee0 <patch37>:
    1ee0:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1ef0:	05 00 00 ff                                         ....

00001ef4 <patch38>:
    1ef4:	00 01 02 00 07 28 00 00 e2 01 00 f1 01 05 00 00     .....(..........
    1f04:	ff                                                  .

00001f05 <patch39>:
    1f05:	00 ff                                               ..

00001f07 <patch40>:
    1f07:	00 02 03 00 07 00 20 07 5a 00 09 b1 00 0a 68 00     ...... .Z.....h.
    1f17:	08 48 02 08 47 02 08 46 02 08 45 02 08 44 02 08     .H..G..F..E..D..
    1f27:	43 03 08 42 02 08 41 03 08 40 03 08 3f 03 08 3e     C..B..A..@..?..>
    1f37:	03 08 3d 03 08 3c 04 08 3b 03 08 3a 04 08 39 05     ..=..<..;..:..9.
    1f47:	08 38 03 08 37 05 08 36 05 08 35 05 08 34 06 08     .8..7..6..5..4..
    1f57:	33 02 08 32 06 08 31 05 08 33 02 08 32 06 08 31     3..2..1..3..2..1
    1f67:	00 09 b1 00 0a 6f 00 00 ff 05 08 33 02 08 32 06     .....o.....3..2.
    1f77:	08 31 05 08 33 02 08 32 06 08 31 05 08 33 02 08     .1..3..2..1..3..
    1f87:	32 06 08 31 05 08 33 02 08 32 06 08 31 05 08 33     2..1..3..2..1..3
    1f97:	02 08 32 06 08 31 05 08 33 02 08 32 06 08 31 05     ..2..1..3..2..1.
    1fa7:	05 00 00 ff                                         ....

00001fab <patch41>:
    1fab:	00 02 00 00 07 00 21 07 5a 00 08 47 01 08 46 01     ......!.Z..G..F.
    1fbb:	08 45 03 08 44 02 08 43 02 08 42 03 08 41 02 08     .E..D..C..B..A..
    1fcb:	40 03 08 3f 03 08 3e 03 08 3d 04 08 3c 02 08 3b     @..?..>..=..<..;
    1fdb:	04 08 3a 03 08 39 04 08 38 05 08 37 03 08 36 05     ..:..9..8..7..6.
    1feb:	08 35 05 08 34 05 08 33 06 08 32 02 08 31 06 08     .5..4..3..2..1..
    1ffb:	30 03 08 32 03 08 31 07 08 30 00 09 b1 00 0a 21     0..2..1..0.....!
    200b:	00 00 fe 03 08 32 03 08 31 07 08 30 03 08 32 03     .....2..1..0..2.
    201b:	08 31 07 08 30 03 08 32 03 08 31 07 08 30 03 08     .1..0..2..1..0..
    202b:	32 03 08 31 07 08 30 03 08 32 03 08 31 07 08 30     2..1..0..2..1..0
    203b:	03 08 33 04 08 32 06 08 31 05 05 00 00 ff           ..3..2..1.....

00002049 <patch47>:
    2049:	00 02 01 00 07 50 00 00 e2 01 00 f1 01 08 21 14     .....P........!.
    2059:	05 00 00 ff                                         ....

0000205d <DropWave>:
    205d:	ff 02 fe 03 fc 06 f6 17 17 39 3f ab af 8c a6 8a     .........9?.....
    206d:	aa 97 23 3a d7 20 c4 76 13 d4 b8 ac a4 95 9e a4     ..#:. .v........
    207d:	57 e3 01 e9 bb 7f 3d 57 28 43 e1 f1 a9 6f fc f6     W.....=W(C...o..
    208d:	0a a3 5d 57 45 29 17 ce 90 9b 80 3c 0f ed 64 9a     ..]WE).....<..d.
    209d:	a2 9e cb f2 4f 61 3a fe 7f cf 24 31 89 bc d8 0c     ....Oa:...$1....
    20ad:	37 76 fc 8e c6 83 ee 3f 8d f6 56 78 71 5f f8 95     7v.....?..Vxq_..
    20bd:	39 6c 4c 47 9a 13 75 44 03 cc 9a a6 59 f2 97 0a     9lLG..uD....Y...
    20cd:	c2 bf 4a 72 1d fa dc b8 bb 6d b8 f5 78 69 1a a6     ..Jr.....m..xi..
    20dd:	a8 e6 0f 18 06 22 f2 e7 2d f1 10 36 63 37 10 05     ....."..-..6c7..
    20ed:	d2 a5 c7 60 c6 2e e5 8a a4 a4 da f8 16 2c 66 38     ...`.........,f8
    20fd:	b6 3a da 47 25 c9 e5 e6 0f 1d 2e 4d 62 aa 13 d8     .:.G%......Mb...
    210d:	16 2e a9 c6 b2 d0 ab e3 d1 4e 24 da 13 e0 4a e7     .........N$...J.
    211d:	c9 c4 c2 b5 b8 c1 cc 38 f6 f3 f7 e6 2a fe ff f6     .......8....*...
    212d:	f0 d7 d4 b0 b8 34 e2 04 fe c0 d5 e7 01 1a 2b 46     .....4........+F
    213d:	4a 3c c0 1a ef 01 49 a4 b2 88 b2 b0 f4 06 35 a1     J<....I.......5.
    214d:	0c ff e3 5e e3 b9 ac ae b9 0b 52 57 69 c1 fa 1a     ...^......RWi...
    215d:	94 09 3b 5e 59 43 f1 ac c5 ec a0 33 e6 b2 30 51     ..;^YC.....3..0Q
    216d:	5d 46 12 b2 f2 53 b4 46 50 a7 a7 cf 1d 36 36 39     ]F...S.FP....669
    217d:	46 4c 54 53 58 54 4f 3b 11 c2 97 08 77 bf be 62     FLTSXTO;....w..b
    218d:	08 9f 9e e5 2f 3e 40 4c 5a 65 6d 73 79 7c 7d 7b     ..../>@LZemsy|}{
    219d:	69 22 b1 cb 75 0a 98 2d 5d 0b a8 84 9d ac a9 a8     i"..u..-].......
    21ad:	ac b3 c5 de fe 1c 2d 28 00 b4 a0 34 5d a8 c3 54     ......-(...4]..T
    21bd:	5a 04 ab 96 9f 9d 93 90 92 a1 bc e6 16 3c 4c 4d     Z............<LM
    21cd:	26 cd a1 34 5f b8 b4 4a 4b e6 f1 9e af aa ac bb     &..4_..JK.......
    21dd:	d3 fd 38 5c 58 34 1e 2a 5b 72 10 9a f8 6f 40 cd     ..8\X4.*[r...o@.
    21ed:	8f 9a b9 c4 ce dc fa 23 51 5f 2e d4 a3 b0 c7 ba     .......#Q_......
    21fd:	97 a4 18 5c 05 9c 9a de 17 2c 36 43 55 63 68 4e     ...\.....,6CUchN
    220d:	07 b6 b7 12 5e 5c 49 50 63 3b d4 a9 ef 44 66 58     ....^\IPc;...DfX
    221d:	46 3c 33 20 04 d7 ad b2 09 5c 23 a8 9d db 02 ed     F<3 .....\#.....
    222d:	b4 97 bf 0b 44 50 44 35 2f 28 1c 03 e1 be c4 04     ....DPD5/(......
    223d:	31 ff e2 0c 1c 00 ea f5 f8 e0 ec 16 3d 4e 4e 50     1...........=NNP
    224d:	52 4d 3e 1a e2 b3 d3 45 3f b1 c8 41 5b 34 0f 1b     RM>....E?..A[4..
    225d:	3d 53 59 51 46 3f 37 2c 1e 07 e6 c1 b1 e7 48 24     =SYQF?7,......H$
    226d:	aa f1 4e 15 c7 a4 ae b8 b1 b1 bc ca d5 de eb fa     ..N.............
    227d:	0f 29 45 4d 19 c0 db 53 07 b7 17 49 2d f7 dc e5     .)EM...S...I-...
    228d:	f0 f2 f3 f5 f8 fe 05 10 22 38 4c 3e f5 b5 19 4a     ........"8L>...J
    229d:	cc de 3c 3a 07 d4 ca d3 d1 cb ca c9 cc cf d3 db     ..<:............
    22ad:	eb 04 26 32 fe c9 17 2f d9 ec 29 2e 0b e5 db dd     ..&2.../..).....
    22bd:	d9 d5 d3 d3 d2 d1 d1 d2 d4 de f6 19 12 e0 f9 16     ................
    22cd:	fa f7 07 09 f9 e3 d6 cc c0 b6 b0 ae b0 b6 bf cb     ................
    22dd:	d4 db e0 e3 05 21 ea d8 1f 30 01 d1 c1 cd d5 d5     .....!...0......
    22ed:	d7 db e4 f2 05 19 29 32 32 20 ed c2 01 4a f3 ba     ......)22 ...J..
    22fd:	03 44 42 12 ed e1 dc d2 c7 bb b6 b6 c3 db f4 00     .DB.............
    230d:	f5 d0 b6 f8 47 fd b5 ef 3c 4e 2b 0a fd f4 e6 d6     ....G...<N+.....
    231d:	c5 bb c5 e9 16 35 3c 3f 3b 13 cf db 37 40 f1 b9     .....5<?;...7@..
    232d:	bc da ed f2 fb 0b 20 37 3f 2a f6 ca ca de e4 d2     ...... 7?*......
    233d:	bd d7 1e 32 fa c6 c9 e7 00 0a 10 1a 26 30 2c 13     ...2........&0,.
    234d:	ea de fe 1d 22 1d 1b 1a 08 ed ed 07 17 15 0c 05     ...."...........
    235d:	00 f7 ef e4 dc ea 13 2d 05 cd d7 0b 2c 29 0b db     .......-....,)..
    236d:	bc ce fe 22 2e 2c 2a 27 21 1d 1d 1f 08 dd e6 34     ...".,*'!......4
    237d:	2c de b8 bb c5 bf c2 e1 0b 28 37 3e 44 46 44 37     ,........(7>DFD7
    238d:	19 e7 c4 ee 43 1a b9 e2 33 4d 41 38 43 47 39 22     ....C...3MA8CG9"
    239d:	0f ff f1 e2 d3 c4 bb cb 05 3c 05 b5 0b 40 f1 bd     .........<...@..
    23ad:	c2 de e3 d1 c3 bd bb ba b8 b8 b8 bf cf f3 25 36     ..............%6
    23bd:	eb bf 28 2d cd d5 10 3d 41 38 3a 40 3f 3d 39 35     ..(-...=A8:@?=95
    23cd:	2e 22 0d ec ca d5 28 2b c0 fc 38 ef c3 cb f1 04     ."....(+..8.....
    23dd:	00 ff 03 06 07 06 03 fc ed d6 c2 db 2c 20 bd 03     ............, ..
    23ed:	36 eb c4 d3 ff 15 15 18 1e 24 27 29 2a 29 21 0d     6........$')*)!.
    23fd:	e7 c8 f6 41 ee cd 2c 21 e2 be cb e8 f2 f4 f5 fc     ...A..,!........
    240d:	06 10 19 20 22 19 fd d2 d6 2e 21 c4 f5 37 26 ef     ... ".....!..7&.
    241d:	c9 c7 cc c8 c5 c5 cb d5 e4 f5 00 00 ec cb d2 25     ...............%
    242d:	27 c9 e5 2f 35 08 de d4 d2 cc c6 c4 cb dd f8 13     '../5...........
    243d:	23 26 19 ee ca 05 3e f8 c2 e3 1f 3a 36 2f 2e 2a     #&....>....:6/.*
    244d:	1d 04 e5 ce d2 ea ff ff e6 c5 da 28 2a e1 c1 de     ...........(*...
    245d:	0a 1e 23 2a 33 38 34 1c f2 d2 d8 f6 09 ff df c3     ..#*384.........
    246d:	f4 33 f9 f1 df 03 1f 26 2f 32 37 2e 0e e0 d2 ff     .3.....&/27.....
    247d:	30 35 26 27 36 2c f7 d0 e0 0b 27 2d 2e 30 2f 24     05&'6,....'-.0/$
    248d:	08 e2 d2 fe 35 1c dc c5 cf d5 cd d3 f8 1f 2e 28     ....5..........(
    249d:	1c 14 0b fd ed d9 cd e0 15 2f f3 c6 f4 2a 39 31     ........./...*91
    24ad:	2c 26 0f f1 db d3 d2 d2 d6 de ef 0c 29 26 ef cd     ,&..........)&..
    24bd:	12 34 f4 ca d3 e8 e8 d6 ca c9 cd d3 d9 df e8 f4     .4..............
    24cd:	06 1f 2e 16 da e2 2f 16 d3 db 06 22 21 17 11 0a     ....../...."!...
    24dd:	01 f9 f1 e9 e1 da d4 d8 f0 16 16 e9 eb 03 17 1a     ................
    24ed:	f0 e6 fd 0c 16 1c 1e 1d 1e 22 28 2c 2d 26 0c e4     ........."(,-&..
    24fd:	e3 21 1a d9 f4 25 21 00 e6 e2 e5 e1 dd da da db     .!...%!.........
    250d:	de e2 ed fc 11 1f 0c e1 f6 24 fa e2 02 1f 23 14     .........$....#.
    251d:	0b 0b 0a 07 02 ff fd fc fc 01 0b 19 1b fa e2 0c     ................
    252d:	1b ef e7 03 1c 1d 13 10 11 11 10 0d 0b 07 02 00     ................
    253d:	03 0c 16 0f f0 f2 15 08 ee f4 06 13 13 0c 08 07     ................
    254d:	03 01 fe fa f6 f2 f0 ee f0 f8 05 0b fb f6 ff 04     ................
    255d:	04 02 04 08 0c 10 11 11 0f 08 fc f0 eb ef f4 f7     ................
    256d:	f8 f5 fb 0c 05 ed ee 00 10 16 14 12 11 0e 08 fe     ................
    257d:	f2 ea ea f3 ff 04 00 f6 e8 ec 0a 1a 04 e7 e1 ec     ................
    258d:	f7 fd 02 08 10 19 1d 15 02 eb e4 ec f5 f4 ea de     ................
    259d:	ea 0b 1c 0b ee e0 e3 eb f0 f4 fb 06 13 1b 11 f6     ................
    25ad:	e4 f1 0b 17 16 11 07 f4 e7 ef 02 11 18 16 14 11     ................
    25bd:	0d 05 fb f2 ee f7 09 12 02 ec ea f1 f5 f1 ee f2     ................
    25cd:	fd 08 0e 0e 0d 0c 0c 08 04 ff f9 f4 f6 02 0e 04     ................
    25dd:	f2 f0 f8 fe fe f7 ec e4 e5 ea f1 f9 02 09 12 1b     ................
    25ed:	23 24 15 f5 e3 fd 20 0e ea ea ff 0c 0d 0a 0c 10     #$.... .........
    25fd:	13 11 0d 08 03 fa f2 e6 dd de f9 1b 15 e1 e5 1a     ................
    260d:	20 fb df d9 df df dd db df e0 e5 e7 ed f2 fd 0a      ...............
    261d:	1c 1f 0c e0 ee 11 0f ef f4 e0 21 29 cd cb e9 0b     ..........!)....
    262d:	18 1d 25 2a 1e 21 22 28 27 27 1d 0a e3 cc ff 3e     ..%*.!"(''.....>
    263d:	e8 e4 3a 07 c5 cb f3 16 1a 22 32 2f 29 2c 33 39     ..:......"2/),39
    264d:	3b 3c 3b 34 12 da e1 38 0b d0 20 39 02 d0 c4 d0     ;<;4...8.. 9....
    265d:	d0 ce dc e4 e4 e7 f2 02 11 19 17 03 db c8 0f 2f     .............../
    266d:	da e7 32 2a f7 d3 cf ce c4 c7 d4 d6 d9 e3 f7 0d     ..2*............
    267d:	20 27 27 13 e5 c7 0e 2f e2 e1 2f 27 eb f6 d7 d8      ''..../../'....
    268d:	ce d4 e5 f5 03 22 2d 29 13 04 07 21 34 0f d3 fb     ....."-)...!4...
    269d:	34 1d e9 d2 d3 d8 d9 ea fc 08 15 27 2b 12 e4 cb     4..........'+...
    26ad:	d2 e1 e2 d6 db 0e 2f 05 d0 cc e6 ff 11 22 2e 2e     ....../......"..
    26bd:	2c 2b 20 ff d8 da 0a 31 33 2d 2f 31 17 e3 cf f3     ,+ ....13-/1....
    26cd:	1f 34 35 2f 24 14 05 fa ea d8 dc 07 33 17 db d4     .45/$.......3...
    26dd:	ec f9 f3 e3 d7 e0 fe 1b 29 27 1d 12 0a 05 fe f3     ........)'......
    26ed:	e3 e4 02 1c 03 f4 0a 0a f4 ec fa ff ee f2 0c 1f     ................
    26fd:	26 27 28 27 22 1b 0c f2 da e9 22 25 e0 ec 24 26     &'('"....."%..$&
    270d:	0e 05 10 1e 23 2b 30 2b 22 19 13 0e 05 f5 e1 d7     ....#+0+".......
    271d:	f4 29 19 d6 fb 2c 04 d9 d1 d8 d6 cf d7 e5 e7 e9     .)...,..........
    272d:	ed f3 fa 04 12 22 29 0f dc e4 28 03 d7 13 31 17     .....")...(...1.
    273d:	f9 ef f5 f2 f0 fb 01 02 01 03 08 12 1e 2a 23 fa     .............*#.
    274d:	d5 09 26 e2 f1 2b 22 ff e7 e5 e5 dc de e6 e6 e4     ..&..+".........
    275d:	e3 e5 e9 f2 00 15 20 04 db 03 1b e2 f3 22 20 08     ...... ......" .
    276d:	f2 ef ee e5 e6 eb ea e7 e6 e5 e6 e9 f0 02 13 08     ................
    277d:	ea fc 0a f4 fc 0b 0a fb ea e2 dd d6 d6 d9 dc df     ................
    278d:	e4 ea f1 f5 f6 ee e6 fa 1a f3 e4 15 1b fa e0 dd     ................
    279d:	e2 e1 e4 ee f3 f5 fa 03 0e 17 1b 1a 0f f4 da fa     ................
    27ad:	28 fe dd 06 27 1e 05 f9 f4 e7 df e1 e0 dd dc e3     (...'...........
    27bd:	f1 ff 04 fc e5 d4 f8 20 fc dd fc 1e 1f 11 07 00     ....... ........
    27cd:	f2 e8 e6 e3 e0 e7 fa 10 1f 20 1f 1a 04 e1 ea 1a     ......... ......
    27dd:	1f fb e4 e3 ea ef f9 07 0e 13 1a 1d 11 f6 e2 e3     ................
    27ed:	ef f6 f0 e6 ef 0f 17 fb e4 e4 ee f8 02 0d 13 14     ................
    27fd:	14 11 02 f1 ee fe 0f 14 13 12 0e 02 f5 f6 03 0c     ................
    280d:	0e 0d 06 ff f9 f4 f1 f0 f8 0c 16 00 e7 ef 06 12     ................
    281d:	14 0b f3 dc e1 fb 12 1d 1f 19 10 09 08 0a 0d 03     ................
    282d:	ec f7 1d 12 ec df e1 df da e3 f8 0a 14 1b 1e 1e     ................
    283d:	1d 1c 17 0a f2 e2 fa 25 0a e1 fe 1d 1f 19 1f 26     .......%.......&
    284d:	20 15 0f 08 01 f9 f3 ed e6 e1 e9 07 21 00 dd 0b      ...........!...
    285d:	17 ea dc ea f4 ef e9 ea e5 dd db dc dd de e0 e8     ................
    286d:	fa 13 19 f0 e0 14 0a df f0 11 1e 1c 1d 23 1e 18     .............#..
    287d:	19 1b 19 16 10 05 f4 e4 f0 1c 10 e2 0d 19 eb dc     ................
    288d:	eb fc fe ff 07 05 00 ff 00 00 fc f5 e9 e1 f3 1c     ................
    289d:	09 e0 0d 15 e9 de f0 03 07 0a 13 12 0e 0f 11 13     ................
    28ad:	13 0f 03 f0 e4 03 20 f0 f2 1e 09 e6 de eb f4 f5     ...... .........
    28bd:	fd 05 04 04 08 0d 11 12 0c fa e5 ee 1b 09 e4 07     ................
    28cd:	1e 0a f0 e7 e6 e1 df e6 e9 ea ed f3 fb 00 fe f2     ................
    28dd:	e1 ec 17 08 e3 00 1c 11 fa f0 ec e3 e0 e5 e7 eb     ................
    28ed:	f3 00 0c 12 11 06 ed e2 09 1a f4 e7 fd 12 17 1a     ................
    28fd:	1d 18 0e 06 fb ef e7 ed fa 04 02 f3 e2 f3 15 0c     ................
    290d:	eb e6 f3 02 0b 16 1c 1b 17 13 05 f2 e6 f1 00 0a     ................
    291d:	03 f3 e2 01 12 f7 fb f4 05 0a 13 1b 1c 18 11 fd     ................
    292d:	ea eb 08 1c 1c 16 18 19 0c f1 e7 f4 08 15 1c 1d     ................
    293d:	1a 12 0a fc ec ea 05 1d 0c ee e6 e7 e4 e3 ef 04     ................
    294d:	13 16 13 0d 06 fe f9 f4 ec e9 f5 11 17 f5 e7 00     ................
    295d:	13 16 19 1b 14 01 f2 ec e9 ea ec ef f3 fb 08 15     ................
    296d:	0f f0 e7 0c 10 f0 e9 f2 f6 f0 ec eb e8 e5 e8 ec     ................
    297d:	f0 f4 f9 03 0f 15 05 e8 f4 16 01 e9 f8 0a 10 0e     ................
    298d:	10 0d 04 fd fc f9 f6 f3 f0 ec ee fa 0b 08 f7 f8     ................
    299d:	fb 0b 06 f7 fe 05 08 0a 0d 10 10 0f 11 13 15 16     ................
    29ad:	13 04 f1 f3 13 0a ed 02 17 0b fa f2 f1 ed ea ee     ................
    29bd:	f0 ef ee ee ef f3 fb 07 12 06 ea fb 12 f6 ed 06     ................
    29cd:	16 13 0c 0a 09 02 01 02 03 01 01 01 04 0a 12 10     ................
    29dd:	f9 ee 0c 0c ef f5 0a 13 0f 0d 0d 09 05 04 05 03     ................
    29ed:	01 ff ff 01 08 0f 0b f6 f4 0c 06 f2 f7 05 0d 0c     ................
    29fd:	0b 0c 08 04 03 02 fe fb f8 f7 f7 fa 02 08 02 f6     ................
    2a0d:	fc 07 03 fd fc fe ff 01 05 09 0a 08 03 fb f4 f3     ................
    2a1d:	f5 f8 fb fa f6 ff 0c 01 f0 f3 01 0a 0e 0f 0e 0a     ................
    2a2d:	04 00 fb f5 f1 f3 fb 04 07 06 fd ef ef 04 11 05     ................
    2a3d:	f4 ee f1 f5 fb 03 09 0b 0e 10 0c 01 f3 ee f2 f9     ................
    2a4d:	fa f5 ef f5 07 10 04 f5 ed ec ef f4 fc 03 08 0e     ................
    2a5d:	0f 07 f6 ec f5 04 0e 11 10 08 f8 ec f0 ff 0c 12     ................
    2a6d:	12 10 0b 07 03 fe f7 f2 f7 07 11 07 f6 ef ef f0     ................
    2a7d:	f0 f1 f8 02 09 0c 0b 08 04 00 fd fb f8 f5 f7 00     ................
    2a8d:	0a 06 f9 f7 ff 04 06 07 07 04 fe fa fa fb fc fd     ................
    2a9d:	ff 00 03 06 09 06 fc f3 fc 0c 07 f4 f2 fb 02 02     ................
    2aad:	01 fd f7 f1 ef f1 f4 f7 f9 f9 f8 f6 f5 fc 0a 09     ................
    2abd:	f3 f3 0c 0c fb f0 ef ef ec ec f0 f1 f0 f0 f1 f3     ................
    2acd:	f7 fb 03 0b 0e 00 f9 f6 08 f3 0f 15 e9 e7 f3 04     ................
    2add:	0b 0f 14 13 0e 10 12 14 14 13 0f 05 f2 e5 ff 1f     ................
    2aed:	f4 f2 1d 02 e1 e6 fc 0a 0c 13 19 15 14 17 1a 1d     ................
    2afd:	1e 1e 1e 1a 09 ed f1 1c 05 e8 10 1c 00 e7 e4 e8     ................
    2b0d:	e6 e8 ef f1 f1 f3 f9 01 08 0c 0b 01 ed e4 08 18     ................
    2b1d:	ed f4 18 14 fb ea e9 e6 e1 e5 e9 e9 ea ef f9 04     ................
    2b2d:	0e 12 12 07 f1 e4 08 17 f0 f0 16 13 f4 fb ed e9     ................
    2b3d:	e5 ea f2 f7 00 0f 15 15 0b 05 06 12 1a 05 e9 ff     ................
    2b4d:	1a 0e f5 ea e9 e9 ec f6 fd 02 08 12 16 0a f4 e6     ................
    2b5d:	e8 ef ef ea ee 08 17 01 e8 e6 f3 ff 09 12 16 15     ................
    2b6d:	15 16 10 00 ec ed 05 18 19 16 16 17 0a f0 e8 fa     ................
    2b7d:	10 1a 1b 17 10 08 02 fe f6 ec ed 03 19 0c ee e9     ................
    2b8d:	f3 fa f8 f1 eb f0 ff 0f 15 13 0d 08 04 03 00 f9     ................
    2b9d:	f1 f1 00 0d 02 f9 04 05 fb f8 ff 00 f7 fa 07 10     ................
    2bad:	13 14 14 13 10 0d 06 f8 ed f4 11 12 f0 f4 10 13     ................
    2bbd:	09 05 0b 0f 12 16 18 14 10 0c 0a 07 02 fa f0 eb     ................
    2bcd:	f9 14 0c eb fd 15 01 ed e9 ec e9 e7 ed f2 f2 f4     ................
    2bdd:	f6 f9 fd 02 09 11 14 07 ee f2 14 01 ec 0a 18 0a     ................
    2bed:	fc f9 fa f7 f9 fe 00 00 00 01 04 08 0f 15 11 fd     ................
    2bfd:	ea 04 13 f1 f9 15 10 fe f4 f4 f1 ed f0 f3 f2 f1     ................
    2c0d:	f1 f2 f4 f9 00 0a 10 02 ed 01 0d f1 f9 11 10 02     ................
    2c1d:	f8 f7 f4 f1 f3 f5 f4 f2 f2 f2 f2 f4 f8 01 09 04     ................
    2c2d:	f5 fe 05 fa fe 06 05 fc f4 f1 ee eb eb ec ed ef     ................
    2c3d:	f1 f5 f8 fa fb f7 f3 fd 0d f9 f2 0a 0d fc f0 ef     ................
    2c4d:	f1 f0 f2 f7 f8 f9 fc 01 07 0b 0d 0d 07 fa ed fd     ................
    2c5d:	14 ff ee 02 13 0e 02 fd f9 f2 f0 f1 f0 ee ed f1     ................
    2c6d:	f8 ff 02 fe f2 ea fc 12 fe ed fe 10 10 08 04 ff     ................
    2c7d:	f7 f4 f3 f1 ee f1 fb 08 0f 11 11 0e 01 ee f4 0f     ................
    2c8d:	11 fe f1 ef f2 f6 fc 03 06 09 0e 10 0a fc ef ef     ................
    2c9d:	f5 f8 f5 f0 f7 0b 0d fb ee ef f5 fc 03 0a 0c 0d     ................
    2cad:	0d 0b 01 f4 f2 00 0e 10 0e 0e 0d 06 fa f4 f9 03     ................
    2cbd:	0a 0c 0c 09 06 04 02 fe fb fd 05 06 fe fa fe 01     ................
    2ccd:	01 00 fb f5 f7 ff 07 0c 0f 10 0f 0d 08 00 f4 f1     ................
    2cdd:	02 0f 03 f7 fb fd fa f8 f6 f6 fa 03 0b 0f 10 10     ................
    2ced:	0f 0e 0b 04 f9 f1 fd 12 05 f0 fd 0d 0f 0e 11 12     ................
    2cfd:	0e 09 06 02 fe fb f8 f5 f2 f0 f5 04 10 ff ee 05     ................
    2d0d:	0b f6 ee f5 f8 f5 f4 f4 f1 ee ed ee ee ef f0 f4     ................
    2d1d:	fd 0a 0c f8 ef 09 05 ef f8 08 0e 0d 0f 11 0d 0c     ................
    2d2d:	0d 0d 0d 0b 08 04 fb f3 f3 05 0f 0b 04 02 01 00     ................

00002d3d <ScoreWave>:
    2d3d:	00 ff fe 04 fa ff 03 fa 04 05 1c f8 c9 11 1c 03     ................
    2d4d:	00 f1 b2 24 df e3 01 df 12 17 c2 10 fa cb 11 f4     ...$............
    2d5d:	f0 12 cd f6 1c d1 0c 19 d1 f4 eb d5 30 f0 ff 1f     ............0...
    2d6d:	c3 dc 13 d6 26 18 e5 0f d3 cd 20 ec 12 30 e1 dd     ....&..... ..0..
    2d7d:	ec ca 26 15 08 22 ee c1 ef dd 14 35 04 13 ec bc     ..&..".....5....
    2d8d:	ed 01 12 3c 0b e9 eb c8 fa 11 13 30 18 d1 da d8     ...<.......0....
    2d9d:	f7 30 1d 1a 06 d2 cd ed f6 2d 27 09 00 d0 ce fa     .0.......-'.....
    2dad:	0d 2b 30 f3 e6 db dd 0f 15 25 26 fa c9 de e1 19     .+0......%&.....
    2dbd:	2d 1e 11 ed c7 dc f8 0f 30 1a 02 eb ca e2 07 20     -.......0...... 
    2dcd:	31 19 e1 e4 dc f9 15 21 25 15 e0 cc e3 fa 29 29     1......!%.....))
    2ddd:	18 02 d9 cb eb 0a 1e 2f 0a f6 d9 d7 f1 17 27 2b     ......./......'+
    2ded:	00 d7 e1 e9 09 1e 27 17 00 d3 d2 f2 0f 2d 22 0d     ......'......-".
    2dfd:	ee d4 d4 01 17 25 25 fb e9 d9 e8 ff 27 22 23 eb     .....%%.....'"#.
    2e0d:	d6 e8 f9 11 29 20 06 f1 c8 e4 03 17 2d 1b fe e4     ....) ......-...
    2e1d:	d2 e0 19 1a 2b 13 ec e4 e8 ec 14 29 1e 17 d5 dd     ....+......)....
    2e2d:	f5 01 1d 2d 0e 02 de ca fd 08 1d 2f 0d f1 e2 cf     ...-......./....
    2e3d:	fc 23 1b 2f fb e5 ec ec f4 2b 1d 22 fd ce ec fe     .#./.....+."....
    2e4d:	04 2f 1e 06 f6 cf dc 11 04 2e 22 00 e9 dd d6 1c     ./........".....
    2e5d:	1c 27 1d ea e7 f8 e6 0e 2d 18 18 e4 d0 ff fa 15     .'......-.......
    2e6d:	30 13 ff ea c8 fc 10 0d 35 12 f2 eb d8 eb 2d 1a     0.......5.....-.
    2e7d:	2c 0a de f5 f5 ea 2a 27 0f 0f cf e2 06 f9 27 30     ,.....*'......'0
    2e8d:	00 f3 d2 cf 19 03 fd 22 e3 0e 1c 18 d1 f4 00 f6     ......."........
    2e9d:	0a d9 f9 ff d8 ff dc 0c 0b d5 18 d6 f4 ff f1 0c     ................
    2ead:	ca fe fd d3 1e e4 f2 ef db 1d e2 0e 04 c3 0b e0     ................
    2ebd:	13 0c f5 04 bb 05 00 f5 2e e1 ee d1 e8 29 fc 24     .............).$
    2ecd:	fc c3 ef e3 21 16 06 01 c4 ef f4 16 36 ef f6 c8     ....!.......6...
    2edd:	e7 1b 0d 35 ff cc de e1 20 1f 16 07 c9 db ef 1e     ...5.... .......
    2eed:	32 08 03 c6 dc 02 0f 3c 03 e4 d8 d5 17 17 26 0e     2......<......&.
    2efd:	ce d9 e9 17 2a 1d 10 ca d1 ec 12 3d 0a 00 d6 cc     ....*......=....
    2f0d:	04 0e 34 15 de e1 de 0a 20 29 17 d7 ce e1 12 30     ..4..... ).....0
    2f1d:	1b 14 d6 c8 ef 0b 39 1e f7 e5 d0 fb 16 2b 1e e7     ......9......+..
    2f2d:	d4 df 03 20 26 22 dd ca e2 05 31 23 0d ec c4 ea     ... &"....1#....
    2f3d:	0f 26 23 f8 e3 dd ec 14 2e 26 ed d3 dc fc 22 27     .&#......&...."'
    2f4d:	20 f0 c3 e2 02 22 2a 0a f3 d2 df 10 27 2a 06 e2      ...."*.....'*..
    2f5d:	db e6 10 28 2a fa d1 e1 f3 17 2f 15 ff ce df 0c     ...(*...../.....
    2f6d:	18 2e 18 ee dc d4 06 26 2b 0f e5 df e2 08 29 20     .......&+.....) 
    2f7d:	11 d5 e2 fc 08 2f 1c ff de cd 06 18 2b 1f f5 e0     ...../......+...
    2f8d:	d3 fc 23 23 20 e2 e7 ea f6 2e 16 0f e7 d1 05 00     ..## ...........
    2f9d:	28 2a 03 e8 c9 fa 17 23 2c f5 ee d4 ef 25 12 24     (*.....#,....%.$
    2fad:	f0 e0 ff e8 2a 25 11 f8 c7 fe 00 1e 31 04 f9 c7     ....*%......1...
    2fbd:	f1 16 11 37 f7 f1 ec de 29 14 23 06 d0 02 e4 19     ...7....).#.....
    2fcd:	2c 10 08 c6 f9 00 0f 39 fe 08 d4 e4 20 02 34 0a     ,......9.... .4.
    2fdd:	e5 f8 d0 1c 1f 20 17 cf fd e6 09 33 09 1a cc f0     ..... .....3....
    2fed:	0c f6 3b 07 fd eb d1 1d 0a 2c 1e e3 f8 d1 09 25     ..;......,.....%
    2ffd:	19 26 d3 f9 ef f2 39 04 17 e4 de 1b f1 33 21 f8     .&....9......3!.
    300d:	f7 c7 0e 13 1f 2e e6 fa da f3 2d 08 2a e4 eb 0b     ..........-.*...
    301d:	e3 38 1d 07 f7 c9 2d ea e8 fa f3 2b fc f0 fd f6     .8....-....+....
    302d:	04 fa 13 d4 f9 ed 0e fb cf 1e c0 04 e6 0e d4 02     ................
    303d:	f3 e4 17 cf 0a c9 1c d5 1f d9 ea ff e4 1f e2 0f     ................
    304d:	b2 26 d9 24 f9 eb df ea 25 f1 2b c0 ef d7 27 0d     .&.$....%.+...'.
    305d:	06 ef c5 04 f6 3b e7 f9 c1 06 08 1e 13 d0 df e2     .....;..........
    306d:	30 08 22 d9 d0 ee 17 26 fd f7 c3 fb 03 36 06 e5     0."....&.....6..
    307d:	d9 f5 1a 18 21 d6 d9 e2 23 1e 19 ec cc f2 07 35     ....!...#......5
    308d:	06 f9 ca ed 09 2b 15 e3 e3 e4 1a 1c 27 e2 ce e7     .....+......'...
    309d:	14 24 10 fc c7 e5 05 32 10 f6 da e2 0e 1e 1f e9     .$.....2........
    30ad:	db e0 14 1d 23 f7 cb ee 08 29 13 03 cc de 03 2a     ....#....).....*
    30bd:	20 f7 e6 df 09 1c 27 f4 d8 e4 04 23 20 00 cf e7      .....'....# ...
    30cd:	01 28 1f 06 dc d0 03 20 22 f9 ed d9 fb 1c 29 05     .(..... ".....).
    30dd:	d3 ea fd 1d 18 0d d7 d5 ff 20 28 06 ed d5 01 16     ......... (.....
    30ed:	28 0b e3 e0 f0 1c 23 15 d9 ed f5 1a 24 11 e4 cc     (.....#.....$...
    30fd:	ff 14 30 0a f4 d6 f0 19 27 17 e1 ea e4 19 20 16     ..0.....'..... .
    310d:	e2 e0 f7 0d 2c 14 f7 c6 ff 0e 26 10 f7 dc de 18     ....,.....&.....
    311d:	23 26 e1 f1 e8 0d 1c 1d f4 cf fa 01 31 15 03 d4     #&..........1...
    312d:	f5 0a 25 27 f4 e6 d2 14 1e 29 ef ee e8 fb 2d 1c     ..%'.....)....-.
    313d:	05 c8 fd f8 2c 1a 05 da dd 11 1b 32 f6 f1 d1 0a     ....,......2....
    314d:	1d 22 ff de f1 ea 30 1e 13 cd fb fd 1b 28 04 e9     ."....0......(..
    315d:	c9 14 12 39 fc f4 de f6 24 1f 18 d1 f9 df 2d 1f     ...9....$.....-.
    316d:	13 df ea 02 0c 3e 01 f7 c1 10 0e 2c 0c ee e6 db     .....>.....,....
    317d:	32 17 2a ce 00 e2 1d 25 0f f1 cc 0f fa 47 02 01     2.*....%.....G..
    318d:	c9 06 12 1f 24 df f4 cb 35 14 31 db f9 ee 06 3a     ....$...5.1....:
    319d:	07 06 ba 19 ef 44 0b fe d6 ee 21 13 3b d7 ff c5     .....D....!.;...
    31ad:	2c 16 20 ef e5 02 f1 48 ff 0f bc 18 ff 17 04 fc     ,. ....H........
    31bd:	0d fe 07 f5 0e 07 ef eb 00 f7 fd ff f8 e7 05 f9     ................
    31cd:	ef 03 f4 fa 11 f6 ed 0d f0 eb 05 f9 fa 07 ec f2     ................
    31dd:	0d ec f6 0d f4 ed 09 e7 fe 0d f0 ff 11 e0 f7 09     ................
    31ed:	e8 09 0b f0 05 ff de 04 06 ef 10 08 ef f8 f5 e6     ................
    31fd:	0e 06 f9 0f 05 e0 f9 f5 f3 15 07 fa 0d f0 e2 05     ................
    320d:	f8 02 18 01 f6 fd e7 f4 0d 00 0d 10 f8 eb f3 ef     ................
    321d:	03 12 08 0a 08 ed e9 fa f6 0c 15 03 01 fe e5 f5     ................
    322d:	03 ff 13 10 f7 f7 f2 ec 07 09 08 13 02 eb f0 f1     ................
    323d:	fb 12 0d 0a 08 f5 e6 f3 fa 06 16 0c fe fd ee eb     ................
    324d:	02 02 0d 17 00 f2 f6 ed fc 0d 08 11 0d f1 eb f2     ................
    325d:	f6 0b 12 0c 0b fc e9 eb f8 03 13 14 06 fb f2 e9     ................
    326d:	f8 03 0b 16 0e f5 f1 ef f3 07 0d 0e 12 fd e9 f0     ................
    327d:	f4 01 12 10 0c 06 ee e9 f1 ff 0d 16 0d 00 f4 ee     ................
    328d:	ef fd 0c 12 13 02 ed ef f2 fc 0c 12 10 0b ef ea     ................
    329d:	f1 fd 0a 15 0f 09 f8 e9 ee f8 09 13 12 06 f8 ef     ................
    32ad:	f0 f5 07 11 12 0b f5 eb f3 f7 03 14 10 0c fd e7     ................
    32bd:	ec fb 03 10 17 07 00 ef eb f3 07 0d 15 0c fa f1     ................
    32cd:	f3 f3 ff 12 10 0c fd ea f0 fc fc 10 16 09 04 ef     ................
    32dd:	e5 f8 02 08 1a 0c 00 fa eb ed 03 0a 11 13 fe f4     ................
    32ed:	f4 f4 f8 10 11 0d 04 ef ea fd fd 07 1a 0d 02 f9     ................
    32fd:	e4 ef 07 04 14 17 ff fa f3 e7 fc 0e 0c 16 06 f3     ................
    330d:	f5 f8 f1 0b 14 0e 0a f6 e7 f9 01 00 18 15 04 fc     ................
    331d:	ec e5 04 0a 0b 1c 09 f4 f8 ea ee 11 0e 12 13 f6     ................
    332d:	ef fb ef 00 19 0f 0d 00 e8 f0 03 fc 10 1b 08 fd     ................
    333d:	f4 e3 f8 14 06 1a 10 e7 0c 13 0f 09 fd e5 05 0b     ................
    334d:	00 01 ee e9 09 eb fc f1 f9 13 ee f7 08 e8 01 fb     ................
    335d:	fc 06 e7 ff 04 eb 0b fc f0 fc ea 02 06 f1 13 ed     ................
    336d:	ee 04 eb 0f 04 f5 06 df f9 07 f8 17 00 ed f7 e3     ................
    337d:	06 0f fe 13 f2 e5 f6 ef 14 13 fd 07 e6 ec 00 fb     ................
    338d:	1d 09 f4 f6 e4 fd 0b 0a 1b fb e7 ee ed 0b 13 0a     ................
    339d:	0e e9 e5 f5 fa 1a 13 ff fc e4 f1 00 06 20 05 f0     ............. ..
    33ad:	f0 ea 03 0b 11 17 f2 e6 ee f4 11 12 0d 07 e4 e9     ................
    33bd:	f6 03 1c 0d fe f3 e5 f6 03 0e 1d fe ee ee f2 08     ................
    33cd:	0d 14 10 ec e6 f0 fe 12 12 0d fe e2 ec fb 0a 19     ................
    33dd:	09 fb ef e8 fb 07 13 18 fa ec f0 f7 0a 0f 14 08     ................
    33ed:	e9 e6 f6 05 14 12 09 f8 e3 ee 01 0e 15 08 f7 ec     ................
    33fd:	ec fe 0d 15 10 f7 e9 f3 fc 0c 12 12 02 e7 e8 fe     ................
    340d:	0a 14 12 04 f3 e4 f2 08 0f 12 06 f2 ed f0 02 11     ................
    341d:	12 0a f4 e9 f7 00 0f 14 0c fe e7 ed 04 0c 14 10     ................
    342d:	fe f2 e7 f6 0e 0e 12 03 ef f1 f3 05 14 0b 07 f1     ................
    343d:	e9 fc 01 11 15 06 fe e6 f1 0a 0b 16 0e f8 f4 e8     ................
    344d:	fc 12 0b 13 fd ed f6 f3 0a 14 07 07 ec ec 02 00     ................
    345d:	16 12 01 fd e6 f7 0c 09 19 07 f6 f7 e7 03 13 0a     ................
    346d:	14 f6 ef f9 f2 10 11 06 06 e6 f2 03 ff 1b 0c ff     ................
    347d:	fc e4 fe 0b 0a 1c ff f8 f8 e9 0b 10 0d 12 ee f5     ................
    348d:	f9 f3 16 0d 08 02 e3 fa 00 02 1e 05 00 f9 e4 04     ................
    349d:	09 0e 1b f9 fb f6 eb 10 0f 0f 0d ea fa f7 f6 1a     ................
    34ad:	0c 09 fc e3 00 fe 06 1d 01 fe f5 e6 0a 08 11 17     ................
    34bd:	f5 fd f5 ee 15 0e 10 08 e8 ff f5 fa 1e 09 08 f5     ................
    34cd:	e5 05 00 0d 1f f4 08 05 fb 0b 0a 0b ee 00 f8 fd     ................
    34dd:	ff ff 05 ed fd f4 fe 0b e8 09 f1 f5 fd fc 02 e5     ................
    34ed:	07 ef fa 06 eb ff e8 0a f7 02 04 df 09 ea 0e fb     ................
    34fd:	00 f7 e1 11 ed 11 fd f2 f0 eb 15 f7 13 f7 e5 f4     ................
    350d:	f5 19 00 0a ed e9 00 ff 1a fd f8 eb f1 0d 03 18     ................
    351d:	f4 ea ee f9 19 06 10 ea e5 f6 05 1e 01 02 e1 f1     ................
    352d:	01 0d 1c f4 f5 e2 01 0c 10 13 e7 eb ec 0e 13 0d     ................
    353d:	05 e2 ed fa 14 14 01 f6 e7 fa 07 15 0d f0 f0 ee     ................
    354d:	09 0e 11 05 e3 ee f6 14 12 0a f9 df f4 00 1c 0d     ................
    355d:	fd ee e7 02 09 1d 01 ed ea f5 0f 0f 15 f5 e3 ee     ................
    356d:	04 16 10 06 ee e6 fa 0e 18 08 f6 ee f1 06 11 12     ................
    357d:	f9 ec f3 fb 12 0e 0b ef e5 fa 07 19 0b 00 e7 ea     ................
    358d:	02 12 17 fe f4 e9 f9 0a 15 0e f1 ea f4 06 13 12     ................
    359d:	02 e7 e9 02 0f 16 08 f6 eb f1 0e 11 10 f9 f1 f4     ................
    35ad:	fd 13 0d 07 eb f3 fb 08 17 08 fe e3 f4 05 11 16     ................
    35bd:	ff f4 e7 fb 0f 14 0c f2 f1 f3 05 15 0f ff e7 f5     ................
    35cd:	01 0e 17 04 f7 e3 fe 0b 11 13 f4 f7 eb 08 10 0d     ................
    35dd:	06 ec fe f3 10 0e 09 f9 e8 02 fc 18 0c 02 f0 e7     ................
    35ed:	08 07 1a 06 f6 f0 ed 0f 0d 14 f9 ef f9 f7 16 0d     ................
    35fd:	0b ed ed 05 00 1d 06 00 ea f1 0e 07 1c f9 fa f1     ................
    360d:	f8 14 07 13 ed fe f6 00 16 04 0a e4 00 fc 0a 19     ................
    361d:	ff 01 e1 00 07 12 15 f5 f9 e8 04 11 10 0a e9 fe     ................
    362d:	f1 0c 15 09 ff e3 06 fc 14 14 fc fb e5 0c 05 15     ................
    363d:	0a f2 fe eb 11 09 10 fe ef 04 ef 19 08 0b f3 ed     ................
    364d:	08 fa 1e 07 00 ef ec 0f 06 1c fe f6 f4 f0 18 0b     ................
    365d:	13 f1 f3 ff f7 23 03 08 e3 fa 09 03 19 f8 04 fa     .....#..........
    366d:	04 01 f2 fd 0b 00 ee fe 04 ff 02 ff f9 ee 05 fb     ................
    367d:	f8 ff fb f9 08 02 f5 ff 05 f2 fe 00 fa 00 03 f4     ................
    368d:	fa 06 f6 fa 05 fc f7 00 fb f6 06 01 f7 06 01 f0     ................
    369d:	fc 04 f4 04 08 f9 fd 00 f2 f8 07 fb 00 0a fd f7     ................
    36ad:	fc f7 f6 09 05 fd 09 02 f2 f6 fd f7 05 09 00 ff     ................
    36bd:	02 f4 f4 00 ff 02 0e 02 fc fc f7 f4 04 03 03 09     ................
    36cd:	05 f6 f6 f8 f6 02 09 06 05 04 f9 f2 fa fc 03 0c     ................
    36dd:	07 02 ff f8 f1 fd fe 03 0a 08 fc fa fa f4 fe 07     ................
    36ed:	05 09 08 fd f3 f7 f8 ff 08 07 06 03 fb f1 f8 fb     ................
    36fd:	00 0a 0a 01 00 fb f3 f8 02 02 09 0a 01 f7 f8 f5     ................
    370d:	fa 02 06 07 07 fe f5 f5 f9 fd 08 0a 05 06 ff f3     ................
    371d:	f5 fb ff 06 0a 05 fd fc f5 f6 fe 03 07 0a 03 fc     ................
    372d:	f7 f7 fa 03 06 07 08 03 f5 f5 f8 fc 03 09 09 04     ................
    373d:	01 f8 f3 f9 01 06 0a 08 02 fb f7 f6 fc 01 08 08     ................
    374d:	07 fc f8 f8 fa ff 07 09 08 05 fd f3 f6 fd 02 07     ................
    375d:	0b 06 00 f9 f4 f6 fe 05 08 0a 03 fd fa f8 f9 02     ................
    376d:	07 08 08 02 f6 f6 fa fd 01 0a 08 03 fe f6 f3 fc     ................
    377d:	02 06 0b 08 02 fc f7 f4 fc 04 05 09 08 fb f8 f9     ................
    378d:	f8 fc 09 08 07 05 fb f4 fb fe 00 08 0a 05 02 f7     ................
    379d:	f4 f9 01 01 09 0c 01 fe fb f4 f8 05 07 08 0b 01     ................
    37ad:	f7 fa fa f9 04 09 05 07 fd f4 fa ff fd 07 0d 05     ................
    37bd:	03 fe f2 f6 02 02 05 0e 05 fc fb f7 f5 01 08 05     ................
    37cd:	0b 03 f9 fa fd f7 03 0a 06 08 04 f4 f6 ff fc 00     ................
    37dd:	0e 07 01 fe f6 f2 01 03 04 0c 09 fe fd f9 f4 fd     ................
    37ed:	09 04 0c 07 f8 f7 06 fb f9 05 ff 07 05 ef fd 09     ................
    37fd:	01 fe 00 ee fe 02 f5 02 f5 00 08 f6 fb 05 f1 ff     ................
    380d:	ff fb 03 fb f4 07 f8 fc 05 fa f9 ff f3 04 02 fb     ................
    381d:	08 fc f0 02 fa 01 0a fc ff fe ef 03 00 fd 0b 02     ................
    382d:	f5 fa f2 fe 0a 00 07 03 f2 f6 fa fb 0b 06 02 02     ................
    383d:	f1 f4 fe 00 0b 0b fb fb f6 f6 04 03 09 0a fd f2     ................
    384d:	f6 f6 07 0a 06 07 fa f0 f8 fb 04 0d 05 01 fa f0     ................
    385d:	fa 00 06 0e 05 f7 f9 f3 fe 06 06 0b 04 f6 f3 f7     ................
    386d:	fd 0c 08 07 01 f2 f2 fb 01 0a 0b 01 fe f4 f5 fe     ................
    387d:	03 0b 0c fd f6 f7 f7 04 07 0a 07 fc f2 f5 fa 04     ................
    388d:	0c 07 06 fa f1 f5 00 07 0d 07 fd fa f3 fb 00 09     ................
    389d:	0b 08 f7 f6 f7 fd 07 09 08 02 f7 f1 f9 ff 08 0c     ................
    38ad:	06 00 f5 f2 fa 06 09 0c 01 fb f7 f7 fd 06 0b 09     ................
    38bd:	01 f3 f7 fa 02 09 0a 05 fd f3 f4 ff 03 0a 0a 03     ................
    38cd:	fb f4 f4 01 09 0a 09 fc f9 f8 fa 00 0a 08 05 fb     ................
    38dd:	f2 fa fe 05 0b 07 01 f9 f2 f9 04 03 0c 06 fe f7     ................
    38ed:	f6 f8 08 08 0a 05 f8 f9 fb fb 07 0b 05 03 f6 f4     ................
    38fd:	ff ff 08 0b 04 fd f7 f2 02 04 05 0d 01 fb f9 f6     ................
    390d:	fe 0b 05 0b fe f6 fd fb fe 0c 06 03 00 f1 fa 01     ................
    391d:	ff 0d 08 00 fc f3 f7 09 00 0b 09 fc fb f9 f5 07     ................
    392d:	08 07 09 f7 f8 00 f8 06 0b 02 04 f9 f2 03 fc 05     ................
    393d:	0e 02 ff fa f1 02 06 02 0f 01 fa fe f5 fc 0c 03     ................
    394d:	0b 03 f3 ff fc fb 0d 05 02 02 f2 fa 04 fa 0d 09     ................
    395d:	00 fe f5 f5 0a 01 09 0b fb fe fd f4 05 09 04 0b     ................
    396d:	f9 f6 02 f7 04 0c 02 04 fb f1 03 fe 00 10 03 ff     ................
    397d:	fb f2 fe 0c 00 0f 01 f7 0c 04 05 06 f3 fd ff fe     ................
    398d:	01 f6 fe ff f5 00 f6 03 02 f5 05 f5 fc ff fc 03     ................
    399d:	f2 ff ff f4 07 f9 fc fb f6 07 f8 03 00 f1 02 f8     ................
    39ad:	04 03 fd 01 ee 01 00 fe 0b f8 fb f4 f9 0a fe 09     ................
    39bd:	fe f0 fb f8 08 06 01 00 f0 fb fc 05 0d fc fd f2     ................
    39cd:	f9 06 03 0d ff f3 f7 f8 08 07 05 01 f2 f6 fb 07     ................
    39dd:	0c 02 00 f1 f7 00 03 0f 01 f8 f5 f5 05 05 09 03     ................
    39ed:	f3 f6 fa 06 0a 07 03 f2 f4 fb 04 0f 02 ff f5 f3     ................
    39fd:	00 04 0c 05 f7 f8 f7 02 08 0a 05 f5 f3 f8 04 0c     ................
    3a0d:	06 05 f5 f2 fb 02 0e 07 fd f9 f3 fe 05 0a 07 f9     ................
    3a1d:	f4 f8 00 08 09 08 f7 f2 f8 01 0c 09 03 fb f1 fa     ................
    3a2d:	03 09 08 fe f8 f7 fa 05 0b 09 fb f4 f7 fe 08 0a     ................
    3a3d:	07 fc f0 f8 00 08 0a 02 fc f4 f7 04 09 0a 01 f8     ................
    3a4d:	f6 f9 04 0a 0a fe f4 f8 fc 05 0b 05 ff f3 f7 03     ................
    3a5d:	05 0b 05 fb f7 f5 01 09 0a 03 f9 f7 f8 02 0a 08     ................
    3a6d:	04 f5 f8 ff 01 0b 06 ff f7 f3 01 06 0a 07 fd f8     ................
    3a7d:	f4 ff 08 08 08 f8 f9 fa fd 0b 05 03 f9 f4 01 ff     ................
    3a8d:	09 0a 00 fa f2 fe 05 08 0b fd fb f5 fb 09 04 09     ................
    3a9d:	fc f8 ff fa 0a 09 04 fe f1 ff ff 07 0c 00 fe f1     ................
    3aad:	fc 05 03 0d fd fc fb f7 0a 04 08 01 f3 00 f9 06     ................
    3abd:	0a 04 02 f1 fe 00 03 0e ff 02 f5 f8 08 00 0d 02     ................
    3acd:	f9 fe f3 07 07 08 05 f3 ff f9 02 0c 02 06 f2 fc     ................
    3add:	02 fd 0e 01 ff fb f4 07 02 0b 07 f8 fe f4 02 09     ................
    3aed:	06 09 f4 fe fc fc 0e 01 05 f9 f7 06 fc 0c 08 fe     ................
    3afd:	fd f2 03 04 07 0b f9 fe f6 fc 0b 01 0a f9 fa 03     ................
    3b0d:	f7 0d 06 02 fe f0 05 ff 09 0d fc fe f5 00 03 fd     ................
    3b1d:	03 fc 03 00 03 03 f8 fa 03 00 02 fe 01 f8 f8 05     ................
    3b2d:	fc fc ff fd fc 04 02 fa fe 04 f9 fc 01 ff fc 02     ................
    3b3d:	ff f8 ff 03 f9 fe 03 ff f9 00 ff f9 02 04 fb 00     ................
    3b4d:	04 fc f7 01 00 fa 04 04 fc ff 01 fa fa 03 01 fd     ................
    3b5d:	05 03 fb fc fe f9 fd 05 01 00 04 01 f9 fa fe fb     ................
    3b6d:	00 06 02 ff 01 fd f7 fc 00 fd 03 06 02 fd fd fb     ................
    3b7d:	f9 ff 03 00 04 05 ff fb fb fb fc 03 05 02 03 02     ................
    3b8d:	fc f8 fb fd 00 05 05 01 00 ff fa f9 fe ff 02 05     ................
    3b9d:	04 fe fc fc fa fd 02 02 04 04 01 fa fa fb fc 01     ................
    3bad:	04 03 03 02 fe f8 fa fe ff 04 06 02 00 ff fb f9     ................
    3bbd:	fd 01 02 05 05 00 fd fc fb fc 01 04 04 04 02 fd     ................
    3bcd:	fa fb fc ff 03 05 03 01 ff fa f9 fc fe 02 04 05     ................
    3bdd:	01 fe fc fa fc 00 01 04 05 03 fd fb fb fc 00 03     ................
    3bed:	03 04 03 ff fa f9 fc ff 02 05 04 02 00 fd f9 fb     ................
    3bfd:	ff 02 04 05 02 fe fd fb fb fd 01 04 04 03 fe fb     ................
    3c0d:	fb fc fe 00 04 05 03 00 fb f9 fb ff 01 03 05 03     ................
    3c1d:	00 fd fa fa fe 02 03 04 04 00 fd fc fc fd 01 04     ................
    3c2d:	04 03 01 fc fa fd fe ff 04 06 03 00 fe fa fa fe     ................
    3c3d:	01 01 05 05 00 fd fc fa fc 01 03 03 05 02 fc fb     ................
    3c4d:	fd fc ff 04 04 03 03 fe f9 fc ff ff 02 06 04 01     ................
    3c5d:	00 fb f8 fe 02 02 04 06 01 fe fe fb fa 00 04 02     ................
    3c6d:	04 04 fd fc fe fc fc 03 05 02 03 00 fa fb ff ff     ................
    3c7d:	ff 06 05 01 00 fd f9 fc 02 01 02 07 04 fe fd fd     ................
    3c8d:	f9 fe 04 03 03 05 00 fa fd fe fb 01 06 03 02 02     ................
    3c9d:	fc f8 fe 00 fe 05 06 fd fb 05 ff 04 fd f9 00 fd     ................
    3cad:	ff 00 fe f9 01 01 f9 01 fe fc 03 ff fa 03 ff f9     ................
    3cbd:	01 fe fd 03 fd fa 04 fc fb 04 fe fb 02 fb fb 05     ................
    3ccd:	fb ff 05 fa fa 02 fa ff 05 fd 00 01 f7 fd 03 fb     ................
    3cdd:	03 04 fc fd fe f7 01 03 fe 04 03 f8 fd fd fa 05     ................
    3ced:	03 ff 04 fe f7 ff fd fe 07 02 fe ff fa f9 01 00     ................
    3cfd:	02 06 01 fb fc fa fd 03 03 03 04 fd f9 fc fb 01     ................
    3d0d:	06 02 01 00 f8 fb ff ff 05 05 00 fe fc f9 ff 01     ................
    3d1d:	02 06 03 fc fa fb fc 02 04 03 03 00 f9 fa fd ff     ................
    3d2d:	05 05 01 00 fc f9 fe ff 03 06 02 fd fc fa fd 01     ................
    3d3d:	02 05 04 fe fa fa fc 01 04 04 03 00 fb f9 fc ff     ................
    3d4d:	04 06 03 ff fd f9 fb 00 02 05 05 fe fc fb fb 00     ................
    3d5d:	03 04 05 01 fa f9 fb ff 04 05 04 01 fc f9 fa ff     ................
    3d6d:	03 05 05 00 fd fa fa fe 03 05 06 01 fb fb fb fe     ................
    3d7d:	03 05 05 03 fc f9 fa fe 02 05 05 03 fe fa f9 fd     ................
    3d8d:	02 05 06 03 fd fb fa fc 02 05 05 04 fd f9 fb fd     ................
    3d9d:	00 05 05 04 ff f9 f9 fd 01 04 06 03 00 fb f9 fb     ................
    3dad:	01 04 06 04 ff fa fb fb fe 05 05 04 01 f9 f9 fd     ................
    3dbd:	fe 04 07 03 01 fb f8 fb 00 02 06 05 00 fc fa fa     ................
    3dcd:	ff 04 04 05 01 fb fb fd fc 04 06 03 02 fc f8 fd     ................
    3ddd:	ff 00 07 05 01 ff f8 f9 00 01 04 07 01 fd fc fa     ................
    3ded:	fc 04 03 05 03 fc fa fe fc 01 07 03 02 fe f8 fb     ................
    3dfd:	01 ff 05 07 00 ff fb f7 ff 03 02 07 03 fc fd fb     ................
    3e0d:	fa 03 04 03 05 fe fa fe fd fe 07 04 02 00 f9 f9     ................
    3e1d:	01 00 02 08 02 fe fd f7 fc 05 01 05 06 fd fc fd     ................
    3e2d:	f8 00 06 01 05 01 fa 01 05 fc fe 03 fe f9 01 03     ................
    3e3d:	ff 00 fb fa 02 fa ff fc fe 04 fb fd 01 fa 00 ff     ................
    3e4d:	ff 01 f9 ff 01 fa 02 ff fb ff fa 00 01 fc 04 fb     ................
    3e5d:	fb 01 fa 03 01 fd 01 f7 fe 01 fe 06 00 fb fd f8     ................
    3e6d:	01 03 ff 04 fc f9 fd fb 05 04 ff 01 f9 fb 00 ff     ................
    3e7d:	07 02 fd fd f9 ff 02 02 06 fe f9 fb fb 02 05 02     ................
    3e8d:	03 fa f9 fd fe 06 04 ff ff f9 fc 00 01 08 01 fc     ................
    3e9d:	fc fa 00 02 04 05 fc f9 fb fd 04 04 03 01 f9 fa     ................
    3ead:	fd 00 07 03 ff fc f9 fd 01 03 07 ff fb fb fc 02     ................
    3ebd:	03 05 04 fb f9 fc ff 04 04 03 ff f8 fa fe 02 06     ................
    3ecd:	02 fe fb fa fe 02 05 05 fe fb fc fd 02 04 05 01     ................
    3edd:	fa f9 fd 01 04 04 02 fd f8 fb 00 03 05 01 fd fb     ................
    3eed:	fb ff 03 05 04 fd fa fc ff 03 04 04 00 f9 fa ff     ................
    3efd:	02 04 04 00 fc f9 fc 02 03 04 01 fc fb fc 00 04     ................
    3f0d:	04 02 fd fa fe ff 03 05 03 ff fa fb 01 02 05 04     ................
    3f1d:	ff fc f9 fd 03 03 04 00 fb fc fc 01 05 02 02 fc     ................
    3f2d:	fa ff 00 04 05 01 ff f9 fc 02 02 05 03 fd fd f9     ................
    3f3d:	ff 04 03 04 ff fb fd fc 02 05 01 01 fb fa 00 ff     ................
    3f4d:	05 04 00 ff f9 fd 03 02 06 01 fd fd f9 00 05 02     ................
    3f5d:	05 fd fb fe fc 04 04 01 01 f9 fc 00 00 06 03 ff     ................
    3f6d:	ff f8 ff 02 02 07 ff fd fe fa 02 04 03 04 fb fd     ................
    3f7d:	fe fc 05 03 02 00 f8 fe 00 00 07 01 00 fe f9 01     ................
    3f8d:	02 03 07 fe fe fd fa 04 04 03 03 fa fe fd fd 06     ................
    3f9d:	03 02 ff f8 00 ff 01 07 00 ff fd f9 02 01 04 05     ................
    3fad:	fd ff fd fb 05 03 04 01 fa ff fd fe 08 01 02 fd     ................
    3fbd:	f9 01 ff 02 07 fe ff fb fa 04 02 04 02 fc 01 ff     ................
    3fcd:	ff 00 fd fe 01 ff ff fb 02 00 01 fe 01 ff fb fd     ................
    3fdd:	04 fc ff fe ff fc 02 00 ff fb 03 fe fd fe 02 fd     ................
    3fed:	ff 00 ff fb 01 01 fe fd 02 ff fd fe 01 fc fe 02     ................
    3ffd:	00 fd 01 02 fc fc 00 00 fc 02 01 00 fd 01 fd fc     ................
    400d:	fe 03 fd 02 01 02 fb ff fd fe fc 04 00 01 ff 03     ................
    401d:	fb fd fd 00 fc 03 01 02 fe 02 fd fd fc 01 fd 02     ................
    402d:	02 03 fe 00 fd fe fc 02 ff 02 01 03 fe fe fc fe     ................
    403d:	fc 01 01 02 00 02 ff fd fc ff fe 01 02 03 00 00     ................
    404d:	ff fd fc ff 00 00 02 03 00 fe ff fd fd fe 01 00     ................
    405d:	02 02 01 fd fd fc fe fe 02 01 03 00 01 fd fd fc     ................
    406d:	00 fe 03 02 03 fe 00 fd fd fc 01 ff 03 02 02 fe     ................
    407d:	ff fc fe fd 01 00 02 01 02 fe fe fc fe fe 01 01     ................
    408d:	03 01 01 fe fd fc fe ff 01 02 02 01 ff fe fd fd     ................
    409d:	ff 00 01 02 02 00 fe fd fd fe ff 01 02 02 01 00     ................
    40ad:	fd fd fd ff ff 02 02 02 01 00 fe fd fc ff 00 02     ................
    40bd:	01 03 00 ff fd fe fd 00 01 03 01 02 ff fe fc fe     ................
    40cd:	fe 01 01 03 01 01 fe fd fc fe ff 01 01 03 01 00     ................
    40dd:	fe fe fc fe ff 02 01 02 01 00 fd fe fd fe 00 02     ................
    40ed:	02 01 00 ff fc fe ff 00 00 03 02 01 ff fe fc fd     ................
    40fd:	ff 01 01 02 02 00 fe fe fd fd ff 02 01 02 02 00     ................
    410d:	fe fe fe fe fe 02 02 01 01 00 fd fd ff 00 ff 02     ................
    411d:	03 01 00 ff fd fc fe 01 00 01 03 02 fe fe fe fd     ................
    412d:	fd 01 02 01 01 02 fe fd fe ff fd 00 02 01 01 01     ................
    413d:	ff fc fe 00 ff 00 03 02 00 ff ff fc fd 00 01 00     ................
    414d:	02 03 00 fe fe fe fd ff 02 fc fe 01 02 fd fc 01     ................
    415d:	00 00 ff 00 fb fe 01 fc ff 00 fd 00 02 fd fe 02     ................
    416d:	fe fc 01 ff ff 01 ff fc 01 ff fc 01 01 fd ff 00     ................
    417d:	fc ff 01 fd ff 02 fe fc 01 fe fe 03 00 ff 01 fe     ................
    418d:	fb 01 ff fe 02 01 fd fe ff fc ff 02 ff 01 02 fe     ................
    419d:	fc ff fd ff 03 01 00 01 fe fb fe ff ff 02 02 ff     ................
    41ad:	ff fe fc fe 01 00 02 03 ff fd fd fc fe 01 01 01     ................
    41bd:	02 ff fc fd fe ff 02 02 01 01 ff fc fd ff ff 02     ................
    41cd:	03 01 fe fe fc fd 00 01 02 03 01 fe fd fd fe 01     ................
    41dd:	02 02 02 00 fc fc fd fe 01 03 02 00 ff fd fc fe     ................
    41ed:	00 01 03 02 ff fd fd fd 00 00 02 02 01 fe fd fd     ................
    41fd:	fd 00 02 02 02 01 fe fc fd ff 00 02 02 01 ff fd     ................
    420d:	fc fe ff 01 02 02 00 fe fd fd ff 01 02 02 02 ff     ................
    421d:	fc fc fd ff 01 03 02 00 fe fc fc fe 00 02 03 01     ................
    422d:	ff fe fd fd ff 01 02 02 01 fd fd fd fe 00 02 02     ................
    423d:	02 00 fd fc fe 00 01 02 02 01 ff fc fc fd 00 01     ................
    424d:	03 02 ff fe fd fd fe 02 02 02 02 ff fc fd fe 00     ................
    425d:	01 03 02 00 fe fc fd ff 01 02 03 01 ff fe fc fd     ................
    426d:	00 02 02 03 00 fd fd fd fe 00 03 02 01 ff fc fd     ................
    427d:	ff ff 01 03 02 01 ff fc fc ff 00 01 03 02 ff fe     ................
    428d:	fd fc ff 02 02 02 01 fe fd fe fe 00 03 02 02 00     ................
    429d:	fc fc ff ff 00 03 02 00 ff fd fb ff 01 01 03 02     ................
    42ad:	ff fe fd fc fe 02 01 02 02 fe fd fe fe fe 03 03     ................
    42bd:	01 01 fe fb fe 00 ff 02 03 00 ff fe fc fe 01 00     ................
    42cd:	02 03 00 fe ff fd fd 02 02 01 03 ff fc fe ff fd     ................
    42dd:	02 03 00 01 ff fd ff 02 fe fe 00 01 01 fb ff 02     ................
    42ed:	00 ff 00 fb ff 00 fd 00 fd ff 02 fd ff 01 fc ff     ................
    42fd:	00 fe 00 fe fd 01 fe ff 01 fe fe ff fc 00 00 fe     ................
    430d:	02 fe fc 00 fe 00 02 fe 00 ff fb 00 00 ff 02 00     ................
    431d:	fd fe fc ff 02 00 01 00 fc fd fe fe 02 01 00 00     ................
    432d:	fc fd ff 00 02 02 fe fe fd fd 01 00 02 02 ff fc     ................
    433d:	fd fd 01 02 01 01 fe fc fe fe 01 03 01 00 fe fb     ................
    434d:	fe ff 01 03 01 fd fe fc ff 01 01 02 01 fd fc fd     ................
    435d:	ff 03 01 01 00 fc fc fe 00 02 02 00 ff fc fd ff     ................
    436d:	00 02 03 ff fd fd fd 01 01 02 01 ff fc fd fe 01     ................
    437d:	03 01 01 fe fc fd ff 01 03 01 ff fe fc fe 00 02     ................
    438d:	02 01 fd fd fd ff 01 02 02 00 fd fc fe ff 02 02     ................
    439d:	01 00 fd fc fe 01 02 03 00 fe fd fd ff 01 02 02     ................
    43ad:	00 fd fd fe 00 02 02 01 ff fc fd ff 00 02 02 00     ................
    43bd:	fe fc fd 00 02 02 02 ff fe fe fe 00 02 02 01 fe     ................
    43cd:	fc fe ff 01 02 01 00 fe fc fe 01 00 03 01 ff fd     ................
    43dd:	fd fe 01 02 02 01 fe fe fe fe 01 02 01 00 fd fd     ................
    43ed:	ff ff 02 02 01 ff fd fc 00 01 01 03 00 fe fe fd     ................
    43fd:	ff 02 01 02 ff fd ff fe ff 03 01 00 00 fc fe 00     ................
    440d:	ff 03 02 00 ff fc fd 02 00 02 02 ff fe fe fd 01     ................
    441d:	02 01 02 fd fe ff fe 01 02 00 01 fe fc 00 ff 01     ................
    442d:	03 00 ff fe fc 00 01 00 03 00 fe ff fd ff 02 00     ................
    443d:	02 00 fc ff ff fe 03 01 00 00 fc fe 01 fe 03 02     ................
    444d:	00 ff fd fd 02 00 02 02 fe ff ff fc 01 02 01 02     ................
    445d:	01 00                                               ..

0000445f <MagicWave>:
    445f:	ff 00 fc 00 fd ff fe 01 fe 00 ff fe 00 ff 00 ff     ................
    446f:	00 ff 00 ff 00 ff ff ff ff 00 09 0a 09 09 07 03     ................
    447f:	fe fa f5 f4 fb 07 07 f9 f4 fb 00 00 fb f6 f6 fd     ................
    448f:	06 09 09 07 07 06 03 00 fc f8 f6 fb 08 09 f9 f5     ................
    449f:	ff 07 09 09 07 02 fb f7 f6 f7 fa fb fd fd fb f9     ................
    44af:	f9 ff 06 04 04 fd f9 04 09 06 03 03 04 07 08 08     ................
    44bf:	06 05 05 05 02 ff fe fa f5 f7 03 07 f8 f8 07 05     ................
    44cf:	fa f5 f5 f5 f5 f6 f8 fa fc fc fc ff 02 03 06 0b     ................
    44df:	07 fb f6 05 04 f5 fe 09 06 01 fe fd fd fe ff 00     ................
    44ef:	00 ff 00 03 04 04 08 09 02 f7 fb 07 fc f7 03 07     ................
    44ff:	01 fd f9 fa f7 04 26 20 27 16 f8 fe fc f0 05 07     ......& '.......
    450f:	07 0e f8 0b f2 e0 0a fe 13 17 f2 03 de e0 04 ee     ................
    451f:	46 1d ec 05 c8 f0 01 ff 3c 06 f9 ff c3 ff f7 11     F.......<.......
    452f:	41 fd 09 ed e9 12 f2 2d 39 f1 08 c0 c4 04 eb 47     A......-9......G
    453f:	2b f8 ff ac e0 0d 00 66 2f f6 e8 9e f0 f8 1d 57     +......f/......W
    454f:	04 08 d3 b0 03 01 3e 48 f8 09 af d1 17 07 5f 3a     ......>H......_:
    455f:	ff e9 9d c6 f8 14 56 20 f9 d2 9e db 03 35 55 1e     ......V .....5U.
    456f:	fe bf 9d 06 2b 50 5a 1a e5 a9 ad e3 1f 4e 43 0d     ....+PZ......NC.
    457f:	d0 b0 c0 fc 43 59 3f fa bb b3 ba 2b 5d 49 40 e3     ....CY?....+]I@.
    458f:	ae ae c6 2d 5a 57 38 c3 a5 a5 cb 3e 47 50 25 b8     ...-ZW8....>GP%.
    459f:	b3 a3 e4 79 61 56 05 a6 bd a9 17 5e 46 52 d8 a7     ...yaV.....^FR..
    45af:	b9 b1 3a 59 51 47 b5 af ab c8 53 72 75 23 a3 b2     ..:YQG....Sru#..
    45bf:	9e e5 62 49 61 f9 9a ba a6 17 62 44 52 d3 a4 b7     ..bIa.....bDR...
    45cf:	b5 39 5b 53 4a bd c6 da d0 42 49 5b 29 ab ab a1     .9[SJ....BI[)...
    45df:	e6 4a 46 51 03 b2 b7 b7 15 5b 58 4a e8 aa a5 c2     .JFQ.....[XJ....
    45ef:	2c 55 54 58 ef b2 b6 e5 37 5b 52 15 cc a6 b7 f1     ,UTX....7[R.....
    45ff:	2f 53 34 f8 c5 aa cf fc 3d 62 20 ed b3 a1 e0 2a     /S4.....=b ....*
    460f:	64 49 08 ea a7 ac f0 08 52 3b 07 f5 a2 c8 05 1c     dI......R;......
    461f:	59 1c 03 e8 a8 f2 0c 52 4c 07 e8 cc f7 03 52 33     Y......RL.....R3
    462f:	f6 d6 a9 ff f7 59 2b fb cf a8 03 fd 5c 39 09 ce     .....Y+.....\9..
    463f:	bd 0a fe 54 01 03 c0 c9 0e 05 47 fc 13 c1 da 26     ...T......G....&
    464f:	0f 43 f7 10 c8 f2 02 14 38 f5 0e cb f6 f2 13 29     .C......8......)
    465f:	f2 28 e3 03 f4 0c 0d f5 00 e1 04 f9 0f 09 01 02     .(..............
    466f:	f5 06 fd 24 03 02 01 f7 ff 07 fa fa f8 fc 04 f3     ...$............
    467f:	fc e1 fa f6 0e 36 03 00 d9 fe f3 22 14 f1 fd d4     .....6....."....
    468f:	0f f0 2b 07 f9 ea c3 04 ef 36 23 2b e4 cd 0d f4     ..+......6#+....
    469f:	45 07 0e cd c4 0a 05 5a 03 10 c3 d5 06 0d 51 f3     E......Z......Q.
    46af:	0c da dd 00 1d 4f fa 06 a8 db f7 31 50 03 f5 a5     .....O.....1P...
    46bf:	e7 08 47 4c fe dc 98 08 19 4a 3f 01 d3 a2 dd 0e     ..GL.....J?.....
    46cf:	54 42 04 c5 ad e6 2a 5d 40 f6 ae ae df 56 7c 46     TB....*]@....V|F
    46df:	f7 b0 ab d9 42 52 4b e1 b4 b2 ef 53 4c 41 c3 ae     ....BRK....SLA..
    46ef:	ae fa 54 46 40 db c8 9c 0b 5d 55 41 af b9 a2 1a     ..TF@....]UA....
    46ff:	54 4c 2b 9e bf a7 2e 4b 57 23 a4 bf ab 44 4b 66     TL+....KW#...DKf
    470f:	34 a3 af ab 46 47 5d f9 a9 b5 bd 4a 4c 5d e3 a1     4...FG]....JL]..
    471f:	a8 ce 4f 45 4c d3 a7 a5 e2 49 6d 68 d2 b2 b2 f9     ..OEL....Imh....
    472f:	47 51 39 d1 a4 b2 03 4e 57 26 d2 a8 c0 09 49 50     GQ9....NW&....IP
    473f:	0f cf 9e cc 10 7d 5f 02 d4 a1 e4 0c 51 39 fc d0     .....}_.....Q9..
    474f:	a1 f3 0a 5b 2f 02 d1 ad 01 09 5c 1a fe f3 cb fc     ...[/.....\.....
    475f:	06 5e 0e 05 c0 c2 03 05 55 fa 07 b9 d4 02 0c 4e     .^......U......N
    476f:	f5 13 b8 01 20 15 40 eb 0d be fd fb 1e 2e f4 07     .... .@.........
    477f:	c5 01 f6 1d 1e f7 03 d4 08 01 45 13 ff fa de 06     ..........E.....
    478f:	fc 19 09 00 fe f0 06 fc 0c fe 01 fc ff ff 03 fe     ................
    479f:	28 0c 03 08 fa 00 ee 05 fc 11 0b fc ff df 07 f4     (...............
    47af:	1e 06 fd f4 d6 0b 1b 38 03 02 e9 d4 0d f6 3f fe     .......8......?.
    47bf:	08 d8 d4 0a ff 4a fa 0a ea dd 01 08 4e f6 0b b8     .....J......N...
    47cf:	e1 ff 17 4e f8 07 ac e7 ff 2d 72 02 f7 9f e7 fb     ...N.....-r.....
    47df:	3d 46 fd eb 9c e9 01 4e 41 fd d9 9d 10 13 53 3c     =F.....NA.....S<
    47ef:	01 cd a8 ec 18 57 35 f9 ba a8 e6 23 58 38 1a bf     .....W5....#X8..
    47ff:	a9 e7 35 54 37 e2 ac af f1 4b 56 3b d0 a8 ae f8     ..5T7....KV;....
    480f:	79 5f 3b c2 ab a8 05 5a 4c 13 b8 c2 13 51 25 c1     y_;....ZL....Q%.
    481f:	b7 1d 4e 3b d1 a6 ec 4d 46 e0 a0 d7 46 51 09 b7     ..N;...MF...FQ..
    482f:	c2 3d 5e 0d a4 b7 24 64 1c af a9 11 7f 3c b7 a0     .=^...$d.....<..
    483f:	f9 61 40 d0 94 e6 4f 54 e1 a0 f2 4a 5d 00 a2 c4     .a@...OT...J]...
    484f:	2c 5e 0f b2 b1 1f 56 31 d5 ac 0d 57 32 ce ad fa     ,^....V1...W2...
    485f:	4b 3c da af df 51 4f ed bc d8 2a 41 04 c0 d0 19     K<...QO...*A....
    486f:	38 09 c7 ea 12 30 14 d6 d0 ff 2c 1a ec da fb 1d     8....0....,.....
    487f:	1d 14 dd f6 1b 14 f5 e6 f4 0e 13 06 0e fd 06 0b     ................
    488f:	05 03 00 05 fb 0a 09 fd 08 f2 f2 0a 17 fc ec ff     ................
    489f:	07 1e 10 ee e8 06 2a 17 02 e7 fc 30 26 f3 c7 e9     ......*....0&...
    48af:	27 3b 02 c1 e7 26 38 fc bb ca 15 55 14 bc bf 0c     ';...&8....U....
    48bf:	4f 23 cf b2 0f 5d 2a d4 ae ed 43 49 e9 a4 ec 40     O#...]*...CI...@
    48cf:	4b f1 9b c3 2e 5b 01 b3 c7 24 6a 22 b7 a5 0c 5f     K....[...$j"..._
    48df:	45 c1 95 fe 61 4d d7 93 e3 4c 55 eb 94 d3 45 67     E...aM...LU...Eg
    48ef:	0c a2 c5 33 66 22 ab ae 1a 64 34 b9 a5 05 53 3a     ...3f"...d4...S:
    48ff:	ca a3 f7 4c 4c e8 ac e8 39 47 f2 a9 d5 27 4c 11     ...LL...9G...'L.
    490f:	bd ce 18 43 1a c9 cf 12 42 2b de d2 05 2d 24 e4     ...C....B+...-$.
    491f:	d3 ff 29 31 fc dc f3 11 23 03 e4 f8 10 22 0d ec     ..)1....#...."..
    492f:	f4 00 0e 07 f2 fd 03 03 07 fa 01 fe f9 01 ff 08     ................
    493f:	06 f6 03 09 17 0b f0 e6 01 16 14 00 dc fd 1e 1d     ................
    494f:	f1 d4 f0 21 40 03 cd e8 20 3b 02 cd d2 28 54 0f     ...!@... ;...(T.
    495f:	c9 c0 0c 48 27 cc b4 18 52 35 da ad f3 4a 4b e5     ...H'...R5...JK.
    496f:	b8 ee 3e 57 f6 a7 c6 32 55 09 c1 bc 1e 5f 22 b6     ..>W...2U...._".
    497f:	a3 0d 58 40 c7 95 f9 59 46 cf 99 e2 59 6b e8 9f     ..X@...YF...Yk..
    498f:	d4 42 59 fe a2 b7 44 70 10 ac ad 1e 5d 26 b4 b1     .BY...Dp....]&..
    499f:	1d 58 36 ca a8 f7 56 45 df a1 00 4e 44 ed ae db     .X6...VE...ND...
    49af:	32 4a fd b6 c7 20 42 15 e1 c4 0e 3f 1a d4 c8 07     2J... B....?....
    49bf:	37 21 df d1 f0 38 3e ee d6 ed 1c 1e f8 d9 e9 10     7!...8>.........
    49cf:	19 01 e1 05 14 0c 07 f0 f7 ff 0a 02 fc f7 00 ff     ................
    49df:	00 1c 06 fb f6 f0 ff 06 03 ec ec fa 16 09 fa fd     ................
    49ef:	f8 1e 19 ef d9 f3 20 22 f7 cb e4 15 43 16 c5 d8     ...... "....C...
    49ff:	15 3e 12 cf ca 10 43 1c cf bc 1c 4c 2c ee c1 c3     .>....C....L,...
    4a0f:	2f 33 2f f1 c2 cf d7 36 1e 48 04 cc cc e9 33 28     /3/....6.H....3(
    4a1f:	36 de ca c9 f8 3b 2c 2e d4 d4 c4 0f 52 28 1e d2     6....;,.....R(..
    4a2f:	d2 d1 0e 35 33 18 d1 cc d5 15 2e 2f 04 e3 ee da     ...53....../....
    4a3f:	14 30 2f 06 dc cd e7 10 2f 24 fc d6 c6 f0 10 47     .0/...../$.....G
    4a4f:	42 f7 d6 cb f9 0f 39 14 00 d7 d8 00 0f 36 07 01     B.....9......6..
    4a5f:	cf eb 27 11 38 fd 00 cb eb ff 17 2f fc ff cb f0     ..'.8....../....
    4a6f:	fc 15 2b f7 18 ee f8 fc 1e 21 fa fd cc 00 f7 22     ..+......!....."
    4a7f:	15 ff fd da 08 f9 21 0a ff f3 e6 35 01 1a fe fe     ......!....5....
    4a8f:	f1 e8 01 fa 17 01 05 f9 f8 08 00 12 fd 02 f2 fb     ................
    4a9f:	02 28 17 f9 05 00 03 02 03 00 03 ff 05 ff fe f9     .(..............
    4aaf:	f2 00 f7 0c fc 08 f2 08 27 fd 17 f5 02 e8 f1 fe     ........'.......
    4abf:	fd 19 f5 03 df f0 fc 03 1f f6 09 de f6 04 3e 2a     ..............>*
    4acf:	f3 02 d3 ff ff 1e 24 fc 02 ce 02 fc 27 1d fc f4     ......$.....'...
    4adf:	c6 fd fd 30 14 00 f0 f2 16 f9 35 13 01 e0 cf fd     ...0......5.....
    4aef:	08 38 13 fd d7 ce f8 0e 3b 13 f6 d2 d8 f9 17 35     .8......;......5
    4aff:	11 03 fc e0 fe 26 35 17 ec cc d8 01 29 2c 15 e2     .....&5.....),..
    4b0f:	cb d2 0d 30 2e 0e d3 cc d4 11 32 2e 30 f3 d1 d6     ...0......2.0...
    4b1f:	1f 31 32 03 c7 d5 d4 25 2c 39 fc c7 ce d5 2d 26     .12....%,9....-&
    4b2f:	34 ec c7 cc df 35 2f 65 f4 c7 cb ec 39 24 34 dd     4....5/e....9$4.
    4b3f:	d2 c8 f4 35 27 2b d0 d0 c4 01 35 31 23 e9 fa c5     ...5'+....51#...
    4b4f:	0b 33 34 17 ce d0 d2 15 35 33 13 d2 d1 d5 16 2c     .34.....53.....,
    4b5f:	2d 04 d1 d4 0a 1c 31 2e 00 d0 ca e8 1b 34 27 fc     -.....1......4'.
    4b6f:	d8 d0 f7 17 35 15 f8 cf d5 f8 3c 49 0e fe cd da     ....5.....<I....
    4b7f:	fd 18 38 09 ff ce e8 01 1a 2f fd fc cd ef 03 1c     ..8....../......
    4b8f:	49 20 f8 c7 f5 fd 23 25 fd ff cd 02 f8 22 14 fb     I ....#%....."..
    4b9f:	fb d2 05 f2 2d 2f fc f2 d9 0a fa 27 05 03 f1 e2     ....-/.....'....
    4baf:	05 f7 1e fc 07 f0 f5 27 fd 1c fd 07 f2 f8 01 fe     .......'........
    4bbf:	0d f8 00 f0 fa fe 01 06 07 29 fa fc 00 02 fd fc     .........)......
    4bcf:	fc 01 fd fe f8 f7 ff fb 0a f9 08 1a fa 03 02 15     ................
    4bdf:	f7 04 ee f8 fd 02 1a f9 08 e2 fc fc 11 41 f9 03     .............A..
    4bef:	d6 fc f8 13 1b f8 02 d2 00 f6 23 17 ff f9 d8 28     ..........#....(
    4bff:	04 18 01 00 f7 03 09 0b fa f6 fa 0c 08 02 0b f5     ................
    4c0f:	0b 17 ff e9 ec 0c 16 04 e1 e9 02 2c 24 e1 e0 01     ...........,$...
    4c1f:	25 17 eb d7 f9 28 1c ef ce 0b 36 23 fb cf e9 1d     %....(....6#....
    4c2f:	30 00 d0 db 17 34 0d f2 dc 09 37 17 dc c7 02 35     0....4....7....5
    4c3f:	27 e1 ca f3 3b 4b ec c4 e9 2b 36 f7 c5 dc 26 39     '...;K...+6...&9
    4c4f:	07 c1 e6 30 36 13 ce ce 0c 3c 1e da c8 fd 38 22     ...06....<....8"
    4c5f:	fd d3 ec 31 2a f2 c6 ea 23 32 fb cf eb 1b 30 07     ...1*...#2....0.
    4c6f:	d1 da 0e 31 0e e7 dd 02 2a 13 e4 d4 fc 22 1f fd     ...1....*...."..
    4c7f:	d8 f4 1a 1d f9 e0 f2 14 28 05 e2 ee 09 17 00 ed     ........(.......
    4c8f:	eb 0c 1e 05 f2 ee 00 0f 08 f8 f1 09 09 03 fe f9     ................
    4c9f:	00 02 04 fe 07 09 f9 fb fc 04 02 fa f3 fe 18 0d     ................
    4caf:	fa ef f5 0a 0e 00 e9 fb 14 17 07 e8 e8 05 1d 0c     ................
    4cbf:	ed f1 03 20 11 ea da fc 22 24 f6 d6 f5 1f 29 fc     ... ...."$....).
    4ccf:	cf e6 1a 31 09 d0 dc 12 32 11 d2 d3 0c 36 21 dc     ...1....2....6!.
    4cdf:	cd 02 34 2a e3 c4 f4 2e 33 f1 c4 e9 28 39 fe c4     ..4*....3...(9..
    4cef:	df 21 3e 0b c6 d3 15 3e 18 ce cc 0a 3d 26 d9 c6     .!>....>....=&..
    4cff:	fc 35 30 e6 c3 ef 2d 35 f2 c5 e7 23 37 fe c7 dd     .50...-5...#7...
    4d0f:	18 37 0c cf d8 0e 35 18 da d4 02 30 22 e3 d3 f8     .7....5....0"...
    4d1f:	25 23 ec d4 f2 1c 26 f7 d9 ee 14 26 04 e2 ec 0b     %#....&....&....
    4d2f:	20 0a e7 ec 08 1a 0b ec ee 01 14 0b fb f0 09 14      ...............
    4d3f:	08 00 f7 ff 05 04 f9 fc 0e 00 fc 02 04 ff fa fa     ................
    4d4f:	fc 13 0f fd f9 fb 0d 0e 04 f1 fc 17 15 06 ea e9     ................
    4d5f:	08 1a 07 ea f5 06 19 0f e9 dd f7 1e 16 f7 e2 ef     ................
    4d6f:	20 23 fb d7 ea 19 27 0d da dc 12 30 10 d5 d5 05      #....'....0....
    4d7f:	38 1d d6 cc fd 31 20 e3 c8 f8 3f 2f f0 c5 e4 2b     8....1 ...?/...+
    4d8f:	3b f7 c3 dd 25 38 07 c7 d0 13 3a 10 d1 dd 0d 3d     ;...%8....:....=
    4d9f:	22 db c7 fd 39 2a e7 bf f0 30 3b 00 c0 e3 24 33     "...9*...0;...$3
    4daf:	fb c8 dc 1c 39 0a d4 d2 1c 3b 0d d9 ce 03 2f 1f     ....9....;..../.
    4dbf:	e5 d0 f8 27 20 ee e6 f9 21 27 fa dc ec 17 1e 00     ...' ...!'......
    4dcf:	df ec 10 26 1b e9 e7 04 18 0c f0 ec 02 17 0d f7     ...&............
    4ddf:	ea 05 1a 05 fb f3 fe 05 06 fc f9 fb 02 01 fc 0b     ................
    4def:	0b fd 04 fb 01 15 0d f2 dd fc 00 1e 10 fd fe ec     ................
    4dff:	fb 09 20 0d fd e5 e3 fc 0f 22 10 fb e6 e6 ff 12     .. ......"......
    4e0f:	33 16 ef e3 e8 fe 16 1f 11 f0 e2 e6 04 1d 20 10     3............. .
    4e1f:	ec e2 f9 14 1b 1e 0b e3 e0 e1 0e 1f 1b 06 e2 e6     ................
    4e2f:	e2 11 1a 1a 12 e8 e0 e5 18 19 1f fc df e5 ea 21     ...............!
    4e3f:	1a 20 f2 e1 e5 e9 32 27 1f f0 e0 e0 f2 21 17 1f     . ....2'.....!..
    4e4f:	e9 e4 df fc 21 1b 1c e7 f1 f5 ff 23 19 12 e5 e7     ....!......#....
    4e5f:	e1 07 1b 1b 0a e4 e1 e4 08 1c 1a 06 e5 e1 ef 29     ...............)
    4e6f:	23 18 01 e9 df ef 0d 21 17 ff e5 e0 f4 0b 1d 11     #......!........
    4e7f:	fa e6 e0 fb 08 36 19 fc e7 e5 fe 0b 21 05 fe e3     .....6......!...
    4e8f:	eb fe 0a 1e fe fd dd f0 fc 0e 18 0a 15 de f9 fb     ................
    4e9f:	10 18 fc fd e1 ff fc 11 0f fa fc e1 00 fa 13 0b     ................
    4eaf:	fc 02 02 09 fb 16 05 fe f8 ee 04 f9 12 02 03 f8     ................
    4ebf:	f2 02 fc 0d fd ff f6 f5 01 fc 1c 14 01 f9 fa 00     ................
    4ecf:	01 05 fb 00 fd 01 00 00 ff ff fe 00 fd fe fb fb     ................
    4edf:	01 00 08 01 05 15 04 fe 00 0d fd 01 f3 f8 00 00     ................
    4eef:	10 fc 05 f1 fc 01 03 11 f8 03 e8 fb fb 09 11 09     ................
    4eff:	1d e6 fd fb 0f 11 fc 00 e3 02 fd 17 0f fc f9 e1     ................
    4f0f:	02 fd 1c 0d ff f3 e0 00 00 1f 22 12 eb e4 fe 04     ..........".....
    4f1f:	1f 09 ff e9 e5 fd 08 22 0a ff e3 e7 fb 0f 1f 0c     ......."........
    4f2f:	f7 f0 ff ff 17 1f 0c f3 e0 e7 00 1a 1e 09 eb df     ................
    4f3f:	e6 04 1a 1c 0a e9 e3 ed 27 23 1e 08 e3 e3 e4 11     ........'#......
    4f4f:	1e 1f 00 df e6 e9 1a 1c 22 fd e1 e3 eb 1c 2f 2c     ........"...../,
    4f5f:	f1 e0 df ed 1f 1a 20 ec e2 e2 f3 1f 16 1d e7 e2     ...... .........
    4f6f:	dd f9 20 15 28 f8 e0 de ff 21 1b 19 e1 e5 df 0b     .. .(....!......
    4f7f:	1b 1d 0f e5 e5 e6 0d 21 1b 16 f6 e3 e8 10 1d 1c     .......!........
    4f8f:	00 e3 e3 ee 0e 1e 1a fe e1 e2 ef 1c 31 14 fc e4     ............1...
    4f9f:	e3 f8 0f 1f 0f f9 e1 e4 fd 11 1d 0d f9 eb fb fc     ................
    4faf:	10 20 06 fd e1 f0 00 12 1e 01 fd df f3 fe 10 25     . .............%
    4fbf:	10 fa e1 fb fc 13 12 fc fb e0 ff fc 17 0f fe fc     ................
    4fcf:	e1 0d 0f 15 07 00 f8 e6 04 fd 17 01 ff f4 ec 03     ................
    4fdf:	f9 15 f9 0b 07 f4 01 00 0f ff f6 e8 ff 0e 0f f9     ................
    4fef:	ed f9 0a 16 0a e9 f8 05 0d fd f5 f7 07 0b 03 f6     ................
    4fff:	f5 11 12 fe fc f7 02 03 05 fd 00 ff 02 fe 00 10     ................
    500f:	02 fb fe fe 04 ff fd f9 01 03 06 f8 fd 0d 08 0b     ................
    501f:	ff f4 fa 08 0d fd f1 f2 0a 0d 0f fa ed 07 13 09     ................
    502f:	ef eb 01 17 10 f3 e9 fb 27 18 f2 e5 f6 17 19 fe     ........'.......
    503f:	e4 f0 10 1c 00 e5 fc 0f 21 0b e6 e4 05 20 0d ea     ........!.... ..
    504f:	de 0a 26 12 ef d9 f7 1b 1d f4 e0 fe 19 21 fd dc     ..&..........!..
    505f:	e9 11 22 02 ec eb 0a 23 0a e6 e0 07 21 18 f5 db     .."....#....!...
    506f:	fd 1d 16 ef dc f6 1a 28 fc de f1 12 1f fe e3 e7     .......(........
    507f:	14 26 02 e7 e6 07 19 09 ea e7 0e 19 0d f3 e9 fe     .&..............
    508f:	11 11 f6 f3 ff 0b 12 fb ef f6 0c 0e 02 fd f5 05     ................
    509f:	0c 01 f5 f4 03 07 0f 00 f4 01 05 05 fc fd fd 07     ................
    50af:	0e fe ff 00 00 06 03 01 03 fd 02 01 01 06 fb fc     ................
    50bf:	01 05 09 fb f8 fe 04 0b fd f4 fb 04 0f 02 f2 f8     ................
    50cf:	04 13 08 f0 f3 02 13 0c f2 f0 ff 14 14 f6 ec f9     ................
    50df:	12 19 fa e8 f4 0e 1d 01 e9 ef 09 20 08 e7 ea 05     ........... ....
    50ef:	21 10 eb e8 ff 20 17 ef e4 f8 1c 1c f4 e3 f4 18     !.... ..........
    50ff:	21 fa e3 ee 10 23 03 e4 ea 0b 25 0b e7 e6 03 23     !....#....%....#
    510f:	11 eb e3 fc 1f 18 f1 de f3 26 21 f6 e0 ee 16 1c     .........&!.....
    511f:	00 de f0 1a 1c 06 e5 e7 07 1b 0a e9 f2 05 18 11     ................
    512f:	f0 e7 fa 17 0f ff f3 f6 12 11 fd ea f5 09 11 0c     ................
    513f:	f1 f3 07 0e 03 f1 f5 01 16 0c f4 f6 fe 09 04 fc     ................
    514f:	f7 01 12 04 fe fb fd 01 00 00 fc 09 04 fb 02 01     ................
    515f:	03 fb fb fa 08 11 fc f8 fb 06 0a ff f4 f4 11 12     ................
    516f:	02 f5 f2 04 0e 08 f1 f4 0c 10 0e f4 eb fb 13 10     ................
    517f:	f7 e6 f6 12 16 0d e9 ee 10 19 02 e4 eb 0a 1f 08     ................
    518f:	e9 e3 0b 30 0f eb e0 fe 1e 15 f0 dd f8 1a 1d f3     ...0............
    519f:	e7 fe 14 21 fb dd e8 12 22 05 e0 e4 0e 22 1d ec     ...!...."...."..
    51af:	db 05 22 15 e8 dd fb 21 18 f2 db f7 2d 1f f7 de     .."....!....-...
    51bf:	ee 16 1d ff de ea 0d 21 04 eb f5 07 1f 0b e9 e3     .......!........
    51cf:	00 1a 0e f0 e3 fc 13 1e 02 e2 f9 10 15 fb eb f3     ................
    51df:	0c 14 fe f4 fa 19 07 fa 03 fd 07 fe 02 fb fc 00     ................
    51ef:	00 07 00 ff fa f6 11 0e 09 fe 01 f5 fb ff 02 0b     ................
    51ff:	fc 01 f1 fb ff 03 0e f9 11 fd fa ff 08 0c fd ff     ................
    520f:	ec ff fe 0d 0a fd fc eb 01 fb 1f 19 fc fa eb 00     ................
    521f:	ff 13 07 00 f4 ed fe 03 14 06 00 ef fd 0e 02 16     ................
    522f:	04 fe ec f0 fc 0b 11 08 f9 ee ef ff 0b 13 06 0e     ................
    523f:	fa ee 01 0f 12 08 f3 ed ef 03 10 11 06 f0 ed ef     ................
    524f:	06 12 10 06 ea fd 05 09 11 11 03 ec f0 ef 0f 0f     ................
    525f:	13 fe ec ee f1 10 0e 13 fa ec ed f8 2c 11 13 f7     ............,...
    526f:	ed ec f7 13 0f 12 f3 ee ed fc 14 0e 11 ef ef ea     ................
    527f:	00 11 27 19 ec f0 ec 04 11 11 08 ef ef ee 06 11     ..'.............
    528f:	12 05 f0 ee f1 06 12 0e 11 05 eb f6 06 12 0e 00     ................
    529f:	f0 ee f7 08 11 0c fd f0 ed fc 07 14 08 fe ee ef     ................
    52af:	fd 15 1e 04 fe ee f2 ff 08 14 02 ff ed f5 ff 08     ................
    52bf:	11 ff ff ec fa ff 0a 0f fd ff eb 01 0e 10 0b fe     ................
    52cf:	fe ed 00 fd 0c 07 fd fd ef 02 fd 0d 04 fe fc f2     ................
    52df:	03 fd 0d 01 01 fa 00 0f fd 0a fe 01 f9 f9 01 ff     ................
    52ef:	08 fe 00 fa fc 01 ff 05 fd 00 fb fe ff 00 01 ff     ................
    52ff:	01 0e 07 ff 00 ff 00 ff 01 ff 00 fe fd 00 fe 05     ................
    530f:	fe 01 fb fc 00 00 06 02 10 f8 fc ff 01 09 fd 02     ................
    531f:	f5 fd fe 03 0b fc 02 f0 fe fd 07 09 fd 00 fd 05     ................
    532f:	fb 0b 08 fe fd ed 01 fd 0f 07 ff fa ee 00 fe 11     ................
    533f:	06 ff f7 ed 0b 0b 11 06 ff f3 ef ff 03 14 04 ff     ................
    534f:	ef f1 fe 08 14 05 fc ed f2 fd 10 21 05 fa eb f2     ...........!....
    535f:	ff 0e 11 06 f5 ed f1 03 10 11 04 f3 ed f2 04 1e     ................
    536f:	15 03 ef ed f0 09 10 11 01 ed ee f1 0c 10 12 00     ................
    537f:	eb fb f7 0f 10 13 fb ec ee f4 12 0e 13 f7 ed ed     ................
    538f:	f7 14 0d 1f f8 ed ed fb 14 0e 11 f0 f0 eb 00 13     ................
    539f:	0f 0e ed f0 ea 10 18 0f 0b ed f0 ec 07 11 11 06     ................
    53af:	ed ef ee 09 10 12 01 fa f5 f1 0c 10 11 ff ef ed     ................
    53bf:	f6 0a 11 0e fd ef ed fa 09 1d 12 f5 ee ef 0b 13     ................
    53cf:	05 ed ef 04 16 07 f2 ea 09 18 0a f5 eb fc 10 0e     ................
    53df:	f9 ec f9 0d 10 fc f8 f9 09 10 00 f0 f3 07 0f 05     ................
    53ef:	f3 f3 01 10 11 f6 f3 00 0b 08 f9 f4 fc 09 07 fd     ................
    53ff:	f3 01 0f 06 00 f7 fb 03 06 00 fa fb 01 05 ff 05     ................
    540f:	01 fe 03 00 ff fd 00 00 00 ff 00 ff fe 09 02 01     ................
    541f:	01 fc fc ff 04 02 fd f9 ff 04 08 08 f7 fd 05 08     ................
    542f:	fe f6 f9 06 09 04 fc f5 05 0b 04 f5 f4 02 0d 0e     ................
    543f:	f8 f0 ff 0d 0b f7 f0 f9 12 13 fa ef f6 0c 10 ff     ................
    544f:	ed f4 11 13 03 ef f0 06 13 08 ef f3 06 12 0d f2     ................
    545f:	eb fc 13 0e f9 f1 f8 10 12 fb ea f4 0e 13 07 ee     ................
    546f:	ef 0a 14 05 ed ee 03 17 0f f0 ed 00 13 0c f5 ec     ................
    547f:	fc 18 11 f8 ec f7 0e 0f fe eb f9 10 0f 02 ef f4     ................
    548f:	06 10 03 f4 f6 02 0f 06 f6 f6 fe 0c 08 f9 f7 fd     ................
    549f:	09 09 fc f8 fb 06 09 fe fa fc 03 08 ff fc fd 01     ................
    54af:	07 00 fe fe ff 04 01 ff 00 fe 02 00 ff 02 ff 00     ................
    54bf:	ff ff 04 00 fe fe ff 06 03 fd fb fd 07 05 fc f9     ................
    54cf:	fb 07 09 fd f8 f9 06 0c 00 f7 f7 04 0e 03 f7 f5     ................
    54df:	02 11 06 f7 f2 ff 11 0a f8 f0 fa 10 0e fb ef f7     ................
    54ef:	0f 12 fd ef f2 0c 15 02 ef f1 05 14 06 f6 f3 00     ................
    54ff:	14 0a f4 ea fd 11 10 ff eb f8 10 11 fc e9 f5 0b     ................
    550f:	1a 04 ea f1 09 16 04 ee ec 06 1c 08 f0 eb 00 14     ................
    551f:	0c f5 ea 03 14 0e f9 ea f8 0d 12 fb f0 fb 0a 12     ................
    552f:	01 ef f2 06 11 04 f9 f3 02 11 07 f6 f0 00 0c 0d     ................
    553f:	ff f0 fd 0a 0a fc f4 fa 08 11 ff f4 f9 04 09 00     ................
    554f:	f9 f7 08 0c 01 fb fa 01 05 02 fd fa 09 07 00 ff     ................
    555f:	fc ff 00 01 fe ff fe ff fd 01 0b 01 fd fd fe 03     ................
    556f:	02 ff fa fe 02 06 fd fe 04 03 08 00 f8 f9 03 0a     ................
    557f:	03 f8 f5 02 09 0e fe f1 00 0b 09 f9 f1 fb 0c 0c     ................
    558f:	fc ef f7 14 12 fe f0 f3 08 10 03 ef f1 04 13 06     ................
    559f:	f4 f8 01 13 0b f3 ec fd 12 0e f8 e9 f9 0e 18 04     ................
    55af:	e8 f5 0c 14 00 ec f0 09 15 05 ee ec 0e 1b 08 f2     ................
    55bf:	ef fd 0b 0b fd fe f2 fe fd 09 04 08 06 f2 00 fe     ................
    55cf:	09 04 ff fc f5 01 fe 0a 02 00 fa f8 ff 07 13 fe     ................
    55df:	01 fa f9 00 ff 08 ff 01 fa fc 00 00 06 ff ff 02     ................
    55ef:	08 fe 01 04 fe 00 fb fe ff 00 02 fe 00 fc ff 00     ................
    55ff:	ff 09 0a fe fe ff 00 00 00 ff 00 ff ff ff ff ff     ................
    560f:	ff 00 00 05 0b fb 00 fe 01 02 ff ff fb fe ff 01     ................
    561f:	04 fe 01 f9 01 fe 12 09 fd 00 f8 00 fe 05 03 ff     ................
    562f:	fe f7 01 fd 08 01 00 fc f8 00 ff 08 0c 0c f9 f8     ................
    563f:	00 00 0a 00 00 f8 f8 00 01 0b 00 00 f6 f9 00 03     ................
    564f:	0b ff 03 03 fa ff 05 0a 00 fe f4 fa ff 08 09 01     ................
    565f:	fb f4 fa 01 08 09 00 f9 f4 09 07 09 09 00 f8 f5     ................
    566f:	f9 04 09 08 ff f6 f5 f9 06 0a 09 fe f5 f6 f9 14     ................
    567f:	14 08 fd f4 f6 fa 0a 08 0a f9 f6 f4 fd 0a 09 09     ................
    568f:	f7 f6 f4 fe 0b 08 09 f4 01 01 01 0b 09 07 f4 f7     ................
    569f:	f3 04 0a 0a 05 f4 f7 f4 05 09 0a 02 f4 f6 f5 07     ................
    56af:	09 0a 02 04 fd f6 08 08 0a fe f5 f5 fa 08 09 09     ................
    56bf:	fc f5 f5 fc 08 09 07 fb f5 f5 fd 08 09 0d 0b f6     ................
    56cf:	f6 ff 08 0a 04 fb f5 f8 00 07 0a 01 fc f4 fa 00     ................
    56df:	08 08 00 fb f4 fc 00 08 15 0a fa f4 fe 00 09 05     ................
    56ef:	ff fb f4 00 ff 0a 03 00 fa f6 00 ff 0a 01 00 08     ................
    56ff:	fd 00 00 09 00 01 f9 fa 01 00 08 fe 01 f9 fc 00     ................
    570f:	00 07 fd 01 f7 09 0a 00 05 fd 01 f9 ff fe 02 02     ................
    571f:	fe 00 fb ff ff 01 01 ff ff fd ff 05 0f 00 00 fe     ................
    572f:	ff ff 00 ff 00 ff 00 00 00 00 fe ff 00 00 02 fe     ................
    573f:	00 fc 0f 02 01 02 ff 00 fa 00 fe 04 02 fe ff f8     ................
    574f:	01 fd 07 00 00 fb ff 0c fd 09 00 00 fb f8 01 fe     ................
    575f:	09 ff 01 f8 f9 00 01 09 06 0c f5 fb ff 03 0a ff     ................
    576f:	00 f5 fb ff 04 09 00 fe f5 fa 05 13 08 01 fc f4     ................
    577f:	fb 00 08 08 00 fa f4 fb 01 09 09 ff fe 00 fa 03     ................
    578f:	09 08 ff f7 f4 fb 05 0a 08 fe f6 f5 fc 06 0e 15     ................
    579f:	fb f6 f5 fc 08 09 08 fa f5 f5 fd 0a 08 08 f8 f5     ................
    57af:	f9 0c 09 0a 02 f7 f6 01 09 05 f8 f5 ff 0a 07 fb     ................
    57bf:	fe fe 08 09 fc f4 f9 08 0a 00 f3 f9 04 10 0b f4     ................
    57cf:	f6 03 0c 04 f6 f4 00 0c 06 f9 f1 06 11 06 fb f2     ................
    57df:	fc 09 0a fd f3 f9 07 0b ff fe fb 03 0c 01 f7 f6     ................
    57ef:	03 0a 05 f7 f6 ff 0b 10 fb f5 fe 07 07 fc f7 fb     ................
    57ff:	07 06 00 f6 00 0d 05 01 f8 fb 02 06 01 fa fa 00     ................
    580f:	06 00 04 01 fd 05 01 fe fa ff 01 03 fd 03 02 ff     ................
    581f:	02 fe fe fe 01 ff 02 06 fe 00 ff ff 00 00 00 fd     ................
    582f:	06 03 00 01 fc fe 00 04 ff 00 02 ff 04 01 fc fb     ................
    583f:	00 05 03 04 fa fd 05 04 fe f7 fd 03 0b 04 f6 fb     ................
    584f:	03 08 00 f8 f8 03 10 03 f7 f7 01 0a 04 fa f4 05     ................
    585f:	0e 06 fc f3 fd 08 0a fc f6 02 07 0a ff f4 f8 05     ................
    586f:	0c 01 fc f9 02 0d 03 f7 f3 01 0a 09 fb f2 ff 0a     ................
    587f:	0a fe f2 fc 08 0b 01 f3 f9 07 0b 04 f4 f7 05 0b     ................
    588f:	07 f7 f5 03 0a 08 f9 f4 01 09 09 fd f4 fe 07 09     ................
    589f:	ff f5 fd 05 09 02 f6 fb 04 08 04 f8 fa 02 07 06     ................
    58af:	fa f9 01 05 07 fd f9 00 03 07 ff fa ff 02 06 01     ................
    58bf:	fb ff 01 04 03 fc ff 00 02 04 fe ff ff 01 04 ff     ................
    58cf:	ff ff fe 03 00 00 00 fd 02 02 01 01 fc 00 02 02     ................
    58df:	02 fc fc 04 04 02 fd fa fe 04 05 fd fc ff 03 06     ................
    58ef:	fe f9 fa 04 07 02 fc f8 02 08 02 f9 f7 01 08 09     ................
    58ff:	fb f5 ff 09 07 fa f5 fb 0a 0d fc f5 fa 07 0a ff     ................
    590f:	f4 f7 0a 0c 01 f5 f5 03 0b 05 f5 f7 04 0a 07 f8     ................
    591f:	f3 fe 0b 08 fb f7 fc 09 0a fd f3 f8 07 0a 03 f7     ................
    592f:	f6 05 0b 03 f5 f6 02 0c 09 f7 f5 00 0a 07 fa f5     ................
    593f:	fd 0c 0a fb f6 fb 07 08 ff f6 fa 04 08 ff fe fc     ................
    594f:	02 08 01 f9 f9 01 06 03 fb f9 ff 06 0a fd fa fe     ................
    595f:	03 03 fe fb fd 02 02 00 fb 00 06 01 00 fd fe 00     ................
    596f:	01 00 ff ff ff 00 fe 04 04 fe ff fe 00 01 00 fe     ................
    597f:	fe 00 02 01 fd 02 01 02 03 fd fb fe 04 03 fe f9     ................
    598f:	fd 03 07 05 f9 fb 03 07 01 f8 fa 02 08 02 f9 f6     ................
    599f:	04 0e 03 fa f5 ff 08 08 fd f7 f7 03 06 04 03 00     ................
    59af:	fa fb 04 04 06 fe f9 fa fc 05 05 05 fe f9 fa fc     ................
    59bf:	07 0d 04 fd f9 fa fe 05 05 03 fd fa fa ff 04 05     ................
    59cf:	02 fc fc 03 00 04 05 01 fc f9 fc 00 05 05 00 fd     ................
    59df:	f9 fd 00 04 06 07 fd f9 fe 00 05 03 ff fa fa 00     ................
    59ef:	00 05 ff ff fa fa ff 08 05 ff 00 fa fb 00 00 05     ................
    59ff:	00 00 fa ff ff ff 05 ff ff 03 ff 00 00 04 00 00     ................
    5a0f:	fa ff ff ff 00 ff ff fa ff ff ff 00 ff 00 03 08     ................
    5a1f:	00 00 00 ff ff fe ff ff 00 ff ff ff ff ff ff 00     ................
    5a2f:	00 00 00 00 ff 08 fe ff 00 ff 00 00 00 fd 00 00     ................
    5a3f:	ff 00 00 ff fe 00 ff 03 ff ff ff 08 ff 00 05 00     ................
    5a4f:	00 00 ff 00 00 06 00 00 fd ff ff ff 05 ff ff fa     ................
    5a5f:	00 08 08 05 00 00 fa 00 00 01 05 00 00 fa 00 00     ................
    5a6f:	05 05 ff 00 fa 00 ff 06 0d ff ff fa ff 00 05 05     ................
    5a7f:	00 fa fa ff 00 05 05 00 fa fa 00 01 81              .............

00005a8c <CrashWave>:
    5a8c:	f5 13 41 c7 7f b9 3b d8 39 85 2c ba ec fd 21 ba     ..A...;.9.,...!.
    5a9c:	5a 2b dd 1c 7f df 14 e2 35 d7 80 9b 80 94 b7 7a     Z+......5......z
    5aac:	0a d9 6a 9f 9a e6 7c 34 92 81 81 83 8a 8e 80 89     ..j...|4........
    5abc:	84 88 b5 e2 d4 85 81 83 92 a5 91 82 b1 bf a9 8b     ................
    5acc:	81 82 82 81 b4 6c 34 8d a0 11 5c 87 02 7d 23 db     .....l4...\..}#.
    5adc:	db d8 00 38 7f b6 1e 20 84 73 2d 93 a0 22 36 c8     ...8... .s-.."6.
    5aec:	9a 71 e2 a5 7a f6 a8 7d 2f d2 ee 60 7b 1a 81 fd     .q..z..}/..`{...
    5afc:	79 a0 34 5d a4 87 9b 09 61 7f 6b 3e c8 88 8e cc     y.4]....a.k>....
    5b0c:	08 5b 6e da 85 88 84 8a cf 37 7e 6e 50 3e 40 68     .[n......7~nP>@h
    5b1c:	68 22 07 b1 85 80 df 27 56 7f 18 9a ad eb 1e 5d     h".....'V......]
    5b2c:	7f 5d 44 70 7b 14 94 ee 7f 05 9e 6e 9b bf 23 45     .]Dp{......n..#E
    5b3c:	44 11 85 de 5c b1 48 94 19 7f 5c 47 71 58 9a 53     D...\.H...\GqX.S
    5b4c:	b7 4a d2 84 f0 f6 cf 81 62 d2 28 d6 fa 7f fa 19     .J......b.(.....
    5b5c:	1c 7f e1 e2 30 bc 72 bd 82 a7 b5 9e 80 1f 48 a2     ....0.r.......H.
    5b6c:	78 ba 97 43 7b ef 90 80 88 c6 59 72 17 cb 81 24     x..C{.....Yr...$
    5b7c:	75 c4 80 a9 f9 5f 79 4b 08 b3 a3 9f 9f 93 83 82     u...._yK........
    5b8c:	88 81 85 8b 85 80 83 83 82 91 a0 9b 90 94 a3 cd     ................
    5b9c:	26 55 73 7f 7d 5b ed 8a c1 1f 66 7f 42 a5 b2 4e     &Us.}[....f.B..N
    5bac:	7e 6a 0f a5 80 b6 fb 11 fc d0 a2 8b 80 98 0d 7f     ~j..............
    5bbc:	27 92 a0 13 75 56 a9 95 10 69 7f 7f 65 33 06 ed     '...uV...i..e3..
    5bcc:	00 3f 79 7f 77 54 19 bb 80 aa 0c 5d 7f 79 67 07     .?y.wT.....].yg.
    5bdc:	9b 80 94 97 92 bd f7 4d 69 4f 48 4a 4a 5f 4d 4a     .......MiOHJJ_MJ
    5bec:	41 17 e5 a8 80 84 80 95 d7 6a 7b 62 39 08 a4 86     A........j{b9...
    5bfc:	cb 21 50 66 6c 78 74 7f 52 02 fe c9 30 6b 5c be     .!Pflxt.R...0k\.
    5c0c:	84 d5 53 7b 73 3f 10 ea dd dd ee 0e 41 6c 7f 64     ..S{s?......Al.d
    5c1c:	18 b5 80 a9 f8 4e 7f 44 cf 85 9a 0b 77 69 08 bc     .....N.D....wi..
    5c2c:	87 89 b4 e9 0d 21 31 29 13 ea c7 91 83 c1 33 72     .....!1)......3r
    5c3c:	78 2b b9 86 a2 e3 4f 7b 59 ee bd 8b 86 c2 11 4d     x+....O{Y......M
    5c4c:	67 7f 6f 3d 03 e0 ae 91 84 83 81 83 8c 9f c3 f6     g.o=............
    5c5c:	08 54 76 7e 3d 34 e9 9b 80 ac c3 e6 40 67 7f 6a     .Tv~=4......@g.j
    5c6c:	78 4d 04 ab 83 82 89 cc 12 61 7c 7a 77 3e 08 c2     xM.......a|zw>..
    5c7c:	ca aa 8d 81 80 80 81 80 80 80 80 80 80 80 83 86     ................
    5c8c:	8a 8e 96 9a 9e a0 ac a9 a7 9c 94 99 91 81 80 86     ................
    5c9c:	93 8e ac bc df f0 cf d5 f2 f8 13 f3 dc ee f4 0f     ................
    5cac:	13 e0 fb 11 30 53 3a 4c 66 7a 7f 7b 7b 7f 7f 7e     ....0S:Lfz.{{..~
    5cbc:	7c 79 7a 7c 7c 7f 6e 5c 69 67 6a 66 47 5a 69 6f     |yz||.n\igjfGZio
    5ccc:	7e 6e 6d 7a 78 7f 74 60 62 5c 59 58 1c 0c 08 fd     ~nmzx.t`b\YX....
    5cdc:	fa d1 b4 bc b4 c1 bc a9 b2 bb cb d6 bf b5 bc b2     ................
    5cec:	b0 a0 8f 8a 86 82 80 80 80 80 80 80 80 80 80 80     ................
    5cfc:	81 87 97 a6 b1 ba c2 d9 f6 f3 fc f6 09 30 2c 37     .............0,7
    5d0c:	39 42 6c 78 7c 7c 7e 5f 23 07 dc b9 9b 80 85 90     9Blx||~_#.......
    5d1c:	a9 b4 fd 2c 3f 56 67 74 7a 6b 5b 43 1a c8 9e 89     ...,?Vgtzk[C....
    5d2c:	80 84 b4 fd 26 51 6b 7c 76 65 53 3d 2a fd d4 c6     ....&Qk|veS=*...
    5d3c:	af a1 8e 80 80 80 80 8c a3 bc d2 eb fa 0c 13 16     ................
    5d4c:	08 00 f6 e7 d8 c8 b6 a7 95 88 81 80 80 80 83 8a     ................
    5d5c:	91 9c a8 c2 e2 01 23 44 65 79 77 66 45 18 e3 b4     ......#DeywfE...
    5d6c:	90 80 80 88 9b b9 dc f7 10 30 4c 66 75 7a 71 59     .........0LfuzqY
    5d7c:	36 0b d5 ad 92 81 80 85 96 a9 c0 dd f2 06 0f 19     6...............
    5d8c:	2c 3a 4a 58 60 6c 75 7a 78 76 6e 63 57 46 3c 37     ,:JX`luzxvncWF<7
    5d9c:	2b 25 21 22 2a 2f 33 39 3e 42 44 44 42 40 3b 36     +%!"*/39>BDDB@;6
    5dac:	32 2d 29 27 22 20 23 27 2f 36 3c 4a 55 61 6c 6f     2-)'" #'/6<JUalo
    5dbc:	72 75 77 79 77 77 77 78 78 78 76 76 77 78 79 78     ruwywwwxxxvvwxyx
    5dcc:	78 79 77 73 6f 70 69 62 59 56 61 62 5e 62 5f 68     xywsopibYVab^b_h
    5ddc:	6e 6f 70 6f 6f 75 74 71 70 68 6b 6b 63 5f 58 5c     nopooutqphkkc_X\
    5dec:	65 63 65 68 6a 73 77 77 78 79 79 78 78 78 78 79     ecehjswwxyyxxxxy
    5dfc:	77 79 79 7a 79 79 79 7a 79 79 78 77 75 74 71 70     wyyzyyyzyyxwutqp
    5e0c:	6d 6c 6a 6b 6b 6f 72 75 77 79 79 78 74 73 6f 70     mljkkoruwyyxtsop
    5e1c:	67 61 5f 5c 5b 54 42 3c 34 2b 19 f2 d3 c7 ae 9e     ga_\[TB<4+......
    5e2c:	87 80 80 88 91 a7 d9 f7 0d 27 32 5d 73 78 79 75     .........'2]sxyu
    5e3c:	5e 2d 07 df bd 9c 80 82 95 b4 df 15 56 68 78 78     ^-..........Vhxx
    5e4c:	73 49 28 0d ed d3 a5 84 80 80 84 9b d2 f2 18 35     sI(............5
    5e5c:	52 6b 79 79 7a 75 71 67 65 60 60 5d 5c 5d 5f 60     Rkyyzuqge``]\]_`
    5e6c:	62 66 6a 6d 6f 72 76 7b 7a 77 6e 62 40 19 f5 ca     bfjmorv{zwnb@...
    5e7c:	a8 89 80 85 9f c3 f2 39 5f 73 7b 72 4f 1e f3 c1     .......9_s{rO...
    5e8c:	9b 80 81 9c c4 fb 31 65 7c 75 5c 36 03 cb a9 8f     ......1e|u\6....
    5e9c:	82 80 80 87 95 a3 b3 c6 dc eb fd 0a 19 24 2c 32     .............$,2
    5eac:	35 35 31 2a 21 11 ff e6 c9 b0 99 87 80 81 91 a9     551*!...........
    5ebc:	cc f1 1e 46 63 76 7b 70 51 27 f5 c3 99 81 82 a1     ...Fcv{pQ'......
    5ecc:	d7 0c 42 6b 7b 71 50 20 f3 c4 9e 86 80 86 99 b8     ..Bk{qP ........
    5edc:	de 07 2f 4e 68 77 7c 76 69 57 3d 26 0e f9 eb dd     ../Nhw|viW=&....
    5eec:	d2 cb c7 c5 c5 c6 c9 cd d2 d7 df e5 ee f7 fe 0a     ................
    5efc:	19 27 38 46 55 66 74 7c 7c 76 65 4c 27 02 e6 c7     .'8FUft||veL'...
    5f0c:	a4 8f 82 80 84 93 a7 cc f8 0a 2d 50 6c 7b 7d 76     ..........-Pl{}v
    5f1c:	5f 3c 0f e5 d0 ac 90 82 82 85 91 ad c3 e2 f8 08     _<..............
    5f2c:	28 43 5d 6c 75 7c 7d 76 66 59 4b 2e 16 fd e8 e0     (C]lu|}vfYK.....
    5f3c:	cd bc b1 a6 a4 9f 97 90 8b 89 87 83 82 81 82 82     ................
    5f4c:	84 87 89 8c 8e 8f 90 91 91 8f 8e 8c 8a 89 87 86     ................
    5f5c:	85 84 84 83 83 83 82 82 82 82 82 82 82 83 84 87     ................
    5f6c:	8b 92 9a a3 af bb c6 d3 df ee f9 04 0e 1a 24 30     ..............$0
    5f7c:	39 45 50 5a 61 6d 74 7c 7d 7f 7b 79 6d 6b 3b 2b     9EPZamt|}.{ymk;+
    5f8c:	2f 0a eb 23 3e fb c4 d4 16 3a 3e 2a 11 fb f0 ee     /..#>....:>*....
    5f9c:	f3 00 18 2f 40 3b 1d ec c4 c8 f3 18 3d 35 fd cb     .../@;......=5..
    5fac:	c3 ee 2d 3f 17 e6 cb c0 d2 eb 03 0d 18 17 10 fc     ..-?............
    5fbc:	e8 d3 c0 d0 05 34 41 27 f1 c6 cd ed 13 3d 37 0c     .....4A'.....=7.
    5fcc:	db d0 be d6 f8 24 33 3e 3e 2a 0b f2 e0 cd c4 c2     .....$3>>*......
    5fdc:	c1 c2 c4 cd d8 f7 06 1a 39 40 2e 0e 07 d6 c5 c7     ........9@......
    5fec:	eb f2 11 2f 41 3a 34 34 10 e7 c4 c4 c2 d8 fd 22     .../A:44......."
    5ffc:	40 3e 40 2a 14 f2 dd e0 ce c4 c0 c0 c2 c2 c0 c0     @>@*............
    600c:	c0 c0 c0 c0 c0 c1 c3 c4 c7 c9 cb cb ce d1 d0 cd     ................
    601c:	c8 c6 c7 c1 c0 c1 ce cf d3 e2 ec ff fd ee fa 02     ................
    602c:	09 10 fb f7 00 04 15 09 f9 0d 14 2a 2e 29 31 3d     ...........*.)1=
    603c:	40 3f 3d 41 3f 3f 3d 3d 3e 3f 3f 40 40 36 33 39     @?=A??==>??@@639
    604c:	34 3b 33 2b 36 38 3e 3f 38 3d 3e 3f 40 3a 33 34     4;3+68>?8=>?@:34
    605c:	2f 33 26 0d 0a 06 02 fd e7 e0 e2 e1 e8 e2 dc e1     /3&.............
    606c:	e8 f0 ef e2 e2 e1 dd da d0 c9 c7 c4 c2 c0 bf be     ................
    607c:	be be be be be bf c1 c5 cb d6 db e1 e5 ea fb 02     ................
    608c:	01 05 01 13 1d 1d 22 22 2e 3c 3e 3f 3d 3a 1c 03     ......"".<>?=:..
    609c:	f3 de d2 c2 c1 c7 d2 da e9 0d 1e 27 31 38 3d 39     ...........'18=9
    60ac:	30 27 16 fd d6 c9 bf c0 c9 eb 0a 1d 31 3a 3e 36     0'..........1:>6
    60bc:	2f 24 1b 0f f6 e8 e0 d5 cf c4 be bd be c1 c9 d5     /$..............
    60cc:	e1 ec f5 fc 02 04 03 00 fc f6 ed e5 dd d4 cd c4     ................
    60dc:	c0 be bd bd c0 c4 c8 cd d3 dc ee ff 0f 20 30 3c     ............. 0<
    60ec:	3d 35 26 10 f6 dc c9 bf bd c2 cc da ec fa 07 16     =5&.............
    60fc:	25 32 3b 3d 3a 2f 1f 09 f1 da cb c1 bc c0 c8 d2     %2;=:/..........
    610c:	dc ea f7 00 09 0c 13 1c 22 2b 30 35 3a 3d 3d 3b     ........"+05:==;
    611c:	38 33 2d 25 1e 1b 17 12 11 10 13 17 19 1c 1f 21     83-%...........!
    612c:	22 22 21 20 1e 1c 19 17 15 13 12 10 11 13 16 1b     ""! ............
    613c:	1f 23 2a 2f 35 38 39 3b 3c 3c 3d 3c 3c 3c 3c 3d     .#*/589;<<=<<<<=
    614c:	3c 3b 3c 3c 3d 3d 3d 3d 3c 3b 37 37 36 32 2e 2a     <;<<====<;7762.*
    615c:	2c 30 2f 30 30 30 35 38 37 38 37 38 3b 38 38 35     ,0/000587878;885
    616c:	32 34 33 2f 2d 2b 2f 32 32 33 35 37 3b 3b 3c 3c     243/-+/22357;;<<
    617c:	3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c     <<<<<<<<<<<<<<<<
    618c:	3c 3b 3b 3a 39 38 37 36 35 35 35 36 38 3a 3b 3c     <;;:987655568:;<
    619c:	3c 3c 3b 39 38 37 37 32 2f 2e 2d 2c 26 1d 1c 16     <<;98772/.-,&...
    61ac:	0f 05 ee e4 db cf c9 be be c1 c8 ce de f7 04 0f     ................
    61bc:	18 23 36 3b 3d 39 35 23 05 f2 e1 d0 c3 bf ca d5     .#6;=95#........
    61cc:	ee fe 1e 35 3a 3d 3a 2f 15 08 f8 ea db c6 be bd     ...5:=:/........
    61dc:	c1 c9 de f8 08 19 26 31 3a 3d 3c 3b 39 35 32 31     ......&1:=<;9521
    61ec:	2f 2f 2e 2e 2f 30 30 32 33 36 36 38 3a 3c 3d 3c     //../0023668:<=<
    61fc:	38 33 28 12 fe ea d7 c9 bf c0 cb dc f2 0d 2c 37     83(...........,7
    620c:	3d 3a 30 18 fe e7 d1 c3 be ca dc f6 12 2a 3c 3c     =:0..........*<<
    621c:	32 20 0a ee d7 ca c2 be be c2 c8 d0 d7 df ea f4     2 ..............
    622c:	fc 04 0a 10 15 19 1a 1b 19 17 11 0b 01 f7 e8 da     ................
    623c:	ce c5 bf bf c5 d1 e0 f3 08 1e 2e 39 3e 3b 2d 19     ...........9>;-.
    624c:	01 e7 d0 c2 bf cb e4 00 1b 32 3d 3b 2d 17 fd e7     .........2=;-...
    625c:	d2 c5 be c1 c9 d7 ea fe 13 24 31 3a 3e 3d 36 2e     .........$1:>=6.
    626c:	22 15 0a fe f6 f0 ea e6 e3 e2 e2 e2 e3 e5 e8 eb     "...............
    627c:	ee f2 f5 fa ff 03 0a 12 19 22 29 31 39 3e 3e 3c     .........")19>><
    628c:	35 2a 18 05 f2 e6 d6 c8 c2 bf c1 c5 d0 df f8 06     5*..............
    629c:	12 24 33 3c 3f 3c 34 21 0c f3 e4 d9 c8 c1 bf c3     .$3<?<4!........
    62ac:	c7 d3 e0 ed ff 08 11 21 2a 34 3a 3d 3f 3d 37 2d     .......!*4:=?=7-
    62bc:	28 1e 10 06 f8 f2 ed e3 dd d7 d3 d3 cf cb c8 c6     (...............
    62cc:	c5 c4 c2 c1 c0 c1 c0 c1 c2 c3 c4 c5 c5 c6 c5 c5     ................
    62dc:	c4 c4 c3 c3 c2 c1 c1 c1 c1 c1 c0 c1 c0 c1 c0 c1     ................
    62ec:	c1 c1 c1 c2 c3 c5 c7 cb cf d4 da e1 e6 ed f3 fb     ................
    62fc:	00 06 0b 10 15 1b 20 25 2a 2f 32 38 3a 3e 3e 40     ...... %*/28:>>@
    630c:	3c 3d 23 16 17 04 f4 11 1f fc e2 ec 0b 1d 1e 13     <=#.............
    631c:	07 fd f8 f6 f9 01 0d 17 20 1c 0a f1 e1 e4 f9 13     ........ .......
    632c:	1f 16 ff e5 e5 01 1b 1f 0c f1 e2 e2 eb f5 01 07     ................
    633c:	0c 0a 08 fe f2 e4 e1 ea 02 1a 1d 05 ed e4 e4 00     ................
    634c:	19 1e 19 07 eb e0 e5 f1 fb 12 1e 20 1a 14 06 f7     ........... ....
    635c:	eb e5 e1 e1 e0 e1 e4 ea ec fb 08 19 20 20 17 05     ............  ..
    636c:	f0 e1 e1 e4 f3 0a 1c 1f 1f 1e 14 04 ed eb e4 e0     ................
    637c:	eb 03 10 0f 21 1d 15 02 04 f8 ea e3 e0 e0 e0 e0     ....!...........
    638c:	e0 e0 e1 df e0 e0 e0 e0 e1 e1 e2 e3 e4 e5 e7 e7     ................
    639c:	e8 e7 e5 e7 e6 e3 e1 df e0 e0 e5 ea f4 fb f6 fb     ................
    63ac:	00 04 0d 06 00 06 08 0e 0c 01 06 0b 0f 17 0d 11     ................
    63bc:	18 1e 20 1f 20 20 1e 1c 19 1e 20 1e 1e 1d 1e 1f     .. .  .... .....
    63cc:	20 20 20 1f 19 1b 1d 1f 20 1c 1e 20 20 1f 1e 1f        ..... ..  ...
    63dc:	1f 20 20 1f 17 16 15 12 13 08 fd fc fa fd f8 ef     .  .............
    63ec:	f0 f3 f6 f8 f5 f3 f6 f5 f8 f3 ec ea e8 e6 e4 e1     ................
    63fc:	e0 df df df df df df df df df df e1 e3 e5 e7 ec     ................
    640c:	f0 f1 f3 f3 f7 ff fe 01 01 02 0b 10 13 16 16 1c     ................
    641c:	1f 1d 18 12 07 f1 ea e3 e0 de e6 ed f3 f9 fe 09     ................
    642c:	18 1b 1e 1e 1e 15 0a 00 f6 ef e3 e0 e6 ee f9 05     ................
    643c:	18 1d 1f 1d 1b 13 0a 06 ff fa f2 e9 e5 e2 e0 df     ................
    644c:	e0 e2 e6 ec f1 f8 fe 01 04 05 05 03 01 fe fa f7     ................
    645c:	f2 ec e8 e5 e2 e0 df df df e0 e1 e4 e8 ec f2 f9     ................
    646c:	04 0e 16 1c 1e 1c 14 09 fc ef e6 e0 df e1 e6 ec     ................
    647c:	f4 fd 03 0b 12 19 1d 1e 1c 17 0d 02 f7 ec e4 df     ................
    648c:	df e1 e5 eb f3 fa fe 02 06 0b 0e 11 13 16 1a 1c     ................
    649c:	1e 1e 1e 1c 19 16 13 10 0c 09 06 04 05 05 06 07     ................
    64ac:	08 0a 0c 0d 0e 0e 0d 0d 0c 0b 0a 09 07 06 06 06     ................
    64bc:	07 07 08 0a 0d 10 14 15 18 1b 1c 1d 1d 1d 1d 1e     ................
    64cc:	1e 1e 1d 1d 1d 1d 1e 1d 1d 1e 1e 1e 1d 1d 1c 1b     ................
    64dc:	18 16 17 17 16 16 14 17 19 19 19 1a 1a 1c 1c 1c     ................
    64ec:	1c 1a 1b 1c 1a 19 17 16 18 17 17 17 17 1a 1c 1c     ................
    64fc:	1c 1d 1d 1e 1e 1e 1e 1e 1d 1d 1e 1e 1e 1e 1e 1e     ................
    650c:	1e 1e 1e 1e 1d 1d 1d 1c 1b 1a 1a 19 18 19 19 1a     ................
    651c:	1a 1b 1c 1d 1e 1e 1e 1e 1d 1c 1c 1c 1c 1b 18 18     ................
    652c:	17 16 15 10 09 07 01 fe f5 e9 e6 e2 df df e1 e6     ................
    653c:	ea f0 f4 01 0b 10 15 18 1c 1d 1a 17 0f 07 f4 e7     ................
    654c:	e2 de df e6 f7 00 09 12 18 1e 1c 19 13 0d ff f2     ................
    655c:	ec e5 e1 de e1 e6 ee f6 00 0c 16 19 1d 1e 1e 1c     ................
    656c:	1b 1a 19 17 16 15 15 15 15 15 16 16 17 17 19 1a     ................
    657c:	1c 1d 1e 1e 1d 1a 16 0f 08 fb ed e6 e0 de e1 ec     ................
    658c:	f8 04 0f 17 1d 1d 18 10 05 f9 e8 e1 de e2 e9 fa     ................
    659c:	0a 16 1d 1f 1a 0e 03 f7 ed e5 e0 df df e1 e4 e9     ................
    65ac:	ee f2 f7 fc 00 05 08 0b 0d 0f 10 10 10 0e 0c 09     ................
    65bc:	04 fe f7 f0 ea e4 e0 df e1 e6 ee f7 02 0c 15 1c     ................
    65cc:	1f 1e 17 0e 01 f4 e9 e1 df e4 f0 00 0d 19 1e 1d     ................
    65dc:	16 0b fd f1 e7 e1 df e1 e6 ee f8 01 0b 14 1a 1e     ................
    65ec:	1f 1d 19 14 0e 07 02 fc f7 f4 f1 f0 ef ee ee ee     ................
    65fc:	ef f0 f1 f3 f4 f6 f8 fa fd 00 04 06 0a 0e 13 18     ................
    660c:	1c 1e 1f 1e 1a 14 0d 05 fa f2 e8 e3 e1 df e1 e5     ................
    661c:	eb ef fa 04 0d 16 1b 1e 1f 1c 16 0d 05 f9 ef e7     ................
    662c:	e1 e0 e0 e2 e7 ef f4 f8 01 08 0f 16 18 1c 1f 1f     ................
    663c:	1e 1c 19 13 0d 06 00 fe f7 f2 ed ea e9 e8 e5 e4     ................
    664c:	e2 e1 e1 e1 e0 e0 e0 e0 e0 e1 e1 e3 e3 e4 e4 e5     ................
    665c:	e6 e6 e5 e5 e5 e4 e3 e3 e2 e2 e2 e1 e1 e1 e1 e0     ................
    666c:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e1 e2 e4 e6 e8 eb     ................
    667c:	ee f1 f4 f8 fb fd 00 03 05 08 0b 0e 11 14 16 19     ................
    668c:	1b 1e 1f 20 1f 20 13 0b 0c 03 fa 08 0f ff f1 f5     ... . ..........
    669c:	05 0e 0f 0a 04 ff fc fb fd 00 06 0b 10 0e 07 fb     ................
    66ac:	f1 f2 fc 06 0f 0d ff f3 f1 fb 0b 10 06 f9 f2 f0     ................
    66bc:	f4 fa 00 03 06 05 04 ff fa f4 f0 f4 01 0d 10 09     ................
    66cc:	fc f1 f3 fb 04 0f 0d 03 f6 f4 ef f5 fe 09 0c 0f     ................
    66dc:	0f 0a 02 fc f8 f3 f1 f0 f0 f0 f1 f3 f6 fd 01 06     ................
    66ec:	0e 10 0b 03 01 f5 f1 f2 fb fc 04 0b 10 0e 0d 0c     ................
    66fc:	04 fa f1 f1 f0 f6 ff 08 0f 0f 0f 0a 04 fb f6 f7     ................
    670c:	f3 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f1 f1 f1     ................
    671c:	f2 f3 f4 f4 f5 f5 f5 f4 f3 f2 f2 f1 f0 f0 f3 f3     ................
    672c:	f4 f7 f9 fe fe fa fd ff 01 02 fd fc fe 00 04 01     ................
    673c:	fd 02 03 09 0a 09 0b 0e 0f 10 0f 0f 0f 10 0f 0f     ................
    674c:	0f 0f 0f 0f 0f 0d 0c 0d 0c 0e 0c 09 0c 0d 0f 0f     ................
    675c:	0d 0e 0f 0f 0f 0d 0b 0c 0a 0b 08 02 01 00 ff fe     ................
    676c:	f8 f7 f7 f7 f8 f7 f6 f7 f8 fa fa f7 f7 f7 f6 f5     ................
    677c:	f3 f1 f1 f0 f0 f0 ef ef ef f0 f0 ef ef ef f0 f0     ................
    678c:	f2 f4 f5 f7 f8 f9 fd ff fe ff fe 03 06 06 07 07     ................
    679c:	0a 0e 0f 0f 0f 0f 07 01 fd f8 f5 f1 f0 f1 f4 f6     ................
    67ac:	f9 03 07 09 0c 0d 0f 0e 0c 09 05 ff f5 f2 ef f0     ................
    67bc:	f2 fb 03 08 0c 0e 0f 0c 0b 08 05 02 fc f9 f7 f4     ................
    67cc:	f3 f0 ef ef f0 f1 f3 f6 f9 fc ff 00 02 02 02 01     ................
    67dc:	00 ff fd fb f8 f6 f4 f2 f0 f0 ef ef ef f0 f1 f2     ................
    67ec:	f4 f6 fa fe 02 07 0b 0e 0f 0d 0a 04 fe f7 f2 f0     ................
    67fc:	ef f0 f3 f6 fb fe 01 05 09 0c 0e 0f 0e 0b 07 01     ................
    680c:	fb f6 f2 f0 ef f0 f2 f5 f8 fb fe 01 03 04 06 07     ................
    681c:	08 0a 0b 0d 0e 0f 0f 0e 0d 0c 0b 09 07 06 05 04     ................
    682c:	04 04 04 05 06 07 07 08 08 08 08 07 07 07 06 05     ................
    683c:	05 04 04 04 04 04 05 06 07 08 0a 0b 0d 0d 0e 0e     ................
    684c:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0f 0e 0f     ................
    685c:	0e 0e 0d 0d 0d 0c 0b 0a 0a 0c 0b 0b 0b 0b 0d 0d     ................
    686c:	0d 0d 0d 0d 0e 0e 0d 0d 0c 0d 0c 0b 0b 0a 0b 0c     ................
    687c:	0c 0c 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    688c:	0f 0f 0f 0e 0f 0f 0f 0e 0f 0e 0e 0e 0e 0d 0d 0d     ................
    689c:	0d 0d 0d 0d 0e 0e 0e 0e 0f 0e 0e 0e 0d 0d 0d 0c     ................
    68ac:	0b 0b 0b 0b 09 07 06 05 03 01 fb f9 f7 f4 f2 f0     ................
    68bc:	ef f0 f2 f3 f7 fd 00 03 05 08 0d 0e 0e 0d 0c 08     ................
    68cc:	01 fc f8 f4 f1 f0 f3 f5 fb ff 07 0c 0d 0e 0d 0b     ................
    68dc:	04 01 fe fa f7 f2 f0 f0 f1 f3 f8 fe 01 05 08 0b     ................
    68ec:	0d 0d 0d 0d 0c 0c 0b 0b 0a 0a 0a 0a 0a 0a 0a 0b     ................
    68fc:	0b 0c 0c 0c 0c 0d 0d 0d 0c 0b 08 03 ff fb f7 f3     ................
    690c:	f1 f2 f4 f8 fc 02 09 0b 0d 0c 0a 05 ff fa f5 f2     ................
    691c:	f2 f4 f8 fd 03 08 0c 0c 0a 06 01 fc f7 f4 f3 f2     ................
    692c:	f2 f3 f4 f5 f7 f9 fb fd ff 00 01 03 04 04 05 04     ................
    693c:	04 03 02 01 00 fe fb f8 f6 f4 f3 f2 f4 f6 f9 fd     ................
    694c:	00 04 08 0a 0b 0a 07 03 00 fb f6 f4 f4 f5 fa ff     ................
    695c:	04 08 09 09 07 03 ff fb f8 f5 f4 f5 f6 f9 fb ff     ................
    696c:	02 05 07 08 09 09 07 06 04 02 00 ff fe fd fb fb     ................
    697c:	fb fb fb fb fb fc fc fc fc fd fe fe ff 00 00 02     ................
    698c:	03 03 05 06 06 07 07 07 06 05 02 00 fd fc fa f8     ................
    699c:	f8 f7 f8 f8 f9 fb fe 00 01 03 05 06 05 03 01 00     ................

000069ac <PCMSPEEDS>:
    69ac:	17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17     ................
    69bc:	17 17 17 17                                         ....

000069c0 <PCMPRIORITY>:
    69c0:	01 02 03 04 04                                      .....

000069c5 <PCMTIMES>:
    69c5:	05 0f 14 14 0f 0f                                   ......

000069cb <patches>:
    69cb:	00 00 00 44 1c 00 00 00 00 00 00 00 58 1c 00 00     ...D........X...
    69db:	00 00 00 00 00 72 1c 00 00 00 00 00 00 00 86 1c     .....r..........
    69eb:	00 00 00 00 00 00 00 88 1c 00 00 00 00 00 00 00     ................
    69fb:	a2 1c 00 00 00 00 00 00 00 b6 1c 00 00 00 00 00     ................
    6a0b:	00 00 c7 1c 00 00 00 00 00 00 00 e1 1c 00 00 00     ................
    6a1b:	00 00 00 00 fb 1c 00 00 00 00 00 00 00 12 1d 00     ................
    6a2b:	00 00 00 00 00 00 2c 1d 00 00 00 00 00 00 00 2e     ......,.........
    6a3b:	1d 00 00 00 00 00 00 00 45 1d 00 00 00 00 00 00     ........E.......
    6a4b:	00 56 1d 00 00 00 00 00 00 00 67 1d 00 00 00 00     .V........g.....
    6a5b:	00 00 00 69 1d 00 00 00 00 00 00 00 83 1d 00 00     ...i............
    6a6b:	00 00 00 00 00 9d 1d 00 00 00 00 00 00 00 ae 1d     ................
    6a7b:	00 00 00 00 01 00 00 b0 1d 00 00 00 00 01 00 00     ................
    6a8b:	c7 1d 00 00 00 00 01 00 00 db 1d 00 00 00 00 01     ................
    6a9b:	00 00 ec 1d 00 00 00 00 01 00 00 ee 1d 00 00 00     ................
    6aab:	00 01 00 00 05 1e 00 00 00 00 01 00 00 19 1e 00     ................
    6abb:	00 00 00 01 00 00 2a 1e 00 00 00 00 01 00 00 3b     ......*........;
    6acb:	1e 00 00 00 00 01 00 00 52 1e 00 00 00 00 01 00     ........R.......
    6adb:	00 66 1e 00 00 00 00 01 00 00 77 1e 00 00 00 00     .f........w.....
    6aeb:	01 00 00 8b 1e 00 00 00 00 01 00 00 a2 1e 00 00     ................
    6afb:	00 00 01 00 00 b6 1e 00 00 00 00 01 00 00 c7 1e     ................
    6b0b:	00 00 00 00 01 00 00 c9 1e 00 00 00 00 01 00 00     ................
    6b1b:	e0 1e 00 00 00 00 01 00 00 f4 1e 00 00 00 00 01     ................
    6b2b:	00 00 05 1f 00 00 00 00 00 00 00 07 1f 00 00 00     ................
    6b3b:	00 00 00 00 ab 1f 00 00 00 00 02 5d 20 00 00 00     ...........] ...
    6b4b:	00 00 00 02 5d 20 00 00 e0 0c e0 0c 02 3d 2d 00     ....] .......=-.
    6b5b:	00 22 17 22 17 02 5f 44 00 00 2d 16 2d 16 02 8c     .".".._D..-.-...
    6b6b:	5a 00 00 20 0f 20 0f 00 00 00 49 20 00 00 00 00     Z.. . ....I ....

00006b7b <Song0>:
    6b7b:	00 c0 00 00 c1 01 00 c2 02 00 c3 03 00 b0 07 7f     ................
    6b8b:	00 91 51 6e 00 b2 07 7f 00 92 2d 64 00 93 14 64     ..Qn......-d...d
    6b9b:	00 ff 06 01 53 0b 90 40 64 00 91 4c 5a 00 93 16     ....S..@d..LZ...
    6bab:	5a 05 16 5a 06 91 54 6e 00 92 28 64 00 93 15 64     Z..Z..Tn..(d...d
    6bbb:	0b 90 40 64 00 91 4c 5a 00 93 16 50 0b 91 53 6e     ..@d..LZ...P..Sn
    6bcb:	00 92 2d 64 00 93 14 64 0b 90 40 64 00 91 4c 5a     ..-d...d..@d..LZ
    6bdb:	00 93 16 5a 06 16 5a 06 91 51 6e 00 92 30 64 00     ...Z..Z..Qn..0d.
    6beb:	93 15 64 0b 90 40 64 00 91 4c 5a 00 93 16 50 0b     ..d..@d..LZ...P.
    6bfb:	91 50 6e 00 92 2f 64 00 93 14 64 0b 90 40 64 00     .Pn../d...d..@d.
    6c0b:	91 4c 5a 00 93 16 5a 05 16 5a 06 91 53 6e 00 92     .LZ...Z..Z..Sn..
    6c1b:	2c 64 00 93 15 64 0c 90 40 64 00 91 4c 5a 00 93     ,d...d..@d..LZ..
    6c2b:	16 50 0b 91 51 6e 00 92 28 64 00 93 14 64 0b 90     .P..Qn..(d...d..
    6c3b:	40 64 00 91 4c 5a 00 93 16 5a 05 16 5a 06 91 50     @d..LZ...Z..Z..P
    6c4b:	6e 00 92 2c 64 00 93 15 64 0b 90 40 64 00 91 4c     n..,d...d..@d..L
    6c5b:	5a 00 93 16 50 0c 91 4f 6e 00 92 2b 64 00 93 14     Z...P..On..+d...
    6c6b:	64 0b 90 3e 64 00 91 4a 5a 00 93 16 5a 05 16 5a     d..>d..JZ...Z..Z
    6c7b:	06 91 53 6e 00 92 2f 64 00 93 15 64 0b 90 3e 64     ..Sn../d...d..>d
    6c8b:	00 91 4a 5a 00 93 16 50 0b 91 51 6e 00 92 32 64     ..JZ...P..Qn..2d
    6c9b:	00 93 14 64 0c 90 3e 64 00 91 4a 5a 00 93 16 5a     ...d..>d..JZ...Z
    6cab:	05 16 5a 06 91 4f 6e 00 92 2b 64 00 93 15 64 0b     ..Z..On..+d...d.
    6cbb:	90 3e 64 00 91 4a 5a 00 93 16 50 0b 91 4e 6e 00     .>d..JZ...P..Nn.
    6ccb:	92 2a 64 00 93 14 64 0b 90 3e 64 00 91 4a 5a 00     .*d...d..>d..JZ.
    6cdb:	93 16 5a 06 16 5a 06 91 4f 6e 00 92 2b 64 00 93     ..Z..Z..On..+d..
    6ceb:	15 64 0b 90 3e 64 00 91 4a 5a 00 93 16 50 0b 91     .d..>d..JZ...P..
    6cfb:	51 6e 00 92 2d 64 00 93 14 64 0b 90 3e 64 00 91     Qn..-d...d..>d..
    6d0b:	4a 5a 00 93 16 5a 05 16 5a 06 91 4f 6e 00 92 2a     JZ...Z..Z..On..*
    6d1b:	64 00 93 15 64 0b 90 3e 64 00 91 4a 5a 00 93 16     d...d..>d..JZ...
    6d2b:	50 0c 91 51 6e 00 92 2d 64 00 93 14 64 0b 90 40     P..Qn..-d...d..@
    6d3b:	64 00 91 4c 5a 00 93 16 5a 05 16 5a 06 91 54 6e     d..LZ...Z..Z..Tn
    6d4b:	00 92 28 64 00 93 15 64 0b 90 40 64 00 91 4c 5a     ..(d...d..@d..LZ
    6d5b:	00 93 16 50 0b 91 53 6e 00 92 2d 64 00 93 14 64     ...P..Sn..-d...d
    6d6b:	0c 90 40 64 00 91 4c 5a 00 93 16 5a 05 16 5a 06     ..@d..LZ...Z..Z.
    6d7b:	91 51 6e 00 92 30 64 00 93 15 64 0b 90 40 64 00     .Qn..0d...d..@d.
    6d8b:	91 4c 5a 00 93 16 50 0b 91 56 6e 00 92 2f 64 00     .LZ...P..Vn../d.
    6d9b:	93 14 64 0b 90 40 64 00 91 4c 5a 00 93 16 5a 06     ..d..@d..LZ...Z.
    6dab:	16 5a 06 91 53 6e 00 92 2c 64 00 93 15 64 0b 90     .Z..Sn..,d...d..
    6dbb:	40 64 00 91 4c 5a 00 93 16 50 0b 91 50 6e 00 92     @d..LZ...P..Pn..
    6dcb:	28 64 00 93 14 64 0b 90 40 64 00 91 4c 5a 00 93     (d...d..@d..LZ..
    6ddb:	16 5a 05 16 5a 06 91 53 6e 00 92 2c 64 00 93 15     .Z..Z..Sn..,d...
    6deb:	64 0c 90 40 64 00 91 4c 5a 00 93 16 50 0b 91 4f     d..@d..LZ...P..O
    6dfb:	6e 00 92 2b 64 00 93 14 64 0b 90 3e 64 00 91 4a     n..+d...d..>d..J
    6e0b:	5a 00 93 16 5a 05 16 5a 06 91 53 6e 00 92 2f 64     Z...Z..Z..Sn../d
    6e1b:	00 93 15 64 0b 90 3e 64 00 91 4a 5a 00 93 16 50     ...d..>d..JZ...P
    6e2b:	0c 91 51 6e 00 92 32 64 00 93 14 64 0b 90 3e 64     ..Qn..2d...d..>d
    6e3b:	00 91 4a 5a 00 93 16 5a 05 16 5a 06 91 54 6e 00     ..JZ...Z..Z..Tn.
    6e4b:	92 2b 64 00 93 15 64 0b 90 3e 64 00 91 4a 5a 00     .+d...d..>d..JZ.
    6e5b:	93 16 50 0b 91 53 6e 00 92 2a 64 00 93 14 64 0b     ..P..Sn..*d...d.
    6e6b:	90 3e 64 00 91 4a 5a 00 93 16 5a 06 16 5a 06 91     .>d..JZ...Z..Z..
    6e7b:	4f 6e 00 92 2b 64 00 93 15 64 0b 90 3e 64 00 91     On..+d...d..>d..
    6e8b:	4a 5a 00 93 16 50 0b 91 4e 6e 00 92 2d 64 00 93     JZ...P..Nn..-d..
    6e9b:	14 64 0b 90 3e 64 00 91 4a 5a 00 93 16 5a 05 16     .d..>d..JZ...Z..
    6eab:	5a 06 91 4f 6e 00 92 2a 64 00 93 15 64 0c 90 3e     Z..On..*d...d..>
    6ebb:	64 00 93 16 50 0b 90 48 64 00 91 51 6e 00 92 2d     d...P..Hd..Qn..-
    6ecb:	64 00 93 14 64 0b 91 4c 5a 00 93 16 5a 05 16 5a     d...d..LZ...Z..Z
    6edb:	06 91 54 6e 00 92 28 64 00 93 15 64 0b 91 4c 5a     ..Tn..(d...d..LZ
    6eeb:	00 93 16 50 0c 91 53 6e 00 92 2d 64 00 93 14 64     ...P..Sn..-d...d
    6efb:	0b 91 4c 5a 00 93 16 5a 05 16 5a 06 90 48 64 00     ..LZ...Z..Z..Hd.
    6f0b:	91 51 6e 00 92 30 64 00 93 15 64 0b 90 4a 64 00     .Qn..0d...d..Jd.
    6f1b:	91 4c 5a 00 93 16 50 0b 90 47 64 00 91 50 6e 00     .LZ...P..Gd..Pn.
    6f2b:	92 2f 64 00 93 14 64 0c 91 4c 5a 00 93 16 5a 05     ./d...d..LZ...Z.
    6f3b:	16 5a 06 91 53 6e 00 92 2c 64 00 93 15 64 0b 91     .Z..Sn..,d...d..
    6f4b:	4c 5a 00 93 16 50 0b 91 51 6e 00 92 28 64 00 93     LZ...P..Qn..(d..
    6f5b:	14 64 0b 91 4c 5a 00 93 16 5a 06 16 5a 06 91 50     .d..LZ...Z..Z..P
    6f6b:	6e 00 92 2c 64 00 93 15 64 0b 91 4c 5a 00 93 16     n..,d...d..LZ...
    6f7b:	50 0b 90 43 64 00 91 3e 64 00 92 2b 64 00 93 14     P..Cd..>d..+d...
    6f8b:	64 0b 90 3e 64 00 93 16 5a 05 16 5a 06 90 43 64     d..>d...Z..Z..Cd
    6f9b:	00 91 3b 64 00 92 2f 64 00 93 15 64 0c 90 45 64     ..;d../d...d..Ed
    6fab:	00 93 16 50 0b 90 47 64 00 91 37 64 00 92 32 64     ...P..Gd..7d..2d
    6fbb:	00 93 14 64 0b 90 45 64 00 93 16 5a 05 16 5a 06     ...d..Ed...Z..Z.
    6fcb:	90 43 64 00 91 3b 64 00 92 2b 64 00 93 15 64 0b     .Cd..;d..+d...d.
    6fdb:	90 45 64 00 93 16 50 0b 90 42 64 00 91 42 64 00     .Ed...P..Bd..Bd.
    6feb:	92 2a 64 00 93 14 64 0c 90 43 64 00 93 16 5a 05     .*d...d..Cd...Z.
    6ffb:	16 5a 06 90 45 64 00 91 3e 64 00 92 2b 64 00 93     .Z..Ed..>d..+d..
    700b:	15 64 0b 90 42 64 00 93 16 50 0b 90 3e 64 00 91     .d..Bd...P..>d..
    701b:	39 64 00 92 2d 64 00 93 14 64 0b 90 40 64 00 93     9d..-d...d..@d..
    702b:	16 5a 06 16 5a 06 90 42 64 00 91 3e 64 00 92 2a     .Z..Z..Bd..>d..*
    703b:	64 00 93 15 64 0b 90 3e 64 00 93 16 50 0b 90 4c     d...d..>d...P..L
    704b:	64 00 91 51 6e 00 92 2d 64 00 93 14 64 0b 91 4c     d..Qn..-d...d..L
    705b:	5a 00 93 16 5a 05 16 5a 06 90 48 64 00 91 54 6e     Z...Z..Z..Hd..Tn
    706b:	00 92 28 64 00 93 15 64 0c 90 4a 64 00 91 4c 5a     ..(d...d..Jd..LZ
    707b:	00 93 16 50 0b 90 4c 64 00 91 53 6e 00 92 2d 64     ...P..Ld..Sn..-d
    708b:	00 93 14 64 0b 91 4c 5a 00 93 16 5a 05 16 5a 06     ...d..LZ...Z..Z.
    709b:	90 4a 64 00 91 51 6e 00 92 30 64 00 93 15 64 0b     .Jd..Qn..0d...d.
    70ab:	91 4c 5a 00 93 16 50 0c 90 4c 64 00 91 50 6e 00     .LZ...P..Ld..Pn.
    70bb:	92 2f 64 00 93 14 64 0b 91 4c 5a 00 93 16 5a 05     ./d...d..LZ...Z.
    70cb:	16 5a 06 90 4a 64 00 91 53 6e 00 92 2c 64 00 93     .Z..Jd..Sn..,d..
    70db:	15 64 0b 91 4c 5a 00 93 16 50 0b 90 47 64 00 91     .d..LZ...P..Gd..
    70eb:	56 6e 00 92 28 64 00 93 14 64 0c 90 48 64 00 91     Vn..(d...d..Hd..
    70fb:	4c 5a 00 93 16 5a 05 16 5a 06 90 4a 64 00 91 54     LZ...Z..Z..Jd..T
    710b:	6e 00 92 2c 64 00 93 15 64 0b 90 47 64 00 91 53     n..,d...d..Gd..S
    711b:	5a 00 93 16 50 0b 90 47 64 00 91 4f 6e 00 92 2b     Z...P..Gd..On..+
    712b:	64 00 93 14 64 0b 90 48 64 00 91 4a 5a 00 93 16     d...d..Hd..JZ...
    713b:	5a 06 16 5a 05 90 4a 64 00 91 4f 6e 00 92 2f 64     Z..Z..Jd..On../d
    714b:	00 93 15 64 0c 90 43 64 00 91 51 5a 00 93 16 50     ...d..Cd..QZ...P
    715b:	0b 90 48 64 00 91 53 6e 00 92 32 64 00 93 14 64     ..Hd..Sn..2d...d
    716b:	0b 90 4a 64 00 91 51 5a 00 93 16 5a 05 16 5a 06     ..Jd..QZ...Z..Z.
    717b:	90 4c 64 00 91 4f 6e 00 92 2b 64 00 93 15 64 0b     .Ld..On..+d...d.
    718b:	90 48 64 00 91 51 5a 00 93 16 50 0c 90 45 64 00     .Hd..QZ...P..Ed.
    719b:	91 4e 6e 00 92 2a 64 00 93 14 64 0b 90 47 64 00     .Nn..*d...d..Gd.
    71ab:	91 4f 5a 00 93 16 5a 05 16 5a 06 90 48 64 00 91     .OZ...Z..Z..Hd..
    71bb:	51 6e 00 92 2b 64 00 93 15 64 0b 90 45 64 00 91     Qn..+d...d..Ed..
    71cb:	4e 64 00 93 16 50 0b 90 4a 64 00 91 4a 5a 00 92     Nd...P..Jd..JZ..
    71db:	2d 64 00 93 15 6e 0c 90 48 64 00 91 4c 5a 00 93     -d...n..Hd..LZ..
    71eb:	16 5a 05 15 50 06 90 47 64 00 91 4e 6e 00 92 2a     .Z..P..Gd..Nn..*
    71fb:	64 00 93 15 64 0b 90 48 64 00 91 4a 6e 00 93 16     d...d..Hd..Jn...
    720b:	50 0b 14 64 0b 90 4c 64 00 91 40 64 06 90 4c 64     P..d..Ld..@d..Ld
    721b:	06 48 64 00 91 3c 64 00 92 2d 64 00 93 15 64 05     .Hd..<d..-d...d.
    722b:	90 48 64 06 45 64 00 91 39 64 00 92 2d 64 00 93     .Hd.Ed..9d..-d..
    723b:	15 46 05 90 45 64 06 4c 64 00 91 40 64 00 92 28     .F..Ed.Ld..@d..(
    724b:	64 00 93 14 64 06 90 4c 64 05 48 64 00 91 3c 64     d...d..Ld.Hd..<d
    725b:	06 90 48 64 05 45 64 00 91 39 64 00 92 2d 64 00     ..Hd.Ed..9d..-d.
    726b:	93 15 64 06 90 45 64 06 4c 64 00 91 40 64 05 90     ..d..Ed.Ld..@d..
    727b:	4c 64 06 93 14 64 0b 90 4a 64 00 91 3e 64 06 90     Ld...d..Jd..>d..
    728b:	4a 64 05 47 64 00 91 3b 64 00 92 2b 64 00 93 15     Jd.Gd..;d..+d...
    729b:	64 06 90 47 64 05 43 64 00 91 37 64 00 92 2b 64     d..Gd.Cd..7d..+d
    72ab:	00 93 15 46 06 90 43 64 05 4a 64 00 91 3e 64 00     ...F..Cd.Jd..>d.
    72bb:	92 26 64 00 93 14 64 06 90 4a 64 06 47 64 00 91     .&d...d..Jd.Gd..
    72cb:	3b 64 05 90 47 64 06 43 64 00 91 37 64 00 92 2b     ;d..Gd.Cd..7d..+
    72db:	64 00 93 15 64 05 90 43 64 06 4a 64 00 91 3e 64     d...d..Cd.Jd..>d
    72eb:	06 90 4a 64 05 93 14 64 0b 90 48 64 00 91 3c 64     ..Jd...d..Hd..<d
    72fb:	06 90 48 64 06 45 64 00 91 39 64 00 92 29 64 00     ..Hd.Ed..9d..)d.
    730b:	93 15 64 05 90 45 64 06 41 64 00 91 35 64 00 92     ..d..Ed.Ad..5d..
    731b:	29 64 00 93 15 46 05 90 41 64 06 48 64 00 91 3c     )d...F..Ad.Hd..<
    732b:	64 00 92 24 64 00 93 14 64 06 90 48 64 05 45 64     d..$d...d..Hd.Ed
    733b:	00 91 39 64 06 90 45 64 05 41 64 00 91 35 64 00     ..9d..Ed.Ad..5d.
    734b:	92 29 64 00 93 15 64 06 90 41 64 06 48 64 00 91     .)d...d..Ad.Hd..
    735b:	3c 64 05 90 48 64 06 4a 64 00 91 3e 64 00 92 2b     <d..Hd.Jd..>d..+
    736b:	64 00 93 14 64 05 90 4a 64 06 43 64 00 91 37 64     d...d..Jd.Cd..7d
    737b:	00 92 26 50 00 93 14 64 06 90 43 64 05 47 64 00     ..&P...d..Cd.Gd.
    738b:	91 3b 64 00 92 29 64 00 93 15 64 06 90 47 64 05     .;d..)d...d..Gd.
    739b:	4a 64 00 91 3e 64 00 92 2b 64 00 93 15 46 06 90     Jd..>d..+d...F..
    73ab:	4a 64 06 43 64 00 91 37 64 00 92 26 64 05 90 43     Jd.Cd..7d..&d..C
    73bb:	64 06 47 64 00 91 3b 64 00 93 14 64 05 90 47 64     d.Gd..;d...d..Gd
    73cb:	06 4a 64 00 91 3e 64 00 92 2b 64 00 93 15 64 06     .Jd..>d..+d...d.
    73db:	90 4a 64 05 47 64 00 91 3b 64 06 90 47 64 05 3e     .Jd.Gd..;d..Gd.>
    73eb:	64 00 91 32 64 00 92 29 64 00 93 14 64 06 90 3e     d..2d..)d...d..>
    73fb:	64 06 41 64 00 91 35 64 00 93 16 5a 05 16 5a 00     d.Ad..5d...Z..Z.
    740b:	90 41 64 06 45 64 00 91 39 64 00 92 24 64 00 93     .Ad.Ed..9d..$d..
    741b:	15 64 05 90 45 64 06 41 64 00 91 35 64 00 93 16     .d..Ed.Ad..5d...
    742b:	50 06 90 41 64 05 48 64 00 91 3c 64 00 92 21 64     P..Ad.Hd..<d..!d
    743b:	00 93 14 64 06 90 48 64 05 45 64 00 91 39 64 00     ...d..Hd.Ed..9d.
    744b:	93 16 5a 06 16 5a 00 90 45 64 06 41 64 00 91 35     ..Z..Z..Ed.Ad..5
    745b:	64 00 92 29 64 00 93 15 64 05 90 41 64 06 45 64     d..)d...d..Ad.Ed
    746b:	00 91 39 64 00 93 16 50 05 90 45 64 06 40 64 00     ..9d...P..Ed.@d.
    747b:	91 34 64 00 92 28 64 00 93 14 64 05 90 40 64 06     .4d..(d...d..@d.
    748b:	45 64 00 91 39 64 00 93 16 5a 05 16 5a 01 90 45     Ed..9d...Z..Z..E
    749b:	64 05 48 64 00 91 3c 64 00 92 24 64 00 93 15 64     d.Hd..<d..$d...d
    74ab:	06 90 48 64 05 45 64 00 91 39 64 00 93 16 50 06     ..Hd.Ed..9d...P.
    74bb:	90 45 64 06 4c 64 00 91 40 64 00 92 21 64 00 93     .Ed.Ld..@d..!d..
    74cb:	14 64 05 90 4c 64 06 48 64 00 91 3c 64 00 93 16     .d..Ld.Hd..<d...
    74db:	5a 05 16 5a 00 90 48 64 06 45 64 00 91 39 64 00     Z..Z..Hd.Ed..9d.
    74eb:	92 28 64 00 93 15 64 06 90 45 64 05 48 64 00 91     .(d...d..Ed.Hd..
    74fb:	3c 64 00 93 16 50 06 90 48 64 05 42 64 00 91 36     <d...P..Hd.Bd..6
    750b:	64 00 92 27 64 00 93 14 64 06 90 42 64 06 44 64     d..'d...d..Bd.Dd
    751b:	00 91 38 64 00 93 16 5a 05 16 5a 00 90 44 64 06     ..8d...Z..Z..Dd.
    752b:	45 64 00 91 39 64 00 92 24 64 00 93 15 64 00 16     Ed..9d..$d...d..
    753b:	64 05 90 45 64 06 42 64 00 91 36 64 00 93 16 50     d..Ed.Bd..6d...P
    754b:	06 90 42 64 05 45 64 00 91 39 64 00 92 21 64 00     ..Bd.Ed..9d..!d.
    755b:	93 14 64 06 90 45 64 05 42 64 00 91 36 64 00 93     ..d..Ed.Bd..6d..
    756b:	16 5a 06 16 5a 00 90 42 64 06 44 64 00 91 38 64     .Z..Z..Bd.Dd..8d
    757b:	00 92 27 64 00 93 15 64 00 16 64 05 90 44 64 06     ..'d...d..d..Dd.
    758b:	45 64 00 91 39 64 00 93 16 50 05 90 45 64 06 44     Ed..9d...P..Ed.D
    759b:	64 00 91 38 64 00 92 28 64 00 93 14 64 06 90 44     d..8d..(d...d..D
    75ab:	64 05 45 64 00 91 39 64 00 93 16 5a 05 16 5a 01     d.Ed..9d...Z..Z.
    75bb:	90 45 64 05 47 64 00 91 3b 64 00 92 20 64 00 93     .Ed.Gd..;d.. d..
    75cb:	15 64 00 16 64 06 90 47 64 06 44 64 00 91 38 64     .d..d..Gd.Dd..8d
    75db:	00 93 16 50 05 90 44 64 06 47 64 00 91 3b 64 00     ...P..Dd.Gd..;d.
    75eb:	92 21 64 00 93 14 64 05 90 47 64 06 44 64 00 91     .!d...d..Gd.Dd..
    75fb:	38 64 00 93 16 5a 05 16 5a 01 90 44 64 05 45 64     8d...Z..Z..Dd.Ed
    760b:	00 91 39 64 00 92 23 64 00 93 16 64 06 90 45 64     ..9d..#d...d..Ed
    761b:	05 47 64 00 91 3b 64 00 93 15 46 06 90 47 64 06     .Gd..;d...F..Gd.
    762b:	93 14 64 0b 90 4c 64 00 91 40 64 05 90 4c 64 06     ..d..Ld..@d..Ld.
    763b:	48 64 00 91 3c 64 00 92 2d 64 00 93 15 64 06 90     Hd..<d..-d...d..
    764b:	48 64 05 45 64 00 91 39 64 00 92 2d 64 00 93 15     Hd.Ed..9d..-d...
    765b:	46 06 90 45 64 05 4c 64 00 91 40 64 00 92 28 64     F..Ed.Ld..@d..(d
    766b:	00 93 14 64 06 90 4c 64 05 48 64 00 91 3c 64 06     ...d..Ld.Hd..<d.
    767b:	90 48 64 06 45 64 00 91 39 64 00 92 2d 64 00 93     .Hd.Ed..9d..-d..
    768b:	15 64 05 90 45 64 06 4c 64 00 91 40 64 05 90 4c     .d..Ed.Ld..@d..L
    769b:	64 06 93 14 64 0b 90 4a 64 00 91 3e 64 06 90 4a     d...d..Jd..>d..J
    76ab:	64 05 47 64 00 91 3b 64 00 92 2b 64 00 93 15 64     d.Gd..;d..+d...d
    76bb:	06 90 47 64 06 43 64 00 91 37 64 00 92 2b 64 00     ..Gd.Cd..7d..+d.
    76cb:	93 15 46 05 90 43 64 06 4a 64 00 91 3e 64 00 92     ..F..Cd.Jd..>d..
    76db:	26 64 00 93 14 64 05 90 4a 64 06 47 64 00 91 3b     &d...d..Jd.Gd..;
    76eb:	64 06 90 47 64 05 43 64 00 91 37 64 00 92 2b 64     d..Gd.Cd..7d..+d
    76fb:	00 93 15 64 06 90 43 64 05 4a 64 00 91 3e 64 06     ...d..Cd.Jd..>d.
    770b:	90 4a 64 06 93 14 64 0b 90 48 64 00 91 3c 64 05     .Jd...d..Hd..<d.
    771b:	90 48 64 06 45 64 00 91 39 64 00 92 29 64 00 93     .Hd.Ed..9d..)d..
    772b:	15 64 06 90 45 64 05 41 64 00 91 35 64 00 92 29     .d..Ed.Ad..5d..)
    773b:	64 00 93 15 46 06 90 41 64 05 48 64 00 91 3c 64     d...F..Ad.Hd..<d
    774b:	00 92 24 64 00 93 14 64 06 90 48 64 06 45 64 00     ..$d...d..Hd.Ed.
    775b:	91 39 64 05 90 45 64 06 41 64 00 91 35 64 00 92     .9d..Ed.Ad..5d..
    776b:	29 64 00 93 15 64 05 90 41 64 06 48 64 00 91 3c     )d...d..Ad.Hd..<
    777b:	64 06 90 48 64 05 4a 64 00 91 3e 64 00 92 2b 64     d..Hd.Jd..>d..+d
    778b:	00 93 14 64 06 90 4a 64 05 43 64 00 91 37 64 00     ...d..Jd.Cd..7d.
    779b:	92 26 50 00 93 14 64 06 90 43 64 06 47 64 00 91     .&P...d..Cd.Gd..
    77ab:	3b 64 00 92 29 64 00 93 15 64 05 90 47 64 06 4a     ;d..)d...d..Gd.J
    77bb:	64 00 91 3e 64 00 92 2b 64 00 93 15 46 05 90 4a     d..>d..+d...F..J
    77cb:	64 06 43 64 00 91 37 64 00 92 26 64 06 90 43 64     d.Cd..7d..&d..Cd
    77db:	05 47 64 00 91 3b 64 00 93 14 64 06 90 47 64 05     .Gd..;d...d..Gd.
    77eb:	4a 64 00 91 3e 64 00 92 2b 64 00 93 15 64 06 90     Jd..>d..+d...d..
    77fb:	4a 64 06 47 64 00 91 3b 64 05 90 47 64 06 3e 64     Jd.Gd..;d..Gd.>d
    780b:	00 91 32 64 00 92 29 64 00 93 14 64 05 90 3e 64     ..2d..)d...d..>d
    781b:	06 41 64 00 91 35 64 00 93 16 5a 05 16 5a 00 90     .Ad..5d...Z..Z..
    782b:	41 64 06 45 64 00 91 39 64 00 92 24 64 00 93 15     Ad.Ed..9d..$d...
    783b:	64 06 90 45 64 05 41 64 00 91 35 64 00 93 16 50     d..Ed.Ad..5d...P
    784b:	06 90 41 64 05 48 64 00 91 3c 64 00 92 21 64 00     ..Ad.Hd..<d..!d.
    785b:	93 14 64 06 90 48 64 06 45 64 00 91 39 64 00 93     ..d..Hd.Ed..9d..
    786b:	16 5a 05 16 5a 00 90 45 64 06 41 64 00 91 35 64     .Z..Z..Ed.Ad..5d
    787b:	00 92 29 64 00 93 15 64 05 90 41 64 06 45 64 00     ..)d...d..Ad.Ed.
    788b:	91 39 64 00 93 16 50 06 90 45 64 05 40 64 00 91     .9d...P..Ed.@d..
    789b:	34 64 00 92 28 64 00 93 14 64 06 90 40 64 05 45     4d..(d...d..@d.E
    78ab:	64 00 91 39 64 00 93 16 5a 06 16 5a 00 90 45 64     d..9d...Z..Z..Ed
    78bb:	06 48 64 00 91 3c 64 00 92 24 64 00 93 15 64 05     .Hd..<d..$d...d.
    78cb:	90 48 64 06 45 64 00 91 39 64 00 93 16 50 05 90     .Hd.Ed..9d...P..
    78db:	45 64 06 4c 64 00 91 40 64 00 92 21 64 00 93 14     Ed.Ld..@d..!d...
    78eb:	64 06 90 4c 64 05 48 64 00 91 3c 64 00 93 16 5a     d..Ld.Hd..<d...Z
    78fb:	05 16 5a 01 90 48 64 05 45 64 00 91 39 64 00 92     ..Z..Hd.Ed..9d..
    790b:	28 64 00 93 15 64 06 90 45 64 06 48 64 00 91 3c     (d...d..Ed.Hd..<
    791b:	64 00 93 16 50 05 90 48 64 06 42 64 00 91 36 64     d...P..Hd.Bd..6d
    792b:	00 92 27 64 00 93 14 64 05 90 42 64 06 44 64 00     ..'d...d..Bd.Dd.
    793b:	91 38 64 00 93 16 5a 05 16 5a 01 90 44 64 05 45     .8d...Z..Z..Dd.E
    794b:	64 00 91 39 64 00 92 24 64 00 93 15 64 06 90 45     d..9d..$d...d..E
    795b:	64 05 42 64 00 91 36 64 00 93 16 50 06 90 42 64     d.Bd..6d...P..Bd
    796b:	06 45 64 00 91 39 64 00 92 21 64 00 93 14 64 05     .Ed..9d..!d...d.
    797b:	90 45 64 06 42 64 00 91 36 64 00 93 16 5a 05 16     .Ed.Bd..6d...Z..
    798b:	5a 00 90 42 64 06 44 64 00 91 38 64 00 92 27 64     Z..Bd.Dd..8d..'d
    799b:	00 93 15 64 06 90 44 64 05 45 64 00 91 39 64 00     ...d..Dd.Ed..9d.
    79ab:	93 16 50 06 90 45 64 05 44 64 00 91 38 64 00 92     ..P..Ed.Dd..8d..
    79bb:	28 64 00 93 14 64 06 90 44 64 06 45 64 00 91 39     (d...d..Dd.Ed..9
    79cb:	64 00 93 16 5a 05 16 5a 00 90 45 64 06 47 64 00     d...Z..Z..Ed.Gd.
    79db:	91 3b 64 00 92 20 64 00 93 15 64 05 90 47 64 06     .;d.. d...d..Gd.
    79eb:	44 64 00 91 38 64 00 93 16 50 05 90 44 64 06 47     Dd..8d...P..Dd.G
    79fb:	64 00 91 3b 64 00 92 21 64 00 93 14 64 06 90 47     d..;d..!d...d..G
    7a0b:	64 05 44 64 00 91 38 64 00 93 16 5a 06 16 5a 00     d.Dd..8d...Z..Z.
    7a1b:	90 44 64 05 45 64 00 91 39 64 00 92 23 64 00 93     .Dd.Ed..9d..#d..
    7a2b:	15 6e 06 90 45 64 06 47 64 00 91 3b 64 00 93 15     .n..Ed.Gd..;d...
    7a3b:	46 05 90 47 64 06 ff 06 01 45 00 ff 2f 00           F..Gd....E../.

00007a49 <Song1>:
    7a49:	00 c0 04 00 c1 05 00 c2 06 00 c3 07 00 90 37 7f     ..............7.
    7a59:	00 91 30 7f 00 92 24 7f 00 ff 06 01 53 01 93 18     ..0...$.....S...
    7a69:	7f 05 91 30 7f 06 37 7f 00 92 24 7f 06 91 30 7f     ...0..7...$...0.
    7a79:	06 30 7f 00 92 24 7f 00 93 19 7f 06 91 35 7f 06     .0...$.......5..
    7a89:	30 7f 00 92 24 7f 06 91 30 7f 06 33 7f 00 92 24     0...$...0..3...$
    7a99:	7f 00 93 18 7f 06 91 30 7f 06 30 7f 00 92 24 7f     .......0..0...$.
    7aa9:	06 91 35 7f 05 30 7f 00 92 24 7f 00 93 19 7f 07     ..5..0...$......
    7ab9:	91 30 7f 06 33 7f 00 92 24 7f 06 91 33 7f 06 90     .0..3...$...3...
    7ac9:	39 7f 00 91 35 7f 00 92 29 7f 00 93 18 7f 05 91     9...5...).......
    7ad9:	35 7f 07 39 7f 00 92 29 7f 05 91 30 7f 07 30 7f     5..9...)...0..0.
    7ae9:	00 92 29 7f 00 93 19 7f 06 91 35 7f 05 2d 7f 00     ..).......5..-..
    7af9:	92 29 7f 07 91 2d 7f 05 30 7f 00 92 29 7f 00 93     .)...-..0...)...
    7b09:	18 7f 07 91 2d 7f 05 2d 7f 00 92 29 7f 06 91 2d     ....-..-...)...-
    7b19:	7f 07 30 7f 00 92 29 7f 00 93 19 7f 05 91 30 7f     ..0...).......0.
    7b29:	07 35 7f 00 92 29 7f 05 91 35 7f 06 90 38 7f 00     .5...)...5...8..
    7b39:	91 38 7f 00 92 27 7f 00 93 18 7f 06 91 38 7f 06     .8...'.......8..
    7b49:	3c 7f 00 92 27 7f 07 91 33 7f 05 33 7f 00 92 27     <...'...3..3...'
    7b59:	7f 00 93 19 7f 06 91 38 7f 06 30 7f 00 92 27 7f     .......8..0...'.
    7b69:	06 91 30 7f 06 33 7f 00 92 27 7f 00 93 18 7f 06     ..0..3...'......
    7b79:	91 2c 7f 06 2c 7f 00 92 27 7f 06 91 33 7f 06 30     .,..,...'...3..0
    7b89:	7f 00 92 27 7f 00 93 19 7f 06 91 30 7f 06 38 7f     ...'.......0..8.
    7b99:	00 92 27 7f 05 91 38 7f 07 90 3a 7f 00 91 3a 7f     ..'...8...:...:.
    7ba9:	00 92 26 7f 00 93 18 7f 06 91 3a 7f 06 3e 7f 00     ..&.......:..>..
    7bb9:	92 26 7f 06 91 35 7f 05 35 7f 00 92 26 7f 00 93     .&...5..5...&...
    7bc9:	19 7f 07 91 3a 7f 05 32 7f 00 92 26 7f 07 91 32     ....:..2...&...2
    7bd9:	7f 06 35 7f 00 92 26 7f 00 93 1a 7f 02 1a 7f 03     ..5...&.........
    7be9:	91 2e 7f 00 93 1a 7f 07 91 2e 7f 00 92 26 7f 05     .............&..
    7bf9:	91 35 7f 00 93 1b 7f 03 1b 7f 04 91 32 7f 00 92     .5..........2...
    7c09:	26 7f 00 93 1b 7f 05 91 32 7f 06 3a 7f 00 92 26     &.......2..:...&
    7c19:	7f 00 93 19 7f 07 91 3a 7f 05 90 37 7f 00 91 30     .......:...7...0
    7c29:	7f 00 92 24 7f 00 93 18 7f 07 91 30 7f 05 37 7f     ...$.......0..7.
    7c39:	00 92 24 7f 06 91 30 7f 06 30 7f 00 92 24 7f 00     ..$...0..0...$..
    7c49:	93 19 7f 06 91 35 7f 07 30 7f 00 92 24 7f 05 91     .....5..0...$...
    7c59:	30 7f 06 33 7f 00 92 24 7f 00 93 18 7f 06 91 30     0..3...$.......0
    7c69:	7f 06 30 7f 00 92 24 7f 06 91 35 7f 06 30 7f 00     ..0...$...5..0..
    7c79:	92 24 7f 00 93 19 7f 06 91 30 7f 06 33 7f 00 92     .$.......0..3...
    7c89:	24 7f 06 91 33 7f 06 90 39 7f 00 91 35 7f 00 92     $...3...9...5...
    7c99:	29 7f 00 93 18 7f 06 91 35 7f 06 39 7f 00 92 29     ).......5..9...)
    7ca9:	7f 06 91 30 7f 06 30 7f 00 92 29 7f 00 93 19 7f     ...0..0...).....
    7cb9:	06 91 35 7f 06 2d 7f 00 92 29 7f 05 91 2d 7f 07     ..5..-...)...-..
    7cc9:	30 7f 00 92 29 7f 00 93 18 7f 06 91 2d 7f 06 2d     0...).......-..-
    7cd9:	7f 00 92 29 7f 06 91 2d 7f 05 30 7f 00 92 29 7f     ...)...-..0...).
    7ce9:	00 93 19 7f 07 91 30 7f 05 35 7f 00 92 29 7f 07     ......0..5...)..
    7cf9:	91 35 7f 06 90 38 7f 00 91 38 7f 00 92 27 7f 00     .5...8...8...'..
    7d09:	93 18 7f 05 91 38 7f 07 3c 7f 00 92 27 7f 05 91     .....8..<...'...
    7d19:	33 7f 07 33 7f 00 92 27 7f 00 93 19 7f 05 91 38     3..3...'.......8
    7d29:	7f 06 30 7f 00 92 27 7f 07 91 30 7f 05 33 7f 00     ..0...'...0..3..
    7d39:	92 27 7f 00 93 18 7f 07 91 2c 7f 05 2c 7f 00 92     .'.......,..,...
    7d49:	27 7f 06 91 33 7f 06 30 7f 00 92 27 7f 00 93 19     '...3..0...'....
    7d59:	7f 06 91 30 7f 07 38 7f 00 92 27 7f 05 91 38 7f     ...0..8...'...8.
    7d69:	06 90 3a 7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f     ..:...:...&.....
    7d79:	06 91 3a 7f 06 3e 7f 00 92 26 7f 06 91 35 7f 06     ..:..>...&...5..
    7d89:	35 7f 00 92 26 7f 00 93 19 7f 06 91 3a 7f 06 32     5...&.......:..2
    7d99:	7f 00 92 26 7f 06 91 32 7f 06 35 7f 00 92 26 7f     ...&...2..5...&.
    7da9:	00 93 19 7f 03 19 7f 03 91 2e 7f 05 2e 7f 00 92     ................
    7db9:	26 7f 00 93 18 7f 07 91 35 7f 00 93 18 7f 06 91     &.......5.......
    7dc9:	32 7f 00 92 26 7f 00 93 19 7f 06 91 32 7f 06 3a     2...&.......2..:
    7dd9:	7f 00 92 26 7f 00 93 19 7f 05 91 3a 7f 00 93 19     ...&.......:....
    7de9:	7f 07 90 30 7f 00 91 30 7f 00 92 24 7f 00 93 18     ...0...0...$....
    7df9:	7f 05 91 30 7f 07 37 7f 00 92 24 7f 06 91 30 7f     ...0..7...$...0.
    7e09:	05 30 7f 00 92 24 7f 00 93 19 7f 07 91 35 7f 05     .0...$.......5..
    7e19:	30 7f 00 92 24 7f 07 91 30 7f 05 33 7f 00 92 24     0...$...0..3...$
    7e29:	7f 00 93 18 7f 06 91 30 7f 07 30 7f 00 92 24 7f     .......0..0...$.
    7e39:	05 91 35 7f 07 30 7f 00 92 24 7f 00 93 19 7f 05     ..5..0...$......
    7e49:	91 30 7f 06 33 7f 00 92 24 7f 06 91 33 7f 06 35     .0..3...$...3..5
    7e59:	7f 00 92 29 7f 00 93 18 7f 07 91 35 7f 05 39 7f     ...).......5..9.
    7e69:	00 92 29 7f 06 91 30 7f 06 30 7f 00 92 29 7f 00     ..)...0..0...)..
    7e79:	93 19 7f 06 91 35 7f 06 2d 7f 00 92 29 7f 06 91     .....5..-...)...
    7e89:	2d 7f 06 30 7f 00 92 29 7f 00 93 18 7f 06 91 2d     -..0...).......-
    7e99:	7f 06 90 32 7f 00 91 2d 7f 00 92 29 7f 06 91 2d     ...2...-...)...-
    7ea9:	7f 06 30 7f 00 92 29 7f 00 93 19 7f 06 91 30 7f     ..0...).......0.
    7eb9:	06 90 33 7f 00 91 35 7f 00 92 29 7f 06 91 35 7f     ..3...5...)...5.
    7ec9:	06 90 30 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f     ..0...8...'.....
    7ed9:	06 91 38 7f 05 3c 7f 00 92 27 7f 07 91 33 7f 06     ..8..<...'...3..
    7ee9:	33 7f 00 92 27 7f 00 93 19 7f 06 91 38 7f 06 90     3...'.......8...
    7ef9:	37 7f 00 91 30 7f 00 92 27 7f 05 91 30 7f 07 33     7...0...'...0..3
    7f09:	7f 00 92 27 7f 00 93 18 7f 05 91 2c 7f 07 2c 7f     ...'.......,..,.
    7f19:	00 92 27 7f 06 91 33 7f 05 30 7f 00 92 27 7f 00     ..'...3..0...'..
    7f29:	93 19 7f 07 91 30 7f 05 38 7f 00 92 27 7f 07 91     .....0..8...'...
    7f39:	38 7f 05 90 2e 7f 00 91 3a 7f 00 92 26 7f 00 93     8.......:...&...
    7f49:	18 7f 06 91 3a 7f 07 3e 7f 00 92 26 7f 00 93 1a     ....:..>...&....
    7f59:	7f 05 91 35 7f 07 35 7f 00 92 26 7f 00 93 19 7f     ...5..5...&.....
    7f69:	05 91 3a 7f 00 93 1b 7f 06 90 35 7f 00 91 32 7f     ..:.......5...2.
    7f79:	00 92 26 7f 06 91 32 7f 06 35 7f 00 92 26 7f 00     ..&...2..5...&..
    7f89:	93 19 7f 07 91 2e 7f 00 93 18 7f 05 91 2e 7f 00     ................
    7f99:	92 26 7f 00 93 18 7f 06 91 35 7f 00 93 19 7f 06     .&.......5......
    7fa9:	91 32 7f 00 92 26 7f 00 93 18 7f 06 91 32 7f 00     .2...&.......2..
    7fb9:	93 18 7f 06 91 3a 7f 00 92 26 7f 00 93 19 7f 06     .....:...&......
    7fc9:	91 3a 7f 00 93 18 7f 06 90 37 7f 00 91 30 7f 00     .:.......7...0..
    7fd9:	92 24 7f 00 93 18 7f 06 91 30 7f 06 37 7f 00 92     .$.......0..7...
    7fe9:	24 7f 06 91 30 7f 06 30 7f 00 92 24 7f 00 93 19     $...0..0...$....
    7ff9:	7f 05 91 35 7f 07 30 7f 00 92 24 7f 06 91 30 7f     ...5..0...$...0.
    8009:	06 33 7f 00 92 24 7f 00 93 18 7f 06 91 30 7f 05     .3...$.......0..
    8019:	30 7f 00 92 24 7f 07 91 35 7f 05 90 3a 7f 00 91     0...$...5...:...
    8029:	30 7f 00 92 24 7f 00 93 19 7f 07 91 30 7f 06 33     0...$.......0..3
    8039:	7f 00 92 24 7f 05 91 33 7f 07 90 39 7f 00 91 35     ...$...3...9...5
    8049:	7f 00 92 29 7f 00 93 18 7f 05 91 35 7f 07 39 7f     ...).......5..9.
    8059:	00 92 29 7f 05 91 30 7f 06 30 7f 00 92 29 7f 00     ..)...0..0...)..
    8069:	93 19 7f 07 91 35 7f 05 2d 7f 00 92 29 7f 07 91     .....5..-...)...
    8079:	2d 7f 05 30 7f 00 92 29 7f 00 93 18 7f 06 91 2d     -..0...).......-
    8089:	7f 06 90 35 7f 00 91 2d 7f 00 92 29 7f 06 91 2d     ...5...-...)...-
    8099:	7f 07 30 7f 00 92 29 7f 00 93 19 7f 05 91 30 7f     ..0...).......0.
    80a9:	06 90 37 7f 00 91 35 7f 00 92 29 7f 06 91 35 7f     ..7...5...)...5.
    80b9:	06 90 38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f     ..8...8...'.....
    80c9:	06 91 38 7f 06 3c 7f 00 92 27 7f 06 91 33 7f 06     ..8..<...'...3..
    80d9:	33 7f 00 92 27 7f 00 93 19 7f 06 91 38 7f 06 30     3...'.......8..0
    80e9:	7f 00 92 27 7f 06 91 30 7f 06 33 7f 00 92 27 7f     ...'...0..3...'.
    80f9:	00 93 18 7f 06 91 2c 7f 06 2c 7f 00 92 27 7f 06     ......,..,...'..
    8109:	91 33 7f 06 30 7f 00 92 27 7f 00 93 19 7f 05 91     .3..0...'.......
    8119:	30 7f 07 38 7f 00 92 27 7f 06 91 38 7f 06 90 3a     0..8...'...8...:
    8129:	7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 06 91 3a     ...:...&.......:
    8139:	7f 05 3e 7f 00 92 26 7f 00 93 1a 7f 07 91 35 7f     ..>...&.......5.
    8149:	05 35 7f 00 92 26 7f 00 93 19 7f 07 91 3a 7f 00     .5...&.......:..
    8159:	93 1b 7f 06 91 32 7f 00 92 26 7f 05 91 32 7f 07     .....2...&...2..
    8169:	35 7f 00 92 26 7f 00 93 19 7f 05 91 2e 7f 00 93     5...&...........
    8179:	18 7f 07 91 2e 7f 00 92 26 7f 00 93 18 7f 05 91     ........&.......
    8189:	35 7f 00 93 19 7f 06 91 32 7f 00 92 26 7f 00 93     5.......2...&...
    8199:	18 7f 07 91 32 7f 00 93 18 7f 05 91 3a 7f 00 92     ....2.......:...
    81a9:	26 7f 00 93 19 7f 07 91 3a 7f 00 93 18 7f 05 90     &.......:.......
    81b9:	37 7f 00 91 30 7f 00 92 24 7f 00 93 18 7f 06 91     7...0...$.......
    81c9:	30 7f 06 37 7f 00 92 24 7f 06 91 30 7f 07 30 7f     0..7...$...0..0.
    81d9:	00 92 24 7f 00 93 19 7f 05 91 35 7f 06 30 7f 00     ..$.......5..0..
    81e9:	92 24 7f 06 91 30 7f 06 33 7f 00 92 24 7f 00 93     .$...0..3...$...
    81f9:	18 7f 06 91 30 7f 06 30 7f 00 92 24 7f 06 91 35     ....0..0...$...5
    8209:	7f 06 30 7f 00 92 24 7f 00 93 19 7f 06 91 30 7f     ..0...$.......0.
    8219:	06 33 7f 00 92 24 7f 06 91 33 7f 05 90 39 7f 00     .3...$...3...9..
    8229:	91 35 7f 00 92 29 7f 00 93 18 7f 07 91 35 7f 06     .5...).......5..
    8239:	39 7f 00 92 29 7f 06 91 30 7f 06 30 7f 00 92 29     9...)...0..0...)
    8249:	7f 00 93 19 7f 05 91 35 7f 07 2d 7f 00 92 29 7f     .......5..-...).
    8259:	05 91 2d 7f 07 30 7f 00 92 29 7f 00 93 18 7f 06     ..-..0...)......
    8269:	91 2d 7f 05 2d 7f 00 92 29 7f 07 91 2d 7f 05 30     .-..-...)...-..0
    8279:	7f 00 92 29 7f 00 93 19 7f 07 91 30 7f 05 35 7f     ...).......0..5.
    8289:	00 92 29 7f 06 91 35 7f 07 90 38 7f 00 91 38 7f     ..)...5...8...8.
    8299:	00 92 27 7f 00 93 18 7f 05 91 38 7f 07 3c 7f 00     ..'.......8..<..
    82a9:	92 27 7f 05 91 33 7f 06 33 7f 00 92 27 7f 00 93     .'...3..3...'...
    82b9:	19 7f 06 91 38 7f 06 30 7f 00 92 27 7f 07 91 30     ....8..0...'...0
    82c9:	7f 05 33 7f 00 92 27 7f 00 93 18 7f 06 91 2c 7f     ..3...'.......,.
    82d9:	06 2c 7f 00 92 27 7f 06 91 33 7f 06 30 7f 00 92     .,...'...3..0...
    82e9:	27 7f 00 93 19 7f 06 91 30 7f 06 38 7f 00 92 27     '.......0..8...'
    82f9:	7f 06 91 38 7f 06 90 3a 7f 00 91 3a 7f 00 92 26     ...8...:...:...&
    8309:	7f 00 93 18 7f 06 91 3a 7f 06 3e 7f 00 92 26 7f     .......:..>...&.
    8319:	06 91 35 7f 06 35 7f 00 92 26 7f 00 93 19 7f 06     ..5..5...&......
    8329:	91 3a 7f 06 32 7f 00 92 26 7f 06 91 32 7f 05 35     .:..2...&...2..5
    8339:	7f 00 92 26 7f 00 93 1a 7f 04 1a 7f 03 91 2e 7f     ...&............
    8349:	00 93 1a 7f 06 91 2e 7f 00 92 26 7f 06 91 35 7f     ..........&...5.
    8359:	00 93 1b 7f 03 1b 7f 03 91 32 7f 00 92 26 7f 00     .........2...&..
    8369:	93 1b 7f 05 91 32 7f 07 3a 7f 00 92 26 7f 00 93     .....2..:...&...
    8379:	19 7f 05 91 3a 7f 07 90 37 7f 00 91 30 7f 00 92     ....:...7...0...
    8389:	24 7f 00 93 18 7f 06 91 30 7f 05 37 7f 00 92 24     $.......0..7...$
    8399:	7f 07 91 30 7f 05 30 7f 00 92 24 7f 00 93 19 7f     ...0..0...$.....
    83a9:	07 91 35 7f 05 30 7f 00 92 24 7f 06 91 30 7f 07     ..5..0...$...0..
    83b9:	33 7f 00 92 24 7f 00 93 18 7f 05 91 30 7f 07 30     3...$.......0..0
    83c9:	7f 00 92 24 7f 05 91 35 7f 06 30 7f 00 92 24 7f     ...$...5..0...$.
    83d9:	00 93 19 7f 06 91 30 7f 06 33 7f 00 92 24 7f 07     ......0..3...$..
    83e9:	91 33 7f 05 90 39 7f 00 91 35 7f 00 92 29 7f 00     .3...9...5...)..
    83f9:	93 18 7f 06 91 35 7f 06 39 7f 00 92 29 7f 06 91     .....5..9...)...
    8409:	30 7f 06 30 7f 00 92 29 7f 00 93 19 7f 06 91 35     0..0...).......5
    8419:	7f 06 2d 7f 00 92 29 7f 06 91 2d 7f 06 30 7f 00     ..-...)...-..0..
    8429:	92 29 7f 00 93 18 7f 06 91 2d 7f 06 2d 7f 00 92     .).......-..-...
    8439:	29 7f 05 91 2d 7f 07 30 7f 00 92 29 7f 00 93 19     )...-..0...)....
    8449:	7f 06 91 30 7f 06 35 7f 00 92 29 7f 06 91 35 7f     ...0..5...)...5.
    8459:	05 90 38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f     ..8...8...'.....
    8469:	07 91 38 7f 05 3c 7f 00 92 27 7f 07 91 33 7f 06     ..8..<...'...3..
    8479:	33 7f 00 92 27 7f 00 93 19 7f 05 91 38 7f 07 30     3...'.......8..0
    8489:	7f 00 92 27 7f 05 91 30 7f 07 33 7f 00 92 27 7f     ...'...0..3...'.
    8499:	00 93 18 7f 05 91 2c 7f 06 2c 7f 00 92 27 7f 07     ......,..,...'..
    84a9:	91 33 7f 05 30 7f 00 92 27 7f 00 93 19 7f 07 91     .3..0...'.......
    84b9:	30 7f 05 38 7f 00 92 27 7f 06 91 38 7f 06 90 3a     0..8...'...8...:
    84c9:	7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 06 91 3a     ...:...&.......:
    84d9:	7f 07 3e 7f 00 92 26 7f 05 91 35 7f 06 35 7f 00     ..>...&...5..5..
    84e9:	92 26 7f 00 93 19 7f 06 91 3a 7f 06 32 7f 00 92     .&.......:..2...
    84f9:	26 7f 06 91 32 7f 06 35 7f 00 92 26 7f 00 93 19     &...2..5...&....
    8509:	7f 03 19 7f 03 91 2e 7f 06 2e 7f 00 92 26 7f 00     .............&..
    8519:	93 18 7f 06 91 35 7f 00 93 18 7f 06 91 32 7f 00     .....5.......2..
    8529:	92 26 7f 00 93 19 7f 06 91 32 7f 06 3a 7f 00 92     .&.......2..:...
    8539:	26 7f 00 93 19 7f 06 91 3a 7f 00 93 19 7f 06 90     &.......:.......
    8549:	43 7f 00 91 30 7f 00 92 24 7f 00 93 18 7f 06 90     C...0...$.......
    8559:	3f 7f 00 91 30 7f 06 90 3c 7f 00 91 37 7f 00 92     ?...0...<...7...
    8569:	24 7f 05 90 43 7f 00 91 30 7f 07 90 3f 7f 00 91     $...C...0...?...
    8579:	30 7f 00 92 24 7f 00 93 19 7f 06 90 3c 7f 00 91     0...$.......<...
    8589:	35 7f 06 90 43 7f 00 91 30 7f 00 92 24 7f 06 90     5...C...0...$...
    8599:	3f 7f 00 91 30 7f 05 90 3c 7f 00 91 33 7f 00 92     ?...0...<...3...
    85a9:	24 7f 00 93 18 7f 07 90 43 7f 00 91 30 7f 05 90     $.......C...0...
    85b9:	3f 7f 00 91 30 7f 00 92 24 7f 07 90 3c 7f 00 91     ?...0...$...<...
    85c9:	35 7f 06 90 43 7f 00 91 30 7f 00 92 24 7f 00 93     5...C...0...$...
    85d9:	19 7f 05 90 3f 7f 00 91 30 7f 07 90 3c 7f 00 91     ....?...0...<...
    85e9:	33 7f 00 92 24 7f 05 90 43 7f 00 91 33 7f 07 90     3...$...C...3...
    85f9:	41 7f 00 91 35 7f 00 92 29 7f 00 93 18 7f 05 90     A...5...).......
    8609:	3e 7f 00 91 35 7f 06 90 3a 7f 00 91 39 7f 00 92     >...5...:...9...
    8619:	29 7f 07 90 41 7f 00 91 30 7f 05 90 3e 7f 00 91     )...A...0...>...
    8629:	30 7f 00 92 29 7f 00 93 19 7f 07 90 3a 7f 00 91     0...).......:...
    8639:	35 7f 05 90 41 7f 00 91 2d 7f 00 92 29 7f 06 90     5...A...-...)...
    8649:	3e 7f 00 91 2d 7f 06 90 3a 7f 00 91 30 7f 00 92     >...-...:...0...
    8659:	29 7f 00 93 18 7f 06 90 41 7f 00 91 2d 7f 07 90     ).......A...-...
    8669:	3e 7f 00 91 2d 7f 00 92 29 7f 05 90 3a 7f 00 91     >...-...)...:...
    8679:	2d 7f 06 90 41 7f 00 91 30 7f 00 92 29 7f 00 93     -...A...0...)...
    8689:	19 7f 06 90 3e 7f 00 91 30 7f 06 90 3a 7f 00 91     ....>...0...:...
    8699:	35 7f 00 92 29 7f 06 90 41 7f 00 91 35 7f 06 90     5...)...A...5...
    86a9:	38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f 06 90     8...8...'.......
    86b9:	3c 7f 00 91 38 7f 06 90 3f 7f 00 91 3c 7f 00 92     <...8...?...<...
    86c9:	27 7f 06 90 43 7f 00 91 33 7f 06 90 3f 7f 00 91     '...C...3...?...
    86d9:	33 7f 00 92 27 7f 00 93 19 7f 06 90 3c 7f 00 91     3...'.......<...
    86e9:	38 7f 05 90 41 7f 00 91 30 7f 00 92 27 7f 07 90     8...A...0...'...
    86f9:	3e 7f 00 91 30 7f 06 90 3a 7f 00 91 33 7f 00 92     >...0...:...3...
    8709:	27 7f 00 93 18 7f 06 90 35 7f 00 91 2c 7f 06 90     '.......5...,...
    8719:	3a 7f 00 91 2c 7f 00 92 27 7f 05 90 41 7f 00 91     :...,...'...A...
    8729:	33 7f 07 90 3f 7f 00 91 30 7f 00 92 27 7f 00 93     3...?...0...'...
    8739:	19 7f 05 90 3e 7f 00 91 30 7f 07 90 3f 7f 00 91     ....>...0...?...
    8749:	38 7f 00 92 27 7f 06 90 41 7f 00 91 38 7f 05 90     8...'...A...8...
    8759:	3e 7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 07 90     >...:...&.......
    8769:	3a 7f 00 91 3a 7f 05 90 35 7f 00 91 3e 7f 00 92     :...:...5...>...
    8779:	26 7f 00 93 1a 7f 07 90 32 7f 00 91 35 7f 05 90     &.......2...5...
    8789:	2e 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 06 90     ....5...&.......
    8799:	29 7f 00 91 3a 7f 00 93 1b 7f 07 90 2e 7f 00 91     )...:...........
    87a9:	32 7f 00 92 26 7f 05 90 32 7f 00 91 32 7f 07 90     2...&...2...2...
    87b9:	27 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 05 90     '...5...&.......
    87c9:	24 7f 00 91 2e 7f 00 93 18 7f 06 90 27 7f 00 91     $...........'...
    87d9:	2e 7f 00 92 26 7f 00 93 18 7f 06 90 29 7f 00 91     ....&.......)...
    87e9:	35 7f 00 93 19 7f 06 90 2e 7f 00 91 32 7f 00 92     5...........2...
    87f9:	26 7f 00 93 18 7f 07 90 32 7f 00 91 32 7f 00 93     &.......2...2...
    8809:	18 7f 05 90 35 7f 00 91 3a 7f 00 92 26 7f 00 93     ....5...:...&...
    8819:	19 7f 06 90 3a 7f 00 91 3a 7f 00 93 18 7f 06 90     ....:...:.......
    8829:	37 7f 00 91 30 7f 00 92 24 7f 00 93 18 7f 06 90     7...0...$.......
    8839:	3c 7f 00 91 30 7f 06 90 3f 7f 00 91 37 7f 00 92     <...0...?...7...
    8849:	24 7f 06 90 43 7f 00 91 30 7f 06 90 3f 7f 00 91     $...C...0...?...
    8859:	30 7f 00 92 24 7f 00 93 19 7f 06 90 3c 7f 00 91     0...$.......<...
    8869:	35 7f 06 90 41 7f 00 91 30 7f 00 92 24 7f 06 90     5...A...0...$...
    8879:	3e 7f 00 91 30 7f 06 90 3a 7f 00 91 33 7f 00 92     >...0...:...3...
    8889:	24 7f 00 93 18 7f 06 90 41 7f 00 91 30 7f 06 90     $.......A...0...
    8899:	3e 7f 00 91 30 7f 00 92 24 7f 06 90 3a 7f 00 91     >...0...$...:...
    88a9:	35 7f 06 90 3f 7f 00 91 30 7f 00 92 24 7f 00 93     5...?...0...$...
    88b9:	19 7f 06 90 3e 7f 00 91 30 7f 05 90 3f 7f 00 91     ....>...0...?...
    88c9:	33 7f 00 92 24 7f 07 90 41 7f 00 91 33 7f 06 90     3...$...A...3...
    88d9:	3c 7f 00 91 35 7f 00 92 29 7f 00 93 18 7f 06 90     <...5...).......
    88e9:	41 7f 00 91 35 7f 06 90 45 7f 00 91 39 7f 00 92     A...5...E...9...
    88f9:	29 7f 05 90 30 7f 00 91 30 7f 07 90 35 7f 00 91     )...0...0...5...
    8909:	30 7f 00 92 29 7f 00 93 19 7f 05 90 39 7f 00 91     0...).......9...
    8919:	35 7f 07 90 3c 7f 00 91 2d 7f 00 92 29 7f 06 90     5...<...-...)...
    8929:	41 7f 00 91 2d 7f 05 90 3c 7f 00 91 30 7f 00 92     A...-...<...0...
    8939:	29 7f 00 93 18 7f 07 90 35 7f 00 91 2d 7f 05 90     ).......5...-...
    8949:	39 7f 00 91 2d 7f 00 92 29 7f 07 90 3c 7f 00 91     9...-...)...<...
    8959:	2d 7f 05 90 41 7f 00 91 30 7f 00 92 29 7f 00 93     -...A...0...)...
    8969:	19 7f 06 90 45 7f 00 91 30 7f 07 90 3c 7f 00 91     ....E...0...<...
    8979:	35 7f 00 92 29 7f 05 90 45 7f 00 91 35 7f 07 90     5...)...E...5...
    8989:	38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f 05 90     8...8...'.......
    8999:	3c 7f 00 91 38 7f 06 90 3f 7f 00 91 3c 7f 00 92     <...8...?...<...
    89a9:	27 7f 06 90 43 7f 00 91 33 7f 06 90 3f 7f 00 91     '...C...3...?...
    89b9:	33 7f 00 92 27 7f 00 93 19 7f 07 90 3c 7f 00 91     3...'.......<...
    89c9:	38 7f 05 90 41 7f 00 91 30 7f 00 92 27 7f 06 90     8...A...0...'...
    89d9:	3e 7f 00 91 30 7f 06 90 3a 7f 00 91 33 7f 00 92     >...0...:...3...
    89e9:	27 7f 00 93 18 7f 06 90 35 7f 00 91 2c 7f 06 90     '.......5...,...
    89f9:	3a 7f 00 91 2c 7f 00 92 27 7f 06 90 41 7f 00 91     :...,...'...A...
    8a09:	33 7f 06 90 3f 7f 00 91 30 7f 00 92 27 7f 00 93     3...?...0...'...
    8a19:	19 7f 06 90 3e 7f 00 91 30 7f 06 90 3f 7f 00 91     ....>...0...?...
    8a29:	38 7f 00 92 27 7f 06 90 41 7f 00 91 38 7f 06 90     8...'...A...8...
    8a39:	3e 7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 05 90     >...:...&.......
    8a49:	3a 7f 00 91 3a 7f 07 90 35 7f 00 91 3e 7f 00 92     :...:...5...>...
    8a59:	26 7f 00 93 1a 7f 06 90 32 7f 00 91 35 7f 06 90     &.......2...5...
    8a69:	2e 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 06 90     ....5...&.......
    8a79:	29 7f 00 91 3a 7f 00 93 1b 7f 05 90 2e 7f 00 91     )...:...........
    8a89:	32 7f 00 92 26 7f 07 90 32 7f 00 91 32 7f 05 90     2...&...2...2...
    8a99:	27 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 07 90     '...5...&.......
    8aa9:	24 7f 00 91 2e 7f 00 93 18 7f 06 90 27 7f 00 91     $...........'...
    8ab9:	2e 7f 00 92 26 7f 00 93 18 7f 05 90 29 7f 00 91     ....&.......)...
    8ac9:	35 7f 00 93 19 7f 07 90 2e 7f 00 91 32 7f 00 92     5...........2...
    8ad9:	26 7f 00 93 18 7f 05 90 32 7f 00 91 32 7f 00 93     &.......2...2...
    8ae9:	18 7f 07 90 35 7f 00 91 3a 7f 00 92 26 7f 00 93     ....5...:...&...
    8af9:	19 7f 05 90 3a 7f 00 91 3a 7f 00 93 18 7f 06 ff     ....:...:.......
    8b09:	06 01 45 00 ff 2f 00                                ..E../.

00008b10 <DemoData>:
    8b10:	01 02                                               ..

00008b12 <CheatString>:
    8b12:	10 00 10 00 20 00 20 00 40 00 80 00 40 00 80 00     .... . .@...@...
    8b22:	01 00 00 01                                         ....

00008b26 <introcharmap>:
    8b26:	21 41 42 44 45 46 47 48 49 4b 4c 4e 4f 50 52 53     !ABDEFGHIKLNOPRS
    8b36:	54 55 56 57 58 59 5a 00                             TUVWXYZ.

00008b3e <menucharmap>:
    8b3e:	7b 7d 5b 5d 2c 2e 5e 76 00                          {}[],.^v.

00008b47 <titlecharmap>:
    8b47:	3e 50 52 45 53 54 41 4c 43 4f 55 4d 4e 49 47 56     >PRESTALCOUMNIGV
	...

00008b58 <readycharmap>:
    8b58:	52 45 41 44 59 21 00                                READY!.

00008b5f <pausecharmap>:
    8b5f:	50 41 55 53 45 52 4d 51 49 54 3e 00                 PAUSERMQIT>.

00008b6b <gameovercharmap>:
    8b6b:	57 49 4e 45 52 21 54 59 41 47 43 50 55 53 4f 4c     WINER!TYAGCPUSOL
    8b7b:	56 42 4b 00                                         VBK.

00008b7f <CpuDropTime>:
    8b7f:	ff 04 03 02 01 01 01 00 00 00                       ..........

00008b89 <CpuMoveTime>:
    8b89:	ff 14 12 0f 0a 04 03 02 01 00                       ..........

00008b93 <CpuBaseWeights>:
    8b93:	20 20 20 1f 1f 1f 1e 1e 1e 1f 1f 1f 20 20 20 21        .........   !
    8ba3:	21 21                                               !!

00008ba5 <__c.4224>:
    8ba5:	59 4f 55 20 47 55 59 53 20 41 52 45 20 47 52 45     YOU GUYS ARE GRE
    8bb5:	41 54 21 00                                         AT!.

00008bb9 <__c.4222>:
    8bb9:	41 4c 4c 20 54 48 45 53 45 20 59 45 41 52 53 21     ALL THESE YEARS!
	...

00008bca <__c.4220>:
    8bca:	54 48 45 20 48 4f 42 42 59 20 41 4c 49 56 45 20     THE HOBBY ALIVE 
    8bda:	41 4e 44 20 46 55 4e 20 46 4f 52 00                 AND FUN FOR.

00008be6 <__c.4218>:
    8be6:	54 48 41 4e 4b 53 20 45 56 45 52 59 4f 4e 45 20     THANKS EVERYONE 
    8bf6:	46 4f 52 20 4b 45 45 50 49 4e 47 00                 FOR KEEPING.

00008c02 <__c.4208>:
    8c02:	4c 45 45 20 57 45 42 45 52 20 32 30 31 33 00        LEE WEBER 2013.

00008c11 <__c.4206>:
    8c11:	55 20 5a 20 45 20 42 20 4f 20 58 00                 U Z E B O X.

00008c1d <__c.3196>:
    8c1d:	43 50 55 20 4c 45 56 45 4c 00                       CPU LEVEL.

00008c27 <__c.3194>:
    8c27:	42 41 43 4b 20 54 4f 00                             BACK TO.

00008c2f <__c.3192>:
    8c2f:	4d 41 53 54 45 52 21 21 21 00                       MASTER!!!.

00008c39 <__c.3190>:
    8c39:	43 4f 4c 55 4d 4e 53 00                             COLUMNS.

00008c41 <__c.3188>:
    8c41:	59 4f 55 20 41 52 45 20 54 48 45 00                 YOU ARE THE.

00008c4d <__c.3186>:
    8c4d:	49 4e 43 52 45 44 49 42 4c 45 21 00                 INCREDIBLE!.

00008c59 <__c.3184>:
    8c59:	4c 45 56 45 4c 00                                   LEVEL.

00008c5f <__c.3182>:
    8c5f:	4e 4f 57 20 54 52 59 00                             NOW TRY.

00008c67 <__c.3180>:
    8c67:	54 52 59 20 41 47 41 49 4e 21 00                    TRY AGAIN!.

00008c72 <__c.3178>:
    8c72:	43 50 55 20 46 41 49 4c 21 21 00                    CPU FAIL!!.

00008c7d <__c.3176>:
    8c7d:	44 52 41 57 21 21 00                                DRAW!!.

00008c84 <__c.3174>:
    8c84:	57 49 4e 4e 45 52 21 21 00                          WINNER!!.

00008c8d <__c.3172>:
    8c8d:	50 41 55 53 45 00                                   PAUSE.

00008c93 <__c.3170>:
    8c93:	51 55 49 54 00                                      QUIT.

00008c98 <__c.3168>:
    8c98:	52 45 53 55 4d 45 00                                RESUME.

00008c9f <__c.3166>:
    8c9f:	3e 00                                               >.

00008ca1 <__c.3164>:
    8ca1:	52 45 41 44 59 21 00                                READY!.

00008ca8 <__c.2978>:
    8ca8:	3e 00                                               >.

00008caa <__c.2976>:
    8caa:	4c 56 4c 00                                         LVL.

00008cae <__c.2974>:
    8cae:	56 45 52 53 55 53 00                                VERSUS.

00008cb5 <__c.2972>:
    8cb5:	53 49 4e 47 4c 45 00                                SINGLE.

00008cbc <__c.2970>:
    8cbc:	53 45 4c 45 43 54 00                                SELECT.

00008cc3 <__c.2965>:
    8cc3:	4c 56 4c 00                                         LVL.

00008cc7 <__c.2963>:
    8cc7:	56 45 52 53 55 53 00                                VERSUS.

00008cce <__c.2961>:
    8cce:	53 49 4e 47 4c 45 00                                SINGLE.

00008cd5 <__c.2959>:
    8cd5:	53 45 4c 45 43 54 00                                SELECT.

00008cdc <__c.2953>:
    8cdc:	50 52 45 53 53 20 53 54 41 52 54 00                 PRESS START.

00008ce8 <__c.2922>:
    8ce8:	43 4f 4c 55 4d 4e 53 00                             COLUMNS.

00008cf0 <__ctors_end>:
    8cf0:	11 24       	eor	r1, r1
    8cf2:	1f be       	out	0x3f, r1	; 63
    8cf4:	cf ef       	ldi	r28, 0xFF	; 255
    8cf6:	d0 e1       	ldi	r29, 0x10	; 16
    8cf8:	de bf       	out	0x3e, r29	; 62
    8cfa:	cd bf       	out	0x3d, r28	; 61

00008cfc <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    8cfc:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    8cfe:	88 e1       	ldi	r24, 0x18	; 24
    8d00:	0f b6       	in	r0, 0x3f	; 63
    8d02:	f8 94       	cli
    8d04:	80 93 60 00 	sts	0x0060, r24
    8d08:	10 92 60 00 	sts	0x0060, r1
    8d0c:	0f be       	out	0x3f, r0	; 63

00008d0e <__do_copy_data>:
    8d0e:	11 e0       	ldi	r17, 0x01	; 1
    8d10:	a0 e0       	ldi	r26, 0x00	; 0
    8d12:	b1 e0       	ldi	r27, 0x01	; 1
    8d14:	e8 e8       	ldi	r30, 0x88	; 136
    8d16:	f8 ee       	ldi	r31, 0xE8	; 232
    8d18:	02 c0       	rjmp	.+4      	; 0x8d1e <.do_copy_data_start>

00008d1a <.do_copy_data_loop>:
    8d1a:	05 90       	lpm	r0, Z+
    8d1c:	0d 92       	st	X+, r0

00008d1e <.do_copy_data_start>:
    8d1e:	a2 30       	cpi	r26, 0x02	; 2
    8d20:	b1 07       	cpc	r27, r17
    8d22:	d9 f7       	brne	.-10     	; 0x8d1a <.do_copy_data_loop>

00008d24 <__do_clear_bss>:
    8d24:	10 e1       	ldi	r17, 0x10	; 16
    8d26:	a0 e2       	ldi	r26, 0x20	; 32
    8d28:	b1 e0       	ldi	r27, 0x01	; 1
    8d2a:	01 c0       	rjmp	.+2      	; 0x8d2e <.do_clear_bss_start>

00008d2c <.do_clear_bss_loop>:
    8d2c:	1d 92       	st	X+, r1

00008d2e <.do_clear_bss_start>:
    8d2e:	a0 30       	cpi	r26, 0x00	; 0
    8d30:	b1 07       	cpc	r27, r17
    8d32:	e1 f7       	brne	.-8      	; 0x8d2c <.do_clear_bss_loop>

00008d34 <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    8d34:	b2 d4       	rcall	.+2404   	; 0x969a <isEepromFormatted>
    8d36:	88 23       	and	r24, r24
    8d38:	09 f4       	brne	.+2      	; 0x8d3c <Initialize+0x8>
    8d3a:	c3 d4       	rcall	.+2438   	; 0x96c2 <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    8d3c:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8d3e:	91 e0       	ldi	r25, 0x01	; 1
    8d40:	90 93 75 0d 	sts	0x0D75, r25
		tr4_barrel_hi=1;		
    8d44:	90 93 76 0d 	sts	0x0D76, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    8d48:	90 93 74 0d 	sts	0x0D74, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    8d4c:	10 92 61 0d 	sts	0x0D61, r1
    8d50:	10 92 67 0d 	sts	0x0D67, r1
    8d54:	10 92 6d 0d 	sts	0x0D6D, r1
    8d58:	10 92 73 0d 	sts	0x0D73, r1
    8d5c:	10 92 79 0d 	sts	0x0D79, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1
	sync_phase=0;
    8d60:	10 92 2e 0d 	sts	0x0D2E, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    8d64:	82 e1       	ldi	r24, 0x12	; 18
    8d66:	80 93 2f 0d 	sts	0x0D2F, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    8d6a:	80 ed       	ldi	r24, 0xD0	; 208
    8d6c:	80 93 38 0d 	sts	0x0D38, r24
	render_lines_count=FRAME_LINES;
    8d70:	80 93 36 0d 	sts	0x0D36, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    8d74:	84 e2       	ldi	r24, 0x24	; 36
    8d76:	80 93 37 0d 	sts	0x0D37, r24
	first_render_line=FIRST_RENDER_LINE;
    8d7a:	80 93 35 0d 	sts	0x0D35, r24

	joypad1_status_hi=0;
    8d7e:	10 92 3c 0d 	sts	0x0D3C, r1
    8d82:	10 92 3b 0d 	sts	0x0D3B, r1
	joypad2_status_hi=0;
    8d86:	10 92 40 0d 	sts	0x0D40, r1
    8d8a:	10 92 3f 0d 	sts	0x0D3F, r1
	sound_enabled=1;
    8d8e:	90 93 60 0d 	sts	0x0D60, r25

	InitializeVideoMode();
    8d92:	0e 94 81 53 	call	0xa702	; 0xa702 <InitializeVideoMode>
    8d96:	20 e9       	ldi	r18, 0x90	; 144
    8d98:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    8d9a:	f9 01       	movw	r30, r18
    8d9c:	85 91       	lpm	r24, Z+
    8d9e:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    8da0:	fc 01       	movw	r30, r24
    8da2:	f0 70       	andi	r31, 0x00	; 0
    8da4:	90 83       	st	Z, r25
    8da6:	2e 5f       	subi	r18, 0xFE	; 254
    8da8:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    8daa:	80 e0       	ldi	r24, 0x00	; 0
    8dac:	2e 3b       	cpi	r18, 0xBE	; 190
    8dae:	38 07       	cpc	r19, r24
    8db0:	a1 f7       	brne	.-24     	; 0x8d9a <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    8db2:	78 94       	sei
	
	DisplayLogo();
    8db4:	0e 94 80 53 	call	0xa700	; 0xa700 <DisplayLogo>
    8db8:	0e 94 4e 73 	call	0xe69c	; 0xe69c <main>
    8dbc:	0c 94 42 74 	jmp	0xe884	; 0xe884 <_exit>

00008dc0 <__bad_interrupt>:
    8dc0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008dc4 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		ldi r16,6
    8dc4:	06 e0       	ldi	r16, 0x06	; 6
		dec r16
    8dc6:	0a 95       	dec	r16
		brne .-4		
    8dc8:	f1 f7       	brne	.-4      	; 0x8dc6 <sub_video_mode3+0x2>

		;ldi YL,lo8(vram)
		;ldi YH,hi8(vram)

		;lds r18,free_tile_index
		lpm
    8dca:	c8 95       	lpm
		lpm
    8dcc:	c8 95       	lpm

		clr r16
    8dce:	00 27       	eor	r16, r16

00008dd0 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    8dd0:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    8dd2:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    8dd4:	ac 0f       	add	r26, r28
		adc XH,YH
    8dd6:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    8dd8:	1c 91       	ld	r17, X
		rjmp .;std Z+2,r17
    8dda:	00 c0       	rjmp	.+0      	; 0x8ddc <upd_loop+0xc>
		

		cp r16,r18
    8ddc:	02 17       	cp	r16, r18
		brsh noov
    8dde:	08 f4       	brcc	.+2      	; 0x8de2 <noov>
		mov r17,r16
    8de0:	10 2f       	mov	r17, r16

00008de2 <noov>:
	noov:
		rjmp .;st X,r17
    8de2:	00 c0       	rjmp	.+0      	; 0x8de4 <noov+0x2>
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    8de4:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    8de6:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    8de8:	04 32       	cpi	r16, 0x24	; 36
		brlo upd_loop ;23
    8dea:	90 f3       	brcs	.-28     	; 0x8dd0 <upd_loop>



		ldi r16,63-RAM_TILES_COUNT ;222*7 
    8dec:	0b e1       	ldi	r16, 0x1B	; 27

00008dee <wait_loop>:
	wait_loop:
	
		ldi r17,6
    8dee:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    8df0:	1a 95       	dec	r17
		brne .-4
    8df2:	f1 f7       	brne	.-4      	; 0x8df0 <wait_loop+0x2>

		dec r16
    8df4:	0a 95       	dec	r16
		brne wait_loop
    8df6:	d9 f7       	brne	.-10     	; 0x8dee <wait_loop>

	


		ldi YL,lo8(vram)
    8df8:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8dfa:	d1 e0       	ldi	r29, 0x01	; 1

		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    8dfc:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    8dfe:	a0 2e       	mov	r10, r16
		clr r22
    8e00:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    8e02:	78 e0       	ldi	r23, 0x08	; 8

00008e04 <next_text_line>:




	next_text_line:	
		rcall hsync_pulse
    8e04:	ff d1       	rcall	.+1022   	; 0x9204 <hsync_pulse>

		WAIT r19,245 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT
    8e06:	3b e0       	ldi	r19, 0x0B	; 11
    8e08:	3a 95       	dec	r19
    8e0a:	f1 f7       	brne	.-4      	; 0x8e08 <next_text_line+0x4>

		;***draw line***
		call render_tile_line
    8e0c:	24 d0       	rcall	.+72     	; 0x8e56 <render_tile_line>
    8e0e:	3b e0       	ldi	r19, 0x0B	; 11

		ldi r19,7 + 4 - CENTER_ADJUSTMENT	
    8e10:	3a 95       	dec	r19
		dec r19			
    8e12:	f1 f7       	brne	.-4      	; 0x8e10 <next_text_line+0xc>
		brne .-4
    8e14:	aa 94       	dec	r10
	
		;rjmp .

		dec r10
    8e16:	89 f0       	breq	.+34     	; 0x8e3a <text_frame_end>
		breq text_frame_end
    8e18:	63 95       	inc	r22
	
		inc r22
    8e1a:	c8 95       	lpm
		lpm ;3 nop
    8e1c:	68 30       	cpi	r22, 0x08	; 8

		cpi r22,TILE_HEIGHT ;last char line? 1
    8e1e:	29 f0       	breq	.+10     	; 0x8e2a <next_text_row>
		breq next_text_row 
    8e20:	c8 95       	lpm
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		lpm ;3 nop
    8e22:	c8 95       	lpm
		lpm ;3 nop
    8e24:	c8 95       	lpm
		lpm ;3 nop
    8e26:	00 00       	nop
		nop
    8e28:	ed cf       	rjmp	.-38     	; 0x8e04 <next_text_line>

00008e2a <next_text_row>:
		rjmp next_text_line	
    8e2a:	66 27       	eor	r22, r22

	next_text_row:
		clr r22		;current char line			;1	
    8e2c:	00 24       	eor	r0, r0

		clr r0
    8e2e:	3e e1       	ldi	r19, 0x1E	; 30
		ldi r19,VRAM_TILES_H
    8e30:	c3 0f       	add	r28, r19
		add YL,r19
    8e32:	d0 1d       	adc	r29, r0
		adc YH,r0
    8e34:	c8 95       	lpm

		lpm
    8e36:	00 00       	nop
		nop
    8e38:	e5 cf       	rjmp	.-54     	; 0x8e04 <next_text_line>

00008e3a <text_frame_end>:

		rjmp next_text_line
    8e3a:	35 e0       	ldi	r19, 0x05	; 5

	text_frame_end:

		ldi r19,5
    8e3c:	3a 95       	dec	r19
		dec r19			
    8e3e:	f1 f7       	brne	.-4      	; 0x8e3c <text_frame_end+0x2>
		brne .-4
    8e40:	00 c0       	rjmp	.+0      	; 0x8e42 <text_frame_end+0x8>
		rjmp .
    8e42:	e0 d1       	rcall	.+960    	; 0x9204 <hsync_pulse>

		rcall hsync_pulse ;145
    8e44:	11 24       	eor	r1, r1
	
		clr r1
    8e46:	e1 e0       	ldi	r30, 0x01	; 1
;		call RestoreBackground

		;set vsync flag if beginning of next frame
		ldi ZL,1
    8e48:	e0 93 30 0d 	sts	0x0D30, r30
		sts vsync_flag,ZL
    8e4c:	e2 e0       	ldi	r30, 0x02	; 2

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8e4e:	e0 93 36 00 	sts	0x0036, r30
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8e52:	11 24       	eor	r1, r1



		clr r1
    8e54:	08 95       	ret

00008e56 <render_tile_line>:


		ret
    8e56:	de 01       	movw	r26, r28
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8e58:	67 9f       	mul	r22, r23

		mul r22,r23
    8e5a:	00 00       	nop

		nop
    8e5c:	00 91 2c 0d 	lds	r16, 0x0D2C

		lds r16,tile_table_lo 
    8e60:	10 91 2d 0d 	lds	r17, 0x0D2D
		lds r17,tile_table_hi
    8e64:	00 50       	subi	r16, 0x00	; 0
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8e66:	19 40       	sbci	r17, 0x09	; 9
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8e68:	00 0d       	add	r16, r0

		add r16,r0
    8e6a:	11 1d       	adc	r17, r1
		adc r17,r1
    8e6c:	18 01       	movw	r2, r16
		movw r2,r16			;rom tiles
    8e6e:	0c e2       	ldi	r16, 0x2C	; 44

		ldi r16,lo8(ram_tiles)
    8e70:	14 e0       	ldi	r17, 0x04	; 4
		ldi r17,hi8(ram_tiles)
    8e72:	00 0d       	add	r16, r0
		add r16,r0
    8e74:	11 1d       	adc	r17, r1
		adc r17,r1
    8e76:	28 01       	movw	r4, r16
		movw r4,r16			;ram tiles
    8e78:	30 e4       	ldi	r19, 0x40	; 64

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    8e7a:	1e e1       	ldi	r17, 0x1E	; 30
		ldi r17,SCREEN_TILES_H
    8e7c:	2d 91       	ld	r18, X+

	    ld r18,X+     	;load next tile # from VRAM
    8e7e:	24 32       	cpi	r18, 0x24	; 36
		cpi r18,RAM_TILES_COUNT
    8e80:	6f b6       	in	r6, 0x3f	; 63
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8e82:	60 fa       	bst	r6, 0
		bst r6,SREG_C
    8e84:	23 9f       	mul	r18, r19

		mul r18,r19 	;tile*width*height
    8e86:	a1 01       	movw	r20, r2
		movw r20,r2		;rom tiles
    8e88:	0e f4       	brtc	.+2      	; 0x8e8c <render_tile_line+0x36>
		brtc .+2
    8e8a:	a2 01       	movw	r20, r4
		movw r20,r4		;ram tiles
    8e8c:	04 0e       	add	r0, r20

	    add r0,r20    ;add title table address +row offset
    8e8e:	15 1e       	adc	r1, r21
	    adc r1,r21
    8e90:	f0 01       	movw	r30, r0

		movw ZL,r0
    8e92:	f6 f0       	brts	.+60     	; 0x8ed0 <ramloop>

00008e94 <romloop>:

		brts ramloop
    8e94:	05 91       	lpm	r16, Z+
	

	romloop:
	    lpm r16,Z+
    8e96:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8e98:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    8e9a:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    8e9c:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    8e9e:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    8ea0:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    8ea2:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    8ea4:	24 32       	cpi	r18, 0x24	; 36
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    8ea6:	6f b6       	in	r6, 0x3f	; 63
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8ea8:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    8eaa:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8eac:	08 f4       	brcc	.+2      	; 0x8eb0 <romloop+0x1c>
		brsh .+2		;skip in next tile is in ROM	
    8eae:	a2 01       	movw	r20, r4
		movw r20,r4 	;load RAM title table address +row offset	
    8eb0:	05 91       	lpm	r16, Z+
   
	    lpm r16,Z+
    8eb2:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    8eb4:	60 fa       	bst	r6, 0
	    bst r6,SREG_C	;store carry state in T flag for later branch
    8eb6:	04 0e       	add	r0, r20
		add r0,r20		;add title table address +row offset lsb
    8eb8:	05 91       	lpm	r16, Z+
    
	    lpm r16,Z+
    8eba:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    8ebc:	15 1e       	adc	r1, r21
		adc r1,r21		;add title table address +row offset msb
    8ebe:	1a 95       	dec	r17
		dec r17			;decrement tiles to draw on line
    8ec0:	05 91       	lpm	r16, Z+

   
	    lpm r16,Z+
    8ec2:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    8ec4:	05 91       	lpm	r16, Z+
	    lpm r16,Z+
    8ec6:	39 f1       	breq	.+78     	; 0x8f16 <end>

		breq end	
    8ec8:	f0 01       	movw	r30, r0
	    movw ZL,r0   	;copy next tile adress
    8eca:	08 b9       	out	0x08, r16	; 8

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8ecc:	1e f7       	brtc	.-58     	; 0x8e94 <romloop>
	    brtc romloop
    8ece:	00 c0       	rjmp	.+0      	; 0x8ed0 <ramloop>

00008ed0 <ramloop>:
	
		rjmp .
    8ed0:	01 91       	ld	r16, Z+

	ramloop:

	    ld r16,Z+
    8ed2:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8ed4:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    8ed6:	01 91       	ld	r16, Z+

	    ld r16,Z+ 
    8ed8:	00 00       	nop
		nop   
    8eda:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    8edc:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    8ede:	01 91       	ld	r16, Z+


	    ld r16,Z+
    8ee0:	00 00       	nop
		nop
    8ee2:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    8ee4:	24 32       	cpi	r18, 0x24	; 36
		cpi r18,RAM_TILES_COUNT
    8ee6:	6f b6       	in	r6, 0x3f	; 63
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8ee8:	60 fa       	bst	r6, 0
		bst r6,SREG_C
    8eea:	01 91       	ld	r16, Z+
   

	    ld r16,Z+
    8eec:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8eee:	0e f0       	brts	.+2      	; 0x8ef2 <ramloop+0x22>
		brts .+2 
    8ef0:	a1 01       	movw	r20, r2
		movw r20,r2 	;ROM title table address +row offset	
    8ef2:	01 91       	ld	r16, Z+
   
   
	    ld r16,Z+
    8ef4:	04 0e       	add	r0, r20
	    add r0,r20    ;add title table address +row offset
    8ef6:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8ef8:	15 1e       	adc	r1, r21
	    adc r1,r21
    8efa:	00 c0       	rjmp	.+0      	; 0x8efc <ramloop+0x2c>
		rjmp .
    8efc:	01 91       	ld	r16, Z+
    
		ld r16,Z+		
    8efe:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    8f00:	00 00       	nop
		nop
    8f02:	00 c0       	rjmp	.+0      	; 0x8f04 <ramloop+0x34>
		rjmp .  
    8f04:	01 91       	ld	r16, Z+

	    ld r16,Z+	
    8f06:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8f08:	01 91       	ld	r16, Z+
	    ld r16,Z+
    8f0a:	1a 95       	dec	r17

	    dec r17
    8f0c:	21 f0       	breq	.+8      	; 0x8f16 <end>
	    breq end
    8f0e:	f0 01       	movw	r30, r0
	
		movw ZL,r0
    8f10:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8f12:	06 f6       	brtc	.-128    	; 0x8e94 <romloop>
	
	    brtc romloop
    8f14:	dd cf       	rjmp	.-70     	; 0x8ed0 <ramloop>

00008f16 <end>:
		rjmp ramloop
    8f16:	08 b9       	out	0x08, r16	; 8
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8f18:	00 27       	eor	r16, r16
		clr r16	
    8f1a:	c8 95       	lpm
		lpm	
    8f1c:	00 00       	nop
		nop
    8f1e:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        
    8f20:	05 e0       	ldi	r16, 0x05	; 5

		;wait
		ldi r16,5
    8f22:	0a 95       	dec	r16
		dec r16
    8f24:	f1 f7       	brne	.-4      	; 0x8f22 <end+0xc>
		brne .-4
    8f26:	08 95       	ret

00008f28 <CopyTileToRam>:

	
		ret
    8f28:	20 e4       	ldi	r18, 0x40	; 64
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8f2a:	e0 91 2c 0d 	lds	r30, 0x0D2C

	;compute source adress
	lds ZL,tile_table_lo
    8f2e:	f0 91 2d 0d 	lds	r31, 0x0D2D
	lds ZH,tile_table_hi
    8f32:	84 52       	subi	r24, 0x24	; 36
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    8f34:	82 9f       	mul	r24, r18
	mul r24,r18
    8f36:	e0 0d       	add	r30, r0
	add ZL,r0
    8f38:	f1 1d       	adc	r31, r1
	adc ZH,r1
    8f3a:	ac e2       	ldi	r26, 0x2C	; 44

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8f3c:	b4 e0       	ldi	r27, 0x04	; 4
	ldi XH,hi8(ram_tiles)
    8f3e:	62 9f       	mul	r22, r18
	mul r22,r18
    8f40:	a0 0d       	add	r26, r0
	add XL,r0
    8f42:	b1 1d       	adc	r27, r1
	adc XH,r1
    8f44:	00 24       	eor	r0, r0

	clr r0
    8f46:	05 90       	lpm	r0, Z+
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    8f48:	0d 92       	st	X+, r0
    8f4a:	05 90       	lpm	r0, Z+
    8f4c:	0d 92       	st	X+, r0
    8f4e:	05 90       	lpm	r0, Z+
    8f50:	0d 92       	st	X+, r0
    8f52:	05 90       	lpm	r0, Z+
    8f54:	0d 92       	st	X+, r0
    8f56:	05 90       	lpm	r0, Z+
    8f58:	0d 92       	st	X+, r0
    8f5a:	05 90       	lpm	r0, Z+
    8f5c:	0d 92       	st	X+, r0
    8f5e:	05 90       	lpm	r0, Z+
    8f60:	0d 92       	st	X+, r0
    8f62:	05 90       	lpm	r0, Z+
    8f64:	0d 92       	st	X+, r0
    8f66:	05 90       	lpm	r0, Z+
    8f68:	0d 92       	st	X+, r0
    8f6a:	05 90       	lpm	r0, Z+
    8f6c:	0d 92       	st	X+, r0
    8f6e:	05 90       	lpm	r0, Z+
    8f70:	0d 92       	st	X+, r0
    8f72:	05 90       	lpm	r0, Z+
    8f74:	0d 92       	st	X+, r0
    8f76:	05 90       	lpm	r0, Z+
    8f78:	0d 92       	st	X+, r0
    8f7a:	05 90       	lpm	r0, Z+
    8f7c:	0d 92       	st	X+, r0
    8f7e:	05 90       	lpm	r0, Z+
    8f80:	0d 92       	st	X+, r0
    8f82:	05 90       	lpm	r0, Z+
    8f84:	0d 92       	st	X+, r0
    8f86:	05 90       	lpm	r0, Z+
    8f88:	0d 92       	st	X+, r0
    8f8a:	05 90       	lpm	r0, Z+
    8f8c:	0d 92       	st	X+, r0
    8f8e:	05 90       	lpm	r0, Z+
    8f90:	0d 92       	st	X+, r0
    8f92:	05 90       	lpm	r0, Z+
    8f94:	0d 92       	st	X+, r0
    8f96:	05 90       	lpm	r0, Z+
    8f98:	0d 92       	st	X+, r0
    8f9a:	05 90       	lpm	r0, Z+
    8f9c:	0d 92       	st	X+, r0
    8f9e:	05 90       	lpm	r0, Z+
    8fa0:	0d 92       	st	X+, r0
    8fa2:	05 90       	lpm	r0, Z+
    8fa4:	0d 92       	st	X+, r0
    8fa6:	05 90       	lpm	r0, Z+
    8fa8:	0d 92       	st	X+, r0
    8faa:	05 90       	lpm	r0, Z+
    8fac:	0d 92       	st	X+, r0
    8fae:	05 90       	lpm	r0, Z+
    8fb0:	0d 92       	st	X+, r0
    8fb2:	05 90       	lpm	r0, Z+
    8fb4:	0d 92       	st	X+, r0
    8fb6:	05 90       	lpm	r0, Z+
    8fb8:	0d 92       	st	X+, r0
    8fba:	05 90       	lpm	r0, Z+
    8fbc:	0d 92       	st	X+, r0
    8fbe:	05 90       	lpm	r0, Z+
    8fc0:	0d 92       	st	X+, r0
    8fc2:	05 90       	lpm	r0, Z+
    8fc4:	0d 92       	st	X+, r0
    8fc6:	05 90       	lpm	r0, Z+
    8fc8:	0d 92       	st	X+, r0
    8fca:	05 90       	lpm	r0, Z+
    8fcc:	0d 92       	st	X+, r0
    8fce:	05 90       	lpm	r0, Z+
    8fd0:	0d 92       	st	X+, r0
    8fd2:	05 90       	lpm	r0, Z+
    8fd4:	0d 92       	st	X+, r0
    8fd6:	05 90       	lpm	r0, Z+
    8fd8:	0d 92       	st	X+, r0
    8fda:	05 90       	lpm	r0, Z+
    8fdc:	0d 92       	st	X+, r0
    8fde:	05 90       	lpm	r0, Z+
    8fe0:	0d 92       	st	X+, r0
    8fe2:	05 90       	lpm	r0, Z+
    8fe4:	0d 92       	st	X+, r0
    8fe6:	05 90       	lpm	r0, Z+
    8fe8:	0d 92       	st	X+, r0
    8fea:	05 90       	lpm	r0, Z+
    8fec:	0d 92       	st	X+, r0
    8fee:	05 90       	lpm	r0, Z+
    8ff0:	0d 92       	st	X+, r0
    8ff2:	05 90       	lpm	r0, Z+
    8ff4:	0d 92       	st	X+, r0
    8ff6:	05 90       	lpm	r0, Z+
    8ff8:	0d 92       	st	X+, r0
    8ffa:	05 90       	lpm	r0, Z+
    8ffc:	0d 92       	st	X+, r0
    8ffe:	05 90       	lpm	r0, Z+
    9000:	0d 92       	st	X+, r0
    9002:	05 90       	lpm	r0, Z+
    9004:	0d 92       	st	X+, r0
    9006:	05 90       	lpm	r0, Z+
    9008:	0d 92       	st	X+, r0
    900a:	05 90       	lpm	r0, Z+
    900c:	0d 92       	st	X+, r0
    900e:	05 90       	lpm	r0, Z+
    9010:	0d 92       	st	X+, r0
    9012:	05 90       	lpm	r0, Z+
    9014:	0d 92       	st	X+, r0
    9016:	05 90       	lpm	r0, Z+
    9018:	0d 92       	st	X+, r0
    901a:	05 90       	lpm	r0, Z+
    901c:	0d 92       	st	X+, r0
    901e:	05 90       	lpm	r0, Z+
    9020:	0d 92       	st	X+, r0
    9022:	05 90       	lpm	r0, Z+
    9024:	0d 92       	st	X+, r0
    9026:	05 90       	lpm	r0, Z+
    9028:	0d 92       	st	X+, r0
    902a:	05 90       	lpm	r0, Z+
    902c:	0d 92       	st	X+, r0
    902e:	05 90       	lpm	r0, Z+
    9030:	0d 92       	st	X+, r0
    9032:	05 90       	lpm	r0, Z+
    9034:	0d 92       	st	X+, r0
    9036:	05 90       	lpm	r0, Z+
    9038:	0d 92       	st	X+, r0
    903a:	05 90       	lpm	r0, Z+
    903c:	0d 92       	st	X+, r0
    903e:	05 90       	lpm	r0, Z+
    9040:	0d 92       	st	X+, r0
    9042:	05 90       	lpm	r0, Z+
    9044:	0d 92       	st	X+, r0
    9046:	11 24       	eor	r1, r1


	clr r1
    9048:	08 95       	ret

0000904a <__vector_13>:
	ret
    904a:	0f 92       	push	r0

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    904c:	1f 92       	push	r1
	push r1
    904e:	ef 93       	push	r30
	push ZL;2
    9050:	ff 93       	push	r31
	push ZH;2
    9052:	ef b7       	in	r30, 0x3f	; 63
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    9054:	ef 93       	push	r30
	push ZL ;2		
    9056:	e0 91 84 00 	lds	r30, 0x0084

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    905a:	e2 51       	subi	r30, 0x12	; 18
	subi ZL,0x12 ;MIN_INT_LATENCY
    905c:	f1 e0       	ldi	r31, 0x01	; 1

0000905e <latency_loop>:

	ldi ZH,1
    905e:	ef 17       	cp	r30, r31
latency_loop:
	cp ZL,ZH
    9060:	00 f0       	brcs	.+0      	; 0x9062 <latency_loop+0x4>
	brlo .		;advance PC to next instruction	
    9062:	f3 95       	inc	r31
	inc ZH
    9064:	fa 30       	cpi	r31, 0x0A	; 10
	cpi ZH,10
    9066:	d8 f3       	brcs	.-10     	; 0x905e <latency_loop>
	brlo latency_loop
    9068:	00 c0       	rjmp	.+0      	; 0x906a <latency_loop+0xc>
	jmp .
    906a:	e0 91 2f 0d 	lds	r30, 0x0D2F
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    906e:	ea 95       	dec	r30
    9070:	e0 93 2f 0d 	sts	0x0D2F, r30
	dec ZL
	sts sync_pulse,ZL
    9074:	f0 91 2e 0d 	lds	r31, 0x0D2E

	;process sync phases
	lds ZH,sync_phase
    9078:	f0 fd       	sbrc	r31, 0
    907a:	54 c0       	rjmp	.+168    	; 0x9124 <sync_hsync>
	sbrc ZH,0
    907c:	ec 30       	cpi	r30, 0x0C	; 12
	rjmp sync_hsync
    907e:	90 f0       	brcs	.+36     	; 0x90a4 <sync_eq>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    9080:	f3 e0       	ldi	r31, 0x03	; 3
	brlo sync_eq
    9082:	f0 93 89 00 	sts	0x0089, r31

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    9086:	fd e8       	ldi	r31, 0x8D	; 141
    9088:	f0 93 88 00 	sts	0x0088, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    908c:	e0 fb       	bst	r30, 0
    908e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    9090:	1e f4       	brtc	.+6      	; 0x9098 <sync_pre_eq_no_sound_update>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    9092:	e1 e0       	ldi	r30, 0x01	; 1
	brtc sync_pre_eq_no_sound_update
    9094:	c6 d0       	rcall	.+396    	; 0x9222 <update_sound>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    9096:	af c0       	rjmp	.+350    	; 0x91f6 <sync_end>

00009098 <sync_pre_eq_no_sound_update>:
	call update_sound
    9098:	e5 e1       	ldi	r30, 0x15	; 21
    909a:	ea 95       	dec	r30
	rjmp sync_end
    909c:	f1 f7       	brne	.-4      	; 0x909a <sync_pre_eq_no_sound_update+0x2>

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    909e:	00 00       	nop
    90a0:	28 9a       	sbi	0x05, 0	; 5
    90a2:	a9 c0       	rjmp	.+338    	; 0x91f6 <sync_end>

000090a4 <sync_eq>:
    90a4:	e6 30       	cpi	r30, 0x06	; 6
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    90a6:	30 f1       	brcs	.+76     	; 0x90f4 <sync_post_eq>
		
	rjmp sync_end
    90a8:	00 c0       	rjmp	.+0      	; 0x90aa <sync_eq+0x6>
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    90aa:	00 c0       	rjmp	.+0      	; 0x90ac <sync_eq+0x8>
	brlo sync_post_eq
    90ac:	28 98       	cbi	0x05, 0	; 5

	rjmp .
    90ae:	e0 fb       	bst	r30, 0
	rjmp .
    90b0:	e4 e0       	ldi	r30, 0x04	; 4

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    90b2:	0e f4       	brtc	.+2      	; 0x90b6 <sync_eq_skip>

	bst ZL,0
    90b4:	b6 d0       	rcall	.+364    	; 0x9222 <update_sound>

000090b6 <sync_eq_skip>:
	ldi ZL,4
    90b6:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    90b8:	e0 93 36 00 	sts	0x0036, r30
	
	call update_sound
    90bc:	e6 e0       	ldi	r30, 0x06	; 6
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    90be:	e0 93 6f 00 	sts	0x006F, r30
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    90c2:	99 c0       	rjmp	.+306    	; 0x91f6 <sync_end>

000090c4 <__vector_14>:
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    90c4:	ef 93       	push	r30
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    90c6:	ef b7       	in	r30, 0x3f	; 63
    90c8:	ef 93       	push	r30

	rjmp sync_end
    90ca:	e0 91 84 00 	lds	r30, 0x0084
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    90ce:	ed 55       	subi	r30, 0x5D	; 93
	push ZL ;2		
    90d0:	e1 30       	cpi	r30, 0x01	; 1

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    90d2:	00 f0       	brcs	.+0      	; 0x90d4 <__vector_14+0x10>
    90d4:	e2 30       	cpi	r30, 0x02	; 2
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    90d6:	00 f0       	brcs	.+0      	; 0x90d8 <__vector_14+0x14>

	cpi ZL,1
    90d8:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    90da:	00 f0       	brcs	.+0      	; 0x90dc <__vector_14+0x18>

	cpi ZL,2
    90dc:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    90de:	00 f0       	brcs	.+0      	; 0x90e0 <__vector_14+0x1c>

	cpi ZL,3
    90e0:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    90e2:	00 f0       	brcs	.+0      	; 0x90e4 <__vector_14+0x20>

	cpi ZL,4
    90e4:	28 9a       	sbi	0x05, 0	; 5
	brlo .		;advance PC to next instruction
    90e6:	e2 e0       	ldi	r30, 0x02	; 2

	cpi ZL,5
    90e8:	e0 93 6f 00 	sts	0x006F, r30
	brlo .		;advance PC to next instruction

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    90ec:	ef 91       	pop	r30
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    90ee:	ef bf       	out	0x3f, r30	; 63
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    90f0:	ef 91       	pop	r30
    90f2:	18 95       	reti

000090f4 <sync_post_eq>:
	
	;restore flags
	pop ZL
    90f4:	00 c0       	rjmp	.+0      	; 0x90f6 <sync_post_eq+0x2>
	out _SFR_IO_ADDR(SREG),ZL	
    90f6:	e0 fb       	bst	r30, 0
	pop ZL
    90f8:	28 98       	cbi	0x05, 0	; 5
	reti
    90fa:	1e f4       	brtc	.+6      	; 0x9102 <sync_post_eq_no_sound_update>
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    90fc:	e1 e0       	ldi	r30, 0x01	; 1

	bst ZL,0
    90fe:	91 d0       	rcall	.+290    	; 0x9222 <update_sound>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    9100:	05 c0       	rjmp	.+10     	; 0x910c <sync_pre_eq_cont>

00009102 <sync_post_eq_no_sound_update>:
	brtc sync_post_eq_no_sound_update
    9102:	e5 e1       	ldi	r30, 0x15	; 21
	ldi ZL,1	
    9104:	ea 95       	dec	r30
	call update_sound
    9106:	f1 f7       	brne	.-4      	; 0x9104 <sync_post_eq_no_sound_update+0x2>
    9108:	00 00       	nop
	rjmp sync_pre_eq_cont
    910a:	28 9a       	sbi	0x05, 0	; 5

0000910c <sync_pre_eq_cont>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    910c:	e0 91 2f 0d 	lds	r30, 0x0D2F
    9110:	e0 30       	cpi	r30, 0x00	; 0
    9112:	09 f0       	breq	.+2      	; 0x9116 <sync_pre_eq_cont+0xa>

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    9114:	70 c0       	rjmp	.+224    	; 0x91f6 <sync_end>

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    9116:	ed ef       	ldi	r30, 0xFD	; 253
    9118:	e0 93 2f 0d 	sts	0x0D2F, r30
	cpi ZL,0
	breq .+2 ;skip rjmp
    911c:	e1 e0       	ldi	r30, 0x01	; 1
	rjmp sync_end
    911e:	e0 93 2e 0d 	sts	0x0D2E, r30
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
	sts sync_pulse,ZL
    9122:	69 c0       	rjmp	.+210    	; 0x91f6 <sync_end>

00009124 <sync_hsync>:
    9124:	e7 e0       	ldi	r30, 0x07	; 7
	ldi ZL,1
    9126:	e0 93 89 00 	sts	0x0089, r30
	sts sync_phase,ZL
    912a:	eb e1       	ldi	r30, 0x1B	; 27
	
	rjmp sync_end
    912c:	e0 93 88 00 	sts	0x0088, r30
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    9130:	00 c0       	rjmp	.+0      	; 0x9132 <sync_hsync+0xe>
    9132:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,lo8(HDRIVE_CL)
    9134:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    9136:	00 c0       	rjmp	.+0      	; 0x9138 <sync_hsync+0x14>
    9138:	74 d0       	rcall	.+232    	; 0x9222 <update_sound>
	rjmp .
    913a:	fd ef       	ldi	r31, 0xFD	; 253

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    913c:	00 90 35 0d 	lds	r0, 0x0D35
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
	rjmp .
    9140:	f0 19       	sub	r31, r0
	call update_sound
    9142:	e0 91 2f 0d 	lds	r30, 0x0D2F

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    9146:	ef 17       	cp	r30, r31
	lds r0,first_render_line
    9148:	c8 f4       	brcc	.+50     	; 0x917c <no_render>
    914a:	fd ef       	ldi	r31, 0xFD	; 253
	sub ZH,r0				
    914c:	00 90 35 0d 	lds	r0, 0x0D35
	lds ZL,sync_pulse
    9150:	f0 19       	sub	r31, r0
	cp ZL,ZH
    9152:	00 90 36 0d 	lds	r0, 0x0D36
	brsh no_render

	ldi ZH,SYNC_HSYNC_PULSES
    9156:	f0 19       	sub	r31, r0
	lds r0,first_render_line
    9158:	ef 17       	cp	r30, r31
    915a:	80 f0       	brcs	.+32     	; 0x917c <no_render>
	sub ZH,r0				
    915c:	ed e1       	ldi	r30, 0x1D	; 29
	lds r0,render_lines_count
    915e:	ff 27       	eor	r31, r31

00009160 <push_loop>:
    9160:	00 80       	ld	r0, Z
	sub ZH,r0			
    9162:	0f 92       	push	r0
	cp ZL,ZH
    9164:	ea 95       	dec	r30
	brlo no_render
    9166:	e1 f7       	brne	.-8      	; 0x9160 <push_loop>

	;push r1-r29
	ldi ZL,29
    9168:	06 e0       	ldi	r16, 0x06	; 6
	clr ZH
    916a:	0a 95       	dec	r16
push_loop:
	ld r0,Z	;load value from register file
    916c:	f1 f7       	brne	.-4      	; 0x916a <push_loop+0xa>
	push r0
    916e:	2a de       	rcall	.-940    	; 0x8dc4 <sub_video_mode3>
	dec ZL
    9170:	e1 e0       	ldi	r30, 0x01	; 1
	brne push_loop	
    9172:	ff 27       	eor	r31, r31

00009174 <pop_loop>:

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,18+212-AUDIO_OUT_HSYNC_CYCLES
    9174:	0f 90       	pop	r0
    9176:	01 92       	st	Z+, r0
    9178:	ee 31       	cpi	r30, 0x1E	; 30

	call VMODE_FUNC		;TCNT1=0x234
    917a:	e0 f3       	brcs	.-8      	; 0x9174 <pop_loop>

0000917c <no_render>:
    917c:	e0 91 2f 0d 	lds	r30, 0x0D2F

	;pop r1-r29
	ldi ZL,1
	clr ZH
    9180:	e0 30       	cpi	r30, 0x00	; 0
pop_loop:
	pop r0
    9182:	09 f0       	breq	.+2      	; 0x9186 <no_render+0xa>
	st Z+,r0 ;store value to register file
    9184:	38 c0       	rjmp	.+112    	; 0x91f6 <sync_end>
	cpi ZL,30
    9186:	2f 93       	push	r18
	brlo pop_loop	
    9188:	3f 93       	push	r19

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    918a:	4f 93       	push	r20
    918c:	5f 93       	push	r21
	cpi ZL,0
    918e:	6f 93       	push	r22
	breq .+2
    9190:	7f 93       	push	r23
	rjmp sync_end
    9192:	8f 93       	push	r24
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    9194:	9f 93       	push	r25
	push r19
    9196:	af 93       	push	r26
	push r20
    9198:	bf 93       	push	r27
	push r21
    919a:	78 94       	sei
	push r22
    919c:	11 24       	eor	r1, r1
	push r23
    919e:	ee 27       	eor	r30, r30
	push r24
    91a0:	e0 93 2e 0d 	sts	0x0D2E, r30
	push r25
	push r26
    91a4:	e2 e1       	ldi	r30, 0x12	; 18
	push r27
    91a6:	e0 93 2f 0d 	sts	0x0D2F, r30

	sei ;must enable ints for re-entrant sync pulses
	clr r1
    91aa:	f0 91 37 0d 	lds	r31, 0x0D37

	;set vsync flags
	clr ZL
	sts sync_phase,ZL
    91ae:	f0 93 35 0d 	sts	0x0D35, r31
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    91b2:	f0 91 38 0d 	lds	r31, 0x0D38
	sts sync_pulse,ZL
    91b6:	f0 93 36 0d 	sts	0x0D36, r31

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    91ba:	e0 91 31 0d 	lds	r30, 0x0D31
	sts first_render_line,ZH
    91be:	f0 91 32 0d 	lds	r31, 0x0D32
	
	lds ZH,render_lines_count_tmp
    91c2:	e1 15       	cp	r30, r1
	sts render_lines_count,ZH
    91c4:	f1 05       	cpc	r31, r1
    91c6:	09 f0       	breq	.+2      	; 0x91ca <no_render+0x4e>

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    91c8:	09 95       	icall
    91ca:	0e 94 d7 53 	call	0xa7ae	; 0xa7ae <VideoModeVsync>
	lds ZH,pre_vsync_user_callback+1
    91ce:	24 d0       	rcall	.+72     	; 0x9218 <process_music>
	cp  ZL,r1
    91d0:	11 24       	eor	r1, r1
	cpc ZH,r1
    91d2:	e0 91 33 0d 	lds	r30, 0x0D33
	breq .+2 
	icall
    91d6:	f0 91 34 0d 	lds	r31, 0x0D34
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    91da:	e1 15       	cp	r30, r1

	;process music (music, envelopes, etc)
	call process_music
    91dc:	f1 05       	cpc	r31, r1
    91de:	09 f0       	breq	.+2      	; 0x91e2 <no_render+0x66>
	clr r1
    91e0:	09 95       	icall

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    91e2:	bf 91       	pop	r27
    91e4:	af 91       	pop	r26
	lds ZH,post_vsync_user_callback+1
    91e6:	9f 91       	pop	r25
    91e8:	8f 91       	pop	r24
	cp  ZL,r1
    91ea:	7f 91       	pop	r23
	cpc ZH,r1
    91ec:	6f 91       	pop	r22
	breq .+2 
    91ee:	5f 91       	pop	r21
	icall
    91f0:	4f 91       	pop	r20
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    91f2:	3f 91       	pop	r19
	pop r26
    91f4:	2f 91       	pop	r18

000091f6 <sync_end>:
	pop r25
    91f6:	ef 91       	pop	r30
	pop r24
    91f8:	ef bf       	out	0x3f, r30	; 63
	pop r23
    91fa:	ff 91       	pop	r31
	pop r22
    91fc:	ef 91       	pop	r30
	pop r21
    91fe:	1f 90       	pop	r1
	pop r20
    9200:	0f 90       	pop	r0
	pop r19
    9202:	18 95       	reti

00009204 <hsync_pulse>:
	pop r18
    9204:	28 98       	cbi	0x05, 0	; 5
	
sync_end:	
	;restore flags
	pop ZL
    9206:	e2 e0       	ldi	r30, 0x02	; 2
	out _SFR_IO_ADDR(SREG),ZL
    9208:	00 c0       	rjmp	.+0      	; 0x920a <hsync_pulse+0x6>
	
	pop ZH
    920a:	0b d0       	rcall	.+22     	; 0x9222 <update_sound>
	pop ZL
    920c:	e0 91 2f 0d 	lds	r30, 0x0D2F
	pop r1
	pop r0
    9210:	ea 95       	dec	r30
	reti
    9212:	e0 93 2f 0d 	sts	0x0D2F, r30
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
	ldi ZL,2
    9216:	08 95       	ret

00009218 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    9218:	e0 91 60 0d 	lds	r30, 0x0D60
	sbrc ZL,0
    921c:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    921e:	29 c4       	rjmp	.+2130   	; 0x9a72 <ProcessMusic>
    9220:	08 95       	ret

00009222 <update_sound>:
#endif

	ret
    9222:	0f 93       	push	r16

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    9224:	1f 93       	push	r17
	push r17
    9226:	2f 93       	push	r18
	push r18
    9228:	cf 93       	push	r28
	push r28
    922a:	df 93       	push	r29
	push r29
    922c:	2e 2f       	mov	r18, r30

	mov r18,ZL
    922e:	00 91 62 0d 	lds	r16, 0x0D62

	;channel 1 
	lds r16,tr1_step_lo
    9232:	10 91 64 0d 	lds	r17, 0x0D64
	lds r17,tr1_pos_frac
    9236:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    9238:	00 91 63 0d 	lds	r16, 0x0D63
	lds r16,tr1_step_hi	
    923c:	e0 91 65 0d 	lds	r30, 0x0D65
	lds ZL,tr1_pos_lo
    9240:	f0 91 66 0d 	lds	r31, 0x0D66
	lds ZH,tr1_pos_hi 
    9244:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    9246:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    9248:	e0 93 65 0d 	sts	0x0D65, r30
	sts tr1_pos_lo,ZL
    924c:	10 93 64 0d 	sts	0x0D64, r17
	sts tr1_pos_frac,r17
    9250:	10 91 61 0d 	lds	r17, 0x0D61
	lds r17,tr1_vol
    9254:	01 03       	mulsu	r16, r17
	mulsu r16,r17;(sample*mixing vol)
    9256:	00 24       	eor	r0, r0
	clr r0
    9258:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend	
    925a:	c1 2d       	mov	r28, r1
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    925c:	d0 2d       	mov	r29, r0
	mov r29,r0	;set mix buffer msb	
    925e:	00 91 68 0d 	lds	r16, 0x0D68

;38
	
	;channel 2
	lds r16,tr2_step_lo
    9262:	10 91 6a 0d 	lds	r17, 0x0D6A
	lds r17,tr2_pos_frac
    9266:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    9268:	00 91 69 0d 	lds	r16, 0x0D69
	lds r16,tr2_step_hi	
    926c:	e0 91 6b 0d 	lds	r30, 0x0D6B
	lds ZL,tr2_pos_lo
    9270:	f0 91 6c 0d 	lds	r31, 0x0D6C
	lds ZH,tr2_pos_hi 
    9274:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    9276:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    9278:	e0 93 6b 0d 	sts	0x0D6B, r30
	sts tr2_pos_lo,ZL
    927c:	10 93 6a 0d 	sts	0x0D6A, r17
	sts tr2_pos_frac,r17
    9280:	10 91 67 0d 	lds	r17, 0x0D67
	lds r17,tr2_vol
    9284:	20 fd       	sbrc	r18, 0
	;clr r17
	;nop

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    9286:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    9288:	20 ff       	sbrs	r18, 0
	sbrs r18,0								
    928a:	00 c0       	rjmp	.+0      	; 0x928c <update_sound+0x6a>
	rjmp .
    928c:	01 03       	mulsu	r16, r17
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    928e:	00 24       	eor	r0, r0
	clr r0
    9290:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    9292:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    9294:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb		
    9296:	00 91 6e 0d 	lds	r16, 0x0D6E
;70
	
	;channel 3
	lds r16,tr3_step_lo
    929a:	10 91 70 0d 	lds	r17, 0x0D70
	lds r17,tr3_pos_frac
    929e:	10 0f       	add	r17, r16
	add	r17,r16				;add step to fractional part of sample pos
    92a0:	00 91 6f 0d 	lds	r16, 0x0D6F
	lds r16,tr3_step_hi	
    92a4:	e0 91 71 0d 	lds	r30, 0x0D71
	lds ZL,tr3_pos_lo
    92a8:	f0 91 72 0d 	lds	r31, 0x0D72
	lds ZH,tr3_pos_hi 
    92ac:	e0 1f       	adc	r30, r16
	adc ZL,r16				;add step to low byte of sample pos
    92ae:	04 91       	lpm	r16, Z+
	lpm	r16,Z				;load sample
    92b0:	e0 93 71 0d 	sts	0x0D71, r30
	sts tr3_pos_lo,ZL
    92b4:	10 93 70 0d 	sts	0x0D70, r17
	sts tr3_pos_frac,r17
    92b8:	10 91 6d 0d 	lds	r17, 0x0D6D
	lds r17,tr3_vol
    92bc:	01 03       	mulsu	r16, r17
	mulsu r16,r17			;(sample*mixing vol)
    92be:	00 24       	eor	r0, r0
	clr r0
    92c0:	00 08       	sbc	r0, r0
	sbc r0,r0				;sign extend
    92c2:	c1 0d       	add	r28, r1
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    92c4:	d0 1d       	adc	r29, r0
	adc r29,r0				;ajust mix buffer msb
    92c6:	00 91 75 0d 	lds	r16, 0x0D75
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    92ca:	10 91 76 0d 	lds	r17, 0x0D76
	lds r17,tr4_barrel_hi
    92ce:	e0 91 77 0d 	lds	r30, 0x0D77
	lds ZL,tr4_divider
    92d2:	ea 95       	dec	r30
	dec ZL	
    92d4:	92 f4       	brpl	.+36     	; 0x92fa <ch4_no_shift>
	brpl ch4_no_shift	
    92d6:	f0 91 74 0d 	lds	r31, 0x0D74

	lds ZH,tr4_params
    92da:	ef 2f       	mov	r30, r31
	mov ZL,ZH
    92dc:	e6 95       	lsr	r30
	lsr ZL 			;keep bits7:1
    92de:	00 2e       	mov	r0, r16

	mov r0,r16  ;copy barrel shifter
    92e0:	06 94       	lsr	r0
	lsr r0
    92e2:	00 26       	eor	r0, r16
	eor r0,r16  ;xor bit0 and bit1
    92e4:	00 fa       	bst	r0, 0
	bst r0,0
    92e6:	16 95       	lsr	r17
	lsr r17
    92e8:	07 95       	ror	r16
	ror r16
    92ea:	16 f9       	bld	r17, 6
	bld r17,6	;15 bits mode
    92ec:	f0 ff       	sbrs	r31, 0
	sbrs ZH,0
    92ee:	06 f9       	bld	r16, 6
	bld r16,6	;7 bits mode
    92f0:	00 93 75 0d 	sts	0x0D75, r16

	sts tr4_barrel_lo,r16
    92f4:	10 93 76 0d 	sts	0x0D76, r17
	sts tr4_barrel_hi,r17
    92f8:	03 c0       	rjmp	.+6      	; 0x9300 <ch4_end>

000092fa <ch4_no_shift>:

	rjmp ch4_end
    92fa:	16 e0       	ldi	r17, 0x06	; 6
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    92fc:	1a 95       	dec	r17
	dec r17
    92fe:	f1 f7       	brne	.-4      	; 0x92fc <ch4_no_shift+0x2>

00009300 <ch4_end>:
	brne .-4
    9300:	e0 93 77 0d 	sts	0x0D77, r30
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    9304:	21 fd       	sbrc	r18, 1
;126
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    9306:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    9308:	21 ff       	sbrs	r18, 1
	sbrs r18,1								
    930a:	00 c0       	rjmp	.+0      	; 0x930c <ch4_end+0xc>
	rjmp .
    930c:	10 e8       	ldi	r17, 0x80	; 128
	;*************************
	
	ldi r17,0x80 ;-128
    930e:	00 fd       	sbrc	r16, 0
	sbrc r16,0
    9310:	1f e7       	ldi	r17, 0x7F	; 127
	ldi r17,0x7f ;+127
    9312:	00 91 73 0d 	lds	r16, 0x0D73
	
	lds r16,tr4_vol
    9316:	10 03       	mulsu	r17, r16

	mulsu r17,r16;(sample*mixing vol)
    9318:	00 24       	eor	r0, r0
	clr r0
    931a:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    931c:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    931e:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb
    9320:	00 91 7c 0d 	lds	r16, 0x0D7C
;142

	;channel 5 PCM 

	;add fractional part
	lds r16,tr5_pos_frac
    9324:	10 91 7a 0d 	lds	r17, 0x0D7A
	lds r17,tr5_step_lo 
    9328:	01 0f       	add	r16, r17
	add r16,r17
    932a:	00 93 7c 0d 	sts	0x0D7C, r16
	sts tr5_pos_frac,r16
    932e:	e0 91 7d 0d 	lds	r30, 0x0D7D

	;add lo
	lds ZL,tr5_pos_lo
    9332:	10 91 7b 0d 	lds	r17, 0x0D7B
	lds r17,tr5_step_hi 
    9336:	e1 1f       	adc	r30, r17
	adc ZL,r17
    9338:	f0 91 7e 0d 	lds	r31, 0x0D7E

	;add hi
	lds ZH,tr5_pos_hi
    933c:	00 e0       	ldi	r16, 0x00	; 0
	ldi r16,0
    933e:	f0 1f       	adc	r31, r16
	adc ZH,r16
    9340:	00 90 81 0d 	lds	r0, 0x0D81

	lds r0,tr5_loop_end_lo
    9344:	10 90 82 0d 	lds	r1, 0x0D82
	lds r1,tr5_loop_end_hi
    9348:	00 91 7f 0d 	lds	r16, 0x0D7F

	lds r16,tr5_loop_start_lo
    934c:	10 91 80 0d 	lds	r17, 0x0D80
	lds r17,tr5_loop_start_hi	
    9350:	e0 15       	cp	r30, r0

	cp ZL,r0
    9352:	f1 05       	cpc	r31, r1
	cpc ZH,r1
    9354:	08 f0       	brcs	.+2      	; 0x9358 <ch4_end+0x58>
	brlo .+2
    9356:	f8 01       	movw	r30, r16
	movw ZL,r16
    9358:	e0 93 7d 0d 	sts	0x0D7D, r30

	sts tr5_pos_lo,ZL
    935c:	f0 93 7e 0d 	sts	0x0D7E, r31
	sts tr5_pos_hi,ZH
    9360:	04 91       	lpm	r16, Z+

	lpm	r16,Z	;load sample
    9362:	10 91 79 0d 	lds	r17, 0x0D79
	lds r17,tr5_vol
    9366:	01 03       	mulsu	r16, r17

	mulsu r16,r17;(sample*mixing vol)
    9368:	00 24       	eor	r0, r0
	clr r0
    936a:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    936c:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    936e:	d0 1d       	adc	r29, r0
	adc r29,r0	;adjust mix buffer msb	
    9370:	00 24       	eor	r0, r0
;186	
	
	;final processing

	;clip
	clr r0
    9372:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,128	;> 127?
    9374:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0	
    9376:	0c f0       	brlt	.+2      	; 0x937a <ch4_end+0x7a>
	brlt .+2
    9378:	cf e7       	ldi	r28, 0x7F	; 127
	ldi r28,127
    937a:	0a 94       	dec	r0
	
	dec r0
    937c:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,-128; <-128?
    937e:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0xff
    9380:	0c f4       	brge	.+2      	; 0x9384 <ch4_end+0x84>
	brge .+2
    9382:	c0 e8       	ldi	r28, 0x80	; 128
	ldi r28,-128
    9384:	c0 58       	subi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    9386:	c0 93 b3 00 	sts	0x00B3, r28
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    938a:	df 91       	pop	r29
	
	pop r29
    938c:	cf 91       	pop	r28
	pop r28
    938e:	2f 91       	pop	r18
	pop r18
    9390:	1f 91       	pop	r17
	pop r17
    9392:	0f 91       	pop	r16
	pop r16
    9394:	08 95       	ret

00009396 <SetMixerNote>:
	
	ret
    9396:	99 27       	eor	r25, r25
; r24: Channel
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
SetMixerNote:
	clr r25
    9398:	77 27       	eor	r23, r23
	clr r23
    939a:	83 30       	cpi	r24, 0x03	; 3
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    939c:	09 f4       	brne	.+2      	; 0x93a0 <set_note_waves>
		brne set_note_waves		
    939e:	08 95       	ret

000093a0 <set_note_waves>:
		ret
    93a0:	e8 e0       	ldi	r30, 0x08	; 8
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    93a2:	f0 ea       	ldi	r31, 0xA0	; 160
	ldi ZH,hi8(steptable)
    93a4:	66 0f       	add	r22, r22
	lsl r22
    93a6:	77 1f       	adc	r23, r23
	rol r23
    93a8:	e6 0f       	add	r30, r22
	add ZL,r22
    93aa:	f7 1f       	adc	r31, r23
	adc ZH,r23	
    93ac:	a5 91       	lpm	r26, Z+

	lpm r26,Z+
    93ae:	b4 91       	lpm	r27, Z+
	lpm r27,Z
    93b0:	e1 e6       	ldi	r30, 0x61	; 97

	ldi ZL,lo8(mixerStruct)
    93b2:	fd e0       	ldi	r31, 0x0D	; 13
	ldi ZH,hi8(mixerStruct)
    93b4:	26 e0       	ldi	r18, 0x06	; 6
	ldi r18,CHANNEL_STRUCT_SIZE
    93b6:	28 9f       	mul	r18, r24
	mul r18,r24
    93b8:	e0 0d       	add	r30, r0
	add ZL,r0
    93ba:	f1 1d       	adc	r31, r1
	adc ZH,r1
    93bc:	a1 83       	std	Z+1, r26	; 0x01
	
	std Z+step_lo,r26
    93be:	b2 83       	std	Z+2, r27	; 0x02
	std Z+step_hi,r27
    93c0:	11 24       	eor	r1, r1
	
	clr r1
    93c2:	08 95       	ret

000093c4 <SetMixerNoiseParams>:
	

	ret
    93c4:	90 91 74 0d 	lds	r25, 0x0D74
;(C-call compatible)
; r24: noise divider
;*****************
SetMixerNoiseParams:
	;preserve wave type (7/15 bit)
	lds r25,tr4_params
    93c8:	91 70       	andi	r25, 0x01	; 1
	andi r25,1
    93ca:	88 0f       	add	r24, r24
	lsl r24
    93cc:	89 2b       	or	r24, r25
	or r24,r25
    93ce:	80 93 74 0d 	sts	0x0D74, r24

	sts tr4_params,r24	
    93d2:	08 95       	ret

000093d4 <SetMixerWave>:
	ret
    93d4:	99 27       	eor	r25, r25
; r23:r22 Waves channels: patch (0x00-0xfd) 
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
SetMixerWave:
	clr r25
    93d6:	77 27       	eor	r23, r23
	clr r23
    93d8:	e1 e6       	ldi	r30, 0x61	; 97

	ldi ZL,lo8(mixerStruct)
    93da:	fd e0       	ldi	r31, 0x0D	; 13
	ldi ZH,hi8(mixerStruct)
    93dc:	26 e0       	ldi	r18, 0x06	; 6
	ldi r18,CHANNEL_STRUCT_SIZE
    93de:	28 9f       	mul	r18, r24
	mul r18,r24	
    93e0:	e0 0d       	add	r30, r0
	add ZL,r0
    93e2:	f1 1d       	adc	r31, r1
	adc ZH,r1
    93e4:	6e 3f       	cpi	r22, 0xFE	; 254

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    93e6:	31 f4       	brne	.+12     	; 0x93f4 <smw1>
	brne smw1
    93e8:	60 91 74 0d 	lds	r22, 0x0D74
	lds r22,tr4_params
    93ec:	6e 7f       	andi	r22, 0xFE	; 254
	andi r22,0xfe;
    93ee:	60 93 74 0d 	sts	0x0D74, r22
	sts tr4_params,r22
    93f2:	0b c0       	rjmp	.+22     	; 0x940a <esmw>

000093f4 <smw1>:
	rjmp esmw	
    93f4:	6f 3f       	cpi	r22, 0xFF	; 255
smw1:
	cpi r22,0xff	;15bit lfsr
    93f6:	31 f4       	brne	.+12     	; 0x9404 <smw2>
	brne smw2
    93f8:	60 91 74 0d 	lds	r22, 0x0D74
	lds r22,tr4_params
    93fc:	6e 6f       	ori	r22, 0xFE	; 254
	ori r22,0xfe;
    93fe:	60 93 74 0d 	sts	0x0D74, r22
	sts tr4_params,r22	
    9402:	03 c0       	rjmp	.+6      	; 0x940a <esmw>

00009404 <smw2>:
	rjmp esmw
    9404:	72 ea       	ldi	r23, 0xA2	; 162
smw2:
#endif

	ldi r23,hi8(waves)
    9406:	76 0f       	add	r23, r22
	add r23,r22
    9408:	75 83       	std	Z+5, r23	; 0x05

0000940a <esmw>:
	std Z+samplepos_hi,r23 ;store path No
    940a:	11 24       	eor	r1, r1

esmw:
	clr r1	
    940c:	08 95       	ret

0000940e <SetMixerVolume>:
	ret
    940e:	99 27       	eor	r25, r25
; (C-call compatible)
; r24 channel (0,1,2,3)
; r22 volume (0x00-0xff)
;***********************
SetMixerVolume:
	clr r25
    9410:	77 27       	eor	r23, r23
	clr r23
    9412:	e1 e6       	ldi	r30, 0x61	; 97

	ldi ZL,lo8(mixerStruct)
    9414:	fd e0       	ldi	r31, 0x0D	; 13
	ldi ZH,hi8(mixerStruct)
    9416:	26 e0       	ldi	r18, 0x06	; 6
	ldi r18,CHANNEL_STRUCT_SIZE
    9418:	28 9f       	mul	r18, r24
	mul r18,r24	
    941a:	e0 0d       	add	r30, r0
	add ZL,r0
    941c:	f1 1d       	adc	r31, r1
	adc ZH,r1
    941e:	60 83       	st	Z, r22
	std Z+vol,r22 ;store vol
    9420:	11 24       	eor	r1, r1

	clr r1	
    9422:	08 95       	ret

00009424 <CpuBufferWellAsm>:



.section .text
CpuBufferWellAsm:
mov ZL,r24;well pointer
    9424:	e8 2f       	mov	r30, r24
mov ZH,r25
    9426:	f9 2f       	mov	r31, r25
ldi XL,lo8(cpubuffer);cpu buffer
    9428:	a4 e8       	ldi	r26, 0x84	; 132
ldi XH,hi8(cpubuffer)
    942a:	bd e0       	ldi	r27, 0x0D	; 13
.rept 6*16
	ld r16,Z+
	st X+,r16
.endr
    942c:	01 91       	ld	r16, Z+
    942e:	0d 93       	st	X+, r16
    9430:	01 91       	ld	r16, Z+
    9432:	0d 93       	st	X+, r16
    9434:	01 91       	ld	r16, Z+
    9436:	0d 93       	st	X+, r16
    9438:	01 91       	ld	r16, Z+
    943a:	0d 93       	st	X+, r16
    943c:	01 91       	ld	r16, Z+
    943e:	0d 93       	st	X+, r16
    9440:	01 91       	ld	r16, Z+
    9442:	0d 93       	st	X+, r16
    9444:	01 91       	ld	r16, Z+
    9446:	0d 93       	st	X+, r16
    9448:	01 91       	ld	r16, Z+
    944a:	0d 93       	st	X+, r16
    944c:	01 91       	ld	r16, Z+
    944e:	0d 93       	st	X+, r16
    9450:	01 91       	ld	r16, Z+
    9452:	0d 93       	st	X+, r16
    9454:	01 91       	ld	r16, Z+
    9456:	0d 93       	st	X+, r16
    9458:	01 91       	ld	r16, Z+
    945a:	0d 93       	st	X+, r16
    945c:	01 91       	ld	r16, Z+
    945e:	0d 93       	st	X+, r16
    9460:	01 91       	ld	r16, Z+
    9462:	0d 93       	st	X+, r16
    9464:	01 91       	ld	r16, Z+
    9466:	0d 93       	st	X+, r16
    9468:	01 91       	ld	r16, Z+
    946a:	0d 93       	st	X+, r16
    946c:	01 91       	ld	r16, Z+
    946e:	0d 93       	st	X+, r16
    9470:	01 91       	ld	r16, Z+
    9472:	0d 93       	st	X+, r16
    9474:	01 91       	ld	r16, Z+
    9476:	0d 93       	st	X+, r16
    9478:	01 91       	ld	r16, Z+
    947a:	0d 93       	st	X+, r16
    947c:	01 91       	ld	r16, Z+
    947e:	0d 93       	st	X+, r16
    9480:	01 91       	ld	r16, Z+
    9482:	0d 93       	st	X+, r16
    9484:	01 91       	ld	r16, Z+
    9486:	0d 93       	st	X+, r16
    9488:	01 91       	ld	r16, Z+
    948a:	0d 93       	st	X+, r16
    948c:	01 91       	ld	r16, Z+
    948e:	0d 93       	st	X+, r16
    9490:	01 91       	ld	r16, Z+
    9492:	0d 93       	st	X+, r16
    9494:	01 91       	ld	r16, Z+
    9496:	0d 93       	st	X+, r16
    9498:	01 91       	ld	r16, Z+
    949a:	0d 93       	st	X+, r16
    949c:	01 91       	ld	r16, Z+
    949e:	0d 93       	st	X+, r16
    94a0:	01 91       	ld	r16, Z+
    94a2:	0d 93       	st	X+, r16
    94a4:	01 91       	ld	r16, Z+
    94a6:	0d 93       	st	X+, r16
    94a8:	01 91       	ld	r16, Z+
    94aa:	0d 93       	st	X+, r16
    94ac:	01 91       	ld	r16, Z+
    94ae:	0d 93       	st	X+, r16
    94b0:	01 91       	ld	r16, Z+
    94b2:	0d 93       	st	X+, r16
    94b4:	01 91       	ld	r16, Z+
    94b6:	0d 93       	st	X+, r16
    94b8:	01 91       	ld	r16, Z+
    94ba:	0d 93       	st	X+, r16
    94bc:	01 91       	ld	r16, Z+
    94be:	0d 93       	st	X+, r16
    94c0:	01 91       	ld	r16, Z+
    94c2:	0d 93       	st	X+, r16
    94c4:	01 91       	ld	r16, Z+
    94c6:	0d 93       	st	X+, r16
    94c8:	01 91       	ld	r16, Z+
    94ca:	0d 93       	st	X+, r16
    94cc:	01 91       	ld	r16, Z+
    94ce:	0d 93       	st	X+, r16
    94d0:	01 91       	ld	r16, Z+
    94d2:	0d 93       	st	X+, r16
    94d4:	01 91       	ld	r16, Z+
    94d6:	0d 93       	st	X+, r16
    94d8:	01 91       	ld	r16, Z+
    94da:	0d 93       	st	X+, r16
    94dc:	01 91       	ld	r16, Z+
    94de:	0d 93       	st	X+, r16
    94e0:	01 91       	ld	r16, Z+
    94e2:	0d 93       	st	X+, r16
    94e4:	01 91       	ld	r16, Z+
    94e6:	0d 93       	st	X+, r16
    94e8:	01 91       	ld	r16, Z+
    94ea:	0d 93       	st	X+, r16
    94ec:	01 91       	ld	r16, Z+
    94ee:	0d 93       	st	X+, r16
    94f0:	01 91       	ld	r16, Z+
    94f2:	0d 93       	st	X+, r16
    94f4:	01 91       	ld	r16, Z+
    94f6:	0d 93       	st	X+, r16
    94f8:	01 91       	ld	r16, Z+
    94fa:	0d 93       	st	X+, r16
    94fc:	01 91       	ld	r16, Z+
    94fe:	0d 93       	st	X+, r16
    9500:	01 91       	ld	r16, Z+
    9502:	0d 93       	st	X+, r16
    9504:	01 91       	ld	r16, Z+
    9506:	0d 93       	st	X+, r16
    9508:	01 91       	ld	r16, Z+
    950a:	0d 93       	st	X+, r16
    950c:	01 91       	ld	r16, Z+
    950e:	0d 93       	st	X+, r16
    9510:	01 91       	ld	r16, Z+
    9512:	0d 93       	st	X+, r16
    9514:	01 91       	ld	r16, Z+
    9516:	0d 93       	st	X+, r16
    9518:	01 91       	ld	r16, Z+
    951a:	0d 93       	st	X+, r16
    951c:	01 91       	ld	r16, Z+
    951e:	0d 93       	st	X+, r16
    9520:	01 91       	ld	r16, Z+
    9522:	0d 93       	st	X+, r16
    9524:	01 91       	ld	r16, Z+
    9526:	0d 93       	st	X+, r16
    9528:	01 91       	ld	r16, Z+
    952a:	0d 93       	st	X+, r16
    952c:	01 91       	ld	r16, Z+
    952e:	0d 93       	st	X+, r16
    9530:	01 91       	ld	r16, Z+
    9532:	0d 93       	st	X+, r16
    9534:	01 91       	ld	r16, Z+
    9536:	0d 93       	st	X+, r16
    9538:	01 91       	ld	r16, Z+
    953a:	0d 93       	st	X+, r16
    953c:	01 91       	ld	r16, Z+
    953e:	0d 93       	st	X+, r16
    9540:	01 91       	ld	r16, Z+
    9542:	0d 93       	st	X+, r16
    9544:	01 91       	ld	r16, Z+
    9546:	0d 93       	st	X+, r16
    9548:	01 91       	ld	r16, Z+
    954a:	0d 93       	st	X+, r16
    954c:	01 91       	ld	r16, Z+
    954e:	0d 93       	st	X+, r16
    9550:	01 91       	ld	r16, Z+
    9552:	0d 93       	st	X+, r16
    9554:	01 91       	ld	r16, Z+
    9556:	0d 93       	st	X+, r16
    9558:	01 91       	ld	r16, Z+
    955a:	0d 93       	st	X+, r16
    955c:	01 91       	ld	r16, Z+
    955e:	0d 93       	st	X+, r16
    9560:	01 91       	ld	r16, Z+
    9562:	0d 93       	st	X+, r16
    9564:	01 91       	ld	r16, Z+
    9566:	0d 93       	st	X+, r16
    9568:	01 91       	ld	r16, Z+
    956a:	0d 93       	st	X+, r16
    956c:	01 91       	ld	r16, Z+
    956e:	0d 93       	st	X+, r16
    9570:	01 91       	ld	r16, Z+
    9572:	0d 93       	st	X+, r16
    9574:	01 91       	ld	r16, Z+
    9576:	0d 93       	st	X+, r16
    9578:	01 91       	ld	r16, Z+
    957a:	0d 93       	st	X+, r16
    957c:	01 91       	ld	r16, Z+
    957e:	0d 93       	st	X+, r16
    9580:	01 91       	ld	r16, Z+
    9582:	0d 93       	st	X+, r16
    9584:	01 91       	ld	r16, Z+
    9586:	0d 93       	st	X+, r16
    9588:	01 91       	ld	r16, Z+
    958a:	0d 93       	st	X+, r16
    958c:	01 91       	ld	r16, Z+
    958e:	0d 93       	st	X+, r16
    9590:	01 91       	ld	r16, Z+
    9592:	0d 93       	st	X+, r16
    9594:	01 91       	ld	r16, Z+
    9596:	0d 93       	st	X+, r16
    9598:	01 91       	ld	r16, Z+
    959a:	0d 93       	st	X+, r16
    959c:	01 91       	ld	r16, Z+
    959e:	0d 93       	st	X+, r16
    95a0:	01 91       	ld	r16, Z+
    95a2:	0d 93       	st	X+, r16
    95a4:	01 91       	ld	r16, Z+
    95a6:	0d 93       	st	X+, r16
    95a8:	01 91       	ld	r16, Z+
    95aa:	0d 93       	st	X+, r16
ret
    95ac:	08 95       	ret

000095ae <CpuScoreAndGravityAsm>:



SKIPGRAVITY:
;*/
    95ae:	08 95       	ret

000095b0 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    95b0:	80 93 2c 0d 	sts	0x0D2C, r24
	sts tile_table_hi,r25	
    95b4:	90 93 2d 0d 	sts	0x0D2D, r25
	ret
    95b8:	08 95       	ret

000095ba <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,vsync_flag
    95ba:	80 91 30 0d 	lds	r24, 0x0D30
	ret
    95be:	08 95       	ret

000095c0 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	clr r1
    95c0:	11 24       	eor	r1, r1
	sts vsync_flag,r1
    95c2:	10 92 30 0d 	sts	0x0D30, r1
	ret
    95c6:	08 95       	ret

000095c8 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    95c8:	88 23       	and	r24, r24
	brne rj_p2
    95ca:	29 f4       	brne	.+10     	; 0x95d6 <rj_p2>
		
	lds r24,joypad1_status_lo
    95cc:	80 91 39 0d 	lds	r24, 0x0D39
	lds r25,joypad1_status_lo+1
    95d0:	90 91 3a 0d 	lds	r25, 0x0D3A
	ret
    95d4:	08 95       	ret

000095d6 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    95d6:	80 91 3d 0d 	lds	r24, 0x0D3D
	lds r25,joypad2_status_lo+1	
    95da:	90 91 3e 0d 	lds	r25, 0x0D3E

	ret
    95de:	08 95       	ret

000095e0 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    95e0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    95e2:	fe cf       	rjmp	.-4      	; 0x95e0 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    95e4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    95e6:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    95e8:	60 bd       	out	0x20, r22	; 32
   cli
    95ea:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    95ec:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    95ee:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    95f0:	78 94       	sei
   ret
    95f2:	08 95       	ret

000095f4 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    95f4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    95f6:	fe cf       	rjmp	.-4      	; 0x95f4 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    95f8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    95fa:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    95fc:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    95fe:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    9600:	80 b5       	in	r24, 0x20	; 32
   sei
    9602:	78 94       	sei
   ret
    9604:	08 95       	ret

00009606 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    9606:	12 9a       	sbi	0x02, 2	; 2
			WaitUs(1);
		}else{
			Wait200ns();
		}	
	#else
		Wait200ns();
    9608:	c8 95       	lpm
    960a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    960c:	12 98       	cbi	0x02, 2	; 2
    960e:	20 e0       	ldi	r18, 0x00	; 0
    9610:	30 e0       	ldi	r19, 0x00	; 0
    9612:	40 e0       	ldi	r20, 0x00	; 0
    9614:	80 e0       	ldi	r24, 0x00	; 0
    9616:	90 e0       	ldi	r25, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    9618:	96 95       	lsr	r25
    961a:	87 95       	ror	r24
		p2ButtonsLo>>=1;
    961c:	36 95       	lsr	r19
    961e:	27 95       	ror	r18
	
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    9620:	13 98       	cbi	0x02, 3	; 2
				WaitUs(5);
			}else{
				Wait200ns();
			}	
		#else
			Wait200ns();
    9622:	c8 95       	lpm
    9624:	c8 95       	lpm
		#endif
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    9626:	00 9b       	sbis	0x00, 0	; 0
    9628:	90 68       	ori	r25, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    962a:	01 9b       	sbis	0x00, 1	; 0
    962c:	30 68       	ori	r19, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    962e:	13 9a       	sbi	0x02, 3	; 2
				WaitUs(5);
			}else{
				Wait200ns();
			}	
		#else
			Wait200ns();
    9630:	c8 95       	lpm
    9632:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    9634:	4f 5f       	subi	r20, 0xFF	; 255
    9636:	40 31       	cpi	r20, 0x10	; 16
    9638:	79 f7       	brne	.-34     	; 0x9618 <ReadButtons+0x12>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    963a:	90 93 3a 0d 	sts	0x0D3A, r25
    963e:	80 93 39 0d 	sts	0x0D39, r24
		joypad2_status_lo=p2ButtonsLo;
    9642:	30 93 3e 0d 	sts	0x0D3E, r19
    9646:	20 93 3d 0d 	sts	0x0D3D, r18
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    964a:	80 91 39 0d 	lds	r24, 0x0D39
    964e:	90 91 3a 0d 	lds	r25, 0x0D3A
    9652:	0f 97       	sbiw	r24, 0x0f	; 15
    9654:	31 f0       	breq	.+12     	; 0x9662 <ReadButtons+0x5c>
    9656:	80 91 3d 0d 	lds	r24, 0x0D3D
    965a:	90 91 3e 0d 	lds	r25, 0x0D3E
    965e:	0f 97       	sbiw	r24, 0x0f	; 15
    9660:	61 f4       	brne	.+24     	; 0x967a <ReadButtons+0x74>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    9662:	28 e0       	ldi	r18, 0x08	; 8
    9664:	88 e1       	ldi	r24, 0x18	; 24
    9666:	90 e0       	ldi	r25, 0x00	; 0
    9668:	0f b6       	in	r0, 0x3f	; 63
    966a:	f8 94       	cli
    966c:	a8 95       	wdr
    966e:	80 93 60 00 	sts	0x0060, r24
    9672:	0f be       	out	0x3f, r0	; 63
    9674:	20 93 60 00 	sts	0x0060, r18
    9678:	ff cf       	rjmp	.-2      	; 0x9678 <ReadButtons+0x72>
    967a:	08 95       	ret

0000967c <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    967c:	10 92 e5 0d 	sts	0x0DE5, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    9680:	00 99       	sbic	0x00, 0	; 0
    9682:	03 c0       	rjmp	.+6      	; 0x968a <ReadControllers+0xe>
    9684:	81 e0       	ldi	r24, 0x01	; 1
    9686:	80 93 e5 0d 	sts	0x0DE5, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    968a:	01 99       	sbic	0x00, 1	; 0
    968c:	05 c0       	rjmp	.+10     	; 0x9698 <ReadControllers+0x1c>
    968e:	80 91 e5 0d 	lds	r24, 0x0DE5
    9692:	82 60       	ori	r24, 0x02	; 2
    9694:	80 93 e5 0d 	sts	0x0DE5, r24
			
	//read the standard buttons
	ReadButtons();
}
    9698:	b6 cf       	rjmp	.-148    	; 0x9606 <ReadButtons>

0000969a <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    969a:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    969c:	80 e0       	ldi	r24, 0x00	; 0
    969e:	90 e0       	ldi	r25, 0x00	; 0
    96a0:	a9 df       	rcall	.-174    	; 0x95f4 <ReadEeprom>
    96a2:	18 2f       	mov	r17, r24
    96a4:	81 e0       	ldi	r24, 0x01	; 1
    96a6:	90 e0       	ldi	r25, 0x00	; 0
    96a8:	a5 df       	rcall	.-182    	; 0x95f4 <ReadEeprom>
    96aa:	90 e0       	ldi	r25, 0x00	; 0
    96ac:	38 2f       	mov	r19, r24
    96ae:	20 e0       	ldi	r18, 0x00	; 0
    96b0:	21 0f       	add	r18, r17
    96b2:	31 1d       	adc	r19, r1
    96b4:	2a 55       	subi	r18, 0x5A	; 90
    96b6:	35 45       	sbci	r19, 0x55	; 85
    96b8:	09 f4       	brne	.+2      	; 0x96bc <isEepromFormatted+0x22>
    96ba:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    96bc:	89 2f       	mov	r24, r25
    96be:	1f 91       	pop	r17
    96c0:	08 95       	ret

000096c2 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    96c2:	cf 93       	push	r28
    96c4:	df 93       	push	r29
    96c6:	c0 e0       	ldi	r28, 0x00	; 0
    96c8:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    96ca:	fe 01       	movw	r30, r28
    96cc:	e0 59       	subi	r30, 0x90	; 144
    96ce:	ff 4f       	sbci	r31, 0xFF	; 255
    96d0:	e4 91       	lpm	r30, Z+
    96d2:	ce 01       	movw	r24, r28
    96d4:	6e 2f       	mov	r22, r30
    96d6:	84 df       	rcall	.-248    	; 0x95e0 <WriteEeprom>
    96d8:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    96da:	c0 32       	cpi	r28, 0x20	; 32
    96dc:	d1 05       	cpc	r29, r1
    96de:	a9 f7       	brne	.-22     	; 0x96ca <FormatEeprom+0x8>
    96e0:	c0 e2       	ldi	r28, 0x20	; 32
    96e2:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    96e4:	ce 01       	movw	r24, r28
    96e6:	6f ef       	ldi	r22, 0xFF	; 255
    96e8:	7b df       	rcall	.-266    	; 0x95e0 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    96ea:	ce 01       	movw	r24, r28
    96ec:	01 96       	adiw	r24, 0x01	; 1
    96ee:	6f ef       	ldi	r22, 0xFF	; 255
    96f0:	77 df       	rcall	.-274    	; 0x95e0 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    96f2:	a0 96       	adiw	r28, 0x20	; 32
    96f4:	88 e0       	ldi	r24, 0x08	; 8
    96f6:	c0 30       	cpi	r28, 0x00	; 0
    96f8:	d8 07       	cpc	r29, r24
    96fa:	a1 f7       	brne	.-24     	; 0x96e4 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    96fc:	df 91       	pop	r29
    96fe:	cf 91       	pop	r28
    9700:	08 95       	ret

00009702 <SetSongTempo>:

#if SONGTEMPO == 1
int songTempo;

void SetSongTempo(int t){
	songTempo = t;
    9702:	90 93 5e 0e 	sts	0x0E5E, r25
    9706:	80 93 5d 0e 	sts	0x0E5D, r24
}
    970a:	08 95       	ret

0000970c <PatchCommand00>:
#endif
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    970c:	fc 01       	movw	r30, r24
    970e:	45 87       	std	Z+13, r20	; 0x0d
}
    9710:	08 95       	ret

00009712 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    9712:	81 e0       	ldi	r24, 0x01	; 1
    9714:	91 e0       	ldi	r25, 0x01	; 1
    9716:	90 93 76 0d 	sts	0x0D76, r25
    971a:	80 93 75 0d 	sts	0x0D75, r24
		mixer.channels.type.noise.params=param;
    971e:	40 93 74 0d 	sts	0x0D74, r20
	#endif
}
    9722:	08 95       	ret

00009724 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    9724:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    9726:	80 81       	ld	r24, Z
    9728:	8f 75       	andi	r24, 0x5F	; 95
    972a:	80 83       	st	Z, r24
}
    972c:	08 95       	ret

0000972e <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    972e:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    9730:	80 81       	ld	r24, Z
    9732:	80 64       	ori	r24, 0x40	; 64
    9734:	80 83       	st	Z, r24
}
    9736:	08 95       	ret

00009738 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    9738:	fc 01       	movw	r30, r24
    973a:	44 87       	std	Z+12, r20	; 0x0c
}
    973c:	08 95       	ret

0000973e <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    973e:	fc 01       	movw	r30, r24
    9740:	47 83       	std	Z+7, r20	; 0x07
}
    9742:	08 95       	ret

00009744 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    9744:	fc 01       	movw	r30, r24
    9746:	40 87       	std	Z+8, r20	; 0x08
}
    9748:	08 95       	ret

0000974a <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    974a:	1f 93       	push	r17
    974c:	cf 93       	push	r28
    974e:	df 93       	push	r29
    9750:	ec 01       	movw	r28, r24
    9752:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    9754:	89 81       	ldd	r24, Y+1	; 0x01
    9756:	90 e0       	ldi	r25, 0x00	; 0
    9758:	fc 01       	movw	r30, r24
    975a:	ee 0f       	add	r30, r30
    975c:	ff 1f       	adc	r31, r31
    975e:	e8 5f       	subi	r30, 0xF8	; 248
    9760:	ff 45       	sbci	r31, 0x5F	; 95
    9762:	25 91       	lpm	r18, Z+
    9764:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    9766:	e4 2f       	mov	r30, r20
    9768:	ff 27       	eor	r31, r31
    976a:	e7 fd       	sbrc	r30, 7
    976c:	f0 95       	com	r31
    976e:	e8 0f       	add	r30, r24
    9770:	f9 1f       	adc	r31, r25
    9772:	ee 0f       	add	r30, r30
    9774:	ff 1f       	adc	r31, r31
    9776:	e8 5f       	subi	r30, 0xF8	; 248
    9778:	ff 45       	sbci	r31, 0x5F	; 95
    977a:	85 91       	lpm	r24, Z+
    977c:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    977e:	60 91 ed 0d 	lds	r22, 0x0DED
    9782:	82 1b       	sub	r24, r18
    9784:	93 0b       	sbc	r25, r19
    9786:	70 e0       	ldi	r23, 0x00	; 0
    9788:	0e 94 d6 73 	call	0xe7ac	; 0xe7ac <__divmodhi4>
    978c:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    978e:	61 15       	cp	r22, r1
    9790:	71 05       	cpc	r23, r1
    9792:	11 f4       	brne	.+4      	; 0x9798 <PatchCommand11+0x4e>
    9794:	21 e0       	ldi	r18, 0x01	; 1
    9796:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    9798:	81 2f       	mov	r24, r17
    979a:	90 e0       	ldi	r25, 0x00	; 0
    979c:	fc 01       	movw	r30, r24
    979e:	ee 0f       	add	r30, r30
    97a0:	ff 1f       	adc	r31, r31
    97a2:	e8 0f       	add	r30, r24
    97a4:	f9 1f       	adc	r31, r25
    97a6:	ee 0f       	add	r30, r30
    97a8:	ff 1f       	adc	r31, r31
    97aa:	ef 59       	subi	r30, 0x9F	; 159
    97ac:	f2 4f       	sbci	r31, 0xF2	; 242
    97ae:	81 81       	ldd	r24, Z+1	; 0x01
    97b0:	92 81       	ldd	r25, Z+2	; 0x02
    97b2:	82 0f       	add	r24, r18
    97b4:	93 1f       	adc	r25, r19
    97b6:	92 83       	std	Z+2, r25	; 0x02
    97b8:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    97ba:	3b 83       	std	Y+3, r19	; 0x03
    97bc:	2a 83       	std	Y+2, r18	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    97be:	88 81       	ld	r24, Y
    97c0:	88 60       	ori	r24, 0x08	; 8
    97c2:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    97c4:	89 81       	ldd	r24, Y+1	; 0x01
    97c6:	84 0f       	add	r24, r20
    97c8:	8c 83       	std	Y+4, r24	; 0x04
}
    97ca:	df 91       	pop	r29
    97cc:	cf 91       	pop	r28
    97ce:	1f 91       	pop	r17
    97d0:	08 95       	ret

000097d2 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    97d2:	40 93 ed 0d 	sts	0x0DED, r20
}
    97d6:	08 95       	ret

000097d8 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    97d8:	90 93 59 0e 	sts	0x0E59, r25
    97dc:	80 93 58 0e 	sts	0x0E58, r24

	masterVolume=DEFAULT_MASTER_VOL;
    97e0:	8f e6       	ldi	r24, 0x6F	; 111
    97e2:	80 93 5f 0e 	sts	0x0E5F, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    97e6:	10 92 e4 0d 	sts	0x0DE4, r1
    97ea:	e8 ee       	ldi	r30, 0xE8	; 232
    97ec:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    97ee:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    97f0:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    97f2:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    97f4:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    97f6:	13 86       	std	Z+11, r1	; 0x0b
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    97f8:	81 87       	std	Z+9, r24	; 0x09
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    97fa:	82 87       	std	Z+10, r24	; 0x0a
		tracks[t].patchNo=DEFAULT_PATCH;
    97fc:	16 86       	std	Z+14, r1	; 0x0e
		tracks[t].tremoloRate=24; //~6hz
    97fe:	20 87       	std	Z+8, r18	; 0x08
		tracks[t].slideSpeed=0x10;
    9800:	95 83       	std	Z+5, r25	; 0x05
    9802:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9804:	3e e0       	ldi	r19, 0x0E	; 14
    9806:	e6 35       	cpi	r30, 0x56	; 86
    9808:	f3 07       	cpc	r31, r19
    980a:	a1 f7       	brne	.-24     	; 0x97f4 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    980c:	08 95       	ret

0000980e <StartSong>:

void StartSong(const char *midiSong){
    980e:	9c 01       	movw	r18, r24
    9810:	e8 ee       	ldi	r30, 0xE8	; 232
    9812:	fd e0       	ldi	r31, 0x0D	; 13
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9814:	80 81       	ld	r24, Z
    9816:	8f 77       	andi	r24, 0x7F	; 127
    9818:	80 83       	st	Z, r24
    981a:	76 96       	adiw	r30, 0x16	; 22
	}

}

void StartSong(const char *midiSong){
	for(unsigned char t=0;t<CHANNELS;t++){
    981c:	8e e0       	ldi	r24, 0x0E	; 14
    981e:	e6 35       	cpi	r30, 0x56	; 86
    9820:	f8 07       	cpc	r31, r24
    9822:	c1 f7       	brne	.-16     	; 0x9814 <StartSong+0x6>
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
	}

	songPos=midiSong+1; //skip first delta-time
    9824:	c9 01       	movw	r24, r18
    9826:	01 96       	adiw	r24, 0x01	; 1
    9828:	90 93 63 0e 	sts	0x0E63, r25
    982c:	80 93 62 0e 	sts	0x0E62, r24
	songStart=midiSong+1;//skip first delta-time
    9830:	90 93 e7 0d 	sts	0x0DE7, r25
    9834:	80 93 e6 0d 	sts	0x0DE6, r24
	loopStart=midiSong+1;
    9838:	90 93 65 0e 	sts	0x0E65, r25
    983c:	80 93 64 0e 	sts	0x0E64, r24
	nextDeltaTime=0;
    9840:	10 92 61 0e 	sts	0x0E61, r1
    9844:	10 92 60 0e 	sts	0x0E60, r1
	currDeltaTime=0;
    9848:	10 92 57 0e 	sts	0x0E57, r1
    984c:	10 92 56 0e 	sts	0x0E56, r1
	lastStatus=0;
    9850:	10 92 5a 0e 	sts	0x0E5A, r1
	playSong=true;
    9854:	81 e0       	ldi	r24, 0x01	; 1
    9856:	80 93 e4 0d 	sts	0x0DE4, r24
	absoluteTime=0;
    985a:	10 92 5c 0e 	sts	0x0E5C, r1
    985e:	10 92 5b 0e 	sts	0x0E5B, r1

	
}
    9862:	08 95       	ret

00009864 <ResumeSong>:
	playSong=false;
}


void ResumeSong(){
	playSong=true;
    9864:	81 e0       	ldi	r24, 0x01	; 1
    9866:	80 93 e4 0d 	sts	0x0DE4, r24
}
    986a:	08 95       	ret

0000986c <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    986c:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    986e:	ed 91       	ld	r30, X+
    9870:	fc 91       	ld	r31, X
    9872:	11 97       	sbiw	r26, 0x01	; 1
    9874:	af 01       	movw	r20, r30
    9876:	4f 5f       	subi	r20, 0xFF	; 255
    9878:	5f 4f       	sbci	r21, 0xFF	; 255
    987a:	11 96       	adiw	r26, 0x01	; 1
    987c:	5c 93       	st	X, r21
    987e:	4e 93       	st	-X, r20
    9880:	e4 91       	lpm	r30, Z+
    9882:	2e 2f       	mov	r18, r30
    9884:	30 e0       	ldi	r19, 0x00	; 0
    9886:	e7 ff       	sbrs	r30, 7
    9888:	13 c0       	rjmp	.+38     	; 0x98b0 <ReadVarLen+0x44>
    {
       value &= 0x7F;
    988a:	2f 77       	andi	r18, 0x7F	; 127
    988c:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    988e:	36 95       	lsr	r19
    9890:	32 2f       	mov	r19, r18
    9892:	22 27       	eor	r18, r18
    9894:	37 95       	ror	r19
    9896:	27 95       	ror	r18
    9898:	fa 01       	movw	r30, r20
    989a:	4f 5f       	subi	r20, 0xFF	; 255
    989c:	5f 4f       	sbci	r21, 0xFF	; 255
    989e:	e4 91       	lpm	r30, Z+
    98a0:	8e 2f       	mov	r24, r30
    98a2:	8f 77       	andi	r24, 0x7F	; 127
    98a4:	28 0f       	add	r18, r24
    98a6:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    98a8:	e7 fd       	sbrc	r30, 7
    98aa:	f1 cf       	rjmp	.-30     	; 0x988e <ReadVarLen+0x22>
    98ac:	4d 93       	st	X+, r20
    98ae:	5c 93       	st	X, r21
    }


    return value;
}
    98b0:	c9 01       	movw	r24, r18
    98b2:	08 95       	ret

000098b4 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    98b4:	80 93 5f 0e 	sts	0x0E5F, r24
}
    98b8:	08 95       	ret

000098ba <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    98ba:	ff 92       	push	r15
    98bc:	0f 93       	push	r16
    98be:	1f 93       	push	r17
    98c0:	8c 01       	movw	r16, r24
    98c2:	86 2f       	mov	r24, r22
    98c4:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    98c6:	64 2f       	mov	r22, r20
    98c8:	66 dd       	rcall	.-1332   	; 0x9396 <SetMixerNote>
	track->note=param;
    98ca:	f8 01       	movw	r30, r16
    98cc:	f1 82       	std	Z+1, r15	; 0x01
}
    98ce:	1f 91       	pop	r17
    98d0:	0f 91       	pop	r16
    98d2:	ff 90       	pop	r15
    98d4:	08 95       	ret

000098d6 <PatchCommand04>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    98d6:	fc 01       	movw	r30, r24
    98d8:	86 2f       	mov	r24, r22
	track->note-=param;
    98da:	61 81       	ldd	r22, Z+1	; 0x01
    98dc:	64 1b       	sub	r22, r20
    98de:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
}
    98e0:	5a cd       	rjmp	.-1356   	; 0x9396 <SetMixerNote>

000098e2 <PatchCommand03>:
	SetMixerWave(trackNo,param);
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    98e2:	fc 01       	movw	r30, r24
    98e4:	86 2f       	mov	r24, r22
	track->note+=param;
    98e6:	91 81       	ldd	r25, Z+1	; 0x01
    98e8:	49 0f       	add	r20, r25
    98ea:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    98ec:	64 2f       	mov	r22, r20
}
    98ee:	53 cd       	rjmp	.-1370   	; 0x9396 <SetMixerNote>

000098f0 <TriggerCommon>:
}




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    98f0:	ef 92       	push	r14
    98f2:	ff 92       	push	r15
    98f4:	0f 93       	push	r16
    98f6:	1f 93       	push	r17
    98f8:	cf 93       	push	r28
    98fa:	df 93       	push	r29
    98fc:	18 2f       	mov	r17, r24
    98fe:	f6 2e       	mov	r15, r22
    9900:	02 2f       	mov	r16, r18
	struct TrackStruct* track=&tracks[channel];
    9902:	86 e1       	ldi	r24, 0x16	; 22
    9904:	18 9f       	mul	r17, r24
    9906:	e0 01       	movw	r28, r0
    9908:	11 24       	eor	r1, r1
    990a:	c8 51       	subi	r28, 0x18	; 24
    990c:	d2 4f       	sbci	r29, 0xF2	; 242
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    990e:	ee 24       	eor	r14, r14
    9910:	88 81       	ld	r24, Y
    9912:	87 ff       	sbrs	r24, 7
    9914:	02 c0       	rjmp	.+4      	; 0x991a <TriggerCommon+0x2a>
    9916:	ee 24       	eor	r14, r14
    9918:	e3 94       	inc	r14

	track->patchCurrDeltaTime=0;
    991a:	1a 8a       	std	Y+18, r1	; 0x12
	track->envelopeStep=0; 
    991c:	1d 86       	std	Y+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    991e:	9f ef       	ldi	r25, 0xFF	; 255
    9920:	9c 87       	std	Y+12, r25	; 0x0c
	track->noteVol=volume;
    9922:	4b 87       	std	Y+11, r20	; 0x0b
	track->patchPlayingTime=0;
    9924:	1b 8a       	std	Y+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    9926:	88 81       	ld	r24, Y
    9928:	80 62       	ori	r24, 0x20	; 32
    992a:	87 7b       	andi	r24, 0xB7	; 183
    992c:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    992e:	1f 82       	std	Y+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9930:	99 87       	std	Y+9, r25	; 0x09
	track->note=note;
    9932:	09 83       	std	Y+1, r16	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    9934:	13 30       	cpi	r17, 0x03	; 3
    9936:	69 f4       	brne	.+26     	; 0x9952 <TriggerCommon+0x62>
			//noise channel		
			if(!isFx) patch=note;			
    9938:	ee 20       	and	r14, r14
    993a:	09 f4       	brne	.+2      	; 0x993e <TriggerCommon+0x4e>
    993c:	f0 2e       	mov	r15, r16
			mixer.channels.type.noise.barrel=0x0101;				
    993e:	81 e0       	ldi	r24, 0x01	; 1
    9940:	91 e0       	ldi	r25, 0x01	; 1
    9942:	90 93 76 0d 	sts	0x0D76, r25
    9946:	80 93 75 0d 	sts	0x0D75, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    994a:	81 e0       	ldi	r24, 0x01	; 1
    994c:	80 93 74 0d 	sts	0x0D74, r24
    9950:	32 c0       	rjmp	.+100    	; 0x99b6 <TriggerCommon+0xc6>
		
		}else if(channel==4){
    9952:	14 30       	cpi	r17, 0x04	; 4
    9954:	51 f5       	brne	.+84     	; 0x99aa <TriggerCommon+0xba>

			//PCM channel					
			mixer.channels.type.pcm.positionFrac=0;
    9956:	10 92 7c 0d 	sts	0x0D7C, r1
			const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    995a:	89 e0       	ldi	r24, 0x09	; 9
    995c:	f8 9e       	mul	r15, r24
    995e:	c0 01       	movw	r24, r0
    9960:	11 24       	eor	r1, r1
    9962:	20 91 58 0e 	lds	r18, 0x0E58
    9966:	30 91 59 0e 	lds	r19, 0x0E59
    996a:	28 0f       	add	r18, r24
    996c:	39 1f       	adc	r19, r25
    996e:	f9 01       	movw	r30, r18
    9970:	31 96       	adiw	r30, 0x01	; 1
    9972:	45 91       	lpm	r20, Z+
    9974:	54 91       	lpm	r21, Z+
			mixer.channels.type.pcm.position=pos;
    9976:	50 93 7e 0d 	sts	0x0D7E, r21
    997a:	40 93 7d 0d 	sts	0x0D7D, r20
			mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
    997e:	f9 01       	movw	r30, r18
    9980:	35 96       	adiw	r30, 0x05	; 5
    9982:	85 91       	lpm	r24, Z+
    9984:	94 91       	lpm	r25, Z+
    9986:	84 0f       	add	r24, r20
    9988:	95 1f       	adc	r25, r21
    998a:	90 93 80 0d 	sts	0x0D80, r25
    998e:	80 93 7f 0d 	sts	0x0D7F, r24
			mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    9992:	f9 01       	movw	r30, r18
    9994:	37 96       	adiw	r30, 0x07	; 7
    9996:	85 91       	lpm	r24, Z+
    9998:	94 91       	lpm	r25, Z+
    999a:	48 0f       	add	r20, r24
    999c:	59 1f       	adc	r21, r25
    999e:	50 93 82 0d 	sts	0x0D82, r21
    99a2:	40 93 81 0d 	sts	0x0D81, r20
			SetMixerNote(channel,note);
    99a6:	84 e0       	ldi	r24, 0x04	; 4
    99a8:	04 c0       	rjmp	.+8      	; 0x99b2 <TriggerCommon+0xc2>
	
		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    99aa:	81 2f       	mov	r24, r17
    99ac:	60 e0       	ldi	r22, 0x00	; 0
    99ae:	12 dd       	rcall	.-1500   	; 0x93d4 <SetMixerWave>
			SetMixerNote(channel,note);
    99b0:	81 2f       	mov	r24, r17
    99b2:	60 2f       	mov	r22, r16
    99b4:	f0 dc       	rcall	.-1568   	; 0x9396 <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    99b6:	ee 20       	and	r14, r14
    99b8:	11 f0       	breq	.+4      	; 0x99be <TriggerCommon+0xce>
		track->fxPatchNo=patch;
    99ba:	ff 86       	std	Y+15, r15	; 0x0f
    99bc:	01 c0       	rjmp	.+2      	; 0x99c0 <TriggerCommon+0xd0>
	}else{
		track->patchNo=patch;	
    99be:	fe 86       	std	Y+14, r15	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    99c0:	89 e0       	ldi	r24, 0x09	; 9
    99c2:	f8 9e       	mul	r15, r24
    99c4:	c0 01       	movw	r24, r0
    99c6:	11 24       	eor	r1, r1
    99c8:	e0 91 58 0e 	lds	r30, 0x0E58
    99cc:	f0 91 59 0e 	lds	r31, 0x0E59
    99d0:	e8 0f       	add	r30, r24
    99d2:	f9 1f       	adc	r31, r25
    99d4:	33 96       	adiw	r30, 0x03	; 3
    99d6:	25 91       	lpm	r18, Z+
    99d8:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    99da:	21 15       	cp	r18, r1
    99dc:	31 05       	cpc	r19, r1
    99de:	19 f4       	brne	.+6      	; 0x99e6 <TriggerCommon+0xf6>
		track->patchCommandStreamPos=NULL;
    99e0:	1d 8a       	std	Y+21, r1	; 0x15
    99e2:	1c 8a       	std	Y+20, r1	; 0x14
    99e4:	07 c0       	rjmp	.+14     	; 0x99f4 <TriggerCommon+0x104>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    99e6:	f9 01       	movw	r30, r18
    99e8:	84 91       	lpm	r24, Z+
    99ea:	89 8b       	std	Y+17, r24	; 0x11
		track->patchCommandStreamPos=pos;
    99ec:	2f 5f       	subi	r18, 0xFF	; 255
    99ee:	3f 4f       	sbci	r19, 0xFF	; 255
    99f0:	3d 8b       	std	Y+21, r19	; 0x15
    99f2:	2c 8b       	std	Y+20, r18	; 0x14
	}

}
    99f4:	cd b7       	in	r28, 0x3d	; 61
    99f6:	de b7       	in	r29, 0x3e	; 62
    99f8:	e6 e0       	ldi	r30, 0x06	; 6
    99fa:	0c 94 33 74 	jmp	0xe866	; 0xe866 <__epilogue_restores__+0x18>

000099fe <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    99fe:	58 2f       	mov	r21, r24
    9a00:	74 2f       	mov	r23, r20

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    9a02:	a8 2f       	mov	r26, r24
    9a04:	b0 e0       	ldi	r27, 0x00	; 0
    9a06:	86 e1       	ldi	r24, 0x16	; 22
    9a08:	90 e0       	ldi	r25, 0x00	; 0
    9a0a:	a8 9f       	mul	r26, r24
    9a0c:	f0 01       	movw	r30, r0
    9a0e:	a9 9f       	mul	r26, r25
    9a10:	f0 0d       	add	r31, r0
    9a12:	b8 9f       	mul	r27, r24
    9a14:	f0 0d       	add	r31, r0
    9a16:	11 24       	eor	r1, r1
    9a18:	e8 51       	subi	r30, 0x18	; 24
    9a1a:	f2 4f       	sbci	r31, 0xF2	; 242
    9a1c:	30 81       	ld	r19, Z
    9a1e:	35 ff       	sbrs	r19, 5
    9a20:	02 c0       	rjmp	.+4      	; 0x9a26 <TriggerNote+0x28>
    9a22:	37 fd       	sbrc	r19, 7
    9a24:	25 c0       	rjmp	.+74     	; 0x9a70 <TriggerNote+0x72>
			
		if(volume==0){ //note-off received
    9a26:	22 23       	and	r18, r18
    9a28:	91 f4       	brne	.+36     	; 0x9a4e <TriggerNote+0x50>
			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    9a2a:	86 e1       	ldi	r24, 0x16	; 22
    9a2c:	90 e0       	ldi	r25, 0x00	; 0
    9a2e:	a8 9f       	mul	r26, r24
    9a30:	f0 01       	movw	r30, r0
    9a32:	a9 9f       	mul	r26, r25
    9a34:	f0 0d       	add	r31, r0
    9a36:	b8 9f       	mul	r27, r24
    9a38:	f0 0d       	add	r31, r0
    9a3a:	11 24       	eor	r1, r1
    9a3c:	e8 51       	subi	r30, 0x18	; 24
    9a3e:	f2 4f       	sbci	r31, 0xF2	; 242
    9a40:	3f 7b       	andi	r19, 0xBF	; 191
    9a42:	30 83       	st	Z, r19
			
			//cut note if there's no envelope
			if(tracks[channel].envelopeStep==0){
    9a44:	85 85       	ldd	r24, Z+13	; 0x0d
    9a46:	88 23       	and	r24, r24
    9a48:	99 f4       	brne	.+38     	; 0x9a70 <TriggerNote+0x72>
				tracks[channel].noteVol=0;	
    9a4a:	13 86       	std	Z+11, r1	; 0x0b
    9a4c:	08 95       	ret
			}
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9a4e:	86 e1       	ldi	r24, 0x16	; 22
    9a50:	90 e0       	ldi	r25, 0x00	; 0
    9a52:	a8 9f       	mul	r26, r24
    9a54:	f0 01       	movw	r30, r0
    9a56:	a9 9f       	mul	r26, r25
    9a58:	f0 0d       	add	r31, r0
    9a5a:	b8 9f       	mul	r27, r24
    9a5c:	f0 0d       	add	r31, r0
    9a5e:	11 24       	eor	r1, r1
    9a60:	e8 51       	subi	r30, 0x18	; 24
    9a62:	f2 4f       	sbci	r31, 0xF2	; 242
    9a64:	3f 77       	andi	r19, 0x7F	; 127
    9a66:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    9a68:	85 2f       	mov	r24, r21
    9a6a:	42 2f       	mov	r20, r18
    9a6c:	27 2f       	mov	r18, r23
    9a6e:	40 cf       	rjmp	.-384    	; 0x98f0 <TriggerCommon>
    9a70:	08 95       	ret

00009a72 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    9a72:	af 92       	push	r10
    9a74:	bf 92       	push	r11
    9a76:	df 92       	push	r13
    9a78:	ef 92       	push	r14
    9a7a:	ff 92       	push	r15
    9a7c:	0f 93       	push	r16
    9a7e:	1f 93       	push	r17
    9a80:	cf 93       	push	r28
    9a82:	df 93       	push	r29
    9a84:	a8 ee       	ldi	r26, 0xE8	; 232
    9a86:	bd e0       	ldi	r27, 0x0D	; 13
    9a88:	c2 e6       	ldi	r28, 0x62	; 98
    9a8a:	dd e0       	ldi	r29, 0x0D	; 13
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    9a8c:	1d 96       	adiw	r26, 0x0d	; 13
    9a8e:	8c 91       	ld	r24, X
    9a90:	1d 97       	sbiw	r26, 0x0d	; 13
    9a92:	88 23       	and	r24, r24
    9a94:	b9 f0       	breq	.+46     	; 0x9ac4 <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;		
    9a96:	28 2f       	mov	r18, r24
    9a98:	33 27       	eor	r19, r19
    9a9a:	27 fd       	sbrc	r18, 7
    9a9c:	30 95       	com	r19
    9a9e:	1c 96       	adiw	r26, 0x0c	; 12
    9aa0:	8c 91       	ld	r24, X
    9aa2:	1c 97       	sbiw	r26, 0x0c	; 12
    9aa4:	28 0f       	add	r18, r24
    9aa6:	31 1d       	adc	r19, r1
    9aa8:	2f 3f       	cpi	r18, 0xFF	; 255
    9aaa:	31 05       	cpc	r19, r1
    9aac:	19 f0       	breq	.+6      	; 0x9ab4 <ProcessMusic+0x42>
    9aae:	14 f0       	brlt	.+4      	; 0x9ab4 <ProcessMusic+0x42>
    9ab0:	2f ef       	ldi	r18, 0xFF	; 255
    9ab2:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9ab4:	c9 01       	movw	r24, r18
    9ab6:	37 ff       	sbrs	r19, 7
    9ab8:	02 c0       	rjmp	.+4      	; 0x9abe <ProcessMusic+0x4c>
    9aba:	80 e0       	ldi	r24, 0x00	; 0
    9abc:	90 e0       	ldi	r25, 0x00	; 0
    9abe:	1c 96       	adiw	r26, 0x0c	; 12
    9ac0:	8c 93       	st	X, r24
    9ac2:	1c 97       	sbiw	r26, 0x0c	; 12
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    9ac4:	8c 91       	ld	r24, X
    9ac6:	83 ff       	sbrs	r24, 3
    9ac8:	26 c0       	rjmp	.+76     	; 0x9b16 <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9aca:	12 96       	adiw	r26, 0x02	; 2
    9acc:	4d 91       	ld	r20, X+
    9ace:	5c 91       	ld	r21, X
    9ad0:	13 97       	sbiw	r26, 0x03	; 3
    9ad2:	28 81       	ld	r18, Y
    9ad4:	39 81       	ldd	r19, Y+1	; 0x01
    9ad6:	24 0f       	add	r18, r20
    9ad8:	35 1f       	adc	r19, r21
    9ada:	39 83       	std	Y+1, r19	; 0x01
    9adc:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9ade:	14 96       	adiw	r26, 0x04	; 4
    9ae0:	8c 91       	ld	r24, X
    9ae2:	14 97       	sbiw	r26, 0x04	; 4
    9ae4:	e8 2f       	mov	r30, r24
    9ae6:	f0 e0       	ldi	r31, 0x00	; 0
    9ae8:	ee 0f       	add	r30, r30
    9aea:	ff 1f       	adc	r31, r31
    9aec:	e8 5f       	subi	r30, 0xF8	; 248
    9aee:	ff 45       	sbci	r31, 0x5F	; 95
    9af0:	85 91       	lpm	r24, Z+
    9af2:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    9af4:	14 16       	cp	r1, r20
    9af6:	15 06       	cpc	r1, r21
    9af8:	24 f4       	brge	.+8      	; 0x9b02 <ProcessMusic+0x90>
    9afa:	28 17       	cp	r18, r24
    9afc:	39 07       	cpc	r19, r25
    9afe:	30 f4       	brcc	.+12     	; 0x9b0c <ProcessMusic+0x9a>
    9b00:	0a c0       	rjmp	.+20     	; 0x9b16 <ProcessMusic+0xa4>
    9b02:	45 2b       	or	r20, r21
    9b04:	41 f0       	breq	.+16     	; 0x9b16 <ProcessMusic+0xa4>
    9b06:	82 17       	cp	r24, r18
    9b08:	93 07       	cpc	r25, r19
    9b0a:	28 f0       	brcs	.+10     	; 0x9b16 <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    9b0c:	99 83       	std	Y+1, r25	; 0x01
    9b0e:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9b10:	8c 91       	ld	r24, X
    9b12:	87 7f       	andi	r24, 0xF7	; 247
    9b14:	8c 93       	st	X, r24
    9b16:	56 96       	adiw	r26, 0x16	; 22
    9b18:	26 96       	adiw	r28, 0x06	; 6
	unsigned int uVol,tVol;	
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9b1a:	4e e0       	ldi	r20, 0x0E	; 14
    9b1c:	a6 35       	cpi	r26, 0x56	; 86
    9b1e:	b4 07       	cpc	r27, r20
    9b20:	09 f0       	breq	.+2      	; 0x9b24 <ProcessMusic+0xb2>
    9b22:	b4 cf       	rjmp	.-152    	; 0x9a8c <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    9b24:	80 91 e4 0d 	lds	r24, 0x0DE4
    9b28:	88 23       	and	r24, r24
    9b2a:	09 f0       	breq	.+2      	; 0x9b2e <ProcessMusic+0xbc>
    9b2c:	1e c1       	rjmp	.+572    	; 0x9d6a <ProcessMusic+0x2f8>
    9b2e:	3a c1       	rjmp	.+628    	; 0x9da4 <ProcessMusic+0x332>
	
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){

			c1=pgm_read_byte(songPos++);
    9b30:	e0 91 62 0e 	lds	r30, 0x0E62
    9b34:	f0 91 63 0e 	lds	r31, 0x0E63
    9b38:	cf 01       	movw	r24, r30
    9b3a:	01 96       	adiw	r24, 0x01	; 1
    9b3c:	90 93 63 0e 	sts	0x0E63, r25
    9b40:	80 93 62 0e 	sts	0x0E62, r24
    9b44:	44 91       	lpm	r20, Z+
			
			if(c1==0xff){
    9b46:	4f 3f       	cpi	r20, 0xFF	; 255
    9b48:	69 f5       	brne	.+90     	; 0x9ba4 <ProcessMusic+0x132>
				//META data type event
				c1=pgm_read_byte(songPos++);
    9b4a:	ac 01       	movw	r20, r24
    9b4c:	4f 5f       	subi	r20, 0xFF	; 255
    9b4e:	5f 4f       	sbci	r21, 0xFF	; 255
    9b50:	50 93 63 0e 	sts	0x0E63, r21
    9b54:	40 93 62 0e 	sts	0x0E62, r20
    9b58:	fc 01       	movw	r30, r24
    9b5a:	84 91       	lpm	r24, Z+

				
				if(c1==0x2f){ //end of song
    9b5c:	8f 32       	cpi	r24, 0x2F	; 47
    9b5e:	19 f4       	brne	.+6      	; 0x9b66 <ProcessMusic+0xf4>
					playSong=false;
    9b60:	10 92 e4 0d 	sts	0x0DE4, r1
    9b64:	10 c1       	rjmp	.+544    	; 0x9d86 <ProcessMusic+0x314>
					break;	
				}else if(c1==0x6){ //marker
    9b66:	86 30       	cpi	r24, 0x06	; 6
    9b68:	09 f0       	breq	.+2      	; 0x9b6c <ProcessMusic+0xfa>
    9b6a:	ad c0       	rjmp	.+346    	; 0x9cc6 <ProcessMusic+0x254>
					c1=pgm_read_byte(songPos++); //read len
    9b6c:	fa 01       	movw	r30, r20
    9b6e:	31 96       	adiw	r30, 0x01	; 1
					c2=pgm_read_byte(songPos++); //read data
    9b70:	cf 01       	movw	r24, r30
    9b72:	01 96       	adiw	r24, 0x01	; 1
    9b74:	90 93 63 0e 	sts	0x0E63, r25
    9b78:	80 93 62 0e 	sts	0x0E62, r24
    9b7c:	e4 91       	lpm	r30, Z+
					if(c2=='S'){ //loop start
    9b7e:	e3 35       	cpi	r30, 0x53	; 83
    9b80:	29 f4       	brne	.+10     	; 0x9b8c <ProcessMusic+0x11a>
						loopStart=songPos;
    9b82:	90 93 65 0e 	sts	0x0E65, r25
    9b86:	80 93 64 0e 	sts	0x0E64, r24
    9b8a:	9d c0       	rjmp	.+314    	; 0x9cc6 <ProcessMusic+0x254>
					}else if(c2=='E'){//loop end
    9b8c:	e5 34       	cpi	r30, 0x45	; 69
    9b8e:	09 f0       	breq	.+2      	; 0x9b92 <ProcessMusic+0x120>
    9b90:	9a c0       	rjmp	.+308    	; 0x9cc6 <ProcessMusic+0x254>
						songPos=loopStart;
    9b92:	80 91 64 0e 	lds	r24, 0x0E64
    9b96:	90 91 65 0e 	lds	r25, 0x0E65
    9b9a:	90 93 63 0e 	sts	0x0E63, r25
    9b9e:	80 93 62 0e 	sts	0x0E62, r24
    9ba2:	91 c0       	rjmp	.+290    	; 0x9cc6 <ProcessMusic+0x254>
				}
				

			}else{

				if(c1&0x80) lastStatus=c1;					
    9ba4:	47 ff       	sbrs	r20, 7
    9ba6:	02 c0       	rjmp	.+4      	; 0x9bac <ProcessMusic+0x13a>
    9ba8:	40 93 5a 0e 	sts	0x0E5A, r20
				channel=lastStatus&0x0f;
    9bac:	20 91 5a 0e 	lds	r18, 0x0E5A
    9bb0:	32 2f       	mov	r19, r18
    9bb2:	3f 70       	andi	r19, 0x0F	; 15
				
				//get next data byte
				//Note: maybe we should not advance the cursor
				//in case we receive an unsupported command				
				if(c1&0x80) c1=pgm_read_byte(songPos++); 
    9bb4:	47 ff       	sbrs	r20, 7
    9bb6:	08 c0       	rjmp	.+16     	; 0x9bc8 <ProcessMusic+0x156>
    9bb8:	01 96       	adiw	r24, 0x01	; 1
    9bba:	90 93 63 0e 	sts	0x0E63, r25
    9bbe:	80 93 62 0e 	sts	0x0E62, r24
    9bc2:	01 97       	sbiw	r24, 0x01	; 1
    9bc4:	fc 01       	movw	r30, r24
    9bc6:	44 91       	lpm	r20, Z+

				switch(lastStatus&0xf0){
    9bc8:	82 2f       	mov	r24, r18
    9bca:	90 e0       	ldi	r25, 0x00	; 0
    9bcc:	80 7f       	andi	r24, 0xF0	; 240
    9bce:	90 70       	andi	r25, 0x00	; 0
    9bd0:	80 3b       	cpi	r24, 0xB0	; 176
    9bd2:	91 05       	cpc	r25, r1
    9bd4:	09 f1       	breq	.+66     	; 0x9c18 <ProcessMusic+0x1a6>
    9bd6:	80 3c       	cpi	r24, 0xC0	; 192
    9bd8:	91 05       	cpc	r25, r1
    9bda:	09 f4       	brne	.+2      	; 0x9bde <ProcessMusic+0x16c>
    9bdc:	68 c0       	rjmp	.+208    	; 0x9cae <ProcessMusic+0x23c>
    9bde:	80 39       	cpi	r24, 0x90	; 144
    9be0:	91 05       	cpc	r25, r1
    9be2:	09 f0       	breq	.+2      	; 0x9be6 <ProcessMusic+0x174>
    9be4:	70 c0       	rjmp	.+224    	; 0x9cc6 <ProcessMusic+0x254>

					//note-on
					case 0x90:
						//c1 = note						
						c2=pgm_read_byte(songPos++)<<1; //get volume
    9be6:	80 91 62 0e 	lds	r24, 0x0E62
    9bea:	90 91 63 0e 	lds	r25, 0x0E63
    9bee:	01 96       	adiw	r24, 0x01	; 1
    9bf0:	90 93 63 0e 	sts	0x0E63, r25
    9bf4:	80 93 62 0e 	sts	0x0E62, r24
					c2 = 127;
						if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
							TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    9bf8:	83 2f       	mov	r24, r19
    9bfa:	90 e0       	ldi	r25, 0x00	; 0
    9bfc:	8c 9f       	mul	r24, r28
    9bfe:	f0 01       	movw	r30, r0
    9c00:	8d 9f       	mul	r24, r29
    9c02:	f0 0d       	add	r31, r0
    9c04:	9c 9f       	mul	r25, r28
    9c06:	f0 0d       	add	r31, r0
    9c08:	11 24       	eor	r1, r1
    9c0a:	e8 51       	subi	r30, 0x18	; 24
    9c0c:	f2 4f       	sbci	r31, 0xF2	; 242
    9c0e:	83 2f       	mov	r24, r19
    9c10:	66 85       	ldd	r22, Z+14	; 0x0e
    9c12:	2f e7       	ldi	r18, 0x7F	; 127
    9c14:	f4 de       	rcall	.-536    	; 0x99fe <TriggerNote>
    9c16:	57 c0       	rjmp	.+174    	; 0x9cc6 <ProcessMusic+0x254>
						break;

					//controllers
					case 0xb0:
						///c1 = controller #
						c2=pgm_read_byte(songPos++); //get controller value
    9c18:	e0 91 62 0e 	lds	r30, 0x0E62
    9c1c:	f0 91 63 0e 	lds	r31, 0x0E63
    9c20:	31 96       	adiw	r30, 0x01	; 1
    9c22:	f0 93 63 0e 	sts	0x0E63, r31
    9c26:	e0 93 62 0e 	sts	0x0E62, r30
    9c2a:	31 97       	sbiw	r30, 0x01	; 1
    9c2c:	24 91       	lpm	r18, Z+
						
						if(c1==CONTROLER_VOL){
    9c2e:	47 30       	cpi	r20, 0x07	; 7
    9c30:	71 f4       	brne	.+28     	; 0x9c4e <ProcessMusic+0x1dc>
							tracks[channel].trackVol=c2<<1;
    9c32:	83 2f       	mov	r24, r19
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	8c 9f       	mul	r24, r28
    9c38:	f0 01       	movw	r30, r0
    9c3a:	8d 9f       	mul	r24, r29
    9c3c:	f0 0d       	add	r31, r0
    9c3e:	9c 9f       	mul	r25, r28
    9c40:	f0 0d       	add	r31, r0
    9c42:	11 24       	eor	r1, r1
    9c44:	e8 51       	subi	r30, 0x18	; 24
    9c46:	f2 4f       	sbci	r31, 0xF2	; 242
    9c48:	22 0f       	add	r18, r18
    9c4a:	22 87       	std	Z+10, r18	; 0x0a
    9c4c:	3c c0       	rjmp	.+120    	; 0x9cc6 <ProcessMusic+0x254>
						}else if(c1==CONTROLER_EXPRESSION){
    9c4e:	4b 30       	cpi	r20, 0x0B	; 11
    9c50:	71 f4       	brne	.+28     	; 0x9c6e <ProcessMusic+0x1fc>
							tracks[channel].expressionVol=c2<<1;
    9c52:	83 2f       	mov	r24, r19
    9c54:	90 e0       	ldi	r25, 0x00	; 0
    9c56:	8c 9f       	mul	r24, r28
    9c58:	f0 01       	movw	r30, r0
    9c5a:	8d 9f       	mul	r24, r29
    9c5c:	f0 0d       	add	r31, r0
    9c5e:	9c 9f       	mul	r25, r28
    9c60:	f0 0d       	add	r31, r0
    9c62:	11 24       	eor	r1, r1
    9c64:	e8 51       	subi	r30, 0x18	; 24
    9c66:	f2 4f       	sbci	r31, 0xF2	; 242
    9c68:	22 0f       	add	r18, r18
    9c6a:	21 87       	std	Z+9, r18	; 0x09
    9c6c:	2c c0       	rjmp	.+88     	; 0x9cc6 <ProcessMusic+0x254>
						}else if(c1==CONTROLER_TREMOLO){
    9c6e:	4c 35       	cpi	r20, 0x5C	; 92
    9c70:	71 f4       	brne	.+28     	; 0x9c8e <ProcessMusic+0x21c>
							tracks[channel].tremoloLevel=c2<<1;
    9c72:	83 2f       	mov	r24, r19
    9c74:	90 e0       	ldi	r25, 0x00	; 0
    9c76:	8c 9f       	mul	r24, r28
    9c78:	f0 01       	movw	r30, r0
    9c7a:	8d 9f       	mul	r24, r29
    9c7c:	f0 0d       	add	r31, r0
    9c7e:	9c 9f       	mul	r25, r28
    9c80:	f0 0d       	add	r31, r0
    9c82:	11 24       	eor	r1, r1
    9c84:	e8 51       	subi	r30, 0x18	; 24
    9c86:	f2 4f       	sbci	r31, 0xF2	; 242
    9c88:	22 0f       	add	r18, r18
    9c8a:	27 83       	std	Z+7, r18	; 0x07
    9c8c:	1c c0       	rjmp	.+56     	; 0x9cc6 <ProcessMusic+0x254>
						}else if(c1==CONTROLER_TREMOLO_RATE){
    9c8e:	44 36       	cpi	r20, 0x64	; 100
    9c90:	d1 f4       	brne	.+52     	; 0x9cc6 <ProcessMusic+0x254>
							tracks[channel].tremoloRate=c2<<1;
    9c92:	83 2f       	mov	r24, r19
    9c94:	90 e0       	ldi	r25, 0x00	; 0
    9c96:	8c 9f       	mul	r24, r28
    9c98:	f0 01       	movw	r30, r0
    9c9a:	8d 9f       	mul	r24, r29
    9c9c:	f0 0d       	add	r31, r0
    9c9e:	9c 9f       	mul	r25, r28
    9ca0:	f0 0d       	add	r31, r0
    9ca2:	11 24       	eor	r1, r1
    9ca4:	e8 51       	subi	r30, 0x18	; 24
    9ca6:	f2 4f       	sbci	r31, 0xF2	; 242
    9ca8:	22 0f       	add	r18, r18
    9caa:	20 87       	std	Z+8, r18	; 0x08
    9cac:	0c c0       	rjmp	.+24     	; 0x9cc6 <ProcessMusic+0x254>
						break;

					//program change
					case 0xc0:
						// c1 = patch #						
						tracks[channel].patchNo=c1;
    9cae:	83 2f       	mov	r24, r19
    9cb0:	90 e0       	ldi	r25, 0x00	; 0
    9cb2:	8c 9f       	mul	r24, r28
    9cb4:	f0 01       	movw	r30, r0
    9cb6:	8d 9f       	mul	r24, r29
    9cb8:	f0 0d       	add	r31, r0
    9cba:	9c 9f       	mul	r25, r28
    9cbc:	f0 0d       	add	r31, r0
    9cbe:	11 24       	eor	r1, r1
    9cc0:	e8 51       	subi	r30, 0x18	; 24
    9cc2:	f2 4f       	sbci	r31, 0xF2	; 242
    9cc4:	46 87       	std	Z+14, r20	; 0x0e


			}//end if(c1==0xff)

			//read next delta time
			nextDeltaTime=ReadVarLen(&songPos); //Bug fix: remove divide by two			
    9cc6:	82 e6       	ldi	r24, 0x62	; 98
    9cc8:	9e e0       	ldi	r25, 0x0E	; 14
    9cca:	d0 dd       	rcall	.-1120   	; 0x986c <ReadVarLen>
    9ccc:	90 93 61 0e 	sts	0x0E61, r25
    9cd0:	80 93 60 0e 	sts	0x0E60, r24
			currDeltaTime=0;
    9cd4:	10 92 57 0e 	sts	0x0E57, r1
    9cd8:	10 92 56 0e 	sts	0x0E56, r1

#if SONGTEMPO == 1
			if(songTempo != 0){
    9cdc:	e0 91 5d 0e 	lds	r30, 0x0E5D
    9ce0:	f0 91 5e 0e 	lds	r31, 0x0E5E
    9ce4:	30 97       	sbiw	r30, 0x00	; 0
    9ce6:	09 f4       	brne	.+2      	; 0x9cea <ProcessMusic+0x278>
    9ce8:	42 c0       	rjmp	.+132    	; 0x9d6e <ProcessMusic+0x2fc>
				uint32_t l  = (uint32_t)(2048L*nextDeltaTime);
    9cea:	9c 01       	movw	r18, r24
    9cec:	40 e0       	ldi	r20, 0x00	; 0
    9cee:	50 e0       	ldi	r21, 0x00	; 0
    9cf0:	79 01       	movw	r14, r18
    9cf2:	8a 01       	movw	r16, r20
    9cf4:	ab e0       	ldi	r26, 0x0B	; 11
    9cf6:	ee 0c       	add	r14, r14
    9cf8:	ff 1c       	adc	r15, r15
    9cfa:	00 1f       	adc	r16, r16
    9cfc:	11 1f       	adc	r17, r17
    9cfe:	aa 95       	dec	r26
    9d00:	d1 f7       	brne	.-12     	; 0x9cf6 <ProcessMusic+0x284>

				if(songTempo < 0){//slow
    9d02:	f7 ff       	sbrs	r31, 7
    9d04:	1a c0       	rjmp	.+52     	; 0x9d3a <ProcessMusic+0x2c8>
					(uint32_t)(l += (uint32_t)((-songTempo*2L*nextDeltaTime)));
    9d06:	66 27       	eor	r22, r22
    9d08:	77 27       	eor	r23, r23
    9d0a:	6e 1b       	sub	r22, r30
    9d0c:	7f 0b       	sbc	r23, r31
    9d0e:	88 27       	eor	r24, r24
    9d10:	77 fd       	sbrc	r23, 7
    9d12:	80 95       	com	r24
    9d14:	98 2f       	mov	r25, r24
    9d16:	66 0f       	add	r22, r22
    9d18:	77 1f       	adc	r23, r23
    9d1a:	88 1f       	adc	r24, r24
    9d1c:	99 1f       	adc	r25, r25
    9d1e:	0e 94 97 73 	call	0xe72e	; 0xe72e <__mulsi3>
    9d22:	6e 0d       	add	r22, r14
    9d24:	7f 1d       	adc	r23, r15
    9d26:	80 1f       	adc	r24, r16
    9d28:	91 1f       	adc	r25, r17
					(uint32_t)(l /= 2048);
    9d2a:	bb e0       	ldi	r27, 0x0B	; 11
    9d2c:	96 95       	lsr	r25
    9d2e:	87 95       	ror	r24
    9d30:	77 95       	ror	r23
    9d32:	67 95       	ror	r22
    9d34:	ba 95       	dec	r27
    9d36:	d1 f7       	brne	.-12     	; 0x9d2c <ProcessMusic+0x2ba>
    9d38:	13 c0       	rjmp	.+38     	; 0x9d60 <ProcessMusic+0x2ee>
				}
				else//fast
					(uint32_t)(l /= (uint32_t)(2048L+(songTempo*2)));
    9d3a:	ee 0f       	add	r30, r30
    9d3c:	ff 1f       	adc	r31, r31
    9d3e:	9f 01       	movw	r18, r30
    9d40:	44 27       	eor	r20, r20
    9d42:	37 fd       	sbrc	r19, 7
    9d44:	40 95       	com	r20
    9d46:	54 2f       	mov	r21, r20
    9d48:	20 50       	subi	r18, 0x00	; 0
    9d4a:	38 4f       	sbci	r19, 0xF8	; 248
    9d4c:	4f 4f       	sbci	r20, 0xFF	; 255
    9d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    9d50:	c8 01       	movw	r24, r16
    9d52:	b7 01       	movw	r22, r14
    9d54:	0e 94 e9 73 	call	0xe7d2	; 0xe7d2 <__udivmodsi4>
    9d58:	c9 01       	movw	r24, r18
    9d5a:	da 01       	movw	r26, r20
    9d5c:	bc 01       	movw	r22, r24
    9d5e:	cd 01       	movw	r24, r26

				nextDeltaTime = l;
    9d60:	70 93 61 0e 	sts	0x0E61, r23
    9d64:	60 93 60 0e 	sts	0x0E60, r22
    9d68:	02 c0       	rjmp	.+4      	; 0x9d6e <ProcessMusic+0x2fc>
						}else if(c1==CONTROLER_EXPRESSION){
							tracks[channel].expressionVol=c2<<1;
						}else if(c1==CONTROLER_TREMOLO){
							tracks[channel].tremoloLevel=c2<<1;
						}else if(c1==CONTROLER_TREMOLO_RATE){
							tracks[channel].tremoloRate=c2<<1;
    9d6a:	c6 e1       	ldi	r28, 0x16	; 22
    9d6c:	d0 e0       	ldi	r29, 0x00	; 0

	//Process song MIDI notes
	if(playSong){
	
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){
    9d6e:	20 91 56 0e 	lds	r18, 0x0E56
    9d72:	30 91 57 0e 	lds	r19, 0x0E57
    9d76:	80 91 60 0e 	lds	r24, 0x0E60
    9d7a:	90 91 61 0e 	lds	r25, 0x0E61
    9d7e:	28 17       	cp	r18, r24
    9d80:	39 07       	cpc	r19, r25
    9d82:	09 f4       	brne	.+2      	; 0x9d86 <ProcessMusic+0x314>
    9d84:	d5 ce       	rjmp	.-598    	; 0x9b30 <ProcessMusic+0xbe>
#endif
		
		}//end while

		
		currDeltaTime++;
    9d86:	2f 5f       	subi	r18, 0xFF	; 255
    9d88:	3f 4f       	sbci	r19, 0xFF	; 255
    9d8a:	30 93 57 0e 	sts	0x0E57, r19
    9d8e:	20 93 56 0e 	sts	0x0E56, r18
		absoluteTime++;
    9d92:	80 91 5b 0e 	lds	r24, 0x0E5B
    9d96:	90 91 5c 0e 	lds	r25, 0x0E5C
    9d9a:	01 96       	adiw	r24, 0x01	; 1
    9d9c:	90 93 5c 0e 	sts	0x0E5C, r25
    9da0:	80 93 5b 0e 	sts	0x0E5B, r24
    9da4:	c8 ee       	ldi	r28, 0xE8	; 232
    9da6:	dd e0       	ldi	r29, 0x0D	; 13
    9da8:	01 e6       	ldi	r16, 0x61	; 97
    9daa:	1d e0       	ldi	r17, 0x0D	; 13
    9dac:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9dae:	ef ef       	ldi	r30, 0xFF	; 255
    9db0:	ae 2e       	mov	r10, r30
    9db2:	b1 2c       	mov	r11, r1
		
		}//end while

		
		currDeltaTime++;
		absoluteTime++;
    9db4:	dc 2e       	mov	r13, r28
    9db6:	ed 2e       	mov	r14, r29
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    9db8:	88 81       	ld	r24, Y
    9dba:	86 fd       	sbrc	r24, 6
    9dbc:	3d c0       	rjmp	.+122    	; 0x9e38 <ProcessMusic+0x3c6>

			if(track->patchCommandStreamPos!=NULL && 
    9dbe:	8c 89       	ldd	r24, Y+20	; 0x14
    9dc0:	9d 89       	ldd	r25, Y+21	; 0x15
    9dc2:	89 2b       	or	r24, r25
    9dc4:	09 f4       	brne	.+2      	; 0x9dc8 <ProcessMusic+0x356>
    9dc6:	35 c0       	rjmp	.+106    	; 0x9e32 <ProcessMusic+0x3c0>
    9dc8:	9a 89       	ldd	r25, Y+18	; 0x12
    9dca:	89 89       	ldd	r24, Y+17	; 0x11
    9dcc:	98 17       	cp	r25, r24
    9dce:	68 f5       	brcc	.+90     	; 0x9e2a <ProcessMusic+0x3b8>
    9dd0:	30 c0       	rjmp	.+96     	; 0x9e32 <ProcessMusic+0x3c0>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    9dd2:	ec 89       	ldd	r30, Y+20	; 0x14
    9dd4:	fd 89       	ldd	r31, Y+21	; 0x15
    9dd6:	cf 01       	movw	r24, r30
    9dd8:	01 96       	adiw	r24, 0x01	; 1
    9dda:	9d 8b       	std	Y+21, r25	; 0x15
    9ddc:	8c 8b       	std	Y+20, r24	; 0x14
    9dde:	24 91       	lpm	r18, Z+
					if(c1==0xff){					
    9de0:	2f 3f       	cpi	r18, 0xFF	; 255
    9de2:	31 f4       	brne	.+12     	; 0x9df0 <ProcessMusic+0x37e>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9de4:	88 81       	ld	r24, Y
    9de6:	8f 77       	andi	r24, 0x7F	; 127
    9de8:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    9dea:	1d 8a       	std	Y+21, r1	; 0x15
    9dec:	1c 8a       	std	Y+20, r1	; 0x14
    9dee:	21 c0       	rjmp	.+66     	; 0x9e32 <ProcessMusic+0x3c0>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    9df0:	01 96       	adiw	r24, 0x01	; 1
    9df2:	9d 8b       	std	Y+21, r25	; 0x15
    9df4:	8c 8b       	std	Y+20, r24	; 0x14
    9df6:	01 97       	sbiw	r24, 0x01	; 1
    9df8:	fc 01       	movw	r30, r24
    9dfa:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    9dfc:	82 2f       	mov	r24, r18
    9dfe:	90 e0       	ldi	r25, 0x00	; 0
    9e00:	88 0f       	add	r24, r24
    9e02:	99 1f       	adc	r25, r25
    9e04:	82 54       	subi	r24, 0x42	; 66
    9e06:	9f 4f       	sbci	r25, 0xFF	; 255
    9e08:	fc 01       	movw	r30, r24
    9e0a:	25 91       	lpm	r18, Z+
    9e0c:	34 91       	lpm	r19, Z+
    9e0e:	8d 2d       	mov	r24, r13
    9e10:	9e 2d       	mov	r25, r14
    9e12:	6f 2d       	mov	r22, r15
    9e14:	f9 01       	movw	r30, r18
    9e16:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9e18:	ec 89       	ldd	r30, Y+20	; 0x14
    9e1a:	fd 89       	ldd	r31, Y+21	; 0x15
    9e1c:	31 96       	adiw	r30, 0x01	; 1
    9e1e:	fd 8b       	std	Y+21, r31	; 0x15
    9e20:	ec 8b       	std	Y+20, r30	; 0x14
    9e22:	31 97       	sbiw	r30, 0x01	; 1
    9e24:	e4 91       	lpm	r30, Z+
    9e26:	e9 8b       	std	Y+17, r30	; 0x11
					
					track->patchCurrDeltaTime=0;	
    9e28:	1a 8a       	std	Y+18, r1	; 0x12

			if(track->patchCommandStreamPos!=NULL && 
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    9e2a:	9a 89       	ldd	r25, Y+18	; 0x12
    9e2c:	89 89       	ldd	r24, Y+17	; 0x11
    9e2e:	98 17       	cp	r25, r24
    9e30:	81 f2       	breq	.-96     	; 0x9dd2 <ProcessMusic+0x360>
					track->patchCurrDeltaTime=0;	

				}		
			}				
			
			track->patchCurrDeltaTime++;
    9e32:	8a 89       	ldd	r24, Y+18	; 0x12
    9e34:	8f 5f       	subi	r24, 0xFF	; 255
    9e36:	8a 8b       	std	Y+18, r24	; 0x12
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9e38:	88 81       	ld	r24, Y
    9e3a:	85 fd       	sbrc	r24, 5
    9e3c:	03 c0       	rjmp	.+6      	; 0x9e44 <ProcessMusic+0x3d2>
    9e3e:	20 e0       	ldi	r18, 0x00	; 0
    9e40:	30 e0       	ldi	r19, 0x00	; 0
    9e42:	6b c0       	rjmp	.+214    	; 0x9f1a <ProcessMusic+0x4a8>
		
			if(track->patchPlayingTime<0xff){
    9e44:	8b 89       	ldd	r24, Y+19	; 0x13
    9e46:	8f 3f       	cpi	r24, 0xFF	; 255
    9e48:	11 f0       	breq	.+4      	; 0x9e4e <ProcessMusic+0x3dc>
				track->patchPlayingTime++;
    9e4a:	8f 5f       	subi	r24, 0xFF	; 255
    9e4c:	8b 8b       	std	Y+19, r24	; 0x13
			}

			//compute final frame volume
			if(track->noteVol!=0 && track->envelopeVol!=0 && track->trackVol!=0 && masterVolume!=0){
    9e4e:	9b 85       	ldd	r25, Y+11	; 0x0b
    9e50:	99 23       	and	r25, r25
    9e52:	09 f4       	brne	.+2      	; 0x9e56 <ProcessMusic+0x3e4>
    9e54:	5c c0       	rjmp	.+184    	; 0x9f0e <ProcessMusic+0x49c>
    9e56:	2c 85       	ldd	r18, Y+12	; 0x0c
    9e58:	22 23       	and	r18, r18
    9e5a:	09 f4       	brne	.+2      	; 0x9e5e <ProcessMusic+0x3ec>
    9e5c:	58 c0       	rjmp	.+176    	; 0x9f0e <ProcessMusic+0x49c>
    9e5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    9e60:	88 23       	and	r24, r24
    9e62:	09 f4       	brne	.+2      	; 0x9e66 <ProcessMusic+0x3f4>
    9e64:	54 c0       	rjmp	.+168    	; 0x9f0e <ProcessMusic+0x49c>
    9e66:	40 91 5f 0e 	lds	r20, 0x0E5F
    9e6a:	44 23       	and	r20, r20
    9e6c:	09 f4       	brne	.+2      	; 0x9e70 <ProcessMusic+0x3fe>
    9e6e:	4f c0       	rjmp	.+158    	; 0x9f0e <ProcessMusic+0x49c>

				uVol=(track->noteVol*track->trackVol)+0x100;
    9e70:	89 9f       	mul	r24, r25
    9e72:	c0 01       	movw	r24, r0
    9e74:	11 24       	eor	r1, r1
    9e76:	80 50       	subi	r24, 0x00	; 0
    9e78:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->envelopeVol)+0x100;
    9e7a:	89 2f       	mov	r24, r25
    9e7c:	99 27       	eor	r25, r25
    9e7e:	30 e0       	ldi	r19, 0x00	; 0
    9e80:	b9 01       	movw	r22, r18
    9e82:	86 9f       	mul	r24, r22
    9e84:	90 01       	movw	r18, r0
    9e86:	87 9f       	mul	r24, r23
    9e88:	30 0d       	add	r19, r0
    9e8a:	96 9f       	mul	r25, r22
    9e8c:	30 0d       	add	r19, r0
    9e8e:	11 24       	eor	r1, r1
    9e90:	20 50       	subi	r18, 0x00	; 0
    9e92:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->expressionVol)+0x100;
    9e94:	23 2f       	mov	r18, r19
    9e96:	33 27       	eor	r19, r19
    9e98:	89 85       	ldd	r24, Y+9	; 0x09
    9e9a:	90 e0       	ldi	r25, 0x00	; 0
    9e9c:	fc 01       	movw	r30, r24
    9e9e:	2e 9f       	mul	r18, r30
    9ea0:	c0 01       	movw	r24, r0
    9ea2:	2f 9f       	mul	r18, r31
    9ea4:	90 0d       	add	r25, r0
    9ea6:	3e 9f       	mul	r19, r30
    9ea8:	90 0d       	add	r25, r0
    9eaa:	11 24       	eor	r1, r1
    9eac:	80 50       	subi	r24, 0x00	; 0
    9eae:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    9eb0:	89 2f       	mov	r24, r25
    9eb2:	99 27       	eor	r25, r25
    9eb4:	24 2f       	mov	r18, r20
    9eb6:	30 e0       	ldi	r19, 0x00	; 0
    9eb8:	ac 01       	movw	r20, r24
    9eba:	42 9f       	mul	r20, r18
    9ebc:	c0 01       	movw	r24, r0
    9ebe:	43 9f       	mul	r20, r19
    9ec0:	90 0d       	add	r25, r0
    9ec2:	52 9f       	mul	r21, r18
    9ec4:	90 0d       	add	r25, r0
    9ec6:	11 24       	eor	r1, r1
    9ec8:	80 50       	subi	r24, 0x00	; 0
    9eca:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    9ecc:	29 2f       	mov	r18, r25
    9ece:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    9ed0:	8f 81       	ldd	r24, Y+7	; 0x07
    9ed2:	88 23       	and	r24, r24
    9ed4:	f1 f0       	breq	.+60     	; 0x9f12 <ProcessMusic+0x4a0>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9ed6:	ee 81       	ldd	r30, Y+6	; 0x06
    9ed8:	f0 e0       	ldi	r31, 0x00	; 0
    9eda:	e0 50       	subi	r30, 0x00	; 0
    9edc:	fe 45       	sbci	r31, 0x5E	; 94
    9ede:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    9ee0:	e0 58       	subi	r30, 0x80	; 128
    9ee2:	e8 9f       	mul	r30, r24
    9ee4:	c0 01       	movw	r24, r0
    9ee6:	11 24       	eor	r1, r1
    9ee8:	80 50       	subi	r24, 0x00	; 0
    9eea:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9eec:	89 2f       	mov	r24, r25
    9eee:	99 27       	eor	r25, r25
    9ef0:	b5 01       	movw	r22, r10
    9ef2:	68 1b       	sub	r22, r24
    9ef4:	79 0b       	sbc	r23, r25
    9ef6:	62 9f       	mul	r22, r18
    9ef8:	c0 01       	movw	r24, r0
    9efa:	63 9f       	mul	r22, r19
    9efc:	90 0d       	add	r25, r0
    9efe:	72 9f       	mul	r23, r18
    9f00:	90 0d       	add	r25, r0
    9f02:	11 24       	eor	r1, r1
    9f04:	80 50       	subi	r24, 0x00	; 0
    9f06:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    9f08:	29 2f       	mov	r18, r25
    9f0a:	33 27       	eor	r19, r19
    9f0c:	02 c0       	rjmp	.+4      	; 0x9f12 <ProcessMusic+0x4a0>
    9f0e:	20 e0       	ldi	r18, 0x00	; 0
    9f10:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    9f12:	8e 81       	ldd	r24, Y+6	; 0x06
    9f14:	98 85       	ldd	r25, Y+8	; 0x08
    9f16:	89 0f       	add	r24, r25
    9f18:	8e 83       	std	Y+6, r24	; 0x06

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9f1a:	f8 01       	movw	r30, r16
    9f1c:	20 83       	st	Z, r18
	

	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9f1e:	f3 94       	inc	r15
    9f20:	66 96       	adiw	r28, 0x16	; 22
    9f22:	0a 5f       	subi	r16, 0xFA	; 250
    9f24:	1f 4f       	sbci	r17, 0xFF	; 255
    9f26:	f5 e0       	ldi	r31, 0x05	; 5
    9f28:	ff 16       	cp	r15, r31
    9f2a:	09 f0       	breq	.+2      	; 0x9f2e <ProcessMusic+0x4bc>
    9f2c:	43 cf       	rjmp	.-378    	; 0x9db4 <ProcessMusic+0x342>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9f2e:	df 91       	pop	r29
    9f30:	cf 91       	pop	r28
    9f32:	1f 91       	pop	r17
    9f34:	0f 91       	pop	r16
    9f36:	ff 90       	pop	r15
    9f38:	ef 90       	pop	r14
    9f3a:	df 90       	pop	r13
    9f3c:	bf 90       	pop	r11
    9f3e:	af 90       	pop	r10
    9f40:	08 95       	ret

00009f42 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    9f42:	58 2f       	mov	r21, r24
    9f44:	76 2f       	mov	r23, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    9f46:	89 e0       	ldi	r24, 0x09	; 9
    9f48:	58 9f       	mul	r21, r24
    9f4a:	c0 01       	movw	r24, r0
    9f4c:	11 24       	eor	r1, r1
    9f4e:	e0 91 58 0e 	lds	r30, 0x0E58
    9f52:	f0 91 59 0e 	lds	r31, 0x0E59
    9f56:	e8 0f       	add	r30, r24
    9f58:	f9 1f       	adc	r31, r25
    9f5a:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    9f5c:	81 30       	cpi	r24, 0x01	; 1
    9f5e:	11 f4       	brne	.+4      	; 0x9f64 <TriggerFx+0x22>
    9f60:	43 e0       	ldi	r20, 0x03	; 3
    9f62:	21 c0       	rjmp	.+66     	; 0x9fa6 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    9f64:	82 30       	cpi	r24, 0x02	; 2
    9f66:	11 f4       	brne	.+4      	; 0x9f6c <TriggerFx+0x2a>
    9f68:	44 e0       	ldi	r20, 0x04	; 4
    9f6a:	1d c0       	rjmp	.+58     	; 0x9fa6 <TriggerFx+0x64>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    9f6c:	80 91 fe 0d 	lds	r24, 0x0DFE
    9f70:	87 ff       	sbrs	r24, 7
    9f72:	16 c0       	rjmp	.+44     	; 0x9fa0 <TriggerFx+0x5e>
    9f74:	80 91 0d 0e 	lds	r24, 0x0E0D
    9f78:	85 17       	cp	r24, r21
    9f7a:	11 f4       	brne	.+4      	; 0x9f80 <TriggerFx+0x3e>
    9f7c:	44 23       	and	r20, r20
    9f7e:	81 f4       	brne	.+32     	; 0x9fa0 <TriggerFx+0x5e>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    9f80:	80 91 14 0e 	lds	r24, 0x0E14
    9f84:	87 ff       	sbrs	r24, 7
    9f86:	0e c0       	rjmp	.+28     	; 0x9fa4 <TriggerFx+0x62>
    9f88:	80 91 23 0e 	lds	r24, 0x0E23
    9f8c:	85 17       	cp	r24, r21
    9f8e:	11 f4       	brne	.+4      	; 0x9f94 <TriggerFx+0x52>
    9f90:	44 23       	and	r20, r20
    9f92:	41 f4       	brne	.+16     	; 0x9fa4 <TriggerFx+0x62>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    9f94:	90 91 11 0e 	lds	r25, 0x0E11
    9f98:	80 91 27 0e 	lds	r24, 0x0E27
    9f9c:	89 17       	cp	r24, r25
    9f9e:	10 f4       	brcc	.+4      	; 0x9fa4 <TriggerFx+0x62>
    9fa0:	41 e0       	ldi	r20, 0x01	; 1
    9fa2:	01 c0       	rjmp	.+2      	; 0x9fa6 <TriggerFx+0x64>
    9fa4:	42 e0       	ldi	r20, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    9fa6:	24 2f       	mov	r18, r20
    9fa8:	30 e0       	ldi	r19, 0x00	; 0
    9faa:	86 e1       	ldi	r24, 0x16	; 22
    9fac:	90 e0       	ldi	r25, 0x00	; 0
    9fae:	28 9f       	mul	r18, r24
    9fb0:	f0 01       	movw	r30, r0
    9fb2:	29 9f       	mul	r18, r25
    9fb4:	f0 0d       	add	r31, r0
    9fb6:	38 9f       	mul	r19, r24
    9fb8:	f0 0d       	add	r31, r0
    9fba:	11 24       	eor	r1, r1
    9fbc:	e8 51       	subi	r30, 0x18	; 24
    9fbe:	f2 4f       	sbci	r31, 0xF2	; 242
    9fc0:	80 81       	ld	r24, Z
    9fc2:	80 68       	ori	r24, 0x80	; 128
    9fc4:	80 83       	st	Z, r24
	TriggerCommon(channel,patch,volume,80);
    9fc6:	84 2f       	mov	r24, r20
    9fc8:	65 2f       	mov	r22, r21
    9fca:	47 2f       	mov	r20, r23
    9fcc:	20 e5       	ldi	r18, 0x50	; 80
}
    9fce:	90 cc       	rjmp	.-1760   	; 0x98f0 <TriggerCommon>

00009fd0 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    9fd0:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    9fd2:	64 2f       	mov	r22, r20
}
    9fd4:	ff c9       	rjmp	.-3074   	; 0x93d4 <SetMixerWave>
	...

0000a000 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    a000:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    a002:	80 93 60 0d 	sts	0x0D60, r24
	ret
    a006:	08 95       	ret

0000a008 <steptable>:
    a008:	22 00       	.word	0x0022	; ????
    a00a:	24 00       	.word	0x0024	; ????
    a00c:	26 00       	.word	0x0026	; ????
    a00e:	28 00       	.word	0x0028	; ????
    a010:	2b 00       	.word	0x002b	; ????
    a012:	2d 00       	.word	0x002d	; ????
    a014:	30 00       	.word	0x0030	; ????
    a016:	33 00       	.word	0x0033	; ????
    a018:	36 00       	.word	0x0036	; ????
    a01a:	39 00       	.word	0x0039	; ????
    a01c:	3d 00       	.word	0x003d	; ????
    a01e:	40 00       	.word	0x0040	; ????
    a020:	44 00       	.word	0x0044	; ????
    a022:	48 00       	.word	0x0048	; ????
    a024:	4c 00       	.word	0x004c	; ????
    a026:	51 00       	.word	0x0051	; ????
    a028:	56 00       	.word	0x0056	; ????
    a02a:	5b 00       	.word	0x005b	; ????
    a02c:	60 00       	.word	0x0060	; ????
    a02e:	66 00       	.word	0x0066	; ????
    a030:	6c 00       	.word	0x006c	; ????
    a032:	73 00       	.word	0x0073	; ????
    a034:	79 00       	.word	0x0079	; ????
    a036:	81 00       	.word	0x0081	; ????
    a038:	88 00       	.word	0x0088	; ????
    a03a:	90 00       	.word	0x0090	; ????
    a03c:	99 00       	.word	0x0099	; ????
    a03e:	a2 00       	.word	0x00a2	; ????
    a040:	ac 00       	.word	0x00ac	; ????
    a042:	b6 00       	.word	0x00b6	; ????
    a044:	c1 00       	.word	0x00c1	; ????
    a046:	cc 00       	.word	0x00cc	; ????
    a048:	d8 00       	.word	0x00d8	; ????
    a04a:	e5 00       	.word	0x00e5	; ????
    a04c:	f3 00       	.word	0x00f3	; ????
    a04e:	01 01       	movw	r0, r2
    a050:	10 01       	movw	r2, r0
    a052:	21 01       	movw	r4, r2
    a054:	32 01       	movw	r6, r4
    a056:	44 01       	movw	r8, r8
    a058:	57 01       	movw	r10, r14
    a05a:	6c 01       	movw	r12, r24
    a05c:	81 01       	movw	r16, r2
    a05e:	98 01       	movw	r18, r16
    a060:	b0 01       	movw	r22, r0
    a062:	ca 01       	movw	r24, r20
    a064:	e5 01       	movw	r28, r10
    a066:	02 02       	muls	r16, r18
    a068:	21 02       	muls	r18, r17
    a06a:	41 02       	muls	r20, r17
    a06c:	64 02       	muls	r22, r20
    a06e:	88 02       	muls	r24, r24
    a070:	ae 02       	muls	r26, r30
    a072:	d7 02       	muls	r29, r23
    a074:	03 03       	mulsu	r16, r19
    a076:	30 03       	mulsu	r19, r16
    a078:	61 03       	mulsu	r22, r17
    a07a:	94 03       	fmuls	r17, r20
    a07c:	cb 03       	fmulsu	r20, r19
    a07e:	05 04       	cpc	r0, r5
    a080:	42 04       	cpc	r4, r2
    a082:	83 04       	cpc	r8, r3
    a084:	c7 04       	cpc	r12, r7
    a086:	10 05       	cpc	r17, r0
    a088:	5d 05       	cpc	r21, r13
    a08a:	af 05       	cpc	r26, r15
    a08c:	05 06       	cpc	r0, r21
    a08e:	61 06       	cpc	r6, r17
    a090:	c2 06       	cpc	r12, r18
    a092:	29 07       	cpc	r18, r25
    a094:	96 07       	cpc	r25, r22
    a096:	09 08       	sbc	r0, r9
    a098:	83 08       	sbc	r8, r3
    a09a:	05 09       	sbc	r16, r5
    a09c:	8e 09       	sbc	r24, r14
    a09e:	20 0a       	sbc	r2, r16
    a0a0:	ba 0a       	sbc	r11, r26
    a0a2:	5d 0b       	sbc	r21, r29
    a0a4:	0a 0c       	add	r0, r10
    a0a6:	c1 0c       	add	r12, r1
    a0a8:	84 0d       	add	r24, r4
    a0aa:	51 0e       	add	r5, r17
    a0ac:	2b 0f       	add	r18, r27
    a0ae:	12 10       	cpse	r1, r2
    a0b0:	07 11       	cpse	r16, r7
    a0b2:	0a 12       	cpse	r0, r26
    a0b4:	1d 13       	cpse	r17, r29
    a0b6:	40 14       	cp	r4, r0
    a0b8:	74 15       	cp	r23, r4
    a0ba:	ba 16       	cp	r11, r26
    a0bc:	14 18       	sub	r1, r4
    a0be:	83 19       	sub	r24, r3
    a0c0:	07 1b       	sub	r16, r23
    a0c2:	a3 1c       	adc	r10, r3
    a0c4:	57 1e       	adc	r5, r23
    a0c6:	24 20       	and	r2, r4
    a0c8:	0e 22       	and	r0, r30
    a0ca:	14 24       	eor	r1, r4
    a0cc:	39 26       	eor	r3, r25
    a0ce:	7f 28       	or	r7, r15
    a0d0:	e8 2a       	or	r14, r24
    a0d2:	75 2d       	mov	r23, r5
    a0d4:	29 30       	cpi	r18, 0x09	; 9
    a0d6:	06 33       	cpi	r16, 0x36	; 54
    a0d8:	0f 36       	cpi	r16, 0x6F	; 111
    a0da:	45 39       	cpi	r20, 0x95	; 149
    a0dc:	ad 3c       	cpi	r26, 0xCD	; 205
    a0de:	49 40       	sbci	r20, 0x09	; 9
    a0e0:	1b 44       	sbci	r17, 0x4B	; 75
    a0e2:	28 48       	sbci	r18, 0x88	; 136
    a0e4:	73 4c       	sbci	r23, 0xC3	; 195
    a0e6:	fe 50       	subi	r31, 0x0E	; 14
    a0e8:	cf 55       	subi	r28, 0x5F	; 95
    a0ea:	ea 5a       	subi	r30, 0xAA	; 170
    a0ec:	51 60       	ori	r21, 0x01	; 1
    a0ee:	0c 66       	ori	r16, 0x6C	; 108
    a0f0:	1d 6c       	ori	r17, 0xCD	; 205
    a0f2:	8b 72       	andi	r24, 0x2B	; 43
    a0f4:	5a 79       	andi	r21, 0x9A	; 154
    a0f6:	92 80       	ldd	r9, Z+2	; 0x02
    a0f8:	37 88       	ldd	r3, Z+23	; 0x17
    a0fa:	50 90 e5 98 	lds	r5, 0x98E5
    a0fe:	fd a1       	ldd	r31, Y+37	; 0x25
    a100:	9f ab       	std	Y+55, r25	; 0x37
    a102:	d3 b5       	in	r29, 0x23	; 35
    a104:	a3 c0       	rjmp	.+326    	; 0xa24c <waves+0x4c>
	...

0000a200 <waves>:
    a200:	7f 7f       	andi	r23, 0xFF	; 255
    a202:	7f 7f       	andi	r23, 0xFF	; 255
    a204:	7f 7f       	andi	r23, 0xFF	; 255
    a206:	7f 7f       	andi	r23, 0xFF	; 255
    a208:	7f 7f       	andi	r23, 0xFF	; 255
    a20a:	7f 7f       	andi	r23, 0xFF	; 255
    a20c:	7f 7f       	andi	r23, 0xFF	; 255
    a20e:	7f 7f       	andi	r23, 0xFF	; 255
    a210:	7f 7f       	andi	r23, 0xFF	; 255
    a212:	7f 7f       	andi	r23, 0xFF	; 255
    a214:	7f 7f       	andi	r23, 0xFF	; 255
    a216:	7f 7f       	andi	r23, 0xFF	; 255
    a218:	7f 7f       	andi	r23, 0xFF	; 255
    a21a:	7f 7f       	andi	r23, 0xFF	; 255
    a21c:	7f 7f       	andi	r23, 0xFF	; 255
    a21e:	7f 7f       	andi	r23, 0xFF	; 255
    a220:	7f 7f       	andi	r23, 0xFF	; 255
    a222:	7f 7f       	andi	r23, 0xFF	; 255
    a224:	7f 7f       	andi	r23, 0xFF	; 255
    a226:	7f 7f       	andi	r23, 0xFF	; 255
    a228:	7f 7f       	andi	r23, 0xFF	; 255
    a22a:	7f 7f       	andi	r23, 0xFF	; 255
    a22c:	7f 7f       	andi	r23, 0xFF	; 255
    a22e:	7f 7f       	andi	r23, 0xFF	; 255
    a230:	7f 7f       	andi	r23, 0xFF	; 255
    a232:	7f 7f       	andi	r23, 0xFF	; 255
    a234:	7f 7f       	andi	r23, 0xFF	; 255
    a236:	7f 7f       	andi	r23, 0xFF	; 255
    a238:	7f 7f       	andi	r23, 0xFF	; 255
    a23a:	7f 7f       	andi	r23, 0xFF	; 255
    a23c:	7f 7f       	andi	r23, 0xFF	; 255
    a23e:	7f 7f       	andi	r23, 0xFF	; 255
    a240:	7f 7f       	andi	r23, 0xFF	; 255
    a242:	7f 7f       	andi	r23, 0xFF	; 255
    a244:	7f 7f       	andi	r23, 0xFF	; 255
    a246:	7f 7f       	andi	r23, 0xFF	; 255
    a248:	7f 7f       	andi	r23, 0xFF	; 255
    a24a:	7f 7f       	andi	r23, 0xFF	; 255
    a24c:	7f 7f       	andi	r23, 0xFF	; 255
    a24e:	7f 7f       	andi	r23, 0xFF	; 255
    a250:	7f 7f       	andi	r23, 0xFF	; 255
    a252:	7f 7f       	andi	r23, 0xFF	; 255
    a254:	7f 7f       	andi	r23, 0xFF	; 255
    a256:	7f 7f       	andi	r23, 0xFF	; 255
    a258:	7f 7f       	andi	r23, 0xFF	; 255
    a25a:	7f 7f       	andi	r23, 0xFF	; 255
    a25c:	7f 7f       	andi	r23, 0xFF	; 255
    a25e:	7f 7f       	andi	r23, 0xFF	; 255
    a260:	7f 7f       	andi	r23, 0xFF	; 255
    a262:	7f 7f       	andi	r23, 0xFF	; 255
    a264:	7f 7f       	andi	r23, 0xFF	; 255
    a266:	7f 7f       	andi	r23, 0xFF	; 255
    a268:	7f 7f       	andi	r23, 0xFF	; 255
    a26a:	7f 7f       	andi	r23, 0xFF	; 255
    a26c:	7f 7f       	andi	r23, 0xFF	; 255
    a26e:	7f 7f       	andi	r23, 0xFF	; 255
    a270:	7f 7f       	andi	r23, 0xFF	; 255
    a272:	7f 7f       	andi	r23, 0xFF	; 255
    a274:	7f 7f       	andi	r23, 0xFF	; 255
    a276:	7f 7f       	andi	r23, 0xFF	; 255
    a278:	7f 7f       	andi	r23, 0xFF	; 255
    a27a:	7f 7f       	andi	r23, 0xFF	; 255
    a27c:	7f 7f       	andi	r23, 0xFF	; 255
    a27e:	7f 7f       	andi	r23, 0xFF	; 255
    a280:	80 80       	ld	r8, Z
    a282:	80 80       	ld	r8, Z
    a284:	80 80       	ld	r8, Z
    a286:	80 80       	ld	r8, Z
    a288:	80 80       	ld	r8, Z
    a28a:	80 80       	ld	r8, Z
    a28c:	80 80       	ld	r8, Z
    a28e:	80 80       	ld	r8, Z
    a290:	80 80       	ld	r8, Z
    a292:	80 80       	ld	r8, Z
    a294:	80 80       	ld	r8, Z
    a296:	80 80       	ld	r8, Z
    a298:	80 80       	ld	r8, Z
    a29a:	80 80       	ld	r8, Z
    a29c:	80 80       	ld	r8, Z
    a29e:	80 80       	ld	r8, Z
    a2a0:	80 80       	ld	r8, Z
    a2a2:	80 80       	ld	r8, Z
    a2a4:	80 80       	ld	r8, Z
    a2a6:	80 80       	ld	r8, Z
    a2a8:	80 80       	ld	r8, Z
    a2aa:	80 80       	ld	r8, Z
    a2ac:	80 80       	ld	r8, Z
    a2ae:	80 80       	ld	r8, Z
    a2b0:	80 80       	ld	r8, Z
    a2b2:	80 80       	ld	r8, Z
    a2b4:	80 80       	ld	r8, Z
    a2b6:	80 80       	ld	r8, Z
    a2b8:	80 80       	ld	r8, Z
    a2ba:	80 80       	ld	r8, Z
    a2bc:	80 80       	ld	r8, Z
    a2be:	80 80       	ld	r8, Z
    a2c0:	80 80       	ld	r8, Z
    a2c2:	80 80       	ld	r8, Z
    a2c4:	80 80       	ld	r8, Z
    a2c6:	80 80       	ld	r8, Z
    a2c8:	80 80       	ld	r8, Z
    a2ca:	80 80       	ld	r8, Z
    a2cc:	80 80       	ld	r8, Z
    a2ce:	80 80       	ld	r8, Z
    a2d0:	80 80       	ld	r8, Z
    a2d2:	80 80       	ld	r8, Z
    a2d4:	80 80       	ld	r8, Z
    a2d6:	80 80       	ld	r8, Z
    a2d8:	80 80       	ld	r8, Z
    a2da:	80 80       	ld	r8, Z
    a2dc:	80 80       	ld	r8, Z
    a2de:	80 80       	ld	r8, Z
    a2e0:	80 80       	ld	r8, Z
    a2e2:	80 80       	ld	r8, Z
    a2e4:	80 80       	ld	r8, Z
    a2e6:	80 80       	ld	r8, Z
    a2e8:	80 80       	ld	r8, Z
    a2ea:	80 80       	ld	r8, Z
    a2ec:	80 80       	ld	r8, Z
    a2ee:	80 80       	ld	r8, Z
    a2f0:	80 80       	ld	r8, Z
    a2f2:	80 80       	ld	r8, Z
    a2f4:	80 80       	ld	r8, Z
    a2f6:	80 80       	ld	r8, Z
    a2f8:	80 80       	ld	r8, Z
    a2fa:	80 80       	ld	r8, Z
    a2fc:	80 80       	ld	r8, Z
    a2fe:	80 80       	ld	r8, Z
    a300:	7f 7f       	andi	r23, 0xFF	; 255
    a302:	7f 7f       	andi	r23, 0xFF	; 255
    a304:	7f 7f       	andi	r23, 0xFF	; 255
    a306:	7f 7f       	andi	r23, 0xFF	; 255
    a308:	7f 7f       	andi	r23, 0xFF	; 255
    a30a:	7f 7f       	andi	r23, 0xFF	; 255
    a30c:	7f 7f       	andi	r23, 0xFF	; 255
    a30e:	7f 7f       	andi	r23, 0xFF	; 255
    a310:	7f 7f       	andi	r23, 0xFF	; 255
    a312:	7f 7f       	andi	r23, 0xFF	; 255
    a314:	7f 7f       	andi	r23, 0xFF	; 255
    a316:	7f 7f       	andi	r23, 0xFF	; 255
    a318:	7f 7f       	andi	r23, 0xFF	; 255
    a31a:	7f 7f       	andi	r23, 0xFF	; 255
    a31c:	7f 7f       	andi	r23, 0xFF	; 255
    a31e:	7f 7f       	andi	r23, 0xFF	; 255
    a320:	7f 7f       	andi	r23, 0xFF	; 255
    a322:	7f 7f       	andi	r23, 0xFF	; 255
    a324:	7f 7f       	andi	r23, 0xFF	; 255
    a326:	7f 7f       	andi	r23, 0xFF	; 255
    a328:	7f 7f       	andi	r23, 0xFF	; 255
    a32a:	7f 7f       	andi	r23, 0xFF	; 255
    a32c:	7f 7f       	andi	r23, 0xFF	; 255
    a32e:	7f 7f       	andi	r23, 0xFF	; 255
    a330:	7f 7f       	andi	r23, 0xFF	; 255
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	80 80       	ld	r8, Z
    a342:	80 80       	ld	r8, Z
    a344:	80 80       	ld	r8, Z
    a346:	80 80       	ld	r8, Z
    a348:	80 80       	ld	r8, Z
    a34a:	80 80       	ld	r8, Z
    a34c:	80 80       	ld	r8, Z
    a34e:	80 80       	ld	r8, Z
    a350:	80 80       	ld	r8, Z
    a352:	80 80       	ld	r8, Z
    a354:	80 80       	ld	r8, Z
    a356:	80 80       	ld	r8, Z
    a358:	80 80       	ld	r8, Z
    a35a:	80 80       	ld	r8, Z
    a35c:	80 80       	ld	r8, Z
    a35e:	80 80       	ld	r8, Z
    a360:	80 80       	ld	r8, Z
    a362:	80 80       	ld	r8, Z
    a364:	80 80       	ld	r8, Z
    a366:	80 80       	ld	r8, Z
    a368:	80 80       	ld	r8, Z
    a36a:	80 80       	ld	r8, Z
    a36c:	80 80       	ld	r8, Z
    a36e:	80 80       	ld	r8, Z
    a370:	80 80       	ld	r8, Z
    a372:	80 80       	ld	r8, Z
    a374:	80 80       	ld	r8, Z
    a376:	80 80       	ld	r8, Z
    a378:	80 80       	ld	r8, Z
    a37a:	80 80       	ld	r8, Z
    a37c:	80 80       	ld	r8, Z
    a37e:	80 80       	ld	r8, Z
    a380:	80 80       	ld	r8, Z
    a382:	80 80       	ld	r8, Z
    a384:	80 80       	ld	r8, Z
    a386:	80 80       	ld	r8, Z
    a388:	80 80       	ld	r8, Z
    a38a:	80 80       	ld	r8, Z
    a38c:	80 80       	ld	r8, Z
    a38e:	80 80       	ld	r8, Z
    a390:	80 80       	ld	r8, Z
    a392:	80 80       	ld	r8, Z
    a394:	80 80       	ld	r8, Z
    a396:	80 80       	ld	r8, Z
    a398:	80 80       	ld	r8, Z
    a39a:	80 80       	ld	r8, Z
    a39c:	80 80       	ld	r8, Z
    a39e:	80 80       	ld	r8, Z
    a3a0:	80 80       	ld	r8, Z
    a3a2:	80 80       	ld	r8, Z
    a3a4:	80 80       	ld	r8, Z
    a3a6:	80 80       	ld	r8, Z
    a3a8:	80 80       	ld	r8, Z
    a3aa:	80 80       	ld	r8, Z
    a3ac:	80 80       	ld	r8, Z
    a3ae:	80 80       	ld	r8, Z
    a3b0:	80 80       	ld	r8, Z
    a3b2:	80 80       	ld	r8, Z
    a3b4:	80 80       	ld	r8, Z
    a3b6:	80 80       	ld	r8, Z
    a3b8:	80 80       	ld	r8, Z
    a3ba:	80 80       	ld	r8, Z
    a3bc:	80 80       	ld	r8, Z
    a3be:	80 80       	ld	r8, Z
    a3c0:	80 80       	ld	r8, Z
    a3c2:	80 80       	ld	r8, Z
    a3c4:	80 80       	ld	r8, Z
    a3c6:	80 80       	ld	r8, Z
    a3c8:	80 80       	ld	r8, Z
    a3ca:	80 80       	ld	r8, Z
    a3cc:	80 80       	ld	r8, Z
    a3ce:	80 80       	ld	r8, Z
    a3d0:	80 80       	ld	r8, Z
    a3d2:	80 80       	ld	r8, Z
    a3d4:	80 80       	ld	r8, Z
    a3d6:	80 80       	ld	r8, Z
    a3d8:	80 80       	ld	r8, Z
    a3da:	80 80       	ld	r8, Z
    a3dc:	80 80       	ld	r8, Z
    a3de:	80 80       	ld	r8, Z
    a3e0:	80 80       	ld	r8, Z
    a3e2:	80 80       	ld	r8, Z
    a3e4:	80 80       	ld	r8, Z
    a3e6:	80 80       	ld	r8, Z
    a3e8:	80 80       	ld	r8, Z
    a3ea:	80 80       	ld	r8, Z
    a3ec:	80 80       	ld	r8, Z
    a3ee:	80 80       	ld	r8, Z
    a3f0:	80 80       	ld	r8, Z
    a3f2:	80 80       	ld	r8, Z
    a3f4:	80 80       	ld	r8, Z
    a3f6:	80 80       	ld	r8, Z
    a3f8:	80 80       	ld	r8, Z
    a3fa:	80 80       	ld	r8, Z
    a3fc:	80 80       	ld	r8, Z
    a3fe:	80 80       	ld	r8, Z
    a400:	00 02       	muls	r16, r16
    a402:	04 06       	cpc	r0, r20
    a404:	08 0a       	sbc	r0, r24
    a406:	0c 0e       	add	r0, r28
    a408:	10 12       	cpse	r1, r16
    a40a:	14 16       	cp	r1, r20
    a40c:	18 1a       	sub	r1, r24
    a40e:	1c 1e       	adc	r1, r28
    a410:	20 22       	and	r2, r16
    a412:	24 26       	eor	r2, r20
    a414:	28 2a       	or	r2, r24
    a416:	2c 2e       	mov	r2, r28
    a418:	30 32       	cpi	r19, 0x20	; 32
    a41a:	34 36       	cpi	r19, 0x64	; 100
    a41c:	38 3a       	cpi	r19, 0xA8	; 168
    a41e:	3c 3e       	cpi	r19, 0xEC	; 236
    a420:	40 42       	sbci	r20, 0x20	; 32
    a422:	44 46       	sbci	r20, 0x64	; 100
    a424:	48 4a       	sbci	r20, 0xA8	; 168
    a426:	4c 4e       	sbci	r20, 0xEC	; 236
    a428:	50 52       	subi	r21, 0x20	; 32
    a42a:	54 56       	subi	r21, 0x64	; 100
    a42c:	58 5a       	subi	r21, 0xA8	; 168
    a42e:	5c 5e       	subi	r21, 0xEC	; 236
    a430:	60 62       	ori	r22, 0x20	; 32
    a432:	64 66       	ori	r22, 0x64	; 100
    a434:	68 6a       	ori	r22, 0xA8	; 168
    a436:	6c 6e       	ori	r22, 0xEC	; 236
    a438:	70 72       	andi	r23, 0x20	; 32
    a43a:	74 76       	andi	r23, 0x64	; 100
    a43c:	78 7a       	andi	r23, 0xA8	; 168
    a43e:	7c 7e       	andi	r23, 0xEC	; 236
    a440:	7f 7d       	andi	r23, 0xDF	; 223
    a442:	7b 79       	andi	r23, 0x9B	; 155
    a444:	77 75       	andi	r23, 0x57	; 87
    a446:	73 71       	andi	r23, 0x13	; 19
    a448:	6f 6d       	ori	r22, 0xDF	; 223
    a44a:	6b 69       	ori	r22, 0x9B	; 155
    a44c:	67 65       	ori	r22, 0x57	; 87
    a44e:	63 61       	ori	r22, 0x13	; 19
    a450:	5f 5d       	subi	r21, 0xDF	; 223
    a452:	5b 59       	subi	r21, 0x9B	; 155
    a454:	57 55       	subi	r21, 0x57	; 87
    a456:	53 51       	subi	r21, 0x13	; 19
    a458:	4f 4d       	sbci	r20, 0xDF	; 223
    a45a:	4b 49       	sbci	r20, 0x9B	; 155
    a45c:	47 45       	sbci	r20, 0x57	; 87
    a45e:	43 41       	sbci	r20, 0x13	; 19
    a460:	3f 3d       	cpi	r19, 0xDF	; 223
    a462:	3b 39       	cpi	r19, 0x9B	; 155
    a464:	37 35       	cpi	r19, 0x57	; 87
    a466:	33 31       	cpi	r19, 0x13	; 19
    a468:	2f 2d       	mov	r18, r15
    a46a:	2b 29       	or	r18, r11
    a46c:	27 25       	eor	r18, r7
    a46e:	23 21       	and	r18, r3
    a470:	1f 1d       	adc	r17, r15
    a472:	1b 19       	sub	r17, r11
    a474:	17 15       	cp	r17, r7
    a476:	13 11       	cpse	r17, r3
    a478:	0f 0d       	add	r16, r15
    a47a:	0b 09       	sbc	r16, r11
    a47c:	07 05       	cpc	r16, r7
    a47e:	03 01       	movw	r0, r6
    a480:	ff fd       	.word	0xfdff	; ????
    a482:	fb f9       	.word	0xf9fb	; ????
    a484:	f7 f5       	brid	.+124    	; 0xa502 <waves+0x302>
    a486:	f3 f1       	brvs	.+124    	; 0xa504 <waves+0x304>
    a488:	ef ed       	ldi	r30, 0xDF	; 223
    a48a:	eb e9       	ldi	r30, 0x9B	; 155
    a48c:	e7 e5       	ldi	r30, 0x57	; 87
    a48e:	e3 e1       	ldi	r30, 0x13	; 19
    a490:	df dd       	rcall	.-1090   	; 0xa050 <steptable+0x48>
    a492:	db d9       	rcall	.-3146   	; 0x984a <StartSong+0x3c>
    a494:	d7 d5       	rcall	.+2990   	; 0xb044 <GeneratePreview+0x10>
    a496:	d3 d1       	rcall	.+934    	; 0xa83e <rtl_RamifyFontEx+0x32>
    a498:	cf cd       	rjmp	.-1122   	; 0xa038 <steptable+0x30>
    a49a:	cb c9       	rjmp	.-3178   	; 0x9832 <StartSong+0x24>
    a49c:	c7 c5       	rjmp	.+2958   	; 0xb02c <EliminateFlashingJewel+0x2a>
    a49e:	c3 c1       	rjmp	.+902    	; 0xa826 <rtl_RamifyFontEx+0x1a>
    a4a0:	bf bd       	out	0x2f, r27	; 47
    a4a2:	bb b9       	out	0x0b, r27	; 11
    a4a4:	b7 b5       	in	r27, 0x27	; 39
    a4a6:	b3 b1       	in	r27, 0x03	; 3
    a4a8:	af ad       	ldd	r26, Y+63	; 0x3f
    a4aa:	ab a9       	ldd	r26, Y+51	; 0x33
    a4ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a4ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    a4b0:	9f 9d       	mul	r25, r15
    a4b2:	9b 99       	sbic	0x13, 3	; 19
    a4b4:	97 95       	ror	r25
    a4b6:	93 91       	.word	0x9193	; ????
    a4b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a4ba:	8b 89       	ldd	r24, Y+19	; 0x13
    a4bc:	87 85       	ldd	r24, Z+15	; 0x0f
    a4be:	83 81       	ldd	r24, Z+3	; 0x03
    a4c0:	80 82       	st	Z, r8
    a4c2:	84 86       	std	Z+12, r8	; 0x0c
    a4c4:	88 8a       	std	Y+16, r8	; 0x10
    a4c6:	8c 8e       	std	Y+28, r8	; 0x1c
    a4c8:	90 92 94 96 	sts	0x9694, r9
    a4cc:	98 9a       	sbi	0x13, 0	; 19
    a4ce:	9c 9e       	mul	r9, r28
    a4d0:	a0 a2       	std	Z+32, r10	; 0x20
    a4d2:	a4 a6       	std	Z+44, r10	; 0x2c
    a4d4:	a8 aa       	std	Y+48, r10	; 0x30
    a4d6:	ac ae       	std	Y+60, r10	; 0x3c
    a4d8:	b0 b2       	in	r11, 0x10	; 16
    a4da:	b4 b6       	in	r11, 0x34	; 52
    a4dc:	b8 ba       	out	0x18, r11	; 24
    a4de:	bc be       	out	0x3c, r11	; 60
    a4e0:	c0 c2       	rjmp	.+1408   	; 0xaa62 <ColumnsPrint2num+0x20>
    a4e2:	c4 c6       	rjmp	.+3464   	; 0xb26c <RamTileStateMachine+0x118>
    a4e4:	c8 ca       	rjmp	.-2672   	; 0x9a76 <ProcessMusic+0x4>
    a4e6:	cc ce       	rjmp	.-616    	; 0xa280 <waves+0x80>
    a4e8:	d0 d2       	rcall	.+1440   	; 0xaa8a <ColumnsPrint2num+0x48>
    a4ea:	d4 d6       	rcall	.+3496   	; 0xb294 <RamTileStateMachine+0x140>
    a4ec:	d8 da       	rcall	.-2640   	; 0x9a9e <ProcessMusic+0x2c>
    a4ee:	dc de       	rcall	.-584    	; 0xa2a8 <waves+0xa8>
    a4f0:	e0 e2       	ldi	r30, 0x20	; 32
    a4f2:	e4 e6       	ldi	r30, 0x64	; 100
    a4f4:	e8 ea       	ldi	r30, 0xA8	; 168
    a4f6:	ec ee       	ldi	r30, 0xEC	; 236
    a4f8:	f0 f2       	brcs	.-68     	; 0xa4b6 <waves+0x2b6>
    a4fa:	f4 f6       	brge	.-68     	; 0xa4b8 <waves+0x2b8>
    a4fc:	f8 fa       	.word	0xfaf8	; ????
    a4fe:	fc fe       	.word	0xfefc	; ????
    a500:	7f 7f       	andi	r23, 0xFF	; 255
    a502:	7f 7f       	andi	r23, 0xFF	; 255
    a504:	7f 7f       	andi	r23, 0xFF	; 255
    a506:	7f 7f       	andi	r23, 0xFF	; 255
    a508:	7f 7f       	andi	r23, 0xFF	; 255
    a50a:	7f 7f       	andi	r23, 0xFF	; 255
    a50c:	7f 7f       	andi	r23, 0xFF	; 255
    a50e:	7f 7f       	andi	r23, 0xFF	; 255
    a510:	7f 7f       	andi	r23, 0xFF	; 255
    a512:	7f 7f       	andi	r23, 0xFF	; 255
    a514:	7f 7f       	andi	r23, 0xFF	; 255
    a516:	7f 7f       	andi	r23, 0xFF	; 255
    a518:	7f 7f       	andi	r23, 0xFF	; 255
    a51a:	7f 7f       	andi	r23, 0xFF	; 255
    a51c:	7f 7f       	andi	r23, 0xFF	; 255
    a51e:	7f 7f       	andi	r23, 0xFF	; 255
    a520:	7f 7f       	andi	r23, 0xFF	; 255
    a522:	7f 7f       	andi	r23, 0xFF	; 255
    a524:	7f 7f       	andi	r23, 0xFF	; 255
    a526:	7f 7f       	andi	r23, 0xFF	; 255
    a528:	7f 7f       	andi	r23, 0xFF	; 255
    a52a:	7f 7f       	andi	r23, 0xFF	; 255
    a52c:	7f 7f       	andi	r23, 0xFF	; 255
    a52e:	7f 7f       	andi	r23, 0xFF	; 255
    a530:	7f 7f       	andi	r23, 0xFF	; 255
    a532:	7f 7f       	andi	r23, 0xFF	; 255
    a534:	7f 7f       	andi	r23, 0xFF	; 255
    a536:	7f 7f       	andi	r23, 0xFF	; 255
    a538:	7f 7f       	andi	r23, 0xFF	; 255
    a53a:	7f 7f       	andi	r23, 0xFF	; 255
    a53c:	7f 7f       	andi	r23, 0xFF	; 255
    a53e:	7f 7f       	andi	r23, 0xFF	; 255
    a540:	7f 7f       	andi	r23, 0xFF	; 255
    a542:	7f 7f       	andi	r23, 0xFF	; 255
    a544:	7f 7f       	andi	r23, 0xFF	; 255
    a546:	7f 7f       	andi	r23, 0xFF	; 255
    a548:	7f 7f       	andi	r23, 0xFF	; 255
    a54a:	7f 7f       	andi	r23, 0xFF	; 255
    a54c:	7f 7f       	andi	r23, 0xFF	; 255
    a54e:	7f 7f       	andi	r23, 0xFF	; 255
    a550:	7f 7f       	andi	r23, 0xFF	; 255
    a552:	7f 7f       	andi	r23, 0xFF	; 255
    a554:	7f 7f       	andi	r23, 0xFF	; 255
    a556:	7f 7f       	andi	r23, 0xFF	; 255
    a558:	7f 7f       	andi	r23, 0xFF	; 255
    a55a:	7f 7f       	andi	r23, 0xFF	; 255
    a55c:	7f 7f       	andi	r23, 0xFF	; 255
    a55e:	7f 7f       	andi	r23, 0xFF	; 255
    a560:	7f 7f       	andi	r23, 0xFF	; 255
    a562:	7f 7f       	andi	r23, 0xFF	; 255
    a564:	7f 7f       	andi	r23, 0xFF	; 255
    a566:	7f 7f       	andi	r23, 0xFF	; 255
    a568:	7f 7f       	andi	r23, 0xFF	; 255
    a56a:	7f 7f       	andi	r23, 0xFF	; 255
    a56c:	7f 7f       	andi	r23, 0xFF	; 255
    a56e:	7f 7f       	andi	r23, 0xFF	; 255
    a570:	7f 7f       	andi	r23, 0xFF	; 255
    a572:	7f 7f       	andi	r23, 0xFF	; 255
    a574:	7f 7f       	andi	r23, 0xFF	; 255
    a576:	7f 7f       	andi	r23, 0xFF	; 255
    a578:	7f 7f       	andi	r23, 0xFF	; 255
    a57a:	7f 7f       	andi	r23, 0xFF	; 255
    a57c:	7f 7f       	andi	r23, 0xFF	; 255
    a57e:	7f 7f       	andi	r23, 0xFF	; 255
    a580:	80 80       	ld	r8, Z
    a582:	80 80       	ld	r8, Z
    a584:	80 80       	ld	r8, Z
    a586:	80 80       	ld	r8, Z
    a588:	80 80       	ld	r8, Z
    a58a:	80 80       	ld	r8, Z
    a58c:	80 80       	ld	r8, Z
    a58e:	80 80       	ld	r8, Z
    a590:	80 80       	ld	r8, Z
    a592:	80 80       	ld	r8, Z
    a594:	80 80       	ld	r8, Z
    a596:	80 80       	ld	r8, Z
    a598:	80 80       	ld	r8, Z
    a59a:	80 80       	ld	r8, Z
    a59c:	80 80       	ld	r8, Z
    a59e:	80 80       	ld	r8, Z
    a5a0:	80 80       	ld	r8, Z
    a5a2:	80 80       	ld	r8, Z
    a5a4:	80 80       	ld	r8, Z
    a5a6:	80 80       	ld	r8, Z
    a5a8:	80 80       	ld	r8, Z
    a5aa:	80 80       	ld	r8, Z
    a5ac:	80 80       	ld	r8, Z
    a5ae:	80 80       	ld	r8, Z
    a5b0:	80 80       	ld	r8, Z
    a5b2:	80 80       	ld	r8, Z
    a5b4:	80 80       	ld	r8, Z
    a5b6:	80 80       	ld	r8, Z
    a5b8:	80 80       	ld	r8, Z
    a5ba:	80 80       	ld	r8, Z
    a5bc:	80 80       	ld	r8, Z
    a5be:	80 80       	ld	r8, Z
    a5c0:	80 80       	ld	r8, Z
    a5c2:	80 80       	ld	r8, Z
    a5c4:	80 80       	ld	r8, Z
    a5c6:	80 80       	ld	r8, Z
    a5c8:	80 80       	ld	r8, Z
    a5ca:	80 80       	ld	r8, Z
    a5cc:	80 80       	ld	r8, Z
    a5ce:	80 80       	ld	r8, Z
    a5d0:	80 80       	ld	r8, Z
    a5d2:	80 80       	ld	r8, Z
    a5d4:	80 80       	ld	r8, Z
    a5d6:	80 80       	ld	r8, Z
    a5d8:	80 80       	ld	r8, Z
    a5da:	80 80       	ld	r8, Z
    a5dc:	80 80       	ld	r8, Z
    a5de:	80 80       	ld	r8, Z
    a5e0:	80 80       	ld	r8, Z
    a5e2:	80 80       	ld	r8, Z
    a5e4:	80 80       	ld	r8, Z
    a5e6:	80 80       	ld	r8, Z
    a5e8:	80 80       	ld	r8, Z
    a5ea:	80 80       	ld	r8, Z
    a5ec:	80 80       	ld	r8, Z
    a5ee:	80 80       	ld	r8, Z
    a5f0:	80 80       	ld	r8, Z
    a5f2:	80 80       	ld	r8, Z
    a5f4:	80 80       	ld	r8, Z
    a5f6:	80 80       	ld	r8, Z
    a5f8:	80 80       	ld	r8, Z
    a5fa:	80 80       	ld	r8, Z
    a5fc:	80 80       	ld	r8, Z
    a5fe:	80 80       	ld	r8, Z
    a600:	7f 7f       	andi	r23, 0xFF	; 255
    a602:	7f 7f       	andi	r23, 0xFF	; 255
    a604:	7f 7f       	andi	r23, 0xFF	; 255
    a606:	7f 7f       	andi	r23, 0xFF	; 255
    a608:	7f 7f       	andi	r23, 0xFF	; 255
    a60a:	7f 7f       	andi	r23, 0xFF	; 255
    a60c:	7f 7f       	andi	r23, 0xFF	; 255
    a60e:	7f 7f       	andi	r23, 0xFF	; 255
    a610:	7f 7f       	andi	r23, 0xFF	; 255
    a612:	7f 7f       	andi	r23, 0xFF	; 255
    a614:	7f 7f       	andi	r23, 0xFF	; 255
    a616:	7f 7f       	andi	r23, 0xFF	; 255
    a618:	7f 7f       	andi	r23, 0xFF	; 255
    a61a:	7f 7f       	andi	r23, 0xFF	; 255
    a61c:	7f 7f       	andi	r23, 0xFF	; 255
    a61e:	7f 7f       	andi	r23, 0xFF	; 255
    a620:	7f 7f       	andi	r23, 0xFF	; 255
    a622:	7f 7f       	andi	r23, 0xFF	; 255
    a624:	7f 7f       	andi	r23, 0xFF	; 255
    a626:	7f 7f       	andi	r23, 0xFF	; 255
    a628:	7f 7f       	andi	r23, 0xFF	; 255
    a62a:	7f 7f       	andi	r23, 0xFF	; 255
    a62c:	7f 7f       	andi	r23, 0xFF	; 255
    a62e:	7f 7f       	andi	r23, 0xFF	; 255
    a630:	7f 7f       	andi	r23, 0xFF	; 255
    a632:	7f 7f       	andi	r23, 0xFF	; 255
    a634:	7f 7f       	andi	r23, 0xFF	; 255
    a636:	7f 7f       	andi	r23, 0xFF	; 255
    a638:	7f 7f       	andi	r23, 0xFF	; 255
    a63a:	7f 7f       	andi	r23, 0xFF	; 255
    a63c:	7f 7f       	andi	r23, 0xFF	; 255
    a63e:	7f 7f       	andi	r23, 0xFF	; 255
    a640:	80 80       	ld	r8, Z
    a642:	80 80       	ld	r8, Z
    a644:	80 80       	ld	r8, Z
    a646:	80 80       	ld	r8, Z
    a648:	80 80       	ld	r8, Z
    a64a:	80 80       	ld	r8, Z
    a64c:	80 80       	ld	r8, Z
    a64e:	80 80       	ld	r8, Z
    a650:	80 80       	ld	r8, Z
    a652:	80 80       	ld	r8, Z
    a654:	80 80       	ld	r8, Z
    a656:	80 80       	ld	r8, Z
    a658:	80 80       	ld	r8, Z
    a65a:	80 80       	ld	r8, Z
    a65c:	80 80       	ld	r8, Z
    a65e:	80 80       	ld	r8, Z
    a660:	80 80       	ld	r8, Z
    a662:	80 80       	ld	r8, Z
    a664:	80 80       	ld	r8, Z
    a666:	80 80       	ld	r8, Z
    a668:	80 80       	ld	r8, Z
    a66a:	80 80       	ld	r8, Z
    a66c:	80 80       	ld	r8, Z
    a66e:	80 80       	ld	r8, Z
    a670:	80 80       	ld	r8, Z
    a672:	80 80       	ld	r8, Z
    a674:	80 80       	ld	r8, Z
    a676:	80 80       	ld	r8, Z
    a678:	80 80       	ld	r8, Z
    a67a:	80 80       	ld	r8, Z
    a67c:	80 80       	ld	r8, Z
    a67e:	80 80       	ld	r8, Z
    a680:	80 80       	ld	r8, Z
    a682:	80 80       	ld	r8, Z
    a684:	80 80       	ld	r8, Z
    a686:	80 80       	ld	r8, Z
    a688:	80 80       	ld	r8, Z
    a68a:	80 80       	ld	r8, Z
    a68c:	80 80       	ld	r8, Z
    a68e:	80 80       	ld	r8, Z
    a690:	80 80       	ld	r8, Z
    a692:	80 80       	ld	r8, Z
    a694:	80 80       	ld	r8, Z
    a696:	80 80       	ld	r8, Z
    a698:	80 80       	ld	r8, Z
    a69a:	80 80       	ld	r8, Z
    a69c:	80 80       	ld	r8, Z
    a69e:	80 80       	ld	r8, Z
    a6a0:	80 80       	ld	r8, Z
    a6a2:	80 80       	ld	r8, Z
    a6a4:	80 80       	ld	r8, Z
    a6a6:	80 80       	ld	r8, Z
    a6a8:	80 80       	ld	r8, Z
    a6aa:	80 80       	ld	r8, Z
    a6ac:	80 80       	ld	r8, Z
    a6ae:	80 80       	ld	r8, Z
    a6b0:	80 80       	ld	r8, Z
    a6b2:	80 80       	ld	r8, Z
    a6b4:	80 80       	ld	r8, Z
    a6b6:	80 80       	ld	r8, Z
    a6b8:	80 80       	ld	r8, Z
    a6ba:	80 80       	ld	r8, Z
    a6bc:	80 80       	ld	r8, Z
    a6be:	80 80       	ld	r8, Z
    a6c0:	80 80       	ld	r8, Z
    a6c2:	80 80       	ld	r8, Z
    a6c4:	80 80       	ld	r8, Z
    a6c6:	80 80       	ld	r8, Z
    a6c8:	80 80       	ld	r8, Z
    a6ca:	80 80       	ld	r8, Z
    a6cc:	80 80       	ld	r8, Z
    a6ce:	80 80       	ld	r8, Z
    a6d0:	80 80       	ld	r8, Z
    a6d2:	80 80       	ld	r8, Z
    a6d4:	80 80       	ld	r8, Z
    a6d6:	80 80       	ld	r8, Z
    a6d8:	80 80       	ld	r8, Z
    a6da:	80 80       	ld	r8, Z
    a6dc:	80 80       	ld	r8, Z
    a6de:	80 80       	ld	r8, Z
    a6e0:	80 80       	ld	r8, Z
    a6e2:	80 80       	ld	r8, Z
    a6e4:	80 80       	ld	r8, Z
    a6e6:	80 80       	ld	r8, Z
    a6e8:	80 80       	ld	r8, Z
    a6ea:	80 80       	ld	r8, Z
    a6ec:	80 80       	ld	r8, Z
    a6ee:	80 80       	ld	r8, Z
    a6f0:	80 80       	ld	r8, Z
    a6f2:	80 80       	ld	r8, Z
    a6f4:	80 80       	ld	r8, Z
    a6f6:	80 80       	ld	r8, Z
    a6f8:	80 80       	ld	r8, Z
    a6fa:	80 80       	ld	r8, Z
    a6fc:	80 80       	ld	r8, Z
    a6fe:	80 80       	ld	r8, Z

0000a700 <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    a700:	08 95       	ret

0000a702 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
	}
    a702:	08 95       	ret

0000a704 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    a704:	98 2f       	mov	r25, r24
	if(speed==0){
    a706:	88 23       	and	r24, r24
    a708:	19 f4       	brne	.+6      	; 0xa710 <FadeIn+0xc>
		DDRC=0xff;
    a70a:	8f ef       	ldi	r24, 0xFF	; 255
    a70c:	87 b9       	out	0x07, r24	; 7
    a70e:	08 95       	ret
		return;
	}
	fadeStep=1;
    a710:	81 e0       	ldi	r24, 0x01	; 1
    a712:	80 93 6b 0e 	sts	0x0E6B, r24
	fadeDir=1;
    a716:	80 93 67 0e 	sts	0x0E67, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a71a:	90 93 66 0e 	sts	0x0E66, r25
	currFadeFrame=0;
    a71e:	10 92 6a 0e 	sts	0x0E6A, r1
	fadeActive=true;
    a722:	80 93 69 0e 	sts	0x0E69, r24
		
	if(blocking){
    a726:	66 23       	and	r22, r22
    a728:	21 f0       	breq	.+8      	; 0xa732 <FadeIn+0x2e>
		while(fadeActive==true);
    a72a:	80 91 69 0e 	lds	r24, 0x0E69
    a72e:	88 23       	and	r24, r24
    a730:	e1 f7       	brne	.-8      	; 0xa72a <FadeIn+0x26>
    a732:	08 95       	ret

0000a734 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    a734:	98 2f       	mov	r25, r24
	if(speed==0){
    a736:	88 23       	and	r24, r24
    a738:	11 f4       	brne	.+4      	; 0xa73e <FadeOut+0xa>
		DDRC=0;
    a73a:	17 b8       	out	0x07, r1	; 7
    a73c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    a73e:	8c e0       	ldi	r24, 0x0C	; 12
    a740:	80 93 6b 0e 	sts	0x0E6B, r24
	fadeDir=-1;
    a744:	8f ef       	ldi	r24, 0xFF	; 255
    a746:	80 93 67 0e 	sts	0x0E67, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a74a:	90 93 66 0e 	sts	0x0E66, r25
	currFadeFrame=0;
    a74e:	10 92 6a 0e 	sts	0x0E6A, r1
	fadeActive=true;
    a752:	81 e0       	ldi	r24, 0x01	; 1
    a754:	80 93 69 0e 	sts	0x0E69, r24
		
	if(blocking){
    a758:	66 23       	and	r22, r22
    a75a:	21 f0       	breq	.+8      	; 0xa764 <FadeOut+0x30>
		while(fadeActive==true);
    a75c:	80 91 69 0e 	lds	r24, 0x0E69
    a760:	88 23       	and	r24, r24
    a762:	e1 f7       	brne	.-8      	; 0xa75c <FadeOut+0x28>
    a764:	08 95       	ret

0000a766 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a766:	80 91 69 0e 	lds	r24, 0x0E69
    a76a:	88 23       	and	r24, r24
    a76c:	f9 f0       	breq	.+62     	; 0xa7ac <ProcessFading+0x46>
		if(currFadeFrame==0){
    a76e:	80 91 6a 0e 	lds	r24, 0x0E6A
    a772:	88 23       	and	r24, r24
    a774:	c1 f4       	brne	.+48     	; 0xa7a6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    a776:	80 91 66 0e 	lds	r24, 0x0E66
    a77a:	80 93 6a 0e 	sts	0x0E6A, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a77e:	80 91 6b 0e 	lds	r24, 0x0E6B
    a782:	e8 2f       	mov	r30, r24
    a784:	f0 e0       	ldi	r31, 0x00	; 0
    a786:	e9 52       	subi	r30, 0x29	; 41
    a788:	ff 4f       	sbci	r31, 0xFF	; 255
    a78a:	e4 91       	lpm	r30, Z+
    a78c:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a78e:	90 91 67 0e 	lds	r25, 0x0E67
    a792:	98 0f       	add	r25, r24
    a794:	90 93 6b 0e 	sts	0x0E6B, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a798:	99 23       	and	r25, r25
    a79a:	11 f0       	breq	.+4      	; 0xa7a0 <ProcessFading+0x3a>
    a79c:	9d 30       	cpi	r25, 0x0D	; 13
    a79e:	31 f4       	brne	.+12     	; 0xa7ac <ProcessFading+0x46>
				fadeActive=false;
    a7a0:	10 92 69 0e 	sts	0x0E69, r1
    a7a4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a7a6:	81 50       	subi	r24, 0x01	; 1
    a7a8:	80 93 6a 0e 	sts	0x0E6A, r24
    a7ac:	08 95       	ret

0000a7ae <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		//todo just rename ProcessFading to VideoModeVsync to eliminate call
		ProcessFading();
    a7ae:	db cf       	rjmp	.-74     	; 0xa766 <ProcessFading>


	}
    a7b0:	08 95       	ret

0000a7b2 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a7b2:	0f 93       	push	r16
    a7b4:	1f 93       	push	r17
    a7b6:	cf 93       	push	r28
    a7b8:	df 93       	push	r29
    a7ba:	8c 01       	movw	r16, r24
    a7bc:	c0 e0       	ldi	r28, 0x00	; 0
    a7be:	d0 e0       	ldi	r29, 0x00	; 0
    a7c0:	07 c0       	rjmp	.+14     	; 0xa7d0 <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    a7c2:	0e 94 dd 4a 	call	0x95ba	; 0x95ba <GetVsyncFlag>
    a7c6:	88 23       	and	r24, r24
    a7c8:	e1 f3       	breq	.-8      	; 0xa7c2 <WaitVsync+0x10>
		ClearVsyncFlag();		
    a7ca:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a7ce:	21 96       	adiw	r28, 0x01	; 1
    a7d0:	c0 17       	cp	r28, r16
    a7d2:	d1 07       	cpc	r29, r17
    a7d4:	b4 f3       	brlt	.-20     	; 0xa7c2 <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a7d6:	df 91       	pop	r29
    a7d8:	cf 91       	pop	r28
    a7da:	1f 91       	pop	r17
    a7dc:	0f 91       	pop	r16
    a7de:	08 95       	ret

0000a7e0 <rtl_FindChar>:

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
}

uint8_t rtl_FindChar(int8_t ch, const int8_t *fmap){
    a7e0:	20 e0       	ldi	r18, 0x00	; 0
    a7e2:	30 e0       	ldi	r19, 0x00	; 0
    a7e4:	42 2f       	mov	r20, r18
	uint8_t pos = 0;

	int8_t t;
	while(true){
		t = pgm_read_byte(&fmap[pos]);
    a7e6:	fb 01       	movw	r30, r22
    a7e8:	e2 0f       	add	r30, r18
    a7ea:	f1 1d       	adc	r31, r1
    a7ec:	94 91       	lpm	r25, Z+

		if(t == 0 || pos == 255)
    a7ee:	99 23       	and	r25, r25
    a7f0:	59 f0       	breq	.+22     	; 0xa808 <rtl_FindChar+0x28>
    a7f2:	2f 3f       	cpi	r18, 0xFF	; 255
    a7f4:	31 05       	cpc	r19, r1
    a7f6:	41 f0       	breq	.+16     	; 0xa808 <rtl_FindChar+0x28>
    a7f8:	2f 5f       	subi	r18, 0xFF	; 255
    a7fa:	3f 4f       	sbci	r19, 0xFF	; 255
			return 255;

		if(t != ch){
    a7fc:	98 17       	cp	r25, r24
    a7fe:	91 f7       	brne	.-28     	; 0xa7e4 <rtl_FindChar+0x4>
			pos++;
			continue;
		}
		return pos+rtl_FontStartOffset;
    a800:	80 91 9c 0e 	lds	r24, 0x0E9C
    a804:	84 0f       	add	r24, r20
    a806:	08 95       	ret
    a808:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    a80a:	08 95       	ret

0000a80c <rtl_RamifyFontEx>:
			return pos;
		pos++;
	}
}

void rtl_RamifyFontEx(uint16_t rtoff, const int8_t *cmap, const int8_t *chrlst, const uint8_t *ftiles, uint8_t backcolor, uint8_t fontcolor, bool speckles){
    a80c:	a0 e0       	ldi	r26, 0x00	; 0
    a80e:	b0 e0       	ldi	r27, 0x00	; 0
    a810:	ec e0       	ldi	r30, 0x0C	; 12
    a812:	f4 e5       	ldi	r31, 0x54	; 84
    a814:	0c 94 0b 74 	jmp	0xe816	; 0xe816 <__prologue_saves__>
    a818:	5b 01       	movw	r10, r22
    a81a:	d4 2e       	mov	r13, r20
    a81c:	35 2e       	mov	r3, r21
    a81e:	49 01       	movw	r8, r18
    a820:	40 2e       	mov	r4, r16
    a822:	5e 2c       	mov	r5, r14
	uint8_t moff = 0;
	uint8_t t,t2;
	uint8_t c;
	rtl_FontStartOffset = rtoff;
    a824:	80 93 9c 0e 	sts	0x0E9C, r24
	rtl_CharMap = (int8_t *)cmap;
    a828:	70 93 c7 0f 	sts	0x0FC7, r23
    a82c:	60 93 c6 0f 	sts	0x0FC6, r22
	rtoff *= 64;
    a830:	ec 01       	movw	r28, r24
    a832:	66 e0       	ldi	r22, 0x06	; 6
    a834:	cc 0f       	add	r28, r28
    a836:	dd 1f       	adc	r29, r29
    a838:	6a 95       	dec	r22
    a83a:	e1 f7       	brne	.-8      	; 0xa834 <rtl_RamifyFontEx+0x28>
    a83c:	ee 24       	eor	r14, r14
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
			t = pgm_read_byte(&ftiles[i]);
			for(u8 j=0;j<8;j++){
				if(t & (128>>j)){
    a83e:	50 e8       	ldi	r21, 0x80	; 128
    a840:	65 2e       	mov	r6, r21
    a842:	71 2c       	mov	r7, r1

		//do columns font speckles
		if(speckles){
			t = pgm_read_byte(&compfontspeckles[t2]);
			if(t != 255)
				ram_tiles[rtoff-64+t] = 255;
    a844:	22 24       	eor	r2, r2
    a846:	2a 94       	dec	r2
    a848:	61 c0       	rjmp	.+194    	; 0xa90c <rtl_RamifyFontEx+0x100>
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;

	while(rtoff < (RAM_TILES_COUNT*64)){
		c = pgm_read_byte(&cmap[moff++]);
    a84a:	f5 01       	movw	r30, r10
    a84c:	ee 0d       	add	r30, r14
    a84e:	f1 1d       	adc	r31, r1
    a850:	a4 91       	lpm	r26, Z+
		if(c == 0)
    a852:	aa 23       	and	r26, r26
    a854:	09 f4       	brne	.+2      	; 0xa858 <rtl_RamifyFontEx+0x4c>
    a856:	5f c0       	rjmp	.+190    	; 0xa916 <rtl_RamifyFontEx+0x10a>
			return;
		

		t2 = rtl_SearchCharList(c,chrlst);
    a858:	8d 2d       	mov	r24, r13
    a85a:	93 2d       	mov	r25, r3
    a85c:	fc 01       	movw	r30, r24
    a85e:	fe 2e       	mov	r15, r30
    a860:	fd 18       	sub	r15, r13


uint8_t rtl_SearchCharList(int8_t ch, const int8_t *chrlst){
	int8_t pos=0,t;
	while(true){
		t = pgm_read_byte(&chrlst[pos]);
    a862:	84 91       	lpm	r24, Z+
		if(t == 0 || t == 255)
    a864:	88 23       	and	r24, r24
    a866:	09 f4       	brne	.+2      	; 0xa86a <rtl_RamifyFontEx+0x5e>
    a868:	56 c0       	rjmp	.+172    	; 0xa916 <rtl_RamifyFontEx+0x10a>
    a86a:	31 96       	adiw	r30, 0x01	; 1
			return 255;
		if(t == ch)
    a86c:	8a 17       	cp	r24, r26
    a86e:	b9 f7       	brne	.-18     	; 0xa85e <rtl_RamifyFontEx+0x52>
			return;
		

		t2 = rtl_SearchCharList(c,chrlst);

		if(t2 == 255){
    a870:	8f ef       	ldi	r24, 0xFF	; 255
    a872:	f8 16       	cp	r15, r24
    a874:	09 f4       	brne	.+2      	; 0xa878 <rtl_RamifyFontEx+0x6c>
    a876:	4f c0       	rjmp	.+158    	; 0xa916 <rtl_RamifyFontEx+0x10a>
			return;	
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
    a878:	8f 2d       	mov	r24, r15
    a87a:	90 e0       	ldi	r25, 0x00	; 0
    a87c:	9c 01       	movw	r18, r24
    a87e:	43 e0       	ldi	r20, 0x03	; 3
    a880:	22 0f       	add	r18, r18
    a882:	33 1f       	adc	r19, r19
    a884:	4a 95       	dec	r20
    a886:	e1 f7       	brne	.-8      	; 0xa880 <rtl_RamifyFontEx+0x74>
    a888:	bc 01       	movw	r22, r24
    a88a:	6f 5f       	subi	r22, 0xFF	; 255
    a88c:	7f 4f       	sbci	r23, 0xFF	; 255
    a88e:	83 e0       	ldi	r24, 0x03	; 3
    a890:	66 0f       	add	r22, r22
    a892:	77 1f       	adc	r23, r23
    a894:	8a 95       	dec	r24
    a896:	e1 f7       	brne	.-8      	; 0xa890 <rtl_RamifyFontEx+0x84>
    a898:	a4 01       	movw	r20, r8
    a89a:	42 0f       	add	r20, r18
    a89c:	53 1f       	adc	r21, r19
    a89e:	21 c0       	rjmp	.+66     	; 0xa8e2 <rtl_RamifyFontEx+0xd6>
			t = pgm_read_byte(&ftiles[i]);
    a8a0:	fa 01       	movw	r30, r20
    a8a2:	84 91       	lpm	r24, Z+
    a8a4:	fe 01       	movw	r30, r28
    a8a6:	e4 5d       	subi	r30, 0xD4	; 212
    a8a8:	fb 4f       	sbci	r31, 0xFB	; 251
    a8aa:	a0 e0       	ldi	r26, 0x00	; 0
    a8ac:	b0 e0       	ldi	r27, 0x00	; 0
			for(u8 j=0;j<8;j++){
				if(t & (128>>j)){
    a8ae:	08 2f       	mov	r16, r24
    a8b0:	10 e0       	ldi	r17, 0x00	; 0
    a8b2:	c3 01       	movw	r24, r6
    a8b4:	0a 2e       	mov	r0, r26
    a8b6:	02 c0       	rjmp	.+4      	; 0xa8bc <rtl_RamifyFontEx+0xb0>
    a8b8:	95 95       	asr	r25
    a8ba:	87 95       	ror	r24
    a8bc:	0a 94       	dec	r0
    a8be:	e2 f7       	brpl	.-8      	; 0xa8b8 <rtl_RamifyFontEx+0xac>
    a8c0:	80 23       	and	r24, r16
    a8c2:	91 23       	and	r25, r17
    a8c4:	89 2b       	or	r24, r25
    a8c6:	11 f0       	breq	.+4      	; 0xa8cc <rtl_RamifyFontEx+0xc0>
						ram_tiles[rtoff] = fontcolor;
    a8c8:	50 82       	st	Z, r5
    a8ca:	01 c0       	rjmp	.+2      	; 0xa8ce <rtl_RamifyFontEx+0xc2>
				}
				else
					ram_tiles[rtoff] = backcolor;
    a8cc:	40 82       	st	Z, r4
    a8ce:	11 96       	adiw	r26, 0x01	; 1
    a8d0:	31 96       	adiw	r30, 0x01	; 1
			return;	
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
			t = pgm_read_byte(&ftiles[i]);
			for(u8 j=0;j<8;j++){
    a8d2:	a8 30       	cpi	r26, 0x08	; 8
    a8d4:	b1 05       	cpc	r27, r1
    a8d6:	69 f7       	brne	.-38     	; 0xa8b2 <rtl_RamifyFontEx+0xa6>
    a8d8:	28 96       	adiw	r28, 0x08	; 8

		if(t2 == 255){
			return;	
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
    a8da:	2f 5f       	subi	r18, 0xFF	; 255
    a8dc:	3f 4f       	sbci	r19, 0xFF	; 255
    a8de:	4f 5f       	subi	r20, 0xFF	; 255
    a8e0:	5f 4f       	sbci	r21, 0xFF	; 255
    a8e2:	26 17       	cp	r18, r22
    a8e4:	37 07       	cpc	r19, r23
    a8e6:	e0 f2       	brcs	.-72     	; 0xa8a0 <rtl_RamifyFontEx+0x94>
				rtoff++;
			}
		}

		//do columns font speckles
		if(speckles){
    a8e8:	cc 20       	and	r12, r12
    a8ea:	79 f0       	breq	.+30     	; 0xa90a <rtl_RamifyFontEx+0xfe>
			t = pgm_read_byte(&compfontspeckles[t2]);
    a8ec:	ef 2d       	mov	r30, r15
    a8ee:	f0 e0       	ldi	r31, 0x00	; 0
    a8f0:	e8 52       	subi	r30, 0x28	; 40
    a8f2:	f4 4e       	sbci	r31, 0xE4	; 228
    a8f4:	84 91       	lpm	r24, Z+
			if(t != 255)
    a8f6:	8f 3f       	cpi	r24, 0xFF	; 255
    a8f8:	41 f0       	breq	.+16     	; 0xa90a <rtl_RamifyFontEx+0xfe>
				ram_tiles[rtoff-64+t] = 255;
    a8fa:	fe 01       	movw	r30, r28
    a8fc:	e4 5d       	subi	r30, 0xD4	; 212
    a8fe:	fb 4f       	sbci	r31, 0xFB	; 251
    a900:	e8 0f       	add	r30, r24
    a902:	f1 1d       	adc	r31, r1
    a904:	e0 54       	subi	r30, 0x40	; 64
    a906:	f0 40       	sbci	r31, 0x00	; 0
    a908:	20 82       	st	Z, r2
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;

	while(rtoff < (RAM_TILES_COUNT*64)){
		c = pgm_read_byte(&cmap[moff++]);
    a90a:	e3 94       	inc	r14
	uint8_t c;
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;

	while(rtoff < (RAM_TILES_COUNT*64)){
    a90c:	f9 e0       	ldi	r31, 0x09	; 9
    a90e:	c0 30       	cpi	r28, 0x00	; 0
    a910:	df 07       	cpc	r29, r31
    a912:	08 f4       	brcc	.+2      	; 0xa916 <rtl_RamifyFontEx+0x10a>
    a914:	9a cf       	rjmp	.-204    	; 0xa84a <rtl_RamifyFontEx+0x3e>
			if(t != 255)
				ram_tiles[rtoff-64+t] = 255;
		}		

	}
}
    a916:	cd b7       	in	r28, 0x3d	; 61
    a918:	de b7       	in	r29, 0x3e	; 62
    a91a:	e2 e1       	ldi	r30, 0x12	; 18
    a91c:	0c 94 27 74 	jmp	0xe84e	; 0xe84e <__epilogue_restores__>

0000a920 <rtl_PrintEx>:


void rtl_PrintEx(uint8_t x, uint8_t y, const char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
    a920:	a0 e0       	ldi	r26, 0x00	; 0
    a922:	b0 e0       	ldi	r27, 0x00	; 0
    a924:	e6 e9       	ldi	r30, 0x96	; 150
    a926:	f4 e5       	ldi	r31, 0x54	; 84
    a928:	0c 94 15 74 	jmp	0xe82a	; 0xe82a <__prologue_saves__+0x14>
    a92c:	08 2f       	mov	r16, r24
    a92e:	6a 01       	movw	r12, r20
    a930:	79 01       	movw	r14, r18

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    a932:	8e e1       	ldi	r24, 0x1E	; 30
    a934:	68 9f       	mul	r22, r24
    a936:	e0 01       	movw	r28, r0
    a938:	11 24       	eor	r1, r1
    a93a:	10 e0       	ldi	r17, 0x00	; 0
    a93c:	c0 5e       	subi	r28, 0xE0	; 224
    a93e:	de 4f       	sbci	r29, 0xFE	; 254
    a940:	01 c0       	rjmp	.+2      	; 0xa944 <rtl_PrintEx+0x24>
    a942:	0f 5f       	subi	r16, 0xFF	; 255
void rtl_PrintEx(uint8_t x, uint8_t y, const char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
	uint8_t t,i=0;
	int8_t c;

	while(true){
		c = pgm_read_byte(&string[i++]);
    a944:	f6 01       	movw	r30, r12
    a946:	e1 0f       	add	r30, r17
    a948:	f1 1d       	adc	r31, r1
    a94a:	1f 5f       	subi	r17, 0xFF	; 255
    a94c:	84 91       	lpm	r24, Z+
		
		if(c == 0)
    a94e:	88 23       	and	r24, r24
    a950:	69 f0       	breq	.+26     	; 0xa96c <rtl_PrintEx+0x4c>
			return;

		if(x > VRAM_TILES_H-1){
    a952:	0e 31       	cpi	r16, 0x1E	; 30
    a954:	b0 f7       	brcc	.-20     	; 0xa942 <rtl_PrintEx+0x22>
			x++;
			continue;
		}		
		else if(c == ' '){
    a956:	80 32       	cpi	r24, 0x20	; 32
    a958:	a1 f3       	breq	.-24     	; 0xa942 <rtl_PrintEx+0x22>
		//	rtl_SetVram(x,y,blank);
			x++;
			continue;
		}

		t = rtl_FindChar(c,cmap);
    a95a:	b7 01       	movw	r22, r14
    a95c:	41 df       	rcall	.-382    	; 0xa7e0 <rtl_FindChar>

		if(t > RAM_TILES_COUNT){
    a95e:	85 32       	cpi	r24, 0x25	; 37
    a960:	80 f7       	brcc	.-32     	; 0xa942 <rtl_PrintEx+0x22>

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    a962:	fe 01       	movw	r30, r28
    a964:	e0 0f       	add	r30, r16
    a966:	f1 1d       	adc	r31, r1
    a968:	80 83       	st	Z, r24
    a96a:	eb cf       	rjmp	.-42     	; 0xa942 <rtl_PrintEx+0x22>
			continue;
		}

		rtl_SetVram(x++,y,t);
	}
}
    a96c:	cd b7       	in	r28, 0x3d	; 61
    a96e:	de b7       	in	r29, 0x3e	; 62
    a970:	e8 e0       	ldi	r30, 0x08	; 8
    a972:	0c 94 31 74 	jmp	0xe862	; 0xe862 <__epilogue_restores__+0x14>

0000a976 <rtl_Print>:


void rtl_Print(uint8_t x, uint8_t y, const char *string){
    a976:	ef 92       	push	r14
    a978:	0f 93       	push	r16
	rtl_PrintEx(x,y,string,rtl_CharMap,rtl_FontStartOffset,0);
    a97a:	20 91 c6 0f 	lds	r18, 0x0FC6
    a97e:	30 91 c7 0f 	lds	r19, 0x0FC7
    a982:	00 91 9c 0e 	lds	r16, 0x0E9C
    a986:	ee 24       	eor	r14, r14
    a988:	cb df       	rcall	.-106    	; 0xa920 <rtl_PrintEx>
}
    a98a:	0f 91       	pop	r16
    a98c:	ef 90       	pop	r14
    a98e:	08 95       	ret

0000a990 <open_for_piece>:
	for(uint8_t i=0;i<3;i++){
		set_well(piecex[p],piecey[p]+i,p,0);
		}*/
}//set_well(piecex[p],piecey[p]+0,p,0);set_well(piecex[p],piecey[p]+1,p,0);set_well(piecex[p],piecey[p]+2,p,0);}
bool open_for_piece(uint8_t x, uint8_t y, uint8_t p){
	uint8_t off = (y*6)+x+(p*WELLSIZE);
    a990:	e4 2f       	mov	r30, r20
    a992:	f0 e0       	ldi	r31, 0x00	; 0
    a994:	96 e0       	ldi	r25, 0x06	; 6
    a996:	69 9f       	mul	r22, r25
    a998:	b0 01       	movw	r22, r0
    a99a:	11 24       	eor	r1, r1
    a99c:	58 2f       	mov	r21, r24
    a99e:	56 0f       	add	r21, r22
    a9a0:	80 e6       	ldi	r24, 0x60	; 96
    a9a2:	90 e0       	ldi	r25, 0x00	; 0
    a9a4:	9c 01       	movw	r18, r24
    a9a6:	e2 9f       	mul	r30, r18
    a9a8:	c0 01       	movw	r24, r0
    a9aa:	e3 9f       	mul	r30, r19
    a9ac:	90 0d       	add	r25, r0
    a9ae:	f2 9f       	mul	r31, r18
    a9b0:	90 0d       	add	r25, r0
    a9b2:	11 24       	eor	r1, r1
    a9b4:	58 0f       	add	r21, r24
	
	for(uint8_t i=0;i<3+halfstep[p];i++){
    a9b6:	ef 54       	subi	r30, 0x4F	; 79
    a9b8:	f0 4f       	sbci	r31, 0xF0	; 240
    a9ba:	80 81       	ld	r24, Z
    a9bc:	28 2f       	mov	r18, r24
    a9be:	30 e0       	ldi	r19, 0x00	; 0
    a9c0:	2e 5f       	subi	r18, 0xFE	; 254
    a9c2:	3f 4f       	sbci	r19, 0xFF	; 255
    a9c4:	40 e0       	ldi	r20, 0x00	; 0
    a9c6:	0b c0       	rjmp	.+22     	; 0xa9de <open_for_piece+0x4e>
		if(well[off]){return false;}
    a9c8:	e5 2f       	mov	r30, r21
    a9ca:	f0 e0       	ldi	r31, 0x00	; 0
    a9cc:	e3 55       	subi	r30, 0x53	; 83
    a9ce:	f1 4f       	sbci	r31, 0xF1	; 241
    a9d0:	80 81       	ld	r24, Z
    a9d2:	88 23       	and	r24, r24
    a9d4:	11 f0       	breq	.+4      	; 0xa9da <open_for_piece+0x4a>
    a9d6:	80 e0       	ldi	r24, 0x00	; 0
    a9d8:	08 95       	ret
		off += 6;
    a9da:	5a 5f       	subi	r21, 0xFA	; 250
		}*/
}//set_well(piecex[p],piecey[p]+0,p,0);set_well(piecex[p],piecey[p]+1,p,0);set_well(piecex[p],piecey[p]+2,p,0);}
bool open_for_piece(uint8_t x, uint8_t y, uint8_t p){
	uint8_t off = (y*6)+x+(p*WELLSIZE);
	
	for(uint8_t i=0;i<3+halfstep[p];i++){
    a9dc:	4f 5f       	subi	r20, 0xFF	; 255
    a9de:	84 2f       	mov	r24, r20
    a9e0:	90 e0       	ldi	r25, 0x00	; 0
    a9e2:	28 17       	cp	r18, r24
    a9e4:	39 07       	cpc	r19, r25
    a9e6:	84 f7       	brge	.-32     	; 0xa9c8 <open_for_piece+0x38>
    a9e8:	81 e0       	ldi	r24, 0x01	; 1
		if(well[off]){return false;}
		off += 6;
	}
	return true;
}
    a9ea:	08 95       	ret

0000a9ec <prng>:


uint16_t prng(uint8_t p){
	uint16_t bit;
  /* taps: 16 14 13 11; characteristic polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
	bit  = ((lfsr[p] >> 0) ^ (lfsr[p] >> 2) ^ (lfsr[p] >> 3) ^ (lfsr[p] >> 5) ) & 1;
    a9ec:	e8 2f       	mov	r30, r24
    a9ee:	f0 e0       	ldi	r31, 0x00	; 0
    a9f0:	ee 0f       	add	r30, r30
    a9f2:	ff 1f       	adc	r31, r31
    a9f4:	e7 56       	subi	r30, 0x67	; 103
    a9f6:	f0 4f       	sbci	r31, 0xF0	; 240
    a9f8:	80 81       	ld	r24, Z
    a9fa:	91 81       	ldd	r25, Z+1	; 0x01
	lfsr[p] =  (lfsr[p] >> 1) | (bit << 15);
    a9fc:	9c 01       	movw	r18, r24
    a9fe:	36 95       	lsr	r19
    aa00:	27 95       	ror	r18
    aa02:	36 95       	lsr	r19
    aa04:	27 95       	ror	r18
    aa06:	ac 01       	movw	r20, r24
    aa08:	73 e0       	ldi	r23, 0x03	; 3
    aa0a:	56 95       	lsr	r21
    aa0c:	47 95       	ror	r20
    aa0e:	7a 95       	dec	r23
    aa10:	e1 f7       	brne	.-8      	; 0xaa0a <prng+0x1e>
    aa12:	24 27       	eor	r18, r20
    aa14:	35 27       	eor	r19, r21
    aa16:	28 27       	eor	r18, r24
    aa18:	39 27       	eor	r19, r25
    aa1a:	ac 01       	movw	r20, r24
    aa1c:	65 e0       	ldi	r22, 0x05	; 5
    aa1e:	56 95       	lsr	r21
    aa20:	47 95       	ror	r20
    aa22:	6a 95       	dec	r22
    aa24:	e1 f7       	brne	.-8      	; 0xaa1e <prng+0x32>
    aa26:	24 27       	eor	r18, r20
    aa28:	35 27       	eor	r19, r21
    aa2a:	33 27       	eor	r19, r19
    aa2c:	26 95       	lsr	r18
    aa2e:	37 95       	ror	r19
    aa30:	22 27       	eor	r18, r18
    aa32:	96 95       	lsr	r25
    aa34:	87 95       	ror	r24
    aa36:	28 2b       	or	r18, r24
    aa38:	39 2b       	or	r19, r25
    aa3a:	31 83       	std	Z+1, r19	; 0x01
    aa3c:	20 83       	st	Z, r18
	return lfsr[p];
}
    aa3e:	c9 01       	movw	r24, r18
    aa40:	08 95       	ret

0000aa42 <ColumnsPrint2num>:
/////////////////////////////////////////////////////////////////////////////////////////




void ColumnsPrint2num(uint8_t x, uint8_t y, uint16_t val){
    aa42:	1f 93       	push	r17
    aa44:	cf 93       	push	r28
    aa46:	df 93       	push	r29
    aa48:	18 2f       	mov	r17, r24
    aa4a:	ea 01       	movw	r28, r20
    aa4c:	44 36       	cpi	r20, 0x64	; 100
    aa4e:	51 05       	cpc	r21, r1
    aa50:	10 f0       	brcs	.+4      	; 0xaa56 <ColumnsPrint2num+0x14>
    aa52:	c3 e6       	ldi	r28, 0x63	; 99
    aa54:	d0 e0       	ldi	r29, 0x00	; 0

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    aa56:	ee e1       	ldi	r30, 0x1E	; 30
    aa58:	6e 9f       	mul	r22, r30
    aa5a:	f0 01       	movw	r30, r0
    aa5c:	11 24       	eor	r1, r1
    aa5e:	e0 5e       	subi	r30, 0xE0	; 224
    aa60:	fe 4f       	sbci	r31, 0xFE	; 254
    aa62:	9f 01       	movw	r18, r30
    aa64:	21 0f       	add	r18, r17
    aa66:	31 1d       	adc	r19, r1
    aa68:	ce 01       	movw	r24, r28
    aa6a:	6a e0       	ldi	r22, 0x0A	; 10
    aa6c:	70 e0       	ldi	r23, 0x00	; 0
    aa6e:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    aa72:	83 5b       	subi	r24, 0xB3	; 179
    aa74:	d9 01       	movw	r26, r18
    aa76:	8c 93       	st	X, r24
	set_vram(x--,y,(val%10)+RAM_TILES_COUNT+41);
//	if(val/10)
		set_vram(x,y,(val/10)+RAM_TILES_COUNT+41);	
//	else
//		SetTile(x,y,10);
}
    aa78:	11 50       	subi	r17, 0x01	; 1
    aa7a:	e1 0f       	add	r30, r17
    aa7c:	f1 1d       	adc	r31, r1
    aa7e:	ce 01       	movw	r24, r28
    aa80:	6a e0       	ldi	r22, 0x0A	; 10
    aa82:	70 e0       	ldi	r23, 0x00	; 0
    aa84:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    aa88:	63 5b       	subi	r22, 0xB3	; 179
    aa8a:	60 83       	st	Z, r22
    aa8c:	df 91       	pop	r29
    aa8e:	cf 91       	pop	r28
    aa90:	1f 91       	pop	r17
    aa92:	08 95       	ret

0000aa94 <ColumnsPrint3num>:
	set_vram(x,y,(val/100)+RAM_TILES_COUNT+41);
//	else
//		SetTile(x,y,10);
}

void ColumnsPrint3num(uint8_t x,uint8_t y, uint16_t val){
    aa94:	0f 93       	push	r16
    aa96:	1f 93       	push	r17
    aa98:	cf 93       	push	r28
    aa9a:	df 93       	push	r29
    aa9c:	18 2f       	mov	r17, r24
    aa9e:	9a 01       	movw	r18, r20
    aaa0:	8e e1       	ldi	r24, 0x1E	; 30
    aaa2:	68 9f       	mul	r22, r24
    aaa4:	e0 01       	movw	r28, r0
    aaa6:	11 24       	eor	r1, r1
    aaa8:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char c,i;

	for(i=0;i<4;i++){
		c=val%10;
		if(val>0 || i==0){
    aaaa:	c0 5e       	subi	r28, 0xE0	; 224
    aaac:	de 4f       	sbci	r29, 0xFE	; 254
    aaae:	04 e2       	ldi	r16, 0x24	; 36
    aab0:	81 2f       	mov	r24, r17
    aab2:	84 1b       	sub	r24, r20
    aab4:	21 15       	cp	r18, r1
    aab6:	31 05       	cpc	r19, r1
    aab8:	11 f4       	brne	.+4      	; 0xaabe <ColumnsPrint3num+0x2a>
    aaba:	44 23       	and	r20, r20
    aabc:	59 f4       	brne	.+22     	; 0xaad4 <ColumnsPrint3num+0x40>
    aabe:	fe 01       	movw	r30, r28
    aac0:	e8 0f       	add	r30, r24
    aac2:	f1 1d       	adc	r31, r1
    aac4:	c9 01       	movw	r24, r18
    aac6:	6a e0       	ldi	r22, 0x0A	; 10
    aac8:	70 e0       	ldi	r23, 0x00	; 0
    aaca:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    aace:	83 5b       	subi	r24, 0xB3	; 179
    aad0:	80 83       	st	Z, r24
    aad2:	04 c0       	rjmp	.+8      	; 0xaadc <ColumnsPrint3num+0x48>
    aad4:	fe 01       	movw	r30, r28
    aad6:	e8 0f       	add	r30, r24
    aad8:	f1 1d       	adc	r31, r1
    aada:	00 83       	st	Z, r16
}

void ColumnsPrint3num(uint8_t x,uint8_t y, uint16_t val){
	unsigned char c,i;

	for(i=0;i<4;i++){
    aadc:	4f 5f       	subi	r20, 0xFF	; 255
    aade:	44 30       	cpi	r20, 0x04	; 4
    aae0:	39 f0       	breq	.+14     	; 0xaaf0 <ColumnsPrint3num+0x5c>
		if(val>0 || i==0){
			set_vram(x--,y,c+41+RAM_TILES_COUNT);
		}else{
				set_vram(x--,y,0+RAM_TILES_COUNT);
		}
		val=val/10;
    aae2:	c9 01       	movw	r24, r18
    aae4:	6a e0       	ldi	r22, 0x0A	; 10
    aae6:	70 e0       	ldi	r23, 0x00	; 0
    aae8:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    aaec:	9b 01       	movw	r18, r22
    aaee:	e0 cf       	rjmp	.-64     	; 0xaab0 <ColumnsPrint3num+0x1c>
	}
	
}
    aaf0:	df 91       	pop	r29
    aaf2:	cf 91       	pop	r28
    aaf4:	1f 91       	pop	r17
    aaf6:	0f 91       	pop	r16
    aaf8:	08 95       	ret

0000aafa <ColumnsDrawMap>:
		c=((c&127)-32)+(offset);			
		SetTile(x++,y,c);
	}
}*/

void ColumnsDrawMap(int16_t sx, int16_t sy, uint8_t w, uint8_t h, uint16_t o, const char *map, int16_t toff){
    aafa:	a0 e0       	ldi	r26, 0x00	; 0
    aafc:	b0 e0       	ldi	r27, 0x00	; 0
    aafe:	e3 e8       	ldi	r30, 0x83	; 131
    ab00:	f5 e5       	ldi	r31, 0x55	; 85
    ab02:	0c 94 0e 74 	jmp	0xe81c	; 0xe81c <__prologue_saves__+0x6>
    ab06:	5c 01       	movw	r10, r24
    ab08:	38 01       	movw	r6, r16
    ab0a:	f6 01       	movw	r30, r12
    ab0c:	cb 01       	movw	r24, r22
    ab0e:	88 0f       	add	r24, r24
    ab10:	99 1f       	adc	r25, r25
    ab12:	db 01       	movw	r26, r22
    ab14:	35 e0       	ldi	r19, 0x05	; 5
    ab16:	aa 0f       	add	r26, r26
    ab18:	bb 1f       	adc	r27, r27
    ab1a:	3a 95       	dec	r19
    ab1c:	e1 f7       	brne	.-8      	; 0xab16 <ColumnsDrawMap+0x1c>
    ab1e:	a8 1b       	sub	r26, r24
    ab20:	b9 0b       	sbc	r27, r25
    ab22:	aa 0d       	add	r26, r10
    ab24:	bb 1d       	adc	r27, r11
	int16_t t;
	for(int16_t y=sy;y<sy+h;y++){
    ab26:	4b 01       	movw	r8, r22
    ab28:	82 0e       	add	r8, r18
    ab2a:	91 1c       	adc	r9, r1
		if(y > VRAM_TILES_V-1 || y < 0){
			map += w;
    ab2c:	50 e0       	ldi	r21, 0x00	; 0
			continue;
		}
		for(int16_t x=sx;x<sx+w;x++){
    ab2e:	8a 01       	movw	r16, r20
    ab30:	0a 0d       	add	r16, r10
    ab32:	1b 1d       	adc	r17, r11
			if(x < VRAM_TILES_H && x > -1){
				t = pgm_read_byte(map+o);
				if(!t)
				t = -toff;

				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+t+toff;
    ab34:	84 e2       	ldi	r24, 0x24	; 36
    ab36:	58 2e       	mov	r5, r24
    ab38:	5c 0c       	add	r5, r12
		}
		for(int16_t x=sx;x<sx+w;x++){
			if(x < VRAM_TILES_H && x > -1){
				t = pgm_read_byte(map+o);
				if(!t)
				t = -toff;
    ab3a:	cc 24       	eor	r12, r12
    ab3c:	dd 24       	eor	r13, r13
    ab3e:	ce 1a       	sub	r12, r30
    ab40:	df 0a       	sbc	r13, r31
    ab42:	25 c0       	rjmp	.+74     	; 0xab8e <ColumnsDrawMap+0x94>
}*/

void ColumnsDrawMap(int16_t sx, int16_t sy, uint8_t w, uint8_t h, uint16_t o, const char *map, int16_t toff){
	int16_t t;
	for(int16_t y=sy;y<sy+h;y++){
		if(y > VRAM_TILES_V-1 || y < 0){
    ab44:	6a 31       	cpi	r22, 0x1A	; 26
    ab46:	71 05       	cpc	r23, r1
    ab48:	40 f4       	brcc	.+16     	; 0xab5a <ColumnsDrawMap+0x60>
    ab4a:	ed 01       	movw	r28, r26
    ab4c:	c0 5e       	subi	r28, 0xE0	; 224
    ab4e:	de 4f       	sbci	r29, 0xFE	; 254
    ab50:	f7 01       	movw	r30, r14
    ab52:	e6 0d       	add	r30, r6
    ab54:	f7 1d       	adc	r31, r7
    ab56:	95 01       	movw	r18, r10
    ab58:	14 c0       	rjmp	.+40     	; 0xab82 <ColumnsDrawMap+0x88>
			map += w;
    ab5a:	e4 0e       	add	r14, r20
    ab5c:	f5 1e       	adc	r15, r21
    ab5e:	14 c0       	rjmp	.+40     	; 0xab88 <ColumnsDrawMap+0x8e>
			continue;
		}
		for(int16_t x=sx;x<sx+w;x++){
			if(x < VRAM_TILES_H && x > -1){
    ab60:	2e 31       	cpi	r18, 0x1E	; 30
    ab62:	31 05       	cpc	r19, r1
    ab64:	38 f4       	brcc	.+14     	; 0xab74 <ColumnsDrawMap+0x7a>
				t = pgm_read_byte(map+o);
    ab66:	84 91       	lpm	r24, Z+
    ab68:	90 e0       	ldi	r25, 0x00	; 0
				if(!t)
    ab6a:	00 97       	sbiw	r24, 0x00	; 0
    ab6c:	09 f4       	brne	.+2      	; 0xab70 <ColumnsDrawMap+0x76>
				t = -toff;
    ab6e:	c6 01       	movw	r24, r12

				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+t+toff;
    ab70:	85 0d       	add	r24, r5
    ab72:	88 83       	st	Y, r24
			}
			map++;
    ab74:	08 94       	sec
    ab76:	e1 1c       	adc	r14, r1
    ab78:	f1 1c       	adc	r15, r1
	for(int16_t y=sy;y<sy+h;y++){
		if(y > VRAM_TILES_V-1 || y < 0){
			map += w;
			continue;
		}
		for(int16_t x=sx;x<sx+w;x++){
    ab7a:	2f 5f       	subi	r18, 0xFF	; 255
    ab7c:	3f 4f       	sbci	r19, 0xFF	; 255
    ab7e:	21 96       	adiw	r28, 0x01	; 1
    ab80:	31 96       	adiw	r30, 0x01	; 1
    ab82:	20 17       	cp	r18, r16
    ab84:	31 07       	cpc	r19, r17
    ab86:	64 f3       	brlt	.-40     	; 0xab60 <ColumnsDrawMap+0x66>
	}
}*/

void ColumnsDrawMap(int16_t sx, int16_t sy, uint8_t w, uint8_t h, uint16_t o, const char *map, int16_t toff){
	int16_t t;
	for(int16_t y=sy;y<sy+h;y++){
    ab88:	6f 5f       	subi	r22, 0xFF	; 255
    ab8a:	7f 4f       	sbci	r23, 0xFF	; 255
    ab8c:	5e 96       	adiw	r26, 0x1e	; 30
    ab8e:	68 15       	cp	r22, r8
    ab90:	79 05       	cpc	r23, r9
    ab92:	c4 f2       	brlt	.-80     	; 0xab44 <ColumnsDrawMap+0x4a>
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+t+toff;
			}
			map++;
		}
	}
}
    ab94:	cd b7       	in	r28, 0x3d	; 61
    ab96:	de b7       	in	r29, 0x3e	; 62
    ab98:	ef e0       	ldi	r30, 0x0F	; 15
    ab9a:	0c 94 2a 74 	jmp	0xe854	; 0xe854 <__epilogue_restores__+0x6>

0000ab9e <ColumnsDrawMenu>:

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
}

void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
    ab9e:	a0 e0       	ldi	r26, 0x00	; 0
    aba0:	b0 e0       	ldi	r27, 0x00	; 0
    aba2:	e5 ed       	ldi	r30, 0xD5	; 213
    aba4:	f5 e5       	ldi	r31, 0x55	; 85
    aba6:	0c 94 15 74 	jmp	0xe82a	; 0xe82a <__prologue_saves__+0x14>
    abaa:	18 2f       	mov	r17, r24
    abac:	e6 2e       	mov	r14, r22
    abae:	f4 2e       	mov	r15, r20
    abb0:	c2 2e       	mov	r12, r18
    abb2:	50 e0       	ldi	r21, 0x00	; 0
extern void CpuFillPad();


inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
    abb4:	24 e2       	ldi	r18, 0x24	; 36
    abb6:	16 c0       	rjmp	.+44     	; 0xabe4 <ColumnsDrawMenu+0x46>
    abb8:	83 2f       	mov	r24, r19
    abba:	8e 0d       	add	r24, r14
    abbc:	90 e0       	ldi	r25, 0x00	; 0
    abbe:	fc 01       	movw	r30, r24
    abc0:	65 e0       	ldi	r22, 0x05	; 5
    abc2:	ee 0f       	add	r30, r30
    abc4:	ff 1f       	adc	r31, r31
    abc6:	6a 95       	dec	r22
    abc8:	e1 f7       	brne	.-8      	; 0xabc2 <ColumnsDrawMenu+0x24>
    abca:	88 0f       	add	r24, r24
    abcc:	99 1f       	adc	r25, r25
    abce:	e8 1b       	sub	r30, r24
    abd0:	f9 0b       	sbc	r31, r25
    abd2:	ea 0f       	add	r30, r26
    abd4:	fb 1f       	adc	r31, r27
    abd6:	e0 5e       	subi	r30, 0xE0	; 224
    abd8:	fe 4f       	sbci	r31, 0xFE	; 254
    abda:	20 83       	st	Z, r18
	vram[(y*SCREEN_TILES_H)+x] = t;
}

void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
    abdc:	3f 5f       	subi	r19, 0xFF	; 255
    abde:	3c 15       	cp	r19, r12
    abe0:	58 f3       	brcs	.-42     	; 0xabb8 <ColumnsDrawMenu+0x1a>
inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
}

void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
    abe2:	5f 5f       	subi	r21, 0xFF	; 255
    abe4:	5f 15       	cp	r21, r15
    abe6:	30 f4       	brcc	.+12     	; 0xabf4 <ColumnsDrawMenu+0x56>
    abe8:	30 e0       	ldi	r19, 0x00	; 0
extern void CpuFillPad();


inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
    abea:	85 2f       	mov	r24, r21
    abec:	81 0f       	add	r24, r17
    abee:	a8 2f       	mov	r26, r24
    abf0:	b0 e0       	ldi	r27, 0x00	; 0
    abf2:	f5 cf       	rjmp	.-22     	; 0xabde <ColumnsDrawMenu+0x40>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    abf4:	9e e1       	ldi	r25, 0x1E	; 30
    abf6:	e9 9e       	mul	r14, r25
    abf8:	a0 01       	movw	r20, r0
    abfa:	11 24       	eor	r1, r1
void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
	set_tile(x+i,y+j,0);

	for(u8 i=0;i<w;i++){
    abfc:	8c 2d       	mov	r24, r12
    abfe:	8e 0d       	add	r24, r14
    ac00:	89 9f       	mul	r24, r25
    ac02:	b0 01       	movw	r22, r0
    ac04:	11 24       	eor	r1, r1
    ac06:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ac08:	ea 01       	movw	r28, r20
    ac0a:	c0 5e       	subi	r28, 0xE0	; 224
    ac0c:	de 4f       	sbci	r29, 0xFE	; 254
    ac0e:	f6 e0       	ldi	r31, 0x06	; 6
    ac10:	df 2e       	mov	r13, r31
    ac12:	d0 0e       	add	r13, r16
void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
	set_tile(x+i,y+j,0);

	for(u8 i=0;i<w;i++){
    ac14:	9b 01       	movw	r18, r22
    ac16:	20 5e       	subi	r18, 0xE0	; 224
    ac18:	3e 4f       	sbci	r19, 0xFE	; 254
    ac1a:	90 2f       	mov	r25, r16
    ac1c:	99 5f       	subi	r25, 0xF9	; 249
    ac1e:	0b c0       	rjmp	.+22     	; 0xac36 <ColumnsDrawMenu+0x98>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ac20:	e8 2f       	mov	r30, r24
    ac22:	e1 0f       	add	r30, r17
    ac24:	f0 e0       	ldi	r31, 0x00	; 0
    ac26:	de 01       	movw	r26, r28
    ac28:	ae 0f       	add	r26, r30
    ac2a:	bf 1f       	adc	r27, r31
    ac2c:	dc 92       	st	X, r13
void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
	set_tile(x+i,y+j,0);

	for(u8 i=0;i<w;i++){
    ac2e:	e2 0f       	add	r30, r18
    ac30:	f3 1f       	adc	r31, r19
    ac32:	90 83       	st	Z, r25
    ac34:	8f 5f       	subi	r24, 0xFF	; 255
    ac36:	8f 15       	cp	r24, r15
    ac38:	98 f3       	brcs	.-26     	; 0xac20 <ColumnsDrawMenu+0x82>
    ac3a:	30 e0       	ldi	r19, 0x00	; 0
    ac3c:	81 2f       	mov	r24, r17
    ac3e:	90 e0       	ldi	r25, 0x00	; 0
    ac40:	f1 0e       	add	r15, r17
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ac42:	ee e1       	ldi	r30, 0x1E	; 30
    ac44:	de 2e       	mov	r13, r30
    ac46:	20 2f       	mov	r18, r16
    ac48:	2c 5f       	subi	r18, 0xFC	; 252

	for(u8 i=0;i<w;i++){
		SetVram(x+i,y,o+6);
		SetVram(x+i,y+h,o+7);
	}
	for(u8 i=0;i<h;i++){
    ac4a:	cf 2d       	mov	r28, r15
    ac4c:	d0 e0       	ldi	r29, 0x00	; 0
    ac4e:	10 2f       	mov	r17, r16
    ac50:	1b 5f       	subi	r17, 0xFB	; 251
    ac52:	0f c0       	rjmp	.+30     	; 0xac72 <ColumnsDrawMenu+0xd4>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ac54:	e3 2f       	mov	r30, r19
    ac56:	ee 0d       	add	r30, r14
    ac58:	ed 9d       	mul	r30, r13
    ac5a:	f0 01       	movw	r30, r0
    ac5c:	11 24       	eor	r1, r1
    ac5e:	e0 5e       	subi	r30, 0xE0	; 224
    ac60:	fe 4f       	sbci	r31, 0xFE	; 254
    ac62:	df 01       	movw	r26, r30
    ac64:	a8 0f       	add	r26, r24
    ac66:	b9 1f       	adc	r27, r25
    ac68:	2c 93       	st	X, r18

	for(u8 i=0;i<w;i++){
		SetVram(x+i,y,o+6);
		SetVram(x+i,y+h,o+7);
	}
	for(u8 i=0;i<h;i++){
    ac6a:	ec 0f       	add	r30, r28
    ac6c:	fd 1f       	adc	r31, r29
    ac6e:	10 83       	st	Z, r17
    ac70:	3f 5f       	subi	r19, 0xFF	; 255
    ac72:	3c 15       	cp	r19, r12
    ac74:	78 f3       	brcs	.-34     	; 0xac54 <ColumnsDrawMenu+0xb6>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ac76:	80 5e       	subi	r24, 0xE0	; 224
    ac78:	9e 4f       	sbci	r25, 0xFE	; 254
    ac7a:	fc 01       	movw	r30, r24
    ac7c:	e4 0f       	add	r30, r20
    ac7e:	f5 1f       	adc	r31, r21
    ac80:	00 83       	st	Z, r16
		}
	}*/
	SetVram(x,y+h,o+2);
	SetVram(x+w,y+h,o+3);

}
    ac82:	af 2d       	mov	r26, r15
    ac84:	b0 e0       	ldi	r27, 0x00	; 0
    ac86:	a0 5e       	subi	r26, 0xE0	; 224
    ac88:	be 4f       	sbci	r27, 0xFE	; 254
    ac8a:	fa 01       	movw	r30, r20
    ac8c:	ea 0f       	add	r30, r26
    ac8e:	fb 1f       	adc	r31, r27
    ac90:	0f 5f       	subi	r16, 0xFF	; 255
    ac92:	00 83       	st	Z, r16
    ac94:	86 0f       	add	r24, r22
    ac96:	97 1f       	adc	r25, r23
    ac98:	0f 5f       	subi	r16, 0xFF	; 255
    ac9a:	fc 01       	movw	r30, r24
    ac9c:	00 83       	st	Z, r16
    ac9e:	a6 0f       	add	r26, r22
    aca0:	b7 1f       	adc	r27, r23
    aca2:	0f 5f       	subi	r16, 0xFF	; 255
    aca4:	0c 93       	st	X, r16
    aca6:	cd b7       	in	r28, 0x3d	; 61
    aca8:	de b7       	in	r29, 0x3e	; 62
    acaa:	e8 e0       	ldi	r30, 0x08	; 8
    acac:	0c 94 31 74 	jmp	0xe862	; 0xe862 <__epilogue_restores__+0x14>

0000acb0 <CpuFillPad>:
uint8_t TallestColumn(uint8_t p);

extern void CpuBufferWellAsm(uint8_t *wellstart);
inline void CpuFillPad(){

	if(!(cpustate & CPUDECIDED))
    acb0:	80 91 a7 0e 	lds	r24, 0x0EA7
    acb4:	85 ff       	sbrs	r24, 5
    acb6:	58 c0       	rjmp	.+176    	; 0xad68 <CpuFillPad+0xb8>
	return;
	if(state[0] & LOSING || state[1] & LOSING){
    acb8:	80 91 aa 0e 	lds	r24, 0x0EAA
    acbc:	82 fd       	sbrc	r24, 2
    acbe:	04 c0       	rjmp	.+8      	; 0xacc8 <CpuFillPad+0x18>
    acc0:	80 91 ab 0e 	lds	r24, 0x0EAB
    acc4:	82 ff       	sbrs	r24, 2
    acc6:	04 c0       	rjmp	.+8      	; 0xacd0 <CpuFillPad+0x20>
		cpustate = CPUEVALUATING;//don't do anything stupid!
    acc8:	88 e0       	ldi	r24, 0x08	; 8
    acca:	80 93 a7 0e 	sts	0x0EA7, r24
    acce:	08 95       	ret
		return;
	}		
	oldpadstate[1] = padstate[1] = sideheld[1] = 0;	
    acd0:	10 92 8c 0f 	sts	0x0F8C, r1
    acd4:	10 92 85 0e 	sts	0x0E85, r1
    acd8:	10 92 84 0e 	sts	0x0E84, r1
    acdc:	10 92 81 0e 	sts	0x0E81, r1
    ace0:	10 92 80 0e 	sts	0x0E80, r1
	
	if(cpumovewait){
    ace4:	80 91 ac 0e 	lds	r24, 0x0EAC
    ace8:	88 23       	and	r24, r24
    acea:	21 f0       	breq	.+8      	; 0xacf4 <CpuFillPad+0x44>
		cpumovewait--;
    acec:	81 50       	subi	r24, 0x01	; 1
    acee:	80 93 ac 0e 	sts	0x0EAC, r24
    acf2:	08 95       	ret
		return;
	}
	else{
		if(cpudecision[0] == piecex[1] && cpudecision[1] == piecerot[1])
    acf4:	30 91 6d 0e 	lds	r19, 0x0E6D
    acf8:	20 91 a9 0f 	lds	r18, 0x0FA9
    acfc:	32 17       	cp	r19, r18
    acfe:	79 f4       	brne	.+30     	; 0xad1e <CpuFillPad+0x6e>
    ad00:	90 91 6e 0e 	lds	r25, 0x0E6E
    ad04:	80 91 a1 0f 	lds	r24, 0x0FA1
    ad08:	98 17       	cp	r25, r24
    ad0a:	49 f4       	brne	.+18     	; 0xad1e <CpuFillPad+0x6e>
			cpumovewait = pgm_read_byte(&CpuDropTime[cpuskill]);
    ad0c:	e0 91 77 0e 	lds	r30, 0x0E77
    ad10:	f0 e0       	ldi	r31, 0x00	; 0
    ad12:	e1 58       	subi	r30, 0x81	; 129
    ad14:	f4 47       	sbci	r31, 0x74	; 116
    ad16:	e4 91       	lpm	r30, Z+
    ad18:	e0 93 ac 0e 	sts	0x0EAC, r30
    ad1c:	12 c0       	rjmp	.+36     	; 0xad42 <CpuFillPad+0x92>
		else
			cpumovewait = pgm_read_byte(&CpuMoveTime[cpuskill]);
    ad1e:	e0 91 77 0e 	lds	r30, 0x0E77
    ad22:	f0 e0       	ldi	r31, 0x00	; 0
    ad24:	e7 57       	subi	r30, 0x77	; 119
    ad26:	f4 47       	sbci	r31, 0x74	; 116
    ad28:	e4 91       	lpm	r30, Z+
    ad2a:	e0 93 ac 0e 	sts	0x0EAC, r30
	}

	if(cpudecision[0] < piecex[1])
    ad2e:	32 17       	cp	r19, r18
    ad30:	18 f4       	brcc	.+6      	; 0xad38 <CpuFillPad+0x88>
		padstate[1] = BTN_LEFT;
    ad32:	80 e4       	ldi	r24, 0x40	; 64
    ad34:	90 e0       	ldi	r25, 0x00	; 0
    ad36:	0d c0       	rjmp	.+26     	; 0xad52 <CpuFillPad+0xa2>
	else if(cpudecision[0] > piecex[1])
    ad38:	23 17       	cp	r18, r19
    ad3a:	18 f4       	brcc	.+6      	; 0xad42 <CpuFillPad+0x92>
		padstate[1] = BTN_RIGHT;
    ad3c:	80 e8       	ldi	r24, 0x80	; 128
    ad3e:	90 e0       	ldi	r25, 0x00	; 0
    ad40:	08 c0       	rjmp	.+16     	; 0xad52 <CpuFillPad+0xa2>
	else if(cpudecision[1] != piecerot[1])
    ad42:	90 91 6e 0e 	lds	r25, 0x0E6E
    ad46:	80 91 a1 0f 	lds	r24, 0x0FA1
    ad4a:	98 17       	cp	r25, r24
    ad4c:	39 f0       	breq	.+14     	; 0xad5c <CpuFillPad+0xac>
		padstate[1] = BTN_Y;
    ad4e:	82 e0       	ldi	r24, 0x02	; 2
    ad50:	90 e0       	ldi	r25, 0x00	; 0
    ad52:	90 93 85 0e 	sts	0x0E85, r25
    ad56:	80 93 84 0e 	sts	0x0E84, r24
    ad5a:	08 95       	ret
	else
		padstate[1] = BTN_DOWN;
    ad5c:	80 e2       	ldi	r24, 0x20	; 32
    ad5e:	90 e0       	ldi	r25, 0x00	; 0
    ad60:	90 93 85 0e 	sts	0x0E85, r25
    ad64:	80 93 84 0e 	sts	0x0E84, r24
    ad68:	08 95       	ret

0000ad6a <DrawTitleBG>:
void DrawTitleBG(){
    ad6a:	a0 e0       	ldi	r26, 0x00	; 0
    ad6c:	b0 e0       	ldi	r27, 0x00	; 0
    ad6e:	eb eb       	ldi	r30, 0xBB	; 187
    ad70:	f6 e5       	ldi	r31, 0x56	; 86
    ad72:	0c 94 13 74 	jmp	0xe826	; 0xe826 <__prologue_saves__+0x10>
    ad76:	e0 e2       	ldi	r30, 0x20	; 32
    ad78:	f1 e0       	ldi	r31, 0x01	; 1
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
}

void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
		vram[i] = t;
    ad7a:	84 e2       	ldi	r24, 0x24	; 36
    ad7c:	81 93       	st	Z+, r24
inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
}

void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
    ad7e:	94 e0       	ldi	r25, 0x04	; 4
    ad80:	ec 32       	cpi	r30, 0x2C	; 44
    ad82:	f9 07       	cpc	r31, r25
    ad84:	d9 f7       	brne	.-10     	; 0xad7c <DrawTitleBG+0x12>
    ad86:	c0 e0       	ldi	r28, 0x00	; 0
    ad88:	d0 e0       	ldi	r29, 0x00	; 0
    ad8a:	aa 24       	eor	r10, r10
    ad8c:	bb 24       	eor	r11, r11
	FillVram(RAM_TILES_COUNT);
	for(uint8_t i=0;i<11;i++){
		ColumnsDrawMap((i*4)+0,0,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
    ad8e:	ce 01       	movw	r24, r28
    ad90:	60 e0       	ldi	r22, 0x00	; 0
    ad92:	70 e0       	ldi	r23, 0x00	; 0
    ad94:	46 e0       	ldi	r20, 0x06	; 6
    ad96:	24 e0       	ldi	r18, 0x04	; 4
    ad98:	00 e0       	ldi	r16, 0x00	; 0
    ad9a:	10 e0       	ldi	r17, 0x00	; 0
    ad9c:	fd ee       	ldi	r31, 0xED	; 237
    ad9e:	ef 2e       	mov	r14, r31
    ada0:	fe e0       	ldi	r31, 0x0E	; 14
    ada2:	ff 2e       	mov	r15, r31
    ada4:	eb ed       	ldi	r30, 0xDB	; 219
    ada6:	ce 2e       	mov	r12, r30
    ada8:	ef ef       	ldi	r30, 0xFF	; 255
    adaa:	de 2e       	mov	r13, r30
    adac:	a6 de       	rcall	.-692    	; 0xaafa <ColumnsDrawMap>
		ColumnsDrawMap((i*4)-2,22,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
    adae:	c5 01       	movw	r24, r10
    adb0:	80 95       	com	r24
    adb2:	90 95       	com	r25
    adb4:	88 0f       	add	r24, r24
    adb6:	99 1f       	adc	r25, r25
    adb8:	66 e1       	ldi	r22, 0x16	; 22
    adba:	70 e0       	ldi	r23, 0x00	; 0
    adbc:	46 e0       	ldi	r20, 0x06	; 6
    adbe:	24 e0       	ldi	r18, 0x04	; 4
    adc0:	9c de       	rcall	.-712    	; 0xaafa <ColumnsDrawMap>
    adc2:	24 96       	adiw	r28, 0x04	; 4
    adc4:	8e ef       	ldi	r24, 0xFE	; 254
    adc6:	9f ef       	ldi	r25, 0xFF	; 255
    adc8:	a8 0e       	add	r10, r24
    adca:	b9 1e       	adc	r11, r25
void DrawTitleBG(){
	FillVram(RAM_TILES_COUNT);
	for(uint8_t i=0;i<11;i++){
    adcc:	cc 32       	cpi	r28, 0x2C	; 44
    adce:	d1 05       	cpc	r29, r1
    add0:	f1 f6       	brne	.-68     	; 0xad8e <DrawTitleBG+0x24>
		ColumnsDrawMap((i*4)+0,0,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
		ColumnsDrawMap((i*4)-2,22,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
	}

}
    add2:	cd b7       	in	r28, 0x3d	; 61
    add4:	de b7       	in	r29, 0x3e	; 62
    add6:	ea e0       	ldi	r30, 0x0A	; 10
    add8:	0c 94 2f 74 	jmp	0xe85e	; 0xe85e <__epilogue_restores__+0x10>

0000addc <DrawTitleBGFont>:
void DrawTitleBGFont(){
	DrawTitleBG();
    addc:	c6 df       	rcall	.-116    	; 0xad6a <DrawTitleBG>
	rtl_Print(11,8,PSTR("COLUMNS"));
    adde:	8b e0       	ldi	r24, 0x0B	; 11
    ade0:	68 e0       	ldi	r22, 0x08	; 8
    ade2:	48 ee       	ldi	r20, 0xE8	; 232
    ade4:	5c e8       	ldi	r21, 0x8C	; 140
}
    ade6:	c7 cd       	rjmp	.-1138   	; 0xa976 <rtl_Print>

0000ade8 <OneTimeDraw>:
	for(uint8_t y=0;y<26;y++){
		set_vram(x,y,RAM_TILES_COUNT);
	}
}

void OneTimeDraw(){
    ade8:	a0 e0       	ldi	r26, 0x00	; 0
    adea:	b0 e0       	ldi	r27, 0x00	; 0
    adec:	ea ef       	ldi	r30, 0xFA	; 250
    adee:	f6 e5       	ldi	r31, 0x56	; 86
    adf0:	0c 94 15 74 	jmp	0xe82a	; 0xe82a <__prologue_saves__+0x14>
	ColumnsDrawMap(13,7,4,26,0,FieldMap+(19*4*level),0);//draw even if just crashredrawtime
    adf4:	e0 91 83 0f 	lds	r30, 0x0F83
    adf8:	8c e4       	ldi	r24, 0x4C	; 76
    adfa:	e8 9f       	mul	r30, r24
    adfc:	f0 01       	movw	r30, r0
    adfe:	11 24       	eor	r1, r1
    ae00:	eb 5f       	subi	r30, 0xFB	; 251
    ae02:	f0 4f       	sbci	r31, 0xF0	; 240
    ae04:	8d e0       	ldi	r24, 0x0D	; 13
    ae06:	90 e0       	ldi	r25, 0x00	; 0
    ae08:	67 e0       	ldi	r22, 0x07	; 7
    ae0a:	70 e0       	ldi	r23, 0x00	; 0
    ae0c:	44 e0       	ldi	r20, 0x04	; 4
    ae0e:	2a e1       	ldi	r18, 0x1A	; 26
    ae10:	00 e0       	ldi	r16, 0x00	; 0
    ae12:	10 e0       	ldi	r17, 0x00	; 0
    ae14:	7f 01       	movw	r14, r30
    ae16:	cc 24       	eor	r12, r12
    ae18:	dd 24       	eor	r13, r13
    ae1a:	6f de       	rcall	.-802    	; 0xaafa <ColumnsDrawMap>
    ae1c:	e0 e2       	ldi	r30, 0x20	; 32
    ae1e:	f1 e0       	ldi	r31, 0x01	; 1
    ae20:	cf ef       	ldi	r28, 0xFF	; 255
    ae22:	d1 e0       	ldi	r29, 0x01	; 1
    ae24:	de 01       	movw	r26, r28
	for(uint8_t i=0;i<19;i++){
		vram[(i*VRAM_TILES_H)+0] = vram[((i+7)*VRAM_TILES_H)+16];
    ae26:	13 96       	adiw	r26, 0x03	; 3
    ae28:	8c 91       	ld	r24, X
    ae2a:	13 97       	sbiw	r26, 0x03	; 3
    ae2c:	80 83       	st	Z, r24
		vram[(i*VRAM_TILES_H)+29] = vram[((i+7)*VRAM_TILES_H)+13];
    ae2e:	8c 91       	ld	r24, X
    ae30:	85 8f       	std	Z+29, r24	; 0x1d
    ae32:	7e 96       	adiw	r30, 0x1e	; 30
    ae34:	5e 96       	adiw	r26, 0x1e	; 30
	}
}

void OneTimeDraw(){
	ColumnsDrawMap(13,7,4,26,0,FieldMap+(19*4*level),0);//draw even if just crashredrawtime
	for(uint8_t i=0;i<19;i++){
    ae36:	83 e0       	ldi	r24, 0x03	; 3
    ae38:	ea 35       	cpi	r30, 0x5A	; 90
    ae3a:	f8 07       	cpc	r31, r24
    ae3c:	a1 f7       	brne	.-24     	; 0xae26 <OneTimeDraw+0x3e>
		vram[(i*VRAM_TILES_H)+0] = vram[((i+7)*VRAM_TILES_H)+16];
		vram[(i*VRAM_TILES_H)+29] = vram[((i+7)*VRAM_TILES_H)+13];
	}		
	for(uint8_t i=19;i<26;i++){
		vram[(i*VRAM_TILES_H)+0] = vram[((i-12)*VRAM_TILES_H)+16];
    ae3e:	8b 81       	ldd	r24, Y+3	; 0x03
    ae40:	80 83       	st	Z, r24
		vram[(i*VRAM_TILES_H)+29] = vram[((i-12)*VRAM_TILES_H)+13];
    ae42:	88 81       	ld	r24, Y
    ae44:	85 8f       	std	Z+29, r24	; 0x1d
    ae46:	7e 96       	adiw	r30, 0x1e	; 30
    ae48:	6e 96       	adiw	r28, 0x1e	; 30
	ColumnsDrawMap(13,7,4,26,0,FieldMap+(19*4*level),0);//draw even if just crashredrawtime
	for(uint8_t i=0;i<19;i++){
		vram[(i*VRAM_TILES_H)+0] = vram[((i+7)*VRAM_TILES_H)+16];
		vram[(i*VRAM_TILES_H)+29] = vram[((i+7)*VRAM_TILES_H)+13];
	}		
	for(uint8_t i=19;i<26;i++){
    ae4a:	84 e0       	ldi	r24, 0x04	; 4
    ae4c:	ec 32       	cpi	r30, 0x2C	; 44
    ae4e:	f8 07       	cpc	r31, r24
    ae50:	b1 f7       	brne	.-20     	; 0xae3e <OneTimeDraw+0x56>
	
if(game_state & GS_FIRSTTICK){
		//BlankDrawWell(0);
		//BlankDrawWell(1);
	}
}
    ae52:	cd b7       	in	r28, 0x3d	; 61
    ae54:	de b7       	in	r29, 0x3e	; 62
    ae56:	e8 e0       	ldi	r30, 0x08	; 8
    ae58:	0c 94 31 74 	jmp	0xe862	; 0xe862 <__epilogue_restores__+0x14>

0000ae5c <SetScoringSimilar>:
//PROBLEM HERE MUST BE WITH CRASHBARDOWN COPYING MAGIC JEWEL;

void SetScoringSimilar(uint8_t p, uint8_t t){//used by magic jewel to clear the color it touches from well
if(t > 6){//hit crash bar TODO MAKE SURE IT STILL DELETES THE MAGIC JEWEL
    ae5c:	67 30       	cpi	r22, 0x07	; 7
    ae5e:	10 f5       	brcc	.+68     	; 0xaea4 <SetScoringSimilar+0x48>
return;
	}		
for(uint16_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++)
    ae60:	90 e0       	ldi	r25, 0x00	; 0
    ae62:	20 e6       	ldi	r18, 0x60	; 96
    ae64:	30 e0       	ldi	r19, 0x00	; 0
    ae66:	82 9f       	mul	r24, r18
    ae68:	a0 01       	movw	r20, r0
    ae6a:	83 9f       	mul	r24, r19
    ae6c:	50 0d       	add	r21, r0
    ae6e:	92 9f       	mul	r25, r18
    ae70:	50 0d       	add	r21, r0
    ae72:	11 24       	eor	r1, r1
    ae74:	01 96       	adiw	r24, 0x01	; 1
    ae76:	82 9f       	mul	r24, r18
    ae78:	d0 01       	movw	r26, r0
    ae7a:	83 9f       	mul	r24, r19
    ae7c:	b0 0d       	add	r27, r0
    ae7e:	92 9f       	mul	r25, r18
    ae80:	b0 0d       	add	r27, r0
    ae82:	11 24       	eor	r1, r1
    ae84:	fa 01       	movw	r30, r20
    ae86:	e3 55       	subi	r30, 0x53	; 83
    ae88:	f1 4f       	sbci	r31, 0xF1	; 241
if(well[i] == t)//shouldn't need to &0b00111111 since nothing is half step and doesnt matter if scoring?
well[i] |= SCORINGJEWEL;
    ae8a:	96 2f       	mov	r25, r22
    ae8c:	90 68       	ori	r25, 0x80	; 128
    ae8e:	07 c0       	rjmp	.+14     	; 0xae9e <SetScoringSimilar+0x42>
void SetScoringSimilar(uint8_t p, uint8_t t){//used by magic jewel to clear the color it touches from well
if(t > 6){//hit crash bar TODO MAKE SURE IT STILL DELETES THE MAGIC JEWEL
return;
	}		
for(uint16_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++)
if(well[i] == t)//shouldn't need to &0b00111111 since nothing is half step and doesnt matter if scoring?
    ae90:	80 81       	ld	r24, Z
    ae92:	86 17       	cp	r24, r22
    ae94:	09 f4       	brne	.+2      	; 0xae98 <SetScoringSimilar+0x3c>
well[i] |= SCORINGJEWEL;
    ae96:	90 83       	st	Z, r25

void SetScoringSimilar(uint8_t p, uint8_t t){//used by magic jewel to clear the color it touches from well
if(t > 6){//hit crash bar TODO MAKE SURE IT STILL DELETES THE MAGIC JEWEL
return;
	}		
for(uint16_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++)
    ae98:	4f 5f       	subi	r20, 0xFF	; 255
    ae9a:	5f 4f       	sbci	r21, 0xFF	; 255
    ae9c:	31 96       	adiw	r30, 0x01	; 1
    ae9e:	4a 17       	cp	r20, r26
    aea0:	5b 07       	cpc	r21, r27
    aea2:	b0 f3       	brcs	.-20     	; 0xae90 <SetScoringSimilar+0x34>
    aea4:	08 95       	ret

0000aea6 <CheckLoss>:
}


uint8_t CheckLoss(uint8_t p){
	//TODO WHAT ABOUT MAGIC JEWEL COMING TO REST HERE?????
	uint8_t off = p*WELLSIZE;
    aea6:	90 e6       	ldi	r25, 0x60	; 96
    aea8:	89 9f       	mul	r24, r25
    aeaa:	90 2d       	mov	r25, r0
    aeac:	11 24       	eor	r1, r1
    aeae:	20 e0       	ldi	r18, 0x00	; 0
    aeb0:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<3*6;i++){
		if(well[off++])
    aeb2:	e9 2f       	mov	r30, r25
    aeb4:	e2 0f       	add	r30, r18
    aeb6:	f0 e0       	ldi	r31, 0x00	; 0
    aeb8:	e3 55       	subi	r30, 0x53	; 83
    aeba:	f1 4f       	sbci	r31, 0xF1	; 241
    aebc:	80 81       	ld	r24, Z
    aebe:	88 23       	and	r24, r24
    aec0:	11 f0       	breq	.+4      	; 0xaec6 <CheckLoss+0x20>
    aec2:	81 e0       	ldi	r24, 0x01	; 1
    aec4:	08 95       	ret
    aec6:	2f 5f       	subi	r18, 0xFF	; 255
    aec8:	3f 4f       	sbci	r19, 0xFF	; 255


uint8_t CheckLoss(uint8_t p){
	//TODO WHAT ABOUT MAGIC JEWEL COMING TO REST HERE?????
	uint8_t off = p*WELLSIZE;
	for(uint8_t i=0;i<3*6;i++){
    aeca:	22 31       	cpi	r18, 0x12	; 18
    aecc:	31 05       	cpc	r19, r1
    aece:	89 f7       	brne	.-30     	; 0xaeb2 <CheckLoss+0xc>
    aed0:	80 e0       	ldi	r24, 0x00	; 0
		if(well[off++])
		return true;
	}
	return false;
}
    aed2:	08 95       	ret

0000aed4 <DropPiece>:
	}
	else
		return total;
}

void DropPiece(uint8_t p){//MovePieceDown will still run once after this, so no checks needed
    aed4:	1f 93       	push	r17
    aed6:	cf 93       	push	r28
    aed8:	df 93       	push	r29
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    aeda:	28 2f       	mov	r18, r24
    aedc:	30 e0       	ldi	r19, 0x00	; 0
    aede:	f9 01       	movw	r30, r18
    aee0:	e8 55       	subi	r30, 0x58	; 88
    aee2:	f0 4f       	sbci	r31, 0xF0	; 240
    aee4:	60 81       	ld	r22, Z
    aee6:	80 e6       	ldi	r24, 0x60	; 96
    aee8:	90 e0       	ldi	r25, 0x00	; 0
    aeea:	28 9f       	mul	r18, r24
    aeec:	e0 01       	movw	r28, r0
    aeee:	29 9f       	mul	r18, r25
    aef0:	d0 0d       	add	r29, r0
    aef2:	38 9f       	mul	r19, r24
    aef4:	d0 0d       	add	r29, r0
    aef6:	11 24       	eor	r1, r1
    aef8:	f9 01       	movw	r30, r18
    aefa:	e8 55       	subi	r30, 0x58	; 88
    aefc:	f1 4f       	sbci	r31, 0xF1	; 241
    aefe:	10 81       	ld	r17, Z
    af00:	46 2f       	mov	r20, r22
    af02:	4c 0f       	add	r20, r28
    af04:	86 e0       	ldi	r24, 0x06	; 6
    af06:	18 9f       	mul	r17, r24
    af08:	c0 01       	movw	r24, r0
    af0a:	11 24       	eor	r1, r1
    af0c:	a4 2f       	mov	r26, r20
    af0e:	a8 0f       	add	r26, r24
	well[off] = 0;//smaller than loop!
    af10:	ea 2f       	mov	r30, r26
    af12:	f0 e0       	ldi	r31, 0x00	; 0
    af14:	e3 55       	subi	r30, 0x53	; 83
    af16:	f1 4f       	sbci	r31, 0xF1	; 241
    af18:	10 82       	st	Z, r1
	off += 6;
    af1a:	aa 5f       	subi	r26, 0xFA	; 250
	well[off] = 0;
    af1c:	ea 2f       	mov	r30, r26
    af1e:	f0 e0       	ldi	r31, 0x00	; 0
    af20:	e3 55       	subi	r30, 0x53	; 83
    af22:	f1 4f       	sbci	r31, 0xF1	; 241
    af24:	10 82       	st	Z, r1
	off += 6;
	well[off] = 0;
    af26:	aa 5f       	subi	r26, 0xFA	; 250
    af28:	b0 e0       	ldi	r27, 0x00	; 0
    af2a:	a3 55       	subi	r26, 0x53	; 83
    af2c:	b1 4f       	sbci	r27, 0xF1	; 241
    af2e:	1c 92       	st	X, r1
    af30:	50 e0       	ldi	r21, 0x00	; 0
	blank_piece(p);
	uint8_t off = (p*WELLSIZE)+piecex[p];
	uint8_t i;
	for(i=0;i<16;i++){
		if(well[off]){
    af32:	e4 2f       	mov	r30, r20
    af34:	f0 e0       	ldi	r31, 0x00	; 0
    af36:	e3 55       	subi	r30, 0x53	; 83
    af38:	f1 4f       	sbci	r31, 0xF1	; 241
    af3a:	80 81       	ld	r24, Z
    af3c:	88 23       	and	r24, r24
    af3e:	69 f1       	breq	.+90     	; 0xaf9a <DropPiece+0xc6>
			if(i < 3){//will be loss
    af40:	53 30       	cpi	r21, 0x03	; 3
    af42:	80 f5       	brcc	.+96     	; 0xafa4 <DropPiece+0xd0>
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
    af44:	f9 01       	movw	r30, r18
    af46:	ef 54       	subi	r30, 0x4F	; 79
    af48:	f0 4f       	sbci	r31, 0xF0	; 240
    af4a:	40 81       	ld	r20, Z
    af4c:	42 95       	swap	r20
    af4e:	44 0f       	add	r20, r20
    af50:	44 0f       	add	r20, r20
    af52:	40 7c       	andi	r20, 0xC0	; 192
    af54:	d9 01       	movw	r26, r18
    af56:	aa 0f       	add	r26, r26
    af58:	bb 1f       	adc	r27, r27
    af5a:	a2 0f       	add	r26, r18
    af5c:	b3 1f       	adc	r27, r19
    af5e:	a4 58       	subi	r26, 0x84	; 132
    af60:	b0 4f       	sbci	r27, 0xF0	; 240
    af62:	20 e0       	ldi	r18, 0x00	; 0
    af64:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    af66:	70 e0       	ldi	r23, 0x00	; 0
    af68:	81 2f       	mov	r24, r17
    af6a:	82 0f       	add	r24, r18
    af6c:	90 e0       	ldi	r25, 0x00	; 0
    af6e:	fc 01       	movw	r30, r24
    af70:	ee 0f       	add	r30, r30
    af72:	ff 1f       	adc	r31, r31
    af74:	e8 0f       	add	r30, r24
    af76:	f9 1f       	adc	r31, r25
    af78:	ee 0f       	add	r30, r30
    af7a:	ff 1f       	adc	r31, r31
    af7c:	e3 55       	subi	r30, 0x53	; 83
    af7e:	f1 4f       	sbci	r31, 0xF1	; 241
    af80:	ec 0f       	add	r30, r28
    af82:	fd 1f       	adc	r31, r29
    af84:	e6 0f       	add	r30, r22
    af86:	f7 1f       	adc	r31, r23
    af88:	8d 91       	ld	r24, X+
    af8a:	84 2b       	or	r24, r20
    af8c:	80 83       	st	Z, r24
    af8e:	2f 5f       	subi	r18, 0xFF	; 255
    af90:	3f 4f       	sbci	r19, 0xFF	; 255
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    af92:	23 30       	cpi	r18, 0x03	; 3
    af94:	31 05       	cpc	r19, r1
    af96:	41 f7       	brne	.-48     	; 0xaf68 <DropPiece+0x94>
    af98:	30 c0       	rjmp	.+96     	; 0xaffa <DropPiece+0x126>

void DropPiece(uint8_t p){//MovePieceDown will still run once after this, so no checks needed
	blank_piece(p);
	uint8_t off = (p*WELLSIZE)+piecex[p];
	uint8_t i;
	for(i=0;i<16;i++){
    af9a:	5f 5f       	subi	r21, 0xFF	; 255
    af9c:	50 31       	cpi	r21, 0x10	; 16
    af9e:	11 f0       	breq	.+4      	; 0xafa4 <DropPiece+0xd0>
				//WaitVsync(120);
				return;
			}				
			break;
		}	
		off += 6;
    afa0:	4a 5f       	subi	r20, 0xFA	; 250
    afa2:	c7 cf       	rjmp	.-114    	; 0xaf32 <DropPiece+0x5e>
	}
	piecey[p] = i-3;
    afa4:	45 2f       	mov	r20, r21
    afa6:	43 50       	subi	r20, 0x03	; 3
    afa8:	f9 01       	movw	r30, r18
    afaa:	e8 55       	subi	r30, 0x58	; 88
    afac:	f1 4f       	sbci	r31, 0xF1	; 241
    afae:	40 83       	st	Z, r20
	halfstep[p] = 0;
    afb0:	f9 01       	movw	r30, r18
    afb2:	ef 54       	subi	r30, 0x4F	; 79
    afb4:	f0 4f       	sbci	r31, 0xF0	; 240
    afb6:	10 82       	st	Z, r1
	droptimer[p] = 0;
    afb8:	f9 01       	movw	r30, r18
    afba:	ea 57       	subi	r30, 0x7A	; 122
    afbc:	f1 4f       	sbci	r31, 0xF1	; 241
    afbe:	10 82       	st	Z, r1
    afc0:	d9 01       	movw	r26, r18
    afc2:	aa 0f       	add	r26, r26
    afc4:	bb 1f       	adc	r27, r27
    afc6:	a2 0f       	add	r26, r18
    afc8:	b3 1f       	adc	r27, r19
    afca:	a4 58       	subi	r26, 0x84	; 132
    afcc:	b0 4f       	sbci	r27, 0xF0	; 240



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    afce:	26 2f       	mov	r18, r22
    afd0:	30 e0       	ldi	r19, 0x00	; 0
    afd2:	84 2f       	mov	r24, r20
    afd4:	90 e0       	ldi	r25, 0x00	; 0
    afd6:	fc 01       	movw	r30, r24
    afd8:	ee 0f       	add	r30, r30
    afda:	ff 1f       	adc	r31, r31
    afdc:	e8 0f       	add	r30, r24
    afde:	f9 1f       	adc	r31, r25
    afe0:	ee 0f       	add	r30, r30
    afe2:	ff 1f       	adc	r31, r31
    afe4:	e3 55       	subi	r30, 0x53	; 83
    afe6:	f1 4f       	sbci	r31, 0xF1	; 241
    afe8:	ec 0f       	add	r30, r28
    afea:	fd 1f       	adc	r31, r29
    afec:	e2 0f       	add	r30, r18
    afee:	f3 1f       	adc	r31, r19
    aff0:	8d 91       	ld	r24, X+
    aff2:	80 83       	st	Z, r24
    aff4:	4f 5f       	subi	r20, 0xFF	; 255
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    aff6:	45 17       	cp	r20, r21
    aff8:	61 f7       	brne	.-40     	; 0xafd2 <DropPiece+0xfe>
	add_piece(p);
}
    affa:	df 91       	pop	r29
    affc:	cf 91       	pop	r28
    affe:	1f 91       	pop	r17
    b000:	08 95       	ret

0000b002 <EliminateFlashingJewel>:

	return hasmoved;
}

 void EliminateFlashingJewel(uint8_t p){
	uint8_t off = p*WELLSIZE;
    b002:	90 e6       	ldi	r25, 0x60	; 96
    b004:	89 9f       	mul	r24, r25
    b006:	40 2d       	mov	r20, r0
    b008:	11 24       	eor	r1, r1
    b00a:	20 e0       	ldi	r18, 0x00	; 0
    b00c:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<WELLSIZE;i++){
		if(well[off++] & FLASHINGJEWEL){
    b00e:	84 2f       	mov	r24, r20
    b010:	82 0f       	add	r24, r18
    b012:	e8 2f       	mov	r30, r24
    b014:	f0 e0       	ldi	r31, 0x00	; 0
    b016:	e3 55       	subi	r30, 0x53	; 83
    b018:	f1 4f       	sbci	r31, 0xF1	; 241
    b01a:	90 81       	ld	r25, Z
    b01c:	95 ff       	sbrs	r25, 5
    b01e:	04 c0       	rjmp	.+8      	; 0xb028 <EliminateFlashingJewel+0x26>
			well[--off] ^= FLASHINGJEWEL;
    b020:	80 e2       	ldi	r24, 0x20	; 32
    b022:	98 27       	eor	r25, r24
    b024:	90 83       	st	Z, r25
    b026:	08 95       	ret
			return;
    b028:	2f 5f       	subi	r18, 0xFF	; 255
    b02a:	3f 4f       	sbci	r19, 0xFF	; 255
	return hasmoved;
}

 void EliminateFlashingJewel(uint8_t p){
	uint8_t off = p*WELLSIZE;
	for(uint8_t i=0;i<WELLSIZE;i++){
    b02c:	20 36       	cpi	r18, 0x60	; 96
    b02e:	31 05       	cpc	r19, r1
    b030:	71 f7       	brne	.-36     	; 0xb00e <EliminateFlashingJewel+0xc>
    b032:	08 95       	ret

0000b034 <GeneratePreview>:
			return;
		}
	}		
}

void GeneratePreview(uint8_t p){//makes the preview piece the current piece, and generates a new one
    b034:	ef 92       	push	r14
    b036:	ff 92       	push	r15
    b038:	0f 93       	push	r16
    b03a:	1f 93       	push	r17
    b03c:	cf 93       	push	r28
    b03e:	df 93       	push	r29
    b040:	e8 2e       	mov	r14, r24
//COLUMNS 3!! ONCE A PIECE IS DONE SETTING, IT IS 32 TICKS BEFORE YOU CAN SEE THE BOTTOM HALF of the bottom jewel on screen
	
	if(preview[(p*3)] != 7){//don't want a flashing magic jewel
    b042:	08 2f       	mov	r16, r24
    b044:	10 e0       	ldi	r17, 0x00	; 0
    b046:	e8 01       	movw	r28, r16
    b048:	cc 0f       	add	r28, r28
    b04a:	dd 1f       	adc	r29, r29
    b04c:	c0 0f       	add	r28, r16
    b04e:	d1 1f       	adc	r29, r17
    b050:	fe 01       	movw	r30, r28
    b052:	e3 59       	subi	r30, 0x93	; 147
    b054:	f0 4f       	sbci	r31, 0xF0	; 240
    b056:	80 81       	ld	r24, Z
    b058:	87 30       	cpi	r24, 0x07	; 7
    b05a:	b9 f1       	breq	.+110    	; 0xb0ca <GeneratePreview+0x96>
		if(cursetype[p] & FLASHINGJEWELCOMING){
    b05c:	f8 01       	movw	r30, r16
    b05e:	ec 56       	subi	r30, 0x6C	; 108
    b060:	f1 4f       	sbci	r31, 0xF1	; 241
    b062:	80 81       	ld	r24, Z
    b064:	f8 01       	movw	r30, r16
    b066:	e6 55       	subi	r30, 0x56	; 86
    b068:	f0 4f       	sbci	r31, 0xF0	; 240
    b06a:	87 ff       	sbrs	r24, 7
    b06c:	25 c0       	rjmp	.+74     	; 0xb0b8 <GeneratePreview+0x84>
			if(flashingjeweltimer[p])
    b06e:	80 81       	ld	r24, Z
    b070:	88 23       	and	r24, r24
    b072:	11 f0       	breq	.+4      	; 0xb078 <GeneratePreview+0x44>
				EliminateFlashingJewel(p);
    b074:	8e 2d       	mov	r24, r14
    b076:	c5 df       	rcall	.-118    	; 0xb002 <EliminateFlashingJewel>
			flashingjeweltimer[p] = 2+(prng(MAX_PLAYERS)%5);
    b078:	82 e0       	ldi	r24, 0x02	; 2
    b07a:	b8 dc       	rcall	.-1680   	; 0xa9ec <prng>
    b07c:	f8 01       	movw	r30, r16
    b07e:	e6 55       	subi	r30, 0x56	; 86
    b080:	f0 4f       	sbci	r31, 0xF0	; 240
    b082:	65 e0       	ldi	r22, 0x05	; 5
    b084:	70 e0       	ldi	r23, 0x00	; 0
    b086:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    b08a:	8e 5f       	subi	r24, 0xFE	; 254
    b08c:	80 83       	st	Z, r24
			cursetype[p] &= 127;
    b08e:	f8 01       	movw	r30, r16
    b090:	ec 56       	subi	r30, 0x6C	; 108
    b092:	f1 4f       	sbci	r31, 0xF1	; 241
    b094:	80 81       	ld	r24, Z
    b096:	8f 77       	andi	r24, 0x7F	; 127
    b098:	80 83       	st	Z, r24
			preview[(p*3)+(prng(MAX_PLAYERS)%3)] |= FLASHINGJEWEL;
    b09a:	82 e0       	ldi	r24, 0x02	; 2
    b09c:	a7 dc       	rcall	.-1714   	; 0xa9ec <prng>
    b09e:	63 e0       	ldi	r22, 0x03	; 3
    b0a0:	70 e0       	ldi	r23, 0x00	; 0
    b0a2:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    b0a6:	fc 01       	movw	r30, r24
    b0a8:	ec 0f       	add	r30, r28
    b0aa:	fd 1f       	adc	r31, r29
    b0ac:	e3 59       	subi	r30, 0x93	; 147
    b0ae:	f0 4f       	sbci	r31, 0xF0	; 240
    b0b0:	80 81       	ld	r24, Z
    b0b2:	80 62       	ori	r24, 0x20	; 32
    b0b4:	80 83       	st	Z, r24
    b0b6:	09 c0       	rjmp	.+18     	; 0xb0ca <GeneratePreview+0x96>
		}
		else if(flashingjeweltimer[p]){
    b0b8:	80 81       	ld	r24, Z
    b0ba:	88 23       	and	r24, r24
    b0bc:	31 f0       	breq	.+12     	; 0xb0ca <GeneratePreview+0x96>
			if(!(--flashingjeweltimer[p]))
    b0be:	81 50       	subi	r24, 0x01	; 1
    b0c0:	80 83       	st	Z, r24
    b0c2:	88 23       	and	r24, r24
    b0c4:	11 f4       	brne	.+4      	; 0xb0ca <GeneratePreview+0x96>
				EliminateFlashingJewel(p);
    b0c6:	8e 2d       	mov	r24, r14
    b0c8:	9c df       	rcall	.-200    	; 0xb002 <EliminateFlashingJewel>
		}	
	}	
	for(uint8_t i=0;i<3;i++)
		piece[(p*3)+i] = preview[(p*3)+i];
    b0ca:	fe 01       	movw	r30, r28
    b0cc:	e4 58       	subi	r30, 0x84	; 132
    b0ce:	f0 4f       	sbci	r31, 0xF0	; 240
    b0d0:	9e 01       	movw	r18, r28
    b0d2:	23 59       	subi	r18, 0x93	; 147
    b0d4:	30 4f       	sbci	r19, 0xF0	; 240
    b0d6:	d9 01       	movw	r26, r18
    b0d8:	8c 91       	ld	r24, X
    b0da:	80 83       	st	Z, r24
    b0dc:	fe 01       	movw	r30, r28
    b0de:	31 96       	adiw	r30, 0x01	; 1
    b0e0:	df 01       	movw	r26, r30
    b0e2:	a3 59       	subi	r26, 0x93	; 147
    b0e4:	b0 4f       	sbci	r27, 0xF0	; 240
    b0e6:	8c 91       	ld	r24, X
    b0e8:	e4 58       	subi	r30, 0x84	; 132
    b0ea:	f0 4f       	sbci	r31, 0xF0	; 240
    b0ec:	80 83       	st	Z, r24
    b0ee:	fe 01       	movw	r30, r28
    b0f0:	32 96       	adiw	r30, 0x02	; 2
    b0f2:	df 01       	movw	r26, r30
    b0f4:	a3 59       	subi	r26, 0x93	; 147
    b0f6:	b0 4f       	sbci	r27, 0xF0	; 240
    b0f8:	8c 91       	ld	r24, X
    b0fa:	e4 58       	subi	r30, 0x84	; 132
    b0fc:	f0 4f       	sbci	r31, 0xF0	; 240
    b0fe:	80 83       	st	Z, r24
    b100:	e9 01       	movw	r28, r18
    b102:	ff 24       	eor	r15, r15
	
	for(uint8_t i=0;i<3;i++)
		preview[(p*3)+i] = 1+(prng(p)%6);
    b104:	8e 2d       	mov	r24, r14
    b106:	72 dc       	rcall	.-1820   	; 0xa9ec <prng>
    b108:	66 e0       	ldi	r22, 0x06	; 6
    b10a:	70 e0       	ldi	r23, 0x00	; 0
    b10c:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    b110:	8f 5f       	subi	r24, 0xFF	; 255
    b112:	89 93       	st	Y+, r24
		}	
	}	
	for(uint8_t i=0;i<3;i++)
		piece[(p*3)+i] = preview[(p*3)+i];
	
	for(uint8_t i=0;i<3;i++)
    b114:	f3 94       	inc	r15
    b116:	b3 e0       	ldi	r27, 0x03	; 3
    b118:	fb 16       	cp	r15, r27
    b11a:	a1 f7       	brne	.-24     	; 0xb104 <GeneratePreview+0xd0>
		preview[(p*3)+i] = 1+(prng(p)%6);

	piecey[p] = 0;
    b11c:	f8 01       	movw	r30, r16
    b11e:	e8 55       	subi	r30, 0x58	; 88
    b120:	f1 4f       	sbci	r31, 0xF1	; 241
    b122:	10 82       	st	Z, r1
	piecex[p] = 2;
    b124:	f8 01       	movw	r30, r16
    b126:	e8 55       	subi	r30, 0x58	; 88
    b128:	f0 4f       	sbci	r31, 0xF0	; 240
    b12a:	82 e0       	ldi	r24, 0x02	; 2
    b12c:	80 83       	st	Z, r24
	piecerot[p] = 0;
    b12e:	00 56       	subi	r16, 0x60	; 96
    b130:	10 4f       	sbci	r17, 0xF0	; 240
    b132:	f8 01       	movw	r30, r16
    b134:	10 82       	st	Z, r1
	if(p == 1 && cpustate)
    b136:	f1 e0       	ldi	r31, 0x01	; 1
    b138:	ef 16       	cp	r14, r31
    b13a:	39 f4       	brne	.+14     	; 0xb14a <GeneratePreview+0x116>
    b13c:	80 91 a7 0e 	lds	r24, 0x0EA7
    b140:	88 23       	and	r24, r24
    b142:	19 f0       	breq	.+6      	; 0xb14a <GeneratePreview+0x116>
		cpustate = CPUFIRSTTICK;//let cpu know next move has begun
    b144:	80 e1       	ldi	r24, 0x10	; 16
    b146:	80 93 a7 0e 	sts	0x0EA7, r24
//	downletup[p] = 0;
}
    b14a:	cd b7       	in	r28, 0x3d	; 61
    b14c:	de b7       	in	r29, 0x3e	; 62
    b14e:	e6 e0       	ldi	r30, 0x06	; 6
    b150:	0c 94 33 74 	jmp	0xe866	; 0xe866 <__epilogue_restores__+0x18>

0000b154 <RamTileStateMachine>:
#include "input.h"




void RamTileStateMachine(){//handle updating of all the ram tile graphics
    b154:	a0 e0       	ldi	r26, 0x00	; 0
    b156:	b0 e0       	ldi	r27, 0x00	; 0
    b158:	e0 eb       	ldi	r30, 0xB0	; 176
    b15a:	f8 e5       	ldi	r31, 0x58	; 88
    b15c:	0c 94 0f 74 	jmp	0xe81e	; 0xe81e <__prologue_saves__+0x8>

//TODO MAYBE RAMIFY 4 DIGITS FOR PLAYER SCORES, ELIMINATE NUMBER TILES!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


	if((!ramtilestate[0] && !ramtilestate[1]) || state[0] & PAUSED)
    b160:	90 91 c8 0f 	lds	r25, 0x0FC8
    b164:	99 23       	and	r25, r25
    b166:	29 f4       	brne	.+10     	; 0xb172 <RamTileStateMachine+0x1e>
    b168:	80 91 c9 0f 	lds	r24, 0x0FC9
    b16c:	88 23       	and	r24, r24
    b16e:	09 f4       	brne	.+2      	; 0xb172 <RamTileStateMachine+0x1e>
    b170:	56 c1       	rjmp	.+684    	; 0xb41e <RamTileStateMachine+0x2ca>
    b172:	80 91 aa 0e 	lds	r24, 0x0EAA
    b176:	86 fd       	sbrc	r24, 6
    b178:	52 c1       	rjmp	.+676    	; 0xb41e <RamTileStateMachine+0x2ca>
		return;

	uint8_t t,ttoff;
	uint16_t toff,roff;
	
	if(ramtilestate[0] & NEEDALLRAMMED){//came back from pause or starting round, eliminate possible text artifacts
    b17a:	97 ff       	sbrs	r25, 7
    b17c:	0c c0       	rjmp	.+24     	; 0xb196 <RamTileStateMachine+0x42>
		ramtilestate[0] = ramtilestate[1] = NEEDMAGICRAMMED|NEEDGRIDRAMMED|NEEDCRASHRAMMED|NEEDEXPLOSIONRAMMED;
    b17e:	8f e0       	ldi	r24, 0x0F	; 15
    b180:	80 93 c9 0f 	sts	0x0FC9, r24
    b184:	80 93 c8 0f 	sts	0x0FC8, r24
    b188:	ec e2       	ldi	r30, 0x2C	; 44
    b18a:	f4 e0       	ldi	r31, 0x04	; 4
		for(uint16_t i=0;i<RAM_TILES_COUNT*64;i++)//black out any possible text artifacts from RamifyFont()
			ram_tiles[i] = 0;
    b18c:	11 92       	st	Z+, r1
	uint8_t t,ttoff;
	uint16_t toff,roff;
	
	if(ramtilestate[0] & NEEDALLRAMMED){//came back from pause or starting round, eliminate possible text artifacts
		ramtilestate[0] = ramtilestate[1] = NEEDMAGICRAMMED|NEEDGRIDRAMMED|NEEDCRASHRAMMED|NEEDEXPLOSIONRAMMED;
		for(uint16_t i=0;i<RAM_TILES_COUNT*64;i++)//black out any possible text artifacts from RamifyFont()
    b18e:	4d e0       	ldi	r20, 0x0D	; 13
    b190:	ec 32       	cpi	r30, 0x2C	; 44
    b192:	f4 07       	cpc	r31, r20
    b194:	d9 f7       	brne	.-10     	; 0xb18c <RamTileStateMachine+0x38>
			ram_tiles[i] = 0;
	}		
		
	if(ramtilestate[0] & NEEDMAGICRAMMED){
    b196:	90 91 c8 0f 	lds	r25, 0x0FC8
    b19a:	90 ff       	sbrs	r25, 0
    b19c:	22 c0       	rjmp	.+68     	; 0xb1e2 <RamTileStateMachine+0x8e>
		ramtilestate[0] ^= NEEDMAGICRAMMED;
    b19e:	81 e0       	ldi	r24, 0x01	; 1
    b1a0:	98 27       	eor	r25, r24
    b1a2:	90 93 c8 0f 	sts	0x0FC8, r25
		//if(!magicjewelsonscreen)
			//return;
		uint8_t poff = 6*magiccolor;
    b1a6:	80 91 7d 0e 	lds	r24, 0x0E7D
    b1aa:	96 e0       	ldi	r25, 0x06	; 6
    b1ac:	89 9f       	mul	r24, r25
    b1ae:	80 2d       	mov	r24, r0
    b1b0:	11 24       	eor	r1, r1
    b1b2:	20 e0       	ldi	r18, 0x00	; 0
    b1b4:	30 e0       	ldi	r19, 0x00	; 0
		for(uint16_t i=0;i<(12*64);i++)
			ram_tiles[i] = pgm_read_byte(&MagicPallet[pgm_read_byte(&MagicTiles[i])+poff]);
    b1b6:	90 e0       	ldi	r25, 0x00	; 0
    b1b8:	f9 01       	movw	r30, r18
    b1ba:	e7 52       	subi	r30, 0x27	; 39
    b1bc:	f0 4f       	sbci	r31, 0xF0	; 240
    b1be:	e4 91       	lpm	r30, Z+
    b1c0:	ac 01       	movw	r20, r24
    b1c2:	4e 0f       	add	r20, r30
    b1c4:	51 1d       	adc	r21, r1
    b1c6:	fa 01       	movw	r30, r20
    b1c8:	eb 54       	subi	r30, 0x4B	; 75
    b1ca:	f0 4f       	sbci	r31, 0xF0	; 240
    b1cc:	e4 91       	lpm	r30, Z+
    b1ce:	d9 01       	movw	r26, r18
    b1d0:	a4 5d       	subi	r26, 0xD4	; 212
    b1d2:	bb 4f       	sbci	r27, 0xFB	; 251
    b1d4:	ec 93       	st	X, r30
	if(ramtilestate[0] & NEEDMAGICRAMMED){
		ramtilestate[0] ^= NEEDMAGICRAMMED;
		//if(!magicjewelsonscreen)
			//return;
		uint8_t poff = 6*magiccolor;
		for(uint16_t i=0;i<(12*64);i++)
    b1d6:	2f 5f       	subi	r18, 0xFF	; 255
    b1d8:	3f 4f       	sbci	r19, 0xFF	; 255
    b1da:	53 e0       	ldi	r21, 0x03	; 3
    b1dc:	20 30       	cpi	r18, 0x00	; 0
    b1de:	35 07       	cpc	r19, r21
    b1e0:	59 f7       	brne	.-42     	; 0xb1b8 <RamTileStateMachine+0x64>
			ram_tiles[i] = pgm_read_byte(&MagicPallet[pgm_read_byte(&MagicTiles[i])+poff]);
	}

	if(ramtilestate[0] & NEEDCRASHRAMMED){
    b1e2:	90 91 c8 0f 	lds	r25, 0x0FC8
    b1e6:	93 fd       	sbrc	r25, 3
    b1e8:	1b c0       	rjmp	.+54     	; 0xb220 <RamTileStateMachine+0xcc>
			ramtilestate[p] |= NEEDGRIDRAMMED;//explosion is composited onto copy of grid tiles(which could be varying shaded of red for each player depending on curse)
			
		if(ramtilestate[p] & NEEDGRIDRAMMED){
			ramtilestate[p] ^= NEEDGRIDRAMMED;
			if(cursetype[p] == 0 || cursetime[p] < 4)
				t = pgm_read_byte(&GridPallet[5+level]);
    b1ea:	e0 91 83 0f 	lds	r30, 0x0F83
    b1ee:	f0 e0       	ldi	r31, 0x00	; 0
    b1f0:	e2 5b       	subi	r30, 0xB2	; 178
    b1f2:	f5 4e       	sbci	r31, 0xE5	; 229
    b1f4:	68 ec       	ldi	r22, 0xC8	; 200
    b1f6:	7f e0       	ldi	r23, 0x0F	; 15
    b1f8:	9c e2       	ldi	r25, 0x2C	; 44
    b1fa:	a9 2e       	mov	r10, r25
    b1fc:	98 e0       	ldi	r25, 0x08	; 8
    b1fe:	b9 2e       	mov	r11, r25
    b200:	00 e0       	ldi	r16, 0x00	; 0
    b202:	10 e0       	ldi	r17, 0x00	; 0
    b204:	c1 2c       	mov	r12, r1
    b206:	83 e0       	ldi	r24, 0x03	; 3
    b208:	d8 2e       	mov	r13, r24
    b20a:	ee 24       	eor	r14, r14
    b20c:	ff 24       	eor	r15, r15
	for(uint8_t p=0;p<MAX_PLAYERS;p++){
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED)
			ramtilestate[p] |= NEEDGRIDRAMMED;//explosion is composited onto copy of grid tiles(which could be varying shaded of red for each player depending on curse)
			
		if(ramtilestate[p] & NEEDGRIDRAMMED){
			ramtilestate[p] ^= NEEDGRIDRAMMED;
    b20e:	b4 e0       	ldi	r27, 0x04	; 4
    b210:	6b 2e       	mov	r6, r27
			if(cursetype[p] == 0 || cursetime[p] < 4)
				t = pgm_read_byte(&GridPallet[5+level]);
    b212:	84 90       	lpm	r8, Z+
			else
				t = pgm_read_byte(&GridPallet[3]);
    b214:	ec e4       	ldi	r30, 0x4C	; 76
    b216:	fa e1       	ldi	r31, 0x1A	; 26
    b218:	94 90       	lpm	r9, Z+
			
					
		}
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED){
			//TODO MAKE 4BPP
			ramtilestate[p] ^= NEEDEXPLOSIONRAMMED;
    b21a:	a2 e0       	ldi	r26, 0x02	; 2
    b21c:	7a 2e       	mov	r7, r26
    b21e:	39 c0       	rjmp	.+114    	; 0xb292 <RamTileStateMachine+0x13e>
		for(uint16_t i=0;i<(12*64);i++)
			ram_tiles[i] = pgm_read_byte(&MagicPallet[pgm_read_byte(&MagicTiles[i])+poff]);
	}

	if(ramtilestate[0] & NEEDCRASHRAMMED){
		ramtilestate[0] ^= NEEDCRASHRAMMED;
    b220:	88 e0       	ldi	r24, 0x08	; 8
    b222:	98 27       	eor	r25, r24
    b224:	90 93 c8 0f 	sts	0x0FC8, r25
    b228:	b0 91 83 0f 	lds	r27, 0x0F83
    b22c:	bb 0f       	add	r27, r27
    b22e:	bb 0f       	add	r27, r27
    b230:	bb 0f       	add	r27, r27
    b232:	60 e8       	ldi	r22, 0x80	; 128
    b234:	76 e0       	ldi	r23, 0x06	; 6
    b236:	29 ed       	ldi	r18, 0xD9	; 217
    b238:	32 e1       	ldi	r19, 0x12	; 18
    b23a:	ab 01       	movw	r20, r22
			for(uint8_t j=0;j<64;j++){
				t = pgm_read_byte(&CrashTiles[j]);
				for(uint8_t k=0;k<4;k++){
					t2 = ((t&0b11000000)>>6);
					t <<= 2;
					ram_tiles[roff++] = pgm_read_byte(&CrashPallet[(ttoff+t2)]);
    b23c:	0b 2f       	mov	r16, r27
    b23e:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t t2;
		for(uint8_t i=0;i<2;i++){
			ttoff = (level*8)+(i*4);

			for(uint8_t j=0;j<64;j++){
				t = pgm_read_byte(&CrashTiles[j]);
    b240:	f9 01       	movw	r30, r18
    b242:	84 91       	lpm	r24, Z+
    b244:	ea 01       	movw	r28, r20
    b246:	c4 5d       	subi	r28, 0xD4	; 212
    b248:	db 4f       	sbci	r29, 0xFB	; 251
    b24a:	a8 2f       	mov	r26, r24
    b24c:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t k=0;k<4;k++){
					t2 = ((t&0b11000000)>>6);
    b24e:	8a 2f       	mov	r24, r26
    b250:	82 95       	swap	r24
    b252:	86 95       	lsr	r24
    b254:	86 95       	lsr	r24
    b256:	83 70       	andi	r24, 0x03	; 3
					t <<= 2;
    b258:	aa 0f       	add	r26, r26
    b25a:	aa 0f       	add	r26, r26
					ram_tiles[roff++] = pgm_read_byte(&CrashPallet[(ttoff+t2)]);
    b25c:	f8 01       	movw	r30, r16
    b25e:	e8 0f       	add	r30, r24
    b260:	f1 1d       	adc	r31, r1
    b262:	e7 5c       	subi	r30, 0xC7	; 199
    b264:	f5 4e       	sbci	r31, 0xE5	; 229
    b266:	e4 91       	lpm	r30, Z+
    b268:	e9 93       	st	Y+, r30
		for(uint8_t i=0;i<2;i++){
			ttoff = (level*8)+(i*4);

			for(uint8_t j=0;j<64;j++){
				t = pgm_read_byte(&CrashTiles[j]);
				for(uint8_t k=0;k<4;k++){
    b26a:	9f 5f       	subi	r25, 0xFF	; 255
    b26c:	94 30       	cpi	r25, 0x04	; 4
    b26e:	79 f7       	brne	.-34     	; 0xb24e <RamTileStateMachine+0xfa>
    b270:	4c 5f       	subi	r20, 0xFC	; 252
    b272:	5f 4f       	sbci	r21, 0xFF	; 255
    b274:	2f 5f       	subi	r18, 0xFF	; 255
    b276:	3f 4f       	sbci	r19, 0xFF	; 255
		roff = FIRSTCRASHRT*64;
		uint8_t t2;
		for(uint8_t i=0;i<2;i++){
			ttoff = (level*8)+(i*4);

			for(uint8_t j=0;j<64;j++){
    b278:	f3 e1       	ldi	r31, 0x13	; 19
    b27a:	29 31       	cpi	r18, 0x19	; 25
    b27c:	3f 07       	cpc	r19, r31
    b27e:	01 f7       	brne	.-64     	; 0xb240 <RamTileStateMachine+0xec>
    b280:	60 50       	subi	r22, 0x00	; 0
    b282:	7f 4f       	sbci	r23, 0xFF	; 255
    b284:	bc 5f       	subi	r27, 0xFC	; 252

	if(ramtilestate[0] & NEEDCRASHRAMMED){
		ramtilestate[0] ^= NEEDCRASHRAMMED;
		roff = FIRSTCRASHRT*64;
		uint8_t t2;
		for(uint8_t i=0;i<2;i++){
    b286:	48 e0       	ldi	r20, 0x08	; 8
    b288:	60 38       	cpi	r22, 0x80	; 128
    b28a:	74 07       	cpc	r23, r20
    b28c:	09 f4       	brne	.+2      	; 0xb290 <RamTileStateMachine+0x13c>
    b28e:	ad cf       	rjmp	.-166    	; 0xb1ea <RamTileStateMachine+0x96>
    b290:	d2 cf       	rjmp	.-92     	; 0xb236 <RamTileStateMachine+0xe2>
			}
		}
	}		

	for(uint8_t p=0;p<MAX_PLAYERS;p++){
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED)
    b292:	fb 01       	movw	r30, r22
    b294:	80 81       	ld	r24, Z
    b296:	81 ff       	sbrs	r24, 1
    b298:	02 c0       	rjmp	.+4      	; 0xb29e <RamTileStateMachine+0x14a>
			ramtilestate[p] |= NEEDGRIDRAMMED;//explosion is composited onto copy of grid tiles(which could be varying shaded of red for each player depending on curse)
    b29a:	84 60       	ori	r24, 0x04	; 4
    b29c:	80 83       	st	Z, r24
			
		if(ramtilestate[p] & NEEDGRIDRAMMED){
    b29e:	fb 01       	movw	r30, r22
    b2a0:	80 81       	ld	r24, Z
    b2a2:	82 ff       	sbrs	r24, 2
    b2a4:	65 c0       	rjmp	.+202    	; 0xb370 <RamTileStateMachine+0x21c>
			ramtilestate[p] ^= NEEDGRIDRAMMED;
    b2a6:	86 25       	eor	r24, r6
    b2a8:	80 83       	st	Z, r24
			if(cursetype[p] == 0 || cursetime[p] < 4)
    b2aa:	f8 01       	movw	r30, r16
    b2ac:	ec 56       	subi	r30, 0x6C	; 108
    b2ae:	f1 4f       	sbci	r31, 0xF1	; 241
    b2b0:	80 81       	ld	r24, Z
    b2b2:	88 23       	and	r24, r24
    b2b4:	31 f0       	breq	.+12     	; 0xb2c2 <RamTileStateMachine+0x16e>
    b2b6:	f8 01       	movw	r30, r16
    b2b8:	ef 55       	subi	r30, 0x5F	; 95
    b2ba:	f1 4f       	sbci	r31, 0xF1	; 241
    b2bc:	80 81       	ld	r24, Z
    b2be:	84 30       	cpi	r24, 0x04	; 4
    b2c0:	10 f4       	brcc	.+4      	; 0xb2c6 <RamTileStateMachine+0x172>
				t = pgm_read_byte(&GridPallet[5+level]);
    b2c2:	98 2d       	mov	r25, r8
    b2c4:	01 c0       	rjmp	.+2      	; 0xb2c8 <RamTileStateMachine+0x174>
			else
				t = pgm_read_byte(&GridPallet[3]);
    b2c6:	99 2d       	mov	r25, r9
    b2c8:	d7 01       	movw	r26, r14
    b2ca:	a4 5d       	subi	r26, 0xD4	; 212
    b2cc:	bb 4f       	sbci	r27, 0xFB	; 251
    b2ce:	40 e0       	ldi	r20, 0x00	; 0
    b2d0:	50 e0       	ldi	r21, 0x00	; 0
				
			roff = (FIRSTGRIDRT+(p*3))*64;
			ttoff = 0;
			uint8_t t2;
			for(uint8_t i=0;i<3*64;i+=8){
				t2 = pgm_read_byte(&GridTiles[ttoff++]);//get 1bpp image data
    b2d2:	fa 01       	movw	r30, r20
    b2d4:	e3 56       	subi	r30, 0x63	; 99
    b2d6:	f0 4f       	sbci	r31, 0xF0	; 240
    b2d8:	84 91       	lpm	r24, Z+
				if(t2&128)
    b2da:	87 ff       	sbrs	r24, 7
    b2dc:	05 c0       	rjmp	.+10     	; 0xb2e8 <RamTileStateMachine+0x194>
					ram_tiles[roff] = t;
    b2de:	a0 50       	subi	r26, 0x00	; 0
    b2e0:	bb 4f       	sbci	r27, 0xFB	; 251
    b2e2:	9c 93       	st	X, r25
    b2e4:	a0 50       	subi	r26, 0x00	; 0
    b2e6:	b5 40       	sbci	r27, 0x05	; 5
				roff++;
				t2 <<= 1;
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b2e8:	38 2f       	mov	r19, r24
    b2ea:	33 0f       	add	r19, r19
    b2ec:	86 ff       	sbrs	r24, 6
    b2ee:	05 c0       	rjmp	.+10     	; 0xb2fa <RamTileStateMachine+0x1a6>
    b2f0:	af 5f       	subi	r26, 0xFF	; 255
    b2f2:	ba 4f       	sbci	r27, 0xFA	; 250
    b2f4:	9c 93       	st	X, r25
    b2f6:	a1 50       	subi	r26, 0x01	; 1
    b2f8:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b2fa:	23 2f       	mov	r18, r19
    b2fc:	22 0f       	add	r18, r18
    b2fe:	36 ff       	sbrs	r19, 6
    b300:	05 c0       	rjmp	.+10     	; 0xb30c <RamTileStateMachine+0x1b8>
    b302:	ae 5f       	subi	r26, 0xFE	; 254
    b304:	ba 4f       	sbci	r27, 0xFA	; 250
    b306:	9c 93       	st	X, r25
    b308:	a2 50       	subi	r26, 0x02	; 2
    b30a:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b30c:	82 2f       	mov	r24, r18
    b30e:	88 0f       	add	r24, r24
    b310:	26 ff       	sbrs	r18, 6
    b312:	05 c0       	rjmp	.+10     	; 0xb31e <RamTileStateMachine+0x1ca>
    b314:	ad 5f       	subi	r26, 0xFD	; 253
    b316:	ba 4f       	sbci	r27, 0xFA	; 250
    b318:	9c 93       	st	X, r25
    b31a:	a3 50       	subi	r26, 0x03	; 3
    b31c:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b31e:	28 2f       	mov	r18, r24
    b320:	22 0f       	add	r18, r18
    b322:	86 ff       	sbrs	r24, 6
    b324:	05 c0       	rjmp	.+10     	; 0xb330 <RamTileStateMachine+0x1dc>
    b326:	ac 5f       	subi	r26, 0xFC	; 252
    b328:	ba 4f       	sbci	r27, 0xFA	; 250
    b32a:	9c 93       	st	X, r25
    b32c:	a4 50       	subi	r26, 0x04	; 4
    b32e:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b330:	82 2f       	mov	r24, r18
    b332:	88 0f       	add	r24, r24
    b334:	26 ff       	sbrs	r18, 6
    b336:	05 c0       	rjmp	.+10     	; 0xb342 <RamTileStateMachine+0x1ee>
    b338:	ab 5f       	subi	r26, 0xFB	; 251
    b33a:	ba 4f       	sbci	r27, 0xFA	; 250
    b33c:	9c 93       	st	X, r25
    b33e:	a5 50       	subi	r26, 0x05	; 5
    b340:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b342:	28 2f       	mov	r18, r24
    b344:	22 0f       	add	r18, r18
    b346:	86 ff       	sbrs	r24, 6
    b348:	05 c0       	rjmp	.+10     	; 0xb354 <RamTileStateMachine+0x200>
    b34a:	aa 5f       	subi	r26, 0xFA	; 250
    b34c:	ba 4f       	sbci	r27, 0xFA	; 250
    b34e:	9c 93       	st	X, r25
    b350:	a6 50       	subi	r26, 0x06	; 6
    b352:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b354:	26 ff       	sbrs	r18, 6
    b356:	05 c0       	rjmp	.+10     	; 0xb362 <RamTileStateMachine+0x20e>
    b358:	a9 5f       	subi	r26, 0xF9	; 249
    b35a:	ba 4f       	sbci	r27, 0xFA	; 250
    b35c:	9c 93       	st	X, r25
    b35e:	a7 50       	subi	r26, 0x07	; 7
    b360:	b5 40       	sbci	r27, 0x05	; 5
    b362:	4f 5f       	subi	r20, 0xFF	; 255
    b364:	5f 4f       	sbci	r21, 0xFF	; 255
    b366:	18 96       	adiw	r26, 0x08	; 8
				t = pgm_read_byte(&GridPallet[3]);
				
			roff = (FIRSTGRIDRT+(p*3))*64;
			ttoff = 0;
			uint8_t t2;
			for(uint8_t i=0;i<3*64;i+=8){
    b368:	48 31       	cpi	r20, 0x18	; 24
    b36a:	51 05       	cpc	r21, r1
    b36c:	09 f0       	breq	.+2      	; 0xb370 <RamTileStateMachine+0x21c>
    b36e:	b1 cf       	rjmp	.-158    	; 0xb2d2 <RamTileStateMachine+0x17e>
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
			}			
			
					
		}
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED){
    b370:	fb 01       	movw	r30, r22
    b372:	80 81       	ld	r24, Z
    b374:	81 ff       	sbrs	r24, 1
    b376:	41 c0       	rjmp	.+130    	; 0xb3fa <RamTileStateMachine+0x2a6>
			//TODO MAKE 4BPP
			ramtilestate[p] ^= NEEDEXPLOSIONRAMMED;
    b378:	87 25       	eor	r24, r7
    b37a:	80 83       	st	Z, r24
    b37c:	d7 01       	movw	r26, r14
    b37e:	a4 5d       	subi	r26, 0xD4	; 212
    b380:	b6 4f       	sbci	r27, 0xF6	; 246
    b382:	e6 01       	movw	r28, r12
    b384:	c4 5d       	subi	r28, 0xD4	; 212
    b386:	db 4f       	sbci	r29, 0xFB	; 251
    b388:	fe 01       	movw	r30, r28
    b38a:	90 e0       	ldi	r25, 0x00	; 0
			toff = (uint16_t)(FIRSTGRIDRT+(p*3))*64;
			roff = (uint16_t)(FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64;i++){//first, copy over grid tiles(which could be colored from curse)
				ram_tiles[roff++] = ram_tiles[toff++];
    b38c:	8c 91       	ld	r24, X
    b38e:	80 83       	st	Z, r24
				ram_tiles[roff++] = ram_tiles[toff++];
    b390:	11 96       	adiw	r26, 0x01	; 1
    b392:	8c 91       	ld	r24, X
    b394:	11 97       	sbiw	r26, 0x01	; 1
    b396:	81 83       	std	Z+1, r24	; 0x01
				ram_tiles[roff++] = ram_tiles[toff++];
    b398:	12 96       	adiw	r26, 0x02	; 2
    b39a:	8c 91       	ld	r24, X
    b39c:	12 97       	sbiw	r26, 0x02	; 2
    b39e:	82 83       	std	Z+2, r24	; 0x02
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED){
			//TODO MAKE 4BPP
			ramtilestate[p] ^= NEEDEXPLOSIONRAMMED;
			toff = (uint16_t)(FIRSTGRIDRT+(p*3))*64;
			roff = (uint16_t)(FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64;i++){//first, copy over grid tiles(which could be colored from curse)
    b3a0:	9f 5f       	subi	r25, 0xFF	; 255
    b3a2:	13 96       	adiw	r26, 0x03	; 3
    b3a4:	33 96       	adiw	r30, 0x03	; 3
    b3a6:	90 34       	cpi	r25, 0x40	; 64
    b3a8:	89 f7       	brne	.-30     	; 0xb38c <RamTileStateMachine+0x238>
    b3aa:	f6 01       	movw	r30, r12
    b3ac:	e4 51       	subi	r30, 0x14	; 20
    b3ae:	fb 4f       	sbci	r31, 0xFB	; 251
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
			}
			for(uint8_t i=0;i<16;i++){//because the 4th grid tile is NOT a ram tile(just a black one) copy black over old explosion data for this ram tile
				ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;
    b3b0:	10 82       	st	Z, r1
    b3b2:	11 82       	std	Z+1, r1	; 0x01
    b3b4:	12 82       	std	Z+2, r1	; 0x02
    b3b6:	13 82       	std	Z+3, r1	; 0x03
    b3b8:	34 96       	adiw	r30, 0x04	; 4
			for(uint8_t i=0;i<64;i++){//first, copy over grid tiles(which could be colored from curse)
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
			}
			for(uint8_t i=0;i<16;i++){//because the 4th grid tile is NOT a ram tile(just a black one) copy black over old explosion data for this ram tile
    b3ba:	ea 15       	cp	r30, r10
    b3bc:	fb 05       	cpc	r31, r11
    b3be:	c1 f7       	brne	.-16     	; 0xb3b0 <RamTileStateMachine+0x25c>
    b3c0:	f8 01       	movw	r30, r16
    b3c2:	e3 56       	subi	r30, 0x63	; 99
    b3c4:	f1 4f       	sbci	r31, 0xF1	; 241
    b3c6:	80 81       	ld	r24, Z
    b3c8:	90 e0       	ldi	r25, 0x00	; 0
    b3ca:	a0 e0       	ldi	r26, 0x00	; 0
    b3cc:	b0 e0       	ldi	r27, 0x00	; 0
    b3ce:	ba 2f       	mov	r27, r26
    b3d0:	a9 2f       	mov	r26, r25
    b3d2:	98 2f       	mov	r25, r24
    b3d4:	88 27       	eor	r24, r24
    b3d6:	fc 01       	movw	r30, r24
    b3d8:	31 96       	adiw	r30, 0x01	; 1
    b3da:	e7 5e       	subi	r30, 0xE7	; 231
    b3dc:	fc 4e       	sbci	r31, 0xEC	; 236
    b3de:	0a c0       	rjmp	.+20     	; 0xb3f4 <RamTileStateMachine+0x2a0>
				ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;
			}			
			toff = (uint16_t)(256L*stateframe[p]);
			roff = (FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64*2;i++){
				t = pgm_read_byte(&ExplosionTiles[toff++]);
    b3e0:	31 97       	sbiw	r30, 0x01	; 1
    b3e2:	84 91       	lpm	r24, Z+
    b3e4:	31 96       	adiw	r30, 0x01	; 1
				if(t)
    b3e6:	81 11       	cpse	r24, r1
					ram_tiles[roff] = t;
    b3e8:	88 83       	st	Y, r24
				roff++;
				//inlined to avoid need for 16bit iterator(TODO CHECK ASM OUTPUT)
				t = pgm_read_byte(&ExplosionTiles[toff++]);
    b3ea:	84 91       	lpm	r24, Z+
				if(t)
    b3ec:	81 11       	cpse	r24, r1
					ram_tiles[roff] = t;
    b3ee:	89 83       	std	Y+1, r24	; 0x01
    b3f0:	32 96       	adiw	r30, 0x02	; 2
    b3f2:	22 96       	adiw	r28, 0x02	; 2
			for(uint8_t i=0;i<16;i++){//because the 4th grid tile is NOT a ram tile(just a black one) copy black over old explosion data for this ram tile
				ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;
			}			
			toff = (uint16_t)(256L*stateframe[p]);
			roff = (FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64*2;i++){
    b3f4:	ca 15       	cp	r28, r10
    b3f6:	db 05       	cpc	r29, r11
    b3f8:	99 f7       	brne	.-26     	; 0xb3e0 <RamTileStateMachine+0x28c>
    b3fa:	0f 5f       	subi	r16, 0xFF	; 255
    b3fc:	1f 4f       	sbci	r17, 0xFF	; 255
    b3fe:	6f 5f       	subi	r22, 0xFF	; 255
    b400:	7f 4f       	sbci	r23, 0xFF	; 255
    b402:	40 e0       	ldi	r20, 0x00	; 0
    b404:	51 e0       	ldi	r21, 0x01	; 1
    b406:	a4 0e       	add	r10, r20
    b408:	b5 1e       	adc	r11, r21
    b40a:	c4 0e       	add	r12, r20
    b40c:	d5 1e       	adc	r13, r21
    b40e:	80 ec       	ldi	r24, 0xC0	; 192
    b410:	90 e0       	ldi	r25, 0x00	; 0
    b412:	e8 0e       	add	r14, r24
    b414:	f9 1e       	adc	r15, r25
				}				
			}
		}
	}		

	for(uint8_t p=0;p<MAX_PLAYERS;p++){
    b416:	02 30       	cpi	r16, 0x02	; 2
    b418:	11 05       	cpc	r17, r1
    b41a:	09 f0       	breq	.+2      	; 0xb41e <RamTileStateMachine+0x2ca>
    b41c:	3a cf       	rjmp	.-396    	; 0xb292 <RamTileStateMachine+0x13e>
				roff++;
				*/
			}
		}
	}
}
    b41e:	cd b7       	in	r28, 0x3d	; 61
    b420:	de b7       	in	r29, 0x3e	; 62
    b422:	ee e0       	ldi	r30, 0x0E	; 14
    b424:	0c 94 2b 74 	jmp	0xe856	; 0xe856 <__epilogue_restores__+0x8>

0000b428 <SetInitialState>:
		vram[i] = t;
}

extern uint8_t cpustate;
void SetInitialState(){
    b428:	a0 e0       	ldi	r26, 0x00	; 0
    b42a:	b0 e0       	ldi	r27, 0x00	; 0
    b42c:	ea e1       	ldi	r30, 0x1A	; 26
    b42e:	fa e5       	ldi	r31, 0x5A	; 90
    b430:	0c 94 0e 74 	jmp	0xe81c	; 0xe81c <__prologue_saves__+0x6>
	game_state = GS_PLAYING|GS_FIRSTTICK;
    b434:	81 e2       	ldi	r24, 0x21	; 33
    b436:	80 93 a6 0e 	sts	0x0EA6, r24
	masterVolume = MASTERVOLUME;
    b43a:	80 e8       	ldi	r24, 0x80	; 128
    b43c:	80 93 5f 0e 	sts	0x0E5F, r24
	if(game_mode == 0)
    b440:	80 91 a4 0e 	lds	r24, 0x0EA4
    b444:	88 23       	and	r24, r24
    b446:	19 f4       	brne	.+6      	; 0xb44e <SetInitialState+0x26>
		cpustate = 16;//CPUFIRSTTICK;
    b448:	80 e1       	ldi	r24, 0x10	; 16
    b44a:	80 93 a7 0e 	sts	0x0EA7, r24
ramtilestate[0] = 255;
    b44e:	8f ef       	ldi	r24, 0xFF	; 255
    b450:	80 93 c8 0f 	sts	0x0FC8, r24
	cursetime[0] = cursetime[1] = 2;
    b454:	12 e0       	ldi	r17, 0x02	; 2
    b456:	10 93 a2 0e 	sts	0x0EA2, r17
    b45a:	10 93 a1 0e 	sts	0x0EA1, r17
	RamTileStateMachine();
    b45e:	7a de       	rcall	.-780    	; 0xb154 <RamTileStateMachine>
	cursetime[0] = cursetime[1] = 2;
    b460:	10 93 a2 0e 	sts	0x0EA2, r17
    b464:	10 93 a1 0e 	sts	0x0EA1, r17
	
	//if(!game_mode)
	//	cpustate = CPUFIRSTTICK;
	//else
		//cpustate = 0;
	level = !level;
    b468:	90 e0       	ldi	r25, 0x00	; 0
    b46a:	80 91 83 0f 	lds	r24, 0x0F83
    b46e:	88 23       	and	r24, r24
    b470:	09 f4       	brne	.+2      	; 0xb474 <SetInitialState+0x4c>
    b472:	91 e0       	ldi	r25, 0x01	; 1
    b474:	90 93 83 0f 	sts	0x0F83, r25
	vsyncs = 0;
    b478:	10 92 78 0e 	sts	0x0E78, r1
		speed = pgm_read_byte(&PCMSPEEDS[i-FIRSTPCMSOUND]);
	TriggerNote(4,i,speed,vol);
}

inline void DoSong(){
	if(musictrack != level){
    b47c:	80 91 00 01 	lds	r24, 0x0100
    b480:	89 17       	cp	r24, r25
    b482:	69 f0       	breq	.+26     	; 0xb49e <SetInitialState+0x76>
		if(level == 0)
    b484:	99 23       	and	r25, r25
    b486:	19 f4       	brne	.+6      	; 0xb48e <SetInitialState+0x66>
		StartSong(Song1);
    b488:	89 e4       	ldi	r24, 0x49	; 73
    b48a:	9a e7       	ldi	r25, 0x7A	; 122
    b48c:	02 c0       	rjmp	.+4      	; 0xb492 <SetInitialState+0x6a>
		else
		StartSong(Song0);
    b48e:	8b e7       	ldi	r24, 0x7B	; 123
    b490:	9b e6       	ldi	r25, 0x6B	; 107
    b492:	0e 94 07 4c 	call	0x980e	; 0x980e <StartSong>
		musictrack = level;
    b496:	80 91 83 0f 	lds	r24, 0x0F83
    b49a:	80 93 00 01 	sts	0x0100, r24
    b49e:	7f e8       	ldi	r23, 0x8F	; 143
    b4a0:	e7 2e       	mov	r14, r23
    b4a2:	7f e0       	ldi	r23, 0x0F	; 15
    b4a4:	f7 2e       	mov	r15, r23
    b4a6:	87 01       	movw	r16, r14
    b4a8:	65 e9       	ldi	r22, 0x95	; 149
    b4aa:	86 2e       	mov	r8, r22
    b4ac:	6f e0       	ldi	r22, 0x0F	; 15
    b4ae:	96 2e       	mov	r9, r22
    b4b0:	52 ea       	ldi	r21, 0xA2	; 162
    b4b2:	a5 2e       	mov	r10, r21
    b4b4:	5f e0       	ldi	r21, 0x0F	; 15
    b4b6:	b5 2e       	mov	r11, r21
    b4b8:	c0 e0       	ldi	r28, 0x00	; 0
    b4ba:	d0 e0       	ldi	r29, 0x00	; 0
    b4bc:	dd 24       	eor	r13, r13
	DoSong();
		
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		for(uint8_t j=0;j<3;j++)
			crashedtype[(i*3)+j] = 255;
    b4be:	cc 24       	eor	r12, r12
    b4c0:	ca 94       	dec	r12
			GeneratePreview(0);
			GeneratePreview(0);
		}			
		clear_well(i);
		piecey[i] = 0;
		piecex[i] = 2;
    b4c2:	42 e0       	ldi	r20, 0x02	; 2
    b4c4:	54 2e       	mov	r5, r20
		piecerot[i] = 0;
		state[i] = GETREADY;
    b4c6:	30 e8       	ldi	r19, 0x80	; 128
    b4c8:	63 2e       	mov	r6, r19
		statetimer[i] = 0;
		stateframe[i] = 0;
		droptimer[i] = DROPTIMER;
    b4ca:	20 e1       	ldi	r18, 0x10	; 16
    b4cc:	72 2e       	mov	r7, r18
    b4ce:	85 c0       	rjmp	.+266    	; 0xb5da <SetInitialState+0x1b2>
		
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		for(uint8_t j=0;j<3;j++)
			crashedtype[(i*3)+j] = 255;
		if(i){
			lfsr[i] = lfsr[i-1];
    b4d0:	80 91 99 0f 	lds	r24, 0x0F99
    b4d4:	90 91 9a 0f 	lds	r25, 0x0F9A
    b4d8:	90 93 9c 0f 	sts	0x0F9C, r25
    b4dc:	80 93 9b 0f 	sts	0x0F9B, r24
			piece[3+0] = piece[0];
    b4e0:	80 91 7c 0f 	lds	r24, 0x0F7C
    b4e4:	80 93 7f 0f 	sts	0x0F7F, r24
			piece[3+1] = piece[1];
    b4e8:	80 91 7d 0f 	lds	r24, 0x0F7D
    b4ec:	80 93 80 0f 	sts	0x0F80, r24
			piece[3+2] = piece[2];
    b4f0:	80 91 7e 0f 	lds	r24, 0x0F7E
    b4f4:	80 93 81 0f 	sts	0x0F81, r24
			preview[3+0] = preview[0];
    b4f8:	80 91 6d 0f 	lds	r24, 0x0F6D
    b4fc:	80 93 70 0f 	sts	0x0F70, r24
			preview[3+1] = preview[1];
    b500:	80 91 6e 0f 	lds	r24, 0x0F6E
    b504:	80 93 71 0f 	sts	0x0F71, r24
			preview[3+2] = preview[2];
    b508:	80 91 6f 0f 	lds	r24, 0x0F6F
    b50c:	80 93 72 0f 	sts	0x0F72, r24
    b510:	04 c0       	rjmp	.+8      	; 0xb51a <SetInitialState+0xf2>
		}else{
			GeneratePreview(0);
    b512:	80 e0       	ldi	r24, 0x00	; 0
    b514:	8f dd       	rcall	.-1250   	; 0xb034 <GeneratePreview>
			GeneratePreview(0);
    b516:	80 e0       	ldi	r24, 0x00	; 0
    b518:	8d dd       	rcall	.-1254   	; 0xb034 <GeneratePreview>
    b51a:	80 e0       	ldi	r24, 0x00	; 0
    b51c:	90 e0       	ldi	r25, 0x00	; 0
	}
	return true;
}

void GeneratePreview(uint8_t p);
void clear_well(uint8_t p){uint8_t off = p*WELLSIZE;for(uint8_t i=0;i<WELLSIZE;i++){well[off++]=0;}}//for(uint8_t y=0;y<16;y++){for(uint8_t x=0;x<6;x++){set_well(x,y,p,0);}}}
    b51e:	ed 2d       	mov	r30, r13
    b520:	e8 0f       	add	r30, r24
    b522:	f0 e0       	ldi	r31, 0x00	; 0
    b524:	e3 55       	subi	r30, 0x53	; 83
    b526:	f1 4f       	sbci	r31, 0xF1	; 241
    b528:	10 82       	st	Z, r1
    b52a:	01 96       	adiw	r24, 0x01	; 1
    b52c:	80 36       	cpi	r24, 0x60	; 96
    b52e:	91 05       	cpc	r25, r1
    b530:	b1 f7       	brne	.-20     	; 0xb51e <SetInitialState+0xf6>
		}			
		clear_well(i);
		piecey[i] = 0;
    b532:	fe 01       	movw	r30, r28
    b534:	e8 55       	subi	r30, 0x58	; 88
    b536:	f1 4f       	sbci	r31, 0xF1	; 241
    b538:	10 82       	st	Z, r1
		piecex[i] = 2;
    b53a:	fe 01       	movw	r30, r28
    b53c:	e8 55       	subi	r30, 0x58	; 88
    b53e:	f0 4f       	sbci	r31, 0xF0	; 240
    b540:	50 82       	st	Z, r5
		piecerot[i] = 0;
    b542:	fe 01       	movw	r30, r28
    b544:	e0 56       	subi	r30, 0x60	; 96
    b546:	f0 4f       	sbci	r31, 0xF0	; 240
    b548:	10 82       	st	Z, r1
		state[i] = GETREADY;
    b54a:	fe 01       	movw	r30, r28
    b54c:	e6 55       	subi	r30, 0x56	; 86
    b54e:	f1 4f       	sbci	r31, 0xF1	; 241
    b550:	60 82       	st	Z, r6
		statetimer[i] = 0;
    b552:	fe 01       	movw	r30, r28
    b554:	e8 57       	subi	r30, 0x78	; 120
    b556:	f0 4f       	sbci	r31, 0xF0	; 240
    b558:	10 82       	st	Z, r1
		stateframe[i] = 0;
    b55a:	fe 01       	movw	r30, r28
    b55c:	e3 56       	subi	r30, 0x63	; 99
    b55e:	f1 4f       	sbci	r31, 0xF1	; 241
    b560:	10 82       	st	Z, r1
		droptimer[i] = DROPTIMER;
    b562:	fe 01       	movw	r30, r28
    b564:	ea 57       	subi	r30, 0x7A	; 122
    b566:	f1 4f       	sbci	r31, 0xF1	; 241
    b568:	70 82       	st	Z, r7
		crashcomingup[i] = 0;
    b56a:	fe 01       	movw	r30, r28
    b56c:	e7 58       	subi	r30, 0x87	; 135
    b56e:	f0 4f       	sbci	r31, 0xF0	; 240
    b570:	10 82       	st	Z, r1
		crashcomingdown[i] = 0;
    b572:	fe 01       	movw	r30, r28
    b574:	ed 53       	subi	r30, 0x3D	; 61
    b576:	f0 4f       	sbci	r31, 0xF0	; 240
    b578:	10 82       	st	Z, r1
		crashheight[i] = 0;
    b57a:	fe 01       	movw	r30, r28
    b57c:	ec 54       	subi	r30, 0x4C	; 76
    b57e:	f0 4f       	sbci	r31, 0xF0	; 240
    b580:	10 82       	st	Z, r1
		wellfullness[i] = 0;
    b582:	f4 01       	movw	r30, r8
    b584:	11 92       	st	Z+, r1
    b586:	11 92       	st	Z+, r1
    b588:	4f 01       	movw	r8, r30
		sideheld[i] = 0;
    b58a:	fe 01       	movw	r30, r28
    b58c:	e5 57       	subi	r30, 0x75	; 117
    b58e:	f0 4f       	sbci	r31, 0xF0	; 240
    b590:	10 82       	st	Z, r1
		halfstep[i] = 0;
    b592:	fe 01       	movw	r30, r28
    b594:	ef 54       	subi	r30, 0x4F	; 79
    b596:	f0 4f       	sbci	r31, 0xF0	; 240
    b598:	10 82       	st	Z, r1
		wasmagicjewel[i] = 0;
    b59a:	fe 01       	movw	r30, r28
    b59c:	e4 55       	subi	r30, 0x54	; 84
    b59e:	f0 4f       	sbci	r31, 0xF0	; 240
    b5a0:	10 82       	st	Z, r1
		magicjewelssummoned[i] = 0;
    b5a2:	fe 01       	movw	r30, r28
    b5a4:	e7 56       	subi	r30, 0x67	; 103
    b5a6:	f1 4f       	sbci	r31, 0xF1	; 241
    b5a8:	10 82       	st	Z, r1
		chain[i] = 0;
    b5aa:	fe 01       	movw	r30, r28
    b5ac:	ea 55       	subi	r30, 0x5A	; 90
    b5ae:	f0 4f       	sbci	r31, 0xF0	; 240
    b5b0:	10 82       	st	Z, r1
		score[i] = 0;
    b5b2:	fe 01       	movw	r30, r28
    b5b4:	ed 58       	subi	r30, 0x8D	; 141
    b5b6:	f0 4f       	sbci	r31, 0xF0	; 240
    b5b8:	10 82       	st	Z, r1
		jewels[i] = 0;
    b5ba:	f5 01       	movw	r30, r10
    b5bc:	11 92       	st	Z+, r1
    b5be:	11 92       	st	Z+, r1
    b5c0:	5f 01       	movw	r10, r30
    b5c2:	21 96       	adiw	r28, 0x01	; 1
    b5c4:	83 e0       	ldi	r24, 0x03	; 3
    b5c6:	90 e0       	ldi	r25, 0x00	; 0
    b5c8:	e8 0e       	add	r14, r24
    b5ca:	f9 1e       	adc	r15, r25
    b5cc:	0d 5f       	subi	r16, 0xFD	; 253
    b5ce:	1f 4f       	sbci	r17, 0xFF	; 255
    b5d0:	90 e6       	ldi	r25, 0x60	; 96
    b5d2:	d9 0e       	add	r13, r25
		//cpustate = 0;
	level = !level;
	vsyncs = 0;
	DoSong();
		
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    b5d4:	e0 ec       	ldi	r30, 0xC0	; 192
    b5d6:	de 16       	cp	r13, r30
    b5d8:	49 f0       	breq	.+18     	; 0xb5ec <SetInitialState+0x1c4>
		for(uint8_t j=0;j<3;j++)
			crashedtype[(i*3)+j] = 255;
    b5da:	f7 01       	movw	r30, r14
    b5dc:	c0 82       	st	Z, r12
    b5de:	f8 01       	movw	r30, r16
    b5e0:	c1 82       	std	Z+1, r12	; 0x01
    b5e2:	c2 82       	std	Z+2, r12	; 0x02
		if(i){
    b5e4:	cc 23       	and	r28, r28
    b5e6:	09 f0       	breq	.+2      	; 0xb5ea <SetInitialState+0x1c2>
    b5e8:	73 cf       	rjmp	.-282    	; 0xb4d0 <SetInitialState+0xa8>
    b5ea:	93 cf       	rjmp	.-218    	; 0xb512 <SetInitialState+0xea>
		magicjewelssummoned[i] = 0;
		chain[i] = 0;
		score[i] = 0;
		jewels[i] = 0;
	}
	magicjewelsonscreen = 0;
    b5ec:	10 92 6f 0e 	sts	0x0E6F, r1
	tickssincetempochange = 0;
    b5f0:	10 92 9b 0e 	sts	0x0E9B, r1
	musicspeed = 0;
    b5f4:	10 92 7b 0f 	sts	0x0F7B, r1
	//roundtimer = 0;
}
    b5f8:	cd b7       	in	r28, 0x3d	; 61
    b5fa:	de b7       	in	r29, 0x3e	; 62
    b5fc:	ef e0       	ldi	r30, 0x0F	; 15
    b5fe:	0c 94 2a 74 	jmp	0xe854	; 0xe854 <__epilogue_restores__+0x6>

0000b602 <UpdatePads>:
		padstate[0] = BTN_RIGHT;
	else
		padstate[0] = BTN_DOWN;
}

void UpdatePads(){
    b602:	ff 92       	push	r15
    b604:	0f 93       	push	r16
    b606:	1f 93       	push	r17
    b608:	cf 93       	push	r28
    b60a:	df 93       	push	r29
	ReadControllers();
    b60c:	0e 94 3e 4b 	call	0x967c	; 0x967c <ReadControllers>
    b610:	c2 e8       	ldi	r28, 0x82	; 130
    b612:	de e0       	ldi	r29, 0x0E	; 14
    b614:	0e e7       	ldi	r16, 0x7E	; 126
    b616:	1e e0       	ldi	r17, 0x0E	; 14
    b618:	ff 24       	eor	r15, r15
	for(uint8_t i=0;i<2;i++){
		if(i == 1 && game_mode == 0)//cpu will take care of this pad
    b61a:	81 e0       	ldi	r24, 0x01	; 1
    b61c:	f8 16       	cp	r15, r24
    b61e:	31 f4       	brne	.+12     	; 0xb62c <UpdatePads+0x2a>
    b620:	80 91 a4 0e 	lds	r24, 0x0EA4
    b624:	88 23       	and	r24, r24
    b626:	11 f4       	brne	.+4      	; 0xb62c <UpdatePads+0x2a>
			CpuFillPad();
    b628:	43 db       	rcall	.-2426   	; 0xacb0 <CpuFillPad>
    b62a:	30 c0       	rjmp	.+96     	; 0xb68c <UpdatePads+0x8a>
		else{
			oldpadstate[i] = padstate[i];
    b62c:	88 81       	ld	r24, Y
    b62e:	99 81       	ldd	r25, Y+1	; 0x01
    b630:	f8 01       	movw	r30, r16
    b632:	91 83       	std	Z+1, r25	; 0x01
    b634:	80 83       	st	Z, r24
			if(game_state & GS_DEMO){//demo mode fills in for player 1
    b636:	80 91 a6 0e 	lds	r24, 0x0EA6
    b63a:	81 ff       	sbrs	r24, 1
    b63c:	22 c0       	rjmp	.+68     	; 0xb682 <UpdatePads+0x80>
				if(demo_inp_wait)
    b63e:	80 91 84 0f 	lds	r24, 0x0F84
    b642:	88 23       	and	r24, r24
    b644:	11 f0       	breq	.+4      	; 0xb64a <UpdatePads+0x48>
					demo_inp_wait--;
    b646:	81 50       	subi	r24, 0x01	; 1
    b648:	19 c0       	rjmp	.+50     	; 0xb67c <UpdatePads+0x7a>
				else{
					demo_decision = pgm_read_byte(&DemoData[demo_off++]);
    b64a:	80 91 97 0e 	lds	r24, 0x0E97
    b64e:	90 91 98 0e 	lds	r25, 0x0E98
    b652:	9c 01       	movw	r18, r24
    b654:	2f 5f       	subi	r18, 0xFF	; 255
    b656:	3f 4f       	sbci	r19, 0xFF	; 255
    b658:	80 5f       	subi	r24, 0xF0	; 240
    b65a:	94 47       	sbci	r25, 0x74	; 116
    b65c:	fc 01       	movw	r30, r24
    b65e:	84 91       	lpm	r24, Z+
    b660:	80 93 b0 0f 	sts	0x0FB0, r24
					demo_inp_wait = pgm_read_byte(&DemoData[demo_off++]);
    b664:	2f 5f       	subi	r18, 0xFF	; 255
    b666:	3f 4f       	sbci	r19, 0xFF	; 255
    b668:	30 93 98 0e 	sts	0x0E98, r19
    b66c:	20 93 97 0e 	sts	0x0E97, r18
    b670:	21 50       	subi	r18, 0x01	; 1
    b672:	30 40       	sbci	r19, 0x00	; 0
    b674:	20 5f       	subi	r18, 0xF0	; 240
    b676:	34 47       	sbci	r19, 0x74	; 116
    b678:	f9 01       	movw	r30, r18
    b67a:	84 91       	lpm	r24, Z+
    b67c:	80 93 84 0f 	sts	0x0F84, r24
    b680:	05 c0       	rjmp	.+10     	; 0xb68c <UpdatePads+0x8a>
				}			
			}
			else
				padstate[i] = ReadJoypad(i);
    b682:	8f 2d       	mov	r24, r15
    b684:	0e 94 e4 4a 	call	0x95c8	; 0x95c8 <ReadJoypad>
    b688:	99 83       	std	Y+1, r25	; 0x01
    b68a:	88 83       	st	Y, r24
		padstate[0] = BTN_DOWN;
}

void UpdatePads(){
	ReadControllers();
	for(uint8_t i=0;i<2;i++){
    b68c:	f3 94       	inc	r15
    b68e:	22 96       	adiw	r28, 0x02	; 2
    b690:	0e 5f       	subi	r16, 0xFE	; 254
    b692:	1f 4f       	sbci	r17, 0xFF	; 255
    b694:	f2 e0       	ldi	r31, 0x02	; 2
    b696:	ff 16       	cp	r15, r31
    b698:	09 f0       	breq	.+2      	; 0xb69c <UpdatePads+0x9a>
    b69a:	bf cf       	rjmp	.-130    	; 0xb61a <UpdatePads+0x18>
			}
			else
				padstate[i] = ReadJoypad(i);
		}
	}
}
    b69c:	cd b7       	in	r28, 0x3d	; 61
    b69e:	de b7       	in	r29, 0x3e	; 62
    b6a0:	e5 e0       	ldi	r30, 0x05	; 5
    b6a2:	0c 94 34 74 	jmp	0xe868	; 0xe868 <__epilogue_restores__+0x1a>

0000b6a6 <DoTitle>:
}
return false;
}


void DoTitle(){
    b6a6:	a0 e0       	ldi	r26, 0x00	; 0
    b6a8:	b0 e0       	ldi	r27, 0x00	; 0
    b6aa:	e9 e5       	ldi	r30, 0x59	; 89
    b6ac:	fb e5       	ldi	r31, 0x5B	; 91
    b6ae:	0c 94 14 74 	jmp	0xe828	; 0xe828 <__prologue_saves__+0x12>
		game_state = INITIALSTATE;
		cpustate = CPUFIRSTTICK;
		return;
#endif

	FadeOut(1,true);
    b6b2:	81 e0       	ldi	r24, 0x01	; 1
    b6b4:	61 e0       	ldi	r22, 0x01	; 1
    b6b6:	3e d8       	rcall	.-3972   	; 0xa734 <FadeOut>
	rtl_RamifyFontEx(10,menucharmap,charlist,compfont,0,0xFF,false);
    b6b8:	8a e0       	ldi	r24, 0x0A	; 10
    b6ba:	90 e0       	ldi	r25, 0x00	; 0
    b6bc:	6e e3       	ldi	r22, 0x3E	; 62
    b6be:	7b e8       	ldi	r23, 0x8B	; 139
    b6c0:	42 e1       	ldi	r20, 0x12	; 18
    b6c2:	5c e1       	ldi	r21, 0x1C	; 28
    b6c4:	20 e5       	ldi	r18, 0x50	; 80
    b6c6:	3a e1       	ldi	r19, 0x1A	; 26
    b6c8:	00 e0       	ldi	r16, 0x00	; 0
    b6ca:	ee 24       	eor	r14, r14
    b6cc:	ea 94       	dec	r14
    b6ce:	cc 24       	eor	r12, r12
    b6d0:	9d d8       	rcall	.-3782   	; 0xa80c <rtl_RamifyFontEx>
	rtl_RamifyFontEx(19,titlecharmap,charlist,compfont,0,0x37,true);
    b6d2:	83 e1       	ldi	r24, 0x13	; 19
    b6d4:	90 e0       	ldi	r25, 0x00	; 0
    b6d6:	67 e4       	ldi	r22, 0x47	; 71
    b6d8:	7b e8       	ldi	r23, 0x8B	; 139
    b6da:	42 e1       	ldi	r20, 0x12	; 18
    b6dc:	5c e1       	ldi	r21, 0x1C	; 28
    b6de:	20 e5       	ldi	r18, 0x50	; 80
    b6e0:	3a e1       	ldi	r19, 0x1A	; 26
    b6e2:	e7 e3       	ldi	r30, 0x37	; 55
    b6e4:	ee 2e       	mov	r14, r30
    b6e6:	cc 24       	eor	r12, r12
    b6e8:	c3 94       	inc	r12
    b6ea:	90 d8       	rcall	.-3808   	; 0xa80c <rtl_RamifyFontEx>
	FadeIn(4,false);
    b6ec:	84 e0       	ldi	r24, 0x04	; 4
    b6ee:	60 e0       	ldi	r22, 0x00	; 0
    b6f0:	09 d8       	rcall	.-4078   	; 0xa704 <FadeIn>
    b6f2:	24 ea       	ldi	r18, 0xA4	; 164
    b6f4:	3d e0       	ldi	r19, 0x0D	; 13
    b6f6:	ac e2       	ldi	r26, 0x2C	; 44
    b6f8:	b4 e0       	ldi	r27, 0x04	; 4

	uint16_t toff = 0;
	uint8_t t;
	for(uint16_t i=0;i<10*64;){//ramify banner tiles
		t = pgm_read_byte(&BannerTiles[toff++]);
    b6fa:	f9 01       	movw	r30, r18
    b6fc:	84 91       	lpm	r24, Z+
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[(t&0b01110000)>>4]);
    b6fe:	90 e0       	ldi	r25, 0x00	; 0
    b700:	fc 01       	movw	r30, r24
    b702:	e0 77       	andi	r30, 0x70	; 112
    b704:	f0 70       	andi	r31, 0x00	; 0
    b706:	44 e0       	ldi	r20, 0x04	; 4
    b708:	f5 95       	asr	r31
    b70a:	e7 95       	ror	r30
    b70c:	4a 95       	dec	r20
    b70e:	e1 f7       	brne	.-8      	; 0xb708 <DoTitle+0x62>
    b710:	ec 51       	subi	r30, 0x1C	; 28
    b712:	f1 4f       	sbci	r31, 0xF1	; 241
    b714:	e4 91       	lpm	r30, Z+
    b716:	ec 93       	st	X, r30
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[t&0b00001111]);
    b718:	8f 70       	andi	r24, 0x0F	; 15
    b71a:	90 70       	andi	r25, 0x00	; 0
    b71c:	8c 51       	subi	r24, 0x1C	; 28
    b71e:	91 4f       	sbci	r25, 0xF1	; 241
    b720:	fc 01       	movw	r30, r24
    b722:	84 91       	lpm	r24, Z+
    b724:	11 96       	adiw	r26, 0x01	; 1
    b726:	8c 93       	st	X, r24
    b728:	11 97       	sbiw	r26, 0x01	; 1
    b72a:	2f 5f       	subi	r18, 0xFF	; 255
    b72c:	3f 4f       	sbci	r19, 0xFF	; 255
    b72e:	12 96       	adiw	r26, 0x02	; 2
	rtl_RamifyFontEx(19,titlecharmap,charlist,compfont,0,0x37,true);
	FadeIn(4,false);

	uint16_t toff = 0;
	uint8_t t;
	for(uint16_t i=0;i<10*64;){//ramify banner tiles
    b730:	fe e0       	ldi	r31, 0x0E	; 14
    b732:	24 3e       	cpi	r18, 0xE4	; 228
    b734:	3f 07       	cpc	r19, r31
    b736:	09 f7       	brne	.-62     	; 0xb6fa <DoTitle+0x54>
		t = pgm_read_byte(&BannerTiles[toff++]);
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[(t&0b01110000)>>4]);
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[t&0b00001111]);
	}		
	musicspeed = 0;
    b738:	10 92 7b 0f 	sts	0x0F7B, r1
	SetSongTempo(musicspeed);
    b73c:	80 e0       	ldi	r24, 0x00	; 0
    b73e:	90 e0       	ldi	r25, 0x00	; 0
    b740:	0e 94 81 4b 	call	0x9702	; 0x9702 <SetSongTempo>
	idleticks = 0;
 

	for(int i=10*64;i<20*64;i++)
		if(ram_tiles[i])
			ram_tiles[i] = 255;
    b744:	bb 24       	eor	r11, r11
    b746:	ba 94       	dec	r11

void DoPlay();
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
    b748:	ee 24       	eor	r14, r14
    b74a:	e3 94       	inc	r14
		if(UpDown(0)){
		//	TriggerPCM(SWAPWAVE,255,255);
			if(cursorpos)
				cursorpos--;
			else
				cursorpos = 2;
    b74c:	82 e0       	ldi	r24, 0x02	; 2
    b74e:	c8 2e       	mov	r12, r24



bool CheckIdleTicks(uint16_t t){//if idle too long, go into demo mode
if(t > TITLEIDLETIME){
	game_state = GS_DEMO|GS_PLAYING|GS_FIRSTTICK;
    b750:	13 e2       	ldi	r17, 0x23	; 35
    b752:	f1 2e       	mov	r15, r17
	game_mode = 0;
	cpustate = CPUFIRSTTICK;
    b754:	b0 e1       	ldi	r27, 0x10	; 16
    b756:	db 2e       	mov	r13, r27
	SetSongTempo(musicspeed);
	uint8_t flash,o;
	uint16_t idleticks;
titletop:
	flash = 30;
	cursorpos = 0;
    b758:	10 92 85 0f 	sts	0x0F85, r1
    b75c:	ec ea       	ldi	r30, 0xAC	; 172
    b75e:	f6 e0       	ldi	r31, 0x06	; 6
	o = 0;
	idleticks = 0;
 

	for(int i=10*64;i<20*64;i++)
		if(ram_tiles[i])
    b760:	80 81       	ld	r24, Z
    b762:	81 11       	cpse	r24, r1
			ram_tiles[i] = 255;
    b764:	b0 82       	st	Z, r11
    b766:	31 96       	adiw	r30, 0x01	; 1
	cursorpos = 0;
	o = 0;
	idleticks = 0;
 

	for(int i=10*64;i<20*64;i++)
    b768:	89 e0       	ldi	r24, 0x09	; 9
    b76a:	ec 32       	cpi	r30, 0x2C	; 44
    b76c:	f8 07       	cpc	r31, r24
    b76e:	c1 f7       	brne	.-16     	; 0xb760 <DoTitle+0xba>
		if(ram_tiles[i])
			ram_tiles[i] = 255;


	UpdatePads();
    b770:	48 df       	rcall	.-368    	; 0xb602 <UpdatePads>
	DrawTitleBGFont();//do here to avoid possible previous start down artifacts
    b772:	34 db       	rcall	.-2456   	; 0xaddc <DrawTitleBGFont>
    b774:	1e e1       	ldi	r17, 0x1E	; 30
    b776:	c0 e0       	ldi	r28, 0x00	; 0
    b778:	d0 e0       	ldi	r29, 0x00	; 0
    b77a:	26 c0       	rjmp	.+76     	; 0xb7c8 <DoTitle+0x122>


	while(!StartDown(0)){
		UpdatePads();
    b77c:	42 df       	rcall	.-380    	; 0xb602 <UpdatePads>
		DrawTitleBGFont();
    b77e:	2e db       	rcall	.-2468   	; 0xaddc <DrawTitleBGFont>

		if(flash < 15)
    b780:	1f 30       	cpi	r17, 0x0F	; 15
    b782:	28 f4       	brcc	.+10     	; 0xb78e <DoTitle+0xe8>
			rtl_Print(9,15,PSTR("PRESS START"));
    b784:	89 e0       	ldi	r24, 0x09	; 9
    b786:	6f e0       	ldi	r22, 0x0F	; 15
    b788:	4c ed       	ldi	r20, 0xDC	; 220
    b78a:	5c e8       	ldi	r21, 0x8C	; 140
    b78c:	f4 d8       	rcall	.-3608   	; 0xa976 <rtl_Print>

		if(!--flash)
    b78e:	11 50       	subi	r17, 0x01	; 1
    b790:	09 f4       	brne	.+2      	; 0xb794 <DoTitle+0xee>
    b792:	1e e1       	ldi	r17, 0x1E	; 30
			flash = 30;
//shuffle_prng();
		if(padstate[0])
    b794:	80 91 82 0e 	lds	r24, 0x0E82
    b798:	90 91 83 0e 	lds	r25, 0x0E83
    b79c:	89 2b       	or	r24, r25
    b79e:	69 f4       	brne	.+26     	; 0xb7ba <DoTitle+0x114>
}



bool CheckIdleTicks(uint16_t t){//if idle too long, go into demo mode
if(t > TITLEIDLETIME){
    b7a0:	e2 e0       	ldi	r30, 0x02	; 2
    b7a2:	c1 3d       	cpi	r28, 0xD1	; 209
    b7a4:	de 07       	cpc	r29, r30
    b7a6:	58 f0       	brcs	.+22     	; 0xb7be <DoTitle+0x118>
	game_state = GS_DEMO|GS_PLAYING|GS_FIRSTTICK;
    b7a8:	83 e2       	ldi	r24, 0x23	; 35
    b7aa:	80 93 a6 0e 	sts	0x0EA6, r24
	game_mode = 0;
    b7ae:	10 92 a4 0e 	sts	0x0EA4, r1
	cpustate = CPUFIRSTTICK;
    b7b2:	80 e1       	ldi	r24, 0x10	; 16
    b7b4:	80 93 a7 0e 	sts	0x0EA7, r24
    b7b8:	f5 c0       	rjmp	.+490    	; 0xb9a4 <DoTitle+0x2fe>
    b7ba:	c0 e0       	ldi	r28, 0x00	; 0
    b7bc:	d0 e0       	ldi	r29, 0x00	; 0
		if(!--flash)
			flash = 30;
//shuffle_prng();
		if(padstate[0])
			idleticks = 0;
		if(CheckIdleTicks(idleticks++))
    b7be:	21 96       	adiw	r28, 0x01	; 1
			return;
		WaitVsync(2);//keep ticks even
    b7c0:	82 e0       	ldi	r24, 0x02	; 2
    b7c2:	90 e0       	ldi	r25, 0x00	; 0
    b7c4:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
    b7c8:	80 91 82 0e 	lds	r24, 0x0E82
    b7cc:	83 ff       	sbrs	r24, 3
    b7ce:	d6 cf       	rjmp	.-84     	; 0xb77c <DoTitle+0xd6>
    b7d0:	80 91 7e 0e 	lds	r24, 0x0E7E
    b7d4:	90 91 7f 0e 	lds	r25, 0x0E7F
    b7d8:	a3 e0       	ldi	r26, 0x03	; 3
    b7da:	96 95       	lsr	r25
    b7dc:	87 95       	ror	r24
    b7de:	aa 95       	dec	r26
    b7e0:	e1 f7       	brne	.-8      	; 0xb7da <DoTitle+0x134>
    b7e2:	81 70       	andi	r24, 0x01	; 1

	UpdatePads();
	DrawTitleBGFont();//do here to avoid possible previous start down artifacts


	while(!StartDown(0)){
    b7e4:	8e 15       	cp	r24, r14
    b7e6:	51 f2       	breq	.-108    	; 0xb77c <DoTitle+0xd6>
    b7e8:	10 e0       	ldi	r17, 0x00	; 0
			return;
		WaitVsync(2);//keep ticks even
	}

	for(uint8_t i=0;i<10;i++){
		UpdatePads();
    b7ea:	0b df       	rcall	.-490    	; 0xb602 <UpdatePads>
		ColumnsDrawMenu(9,15,11,i,10);
    b7ec:	89 e0       	ldi	r24, 0x09	; 9
    b7ee:	6f e0       	ldi	r22, 0x0F	; 15
    b7f0:	4b e0       	ldi	r20, 0x0B	; 11
    b7f2:	21 2f       	mov	r18, r17
    b7f4:	0a e0       	ldi	r16, 0x0A	; 10
    b7f6:	d3 d9       	rcall	.-3162   	; 0xab9e <ColumnsDrawMenu>
		rtl_Print(12,15,PSTR("SELECT"));
    b7f8:	8c e0       	ldi	r24, 0x0C	; 12
    b7fa:	6f e0       	ldi	r22, 0x0F	; 15
    b7fc:	45 ed       	ldi	r20, 0xD5	; 213
    b7fe:	5c e8       	ldi	r21, 0x8C	; 140
    b800:	ba d8       	rcall	.-3724   	; 0xa976 <rtl_Print>
		if(i > 3){
    b802:	14 30       	cpi	r17, 0x04	; 4
    b804:	c0 f0       	brcs	.+48     	; 0xb836 <DoTitle+0x190>
			rtl_Print(12,18,PSTR("SINGLE"));
    b806:	8c e0       	ldi	r24, 0x0C	; 12
    b808:	62 e1       	ldi	r22, 0x12	; 18
    b80a:	4e ec       	ldi	r20, 0xCE	; 206
    b80c:	5c e8       	ldi	r21, 0x8C	; 140
    b80e:	b3 d8       	rcall	.-3738   	; 0xa976 <rtl_Print>
		//	rtl_Print(10,18,PSTR("<"));
		}
		if(i > 5)
    b810:	16 30       	cpi	r17, 0x06	; 6
    b812:	88 f0       	brcs	.+34     	; 0xb836 <DoTitle+0x190>
			rtl_Print(12,20,PSTR("VERSUS"));
    b814:	8c e0       	ldi	r24, 0x0C	; 12
    b816:	64 e1       	ldi	r22, 0x14	; 20
    b818:	47 ec       	ldi	r20, 0xC7	; 199
    b81a:	5c e8       	ldi	r21, 0x8C	; 140
    b81c:	ac d8       	rcall	.-3752   	; 0xa976 <rtl_Print>
		if(i > 7){
    b81e:	18 30       	cpi	r17, 0x08	; 8
    b820:	50 f0       	brcs	.+20     	; 0xb836 <DoTitle+0x190>
			rtl_Print(12,22,PSTR("LVL"));
    b822:	8c e0       	ldi	r24, 0x0C	; 12
    b824:	66 e1       	ldi	r22, 0x16	; 22
    b826:	43 ec       	ldi	r20, 0xC3	; 195
    b828:	5c e8       	ldi	r21, 0x8C	; 140
    b82a:	a5 d8       	rcall	.-3766   	; 0xa976 <rtl_Print>

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    b82c:	80 91 77 0e 	lds	r24, 0x0E77
    b830:	83 5b       	subi	r24, 0xB3	; 179
    b832:	80 93 c5 03 	sts	0x03C5, r24
			ColumnsPrint1num(17,22,cpuskill);
		}
		//if(i > 9)
			//rtl_Print(12,24,PSTR("UZENET"));
		WaitVsync(4);
    b836:	84 e0       	ldi	r24, 0x04	; 4
    b838:	90 e0       	ldi	r25, 0x00	; 0
    b83a:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
		if(CheckIdleTicks(idleticks++))
			return;
		WaitVsync(2);//keep ticks even
	}

	for(uint8_t i=0;i<10;i++){
    b83e:	1f 5f       	subi	r17, 0xFF	; 255
    b840:	1a 30       	cpi	r17, 0x0A	; 10
    b842:	99 f6       	brne	.-90     	; 0xb7ea <DoTitle+0x144>
    b844:	82 c0       	rjmp	.+260    	; 0xb94a <DoTitle+0x2a4>
			//rtl_Print(12,24,PSTR("UZENET"));
		WaitVsync(4);
	}

	while(!StartDown(0) || cursorpos > 1){//title menu loop
		UpdatePads();
    b846:	dd de       	rcall	.-582    	; 0xb602 <UpdatePads>
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
    b848:	90 91 82 0e 	lds	r25, 0x0E82
    b84c:	94 ff       	sbrs	r25, 4
    b84e:	0e c0       	rjmp	.+28     	; 0xb86c <DoTitle+0x1c6>
    b850:	80 91 7e 0e 	lds	r24, 0x0E7E
    b854:	84 fd       	sbrc	r24, 4
    b856:	0a c0       	rjmp	.+20     	; 0xb86c <DoTitle+0x1c6>

		if(UpDown(0)){
		//	TriggerPCM(SWAPWAVE,255,255);
			if(cursorpos)
    b858:	80 91 85 0f 	lds	r24, 0x0F85
    b85c:	88 23       	and	r24, r24
    b85e:	21 f0       	breq	.+8      	; 0xb868 <DoTitle+0x1c2>
				cursorpos--;
    b860:	81 50       	subi	r24, 0x01	; 1
    b862:	80 93 85 0f 	sts	0x0F85, r24
    b866:	02 c0       	rjmp	.+4      	; 0xb86c <DoTitle+0x1c6>
			else
				cursorpos = 2;
    b868:	c0 92 85 0f 	sts	0x0F85, r12
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
    b86c:	95 ff       	sbrs	r25, 5
    b86e:	0d c0       	rjmp	.+26     	; 0xb88a <DoTitle+0x1e4>
    b870:	80 91 7e 0e 	lds	r24, 0x0E7E
    b874:	85 fd       	sbrc	r24, 5
    b876:	09 c0       	rjmp	.+18     	; 0xb88a <DoTitle+0x1e4>
		}
		if(DownDown(0)){
		//	TriggerPCM(SWAPWAVE,255,255);
			if(++cursorpos > 2)
    b878:	80 91 85 0f 	lds	r24, 0x0F85
    b87c:	8f 5f       	subi	r24, 0xFF	; 255
    b87e:	80 93 85 0f 	sts	0x0F85, r24
    b882:	83 30       	cpi	r24, 0x03	; 3
    b884:	10 f0       	brcs	.+4      	; 0xb88a <DoTitle+0x1e4>
				cursorpos = 0;
    b886:	10 92 85 0f 	sts	0x0F85, r1
		}
		if(cursorpos == 2){
    b88a:	80 91 85 0f 	lds	r24, 0x0F85
    b88e:	82 30       	cpi	r24, 0x02	; 2
    b890:	d1 f4       	brne	.+52     	; 0xb8c6 <DoTitle+0x220>
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
    b892:	96 ff       	sbrs	r25, 6
    b894:	0b c0       	rjmp	.+22     	; 0xb8ac <DoTitle+0x206>
    b896:	80 91 7e 0e 	lds	r24, 0x0E7E
    b89a:	86 fd       	sbrc	r24, 6
    b89c:	07 c0       	rjmp	.+14     	; 0xb8ac <DoTitle+0x206>
			if(LeftDown(0)  && cpuskill > 1)
    b89e:	80 91 77 0e 	lds	r24, 0x0E77
    b8a2:	82 30       	cpi	r24, 0x02	; 2
    b8a4:	18 f0       	brcs	.+6      	; 0xb8ac <DoTitle+0x206>
				cpuskill--;
    b8a6:	81 50       	subi	r24, 0x01	; 1
    b8a8:	80 93 77 0e 	sts	0x0E77, r24
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
    b8ac:	97 ff       	sbrs	r25, 7
    b8ae:	0b c0       	rjmp	.+22     	; 0xb8c6 <DoTitle+0x220>
    b8b0:	80 91 7e 0e 	lds	r24, 0x0E7E
    b8b4:	87 fd       	sbrc	r24, 7
    b8b6:	07 c0       	rjmp	.+14     	; 0xb8c6 <DoTitle+0x220>
			if(RightDown(0) && cpuskill < 9)
    b8b8:	80 91 77 0e 	lds	r24, 0x0E77
    b8bc:	89 30       	cpi	r24, 0x09	; 9
    b8be:	18 f4       	brcc	.+6      	; 0xb8c6 <DoTitle+0x220>
				cpuskill++;
    b8c0:	8f 5f       	subi	r24, 0xFF	; 255
    b8c2:	80 93 77 0e 	sts	0x0E77, r24
		}
		ColumnsDrawMenu(9,15,11,9,10);
    b8c6:	89 e0       	ldi	r24, 0x09	; 9
    b8c8:	6f e0       	ldi	r22, 0x0F	; 15
    b8ca:	4b e0       	ldi	r20, 0x0B	; 11
    b8cc:	29 e0       	ldi	r18, 0x09	; 9
    b8ce:	0a e0       	ldi	r16, 0x0A	; 10
    b8d0:	66 d9       	rcall	.-3380   	; 0xab9e <ColumnsDrawMenu>
		rtl_Print(12,15,PSTR("SELECT"));
    b8d2:	8c e0       	ldi	r24, 0x0C	; 12
    b8d4:	6f e0       	ldi	r22, 0x0F	; 15
    b8d6:	4c eb       	ldi	r20, 0xBC	; 188
    b8d8:	5c e8       	ldi	r21, 0x8C	; 140
    b8da:	4d d8       	rcall	.-3942   	; 0xa976 <rtl_Print>
		rtl_Print(12,18,PSTR("SINGLE"));
    b8dc:	8c e0       	ldi	r24, 0x0C	; 12
    b8de:	62 e1       	ldi	r22, 0x12	; 18
    b8e0:	45 eb       	ldi	r20, 0xB5	; 181
    b8e2:	5c e8       	ldi	r21, 0x8C	; 140
    b8e4:	48 d8       	rcall	.-3952   	; 0xa976 <rtl_Print>
		rtl_Print(12,20,PSTR("VERSUS"));
    b8e6:	8c e0       	ldi	r24, 0x0C	; 12
    b8e8:	64 e1       	ldi	r22, 0x14	; 20
    b8ea:	4e ea       	ldi	r20, 0xAE	; 174
    b8ec:	5c e8       	ldi	r21, 0x8C	; 140
    b8ee:	43 d8       	rcall	.-3962   	; 0xa976 <rtl_Print>
		rtl_Print(12,22,PSTR("LVL"));ColumnsPrint1num(17,22,cpuskill);
    b8f0:	8c e0       	ldi	r24, 0x0C	; 12
    b8f2:	66 e1       	ldi	r22, 0x16	; 22
    b8f4:	4a ea       	ldi	r20, 0xAA	; 170
    b8f6:	5c e8       	ldi	r21, 0x8C	; 140
    b8f8:	3e d8       	rcall	.-3972   	; 0xa976 <rtl_Print>

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    b8fa:	80 91 77 0e 	lds	r24, 0x0E77
    b8fe:	83 5b       	subi	r24, 0xB3	; 179
    b900:	80 93 c5 03 	sts	0x03C5, r24
		//rtl_Print(12,24,PSTR("UZENET"));

		rtl_Print(10,18+(2*cursorpos),PSTR(">"));
    b904:	60 91 85 0f 	lds	r22, 0x0F85
    b908:	70 e0       	ldi	r23, 0x00	; 0
    b90a:	67 5f       	subi	r22, 0xF7	; 247
    b90c:	7f 4f       	sbci	r23, 0xFF	; 255
    b90e:	66 0f       	add	r22, r22
    b910:	77 1f       	adc	r23, r23
    b912:	8a e0       	ldi	r24, 0x0A	; 10
    b914:	48 ea       	ldi	r20, 0xA8	; 168
    b916:	5c e8       	ldi	r21, 0x8C	; 140
    b918:	2e d8       	rcall	.-4004   	; 0xa976 <rtl_Print>

//shuffle_prng();
		if(padstate[0])
    b91a:	80 91 82 0e 	lds	r24, 0x0E82
    b91e:	90 91 83 0e 	lds	r25, 0x0E83
    b922:	89 2b       	or	r24, r25
    b924:	59 f4       	brne	.+22     	; 0xb93c <DoTitle+0x296>
}



bool CheckIdleTicks(uint16_t t){//if idle too long, go into demo mode
if(t > TITLEIDLETIME){
    b926:	f2 e0       	ldi	r31, 0x02	; 2
    b928:	c1 3d       	cpi	r28, 0xD1	; 209
    b92a:	df 07       	cpc	r29, r31
    b92c:	48 f0       	brcs	.+18     	; 0xb940 <DoTitle+0x29a>
	game_state = GS_DEMO|GS_PLAYING|GS_FIRSTTICK;
    b92e:	f0 92 a6 0e 	sts	0x0EA6, r15
	game_mode = 0;
    b932:	10 92 a4 0e 	sts	0x0EA4, r1
	cpustate = CPUFIRSTTICK;
    b936:	d0 92 a7 0e 	sts	0x0EA7, r13
    b93a:	0e cf       	rjmp	.-484    	; 0xb758 <DoTitle+0xb2>
    b93c:	c0 e0       	ldi	r28, 0x00	; 0
    b93e:	d0 e0       	ldi	r29, 0x00	; 0
		rtl_Print(10,18+(2*cursorpos),PSTR(">"));

//shuffle_prng();
		if(padstate[0])
			idleticks = 0;
		if(CheckIdleTicks(idleticks++))
    b940:	21 96       	adiw	r28, 0x01	; 1
			goto titletop;
		WaitVsync(2);//keep ticks even
    b942:	82 e0       	ldi	r24, 0x02	; 2
    b944:	90 e0       	ldi	r25, 0x00	; 0
    b946:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>

void DoPlay();
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
    b94a:	80 91 82 0e 	lds	r24, 0x0E82
    b94e:	83 ff       	sbrs	r24, 3
    b950:	7a cf       	rjmp	.-268    	; 0xb846 <DoTitle+0x1a0>
    b952:	80 91 7e 0e 	lds	r24, 0x0E7E
    b956:	90 91 7f 0e 	lds	r25, 0x0E7F
    b95a:	e3 e0       	ldi	r30, 0x03	; 3
    b95c:	96 95       	lsr	r25
    b95e:	87 95       	ror	r24
    b960:	ea 95       	dec	r30
    b962:	e1 f7       	brne	.-8      	; 0xb95c <DoTitle+0x2b6>
    b964:	81 70       	andi	r24, 0x01	; 1
		//if(i > 9)
			//rtl_Print(12,24,PSTR("UZENET"));
		WaitVsync(4);
	}

	while(!StartDown(0) || cursorpos > 1){//title menu loop
    b966:	8e 15       	cp	r24, r14
    b968:	09 f4       	brne	.+2      	; 0xb96c <DoTitle+0x2c6>
    b96a:	6d cf       	rjmp	.-294    	; 0xb846 <DoTitle+0x1a0>
    b96c:	80 91 85 0f 	lds	r24, 0x0F85
    b970:	82 30       	cpi	r24, 0x02	; 2
    b972:	08 f0       	brcs	.+2      	; 0xb976 <DoTitle+0x2d0>
    b974:	68 cf       	rjmp	.-304    	; 0xb846 <DoTitle+0x1a0>
			goto titletop;
		WaitVsync(2);//keep ticks even
	}
	

	if(cursorpos == 0){//versus cpu
    b976:	88 23       	and	r24, r24
    b978:	49 f4       	brne	.+18     	; 0xb98c <DoTitle+0x2e6>
		game_mode = 0;
    b97a:	10 92 a4 0e 	sts	0x0EA4, r1
		game_state = INITIALSTATE;
    b97e:	8f ef       	ldi	r24, 0xFF	; 255
    b980:	80 93 a6 0e 	sts	0x0EA6, r24
		cpustate = CPUFIRSTTICK;
    b984:	80 e1       	ldi	r24, 0x10	; 16
    b986:	80 93 a7 0e 	sts	0x0EA7, r24
    b98a:	08 c0       	rjmp	.+16     	; 0xb99c <DoTitle+0x2f6>
	}
	else if(cursorpos == 1){
		game_mode = 1;//versus
    b98c:	81 e0       	ldi	r24, 0x01	; 1
    b98e:	80 93 a4 0e 	sts	0x0EA4, r24
		game_state = INITIALSTATE;
    b992:	8f ef       	ldi	r24, 0xFF	; 255
    b994:	80 93 a6 0e 	sts	0x0EA6, r24
		cpustate = 0;
    b998:	10 92 a7 0e 	sts	0x0EA7, r1
		FadeOut(1,true);
		FadeIn(1,false);

		goto titletop;
	}*/
	FadeOut(2,true);
    b99c:	82 e0       	ldi	r24, 0x02	; 2
    b99e:	61 e0       	ldi	r22, 0x01	; 1
    b9a0:	0e 94 9a 53 	call	0xa734	; 0xa734 <FadeOut>
}
    b9a4:	cd b7       	in	r28, 0x3d	; 61
    b9a6:	de b7       	in	r29, 0x3e	; 62
    b9a8:	e9 e0       	ldi	r30, 0x09	; 9
    b9aa:	0c 94 30 74 	jmp	0xe860	; 0xe860 <__epilogue_restores__+0x12>

0000b9ae <SetLosing>:
			return;
		}

}

void SetLosing(uint8_t p){
    b9ae:	e8 2f       	mov	r30, r24
	//	clear_well(p);
	if(winner == 255)//means other player didn't lose
    b9b0:	80 91 82 0f 	lds	r24, 0x0F82
    b9b4:	8f 3f       	cpi	r24, 0xFF	; 255
    b9b6:	41 f4       	brne	.+16     	; 0xb9c8 <SetLosing+0x1a>
		winner = !p;
    b9b8:	10 92 82 0f 	sts	0x0F82, r1
    b9bc:	ee 23       	and	r30, r30
    b9be:	51 f4       	brne	.+20     	; 0xb9d4 <SetLosing+0x26>
    b9c0:	81 e0       	ldi	r24, 0x01	; 1
    b9c2:	80 93 82 0f 	sts	0x0F82, r24
    b9c6:	06 c0       	rjmp	.+12     	; 0xb9d4 <SetLosing+0x26>
	else if(winner == p){//otherwise other player lose too so draw
    b9c8:	8e 17       	cp	r24, r30
    b9ca:	21 f4       	brne	.+8      	; 0xb9d4 <SetLosing+0x26>
		winner = 255;
    b9cc:	8f ef       	ldi	r24, 0xFF	; 255
    b9ce:	80 93 82 0f 	sts	0x0F82, r24
    b9d2:	08 95       	ret
		return;
	}		
	state[p] = LOSING;
    b9d4:	f0 e0       	ldi	r31, 0x00	; 0
    b9d6:	df 01       	movw	r26, r30
    b9d8:	a6 55       	subi	r26, 0x56	; 86
    b9da:	b1 4f       	sbci	r27, 0xF1	; 241
    b9dc:	84 e0       	ldi	r24, 0x04	; 4
    b9de:	8c 93       	st	X, r24
	statetimer[p] = LOSINGWAITTICKS;
    b9e0:	e8 57       	subi	r30, 0x78	; 120
    b9e2:	f0 4f       	sbci	r31, 0xF0	; 240
    b9e4:	8e e1       	ldi	r24, 0x1E	; 30
    b9e6:	80 83       	st	Z, r24
	WaitVsync(2);
    b9e8:	82 e0       	ldi	r24, 0x02	; 2
    b9ea:	90 e0       	ldi	r25, 0x00	; 0
    b9ec:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
	TriggerFx(40,255,false);//trigger losing patch duet
    b9f0:	88 e2       	ldi	r24, 0x28	; 40
    b9f2:	6f ef       	ldi	r22, 0xFF	; 255
    b9f4:	40 e0       	ldi	r20, 0x00	; 0
    b9f6:	0e 94 a1 4f 	call	0x9f42	; 0x9f42 <TriggerFx>
	TriggerFx(41,255,false);
    b9fa:	89 e2       	ldi	r24, 0x29	; 41
    b9fc:	6f ef       	ldi	r22, 0xFF	; 255
    b9fe:	40 e0       	ldi	r20, 0x00	; 0
    ba00:	0c 94 a1 4f 	jmp	0x9f42	; 0x9f42 <TriggerFx>

0000ba04 <TriggerPCM>:
}




void TriggerPCM(uint8_t i,uint8_t speed, uint8_t vol){//TODO SCORING HIGHER PRIORITY THAN DROP
    ba04:	78 2f       	mov	r23, r24
    ba06:	36 2f       	mov	r19, r22
    ba08:	24 2f       	mov	r18, r20
	uint8_t t = pgm_read_byte(&PCMPRIORITY[i-FIRSTPCMSOUND]);
    ba0a:	48 2f       	mov	r20, r24
    ba0c:	50 e0       	ldi	r21, 0x00	; 0
    ba0e:	4a 52       	subi	r20, 0x2A	; 42
    ba10:	50 40       	sbci	r21, 0x00	; 0
    ba12:	fa 01       	movw	r30, r20
    ba14:	e0 54       	subi	r30, 0x40	; 64
    ba16:	f6 49       	sbci	r31, 0x96	; 150
    ba18:	94 91       	lpm	r25, Z+
	if(pcm_priority > t && pcm_timeleft)//a higher priority sound is playing
    ba1a:	80 91 a3 0e 	lds	r24, 0x0EA3
    ba1e:	98 17       	cp	r25, r24
    ba20:	20 f4       	brcc	.+8      	; 0xba2a <TriggerPCM+0x26>
    ba22:	80 91 8a 0f 	lds	r24, 0x0F8A
    ba26:	88 23       	and	r24, r24
    ba28:	99 f4       	brne	.+38     	; 0xba50 <TriggerPCM+0x4c>
		return;

	pcm_priority = t;
    ba2a:	90 93 a3 0e 	sts	0x0EA3, r25
	pcm_timeleft = pgm_read_byte(&PCMTIMES[i-FIRSTPCMSOUND]);
    ba2e:	fa 01       	movw	r30, r20
    ba30:	eb 53       	subi	r30, 0x3B	; 59
    ba32:	f6 49       	sbci	r31, 0x96	; 150
    ba34:	e4 91       	lpm	r30, Z+
    ba36:	e0 93 8a 0f 	sts	0x0F8A, r30

	if(speed == 255)
    ba3a:	3f 3f       	cpi	r19, 0xFF	; 255
    ba3c:	21 f4       	brne	.+8      	; 0xba46 <TriggerPCM+0x42>
		speed = pgm_read_byte(&PCMSPEEDS[i-FIRSTPCMSOUND]);
    ba3e:	44 55       	subi	r20, 0x54	; 84
    ba40:	56 49       	sbci	r21, 0x96	; 150
    ba42:	fa 01       	movw	r30, r20
    ba44:	34 91       	lpm	r19, Z+
	TriggerNote(4,i,speed,vol);
    ba46:	84 e0       	ldi	r24, 0x04	; 4
    ba48:	67 2f       	mov	r22, r23
    ba4a:	43 2f       	mov	r20, r19
    ba4c:	0c 94 ff 4c 	jmp	0x99fe	; 0x99fe <TriggerNote>
    ba50:	08 95       	ret

0000ba52 <CrashBarDown>:
	
	wellfullness[target] += 6*steps;
	return steps;
}

uint8_t CrashBarDown(uint8_t steps, uint8_t target, uint8_t silent){
    ba52:	1f 93       	push	r17
    ba54:	cf 93       	push	r28
    ba56:	df 93       	push	r29
//TODO NOT WORKING RIGHT
	if(crashheight[target] < steps)
    ba58:	c6 2f       	mov	r28, r22
    ba5a:	d0 e0       	ldi	r29, 0x00	; 0
    ba5c:	fe 01       	movw	r30, r28
    ba5e:	ec 54       	subi	r30, 0x4C	; 76
    ba60:	f0 4f       	sbci	r31, 0xF0	; 240
    ba62:	10 81       	ld	r17, Z
    ba64:	81 17       	cp	r24, r17
    ba66:	08 f4       	brcc	.+2      	; 0xba6a <CrashBarDown+0x18>
    ba68:	18 2f       	mov	r17, r24
		steps = crashheight[target];
		
	if(!steps)
    ba6a:	11 23       	and	r17, r17
    ba6c:	09 f4       	brne	.+2      	; 0xba70 <CrashBarDown+0x1e>
    ba6e:	4b c0       	rjmp	.+150    	; 0xbb06 <CrashBarDown+0xb4>
		return 0;

	if(!silent)
    ba70:	44 23       	and	r20, r20
    ba72:	21 f4       	brne	.+8      	; 0xba7c <CrashBarDown+0x2a>
		TriggerPCM(CRASHWAVE,23,255);
    ba74:	8e e2       	ldi	r24, 0x2E	; 46
    ba76:	67 e1       	ldi	r22, 0x17	; 23
    ba78:	4f ef       	ldi	r20, 0xFF	; 255
    ba7a:	c4 df       	rcall	.-120    	; 0xba04 <TriggerPCM>
		
	crashheight[target] -= steps;
    ba7c:	fe 01       	movw	r30, r28
    ba7e:	ec 54       	subi	r30, 0x4C	; 76
    ba80:	f0 4f       	sbci	r31, 0xF0	; 240
    ba82:	80 81       	ld	r24, Z
    ba84:	81 1b       	sub	r24, r17
    ba86:	80 83       	st	Z, r24

	uint8_t t;

	for(uint8_t y=15-steps;y>2;y--)
    ba88:	2f e0       	ldi	r18, 0x0F	; 15
    ba8a:	21 1b       	sub	r18, r17
void reset_prng(){	for(uint8_t i=0;i<MAX_PLAYERS;i++)lfsr[i]=0xACE1u;}
void shuffle_prng(){for(uint8_t i=0;i<MAX_PLAYERS;i++){for(uint8_t j=0;j<4;j++){prng(i);}}}



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
    ba8c:	80 e6       	ldi	r24, 0x60	; 96
    ba8e:	90 e0       	ldi	r25, 0x00	; 0
    ba90:	c8 9f       	mul	r28, r24
    ba92:	a0 01       	movw	r20, r0
    ba94:	c9 9f       	mul	r28, r25
    ba96:	50 0d       	add	r21, r0
    ba98:	d8 9f       	mul	r29, r24
    ba9a:	50 0d       	add	r21, r0
    ba9c:	11 24       	eor	r1, r1
    ba9e:	3f e0       	ldi	r19, 0x0F	; 15
    baa0:	66 e0       	ldi	r22, 0x06	; 6
    baa2:	08 c0       	rjmp	.+16     	; 0xbab4 <CrashBarDown+0x62>
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    baa4:	80 81       	ld	r24, Z
    baa6:	8d 93       	st	X+, r24
	for(uint8_t x=0;x<6;x++){
    baa8:	11 92       	st	Z+, r1
    baaa:	9f 5f       	subi	r25, 0xFF	; 255
    baac:	96 30       	cpi	r25, 0x06	; 6
    baae:	d1 f7       	brne	.-12     	; 0xbaa4 <CrashBarDown+0x52>
		
	crashheight[target] -= steps;

	uint8_t t;

	for(uint8_t y=15-steps;y>2;y--)
    bab0:	21 50       	subi	r18, 0x01	; 1
    bab2:	31 50       	subi	r19, 0x01	; 1
    bab4:	23 30       	cpi	r18, 0x03	; 3
    bab6:	80 f0       	brcs	.+32     	; 0xbad8 <CrashBarDown+0x86>
    bab8:	26 9f       	mul	r18, r22
    baba:	f0 01       	movw	r30, r0
    babc:	11 24       	eor	r1, r1
    babe:	e4 0f       	add	r30, r20
    bac0:	f5 1f       	adc	r31, r21
    bac2:	e3 55       	subi	r30, 0x53	; 83
    bac4:	f1 4f       	sbci	r31, 0xF1	; 241
    bac6:	36 9f       	mul	r19, r22
    bac8:	d0 01       	movw	r26, r0
    baca:	11 24       	eor	r1, r1
    bacc:	a4 0f       	add	r26, r20
    bace:	b5 1f       	adc	r27, r21
    bad0:	a3 55       	subi	r26, 0x53	; 83
    bad2:	b1 4f       	sbci	r27, 0xF1	; 241
    bad4:	90 e0       	ldi	r25, 0x00	; 0
    bad6:	e6 cf       	rjmp	.-52     	; 0xbaa4 <CrashBarDown+0x52>
		t = get_well(x,y,target);
		set_well(x,y+steps,target,t);
		set_well(x,y,target,0);	
	}

	wellfullness[target] -= 6*steps;
    bad8:	fe 01       	movw	r30, r28
    bada:	ee 0f       	add	r30, r30
    badc:	ff 1f       	adc	r31, r31
    bade:	eb 56       	subi	r30, 0x6B	; 107
    bae0:	f0 4f       	sbci	r31, 0xF0	; 240
    bae2:	21 2f       	mov	r18, r17
    bae4:	30 e0       	ldi	r19, 0x00	; 0
    bae6:	8a ef       	ldi	r24, 0xFA	; 250
    bae8:	9f ef       	ldi	r25, 0xFF	; 255
    baea:	ac 01       	movw	r20, r24
    baec:	24 9f       	mul	r18, r20
    baee:	c0 01       	movw	r24, r0
    baf0:	25 9f       	mul	r18, r21
    baf2:	90 0d       	add	r25, r0
    baf4:	34 9f       	mul	r19, r20
    baf6:	90 0d       	add	r25, r0
    baf8:	11 24       	eor	r1, r1
    bafa:	20 81       	ld	r18, Z
    bafc:	31 81       	ldd	r19, Z+1	; 0x01
    bafe:	82 0f       	add	r24, r18
    bb00:	93 1f       	adc	r25, r19
    bb02:	91 83       	std	Z+1, r25	; 0x01
    bb04:	80 83       	st	Z, r24
	return steps;
}
    bb06:	81 2f       	mov	r24, r17
    bb08:	df 91       	pop	r29
    bb0a:	cf 91       	pop	r28
    bb0c:	1f 91       	pop	r17
    bb0e:	08 95       	ret

0000bb10 <CrashBarUp>:
		crashcomingup[target] += s;
		
	score[p] = score[p]%10;
}	

uint8_t CrashBarUp(uint8_t steps, uint8_t target){
    bb10:	a0 e0       	ldi	r26, 0x00	; 0
    bb12:	b0 e0       	ldi	r27, 0x00	; 0
    bb14:	ee e8       	ldi	r30, 0x8E	; 142
    bb16:	fd e5       	ldi	r31, 0x5D	; 93
    bb18:	0c 94 16 74 	jmp	0xe82c	; 0xe82c <__prologue_saves__+0x16>
    bb1c:	18 2f       	mov	r17, r24
    bb1e:	06 2f       	mov	r16, r22
	
	if((crashheight[target]+steps)>13)
    bb20:	e6 2e       	mov	r14, r22
    bb22:	ff 24       	eor	r15, r15
    bb24:	f7 01       	movw	r30, r14
    bb26:	ec 54       	subi	r30, 0x4C	; 76
    bb28:	f0 4f       	sbci	r31, 0xF0	; 240
    bb2a:	e0 81       	ld	r30, Z
    bb2c:	90 e0       	ldi	r25, 0x00	; 0
    bb2e:	8e 0f       	add	r24, r30
    bb30:	91 1d       	adc	r25, r1
    bb32:	0e 97       	sbiw	r24, 0x0e	; 14
    bb34:	14 f0       	brlt	.+4      	; 0xbb3a <CrashBarUp+0x2a>
		steps = 13-crashheight[target];
    bb36:	1d e0       	ldi	r17, 0x0D	; 13
    bb38:	1e 1b       	sub	r17, r30
	
	if(!steps)//TODO possible???
    bb3a:	11 23       	and	r17, r17
    bb3c:	09 f4       	brne	.+2      	; 0xbb40 <CrashBarUp+0x30>
    bb3e:	66 c0       	rjmp	.+204    	; 0xbc0c <CrashBarUp+0xfc>
		return 0;

	TriggerPCM(CRASHWAVE,23,255);
    bb40:	8e e2       	ldi	r24, 0x2E	; 46
    bb42:	67 e1       	ldi	r22, 0x17	; 23
    bb44:	4f ef       	ldi	r20, 0xFF	; 255
    bb46:	5e df       	rcall	.-324    	; 0xba04 <TriggerPCM>

	crashheight[target] += steps;
    bb48:	f7 01       	movw	r30, r14
    bb4a:	ec 54       	subi	r30, 0x4C	; 76
    bb4c:	f0 4f       	sbci	r31, 0xF0	; 240
    bb4e:	50 81       	ld	r21, Z
    bb50:	51 0f       	add	r21, r17
    bb52:	50 83       	st	Z, r21
void reset_prng(){	for(uint8_t i=0;i<MAX_PLAYERS;i++)lfsr[i]=0xACE1u;}
void shuffle_prng(){for(uint8_t i=0;i<MAX_PLAYERS;i++){for(uint8_t j=0;j<4;j++){prng(i);}}}



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
    bb54:	80 e6       	ldi	r24, 0x60	; 96
    bb56:	90 e0       	ldi	r25, 0x00	; 0
    bb58:	e8 9e       	mul	r14, r24
    bb5a:	e0 01       	movw	r28, r0
    bb5c:	e9 9e       	mul	r14, r25
    bb5e:	d0 0d       	add	r29, r0
    bb60:	f8 9e       	mul	r15, r24
    bb62:	d0 0d       	add	r29, r0
    bb64:	11 24       	eor	r1, r1
    bb66:	43 e0       	ldi	r20, 0x03	; 3
    bb68:	41 1b       	sub	r20, r17
    bb6a:	ce 01       	movw	r24, r28
    bb6c:	42 96       	adiw	r24, 0x12	; 18
		//GeneratePreview(target);
	}
//	WaitVsync(1);
	uint8_t t;

	for(uint8_t y=3;y<16;y++)
    bb6e:	26 e0       	ldi	r18, 0x06	; 6
    bb70:	d2 2e       	mov	r13, r18
    bb72:	be 01       	movw	r22, r28
    bb74:	60 5a       	subi	r22, 0xA0	; 160
    bb76:	7f 4f       	sbci	r23, 0xFF	; 255
    bb78:	0d c0       	rjmp	.+26     	; 0xbb94 <CrashBarUp+0x84>
    bb7a:	2c 91       	ld	r18, X
	for(uint8_t x=0;x<6;x++){
		t = get_well(x,y,target);
		if(!t)
    bb7c:	21 11       	cpse	r18, r1
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    bb7e:	20 83       	st	Z, r18
	}
//	WaitVsync(1);
	uint8_t t;

	for(uint8_t y=3;y<16;y++)
	for(uint8_t x=0;x<6;x++){
    bb80:	3f 5f       	subi	r19, 0xFF	; 255
    bb82:	11 96       	adiw	r26, 0x01	; 1
    bb84:	31 96       	adiw	r30, 0x01	; 1
    bb86:	36 30       	cpi	r19, 0x06	; 6
    bb88:	c1 f7       	brne	.-16     	; 0xbb7a <CrashBarUp+0x6a>
    bb8a:	4f 5f       	subi	r20, 0xFF	; 255
    bb8c:	06 96       	adiw	r24, 0x06	; 6
		//GeneratePreview(target);
	}
//	WaitVsync(1);
	uint8_t t;

	for(uint8_t y=3;y<16;y++)
    bb8e:	86 17       	cp	r24, r22
    bb90:	97 07       	cpc	r25, r23
    bb92:	61 f0       	breq	.+24     	; 0xbbac <CrashBarUp+0x9c>
    bb94:	dc 01       	movw	r26, r24
    bb96:	a3 55       	subi	r26, 0x53	; 83
    bb98:	b1 4f       	sbci	r27, 0xF1	; 241
    bb9a:	4d 9d       	mul	r20, r13
    bb9c:	f0 01       	movw	r30, r0
    bb9e:	11 24       	eor	r1, r1
    bba0:	ec 0f       	add	r30, r28
    bba2:	fd 1f       	adc	r31, r29
    bba4:	e3 55       	subi	r30, 0x53	; 83
    bba6:	f1 4f       	sbci	r31, 0xF1	; 241
    bba8:	30 e0       	ldi	r19, 0x00	; 0
    bbaa:	e7 cf       	rjmp	.-50     	; 0xbb7a <CrashBarUp+0x6a>
			continue;
		set_well(x,y-steps,target,t);	
		//set_well(x,y,target,c--);

	}
	bool flop = target;
    bbac:	60 2f       	mov	r22, r16
    bbae:	01 11       	cpse	r16, r1
    bbb0:	61 e0       	ldi	r22, 0x01	; 1
	uint8_t c = 20;
	for(uint8_t y=16-crashheight[target];y<16;y++){
    bbb2:	90 e1       	ldi	r25, 0x10	; 16
    bbb4:	95 1b       	sub	r25, r21
    bbb6:	46 e0       	ldi	r20, 0x06	; 6
		for(uint8_t x=0;x<6;x++){
			set_well(x,y,target,c+flop);
			flop = !flop;
    bbb8:	31 e0       	ldi	r19, 0x01	; 1
    bbba:	21 e0       	ldi	r18, 0x01	; 1
    bbbc:	09 c0       	rjmp	.+18     	; 0xbbd0 <CrashBarUp+0xc0>
    bbbe:	6c 5e       	subi	r22, 0xEC	; 236
    bbc0:	61 93       	st	Z+, r22
    bbc2:	64 51       	subi	r22, 0x14	; 20
    bbc4:	63 27       	eor	r22, r19

	}
	bool flop = target;
	uint8_t c = 20;
	for(uint8_t y=16-crashheight[target];y<16;y++){
		for(uint8_t x=0;x<6;x++){
    bbc6:	8f 5f       	subi	r24, 0xFF	; 255
    bbc8:	86 30       	cpi	r24, 0x06	; 6
    bbca:	c9 f7       	brne	.-14     	; 0xbbbe <CrashBarUp+0xae>
			set_well(x,y,target,c+flop);
			flop = !flop;
		}
		flop = !flop;
    bbcc:	62 27       	eor	r22, r18
		//set_well(x,y,target,c--);

	}
	bool flop = target;
	uint8_t c = 20;
	for(uint8_t y=16-crashheight[target];y<16;y++){
    bbce:	9f 5f       	subi	r25, 0xFF	; 255
    bbd0:	90 31       	cpi	r25, 0x10	; 16
    bbd2:	48 f4       	brcc	.+18     	; 0xbbe6 <CrashBarUp+0xd6>
    bbd4:	94 9f       	mul	r25, r20
    bbd6:	f0 01       	movw	r30, r0
    bbd8:	11 24       	eor	r1, r1
    bbda:	ec 0f       	add	r30, r28
    bbdc:	fd 1f       	adc	r31, r29
    bbde:	e3 55       	subi	r30, 0x53	; 83
    bbe0:	f1 4f       	sbci	r31, 0xF1	; 241
    bbe2:	80 e0       	ldi	r24, 0x00	; 0
    bbe4:	ec cf       	rjmp	.-40     	; 0xbbbe <CrashBarUp+0xae>
			flop = !flop;
		}
		flop = !flop;
	}

	WaitVsync(1);
    bbe6:	81 e0       	ldi	r24, 0x01	; 1
    bbe8:	90 e0       	ldi	r25, 0x00	; 0
    bbea:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
	
	wellfullness[target] += 6*steps;
    bbee:	f7 01       	movw	r30, r14
    bbf0:	ee 0f       	add	r30, r30
    bbf2:	ff 1f       	adc	r31, r31
    bbf4:	eb 56       	subi	r30, 0x6B	; 107
    bbf6:	f0 4f       	sbci	r31, 0xF0	; 240
    bbf8:	86 e0       	ldi	r24, 0x06	; 6
    bbfa:	18 9f       	mul	r17, r24
    bbfc:	c0 01       	movw	r24, r0
    bbfe:	11 24       	eor	r1, r1
    bc00:	20 81       	ld	r18, Z
    bc02:	31 81       	ldd	r19, Z+1	; 0x01
    bc04:	82 0f       	add	r24, r18
    bc06:	93 1f       	adc	r25, r19
    bc08:	91 83       	std	Z+1, r25	; 0x01
    bc0a:	80 83       	st	Z, r24
	return steps;
}
    bc0c:	81 2f       	mov	r24, r17
    bc0e:	cd b7       	in	r28, 0x3d	; 61
    bc10:	de b7       	in	r29, 0x3e	; 62
    bc12:	e7 e0       	ldi	r30, 0x07	; 7
    bc14:	0c 94 32 74 	jmp	0xe864	; 0xe864 <__epilogue_restores__+0x16>

0000bc18 <SummonMagicJewel>:
	return false;
}



void SummonMagicJewel(uint8_t p){
    bc18:	0f 93       	push	r16
    bc1a:	1f 93       	push	r17
    bc1c:	08 2f       	mov	r16, r24
	TriggerPCM(MAGICWAVE,23,255);
    bc1e:	8d e2       	ldi	r24, 0x2D	; 45
    bc20:	67 e1       	ldi	r22, 0x17	; 23
    bc22:	4f ef       	ldi	r20, 0xFF	; 255
    bc24:	ef de       	rcall	.-546    	; 0xba04 <TriggerPCM>
	magicjewelssummoned[p]++;
    bc26:	10 e0       	ldi	r17, 0x00	; 0
    bc28:	f8 01       	movw	r30, r16
    bc2a:	e7 56       	subi	r30, 0x67	; 103
    bc2c:	f1 4f       	sbci	r31, 0xF1	; 241
    bc2e:	80 81       	ld	r24, Z
    bc30:	8f 5f       	subi	r24, 0xFF	; 255
    bc32:	80 83       	st	Z, r24
	preview[(p*3)+0] = 7;
    bc34:	f8 01       	movw	r30, r16
    bc36:	ee 0f       	add	r30, r30
    bc38:	ff 1f       	adc	r31, r31
    bc3a:	e0 0f       	add	r30, r16
    bc3c:	f1 1f       	adc	r31, r17
    bc3e:	e3 59       	subi	r30, 0x93	; 147
    bc40:	f0 4f       	sbci	r31, 0xF0	; 240
    bc42:	87 e0       	ldi	r24, 0x07	; 7
    bc44:	80 83       	st	Z, r24
	preview[(p*3)+1] = 8;
    bc46:	88 e0       	ldi	r24, 0x08	; 8
    bc48:	81 83       	std	Z+1, r24	; 0x01
	preview[(p*3)+2] = 9;
    bc4a:	89 e0       	ldi	r24, 0x09	; 9
    bc4c:	82 83       	std	Z+2, r24	; 0x02
	magicjewelsonscreen++;
    bc4e:	80 91 6f 0e 	lds	r24, 0x0E6F
    bc52:	8f 5f       	subi	r24, 0xFF	; 255
    bc54:	80 93 6f 0e 	sts	0x0E6F, r24
}
    bc58:	1f 91       	pop	r17
    bc5a:	0f 91       	pop	r16
    bc5c:	08 95       	ret

0000bc5e <CheckScore>:

uint16_t CheckScore(uint8_t p){
    bc5e:	a0 e0       	ldi	r26, 0x00	; 0
    bc60:	b0 e0       	ldi	r27, 0x00	; 0
    bc62:	e5 e3       	ldi	r30, 0x35	; 53
    bc64:	fe e5       	ldi	r31, 0x5E	; 94
    bc66:	0c 94 0b 74 	jmp	0xe816	; 0xe816 <__prologue_saves__>
    bc6a:	38 2e       	mov	r3, r24
	uint16_t total = 0;
	uint8_t t0,t1,t2,t3,t4;
	uint8_t off;
	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = (p*WELLSIZE)+x;
    bc6c:	e8 2e       	mov	r14, r24
    bc6e:	ff 24       	eor	r15, r15
    bc70:	80 e6       	ldi	r24, 0x60	; 96
    bc72:	90 e0       	ldi	r25, 0x00	; 0
    bc74:	38 9e       	mul	r3, r24
    bc76:	b0 2c       	mov	r11, r0
    bc78:	11 24       	eor	r1, r1
	    for(uint8_t y=1; y<15-crashheight[p];y++){
    bc7a:	f7 01       	movw	r30, r14
    bc7c:	ec 54       	subi	r30, 0x4C	; 76
    bc7e:	f0 4f       	sbci	r31, 0xF0	; 240
    bc80:	80 81       	ld	r24, Z
    bc82:	c8 2e       	mov	r12, r24
    bc84:	dd 24       	eor	r13, r13
    bc86:	7f e0       	ldi	r23, 0x0F	; 15
    bc88:	67 2e       	mov	r6, r23
    bc8a:	71 2c       	mov	r7, r1
    bc8c:	6c 18       	sub	r6, r12
    bc8e:	7d 08       	sbc	r7, r13
    bc90:	00 e0       	ldi	r16, 0x00	; 0
    bc92:	10 e0       	ldi	r17, 0x00	; 0
    bc94:	40 e0       	ldi	r20, 0x00	; 0
    bc96:	50 e0       	ldi	r21, 0x00	; 0
    bc98:	7b 2d       	mov	r23, r11
    bc9a:	74 0f       	add	r23, r20
    bc9c:	61 e0       	ldi	r22, 0x01	; 1
    bc9e:	23 c0       	rjmp	.+70     	; 0xbce6 <CheckScore+0x88>
			off += 6;
    bca0:	7a 5f       	subi	r23, 0xFA	; 250
			t1 = (well[off]&7);//get_well_no_scoring(x,y,p);
    bca2:	87 2f       	mov	r24, r23
    bca4:	90 e0       	ldi	r25, 0x00	; 0
    bca6:	dc 01       	movw	r26, r24
    bca8:	a3 55       	subi	r26, 0x53	; 83
    bcaa:	b1 4f       	sbci	r27, 0xF1	; 241
    bcac:	2c 91       	ld	r18, X
    bcae:	27 70       	andi	r18, 0x07	; 7
			if(!t1)
    bcb0:	c9 f0       	breq	.+50     	; 0xbce4 <CheckScore+0x86>
				continue;
			t0 = (well[off-6]&7);//get_well_no_scoring(x,y-1,p);
			t2 = (well[off+6]&7);//get_well_no_scoring(x,y+1,p);
    bcb2:	ec 01       	movw	r28, r24
    bcb4:	cd 54       	subi	r28, 0x4D	; 77
    bcb6:	d1 4f       	sbci	r29, 0xF1	; 241
    bcb8:	38 81       	ld	r19, Y

			if(t1==t0 && t1==t2){
    bcba:	fc 01       	movw	r30, r24
    bcbc:	e9 55       	subi	r30, 0x59	; 89
    bcbe:	f1 4f       	sbci	r31, 0xF1	; 241
    bcc0:	80 81       	ld	r24, Z
    bcc2:	87 70       	andi	r24, 0x07	; 7
    bcc4:	28 17       	cp	r18, r24
    bcc6:	71 f4       	brne	.+28     	; 0xbce4 <CheckScore+0x86>
    bcc8:	83 2f       	mov	r24, r19
    bcca:	87 70       	andi	r24, 0x07	; 7
    bccc:	28 17       	cp	r18, r24
    bcce:	51 f4       	brne	.+20     	; 0xbce4 <CheckScore+0x86>
				well[off+6] |= SCORINGJEWEL;//set_scoring(x,y-1,p);
    bcd0:	30 68       	ori	r19, 0x80	; 128
    bcd2:	38 83       	st	Y, r19
				well[off+0] |= SCORINGJEWEL;//set_scoring(x,y,p);
    bcd4:	8c 91       	ld	r24, X
    bcd6:	80 68       	ori	r24, 0x80	; 128
    bcd8:	8c 93       	st	X, r24
				well[off-6] |= SCORINGJEWEL;//set_scoring(x,y+1,p);
    bcda:	80 81       	ld	r24, Z
    bcdc:	80 68       	ori	r24, 0x80	; 128
    bcde:	80 83       	st	Z, r24
				total+=3;
    bce0:	0d 5f       	subi	r16, 0xFD	; 253
    bce2:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t t0,t1,t2,t3,t4;
	uint8_t off;
	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = (p*WELLSIZE)+x;
	    for(uint8_t y=1; y<15-crashheight[p];y++){
    bce4:	6f 5f       	subi	r22, 0xFF	; 255
    bce6:	86 2f       	mov	r24, r22
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	86 15       	cp	r24, r6
    bcec:	97 05       	cpc	r25, r7
    bcee:	c4 f2       	brlt	.-80     	; 0xbca0 <CheckScore+0x42>
    bcf0:	4f 5f       	subi	r20, 0xFF	; 255
    bcf2:	5f 4f       	sbci	r21, 0xFF	; 255
//TODO FASTER AND SMALLER TO USE DIRECT BUFFER OFFSETS INSTEAD OF INLINE FUNCTIONS(DUH!)
	uint16_t total = 0;
	uint8_t t0,t1,t2,t3,t4;
	uint8_t off;
	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
    bcf4:	46 30       	cpi	r20, 0x06	; 6
    bcf6:	51 05       	cpc	r21, r1
    bcf8:	79 f6       	brne	.-98     	; 0xbc98 <CheckScore+0x3a>
				total+=3;
			}
	    }
	}*/
	off = (p*WELLSIZE);
	for(uint8_t y=0;y<(16-crashheight[p]);y++){
    bcfa:	40 e1       	ldi	r20, 0x10	; 16
    bcfc:	50 e0       	ldi	r21, 0x00	; 0
    bcfe:	4c 19       	sub	r20, r12
    bd00:	5d 09       	sbc	r21, r13
    bd02:	db 2c       	mov	r13, r11
    bd04:	cc 24       	eor	r12, r12
    bd06:	33 c0       	rjmp	.+102    	; 0xbd6e <CheckScore+0x110>
    bd08:	9d 2d       	mov	r25, r13
		for(uint8_t x=0;x<4;x++){
    bd0a:	64 e0       	ldi	r22, 0x04	; 4
    bd0c:	a6 2e       	mov	r10, r22
    bd0e:	ad 0c       	add	r10, r13
			t1 = (well[off++]&7);
    bd10:	e9 2f       	mov	r30, r25
    bd12:	f0 e0       	ldi	r31, 0x00	; 0
    bd14:	e3 55       	subi	r30, 0x53	; 83
    bd16:	f1 4f       	sbci	r31, 0xF1	; 241
    bd18:	30 81       	ld	r19, Z
    bd1a:	37 70       	andi	r19, 0x07	; 7
    bd1c:	9f 5f       	subi	r25, 0xFF	; 255
			if(!t1)
    bd1e:	33 23       	and	r19, r19
    bd20:	09 f1       	breq	.+66     	; 0xbd64 <CheckScore+0x106>
				continue;
			t0 = (well[off++]&7);
    bd22:	69 2f       	mov	r22, r25
    bd24:	70 e0       	ldi	r23, 0x00	; 0
			t2 = (well[off]&7);
    bd26:	9f 5f       	subi	r25, 0xFF	; 255
    bd28:	a9 2f       	mov	r26, r25
    bd2a:	b0 e0       	ldi	r27, 0x00	; 0
    bd2c:	91 50       	subi	r25, 0x01	; 1
    bd2e:	a3 55       	subi	r26, 0x53	; 83
    bd30:	b1 4f       	sbci	r27, 0xF1	; 241
    bd32:	2c 91       	ld	r18, X
			if(t1 == t0 && t1 == t2){
    bd34:	fb 01       	movw	r30, r22
    bd36:	e3 55       	subi	r30, 0x53	; 83
    bd38:	f1 4f       	sbci	r31, 0xF1	; 241
    bd3a:	80 81       	ld	r24, Z
    bd3c:	87 70       	andi	r24, 0x07	; 7
    bd3e:	38 17       	cp	r19, r24
    bd40:	89 f4       	brne	.+34     	; 0xbd64 <CheckScore+0x106>
    bd42:	82 2f       	mov	r24, r18
    bd44:	87 70       	andi	r24, 0x07	; 7
    bd46:	38 17       	cp	r19, r24
    bd48:	69 f4       	brne	.+26     	; 0xbd64 <CheckScore+0x106>
				well[off+0] |= SCORINGJEWEL;
    bd4a:	20 68       	ori	r18, 0x80	; 128
    bd4c:	2c 93       	st	X, r18
				well[--off] |= SCORINGJEWEL;
    bd4e:	80 81       	ld	r24, Z
    bd50:	80 68       	ori	r24, 0x80	; 128
    bd52:	80 83       	st	Z, r24
				well[off-1] |= SCORINGJEWEL;
    bd54:	fb 01       	movw	r30, r22
    bd56:	e4 55       	subi	r30, 0x54	; 84
    bd58:	f1 4f       	sbci	r31, 0xF1	; 241
    bd5a:	80 81       	ld	r24, Z
    bd5c:	80 68       	ori	r24, 0x80	; 128
    bd5e:	80 83       	st	Z, r24
				total += 3;
    bd60:	0d 5f       	subi	r16, 0xFD	; 253
    bd62:	1f 4f       	sbci	r17, 0xFF	; 255
			}
	    }
	}*/
	off = (p*WELLSIZE);
	for(uint8_t y=0;y<(16-crashheight[p]);y++){
		for(uint8_t x=0;x<4;x++){
    bd64:	9a 15       	cp	r25, r10
    bd66:	a1 f6       	brne	.-88     	; 0xbd10 <CheckScore+0xb2>
    bd68:	26 e0       	ldi	r18, 0x06	; 6
    bd6a:	d2 0e       	add	r13, r18
				total+=3;
			}
	    }
	}*/
	off = (p*WELLSIZE);
	for(uint8_t y=0;y<(16-crashheight[p]);y++){
    bd6c:	c3 94       	inc	r12
    bd6e:	8c 2d       	mov	r24, r12
    bd70:	90 e0       	ldi	r25, 0x00	; 0
    bd72:	84 17       	cp	r24, r20
    bd74:	95 07       	cpc	r25, r21
    bd76:	44 f2       	brlt	.-112    	; 0xbd08 <CheckScore+0xaa>
    bd78:	7b 2d       	mov	r23, r11
    bd7a:	7f 5f       	subi	r23, 0xFF	; 255
	}
*/

	// CHECK DIAGONALS
	//off = (p*WELLSIZE)+1+6;
	for(uint8_t x=1;x<5;x++) {
    bd7c:	55 e0       	ldi	r21, 0x05	; 5
    bd7e:	45 2e       	mov	r4, r21
    bd80:	4b 0c       	add	r4, r11
    bd82:	67 c0       	rjmp	.+206    	; 0xbe52 <CheckScore+0x1f4>
		for(uint8_t y=1;y<15-crashheight[p];y++) {
			off = (p*WELLSIZE)+(y*6)+x;
			if(!(t0 = (well[off]&7)))//(x,y,p);
    bd84:	c9 01       	movw	r24, r18
    bd86:	88 0f       	add	r24, r24
    bd88:	99 1f       	adc	r25, r25
    bd8a:	82 0f       	add	r24, r18
    bd8c:	93 1f       	adc	r25, r19
    bd8e:	88 0f       	add	r24, r24
    bd90:	99 1f       	adc	r25, r25
    bd92:	87 0f       	add	r24, r23
    bd94:	28 2f       	mov	r18, r24
    bd96:	30 e0       	ldi	r19, 0x00	; 0
    bd98:	ad ea       	ldi	r26, 0xAD	; 173
    bd9a:	ca 2e       	mov	r12, r26
    bd9c:	ae e0       	ldi	r26, 0x0E	; 14
    bd9e:	da 2e       	mov	r13, r26
    bda0:	c2 0e       	add	r12, r18
    bda2:	d3 1e       	adc	r13, r19
    bda4:	f6 01       	movw	r30, r12
    bda6:	40 81       	ld	r20, Z
    bda8:	54 2f       	mov	r21, r20
    bdaa:	57 70       	andi	r21, 0x07	; 7
    bdac:	09 f4       	brne	.+2      	; 0xbdb0 <CheckScore+0x152>
    bdae:	47 c0       	rjmp	.+142    	; 0xbe3e <CheckScore+0x1e0>
				continue;
				
			t1 = (well[(off-1)+6]&7);//get_well_no_scoring(x-1,y+1,p);
			t2 = (well[(off+1)-6]&7);//get_well_no_scoring(x+1,y-1,p);
    bdb0:	e9 01       	movw	r28, r18
    bdb2:	c8 55       	subi	r28, 0x58	; 88
    bdb4:	d1 4f       	sbci	r29, 0xF1	; 241
    bdb6:	98 81       	ld	r25, Y
			t3 = (well[(off-1)-6]&7);//get_well_no_scoring(x-1,y-1,p);
    bdb8:	f9 ef       	ldi	r31, 0xF9	; 249
    bdba:	af 2e       	mov	r10, r31
    bdbc:	ff ef       	ldi	r31, 0xFF	; 255
    bdbe:	bf 2e       	mov	r11, r31
    bdc0:	a2 0e       	add	r10, r18
    bdc2:	b3 1e       	adc	r11, r19
    bdc4:	f5 01       	movw	r30, r10
    bdc6:	e3 55       	subi	r30, 0x53	; 83
    bdc8:	f1 4f       	sbci	r31, 0xF1	; 241
    bdca:	60 81       	ld	r22, Z
			t4 = (well[(off+1)+6]&7);//get_well_no_scoring(x+1,y+1,p);
    bdcc:	e7 e0       	ldi	r30, 0x07	; 7
    bdce:	8e 2e       	mov	r8, r30
    bdd0:	91 2c       	mov	r9, r1
    bdd2:	82 0e       	add	r8, r18
    bdd4:	93 1e       	adc	r9, r19
    bdd6:	f4 01       	movw	r30, r8
    bdd8:	e3 55       	subi	r30, 0x53	; 83
    bdda:	f1 4f       	sbci	r31, 0xF1	; 241
    bddc:	20 80       	ld	r2, Z
			
			if(t0==t1 && t0==t2){
    bdde:	d9 01       	movw	r26, r18
    bde0:	ae 54       	subi	r26, 0x4E	; 78
    bde2:	b1 4f       	sbci	r27, 0xF1	; 241
    bde4:	8c 91       	ld	r24, X
    bde6:	87 70       	andi	r24, 0x07	; 7
    bde8:	58 17       	cp	r21, r24
    bdea:	71 f4       	brne	.+28     	; 0xbe08 <CheckScore+0x1aa>
    bdec:	97 70       	andi	r25, 0x07	; 7
    bdee:	59 17       	cp	r21, r25
    bdf0:	59 f4       	brne	.+22     	; 0xbe08 <CheckScore+0x1aa>
				well[(off+0)+0] |= SCORINGJEWEL;//set_scoring(x,y,p);
    bdf2:	40 68       	ori	r20, 0x80	; 128
    bdf4:	f6 01       	movw	r30, r12
    bdf6:	40 83       	st	Z, r20
				well[(off-1)+6] |= SCORINGJEWEL;//set_scoring(x-1,y+1,p);
    bdf8:	8c 91       	ld	r24, X
    bdfa:	80 68       	ori	r24, 0x80	; 128
    bdfc:	8c 93       	st	X, r24
				well[(off+1)-6] |= SCORINGJEWEL;//set_scoring(x+1,y-1,p);
    bdfe:	88 81       	ld	r24, Y
    be00:	80 68       	ori	r24, 0x80	; 128
    be02:	88 83       	st	Y, r24
				total+=3;
    be04:	0d 5f       	subi	r16, 0xFD	; 253
    be06:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(t0==t3 && t0==t4){
    be08:	67 70       	andi	r22, 0x07	; 7
    be0a:	56 17       	cp	r21, r22
    be0c:	c1 f4       	brne	.+48     	; 0xbe3e <CheckScore+0x1e0>
    be0e:	f7 e0       	ldi	r31, 0x07	; 7
    be10:	2f 22       	and	r2, r31
    be12:	52 15       	cp	r21, r2
    be14:	a1 f4       	brne	.+40     	; 0xbe3e <CheckScore+0x1e0>
				well[(off+0)+0] |= SCORINGJEWEL;//set_scoring(x,y,p);
    be16:	f9 01       	movw	r30, r18
    be18:	e3 55       	subi	r30, 0x53	; 83
    be1a:	f1 4f       	sbci	r31, 0xF1	; 241
    be1c:	80 81       	ld	r24, Z
    be1e:	80 68       	ori	r24, 0x80	; 128
    be20:	80 83       	st	Z, r24
				well[(off-1)-6] |= SCORINGJEWEL;//set_scoring(x-1,y-1,p);
    be22:	f5 01       	movw	r30, r10
    be24:	e3 55       	subi	r30, 0x53	; 83
    be26:	f1 4f       	sbci	r31, 0xF1	; 241
    be28:	80 81       	ld	r24, Z
    be2a:	80 68       	ori	r24, 0x80	; 128
    be2c:	80 83       	st	Z, r24
				well[(off+1)+6] |= SCORINGJEWEL;//set_scoring(x+1,y+1,p);
    be2e:	f4 01       	movw	r30, r8
    be30:	e3 55       	subi	r30, 0x53	; 83
    be32:	f1 4f       	sbci	r31, 0xF1	; 241
    be34:	80 81       	ld	r24, Z
    be36:	80 68       	ori	r24, 0x80	; 128
    be38:	80 83       	st	Z, r24
				total+=3;
    be3a:	0d 5f       	subi	r16, 0xFD	; 253
    be3c:	1f 4f       	sbci	r17, 0xFF	; 255
*/

	// CHECK DIAGONALS
	//off = (p*WELLSIZE)+1+6;
	for(uint8_t x=1;x<5;x++) {
		for(uint8_t y=1;y<15-crashheight[p];y++) {
    be3e:	53 94       	inc	r5
    be40:	25 2d       	mov	r18, r5
    be42:	30 e0       	ldi	r19, 0x00	; 0
    be44:	26 15       	cp	r18, r6
    be46:	37 05       	cpc	r19, r7
    be48:	0c f4       	brge	.+2      	; 0xbe4c <CheckScore+0x1ee>
    be4a:	9c cf       	rjmp	.-200    	; 0xbd84 <CheckScore+0x126>
    be4c:	7f 5f       	subi	r23, 0xFF	; 255
	}
*/

	// CHECK DIAGONALS
	//off = (p*WELLSIZE)+1+6;
	for(uint8_t x=1;x<5;x++) {
    be4e:	74 15       	cp	r23, r4
    be50:	19 f0       	breq	.+6      	; 0xbe58 <CheckScore+0x1fa>
    be52:	55 24       	eor	r5, r5
    be54:	53 94       	inc	r5
    be56:	f4 cf       	rjmp	.-24     	; 0xbe40 <CheckScore+0x1e2>
				total+=3;
			}
		}
	}

	if(!wasmagicjewel[p]){
    be58:	f7 01       	movw	r30, r14
    be5a:	e4 55       	subi	r30, 0x54	; 84
    be5c:	f0 4f       	sbci	r31, 0xF0	; 240
    be5e:	80 81       	ld	r24, Z
    be60:	88 23       	and	r24, r24
    be62:	09 f0       	breq	.+2      	; 0xbe66 <CheckScore+0x208>
    be64:	3e c0       	rjmp	.+124    	; 0xbee2 <CheckScore+0x284>
		chain[p]++;
    be66:	f7 01       	movw	r30, r14
    be68:	ea 55       	subi	r30, 0x5A	; 90
    be6a:	f0 4f       	sbci	r31, 0xF0	; 240
    be6c:	80 81       	ld	r24, Z
    be6e:	8f 5f       	subi	r24, 0xFF	; 255
    be70:	80 83       	st	Z, r24
		total *= chain[p];
    be72:	90 e0       	ldi	r25, 0x00	; 0
    be74:	98 01       	movw	r18, r16
    be76:	28 9f       	mul	r18, r24
    be78:	80 01       	movw	r16, r0
    be7a:	29 9f       	mul	r18, r25
    be7c:	10 0d       	add	r17, r0
    be7e:	38 9f       	mul	r19, r24
    be80:	10 0d       	add	r17, r0
    be82:	11 24       	eor	r1, r1
		if(score[p]+total > 30)//I guess we will just update the score here...
    be84:	f7 01       	movw	r30, r14
    be86:	ed 58       	subi	r30, 0x8D	; 141
    be88:	f0 4f       	sbci	r31, 0xF0	; 240
    be8a:	20 81       	ld	r18, Z
    be8c:	c8 01       	movw	r24, r16
    be8e:	82 0f       	add	r24, r18
    be90:	91 1d       	adc	r25, r1
    be92:	4f 97       	sbiw	r24, 0x1f	; 31
    be94:	18 f0       	brcs	.+6      	; 0xbe9c <CheckScore+0x23e>
			score[p] = 30;
    be96:	8e e1       	ldi	r24, 0x1E	; 30
    be98:	80 83       	st	Z, r24
    be9a:	02 c0       	rjmp	.+4      	; 0xbea0 <CheckScore+0x242>
		else
			score[p] += total;
    be9c:	20 0f       	add	r18, r16
    be9e:	20 83       	st	Z, r18
		
		jewels[p] += total/3;
    bea0:	c8 01       	movw	r24, r16
    bea2:	63 e0       	ldi	r22, 0x03	; 3
    bea4:	70 e0       	ldi	r23, 0x00	; 0
    bea6:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    beaa:	cb 01       	movw	r24, r22
    beac:	f7 01       	movw	r30, r14
    beae:	ee 0f       	add	r30, r30
    beb0:	ff 1f       	adc	r31, r31
    beb2:	ee 55       	subi	r30, 0x5E	; 94
    beb4:	f0 4f       	sbci	r31, 0xF0	; 240
    beb6:	20 81       	ld	r18, Z
    beb8:	31 81       	ldd	r19, Z+1	; 0x01
    beba:	82 0f       	add	r24, r18
    bebc:	93 1f       	adc	r25, r19
    bebe:	91 83       	std	Z+1, r25	; 0x01
    bec0:	80 83       	st	Z, r24
		
		if(jewels[p]/20 > magicjewelssummoned[p])
    bec2:	64 e1       	ldi	r22, 0x14	; 20
    bec4:	70 e0       	ldi	r23, 0x00	; 0
    bec6:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    beca:	89 e9       	ldi	r24, 0x99	; 153
    becc:	9e e0       	ldi	r25, 0x0E	; 14
    bece:	e8 0e       	add	r14, r24
    bed0:	f9 1e       	adc	r15, r25
    bed2:	f7 01       	movw	r30, r14
    bed4:	80 81       	ld	r24, Z
    bed6:	90 e0       	ldi	r25, 0x00	; 0
    bed8:	86 17       	cp	r24, r22
    beda:	97 07       	cpc	r25, r23
    bedc:	10 f4       	brcc	.+4      	; 0xbee2 <CheckScore+0x284>
			SummonMagicJewel(p);
    bede:	83 2d       	mov	r24, r3
    bee0:	9b de       	rcall	.-714    	; 0xbc18 <SummonMagicJewel>

		return total;
	}
	else
		return total;
}
    bee2:	c8 01       	movw	r24, r16
    bee4:	cd b7       	in	r28, 0x3d	; 61
    bee6:	de b7       	in	r29, 0x3e	; 62
    bee8:	e2 e1       	ldi	r30, 0x12	; 18
    beea:	0c 94 27 74 	jmp	0xe84e	; 0xe84e <__epilogue_restores__>

0000beee <DoPlay>:


inline void DoPlay(){
    beee:	ae e2       	ldi	r26, 0x2E	; 46
    bef0:	b0 e0       	ldi	r27, 0x00	; 0
    bef2:	ed e7       	ldi	r30, 0x7D	; 125
    bef4:	ff e5       	ldi	r31, 0x5F	; 95
    bef6:	0c 94 0b 74 	jmp	0xe816	; 0xe816 <__prologue_saves__>
	if(game_state == INITIALSTATE)
    befa:	80 91 a6 0e 	lds	r24, 0x0EA6
    befe:	8f 3f       	cpi	r24, 0xFF	; 255
    bf00:	09 f4       	brne	.+2      	; 0xbf04 <DoPlay+0x16>
		SetInitialState();//game_state |= GS_FIRSTTICK;
    bf02:	92 da       	rcall	.-2780   	; 0xb428 <SetInitialState>

	if(game_state & GS_FIRSTTICK){
    bf04:	80 91 a6 0e 	lds	r24, 0x0EA6
    bf08:	85 ff       	sbrs	r24, 5
    bf0a:	16 c0       	rjmp	.+44     	; 0xbf38 <DoPlay+0x4a>
		WaitVsync(1);
    bf0c:	81 e0       	ldi	r24, 0x01	; 1
    bf0e:	90 e0       	ldi	r25, 0x00	; 0
    bf10:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
		ramtilestate[0] = ramtilestate[1] = NEEDALLRAMMED;//MAKE GRID/CRASHBLOCKS GET DRAWN;
    bf14:	80 e8       	ldi	r24, 0x80	; 128
    bf16:	80 93 c9 0f 	sts	0x0FC9, r24
    bf1a:	80 93 c8 0f 	sts	0x0FC8, r24
		RamTileStateMachine();
    bf1e:	1a d9       	rcall	.-3532   	; 0xb154 <RamTileStateMachine>
		ramtilestate[0] = ramtilestate[1] = 0;
    bf20:	10 92 c9 0f 	sts	0x0FC9, r1
    bf24:	10 92 c8 0f 	sts	0x0FC8, r1
		WaitVsync(1);
    bf28:	81 e0       	ldi	r24, 0x01	; 1
    bf2a:	90 e0       	ldi	r25, 0x00	; 0
    bf2c:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
		FadeIn(2,false);
    bf30:	82 e0       	ldi	r24, 0x02	; 2
    bf32:	60 e0       	ldi	r22, 0x00	; 0
    bf34:	0e 94 82 53 	call	0xa704	; 0xa704 <FadeIn>
	

/////////////////////////////////////////////////////////////////////////////////////
//PROCESS 1 GAME TICK (30HZ)
/////////////////////////////////////////////////////////////////////////////////////
		UpdatePads();
    bf38:	64 db       	rcall	.-2360   	; 0xb602 <UpdatePads>
    bf3a:	bb 24       	eor	r11, r11
		for(uint8_t p=0;p<MAX_PLAYERS;p++){
			if(state[p] == GOAHEAD){
    bf3c:	2b 2d       	mov	r18, r11
    bf3e:	30 e0       	ldi	r19, 0x00	; 0
    bf40:	3e a7       	std	Y+46, r19	; 0x2e
    bf42:	2d a7       	std	Y+45, r18	; 0x2d
    bf44:	fa ea       	ldi	r31, 0xAA	; 170
    bf46:	cf 2e       	mov	r12, r31
    bf48:	fe e0       	ldi	r31, 0x0E	; 14
    bf4a:	df 2e       	mov	r13, r31
    bf4c:	c2 0e       	add	r12, r18
    bf4e:	d3 1e       	adc	r13, r19
    bf50:	d6 01       	movw	r26, r12
    bf52:	8c 91       	ld	r24, X
    bf54:	80 3c       	cpi	r24, 0xC0	; 192
    bf56:	89 f4       	brne	.+34     	; 0xbf7a <DoPlay+0x8c>
				//while(true){};
				state[0] = 0;
    bf58:	10 92 aa 0e 	sts	0x0EAA, r1
				state[1] = 0;
    bf5c:	10 92 ab 0e 	sts	0x0EAB, r1
				//game_state |= GS_FIRSTTICK;
				GeneratePreview(0);
    bf60:	80 e0       	ldi	r24, 0x00	; 0
    bf62:	68 d8       	rcall	.-3888   	; 0xb034 <GeneratePreview>
				GeneratePreview(1);
    bf64:	81 e0       	ldi	r24, 0x01	; 1
    bf66:	66 d8       	rcall	.-3892   	; 0xb034 <GeneratePreview>
				ramtilestate[0] = NEEDALLRAMMED;
    bf68:	80 e8       	ldi	r24, 0x80	; 128
    bf6a:	80 93 c8 0f 	sts	0x0FC8, r24
				ramtilestate[1] = NEEDALLRAMMED;
    bf6e:	80 93 c9 0f 	sts	0x0FC9, r24
				masterVolume = MASTERVOLUME;//needed for quick start presses during gameover
    bf72:	80 93 5f 0e 	sts	0x0E5F, r24
    bf76:	0c 94 4b 73 	jmp	0xe696	; 0xe696 <DoPlay+0x27a8>
				return;
			}
			
			if(state[p] & PAUSED || state[p] & GETREADY){
    bf7a:	48 2f       	mov	r20, r24
    bf7c:	50 e0       	ldi	r21, 0x00	; 0
    bf7e:	86 fd       	sbrc	r24, 6
    bf80:	4e c4       	rjmp	.+2204   	; 0xc81e <DoPlay+0x930>
    bf82:	87 fd       	sbrc	r24, 7
    bf84:	4c c4       	rjmp	.+2200   	; 0xc81e <DoPlay+0x930>
			}				

/////////////////////////////////////////////////////////////////////////////////////
//GAME OVER STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & GAMEOVER){
    bf86:	84 ff       	sbrs	r24, 4
    bf88:	4c c0       	rjmp	.+152    	; 0xc022 <DoPlay+0x134>
				musicspeed = 0;
    bf8a:	10 92 7b 0f 	sts	0x0F7B, r1
				SetSongTempo(musicspeed);
    bf8e:	80 e0       	ldi	r24, 0x00	; 0
    bf90:	90 e0       	ldi	r25, 0x00	; 0
    bf92:	0e 94 81 4b 	call	0x9702	; 0x9702 <SetSongTempo>
				if(!playSong){// && musictrack){
    bf96:	80 91 e4 0d 	lds	r24, 0x0DE4
    bf9a:	88 23       	and	r24, r24
    bf9c:	21 f4       	brne	.+8      	; 0xbfa6 <DoPlay+0xb8>
					masterVolume = 0;
    bf9e:	10 92 5f 0e 	sts	0x0E5F, r1
					ResumeSong();
    bfa2:	0e 94 32 4c 	call	0x9864	; 0x9864 <ResumeSong>
				}
				if(masterVolume < MASTERVOLUME){
    bfa6:	80 91 5f 0e 	lds	r24, 0x0E5F
    bfaa:	87 fd       	sbrc	r24, 7
    bfac:	08 c0       	rjmp	.+16     	; 0xbfbe <DoPlay+0xd0>
					masterVolume+=2;
    bfae:	8e 5f       	subi	r24, 0xFE	; 254
    bfb0:	80 93 5f 0e 	sts	0x0E5F, r24
					if(masterVolume > MASTERVOLUME)
    bfb4:	81 38       	cpi	r24, 0x81	; 129
    bfb6:	18 f0       	brcs	.+6      	; 0xbfbe <DoPlay+0xd0>
						masterVolume = MASTERVOLUME;
    bfb8:	b0 e8       	ldi	r27, 0x80	; 128
    bfba:	b0 93 5f 0e 	sts	0x0E5F, r27
	}
	return true;
}

void GeneratePreview(uint8_t p);
void clear_well(uint8_t p){uint8_t off = p*WELLSIZE;for(uint8_t i=0;i<WELLSIZE;i++){well[off++]=0;}}//for(uint8_t y=0;y<16;y++){for(uint8_t x=0;x<6;x++){set_well(x,y,p,0);}}}
    bfbe:	ed a5       	ldd	r30, Y+45	; 0x2d
    bfc0:	f0 e6       	ldi	r31, 0x60	; 96
    bfc2:	ef 9f       	mul	r30, r31
    bfc4:	20 2d       	mov	r18, r0
    bfc6:	11 24       	eor	r1, r1
    bfc8:	80 e0       	ldi	r24, 0x00	; 0
    bfca:	90 e0       	ldi	r25, 0x00	; 0
    bfcc:	e2 2f       	mov	r30, r18
    bfce:	e8 0f       	add	r30, r24
    bfd0:	f0 e0       	ldi	r31, 0x00	; 0
    bfd2:	e3 55       	subi	r30, 0x53	; 83
    bfd4:	f1 4f       	sbci	r31, 0xF1	; 241
    bfd6:	10 82       	st	Z, r1
    bfd8:	01 96       	adiw	r24, 0x01	; 1
    bfda:	80 36       	cpi	r24, 0x60	; 96
    bfdc:	91 05       	cpc	r25, r1
    bfde:	b1 f7       	brne	.-20     	; 0xbfcc <DoPlay+0xde>
				}					
				clear_well(p);
				piecey[p] = 0;
    bfe0:	ed a5       	ldd	r30, Y+45	; 0x2d
    bfe2:	fe a5       	ldd	r31, Y+46	; 0x2e
    bfe4:	e8 55       	subi	r30, 0x58	; 88
    bfe6:	f1 4f       	sbci	r31, 0xF1	; 241
    bfe8:	10 82       	st	Z, r1
				halfstep[p] = 0;
    bfea:	ed a5       	ldd	r30, Y+45	; 0x2d
    bfec:	fe a5       	ldd	r31, Y+46	; 0x2e
    bfee:	ef 54       	subi	r30, 0x4F	; 79
    bff0:	f0 4f       	sbci	r31, 0xF0	; 240
    bff2:	10 82       	st	Z, r1
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    bff4:	ed a5       	ldd	r30, Y+45	; 0x2d
    bff6:	fe a5       	ldd	r31, Y+46	; 0x2e
    bff8:	e8 55       	subi	r30, 0x58	; 88
    bffa:	f0 4f       	sbci	r31, 0xF0	; 240
    bffc:	a0 81       	ld	r26, Z
    bffe:	a2 0f       	add	r26, r18
	well[off] = 0;//smaller than loop!
    c000:	ea 2f       	mov	r30, r26
    c002:	f0 e0       	ldi	r31, 0x00	; 0
    c004:	e3 55       	subi	r30, 0x53	; 83
    c006:	f1 4f       	sbci	r31, 0xF1	; 241
    c008:	10 82       	st	Z, r1
	off += 6;
    c00a:	aa 5f       	subi	r26, 0xFA	; 250
	well[off] = 0;
    c00c:	ea 2f       	mov	r30, r26
    c00e:	f0 e0       	ldi	r31, 0x00	; 0
    c010:	e3 55       	subi	r30, 0x53	; 83
    c012:	f1 4f       	sbci	r31, 0xF1	; 241
    c014:	10 82       	st	Z, r1
	off += 6;
	well[off] = 0;
    c016:	aa 5f       	subi	r26, 0xFA	; 250
    c018:	b0 e0       	ldi	r27, 0x00	; 0
    c01a:	a3 55       	subi	r26, 0x53	; 83
    c01c:	b1 4f       	sbci	r27, 0xF1	; 241
    c01e:	1c 92       	st	X, r1
    c020:	fe c3       	rjmp	.+2044   	; 0xc81e <DoPlay+0x930>
			}

/////////////////////////////////////////////////////////////////////////////////////
//LOSING/2 STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & (LOSING|LOSING2)){
    c022:	ca 01       	movw	r24, r20
    c024:	8c 70       	andi	r24, 0x0C	; 12
    c026:	90 70       	andi	r25, 0x00	; 0
    c028:	89 2b       	or	r24, r25
    c02a:	09 f4       	brne	.+2      	; 0xc02e <DoPlay+0x140>
    c02c:	c1 c0       	rjmp	.+386    	; 0xc1b0 <DoPlay+0x2c2>
	#ifdef DEBUG
	while(true){};
	#endif
				crashcomingup[p] = 0;
    c02e:	ed a5       	ldd	r30, Y+45	; 0x2d
    c030:	fe a5       	ldd	r31, Y+46	; 0x2e
    c032:	e7 58       	subi	r30, 0x87	; 135
    c034:	f0 4f       	sbci	r31, 0xF0	; 240
    c036:	10 82       	st	Z, r1
				crashcomingdown[p] = 0;
    c038:	ed a5       	ldd	r30, Y+45	; 0x2d
    c03a:	fe a5       	ldd	r31, Y+46	; 0x2e
    c03c:	ed 53       	subi	r30, 0x3D	; 61
    c03e:	f0 4f       	sbci	r31, 0xF0	; 240
    c040:	10 82       	st	Z, r1
				cpustate = 0;
    c042:	10 92 a7 0e 	sts	0x0EA7, r1
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    c046:	2d a5       	ldd	r18, Y+45	; 0x2d
    c048:	3e a5       	ldd	r19, Y+46	; 0x2e
    c04a:	80 e6       	ldi	r24, 0x60	; 96
    c04c:	90 e0       	ldi	r25, 0x00	; 0
    c04e:	28 9f       	mul	r18, r24
    c050:	b0 01       	movw	r22, r0
    c052:	29 9f       	mul	r18, r25
    c054:	70 0d       	add	r23, r0
    c056:	38 9f       	mul	r19, r24
    c058:	70 0d       	add	r23, r0
    c05a:	11 24       	eor	r1, r1
    c05c:	16 2f       	mov	r17, r22
    c05e:	f9 01       	movw	r30, r18
    c060:	e8 55       	subi	r30, 0x58	; 88
    c062:	f0 4f       	sbci	r31, 0xF0	; 240
    c064:	e0 81       	ld	r30, Z
    c066:	e6 0f       	add	r30, r22
    c068:	28 55       	subi	r18, 0x58	; 88
    c06a:	31 4f       	sbci	r19, 0xF1	; 241
    c06c:	d9 01       	movw	r26, r18
    c06e:	8c 91       	ld	r24, X
    c070:	b6 e0       	ldi	r27, 0x06	; 6
    c072:	8b 9f       	mul	r24, r27
    c074:	c0 01       	movw	r24, r0
    c076:	11 24       	eor	r1, r1
    c078:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    c07a:	ae 2f       	mov	r26, r30
    c07c:	b0 e0       	ldi	r27, 0x00	; 0
    c07e:	a3 55       	subi	r26, 0x53	; 83
    c080:	b1 4f       	sbci	r27, 0xF1	; 241
    c082:	1c 92       	st	X, r1
	off += 6;
    c084:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    c086:	ae 2f       	mov	r26, r30
    c088:	b0 e0       	ldi	r27, 0x00	; 0
    c08a:	a3 55       	subi	r26, 0x53	; 83
    c08c:	b1 4f       	sbci	r27, 0xF1	; 241
    c08e:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    c090:	ea 5f       	subi	r30, 0xFA	; 250
    c092:	f0 e0       	ldi	r31, 0x00	; 0
    c094:	e3 55       	subi	r30, 0x53	; 83
    c096:	f1 4f       	sbci	r31, 0xF1	; 241
    c098:	10 82       	st	Z, r1
				blank_piece(p);
				piecey[p] = 0;
    c09a:	f9 01       	movw	r30, r18
    c09c:	10 82       	st	Z, r1
				if(statetimer[p]){
    c09e:	ed a5       	ldd	r30, Y+45	; 0x2d
    c0a0:	fe a5       	ldd	r31, Y+46	; 0x2e
    c0a2:	e8 57       	subi	r30, 0x78	; 120
    c0a4:	f0 4f       	sbci	r31, 0xF0	; 240
    c0a6:	80 81       	ld	r24, Z
    c0a8:	88 23       	and	r24, r24
    c0aa:	11 f0       	breq	.+4      	; 0xc0b0 <DoPlay+0x1c2>
					statetimer[p]--;
    c0ac:	81 50       	subi	r24, 0x01	; 1
    c0ae:	e8 c1       	rjmp	.+976    	; 0xc480 <DoPlay+0x592>
    c0b0:	ed a5       	ldd	r30, Y+45	; 0x2d
    c0b2:	fe a5       	ldd	r31, Y+46	; 0x2e
    c0b4:	ec 54       	subi	r30, 0x4C	; 76
    c0b6:	f0 4f       	sbci	r31, 0xF0	; 240
					continue;
				}					
				//statetimer[p] = 0;
				
				if(state[p] & LOSING){
    c0b8:	42 ff       	sbrs	r20, 2
    c0ba:	60 c0       	rjmp	.+192    	; 0xc17c <DoPlay+0x28e>
					if(crashheight[p] < 13){//still going up
    c0bc:	80 81       	ld	r24, Z
    c0be:	8d 30       	cpi	r24, 0x0D	; 13
    c0c0:	20 f4       	brcc	.+8      	; 0xc0ca <DoPlay+0x1dc>
						CrashBarUp(1,p);
    c0c2:	81 e0       	ldi	r24, 0x01	; 1
    c0c4:	6b 2d       	mov	r22, r11
    c0c6:	24 dd       	rcall	.-1464   	; 0xbb10 <CrashBarUp>
    c0c8:	55 c7       	rjmp	.+3754   	; 0xcf74 <DoPlay+0x1086>
						continue;	
					}else{//done going up, wait until other player is up then go down
						state[!p] = LOSING;
    c0ca:	a0 e0       	ldi	r26, 0x00	; 0
    c0cc:	b0 e0       	ldi	r27, 0x00	; 0
    c0ce:	bb 20       	and	r11, r11
    c0d0:	11 f4       	brne	.+4      	; 0xc0d6 <DoPlay+0x1e8>
    c0d2:	a1 e0       	ldi	r26, 0x01	; 1
    c0d4:	b0 e0       	ldi	r27, 0x00	; 0
    c0d6:	fd 01       	movw	r30, r26
    c0d8:	e6 55       	subi	r30, 0x56	; 86
    c0da:	f1 4f       	sbci	r31, 0xF1	; 241
    c0dc:	84 e0       	ldi	r24, 0x04	; 4
    c0de:	80 83       	st	Z, r24
    c0e0:	fb 01       	movw	r30, r22
    c0e2:	e3 55       	subi	r30, 0x53	; 83
    c0e4:	f1 4f       	sbci	r31, 0xF1	; 241
    c0e6:	80 e0       	ldi	r24, 0x00	; 0



void ClearTopRows(uint8_t p){
	for(uint8_t i=0;i<3*6;i++)
		well[(p*WELLSIZE)+i] = 0;
    c0e8:	11 92       	st	Z+, r1
}



void ClearTopRows(uint8_t p){
	for(uint8_t i=0;i<3*6;i++)
    c0ea:	8f 5f       	subi	r24, 0xFF	; 255
    c0ec:	82 31       	cpi	r24, 0x12	; 18
    c0ee:	e1 f7       	brne	.-8      	; 0xc0e8 <DoPlay+0x1fa>
						//SetLosing(p);
						//winner = !p;
						ClearTopRows(p);//make sure no jewels are dragged back down
						if(crashheight[!p] > 12){//other player is there
    c0f0:	ac 54       	subi	r26, 0x4C	; 76
    c0f2:	b0 4f       	sbci	r27, 0xF0	; 240
    c0f4:	8c 91       	ld	r24, X
    c0f6:	8d 30       	cpi	r24, 0x0D	; 13
    c0f8:	08 f4       	brcc	.+2      	; 0xc0fc <DoPlay+0x20e>
    c0fa:	3c c7       	rjmp	.+3704   	; 0xcf74 <DoPlay+0x1086>
							magicjewelsonscreen = 0;
    c0fc:	10 92 6f 0e 	sts	0x0E6F, r1
							if(!p){//only do once
    c100:	bb 20       	and	r11, r11
    c102:	09 f0       	breq	.+2      	; 0xc106 <DoPlay+0x218>
    c104:	37 c7       	rjmp	.+3694   	; 0xcf74 <DoPlay+0x1086>
								state[0] = LOSING2;
    c106:	88 e0       	ldi	r24, 0x08	; 8
    c108:	80 93 aa 0e 	sts	0x0EAA, r24
								state[1] = LOSING2;
    c10c:	80 93 ab 0e 	sts	0x0EAB, r24
								statetimer[0] = 2;
    c110:	82 e0       	ldi	r24, 0x02	; 2
    c112:	80 93 88 0f 	sts	0x0F88, r24
								statetimer[1] = 2;
    c116:	80 93 89 0f 	sts	0x0F89, r24
								rtl_RamifyFontEx(0,gameovercharmap,charlist,compfont,0,0x37,true);
    c11a:	80 e0       	ldi	r24, 0x00	; 0
    c11c:	90 e0       	ldi	r25, 0x00	; 0
    c11e:	6b e6       	ldi	r22, 0x6B	; 107
    c120:	7b e8       	ldi	r23, 0x8B	; 139
    c122:	42 e1       	ldi	r20, 0x12	; 18
    c124:	5c e1       	ldi	r21, 0x1C	; 28
    c126:	20 e5       	ldi	r18, 0x50	; 80
    c128:	3a e1       	ldi	r19, 0x1A	; 26
    c12a:	00 e0       	ldi	r16, 0x00	; 0
    c12c:	e7 e3       	ldi	r30, 0x37	; 55
    c12e:	ee 2e       	mov	r14, r30
    c130:	cc 24       	eor	r12, r12
    c132:	c3 94       	inc	r12
    c134:	0e 94 06 54 	call	0xa80c	; 0xa80c <rtl_RamifyFontEx>
								WaitVsync(2-vsyncs);//TODO MAKE SURE EVERYTHING ALWAYS LINES ON ON 2 TICK INTERVALS(CPU PLAYER GOES HALF DROP SPEED SOMETIMES?)
    c138:	20 91 78 0e 	lds	r18, 0x0E78
    c13c:	82 e0       	ldi	r24, 0x02	; 2
    c13e:	90 e0       	ldi	r25, 0x00	; 0
    c140:	82 1b       	sub	r24, r18
    c142:	91 09       	sbc	r25, r1
    c144:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
								if(game_mode == 0){//adjust cpu skill
    c148:	80 91 a4 0e 	lds	r24, 0x0EA4
    c14c:	88 23       	and	r24, r24
    c14e:	99 f4       	brne	.+38     	; 0xc176 <DoPlay+0x288>
									if(winner == 1 && cpuskill > 1)
    c150:	80 91 82 0f 	lds	r24, 0x0F82
    c154:	81 30       	cpi	r24, 0x01	; 1
    c156:	31 f4       	brne	.+12     	; 0xc164 <DoPlay+0x276>
    c158:	80 91 77 0e 	lds	r24, 0x0E77
    c15c:	82 30       	cpi	r24, 0x02	; 2
    c15e:	58 f0       	brcs	.+22     	; 0xc176 <DoPlay+0x288>
										cpuskill--;
    c160:	81 50       	subi	r24, 0x01	; 1
    c162:	07 c0       	rjmp	.+14     	; 0xc172 <DoPlay+0x284>
									else if(winner == 0 && cpuskill < 9)
    c164:	88 23       	and	r24, r24
    c166:	39 f4       	brne	.+14     	; 0xc176 <DoPlay+0x288>
    c168:	80 91 77 0e 	lds	r24, 0x0E77
    c16c:	89 30       	cpi	r24, 0x09	; 9
    c16e:	18 f4       	brcc	.+6      	; 0xc176 <DoPlay+0x288>
										cpuskill++;
    c170:	8f 5f       	subi	r24, 0xFF	; 255
    c172:	80 93 77 0e 	sts	0x0E77, r24
    c176:	bb 24       	eor	r11, r11
    c178:	ba 94       	dec	r11
    c17a:	fc c6       	rjmp	.+3576   	; 0xcf74 <DoPlay+0x1086>
					continue;							
				}	
				
									
				//else LOSING2
				if(crashheight[p])
    c17c:	80 81       	ld	r24, Z
    c17e:	88 23       	and	r24, r24
    c180:	29 f0       	breq	.+10     	; 0xc18c <DoPlay+0x29e>
					CrashBarDown(1,p,1);
    c182:	81 e0       	ldi	r24, 0x01	; 1
    c184:	6b 2d       	mov	r22, r11
    c186:	41 e0       	ldi	r20, 0x01	; 1
    c188:	64 dc       	rcall	.-1848   	; 0xba52 <CrashBarDown>
    c18a:	f4 c6       	rjmp	.+3560   	; 0xcf74 <DoPlay+0x1086>
				else{
					state[p] = GAMEOVER;
    c18c:	80 e1       	ldi	r24, 0x10	; 16
    c18e:	d6 01       	movw	r26, r12
    c190:	8c 93       	st	X, r24
    c192:	80 e0       	ldi	r24, 0x00	; 0
    c194:	90 e0       	ldi	r25, 0x00	; 0
	}
	return true;
}

void GeneratePreview(uint8_t p);
void clear_well(uint8_t p){uint8_t off = p*WELLSIZE;for(uint8_t i=0;i<WELLSIZE;i++){well[off++]=0;}}//for(uint8_t y=0;y<16;y++){for(uint8_t x=0;x<6;x++){set_well(x,y,p,0);}}}
    c196:	e1 2f       	mov	r30, r17
    c198:	e8 0f       	add	r30, r24
    c19a:	f0 e0       	ldi	r31, 0x00	; 0
    c19c:	e3 55       	subi	r30, 0x53	; 83
    c19e:	f1 4f       	sbci	r31, 0xF1	; 241
    c1a0:	10 82       	st	Z, r1
    c1a2:	01 96       	adiw	r24, 0x01	; 1
    c1a4:	80 36       	cpi	r24, 0x60	; 96
    c1a6:	91 05       	cpc	r25, r1
    c1a8:	b1 f7       	brne	.-20     	; 0xc196 <DoPlay+0x2a8>
					clear_well(p);
					globalflashcounter = 0;
    c1aa:	10 92 01 01 	sts	0x0101, r1
    c1ae:	e2 c6       	rjmp	.+3524   	; 0xcf74 <DoPlay+0x1086>
			}				
								
/////////////////////////////////////////////////////////////////////////////////////
//APPLY GRAVITY STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & APPLYGRAVITY){
    c1b0:	45 ff       	sbrs	r20, 5
    c1b2:	d8 c0       	rjmp	.+432    	; 0xc364 <DoPlay+0x476>
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    c1b4:	ed a5       	ldd	r30, Y+45	; 0x2d
    c1b6:	fe a5       	ldd	r31, Y+46	; 0x2e
    c1b8:	20 e6       	ldi	r18, 0x60	; 96
    c1ba:	30 e0       	ldi	r19, 0x00	; 0
    c1bc:	e2 9f       	mul	r30, r18
    c1be:	60 01       	movw	r12, r0
    c1c0:	e3 9f       	mul	r30, r19
    c1c2:	d0 0c       	add	r13, r0
    c1c4:	f2 9f       	mul	r31, r18
    c1c6:	d0 0c       	add	r13, r0
    c1c8:	11 24       	eor	r1, r1
    c1ca:	1c 2d       	mov	r17, r12
    c1cc:	e8 55       	subi	r30, 0x58	; 88
    c1ce:	f0 4f       	sbci	r31, 0xF0	; 240
    c1d0:	e0 81       	ld	r30, Z
    c1d2:	ec 0d       	add	r30, r12
    c1d4:	ad a5       	ldd	r26, Y+45	; 0x2d
    c1d6:	be a5       	ldd	r27, Y+46	; 0x2e
    c1d8:	a8 55       	subi	r26, 0x58	; 88
    c1da:	b1 4f       	sbci	r27, 0xF1	; 241
    c1dc:	8c 91       	ld	r24, X
    c1de:	36 e0       	ldi	r19, 0x06	; 6
    c1e0:	83 9f       	mul	r24, r19
    c1e2:	c0 01       	movw	r24, r0
    c1e4:	11 24       	eor	r1, r1
    c1e6:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    c1e8:	ae 2f       	mov	r26, r30
    c1ea:	b0 e0       	ldi	r27, 0x00	; 0
    c1ec:	a3 55       	subi	r26, 0x53	; 83
    c1ee:	b1 4f       	sbci	r27, 0xF1	; 241
    c1f0:	1c 92       	st	X, r1
	off += 6;
    c1f2:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    c1f4:	ae 2f       	mov	r26, r30
    c1f6:	b0 e0       	ldi	r27, 0x00	; 0
    c1f8:	a3 55       	subi	r26, 0x53	; 83
    c1fa:	b1 4f       	sbci	r27, 0xF1	; 241
    c1fc:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    c1fe:	ea 5f       	subi	r30, 0xFA	; 250
    c200:	f0 e0       	ldi	r31, 0x00	; 0
    c202:	e3 55       	subi	r30, 0x53	; 83
    c204:	f1 4f       	sbci	r31, 0xF1	; 241
    c206:	10 82       	st	Z, r1
    c208:	4c 2d       	mov	r20, r12
    c20a:	46 50       	subi	r20, 0x06	; 6
    c20c:	50 e0       	ldi	r21, 0x00	; 0

	for(uint8_t x=0;x<6;x++){
		moved = false;
		off = (x+(p*WELLSIZE))-6;
		//off -= 6;
		for(uint8_t y=0;y<15-crashheight[p];y++){
    c20e:	84 eb       	ldi	r24, 0xB4	; 180
    c210:	e8 2e       	mov	r14, r24
    c212:	8f e0       	ldi	r24, 0x0F	; 15
    c214:	f8 2e       	mov	r15, r24
    c216:	6d a5       	ldd	r22, Y+45	; 0x2d
    c218:	7e a5       	ldd	r23, Y+46	; 0x2e
    c21a:	e6 0e       	add	r14, r22
    c21c:	f7 1e       	adc	r15, r23
    c21e:	74 2f       	mov	r23, r20
    c220:	60 e0       	ldi	r22, 0x00	; 0
    c222:	1a c0       	rjmp	.+52     	; 0xc258 <DoPlay+0x36a>
			//off = ((y*6)+x)+(p*WELLSIZE);
			off += 6;
    c224:	7a 5f       	subi	r23, 0xFA	; 250
			if(!(t = well[off]))//get_well(x,y,p);//if(!t)	
    c226:	27 2f       	mov	r18, r23
    c228:	30 e0       	ldi	r19, 0x00	; 0
    c22a:	f9 01       	movw	r30, r18
    c22c:	e3 55       	subi	r30, 0x53	; 83
    c22e:	f1 4f       	sbci	r31, 0xF1	; 241
    c230:	90 81       	ld	r25, Z
    c232:	99 23       	and	r25, r25
    c234:	81 f0       	breq	.+32     	; 0xc256 <DoPlay+0x368>
				continue;
			//t2 = well[off+6];
			if(well[off+6]){//get_well(x,y+1,p);//check below
    c236:	d9 01       	movw	r26, r18
    c238:	ad 54       	subi	r26, 0x4D	; 77
    c23a:	b1 4f       	sbci	r27, 0xF1	; 241
    c23c:	8c 91       	ld	r24, X
    c23e:	88 23       	and	r24, r24
    c240:	51 f4       	brne	.+20     	; 0xc256 <DoPlay+0x368>
			}				

			//we are here so we have a block to drop
			moved = true;
			hasmoved = true;
			if(t & HALFSTEP){
    c242:	96 ff       	sbrs	r25, 6
    c244:	05 c0       	rjmp	.+10     	; 0xc250 <DoPlay+0x362>
				t ^= HALFSTEP;
				well[off+6] = t;//set_well(x,y+1,p,t);
    c246:	80 e4       	ldi	r24, 0x40	; 64
    c248:	98 27       	eor	r25, r24
    c24a:	9c 93       	st	X, r25
				well[off+0] = 0;//set_well(x,y,p,0);
    c24c:	10 82       	st	Z, r1
    c24e:	02 c0       	rjmp	.+4      	; 0xc254 <DoPlay+0x366>
			}
			else{
				t |= HALFSTEP;
				well[off] = t;//set_well(x,y,p,t);
    c250:	90 64       	ori	r25, 0x40	; 64
    c252:	90 83       	st	Z, r25
    c254:	51 e0       	ldi	r21, 0x01	; 1

	for(uint8_t x=0;x<6;x++){
		moved = false;
		off = (x+(p*WELLSIZE))-6;
		//off -= 6;
		for(uint8_t y=0;y<15-crashheight[p];y++){
    c256:	6f 5f       	subi	r22, 0xFF	; 255
    c258:	26 2f       	mov	r18, r22
    c25a:	30 e0       	ldi	r19, 0x00	; 0
    c25c:	d7 01       	movw	r26, r14
    c25e:	8c 91       	ld	r24, X
    c260:	ef e0       	ldi	r30, 0x0F	; 15
    c262:	f0 e0       	ldi	r31, 0x00	; 0
    c264:	e8 1b       	sub	r30, r24
    c266:	f1 09       	sbc	r31, r1
    c268:	2e 17       	cp	r18, r30
    c26a:	3f 07       	cpc	r19, r31
    c26c:	dc f2       	brlt	.-74     	; 0xc224 <DoPlay+0x336>
    c26e:	4f 5f       	subi	r20, 0xFF	; 255
		//if(moved)
		//	x--;//do this column again
	}
	*/

	for(uint8_t x=0;x<6;x++){
    c270:	41 17       	cp	r20, r17
    c272:	a9 f6       	brne	.-86     	; 0xc21e <DoPlay+0x330>
				blank_piece(p);//TODO IS THIS NECESSARY???
				if(!ApplyGravity(p)){
    c274:	55 23       	and	r21, r21
    c276:	a9 f4       	brne	.+42     	; 0xc2a2 <DoPlay+0x3b4>
					if(CheckScore(p)){
    c278:	8b 2d       	mov	r24, r11
    c27a:	f1 dc       	rcall	.-1566   	; 0xbc5e <CheckScore>
    c27c:	ad a5       	ldd	r26, Y+45	; 0x2d
    c27e:	be a5       	ldd	r27, Y+46	; 0x2e
    c280:	a6 55       	subi	r26, 0x56	; 86
    c282:	b1 4f       	sbci	r27, 0xF1	; 241
    c284:	89 2b       	or	r24, r25
    c286:	21 f1       	breq	.+72     	; 0xc2d0 <DoPlay+0x3e2>
						state[p] = SCORING;
    c288:	f1 e0       	ldi	r31, 0x01	; 1
    c28a:	fc 93       	st	X, r31
						statetimer[p] = SCOREFLASHTIME;
    c28c:	ed a5       	ldd	r30, Y+45	; 0x2d
    c28e:	fe a5       	ldd	r31, Y+46	; 0x2e
    c290:	e8 57       	subi	r30, 0x78	; 120
    c292:	f0 4f       	sbci	r31, 0xF0	; 240
    c294:	21 e0       	ldi	r18, 0x01	; 1
    c296:	20 83       	st	Z, r18
						stateframe[p] = 0;
    c298:	ed a5       	ldd	r30, Y+45	; 0x2d
    c29a:	fe a5       	ldd	r31, Y+46	; 0x2e
    c29c:	e3 56       	subi	r30, 0x63	; 99
    c29e:	f1 4f       	sbci	r31, 0xF1	; 241
    c2a0:	10 82       	st	Z, r1
    c2a2:	ed a4       	ldd	r14, Y+45	; 0x2d
    c2a4:	fe a4       	ldd	r15, Y+46	; 0x2e
    c2a6:	ee 0c       	add	r14, r14
    c2a8:	ff 1c       	adc	r15, r15
    c2aa:	4d a5       	ldd	r20, Y+45	; 0x2d
    c2ac:	5e a5       	ldd	r21, Y+46	; 0x2e
    c2ae:	e4 0e       	add	r14, r20
    c2b0:	f5 1e       	adc	r15, r21
    c2b2:	6c e7       	ldi	r22, 0x7C	; 124
    c2b4:	7f e0       	ldi	r23, 0x0F	; 15
    c2b6:	e6 0e       	add	r14, r22
    c2b8:	f7 1e       	adc	r15, r23
    c2ba:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    c2bc:	ba 01       	movw	r22, r20
    c2be:	68 55       	subi	r22, 0x58	; 88
    c2c0:	70 4f       	sbci	r23, 0xF0	; 240
    c2c2:	48 55       	subi	r20, 0x58	; 88
    c2c4:	51 4f       	sbci	r21, 0xF1	; 241
    c2c6:	0d a5       	ldd	r16, Y+45	; 0x2d
    c2c8:	1e a5       	ldd	r17, Y+46	; 0x2e
    c2ca:	0f 54       	subi	r16, 0x4F	; 79
    c2cc:	10 4f       	sbci	r17, 0xF0	; 240
    c2ce:	28 c0       	rjmp	.+80     	; 0xc320 <DoPlay+0x432>
					}else{
						wasmagicjewel[p] = 0;//enable scoring again, in case was a magic jewel
    c2d0:	ed a5       	ldd	r30, Y+45	; 0x2d
    c2d2:	fe a5       	ldd	r31, Y+46	; 0x2e
    c2d4:	e4 55       	subi	r30, 0x54	; 84
    c2d6:	f0 4f       	sbci	r31, 0xF0	; 240
    c2d8:	10 82       	st	Z, r1
						state[p] = DROPPING;
    c2da:	1c 92       	st	X, r1
						if(chain[p] > 3)
    c2dc:	ed a5       	ldd	r30, Y+45	; 0x2d
    c2de:	fe a5       	ldd	r31, Y+46	; 0x2e
    c2e0:	ea 55       	subi	r30, 0x5A	; 90
    c2e2:	f0 4f       	sbci	r31, 0xF0	; 240
    c2e4:	80 81       	ld	r24, Z
    c2e6:	84 30       	cpi	r24, 0x04	; 4
    c2e8:	38 f0       	brcs	.+14     	; 0xc2f8 <DoPlay+0x40a>
							cursetype[p] |= FLASHINGJEWELCOMING;//SummonMagicJewel(p);
    c2ea:	ed a5       	ldd	r30, Y+45	; 0x2d
    c2ec:	fe a5       	ldd	r31, Y+46	; 0x2e
    c2ee:	ec 56       	subi	r30, 0x6C	; 108
    c2f0:	f1 4f       	sbci	r31, 0xF1	; 241
    c2f2:	80 81       	ld	r24, Z
    c2f4:	80 68       	ori	r24, 0x80	; 128
    c2f6:	80 83       	st	Z, r24
						chain[p] = 0;
    c2f8:	ed a5       	ldd	r30, Y+45	; 0x2d
    c2fa:	fe a5       	ldd	r31, Y+46	; 0x2e
    c2fc:	ea 55       	subi	r30, 0x5A	; 90
    c2fe:	f0 4f       	sbci	r31, 0xF0	; 240
    c300:	10 82       	st	Z, r1
						droptimer[p] = DROPTIMER;
    c302:	ed a5       	ldd	r30, Y+45	; 0x2d
    c304:	fe a5       	ldd	r31, Y+46	; 0x2e
    c306:	ea 57       	subi	r30, 0x7A	; 122
    c308:	f1 4f       	sbci	r31, 0xF1	; 241
    c30a:	80 e1       	ldi	r24, 0x10	; 16
    c30c:	80 83       	st	Z, r24
	
						if(CheckLoss(p)){//see if there are any jewels in the invisible top 3 rows, if so lose
    c30e:	8b 2d       	mov	r24, r11
    c310:	0e 94 53 57 	call	0xaea6	; 0xaea6 <CheckLoss>
    c314:	88 23       	and	r24, r24
    c316:	29 f2       	breq	.-118    	; 0xc2a2 <DoPlay+0x3b4>
							SetLosing(p);
    c318:	8b 2d       	mov	r24, r11
    c31a:	49 db       	rcall	.-2414   	; 0xb9ae <SetLosing>
    c31c:	0c 94 4b 73 	jmp	0xe696	; 0xe696 <DoPlay+0x27a8>
    c320:	db 01       	movw	r26, r22
    c322:	2c 91       	ld	r18, X
    c324:	fa 01       	movw	r30, r20
    c326:	80 81       	ld	r24, Z
    c328:	83 0f       	add	r24, r19
    c32a:	90 e0       	ldi	r25, 0x00	; 0
    c32c:	fc 01       	movw	r30, r24
    c32e:	ee 0f       	add	r30, r30
    c330:	ff 1f       	adc	r31, r31
    c332:	e8 0f       	add	r30, r24
    c334:	f9 1f       	adc	r31, r25
    c336:	ee 0f       	add	r30, r30
    c338:	ff 1f       	adc	r31, r31
    c33a:	e3 55       	subi	r30, 0x53	; 83
    c33c:	f1 4f       	sbci	r31, 0xF1	; 241
    c33e:	ec 0d       	add	r30, r12
    c340:	fd 1d       	adc	r31, r13
    c342:	e2 0f       	add	r30, r18
    c344:	f1 1d       	adc	r31, r1
    c346:	d8 01       	movw	r26, r16
    c348:	8c 91       	ld	r24, X
    c34a:	82 95       	swap	r24
    c34c:	88 0f       	add	r24, r24
    c34e:	88 0f       	add	r24, r24
    c350:	80 7c       	andi	r24, 0xC0	; 192
    c352:	d7 01       	movw	r26, r14
    c354:	9d 91       	ld	r25, X+
    c356:	7d 01       	movw	r14, r26
    c358:	89 2b       	or	r24, r25
    c35a:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    c35c:	3f 5f       	subi	r19, 0xFF	; 255
    c35e:	33 30       	cpi	r19, 0x03	; 3
    c360:	f9 f6       	brne	.-66     	; 0xc320 <DoPlay+0x432>
    c362:	08 c6       	rjmp	.+3088   	; 0xcf74 <DoPlay+0x1086>
			}

/////////////////////////////////////////////////////////////////////////////////////
//SCORING STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & SCORING){
    c364:	40 ff       	sbrs	r20, 0
    c366:	36 c0       	rjmp	.+108    	; 0xc3d4 <DoPlay+0x4e6>
				if(statetimer[p])
    c368:	78 e8       	ldi	r23, 0x88	; 136
    c36a:	e7 2e       	mov	r14, r23
    c36c:	7f e0       	ldi	r23, 0x0F	; 15
    c36e:	f7 2e       	mov	r15, r23
    c370:	ed a5       	ldd	r30, Y+45	; 0x2d
    c372:	fe a5       	ldd	r31, Y+46	; 0x2e
    c374:	ee 0e       	add	r14, r30
    c376:	ff 1e       	adc	r15, r31
    c378:	d7 01       	movw	r26, r14
    c37a:	8c 91       	ld	r24, X
    c37c:	88 23       	and	r24, r24
    c37e:	19 f0       	breq	.+6      	; 0xc386 <DoPlay+0x498>
					statetimer[p]--;
    c380:	81 50       	subi	r24, 0x01	; 1
    c382:	8c 93       	st	X, r24
    c384:	f7 c5       	rjmp	.+3054   	; 0xcf74 <DoPlay+0x1086>
				else{
					if(++stateframe[p] > SCOREFLASHITERATIONS*2){//done flashing, switch to exploding
    c386:	0d a5       	ldd	r16, Y+45	; 0x2d
    c388:	1e a5       	ldd	r17, Y+46	; 0x2e
    c38a:	03 56       	subi	r16, 0x63	; 99
    c38c:	11 4f       	sbci	r17, 0xF1	; 241
    c38e:	f8 01       	movw	r30, r16
    c390:	80 81       	ld	r24, Z
    c392:	8f 5f       	subi	r24, 0xFF	; 255
    c394:	80 83       	st	Z, r24
    c396:	89 30       	cpi	r24, 0x09	; 9
    c398:	c8 f0       	brcs	.+50     	; 0xc3cc <DoPlay+0x4de>
						TriggerPCM(SCOREWAVE,(chain[p]*2)+23,255);
    c39a:	ed a5       	ldd	r30, Y+45	; 0x2d
    c39c:	fe a5       	ldd	r31, Y+46	; 0x2e
    c39e:	ea 55       	subi	r30, 0x5A	; 90
    c3a0:	f0 4f       	sbci	r31, 0xF0	; 240
    c3a2:	60 81       	ld	r22, Z
    c3a4:	66 0f       	add	r22, r22
    c3a6:	69 5e       	subi	r22, 0xE9	; 233
    c3a8:	8c e2       	ldi	r24, 0x2C	; 44
    c3aa:	4f ef       	ldi	r20, 0xFF	; 255
    c3ac:	2b db       	rcall	.-2474   	; 0xba04 <TriggerPCM>
						state[p] = EXPLODING;
    c3ae:	82 e0       	ldi	r24, 0x02	; 2
    c3b0:	d6 01       	movw	r26, r12
    c3b2:	8c 93       	st	X, r24
						ramtilestate[p] |= NEEDEXPLOSIONRAMMED;//make sure ram tiles get updated for explosion graphics
    c3b4:	ed a5       	ldd	r30, Y+45	; 0x2d
    c3b6:	fe a5       	ldd	r31, Y+46	; 0x2e
    c3b8:	e8 53       	subi	r30, 0x38	; 56
    c3ba:	f0 4f       	sbci	r31, 0xF0	; 240
    c3bc:	80 81       	ld	r24, Z
    c3be:	82 60       	ori	r24, 0x02	; 2
    c3c0:	80 83       	st	Z, r24
						statetimer[p] = 0;
    c3c2:	f7 01       	movw	r30, r14
    c3c4:	10 82       	st	Z, r1
						stateframe[p] = 0;
    c3c6:	d8 01       	movw	r26, r16
    c3c8:	1c 92       	st	X, r1
    c3ca:	d4 c5       	rjmp	.+2984   	; 0xcf74 <DoPlay+0x1086>
					}else
						statetimer[p] = SCOREFLASHTIME;//still in scoring phase
    c3cc:	21 e0       	ldi	r18, 0x01	; 1
    c3ce:	f7 01       	movw	r30, r14
    c3d0:	20 83       	st	Z, r18
    c3d2:	d0 c5       	rjmp	.+2976   	; 0xcf74 <DoPlay+0x1086>


/////////////////////////////////////////////////////////////////////////////////////
//EXPLODING STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & EXPLODING){
    c3d4:	41 ff       	sbrs	r20, 1
    c3d6:	56 c0       	rjmp	.+172    	; 0xc484 <DoPlay+0x596>
				if(!statetimer[p]){
    c3d8:	ed a5       	ldd	r30, Y+45	; 0x2d
    c3da:	fe a5       	ldd	r31, Y+46	; 0x2e
    c3dc:	e8 57       	subi	r30, 0x78	; 120
    c3de:	f0 4f       	sbci	r31, 0xF0	; 240
    c3e0:	80 81       	ld	r24, Z
    c3e2:	88 23       	and	r24, r24
    c3e4:	09 f0       	breq	.+2      	; 0xc3e8 <DoPlay+0x4fa>
    c3e6:	44 c0       	rjmp	.+136    	; 0xc470 <DoPlay+0x582>
					if(++stateframe[p] > 6){//done exploding
    c3e8:	ed a5       	ldd	r30, Y+45	; 0x2d
    c3ea:	fe a5       	ldd	r31, Y+46	; 0x2e
    c3ec:	e3 56       	subi	r30, 0x63	; 99
    c3ee:	f1 4f       	sbci	r31, 0xF1	; 241
    c3f0:	80 81       	ld	r24, Z
    c3f2:	8f 5f       	subi	r24, 0xFF	; 255
    c3f4:	80 83       	st	Z, r24
    c3f6:	87 30       	cpi	r24, 0x07	; 7
    c3f8:	a0 f1       	brcs	.+104    	; 0xc462 <DoPlay+0x574>
		cpustate = CPUFIRSTTICK;//let cpu know next move has begun
//	downletup[p] = 0;
}

inline void ClearScoredJewels(uint8_t p){
	for(uint8_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++){
    c3fa:	3d a5       	ldd	r19, Y+45	; 0x2d
    c3fc:	40 e6       	ldi	r20, 0x60	; 96
    c3fe:	34 9f       	mul	r19, r20
    c400:	20 2d       	mov	r18, r0
    c402:	11 24       	eor	r1, r1
    c404:	6d a5       	ldd	r22, Y+45	; 0x2d
    c406:	7e a5       	ldd	r23, Y+46	; 0x2e
    c408:	6f 5f       	subi	r22, 0xFF	; 255
    c40a:	7f 4f       	sbci	r23, 0xFF	; 255
    c40c:	80 e6       	ldi	r24, 0x60	; 96
    c40e:	90 e0       	ldi	r25, 0x00	; 0
    c410:	68 9f       	mul	r22, r24
    c412:	a0 01       	movw	r20, r0
    c414:	69 9f       	mul	r22, r25
    c416:	50 0d       	add	r21, r0
    c418:	78 9f       	mul	r23, r24
    c41a:	50 0d       	add	r21, r0
    c41c:	11 24       	eor	r1, r1
    c41e:	61 50       	subi	r22, 0x01	; 1
    c420:	70 40       	sbci	r23, 0x00	; 0
    c422:	7e a7       	std	Y+46, r23	; 0x2e
    c424:	6d a7       	std	Y+45, r22	; 0x2d
		if(well[i] & SCORINGJEWEL){
			well[i] = 0;
			wellfullness[p]--;
    c426:	fb 01       	movw	r30, r22
    c428:	ee 0f       	add	r30, r30
    c42a:	ff 1f       	adc	r31, r31
    c42c:	eb 56       	subi	r30, 0x6B	; 107
    c42e:	f0 4f       	sbci	r31, 0xF0	; 240
    c430:	0d c0       	rjmp	.+26     	; 0xc44c <DoPlay+0x55e>
//	downletup[p] = 0;
}

inline void ClearScoredJewels(uint8_t p){
	for(uint8_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++){
		if(well[i] & SCORINGJEWEL){
    c432:	dc 01       	movw	r26, r24
    c434:	a3 55       	subi	r26, 0x53	; 83
    c436:	b1 4f       	sbci	r27, 0xF1	; 241
    c438:	8c 91       	ld	r24, X
    c43a:	87 ff       	sbrs	r24, 7
    c43c:	06 c0       	rjmp	.+12     	; 0xc44a <DoPlay+0x55c>
			well[i] = 0;
    c43e:	1c 92       	st	X, r1
			wellfullness[p]--;
    c440:	80 81       	ld	r24, Z
    c442:	91 81       	ldd	r25, Z+1	; 0x01
    c444:	01 97       	sbiw	r24, 0x01	; 1
    c446:	91 83       	std	Z+1, r25	; 0x01
    c448:	80 83       	st	Z, r24
		cpustate = CPUFIRSTTICK;//let cpu know next move has begun
//	downletup[p] = 0;
}

inline void ClearScoredJewels(uint8_t p){
	for(uint8_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++){
    c44a:	2f 5f       	subi	r18, 0xFF	; 255
    c44c:	82 2f       	mov	r24, r18
    c44e:	90 e0       	ldi	r25, 0x00	; 0
    c450:	84 17       	cp	r24, r20
    c452:	95 07       	cpc	r25, r21
    c454:	74 f3       	brlt	.-36     	; 0xc432 <DoPlay+0x544>
						ClearScoredJewels(p);
						state[p] = APPLYGRAVITY;
    c456:	ed a5       	ldd	r30, Y+45	; 0x2d
    c458:	fe a5       	ldd	r31, Y+46	; 0x2e
    c45a:	e6 55       	subi	r30, 0x56	; 86
    c45c:	f1 4f       	sbci	r31, 0xF1	; 241
    c45e:	80 e2       	ldi	r24, 0x20	; 32
    c460:	08 c0       	rjmp	.+16     	; 0xc472 <DoPlay+0x584>
					}else{
						statetimer[p] = 1;//TODO FIX ME
    c462:	ed a5       	ldd	r30, Y+45	; 0x2d
    c464:	fe a5       	ldd	r31, Y+46	; 0x2e
    c466:	e8 57       	subi	r30, 0x78	; 120
    c468:	f0 4f       	sbci	r31, 0xF0	; 240
    c46a:	91 e0       	ldi	r25, 0x01	; 1
    c46c:	90 83       	st	Z, r25
    c46e:	02 c0       	rjmp	.+4      	; 0xc474 <DoPlay+0x586>
					}				
				}else
					statetimer[p]--;
    c470:	81 50       	subi	r24, 0x01	; 1
    c472:	80 83       	st	Z, r24
				
				ramtilestate[p] |= NEEDEXPLOSIONRAMMED;//make sure explosion ram tiles get updated TODO ONLY WHEN UPDATED
    c474:	ed a5       	ldd	r30, Y+45	; 0x2d
    c476:	fe a5       	ldd	r31, Y+46	; 0x2e
    c478:	e8 53       	subi	r30, 0x38	; 56
    c47a:	f0 4f       	sbci	r31, 0xF0	; 240
    c47c:	80 81       	ld	r24, Z
    c47e:	82 60       	ori	r24, 0x02	; 2
    c480:	80 83       	st	Z, r24
    c482:	78 c5       	rjmp	.+2800   	; 0xcf74 <DoPlay+0x1086>
/////////////////////////////////////////////////////////////////////////////////////
//DROPPING STATE(FALLS THROUGH)
/////////////////////////////////////////////////////////////////////////////////////
			if(true){//state[p] & DROPPING){
				//blank_piece(p);//blank piece for piece movement code process from ProcessInputState and MovePieceDown()
				if(!droptimer[p]){
    c484:	ed a5       	ldd	r30, Y+45	; 0x2d
    c486:	fe a5       	ldd	r31, Y+46	; 0x2e
    c488:	ea 57       	subi	r30, 0x7A	; 122
    c48a:	f1 4f       	sbci	r31, 0xF1	; 241
    c48c:	80 81       	ld	r24, Z
    c48e:	88 23       	and	r24, r24
    c490:	09 f0       	breq	.+2      	; 0xc494 <DoPlay+0x5a6>
    c492:	aa c1       	rjmp	.+852    	; 0xc7e8 <DoPlay+0x8fa>
					droptimer[p] = DROPTIMER;
    c494:	80 e1       	ldi	r24, 0x10	; 16
    c496:	80 83       	st	Z, r24
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    c498:	ad a5       	ldd	r26, Y+45	; 0x2d
    c49a:	be a5       	ldd	r27, Y+46	; 0x2e
    c49c:	e0 e6       	ldi	r30, 0x60	; 96
    c49e:	f0 e0       	ldi	r31, 0x00	; 0
    c4a0:	ae 9f       	mul	r26, r30
    c4a2:	80 01       	movw	r16, r0
    c4a4:	af 9f       	mul	r26, r31
    c4a6:	10 0d       	add	r17, r0
    c4a8:	be 9f       	mul	r27, r30
    c4aa:	10 0d       	add	r17, r0
    c4ac:	11 24       	eor	r1, r1
    c4ae:	fd 01       	movw	r30, r26
    c4b0:	e8 55       	subi	r30, 0x58	; 88
    c4b2:	f0 4f       	sbci	r31, 0xF0	; 240
    c4b4:	e0 81       	ld	r30, Z
    c4b6:	e0 0f       	add	r30, r16
    c4b8:	a8 55       	subi	r26, 0x58	; 88
    c4ba:	b1 4f       	sbci	r27, 0xF1	; 241
    c4bc:	3c 91       	ld	r19, X
    c4be:	f6 e0       	ldi	r31, 0x06	; 6
    c4c0:	3f 9f       	mul	r19, r31
    c4c2:	c0 01       	movw	r24, r0
    c4c4:	11 24       	eor	r1, r1
    c4c6:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    c4c8:	ae 2f       	mov	r26, r30
    c4ca:	b0 e0       	ldi	r27, 0x00	; 0
    c4cc:	a3 55       	subi	r26, 0x53	; 83
    c4ce:	b1 4f       	sbci	r27, 0xF1	; 241
    c4d0:	1c 92       	st	X, r1
	off += 6;
    c4d2:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    c4d4:	ae 2f       	mov	r26, r30
    c4d6:	b0 e0       	ldi	r27, 0x00	; 0
    c4d8:	a3 55       	subi	r26, 0x53	; 83
    c4da:	b1 4f       	sbci	r27, 0xF1	; 241
    c4dc:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    c4de:	ea 5f       	subi	r30, 0xFA	; 250
    c4e0:	f0 e0       	ldi	r31, 0x00	; 0
    c4e2:	e3 55       	subi	r30, 0x53	; 83
    c4e4:	f1 4f       	sbci	r31, 0xF1	; 241
    c4e6:	10 82       	st	Z, r1
inline void MovePieceDown(uint8_t p){
#ifdef DEBUG
if(!p)return;
#endif
	blank_piece(p);
	if((piecey[p]<13) && (!get_well(piecex[p],piecey[p]+3,p))){//can move down
    c4e8:	3d 30       	cpi	r19, 0x0D	; 13
    c4ea:	08 f0       	brcs	.+2      	; 0xc4ee <DoPlay+0x600>
    c4ec:	65 c0       	rjmp	.+202    	; 0xc5b8 <DoPlay+0x6ca>
    c4ee:	ed a5       	ldd	r30, Y+45	; 0x2d
    c4f0:	fe a5       	ldd	r31, Y+46	; 0x2e
    c4f2:	e8 55       	subi	r30, 0x58	; 88
    c4f4:	f0 4f       	sbci	r31, 0xF0	; 240
    c4f6:	20 81       	ld	r18, Z
    c4f8:	3d 5f       	subi	r19, 0xFD	; 253
    c4fa:	83 2f       	mov	r24, r19
    c4fc:	90 e0       	ldi	r25, 0x00	; 0
    c4fe:	fc 01       	movw	r30, r24
    c500:	ee 0f       	add	r30, r30
    c502:	ff 1f       	adc	r31, r31
    c504:	e8 0f       	add	r30, r24
    c506:	f9 1f       	adc	r31, r25
    c508:	ee 0f       	add	r30, r30
    c50a:	ff 1f       	adc	r31, r31
    c50c:	e3 55       	subi	r30, 0x53	; 83
    c50e:	f1 4f       	sbci	r31, 0xF1	; 241
    c510:	e0 0f       	add	r30, r16
    c512:	f1 1f       	adc	r31, r17
    c514:	e2 0f       	add	r30, r18
    c516:	f1 1d       	adc	r31, r1
    c518:	80 81       	ld	r24, Z
    c51a:	88 23       	and	r24, r24
    c51c:	09 f0       	breq	.+2      	; 0xc520 <DoPlay+0x632>
    c51e:	4c c0       	rjmp	.+152    	; 0xc5b8 <DoPlay+0x6ca>
		if(halfstep[p]){
    c520:	ed a5       	ldd	r30, Y+45	; 0x2d
    c522:	fe a5       	ldd	r31, Y+46	; 0x2e
    c524:	ef 54       	subi	r30, 0x4F	; 79
    c526:	f0 4f       	sbci	r31, 0xF0	; 240
    c528:	80 81       	ld	r24, Z
    c52a:	88 23       	and	r24, r24
    c52c:	49 f0       	breq	.+18     	; 0xc540 <DoPlay+0x652>
			halfstep[p] = false;
    c52e:	10 82       	st	Z, r1
			piecey[p]++;
    c530:	ed a5       	ldd	r30, Y+45	; 0x2d
    c532:	fe a5       	ldd	r31, Y+46	; 0x2e
    c534:	e8 55       	subi	r30, 0x58	; 88
    c536:	f1 4f       	sbci	r31, 0xF1	; 241
    c538:	80 81       	ld	r24, Z
    c53a:	8f 5f       	subi	r24, 0xFF	; 255
    c53c:	80 83       	st	Z, r24
    c53e:	02 c0       	rjmp	.+4      	; 0xc544 <DoPlay+0x656>
		}
		else
			halfstep[p] = true;
    c540:	21 e0       	ldi	r18, 0x01	; 1
    c542:	20 83       	st	Z, r18
    c544:	cd a4       	ldd	r12, Y+45	; 0x2d
    c546:	de a4       	ldd	r13, Y+46	; 0x2e
    c548:	cc 0c       	add	r12, r12
    c54a:	dd 1c       	adc	r13, r13
    c54c:	4d a5       	ldd	r20, Y+45	; 0x2d
    c54e:	5e a5       	ldd	r21, Y+46	; 0x2e
    c550:	c4 0e       	add	r12, r20
    c552:	d5 1e       	adc	r13, r21
    c554:	6c e7       	ldi	r22, 0x7C	; 124
    c556:	7f e0       	ldi	r23, 0x0F	; 15
    c558:	c6 0e       	add	r12, r22
    c55a:	d7 1e       	adc	r13, r23
    c55c:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    c55e:	88 ea       	ldi	r24, 0xA8	; 168
    c560:	e8 2e       	mov	r14, r24
    c562:	8f e0       	ldi	r24, 0x0F	; 15
    c564:	f8 2e       	mov	r15, r24
    c566:	e4 0e       	add	r14, r20
    c568:	f5 1e       	adc	r15, r21
    c56a:	ba 01       	movw	r22, r20
    c56c:	68 55       	subi	r22, 0x58	; 88
    c56e:	71 4f       	sbci	r23, 0xF1	; 241
    c570:	4f 54       	subi	r20, 0x4F	; 79
    c572:	50 4f       	sbci	r21, 0xF0	; 240
    c574:	d7 01       	movw	r26, r14
    c576:	2c 91       	ld	r18, X
    c578:	fb 01       	movw	r30, r22
    c57a:	80 81       	ld	r24, Z
    c57c:	83 0f       	add	r24, r19
    c57e:	90 e0       	ldi	r25, 0x00	; 0
    c580:	fc 01       	movw	r30, r24
    c582:	ee 0f       	add	r30, r30
    c584:	ff 1f       	adc	r31, r31
    c586:	e8 0f       	add	r30, r24
    c588:	f9 1f       	adc	r31, r25
    c58a:	ee 0f       	add	r30, r30
    c58c:	ff 1f       	adc	r31, r31
    c58e:	e3 55       	subi	r30, 0x53	; 83
    c590:	f1 4f       	sbci	r31, 0xF1	; 241
    c592:	e0 0f       	add	r30, r16
    c594:	f1 1f       	adc	r31, r17
    c596:	e2 0f       	add	r30, r18
    c598:	f1 1d       	adc	r31, r1
    c59a:	da 01       	movw	r26, r20
    c59c:	8c 91       	ld	r24, X
    c59e:	82 95       	swap	r24
    c5a0:	88 0f       	add	r24, r24
    c5a2:	88 0f       	add	r24, r24
    c5a4:	80 7c       	andi	r24, 0xC0	; 192
    c5a6:	d6 01       	movw	r26, r12
    c5a8:	9d 91       	ld	r25, X+
    c5aa:	6d 01       	movw	r12, r26
    c5ac:	89 2b       	or	r24, r25
    c5ae:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    c5b0:	3f 5f       	subi	r19, 0xFF	; 255
    c5b2:	33 30       	cpi	r19, 0x03	; 3
    c5b4:	f9 f6       	brne	.-66     	; 0xc574 <DoPlay+0x686>
    c5b6:	1a c1       	rjmp	.+564    	; 0xc7ec <DoPlay+0x8fe>
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
    c5b8:	4d a5       	ldd	r20, Y+45	; 0x2d
    c5ba:	5e a5       	ldd	r21, Y+46	; 0x2e
    c5bc:	44 0f       	add	r20, r20
    c5be:	55 1f       	adc	r21, r21
    c5c0:	ed a5       	ldd	r30, Y+45	; 0x2d
    c5c2:	fe a5       	ldd	r31, Y+46	; 0x2e
    c5c4:	4e 0f       	add	r20, r30
    c5c6:	5f 1f       	adc	r21, r31
    c5c8:	9c e7       	ldi	r25, 0x7C	; 124
    c5ca:	89 2e       	mov	r8, r25
    c5cc:	9f e0       	ldi	r25, 0x0F	; 15
    c5ce:	99 2e       	mov	r9, r25
    c5d0:	84 0e       	add	r8, r20
    c5d2:	95 1e       	adc	r9, r21
    c5d4:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    c5d6:	88 ea       	ldi	r24, 0xA8	; 168
    c5d8:	c8 2e       	mov	r12, r24
    c5da:	8f e0       	ldi	r24, 0x0F	; 15
    c5dc:	d8 2e       	mov	r13, r24
    c5de:	ce 0e       	add	r12, r30
    c5e0:	df 1e       	adc	r13, r31
    c5e2:	b8 ea       	ldi	r27, 0xA8	; 168
    c5e4:	eb 2e       	mov	r14, r27
    c5e6:	be e0       	ldi	r27, 0x0E	; 14
    c5e8:	fb 2e       	mov	r15, r27
    c5ea:	ee 0e       	add	r14, r30
    c5ec:	ff 1e       	adc	r15, r31
    c5ee:	bf 01       	movw	r22, r30
    c5f0:	6f 54       	subi	r22, 0x4F	; 79
    c5f2:	70 4f       	sbci	r23, 0xF0	; 240
    c5f4:	d6 01       	movw	r26, r12
    c5f6:	2c 91       	ld	r18, X
    c5f8:	f7 01       	movw	r30, r14
    c5fa:	80 81       	ld	r24, Z
    c5fc:	83 0f       	add	r24, r19
    c5fe:	90 e0       	ldi	r25, 0x00	; 0
    c600:	fc 01       	movw	r30, r24
    c602:	ee 0f       	add	r30, r30
    c604:	ff 1f       	adc	r31, r31
    c606:	e8 0f       	add	r30, r24
    c608:	f9 1f       	adc	r31, r25
    c60a:	ee 0f       	add	r30, r30
    c60c:	ff 1f       	adc	r31, r31
    c60e:	e3 55       	subi	r30, 0x53	; 83
    c610:	f1 4f       	sbci	r31, 0xF1	; 241
    c612:	e0 0f       	add	r30, r16
    c614:	f1 1f       	adc	r31, r17
    c616:	e2 0f       	add	r30, r18
    c618:	f1 1d       	adc	r31, r1
    c61a:	db 01       	movw	r26, r22
    c61c:	8c 91       	ld	r24, X
    c61e:	82 95       	swap	r24
    c620:	88 0f       	add	r24, r24
    c622:	88 0f       	add	r24, r24
    c624:	80 7c       	andi	r24, 0xC0	; 192
    c626:	d4 01       	movw	r26, r8
    c628:	9d 91       	ld	r25, X+
    c62a:	4d 01       	movw	r8, r26
    c62c:	89 2b       	or	r24, r25
    c62e:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    c630:	3f 5f       	subi	r19, 0xFF	; 255
    c632:	33 30       	cpi	r19, 0x03	; 3
    c634:	f9 f6       	brne	.-66     	; 0xc5f4 <DoPlay+0x706>
	add_piece(p);
	return;
	}
	//else move down failed
	add_piece(p);
	wellfullness[p] += 3;
    c636:	ed a5       	ldd	r30, Y+45	; 0x2d
    c638:	fe a5       	ldd	r31, Y+46	; 0x2e
    c63a:	ee 0f       	add	r30, r30
    c63c:	ff 1f       	adc	r31, r31
    c63e:	eb 56       	subi	r30, 0x6B	; 107
    c640:	f0 4f       	sbci	r31, 0xF0	; 240
    c642:	80 81       	ld	r24, Z
    c644:	91 81       	ldd	r25, Z+1	; 0x01
    c646:	03 96       	adiw	r24, 0x03	; 3
    c648:	91 83       	std	Z+1, r25	; 0x01
    c64a:	80 83       	st	Z, r24

	if(piece[(p*3)+2] > 6){//is it a magic jewel? TODO - NO POINTS CAN BE SCORED FROM MAGIC JEWEL EVEN THE CHAINS RESULTING FROM IT!!!!!!!!!
    c64c:	fa 01       	movw	r30, r20
    c64e:	e4 58       	subi	r30, 0x84	; 132
    c650:	f0 4f       	sbci	r31, 0xF0	; 240
    c652:	42 81       	ldd	r20, Z+2	; 0x02
    c654:	47 30       	cpi	r20, 0x07	; 7
    c656:	08 f4       	brcc	.+2      	; 0xc65a <DoPlay+0x76c>
    c658:	81 c0       	rjmp	.+258    	; 0xc75c <DoPlay+0x86e>
    c65a:	20 e0       	ldi	r18, 0x00	; 0


inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
    c65c:	6d a5       	ldd	r22, Y+45	; 0x2d
    c65e:	7e a5       	ldd	r23, Y+46	; 0x2e
    c660:	68 55       	subi	r22, 0x58	; 88
    c662:	70 4f       	sbci	r23, 0xF0	; 240
    c664:	ad a5       	ldd	r26, Y+45	; 0x2d
    c666:	be a5       	ldd	r27, Y+46	; 0x2e
    c668:	a8 55       	subi	r26, 0x58	; 88
    c66a:	b1 4f       	sbci	r27, 0xF1	; 241
    c66c:	fb 01       	movw	r30, r22
    c66e:	80 81       	ld	r24, Z
    c670:	e8 2e       	mov	r14, r24
    c672:	ff 24       	eor	r15, r15
    c674:	f7 01       	movw	r30, r14
    c676:	e0 0f       	add	r30, r16
    c678:	f1 1f       	adc	r31, r17
    c67a:	3c 91       	ld	r19, X
    c67c:	82 2f       	mov	r24, r18
    c67e:	83 0f       	add	r24, r19
    c680:	56 e0       	ldi	r21, 0x06	; 6
    c682:	85 9f       	mul	r24, r21
    c684:	c0 01       	movw	r24, r0
    c686:	11 24       	eor	r1, r1
    c688:	e8 0f       	add	r30, r24
    c68a:	f9 1f       	adc	r31, r25
    c68c:	e3 55       	subi	r30, 0x53	; 83
    c68e:	f1 4f       	sbci	r31, 0xF1	; 241
    c690:	80 81       	ld	r24, Z
    c692:	80 68       	ori	r24, 0x80	; 128
    c694:	80 83       	st	Z, r24
		uint8_t t = piece[(p*3)+2];

		for(uint8_t i=0;i<3;i++)
    c696:	2f 5f       	subi	r18, 0xFF	; 255
    c698:	23 30       	cpi	r18, 0x03	; 3
    c69a:	41 f7       	brne	.-48     	; 0xc66c <DoPlay+0x77e>
			set_scoring(piecex[p],piecey[p]+i,p);

		if(t == 7){//up arrow
    c69c:	47 30       	cpi	r20, 0x07	; 7
    c69e:	49 f4       	brne	.+18     	; 0xc6b2 <DoPlay+0x7c4>
		//Columns 3 the amount is 2 up or 2 down for arrows
			crashcomingup[!p] += 2;
    c6a0:	e0 e0       	ldi	r30, 0x00	; 0
    c6a2:	f0 e0       	ldi	r31, 0x00	; 0
    c6a4:	bb 20       	and	r11, r11
    c6a6:	11 f4       	brne	.+4      	; 0xc6ac <DoPlay+0x7be>
    c6a8:	e1 e0       	ldi	r30, 0x01	; 1
    c6aa:	f0 e0       	ldi	r31, 0x00	; 0
    c6ac:	e7 58       	subi	r30, 0x87	; 135
    c6ae:	f0 4f       	sbci	r31, 0xF0	; 240
    c6b0:	38 c0       	rjmp	.+112    	; 0xc722 <DoPlay+0x834>
		}
		else if(t == 8){//delete other jewels of same color
    c6b2:	48 30       	cpi	r20, 0x08	; 8
    c6b4:	11 f5       	brne	.+68     	; 0xc6fa <DoPlay+0x80c>
			chain[p] = 1;//make the sound right, no score from magic jewel
    c6b6:	ed a5       	ldd	r30, Y+45	; 0x2d
    c6b8:	fe a5       	ldd	r31, Y+46	; 0x2e
    c6ba:	ea 55       	subi	r30, 0x5A	; 90
    c6bc:	f0 4f       	sbci	r31, 0xF0	; 240
    c6be:	61 e0       	ldi	r22, 0x01	; 1
    c6c0:	60 83       	st	Z, r22
			wasmagicjewel[p] = 1;//make sure we dont score for this
    c6c2:	ed a5       	ldd	r30, Y+45	; 0x2d
    c6c4:	fe a5       	ldd	r31, Y+46	; 0x2e
    c6c6:	e4 55       	subi	r30, 0x54	; 84
    c6c8:	f0 4f       	sbci	r31, 0xF0	; 240
    c6ca:	60 83       	st	Z, r22
			if(piecey[p] < 13)//didn't hit floor
    c6cc:	3d 30       	cpi	r19, 0x0D	; 13
    c6ce:	60 f5       	brcc	.+88     	; 0xc728 <DoPlay+0x83a>
				SetScoringSimilar(p,get_well(piecex[p],piecey[p]+3,p));
    c6d0:	3d 5f       	subi	r19, 0xFD	; 253
    c6d2:	83 2f       	mov	r24, r19
    c6d4:	90 e0       	ldi	r25, 0x00	; 0
    c6d6:	fc 01       	movw	r30, r24
    c6d8:	ee 0f       	add	r30, r30
    c6da:	ff 1f       	adc	r31, r31
    c6dc:	e8 0f       	add	r30, r24
    c6de:	f9 1f       	adc	r31, r25
    c6e0:	ee 0f       	add	r30, r30
    c6e2:	ff 1f       	adc	r31, r31
    c6e4:	e3 55       	subi	r30, 0x53	; 83
    c6e6:	f1 4f       	sbci	r31, 0xF1	; 241
    c6e8:	e0 0f       	add	r30, r16
    c6ea:	f1 1f       	adc	r31, r17
    c6ec:	ee 0d       	add	r30, r14
    c6ee:	ff 1d       	adc	r31, r15
    c6f0:	8b 2d       	mov	r24, r11
    c6f2:	60 81       	ld	r22, Z
    c6f4:	0e 94 2e 57 	call	0xae5c	; 0xae5c <SetScoringSimilar>
    c6f8:	17 c0       	rjmp	.+46     	; 0xc728 <DoPlay+0x83a>
		}
		else{//down
			if(crashheight[p] == 1)
    c6fa:	ed a5       	ldd	r30, Y+45	; 0x2d
    c6fc:	fe a5       	ldd	r31, Y+46	; 0x2e
    c6fe:	ec 54       	subi	r30, 0x4C	; 76
    c700:	f0 4f       	sbci	r31, 0xF0	; 240
    c702:	e0 81       	ld	r30, Z
    c704:	e1 30       	cpi	r30, 0x01	; 1
    c706:	39 f4       	brne	.+14     	; 0xc716 <DoPlay+0x828>
				crashcomingdown[p]++;
    c708:	ed a5       	ldd	r30, Y+45	; 0x2d
    c70a:	fe a5       	ldd	r31, Y+46	; 0x2e
    c70c:	ed 53       	subi	r30, 0x3D	; 61
    c70e:	f0 4f       	sbci	r31, 0xF0	; 240
    c710:	80 81       	ld	r24, Z
    c712:	8f 5f       	subi	r24, 0xFF	; 255
    c714:	08 c0       	rjmp	.+16     	; 0xc726 <DoPlay+0x838>
			else if(crashheight[p])//>1
    c716:	ee 23       	and	r30, r30
    c718:	39 f0       	breq	.+14     	; 0xc728 <DoPlay+0x83a>
				crashcomingdown[p] += 2;
    c71a:	ed a5       	ldd	r30, Y+45	; 0x2d
    c71c:	fe a5       	ldd	r31, Y+46	; 0x2e
    c71e:	ed 53       	subi	r30, 0x3D	; 61
    c720:	f0 4f       	sbci	r31, 0xF0	; 240
    c722:	80 81       	ld	r24, Z
    c724:	8e 5f       	subi	r24, 0xFE	; 254
    c726:	80 83       	st	Z, r24
		}
		state[p] = SCORING;
    c728:	ed a5       	ldd	r30, Y+45	; 0x2d
    c72a:	fe a5       	ldd	r31, Y+46	; 0x2e
    c72c:	e6 55       	subi	r30, 0x56	; 86
    c72e:	f1 4f       	sbci	r31, 0xF1	; 241
    c730:	71 e0       	ldi	r23, 0x01	; 1
    c732:	70 83       	st	Z, r23
		statetimer[p] = SCOREFLASHTIME;
    c734:	ed a5       	ldd	r30, Y+45	; 0x2d
    c736:	fe a5       	ldd	r31, Y+46	; 0x2e
    c738:	e8 57       	subi	r30, 0x78	; 120
    c73a:	f0 4f       	sbci	r31, 0xF0	; 240
    c73c:	70 83       	st	Z, r23
		stateframe[p] = 0;
    c73e:	ed a5       	ldd	r30, Y+45	; 0x2d
    c740:	fe a5       	ldd	r31, Y+46	; 0x2e
    c742:	e3 56       	subi	r30, 0x63	; 99
    c744:	f1 4f       	sbci	r31, 0xF1	; 241
    c746:	10 82       	st	Z, r1
		TriggerPCM(DROPWAVE,255,222);
    c748:	8b e2       	ldi	r24, 0x2B	; 43
    c74a:	6f ef       	ldi	r22, 0xFF	; 255
    c74c:	4e ed       	ldi	r20, 0xDE	; 222
    c74e:	5a d9       	rcall	.-3404   	; 0xba04 <TriggerPCM>
		magicjewelsonscreen--;
    c750:	80 91 6f 0e 	lds	r24, 0x0E6F
    c754:	81 50       	subi	r24, 0x01	; 1
    c756:	80 93 6f 0e 	sts	0x0E6F, r24
    c75a:	25 c0       	rjmp	.+74     	; 0xc7a6 <DoPlay+0x8b8>
		goto MOVEPIECEDOWNBOTTOM;
		}
		//else not magic jewel


		TriggerPCM(DROPWAVE,255,222);
    c75c:	8b e2       	ldi	r24, 0x2B	; 43
    c75e:	6f ef       	ldi	r22, 0xFF	; 255
    c760:	4e ed       	ldi	r20, 0xDE	; 222
    c762:	50 d9       	rcall	.-3424   	; 0xba04 <TriggerPCM>
	//HACK HACK HACK THIS IS DONE IN 2 PLACES?????
	if(CheckScore(p)){
    c764:	8b 2d       	mov	r24, r11
    c766:	7b da       	rcall	.-2826   	; 0xbc5e <CheckScore>
    c768:	89 2b       	or	r24, r25
    c76a:	89 f0       	breq	.+34     	; 0xc78e <DoPlay+0x8a0>
		//chain[p]++;
		state[p] = SCORING;
    c76c:	ed a5       	ldd	r30, Y+45	; 0x2d
    c76e:	fe a5       	ldd	r31, Y+46	; 0x2e
    c770:	e6 55       	subi	r30, 0x56	; 86
    c772:	f1 4f       	sbci	r31, 0xF1	; 241
    c774:	81 e0       	ldi	r24, 0x01	; 1
    c776:	80 83       	st	Z, r24
		statetimer[p] = SCOREFLASHTIME;
    c778:	ed a5       	ldd	r30, Y+45	; 0x2d
    c77a:	fe a5       	ldd	r31, Y+46	; 0x2e
    c77c:	e8 57       	subi	r30, 0x78	; 120
    c77e:	f0 4f       	sbci	r31, 0xF0	; 240
    c780:	80 83       	st	Z, r24
		stateframe[p] = 0;
    c782:	ed a5       	ldd	r30, Y+45	; 0x2d
    c784:	fe a5       	ldd	r31, Y+46	; 0x2e
    c786:	e3 56       	subi	r30, 0x63	; 99
    c788:	f1 4f       	sbci	r31, 0xF1	; 241
    c78a:	10 82       	st	Z, r1
    c78c:	0c c0       	rjmp	.+24     	; 0xc7a6 <DoPlay+0x8b8>
	}
	else{
		chain[p] = 0;
    c78e:	ed a5       	ldd	r30, Y+45	; 0x2d
    c790:	fe a5       	ldd	r31, Y+46	; 0x2e
    c792:	ea 55       	subi	r30, 0x5A	; 90
    c794:	f0 4f       	sbci	r31, 0xF0	; 240
    c796:	10 82       	st	Z, r1
		
		if(CheckLoss(p)){//see if there are any jewels in the invisible top 3 rows, if so lose
    c798:	8b 2d       	mov	r24, r11
    c79a:	0e 94 53 57 	call	0xaea6	; 0xaea6 <CheckLoss>
    c79e:	88 23       	and	r24, r24
    c7a0:	11 f0       	breq	.+4      	; 0xc7a6 <DoPlay+0x8b8>
			SetLosing(p);
    c7a2:	8b 2d       	mov	r24, r11
    c7a4:	04 d9       	rcall	.-3576   	; 0xb9ae <SetLosing>
	//	else
		//	winner = 255;
	}
	
MOVEPIECEDOWNBOTTOM:
	if(cursetype[p] == CURSESWAPWELL)//SWAP JEWELS AROUND FOR CURSE(TODO MAGIC JEWEL GLITCHES)
    c7a6:	ed a5       	ldd	r30, Y+45	; 0x2d
    c7a8:	fe a5       	ldd	r31, Y+46	; 0x2e
    c7aa:	ec 56       	subi	r30, 0x6C	; 108
    c7ac:	f1 4f       	sbci	r31, 0xF1	; 241
    c7ae:	80 81       	ld	r24, Z
    c7b0:	81 30       	cpi	r24, 0x01	; 1
    c7b2:	b1 f4       	brne	.+44     	; 0xc7e0 <DoPlay+0x8f2>
if(well[i] == t)//shouldn't need to &0b00111111 since nothing is half step and doesnt matter if scoring?
well[i] |= SCORINGJEWEL;
}

inline void MirrorWell(uint8_t p){
	uint16_t welloff = p*WELLSIZE;
    c7b4:	f8 01       	movw	r30, r16
    c7b6:	e3 55       	subi	r30, 0x53	; 83
    c7b8:	f1 4f       	sbci	r31, 0xF1	; 241
	uint8_t t;
	for(uint8_t y=0;y<16;y++){
    c7ba:	98 01       	movw	r18, r16
    c7bc:	23 5f       	subi	r18, 0xF3	; 243
    c7be:	30 4f       	sbci	r19, 0xF0	; 240
		t = well[welloff+0];
    c7c0:	90 81       	ld	r25, Z
		well[welloff+0] = well[welloff+5];
    c7c2:	85 81       	ldd	r24, Z+5	; 0x05
    c7c4:	80 83       	st	Z, r24
		well[welloff+5] = t;
    c7c6:	95 83       	std	Z+5, r25	; 0x05

		t = well[welloff+1];
    c7c8:	91 81       	ldd	r25, Z+1	; 0x01
		well[welloff+1] = well[welloff+4];
    c7ca:	84 81       	ldd	r24, Z+4	; 0x04
    c7cc:	81 83       	std	Z+1, r24	; 0x01
		well[welloff+4] = t;
    c7ce:	94 83       	std	Z+4, r25	; 0x04
		
		t = well[welloff+2];
    c7d0:	92 81       	ldd	r25, Z+2	; 0x02
		well[welloff+2] = well[welloff+3];
    c7d2:	83 81       	ldd	r24, Z+3	; 0x03
    c7d4:	82 83       	std	Z+2, r24	; 0x02
		well[welloff+3] = t;
    c7d6:	93 83       	std	Z+3, r25	; 0x03
    c7d8:	36 96       	adiw	r30, 0x06	; 6
}

inline void MirrorWell(uint8_t p){
	uint16_t welloff = p*WELLSIZE;
	uint8_t t;
	for(uint8_t y=0;y<16;y++){
    c7da:	e2 17       	cp	r30, r18
    c7dc:	f3 07       	cpc	r31, r19
    c7de:	81 f7       	brne	.-32     	; 0xc7c0 <DoPlay+0x8d2>
	}
	
MOVEPIECEDOWNBOTTOM:
	if(cursetype[p] == CURSESWAPWELL)//SWAP JEWELS AROUND FOR CURSE(TODO MAGIC JEWEL GLITCHES)
		MirrorWell(p);
	GeneratePreview(p);//set the next piece in motion
    c7e0:	8b 2d       	mov	r24, r11
    c7e2:	0e 94 1a 58 	call	0xb034	; 0xb034 <GeneratePreview>
    c7e6:	02 c0       	rjmp	.+4      	; 0xc7ec <DoPlay+0x8fe>
					//blank_piece(p);
					MovePieceDown(p);//todo it is possible to LOSE by having a piece down and moving sideways. it ends up looking like the piece didnt land. MIGHT HAVE FIXED NOW SEE INPUTSTATE:
					//add_piece(p);
				}else
					droptimer[p]--;
    c7e8:	81 50       	subi	r24, 0x01	; 1
    c7ea:	80 83       	st	Z, r24
				if(cursetime[p]){
    c7ec:	ed a5       	ldd	r30, Y+45	; 0x2d
    c7ee:	fe a5       	ldd	r31, Y+46	; 0x2e
    c7f0:	ef 55       	subi	r30, 0x5F	; 95
    c7f2:	f1 4f       	sbci	r31, 0xF1	; 241
    c7f4:	80 81       	ld	r24, Z
    c7f6:	88 23       	and	r24, r24
    c7f8:	91 f0       	breq	.+36     	; 0xc81e <DoPlay+0x930>
					if(!(--cursetime[p])){
    c7fa:	81 50       	subi	r24, 0x01	; 1
    c7fc:	80 83       	st	Z, r24
    c7fe:	88 23       	and	r24, r24
    c800:	71 f4       	brne	.+28     	; 0xc81e <DoPlay+0x930>
						cursetype[p] = cursetype[p]&128;//keep FLASHINGJEWELCOMING bit
    c802:	ed a5       	ldd	r30, Y+45	; 0x2d
    c804:	fe a5       	ldd	r31, Y+46	; 0x2e
    c806:	ec 56       	subi	r30, 0x6C	; 108
    c808:	f1 4f       	sbci	r31, 0xF1	; 241
    c80a:	80 81       	ld	r24, Z
    c80c:	80 78       	andi	r24, 0x80	; 128
    c80e:	80 83       	st	Z, r24
						ramtilestate[p] |= NEEDGRIDRAMMED;//make sure the grid is back to normal
    c810:	ed a5       	ldd	r30, Y+45	; 0x2d
    c812:	fe a5       	ldd	r31, Y+46	; 0x2e
    c814:	e8 53       	subi	r30, 0x38	; 56
    c816:	f0 4f       	sbci	r31, 0xF0	; 240
    c818:	80 81       	ld	r24, Z
    c81a:	84 60       	ori	r24, 0x04	; 4
    c81c:	80 83       	st	Z, r24

/////////////////////////////////////////////////////////////////////////////////////
//END OF STATE CODE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/////////////////////////////////////////////////////////////////////////////////////
PROCESSINPUT:
			if(!(state[p] & LOSING)){//don't let piece move sideways the tick after LOSING was set
    c81e:	4d a5       	ldd	r20, Y+45	; 0x2d
    c820:	5e a5       	ldd	r21, Y+46	; 0x2e
    c822:	46 55       	subi	r20, 0x56	; 86
    c824:	51 4f       	sbci	r21, 0xF1	; 241
    c826:	da 01       	movw	r26, r20
    c828:	2c 91       	ld	r18, X
    c82a:	22 fd       	sbrc	r18, 2
    c82c:	15 c2       	rjmp	.+1066   	; 0xcc58 <DoPlay+0xd6a>
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    c82e:	ed a5       	ldd	r30, Y+45	; 0x2d
    c830:	fe a5       	ldd	r31, Y+46	; 0x2e
    c832:	60 e6       	ldi	r22, 0x60	; 96
    c834:	70 e0       	ldi	r23, 0x00	; 0
    c836:	e6 9f       	mul	r30, r22
    c838:	60 01       	movw	r12, r0
    c83a:	e7 9f       	mul	r30, r23
    c83c:	d0 0c       	add	r13, r0
    c83e:	f6 9f       	mul	r31, r22
    c840:	d0 0c       	add	r13, r0
    c842:	11 24       	eor	r1, r1
    c844:	e8 55       	subi	r30, 0x58	; 88
    c846:	f0 4f       	sbci	r31, 0xF0	; 240
    c848:	e0 81       	ld	r30, Z
    c84a:	ec 0d       	add	r30, r12
    c84c:	ad a5       	ldd	r26, Y+45	; 0x2d
    c84e:	be a5       	ldd	r27, Y+46	; 0x2e
    c850:	a8 55       	subi	r26, 0x58	; 88
    c852:	b1 4f       	sbci	r27, 0xF1	; 241
    c854:	8c 91       	ld	r24, X
    c856:	76 e0       	ldi	r23, 0x06	; 6
    c858:	87 9f       	mul	r24, r23
    c85a:	c0 01       	movw	r24, r0
    c85c:	11 24       	eor	r1, r1
    c85e:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    c860:	ae 2f       	mov	r26, r30
    c862:	b0 e0       	ldi	r27, 0x00	; 0
    c864:	a3 55       	subi	r26, 0x53	; 83
    c866:	b1 4f       	sbci	r27, 0xF1	; 241
    c868:	1c 92       	st	X, r1
	off += 6;
    c86a:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    c86c:	ae 2f       	mov	r26, r30
    c86e:	b0 e0       	ldi	r27, 0x00	; 0
    c870:	a3 55       	subi	r26, 0x53	; 83
    c872:	b1 4f       	sbci	r27, 0xF1	; 241
    c874:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    c876:	ea 5f       	subi	r30, 0xFA	; 250
    c878:	f0 e0       	ldi	r31, 0x00	; 0
    c87a:	e3 55       	subi	r30, 0x53	; 83
    c87c:	f1 4f       	sbci	r31, 0xF1	; 241
    c87e:	10 82       	st	Z, r1

void DoPlay();
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
    c880:	ad a5       	ldd	r26, Y+45	; 0x2d
    c882:	be a5       	ldd	r27, Y+46	; 0x2e
    c884:	aa 0f       	add	r26, r26
    c886:	bb 1f       	adc	r27, r27
    c888:	fd 01       	movw	r30, r26
    c88a:	ee 57       	subi	r30, 0x7E	; 126
    c88c:	f1 4f       	sbci	r31, 0xF1	; 241
    c88e:	60 81       	ld	r22, Z
    c890:	63 fd       	sbrc	r22, 3
    c892:	02 c0       	rjmp	.+4      	; 0xc898 <DoPlay+0x9aa>
    c894:	0c 94 33 73 	jmp	0xe666	; 0xe666 <DoPlay+0x2778>
    c898:	a2 58       	subi	r26, 0x82	; 130
    c89a:	b1 4f       	sbci	r27, 0xF1	; 241
    c89c:	8c 91       	ld	r24, X
    c89e:	83 ff       	sbrs	r24, 3
    c8a0:	02 c0       	rjmp	.+4      	; 0xc8a6 <DoPlay+0x9b8>
    c8a2:	0c 94 33 73 	jmp	0xe666	; 0xe666 <DoPlay+0x2778>
if(state[0] & GETREADY)
	padstate[0] = BTN_START;
#endif
	
	if(StartDown(p)){
		if(game_state & GS_DEMO){
    c8a6:	80 91 a6 0e 	lds	r24, 0x0EA6
    c8aa:	81 ff       	sbrs	r24, 1
    c8ac:	19 c0       	rjmp	.+50     	; 0xc8e0 <DoPlay+0x9f2>
			game_state = GS_TITLE;
    c8ae:	10 92 a6 0e 	sts	0x0EA6, r1
    c8b2:	ed a4       	ldd	r14, Y+45	; 0x2d
    c8b4:	fe a4       	ldd	r15, Y+46	; 0x2e
    c8b6:	ee 0c       	add	r14, r14
    c8b8:	ff 1c       	adc	r15, r15
    c8ba:	8d a5       	ldd	r24, Y+45	; 0x2d
    c8bc:	9e a5       	ldd	r25, Y+46	; 0x2e
    c8be:	e8 0e       	add	r14, r24
    c8c0:	f9 1e       	adc	r15, r25
    c8c2:	ac e7       	ldi	r26, 0x7C	; 124
    c8c4:	bf e0       	ldi	r27, 0x0F	; 15
    c8c6:	ea 0e       	add	r14, r26
    c8c8:	fb 1e       	adc	r15, r27
    c8ca:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    c8cc:	8c 01       	movw	r16, r24
    c8ce:	08 55       	subi	r16, 0x58	; 88
    c8d0:	10 4f       	sbci	r17, 0xF0	; 240
    c8d2:	bc 01       	movw	r22, r24
    c8d4:	68 55       	subi	r22, 0x58	; 88
    c8d6:	71 4f       	sbci	r23, 0xF1	; 241
    c8d8:	ac 01       	movw	r20, r24
    c8da:	4f 54       	subi	r20, 0x4F	; 79
    c8dc:	50 4f       	sbci	r21, 0xF0	; 240
    c8de:	9b c1       	rjmp	.+822    	; 0xcc16 <DoPlay+0xd28>
			return;
		}
		
		if(state[p] & GETREADY || state[p] == GOAHEAD){
    c8e0:	27 ff       	sbrs	r18, 7
    c8e2:	0d c0       	rjmp	.+26     	; 0xc8fe <DoPlay+0xa10>
			state[p] = GOAHEAD;
    c8e4:	80 ec       	ldi	r24, 0xC0	; 192
    c8e6:	fa 01       	movw	r30, r20
    c8e8:	80 83       	st	Z, r24
			state[!p] = GOAHEAD;
    c8ea:	e0 e0       	ldi	r30, 0x00	; 0
    c8ec:	f0 e0       	ldi	r31, 0x00	; 0
    c8ee:	bb 20       	and	r11, r11
    c8f0:	11 f4       	brne	.+4      	; 0xc8f6 <DoPlay+0xa08>
    c8f2:	e1 e0       	ldi	r30, 0x01	; 1
    c8f4:	f0 e0       	ldi	r31, 0x00	; 0
    c8f6:	e6 55       	subi	r30, 0x56	; 86
    c8f8:	f1 4f       	sbci	r31, 0xF1	; 241
    c8fa:	80 ec       	ldi	r24, 0xC0	; 192
    c8fc:	52 c0       	rjmp	.+164    	; 0xc9a2 <DoPlay+0xab4>
			return;
		}

		if(state[p] & GAMEOVER){
    c8fe:	24 ff       	sbrs	r18, 4
    c900:	1a c0       	rjmp	.+52     	; 0xc936 <DoPlay+0xa48>
			game_state = INITIALSTATE;
    c902:	ff ef       	ldi	r31, 0xFF	; 255
    c904:	f0 93 a6 0e 	sts	0x0EA6, r31
			for(uint8_t i=0;i<MAX_PLAYERS;i++){
				state[i] = GETREADY;
    c908:	20 e8       	ldi	r18, 0x80	; 128
    c90a:	20 93 aa 0e 	sts	0x0EAA, r18
				//GeneratePreview(i);
				//level = !level;
				FadeOut(1,true);
    c90e:	81 e0       	ldi	r24, 0x01	; 1
    c910:	61 e0       	ldi	r22, 0x01	; 1
    c912:	0e 94 9a 53 	call	0xa734	; 0xa734 <FadeOut>
				FadeIn(2,false);
    c916:	82 e0       	ldi	r24, 0x02	; 2
    c918:	60 e0       	ldi	r22, 0x00	; 0
    c91a:	0e 94 82 53 	call	0xa704	; 0xa704 <FadeIn>
		}

		if(state[p] & GAMEOVER){
			game_state = INITIALSTATE;
			for(uint8_t i=0;i<MAX_PLAYERS;i++){
				state[i] = GETREADY;
    c91e:	30 e8       	ldi	r19, 0x80	; 128
    c920:	30 93 ab 0e 	sts	0x0EAB, r19
				//GeneratePreview(i);
				//level = !level;
				FadeOut(1,true);
    c924:	81 e0       	ldi	r24, 0x01	; 1
    c926:	61 e0       	ldi	r22, 0x01	; 1
    c928:	0e 94 9a 53 	call	0xa734	; 0xa734 <FadeOut>
				FadeIn(2,false);
    c92c:	82 e0       	ldi	r24, 0x02	; 2
    c92e:	60 e0       	ldi	r22, 0x00	; 0
    c930:	0e 94 82 53 	call	0xa704	; 0xa704 <FadeIn>
    c934:	be cf       	rjmp	.-132    	; 0xc8b2 <DoPlay+0x9c4>
				//DoSong();
			}
			return;
		}

		if(state[p] & PAUSED){
    c936:	26 ff       	sbrs	r18, 6
    c938:	25 c0       	rjmp	.+74     	; 0xc984 <DoPlay+0xa96>
			if(cursorpos == 0){//BACK
    c93a:	80 91 85 0f 	lds	r24, 0x0F85
    c93e:	88 23       	and	r24, r24
    c940:	09 f0       	breq	.+2      	; 0xc944 <DoPlay+0xa56>
    c942:	b5 cf       	rjmp	.-150    	; 0xc8ae <DoPlay+0x9c0>
				state[p] ^= PAUSED;
    c944:	60 e4       	ldi	r22, 0x40	; 64
    c946:	26 27       	eor	r18, r22
    c948:	da 01       	movw	r26, r20
    c94a:	2c 93       	st	X, r18
				state[!p] |= PAUSED;
    c94c:	e0 e0       	ldi	r30, 0x00	; 0
    c94e:	f0 e0       	ldi	r31, 0x00	; 0
    c950:	bb 20       	and	r11, r11
    c952:	11 f4       	brne	.+4      	; 0xc958 <DoPlay+0xa6a>
    c954:	e1 e0       	ldi	r30, 0x01	; 1
    c956:	f0 e0       	ldi	r31, 0x00	; 0
    c958:	e6 55       	subi	r30, 0x56	; 86
    c95a:	f1 4f       	sbci	r31, 0xF1	; 241
    c95c:	80 81       	ld	r24, Z
				state[!p] ^= PAUSED;
    c95e:	80 64       	ori	r24, 0x40	; 64
    c960:	b0 e4       	ldi	r27, 0x40	; 64
    c962:	8b 27       	eor	r24, r27
    c964:	80 83       	st	Z, r24
			return;
		}

	//if(debug){
		//piece[(p*3)+0] = 7;piece[(p*3)+1]=8;piece[(p*3)+2]=9;//make magic jewel
		score[p] = 30;
    c966:	ed a5       	ldd	r30, Y+45	; 0x2d
    c968:	fe a5       	ldd	r31, Y+46	; 0x2e
    c96a:	ed 58       	subi	r30, 0x8D	; 141
    c96c:	f0 4f       	sbci	r31, 0xF0	; 240
    c96e:	2e e1       	ldi	r18, 0x1E	; 30
    c970:	20 83       	st	Z, r18
		cursetype[p] = FLASHINGJEWELCOMING;
    c972:	ed a5       	ldd	r30, Y+45	; 0x2d
    c974:	fe a5       	ldd	r31, Y+46	; 0x2e
    c976:	ec 56       	subi	r30, 0x6C	; 108
    c978:	f1 4f       	sbci	r31, 0xF1	; 241
    c97a:	30 e8       	ldi	r19, 0x80	; 128
    c97c:	30 83       	st	Z, r19
		SummonMagicJewel(p);
    c97e:	8b 2d       	mov	r24, r11
    c980:	4b d9       	rcall	.-3434   	; 0xbc18 <SummonMagicJewel>
    c982:	97 cf       	rjmp	.-210    	; 0xc8b2 <DoPlay+0x9c4>
				game_state = GS_TITLE;
				return;
			}
		}
		else{
			cursorpos = 0;
    c984:	10 92 85 0f 	sts	0x0F85, r1
			state[p] |= PAUSED;
    c988:	20 64       	ori	r18, 0x40	; 64
    c98a:	da 01       	movw	r26, r20
    c98c:	2c 93       	st	X, r18
			state[!p] |= PAUSED;
    c98e:	e0 e0       	ldi	r30, 0x00	; 0
    c990:	f0 e0       	ldi	r31, 0x00	; 0
    c992:	bb 20       	and	r11, r11
    c994:	11 f4       	brne	.+4      	; 0xc99a <DoPlay+0xaac>
    c996:	e1 e0       	ldi	r30, 0x01	; 1
    c998:	f0 e0       	ldi	r31, 0x00	; 0
    c99a:	e6 55       	subi	r30, 0x56	; 86
    c99c:	f1 4f       	sbci	r31, 0xF1	; 241
    c99e:	80 81       	ld	r24, Z
    c9a0:	80 64       	ori	r24, 0x40	; 64
    c9a2:	80 83       	st	Z, r24
    c9a4:	86 cf       	rjmp	.-244    	; 0xc8b2 <DoPlay+0x9c4>
	}

	if(state[p] & (GAMEOVER|GETREADY))
		return;
		
	if((state[p] & PAUSED)){
    c9a6:	96 ff       	sbrs	r25, 6
    c9a8:	1d c0       	rjmp	.+58     	; 0xc9e4 <DoPlay+0xaf6>
		if(!p && (UpDown(0) || DownDown(0)))
    c9aa:	bb 20       	and	r11, r11
    c9ac:	09 f0       	breq	.+2      	; 0xc9b0 <DoPlay+0xac2>
    c9ae:	81 cf       	rjmp	.-254    	; 0xc8b2 <DoPlay+0x9c4>
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
    c9b0:	90 91 82 0e 	lds	r25, 0x0E82
    c9b4:	94 fd       	sbrc	r25, 4
    c9b6:	02 c0       	rjmp	.+4      	; 0xc9bc <DoPlay+0xace>
    c9b8:	0c 94 3f 73 	jmp	0xe67e	; 0xe67e <DoPlay+0x2790>
    c9bc:	80 91 7e 0e 	lds	r24, 0x0E7E
    c9c0:	84 ff       	sbrs	r24, 4
    c9c2:	02 c0       	rjmp	.+4      	; 0xc9c8 <DoPlay+0xada>
    c9c4:	0c 94 3f 73 	jmp	0xe67e	; 0xe67e <DoPlay+0x2790>
    c9c8:	04 c0       	rjmp	.+8      	; 0xc9d2 <DoPlay+0xae4>
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
    c9ca:	80 91 7e 0e 	lds	r24, 0x0E7E
    c9ce:	85 fd       	sbrc	r24, 5
    c9d0:	70 cf       	rjmp	.-288    	; 0xc8b2 <DoPlay+0x9c4>
			cursorpos = !cursorpos;
    c9d2:	90 e0       	ldi	r25, 0x00	; 0
    c9d4:	80 91 85 0f 	lds	r24, 0x0F85
    c9d8:	88 23       	and	r24, r24
    c9da:	09 f4       	brne	.+2      	; 0xc9de <DoPlay+0xaf0>
    c9dc:	91 e0       	ldi	r25, 0x01	; 1
    c9de:	90 93 85 0f 	sts	0x0F85, r25
    c9e2:	67 cf       	rjmp	.-306    	; 0xc8b2 <DoPlay+0x9c4>
		return;
	}

	if(cursetype[p] != CURSENOROTATE && YDown(p)){
    c9e4:	ed a5       	ldd	r30, Y+45	; 0x2d
    c9e6:	fe a5       	ldd	r31, Y+46	; 0x2e
    c9e8:	ec 56       	subi	r30, 0x6C	; 108
    c9ea:	f1 4f       	sbci	r31, 0xF1	; 241
    c9ec:	80 81       	ld	r24, Z
    c9ee:	88 30       	cpi	r24, 0x08	; 8
    c9f0:	61 f1       	breq	.+88     	; 0xca4a <DoPlay+0xb5c>
bool RightHeld(uint8_t p){return (padstate[p] & BTN_RIGHT);}
bool DownHeld(uint8_t p){return (padstate[p] & BTN_DOWN);}
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
bool XDown(uint8_t p){return ((padstate[p] & BTN_X) && !(oldpadstate[p] & BTN_X));}
bool YDown(uint8_t p){return ((padstate[p] & BTN_Y) && !(oldpadstate[p] & BTN_Y));}
    c9f2:	61 ff       	sbrs	r22, 1
    c9f4:	2a c0       	rjmp	.+84     	; 0xca4a <DoPlay+0xb5c>
    c9f6:	2d a5       	ldd	r18, Y+45	; 0x2d
    c9f8:	3e a5       	ldd	r19, Y+46	; 0x2e
    c9fa:	22 0f       	add	r18, r18
    c9fc:	33 1f       	adc	r19, r19
    c9fe:	f9 01       	movw	r30, r18
    ca00:	e2 58       	subi	r30, 0x82	; 130
    ca02:	f1 4f       	sbci	r31, 0xF1	; 241
    ca04:	80 81       	ld	r24, Z
    ca06:	81 fd       	sbrc	r24, 1
    ca08:	20 c0       	rjmp	.+64     	; 0xca4a <DoPlay+0xb5c>
	piecex[p]++;
	return true;
}

inline void RotatePiece(uint8_t p){
	uint8_t t = piece[(p*3)];
    ca0a:	ed a5       	ldd	r30, Y+45	; 0x2d
    ca0c:	fe a5       	ldd	r31, Y+46	; 0x2e
    ca0e:	e2 0f       	add	r30, r18
    ca10:	f3 1f       	adc	r31, r19
    ca12:	af 01       	movw	r20, r30
    ca14:	44 58       	subi	r20, 0x84	; 132
    ca16:	50 4f       	sbci	r21, 0xF0	; 240
    ca18:	da 01       	movw	r26, r20
    ca1a:	9c 91       	ld	r25, X
	piece[(p*3)] = piece[(p*3)+2];
    ca1c:	9f 01       	movw	r18, r30
    ca1e:	22 58       	subi	r18, 0x82	; 130
    ca20:	30 4f       	sbci	r19, 0xF0	; 240
    ca22:	d9 01       	movw	r26, r18
    ca24:	8c 91       	ld	r24, X
    ca26:	da 01       	movw	r26, r20
    ca28:	8c 93       	st	X, r24
	piece[(p*3)+2] = piece[(p*3)+1];
    ca2a:	e3 58       	subi	r30, 0x83	; 131
    ca2c:	f0 4f       	sbci	r31, 0xF0	; 240
    ca2e:	80 81       	ld	r24, Z
    ca30:	d9 01       	movw	r26, r18
    ca32:	8c 93       	st	X, r24
	piece[(p*3)+1] = t; 
    ca34:	90 83       	st	Z, r25
	if(++piecerot[p] > 2)
    ca36:	ed a5       	ldd	r30, Y+45	; 0x2d
    ca38:	fe a5       	ldd	r31, Y+46	; 0x2e
    ca3a:	e0 56       	subi	r30, 0x60	; 96
    ca3c:	f0 4f       	sbci	r31, 0xF0	; 240
    ca3e:	80 81       	ld	r24, Z
    ca40:	8f 5f       	subi	r24, 0xFF	; 255
    ca42:	80 83       	st	Z, r24
    ca44:	83 30       	cpi	r24, 0x03	; 3
    ca46:	08 f0       	brcs	.+2      	; 0xca4a <DoPlay+0xb5c>
		piecerot[p] = 0;
    ca48:	10 82       	st	Z, r1
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
bool LeftHeld(uint8_t p){return (padstate[p] & BTN_LEFT);}
bool RightHeld(uint8_t p){return (padstate[p] & BTN_RIGHT);}
bool DownHeld(uint8_t p){return (padstate[p] & BTN_DOWN);}
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
    ca4a:	ad a5       	ldd	r26, Y+45	; 0x2d
    ca4c:	be a5       	ldd	r27, Y+46	; 0x2e
    ca4e:	aa 0f       	add	r26, r26
    ca50:	bb 1f       	adc	r27, r27
    ca52:	fd 01       	movw	r30, r26
    ca54:	ee 57       	subi	r30, 0x7E	; 126
    ca56:	f1 4f       	sbci	r31, 0xF1	; 241
    ca58:	80 81       	ld	r24, Z
    ca5a:	80 ff       	sbrs	r24, 0
    ca5c:	39 c0       	rjmp	.+114    	; 0xcad0 <DoPlay+0xbe2>
    ca5e:	a2 58       	subi	r26, 0x82	; 130
    ca60:	b1 4f       	sbci	r27, 0xF1	; 241
    ca62:	8c 91       	ld	r24, X
    ca64:	80 fd       	sbrc	r24, 0
    ca66:	34 c0       	rjmp	.+104    	; 0xcad0 <DoPlay+0xbe2>
		RotatePiece(p);
		//CrashBarUp(3,0);
	}

	if(BDown(p)){//RSDown(p) || LSDown(p)){
		Attack(!p);
    ca68:	40 e0       	ldi	r20, 0x00	; 0
    ca6a:	bb 20       	and	r11, r11
    ca6c:	09 f4       	brne	.+2      	; 0xca70 <DoPlay+0xb82>
    ca6e:	41 e0       	ldi	r20, 0x01	; 1
}

inline void Attack(uint8_t target){
	uint8_t p = !target;
	uint8_t s = score[p]/10;
    ca70:	20 e0       	ldi	r18, 0x00	; 0
    ca72:	30 e0       	ldi	r19, 0x00	; 0
    ca74:	44 23       	and	r20, r20
    ca76:	11 f4       	brne	.+4      	; 0xca7c <DoPlay+0xb8e>
    ca78:	21 e0       	ldi	r18, 0x01	; 1
    ca7a:	30 e0       	ldi	r19, 0x00	; 0
    ca7c:	f9 01       	movw	r30, r18
    ca7e:	ed 58       	subi	r30, 0x8D	; 141
    ca80:	f0 4f       	sbci	r31, 0xF0	; 240
    ca82:	80 81       	ld	r24, Z
    ca84:	6a e0       	ldi	r22, 0x0A	; 10
    ca86:	0e 94 b6 73 	call	0xe76c	; 0xe76c <__udivmodqi4>
    ca8a:	98 2f       	mov	r25, r24
	
	if(crashheight[p]){
    ca8c:	f9 01       	movw	r30, r18
    ca8e:	ec 54       	subi	r30, 0x4C	; 76
    ca90:	f0 4f       	sbci	r31, 0xF0	; 240
    ca92:	e0 81       	ld	r30, Z
    ca94:	ee 23       	and	r30, r30
    ca96:	59 f0       	breq	.+22     	; 0xcaae <DoPlay+0xbc0>
    ca98:	d9 01       	movw	r26, r18
    ca9a:	ad 53       	subi	r26, 0x3D	; 61
    ca9c:	b0 4f       	sbci	r27, 0xF0	; 240
		if(crashheight[p] >= s){
    ca9e:	e8 17       	cp	r30, r24
    caa0:	20 f0       	brcs	.+8      	; 0xcaaa <DoPlay+0xbbc>
			crashcomingdown[p] += s;
    caa2:	8c 91       	ld	r24, X
    caa4:	89 0f       	add	r24, r25
    caa6:	8c 93       	st	X, r24
    caa8:	0b c0       	rjmp	.+22     	; 0xcac0 <DoPlay+0xbd2>
			s = 0;
		}else{//crashheight is less
			crashcomingdown[p] = crashheight[p];
    caaa:	ec 93       	st	X, r30
			s -= crashheight[p];
    caac:	9e 1b       	sub	r25, r30
		}
	}
	if(s)
    caae:	99 23       	and	r25, r25
    cab0:	39 f0       	breq	.+14     	; 0xcac0 <DoPlay+0xbd2>
		crashcomingup[target] += s;
    cab2:	e4 2f       	mov	r30, r20
    cab4:	f0 e0       	ldi	r31, 0x00	; 0
    cab6:	e7 58       	subi	r30, 0x87	; 135
    cab8:	f0 4f       	sbci	r31, 0xF0	; 240
    caba:	80 81       	ld	r24, Z
    cabc:	89 0f       	add	r24, r25
    cabe:	80 83       	st	Z, r24
		
	score[p] = score[p]%10;
    cac0:	f9 01       	movw	r30, r18
    cac2:	ed 58       	subi	r30, 0x8D	; 141
    cac4:	f0 4f       	sbci	r31, 0xF0	; 240
    cac6:	80 81       	ld	r24, Z
    cac8:	6a e0       	ldi	r22, 0x0A	; 10
    caca:	0e 94 b6 73 	call	0xe76c	; 0xe76c <__udivmodqi4>
    cace:	90 83       	st	Z, r25
	}

	uint16_t oldp = padstate[p];
    cad0:	ad a5       	ldd	r26, Y+45	; 0x2d
    cad2:	be a5       	ldd	r27, Y+46	; 0x2e
    cad4:	aa 0f       	add	r26, r26
    cad6:	bb 1f       	adc	r27, r27
    cad8:	ae 57       	subi	r26, 0x7E	; 126
    cada:	b1 4f       	sbci	r27, 0xF1	; 241
    cadc:	ed 90       	ld	r14, X+
    cade:	fc 90       	ld	r15, X
    cae0:	11 97       	sbiw	r26, 0x01	; 1
	if(cursetype[p] == CURSESWAPCONTROLS){
    cae2:	ed a5       	ldd	r30, Y+45	; 0x2d
    cae4:	fe a5       	ldd	r31, Y+46	; 0x2e
    cae6:	ec 56       	subi	r30, 0x6C	; 108
    cae8:	f1 4f       	sbci	r31, 0xF1	; 241
    caea:	80 81       	ld	r24, Z
    caec:	82 30       	cpi	r24, 0x02	; 2
    caee:	89 f4       	brne	.+34     	; 0xcb12 <DoPlay+0xc24>
		if(padstate[p] & BTN_LEFT){
    caf0:	e6 fe       	sbrs	r14, 6
    caf2:	06 c0       	rjmp	.+12     	; 0xcb00 <DoPlay+0xc12>
			padstate[p] ^= BTN_LEFT;
    caf4:	80 e4       	ldi	r24, 0x40	; 64
    caf6:	90 e0       	ldi	r25, 0x00	; 0
    caf8:	8e 25       	eor	r24, r14
    cafa:	9f 25       	eor	r25, r15
			padstate[p] |= BTN_RIGHT;
    cafc:	80 68       	ori	r24, 0x80	; 128
    cafe:	07 c0       	rjmp	.+14     	; 0xcb0e <DoPlay+0xc20>
		}
		else if(padstate[p] & BTN_RIGHT){
    cb00:	e7 fe       	sbrs	r14, 7
    cb02:	07 c0       	rjmp	.+14     	; 0xcb12 <DoPlay+0xc24>
			padstate[p] ^= BTN_RIGHT;
    cb04:	80 e8       	ldi	r24, 0x80	; 128
    cb06:	90 e0       	ldi	r25, 0x00	; 0
    cb08:	8e 25       	eor	r24, r14
    cb0a:	9f 25       	eor	r25, r15
			padstate[p] |= BTN_LEFT;
    cb0c:	80 64       	ori	r24, 0x40	; 64
    cb0e:	8d 93       	st	X+, r24
    cb10:	9c 93       	st	X, r25
		}
	}
	if(padstate[p] & BTN_LEFT){
    cb12:	ed a5       	ldd	r30, Y+45	; 0x2d
    cb14:	fe a5       	ldd	r31, Y+46	; 0x2e
    cb16:	ee 0f       	add	r30, r30
    cb18:	ff 1f       	adc	r31, r31
    cb1a:	ee 57       	subi	r30, 0x7E	; 126
    cb1c:	f1 4f       	sbci	r31, 0xF1	; 241
    cb1e:	80 81       	ld	r24, Z
    cb20:	86 ff       	sbrs	r24, 6
    cb22:	25 c0       	rjmp	.+74     	; 0xcb6e <DoPlay+0xc80>
		if(++sideheld[p] == 1 || sideheld[p] == 5 || sideheld[p] > 8)
    cb24:	ed a5       	ldd	r30, Y+45	; 0x2d
    cb26:	fe a5       	ldd	r31, Y+46	; 0x2e
    cb28:	e5 57       	subi	r30, 0x75	; 117
    cb2a:	f0 4f       	sbci	r31, 0xF0	; 240
    cb2c:	80 81       	ld	r24, Z
    cb2e:	8f 5f       	subi	r24, 0xFF	; 255
    cb30:	80 83       	st	Z, r24
    cb32:	81 30       	cpi	r24, 0x01	; 1
    cb34:	29 f0       	breq	.+10     	; 0xcb40 <DoPlay+0xc52>
    cb36:	85 30       	cpi	r24, 0x05	; 5
    cb38:	19 f0       	breq	.+6      	; 0xcb40 <DoPlay+0xc52>
    cb3a:	89 30       	cpi	r24, 0x09	; 9
    cb3c:	08 f4       	brcc	.+2      	; 0xcb40 <DoPlay+0xc52>
    cb3e:	49 c0       	rjmp	.+146    	; 0xcbd2 <DoPlay+0xce4>
	for(uint8_t i=0;i<3*6;i++)
		well[(p*WELLSIZE)+i] = 0;
}

inline bool MovePieceLeft(uint8_t p){
	if(!piecex[p] || !open_for_piece(piecex[p]-1,piecey[p],p)){
    cb40:	0d a5       	ldd	r16, Y+45	; 0x2d
    cb42:	1e a5       	ldd	r17, Y+46	; 0x2e
    cb44:	08 55       	subi	r16, 0x58	; 88
    cb46:	10 4f       	sbci	r17, 0xF0	; 240
    cb48:	f8 01       	movw	r30, r16
    cb4a:	80 81       	ld	r24, Z
    cb4c:	88 23       	and	r24, r24
    cb4e:	89 f1       	breq	.+98     	; 0xcbb2 <DoPlay+0xcc4>
    cb50:	ed a5       	ldd	r30, Y+45	; 0x2d
    cb52:	fe a5       	ldd	r31, Y+46	; 0x2e
    cb54:	e8 55       	subi	r30, 0x58	; 88
    cb56:	f1 4f       	sbci	r31, 0xF1	; 241
    cb58:	81 50       	subi	r24, 0x01	; 1
    cb5a:	60 81       	ld	r22, Z
    cb5c:	4b 2d       	mov	r20, r11
    cb5e:	0e 94 c8 54 	call	0xa990	; 0xa990 <open_for_piece>
    cb62:	88 23       	and	r24, r24
    cb64:	31 f1       	breq	.+76     	; 0xcbb2 <DoPlay+0xcc4>
		if(p && cpustate)
			cpustate |= CPUMOVEBLOCKED;
		return false;
	}		
//	blank_piece(p);piece is blanked before function is called
	piecex[p]--;
    cb66:	d8 01       	movw	r26, r16
    cb68:	8c 91       	ld	r24, X
    cb6a:	81 50       	subi	r24, 0x01	; 1
    cb6c:	2f c0       	rjmp	.+94     	; 0xcbcc <DoPlay+0xcde>
    cb6e:	ed a5       	ldd	r30, Y+45	; 0x2d
    cb70:	fe a5       	ldd	r31, Y+46	; 0x2e
    cb72:	e5 57       	subi	r30, 0x75	; 117
    cb74:	f0 4f       	sbci	r31, 0xF0	; 240
			MovePieceLeft(p);
	}
	else if(padstate[p] & BTN_RIGHT){
    cb76:	87 ff       	sbrs	r24, 7
    cb78:	2b c0       	rjmp	.+86     	; 0xcbd0 <DoPlay+0xce2>
		if(++sideheld[p] == 1 || sideheld[p] == 5 || sideheld[p] > 8)
    cb7a:	80 81       	ld	r24, Z
    cb7c:	8f 5f       	subi	r24, 0xFF	; 255
    cb7e:	80 83       	st	Z, r24
    cb80:	81 30       	cpi	r24, 0x01	; 1
    cb82:	21 f0       	breq	.+8      	; 0xcb8c <DoPlay+0xc9e>
    cb84:	85 30       	cpi	r24, 0x05	; 5
    cb86:	11 f0       	breq	.+4      	; 0xcb8c <DoPlay+0xc9e>
    cb88:	89 30       	cpi	r24, 0x09	; 9
    cb8a:	18 f1       	brcs	.+70     	; 0xcbd2 <DoPlay+0xce4>
	return true;
}

inline bool MovePieceRight(uint8_t p){
	if(piecex[p] == 5 || !open_for_piece(piecex[p]+1,piecey[p],p)){
    cb8c:	0d a5       	ldd	r16, Y+45	; 0x2d
    cb8e:	1e a5       	ldd	r17, Y+46	; 0x2e
    cb90:	08 55       	subi	r16, 0x58	; 88
    cb92:	10 4f       	sbci	r17, 0xF0	; 240
    cb94:	f8 01       	movw	r30, r16
    cb96:	80 81       	ld	r24, Z
    cb98:	85 30       	cpi	r24, 0x05	; 5
    cb9a:	59 f0       	breq	.+22     	; 0xcbb2 <DoPlay+0xcc4>
    cb9c:	ed a5       	ldd	r30, Y+45	; 0x2d
    cb9e:	fe a5       	ldd	r31, Y+46	; 0x2e
    cba0:	e8 55       	subi	r30, 0x58	; 88
    cba2:	f1 4f       	sbci	r31, 0xF1	; 241
    cba4:	8f 5f       	subi	r24, 0xFF	; 255
    cba6:	60 81       	ld	r22, Z
    cba8:	4b 2d       	mov	r20, r11
    cbaa:	0e 94 c8 54 	call	0xa990	; 0xa990 <open_for_piece>
    cbae:	88 23       	and	r24, r24
    cbb0:	51 f4       	brne	.+20     	; 0xcbc6 <DoPlay+0xcd8>
		if(p && cpustate)
    cbb2:	bb 20       	and	r11, r11
    cbb4:	71 f0       	breq	.+28     	; 0xcbd2 <DoPlay+0xce4>
    cbb6:	80 91 a7 0e 	lds	r24, 0x0EA7
    cbba:	88 23       	and	r24, r24
    cbbc:	51 f0       	breq	.+20     	; 0xcbd2 <DoPlay+0xce4>
			cpustate |= CPUMOVEBLOCKED;
    cbbe:	80 64       	ori	r24, 0x40	; 64
    cbc0:	80 93 a7 0e 	sts	0x0EA7, r24
    cbc4:	06 c0       	rjmp	.+12     	; 0xcbd2 <DoPlay+0xce4>
		return false;
	}		
//	blank_piece(p);piece is blanked before function is called
	piecex[p]++;
    cbc6:	d8 01       	movw	r26, r16
    cbc8:	8c 91       	ld	r24, X
    cbca:	8f 5f       	subi	r24, 0xFF	; 255
    cbcc:	8c 93       	st	X, r24
    cbce:	01 c0       	rjmp	.+2      	; 0xcbd2 <DoPlay+0xce4>
			MovePieceRight(p);
	}
	else
		sideheld[p] = 0;
    cbd0:	10 82       	st	Z, r1
		
	padstate[p] = oldp;//undo curse control changes
    cbd2:	ed a5       	ldd	r30, Y+45	; 0x2d
    cbd4:	fe a5       	ldd	r31, Y+46	; 0x2e
    cbd6:	ee 0f       	add	r30, r30
    cbd8:	ff 1f       	adc	r31, r31
    cbda:	ee 57       	subi	r30, 0x7E	; 126
    cbdc:	f1 4f       	sbci	r31, 0xF1	; 241
    cbde:	f1 82       	std	Z+1, r15	; 0x01
    cbe0:	e0 82       	st	Z, r14

	if(DownHeld(p)){
    cbe2:	e5 fe       	sbrs	r14, 5
    cbe4:	05 c0       	rjmp	.+10     	; 0xcbf0 <DoPlay+0xd02>
		//if(downletup[p])
			droptimer[p] = 0;
    cbe6:	ed a5       	ldd	r30, Y+45	; 0x2d
    cbe8:	fe a5       	ldd	r31, Y+46	; 0x2e
    cbea:	ea 57       	subi	r30, 0x7A	; 122
    cbec:	f1 4f       	sbci	r31, 0xF1	; 241
    cbee:	10 82       	st	Z, r1
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
    cbf0:	ad a5       	ldd	r26, Y+45	; 0x2d
    cbf2:	be a5       	ldd	r27, Y+46	; 0x2e
    cbf4:	aa 0f       	add	r26, r26
    cbf6:	bb 1f       	adc	r27, r27
    cbf8:	fd 01       	movw	r30, r26
    cbfa:	ee 57       	subi	r30, 0x7E	; 126
    cbfc:	f1 4f       	sbci	r31, 0xF1	; 241
    cbfe:	80 81       	ld	r24, Z
    cc00:	84 ff       	sbrs	r24, 4
    cc02:	57 ce       	rjmp	.-850    	; 0xc8b2 <DoPlay+0x9c4>
    cc04:	a2 58       	subi	r26, 0x82	; 130
    cc06:	b1 4f       	sbci	r27, 0xF1	; 241
    cc08:	8c 91       	ld	r24, X
    cc0a:	84 fd       	sbrc	r24, 4
    cc0c:	52 ce       	rjmp	.-860    	; 0xc8b2 <DoPlay+0x9c4>
	}
	//else
		//downletup[p] = 1;
	
	if(UpDown(p)){
		DropPiece(p);
    cc0e:	8b 2d       	mov	r24, r11
    cc10:	0e 94 6a 57 	call	0xaed4	; 0xaed4 <DropPiece>
    cc14:	4e ce       	rjmp	.-868    	; 0xc8b2 <DoPlay+0x9c4>



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    cc16:	f8 01       	movw	r30, r16
    cc18:	20 81       	ld	r18, Z
    cc1a:	db 01       	movw	r26, r22
    cc1c:	8c 91       	ld	r24, X
    cc1e:	83 0f       	add	r24, r19
    cc20:	90 e0       	ldi	r25, 0x00	; 0
    cc22:	fc 01       	movw	r30, r24
    cc24:	ee 0f       	add	r30, r30
    cc26:	ff 1f       	adc	r31, r31
    cc28:	e8 0f       	add	r30, r24
    cc2a:	f9 1f       	adc	r31, r25
    cc2c:	ee 0f       	add	r30, r30
    cc2e:	ff 1f       	adc	r31, r31
    cc30:	e3 55       	subi	r30, 0x53	; 83
    cc32:	f1 4f       	sbci	r31, 0xF1	; 241
    cc34:	ec 0d       	add	r30, r12
    cc36:	fd 1d       	adc	r31, r13
    cc38:	e2 0f       	add	r30, r18
    cc3a:	f1 1d       	adc	r31, r1
    cc3c:	da 01       	movw	r26, r20
    cc3e:	8c 91       	ld	r24, X
    cc40:	82 95       	swap	r24
    cc42:	88 0f       	add	r24, r24
    cc44:	88 0f       	add	r24, r24
    cc46:	80 7c       	andi	r24, 0xC0	; 192
    cc48:	d7 01       	movw	r26, r14
    cc4a:	9d 91       	ld	r25, X+
    cc4c:	7d 01       	movw	r14, r26
    cc4e:	89 2b       	or	r24, r25
    cc50:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    cc52:	3f 5f       	subi	r19, 0xFF	; 255
    cc54:	33 30       	cpi	r19, 0x03	; 3
    cc56:	f9 f6       	brne	.-66     	; 0xcc16 <DoPlay+0xd28>
				blank_piece(p);
				ProcessInputState(p);
				add_piece(p);
			}			

			if(game_state == INITIALSTATE)//we were in game over and start was pushed
    cc58:	80 91 a6 0e 	lds	r24, 0x0EA6
    cc5c:	8f 3f       	cpi	r24, 0xFF	; 255
    cc5e:	11 f4       	brne	.+4      	; 0xcc64 <DoPlay+0xd76>
    cc60:	0c 94 4b 73 	jmp	0xe696	; 0xe696 <DoPlay+0x27a8>
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    cc64:	ed a5       	ldd	r30, Y+45	; 0x2d
    cc66:	fe a5       	ldd	r31, Y+46	; 0x2e
    cc68:	20 e6       	ldi	r18, 0x60	; 96
    cc6a:	30 e0       	ldi	r19, 0x00	; 0
    cc6c:	e2 9f       	mul	r30, r18
    cc6e:	20 01       	movw	r4, r0
    cc70:	e3 9f       	mul	r30, r19
    cc72:	50 0c       	add	r5, r0
    cc74:	f2 9f       	mul	r31, r18
    cc76:	50 0c       	add	r5, r0
    cc78:	11 24       	eor	r1, r1
    cc7a:	a4 2c       	mov	r10, r4
    cc7c:	88 ea       	ldi	r24, 0xA8	; 168
    cc7e:	c8 2e       	mov	r12, r24
    cc80:	8f e0       	ldi	r24, 0x0F	; 15
    cc82:	d8 2e       	mov	r13, r24
    cc84:	ce 0e       	add	r12, r30
    cc86:	df 1e       	adc	r13, r31
    cc88:	d6 01       	movw	r26, r12
    cc8a:	ec 91       	ld	r30, X
    cc8c:	e4 0d       	add	r30, r4
    cc8e:	08 ea       	ldi	r16, 0xA8	; 168
    cc90:	e0 2e       	mov	r14, r16
    cc92:	0e e0       	ldi	r16, 0x0E	; 14
    cc94:	f0 2e       	mov	r15, r16
    cc96:	2d a5       	ldd	r18, Y+45	; 0x2d
    cc98:	3e a5       	ldd	r19, Y+46	; 0x2e
    cc9a:	e2 0e       	add	r14, r18
    cc9c:	f3 1e       	adc	r15, r19
    cc9e:	d7 01       	movw	r26, r14
    cca0:	8c 91       	ld	r24, X
    cca2:	b6 e0       	ldi	r27, 0x06	; 6
    cca4:	8b 9f       	mul	r24, r27
    cca6:	c0 01       	movw	r24, r0
    cca8:	11 24       	eor	r1, r1
    ccaa:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    ccac:	ae 2f       	mov	r26, r30
    ccae:	b0 e0       	ldi	r27, 0x00	; 0
    ccb0:	a3 55       	subi	r26, 0x53	; 83
    ccb2:	b1 4f       	sbci	r27, 0xF1	; 241
    ccb4:	1c 92       	st	X, r1
	off += 6;
    ccb6:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    ccb8:	ae 2f       	mov	r26, r30
    ccba:	b0 e0       	ldi	r27, 0x00	; 0
    ccbc:	a3 55       	subi	r26, 0x53	; 83
    ccbe:	b1 4f       	sbci	r27, 0xF1	; 241
    ccc0:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    ccc2:	ea 5f       	subi	r30, 0xFA	; 250
    ccc4:	f0 e0       	ldi	r31, 0x00	; 0
    ccc6:	e3 55       	subi	r30, 0x53	; 83
    ccc8:	f1 4f       	sbci	r31, 0xF1	; 241
    ccca:	10 82       	st	Z, r1
inline void ProcessCrash(uint8_t p){
	blank_piece(p);
	
	//TODO SUBTRACT THE TWO FIRST...
	
	if(crashheight[p] && crashcomingdown[p]){
    cccc:	f9 01       	movw	r30, r18
    ccce:	ec 54       	subi	r30, 0x4C	; 76
    ccd0:	f0 4f       	sbci	r31, 0xF0	; 240
    ccd2:	80 81       	ld	r24, Z
    ccd4:	88 23       	and	r24, r24
    ccd6:	09 f4       	brne	.+2      	; 0xccda <DoPlay+0xdec>
    ccd8:	40 c0       	rjmp	.+128    	; 0xcd5a <DoPlay+0xe6c>
    ccda:	89 01       	movw	r16, r18
    ccdc:	0d 53       	subi	r16, 0x3D	; 61
    ccde:	10 4f       	sbci	r17, 0xF0	; 240
    cce0:	f8 01       	movw	r30, r16
    cce2:	80 81       	ld	r24, Z
    cce4:	88 23       	and	r24, r24
    cce6:	c9 f1       	breq	.+114    	; 0xcd5a <DoPlay+0xe6c>
		CrashBarDown(crashcomingdown[p],p,0);
    cce8:	6b 2d       	mov	r22, r11
    ccea:	40 e0       	ldi	r20, 0x00	; 0
    ccec:	0e 94 29 5d 	call	0xba52	; 0xba52 <CrashBarDown>
		crashcomingdown[p] = 0;
    ccf0:	d8 01       	movw	r26, r16
    ccf2:	1c 92       	st	X, r1
    ccf4:	8d a4       	ldd	r8, Y+45	; 0x2d
    ccf6:	9e a4       	ldd	r9, Y+46	; 0x2e
    ccf8:	88 0c       	add	r8, r8
    ccfa:	99 1c       	adc	r9, r9
    ccfc:	ed a5       	ldd	r30, Y+45	; 0x2d
    ccfe:	fe a5       	ldd	r31, Y+46	; 0x2e
    cd00:	8e 0e       	add	r8, r30
    cd02:	9f 1e       	adc	r9, r31
    cd04:	2c e7       	ldi	r18, 0x7C	; 124
    cd06:	3f e0       	ldi	r19, 0x0F	; 15
    cd08:	82 0e       	add	r8, r18
    cd0a:	93 1e       	adc	r9, r19
    cd0c:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    cd0e:	86 01       	movw	r16, r12
    cd10:	b7 01       	movw	r22, r14
    cd12:	af 01       	movw	r20, r30
    cd14:	4f 54       	subi	r20, 0x4F	; 79
    cd16:	50 4f       	sbci	r21, 0xF0	; 240
    cd18:	d8 01       	movw	r26, r16
    cd1a:	2c 91       	ld	r18, X
    cd1c:	fb 01       	movw	r30, r22
    cd1e:	80 81       	ld	r24, Z
    cd20:	83 0f       	add	r24, r19
    cd22:	90 e0       	ldi	r25, 0x00	; 0
    cd24:	fc 01       	movw	r30, r24
    cd26:	ee 0f       	add	r30, r30
    cd28:	ff 1f       	adc	r31, r31
    cd2a:	e8 0f       	add	r30, r24
    cd2c:	f9 1f       	adc	r31, r25
    cd2e:	ee 0f       	add	r30, r30
    cd30:	ff 1f       	adc	r31, r31
    cd32:	e3 55       	subi	r30, 0x53	; 83
    cd34:	f1 4f       	sbci	r31, 0xF1	; 241
    cd36:	e4 0d       	add	r30, r4
    cd38:	f5 1d       	adc	r31, r5
    cd3a:	e2 0f       	add	r30, r18
    cd3c:	f1 1d       	adc	r31, r1
    cd3e:	da 01       	movw	r26, r20
    cd40:	8c 91       	ld	r24, X
    cd42:	82 95       	swap	r24
    cd44:	88 0f       	add	r24, r24
    cd46:	88 0f       	add	r24, r24
    cd48:	80 7c       	andi	r24, 0xC0	; 192
    cd4a:	d4 01       	movw	r26, r8
    cd4c:	9d 91       	ld	r25, X+
    cd4e:	4d 01       	movw	r8, r26
    cd50:	89 2b       	or	r24, r25
    cd52:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    cd54:	3f 5f       	subi	r19, 0xFF	; 255
    cd56:	33 30       	cpi	r19, 0x03	; 3
    cd58:	f9 f6       	brne	.-66     	; 0xcd18 <DoPlay+0xe2a>
		add_piece(p);
	}
	if(crashcomingup[p]){
    cd5a:	ed a5       	ldd	r30, Y+45	; 0x2d
    cd5c:	fe a5       	ldd	r31, Y+46	; 0x2e
    cd5e:	e7 58       	subi	r30, 0x87	; 135
    cd60:	f0 4f       	sbci	r31, 0xF0	; 240
    cd62:	80 81       	ld	r24, Z
    cd64:	88 23       	and	r24, r24
    cd66:	09 f4       	brne	.+2      	; 0xcd6a <DoPlay+0xe7c>
    cd68:	ce c0       	rjmp	.+412    	; 0xcf06 <DoPlay+0x1018>
}



inline void SetCrashedPieces(uint8_t p){
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
    cd6a:	bd e2       	ldi	r27, 0x2D	; 45
    cd6c:	b0 93 8d 0f 	sts	0x0F8D, r27
	for(uint8_t i=p*3;i<(p*3)+3;i++){
    cd70:	2d a5       	ldd	r18, Y+45	; 0x2d
    cd72:	3e a5       	ldd	r19, Y+46	; 0x2e
    cd74:	22 0f       	add	r18, r18
    cd76:	33 1f       	adc	r19, r19
    cd78:	ed a5       	ldd	r30, Y+45	; 0x2d
    cd7a:	fe a5       	ldd	r31, Y+46	; 0x2e
    cd7c:	2e 0f       	add	r18, r30
    cd7e:	3f 1f       	adc	r19, r31
    cd80:	d2 2e       	mov	r13, r18
    cd82:	cf 01       	movw	r24, r30
    cd84:	01 96       	adiw	r24, 0x01	; 1
    cd86:	7c 01       	movw	r14, r24
    cd88:	ee 0c       	add	r14, r14
    cd8a:	ff 1c       	adc	r15, r15
    cd8c:	e8 0e       	add	r14, r24
    cd8e:	f9 1e       	adc	r15, r25
		crashedpiecex[i] = (piecex[p]<<4)+(p*(16<<3));
    cd90:	f6 95       	lsr	r31
    cd92:	fe 2f       	mov	r31, r30
    cd94:	ee 27       	eor	r30, r30
    cd96:	f7 95       	ror	r31
    cd98:	e7 95       	ror	r30
    cd9a:	ff a3       	std	Y+39, r31	; 0x27
    cd9c:	ee a3       	std	Y+38, r30	; 0x26
		crashedpiecey[i] = ((((piecey[p]-2)<<1)+((bool)halfstep[p]))<<3)+((i-(p*3))*2);
    cd9e:	44 27       	eor	r20, r20
    cda0:	55 27       	eor	r21, r21
    cda2:	42 1b       	sub	r20, r18
    cda4:	53 0b       	sbc	r21, r19
    cda6:	5d a3       	std	Y+37, r21	; 0x25
    cda8:	4c a3       	std	Y+36, r20	; 0x24
    cdaa:	08 ea       	ldi	r16, 0xA8	; 168
    cdac:	60 2e       	mov	r6, r16
    cdae:	0e e0       	ldi	r16, 0x0E	; 14
    cdb0:	70 2e       	mov	r7, r16
    cdb2:	6d a5       	ldd	r22, Y+45	; 0x2d
    cdb4:	7e a5       	ldd	r23, Y+46	; 0x2e
    cdb6:	66 0e       	add	r6, r22
    cdb8:	77 1e       	adc	r7, r23
    cdba:	18 ea       	ldi	r17, 0xA8	; 168
    cdbc:	81 2e       	mov	r8, r17
    cdbe:	1f e0       	ldi	r17, 0x0F	; 15
    cdc0:	91 2e       	mov	r9, r17
    cdc2:	86 0e       	add	r8, r22
    cdc4:	97 1e       	adc	r9, r23
    cdc6:	b1 eb       	ldi	r27, 0xB1	; 177
    cdc8:	2b 2e       	mov	r2, r27
    cdca:	bf e0       	ldi	r27, 0x0F	; 15
    cdcc:	3b 2e       	mov	r3, r27
    cdce:	26 0e       	add	r2, r22
    cdd0:	37 1e       	adc	r3, r23
    cdd2:	63 c0       	rjmp	.+198    	; 0xce9a <DoPlay+0xfac>


inline void SetCrashedPieces(uint8_t p){
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
	for(uint8_t i=p*3;i<(p*3)+3;i++){
		crashedpiecex[i] = (piecex[p]<<4)+(p*(16<<3));
    cdd4:	f8 01       	movw	r30, r16
    cdd6:	ee 0f       	add	r30, r30
    cdd8:	ff 1f       	adc	r31, r31
    cdda:	af 01       	movw	r20, r30
    cddc:	48 57       	subi	r20, 0x78	; 120
    cdde:	51 4f       	sbci	r21, 0xF1	; 241
    cde0:	d4 01       	movw	r26, r8
    cde2:	8c 91       	ld	r24, X
    cde4:	90 e0       	ldi	r25, 0x00	; 0
    cde6:	74 e0       	ldi	r23, 0x04	; 4
    cde8:	88 0f       	add	r24, r24
    cdea:	99 1f       	adc	r25, r25
    cdec:	7a 95       	dec	r23
    cdee:	e1 f7       	brne	.-8      	; 0xcde8 <DoPlay+0xefa>
    cdf0:	2e a1       	ldd	r18, Y+38	; 0x26
    cdf2:	3f a1       	ldd	r19, Y+39	; 0x27
    cdf4:	82 0f       	add	r24, r18
    cdf6:	93 1f       	adc	r25, r19
    cdf8:	da 01       	movw	r26, r20
    cdfa:	8d 93       	st	X+, r24
    cdfc:	9c 93       	st	X, r25
		crashedpiecey[i] = ((((piecey[p]-2)<<1)+((bool)halfstep[p]))<<3)+((i-(p*3))*2);
    cdfe:	e9 54       	subi	r30, 0x49	; 73
    ce00:	f0 4f       	sbci	r31, 0xF0	; 240
    ce02:	2c a1       	ldd	r18, Y+36	; 0x24
    ce04:	3d a1       	ldd	r19, Y+37	; 0x25
    ce06:	20 0f       	add	r18, r16
    ce08:	31 1f       	adc	r19, r17
    ce0a:	22 0f       	add	r18, r18
    ce0c:	33 1f       	adc	r19, r19
    ce0e:	d3 01       	movw	r26, r6
    ce10:	8c 91       	ld	r24, X
    ce12:	90 e0       	ldi	r25, 0x00	; 0
    ce14:	02 97       	sbiw	r24, 0x02	; 2
    ce16:	88 0f       	add	r24, r24
    ce18:	99 1f       	adc	r25, r25
    ce1a:	d1 01       	movw	r26, r2
    ce1c:	4c 91       	ld	r20, X
    ce1e:	84 0f       	add	r24, r20
    ce20:	91 1d       	adc	r25, r1
    ce22:	43 e0       	ldi	r20, 0x03	; 3
    ce24:	88 0f       	add	r24, r24
    ce26:	99 1f       	adc	r25, r25
    ce28:	4a 95       	dec	r20
    ce2a:	e1 f7       	brne	.-8      	; 0xce24 <DoPlay+0xf36>
    ce2c:	28 0f       	add	r18, r24
    ce2e:	39 1f       	adc	r19, r25
    ce30:	31 83       	std	Z+1, r19	; 0x01
    ce32:	20 83       	st	Z, r18
		
		crashedxvel[i] = -7+(prng(MAX_PLAYERS)%14);
    ce34:	82 e0       	ldi	r24, 0x02	; 2
    ce36:	0e 94 f6 54 	call	0xa9ec	; 0xa9ec <prng>
    ce3a:	f8 01       	movw	r30, r16
    ce3c:	eb 50       	subi	r30, 0x0B	; 11
    ce3e:	f0 4f       	sbci	r31, 0xF0	; 240
    ce40:	6e e0       	ldi	r22, 0x0E	; 14
    ce42:	70 e0       	ldi	r23, 0x00	; 0
    ce44:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    ce48:	87 50       	subi	r24, 0x07	; 7
    ce4a:	80 83       	st	Z, r24
		crashedyvel[i] = -14+(prng(MAX_PLAYERS)%20);
    ce4c:	82 e0       	ldi	r24, 0x02	; 2
    ce4e:	0e 94 f6 54 	call	0xa9ec	; 0xa9ec <prng>
    ce52:	f8 01       	movw	r30, r16
    ce54:	ef 58       	subi	r30, 0x8F	; 143
    ce56:	f1 4f       	sbci	r31, 0xF1	; 241
    ce58:	64 e1       	ldi	r22, 0x14	; 20
    ce5a:	70 e0       	ldi	r23, 0x00	; 0
    ce5c:	0e 94 c2 73 	call	0xe784	; 0xe784 <__udivmodhi4>
    ce60:	8e 50       	subi	r24, 0x0E	; 14
    ce62:	80 83       	st	Z, r24
		if(piece[i] < 7)//normal jewel
    ce64:	f8 01       	movw	r30, r16
    ce66:	e4 58       	subi	r30, 0x84	; 132
    ce68:	f0 4f       	sbci	r31, 0xF0	; 240
    ce6a:	80 81       	ld	r24, Z
    ce6c:	f8 01       	movw	r30, r16
    ce6e:	e1 57       	subi	r30, 0x71	; 113
    ce70:	f0 4f       	sbci	r31, 0xF0	; 240
    ce72:	28 2f       	mov	r18, r24
    ce74:	30 e0       	ldi	r19, 0x00	; 0
    ce76:	87 30       	cpi	r24, 0x07	; 7
    ce78:	40 f4       	brcc	.+16     	; 0xce8a <DoPlay+0xf9c>
			crashedtype[i] = (JEWELSTART+(piece[i]*4)-1)+RAM_TILES_COUNT;
    ce7a:	22 0f       	add	r18, r18
    ce7c:	33 1f       	adc	r19, r19
    ce7e:	22 0f       	add	r18, r18
    ce80:	33 1f       	adc	r19, r19
    ce82:	82 2f       	mov	r24, r18
    ce84:	8f 5c       	subi	r24, 0xCF	; 207
    ce86:	80 83       	st	Z, r24
    ce88:	07 c0       	rjmp	.+14     	; 0xce98 <DoPlay+0xfaa>
		else//magic jewel
			crashedtype[i] = (piece[i]-7)*4;
    ce8a:	27 50       	subi	r18, 0x07	; 7
    ce8c:	30 40       	sbci	r19, 0x00	; 0
    ce8e:	22 0f       	add	r18, r18
    ce90:	33 1f       	adc	r19, r19
    ce92:	22 0f       	add	r18, r18
    ce94:	33 1f       	adc	r19, r19
    ce96:	20 83       	st	Z, r18



inline void SetCrashedPieces(uint8_t p){
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
	for(uint8_t i=p*3;i<(p*3)+3;i++){
    ce98:	d3 94       	inc	r13
    ce9a:	0d 2d       	mov	r16, r13
    ce9c:	10 e0       	ldi	r17, 0x00	; 0
    ce9e:	0e 15       	cp	r16, r14
    cea0:	1f 05       	cpc	r17, r15
    cea2:	0c f4       	brge	.+2      	; 0xcea6 <DoPlay+0xfb8>
    cea4:	97 cf       	rjmp	.-210    	; 0xcdd4 <DoPlay+0xee6>
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    cea6:	d4 01       	movw	r26, r8
    cea8:	ec 91       	ld	r30, X
    ceaa:	ea 0d       	add	r30, r10
    ceac:	d3 01       	movw	r26, r6
    ceae:	8c 91       	ld	r24, X
    ceb0:	b6 e0       	ldi	r27, 0x06	; 6
    ceb2:	8b 9f       	mul	r24, r27
    ceb4:	c0 01       	movw	r24, r0
    ceb6:	11 24       	eor	r1, r1
    ceb8:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    ceba:	ae 2f       	mov	r26, r30
    cebc:	b0 e0       	ldi	r27, 0x00	; 0
    cebe:	a3 55       	subi	r26, 0x53	; 83
    cec0:	b1 4f       	sbci	r27, 0xF1	; 241
    cec2:	1c 92       	st	X, r1
	off += 6;
    cec4:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    cec6:	ae 2f       	mov	r26, r30
    cec8:	b0 e0       	ldi	r27, 0x00	; 0
    ceca:	a3 55       	subi	r26, 0x53	; 83
    cecc:	b1 4f       	sbci	r27, 0xF1	; 241
    cece:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    ced0:	ea 5f       	subi	r30, 0xFA	; 250
    ced2:	f0 e0       	ldi	r31, 0x00	; 0
    ced4:	e3 55       	subi	r30, 0x53	; 83
    ced6:	f1 4f       	sbci	r31, 0xF1	; 241
    ced8:	10 82       	st	Z, r1
		add_piece(p);
	}
	if(crashcomingup[p]){
		SetCrashedPieces(p);
		blank_piece(p);
		GeneratePreview(p);
    ceda:	8b 2d       	mov	r24, r11
    cedc:	0e 94 1a 58 	call	0xb034	; 0xb034 <GeneratePreview>
		CrashBarUp(crashcomingup[p],p);
    cee0:	0d a5       	ldd	r16, Y+45	; 0x2d
    cee2:	1e a5       	ldd	r17, Y+46	; 0x2e
    cee4:	07 58       	subi	r16, 0x87	; 135
    cee6:	10 4f       	sbci	r17, 0xF0	; 240
    cee8:	f8 01       	movw	r30, r16
    ceea:	80 81       	ld	r24, Z
    ceec:	6b 2d       	mov	r22, r11
    ceee:	0e 94 88 5d 	call	0xbb10	; 0xbb10 <CrashBarUp>
		crashcomingup[p] = 0;
    cef2:	d8 01       	movw	r26, r16
    cef4:	1c 92       	st	X, r1
		if(CheckLoss(p))
    cef6:	8b 2d       	mov	r24, r11
    cef8:	0e 94 53 57 	call	0xaea6	; 0xaea6 <CheckLoss>
    cefc:	88 23       	and	r24, r24
    cefe:	19 f0       	breq	.+6      	; 0xcf06 <DoPlay+0x1018>
			SetLosing(p);
    cf00:	8b 2d       	mov	r24, r11
    cf02:	0e 94 d7 5c 	call	0xb9ae	; 0xb9ae <SetLosing>
    cf06:	ed a4       	ldd	r14, Y+45	; 0x2d
    cf08:	fe a4       	ldd	r15, Y+46	; 0x2e
    cf0a:	ee 0c       	add	r14, r14
    cf0c:	ff 1c       	adc	r15, r15
    cf0e:	ed a5       	ldd	r30, Y+45	; 0x2d
    cf10:	fe a5       	ldd	r31, Y+46	; 0x2e
    cf12:	ee 0e       	add	r14, r30
    cf14:	ff 1e       	adc	r15, r31
    cf16:	2c e7       	ldi	r18, 0x7C	; 124
    cf18:	3f e0       	ldi	r19, 0x0F	; 15
    cf1a:	e2 0e       	add	r14, r18
    cf1c:	f3 1e       	adc	r15, r19
    cf1e:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    cf20:	bf 01       	movw	r22, r30
    cf22:	68 55       	subi	r22, 0x58	; 88
    cf24:	70 4f       	sbci	r23, 0xF0	; 240
    cf26:	af 01       	movw	r20, r30
    cf28:	48 55       	subi	r20, 0x58	; 88
    cf2a:	51 4f       	sbci	r21, 0xF1	; 241
    cf2c:	8f 01       	movw	r16, r30
    cf2e:	0f 54       	subi	r16, 0x4F	; 79
    cf30:	10 4f       	sbci	r17, 0xF0	; 240
    cf32:	db 01       	movw	r26, r22
    cf34:	2c 91       	ld	r18, X
    cf36:	fa 01       	movw	r30, r20
    cf38:	80 81       	ld	r24, Z
    cf3a:	83 0f       	add	r24, r19
    cf3c:	90 e0       	ldi	r25, 0x00	; 0
    cf3e:	fc 01       	movw	r30, r24
    cf40:	ee 0f       	add	r30, r30
    cf42:	ff 1f       	adc	r31, r31
    cf44:	e8 0f       	add	r30, r24
    cf46:	f9 1f       	adc	r31, r25
    cf48:	ee 0f       	add	r30, r30
    cf4a:	ff 1f       	adc	r31, r31
    cf4c:	e3 55       	subi	r30, 0x53	; 83
    cf4e:	f1 4f       	sbci	r31, 0xF1	; 241
    cf50:	e4 0d       	add	r30, r4
    cf52:	f5 1d       	adc	r31, r5
    cf54:	e2 0f       	add	r30, r18
    cf56:	f1 1d       	adc	r31, r1
    cf58:	d8 01       	movw	r26, r16
    cf5a:	8c 91       	ld	r24, X
    cf5c:	82 95       	swap	r24
    cf5e:	88 0f       	add	r24, r24
    cf60:	88 0f       	add	r24, r24
    cf62:	80 7c       	andi	r24, 0xC0	; 192
    cf64:	d7 01       	movw	r26, r14
    cf66:	9d 91       	ld	r25, X+
    cf68:	7d 01       	movw	r14, r26
    cf6a:	89 2b       	or	r24, r25
    cf6c:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    cf6e:	3f 5f       	subi	r19, 0xFF	; 255
    cf70:	33 30       	cpi	r19, 0x03	; 3
    cf72:	f9 f6       	brne	.-66     	; 0xcf32 <DoPlay+0x1044>

/////////////////////////////////////////////////////////////////////////////////////
//PROCESS 1 GAME TICK (30HZ)
/////////////////////////////////////////////////////////////////////////////////////
		UpdatePads();
		for(uint8_t p=0;p<MAX_PLAYERS;p++){
    cf74:	b3 94       	inc	r11
    cf76:	b1 e0       	ldi	r27, 0x01	; 1
    cf78:	bb 15       	cp	r27, r11
    cf7a:	10 f0       	brcs	.+4      	; 0xcf80 <DoPlay+0x1092>
    cf7c:	0c 94 9e 5f 	jmp	0xbf3c	; 0xbf3c <DoPlay+0x4e>
inline void CalculateMusicTempo(){
	if(++tickssincetempochange < 4)
    cf80:	80 91 9b 0e 	lds	r24, 0x0E9B
    cf84:	8f 5f       	subi	r24, 0xFF	; 255
    cf86:	80 93 9b 0e 	sts	0x0E9B, r24
    cf8a:	84 30       	cpi	r24, 0x04	; 4
    cf8c:	08 f4       	brcc	.+2      	; 0xcf90 <DoPlay+0x10a2>
    cf8e:	56 c0       	rjmp	.+172    	; 0xd03c <DoPlay+0x114e>
	return;
	tickssincetempochange = 0;
    cf90:	10 92 9b 0e 	sts	0x0E9B, r1
	
	if((state[0] & (SCORING|APPLYGRAVITY|EXPLODING)) && (state[1] & (SCORING|APPLYGRAVITY|EXPLODING)))
    cf94:	80 91 aa 0e 	lds	r24, 0x0EAA
    cf98:	83 72       	andi	r24, 0x23	; 35
    cf9a:	29 f0       	breq	.+10     	; 0xcfa6 <DoPlay+0x10b8>
    cf9c:	80 91 ab 0e 	lds	r24, 0x0EAB
    cfa0:	83 72       	andi	r24, 0x23	; 35
    cfa2:	09 f0       	breq	.+2      	; 0xcfa6 <DoPlay+0x10b8>
    cfa4:	4b c0       	rjmp	.+150    	; 0xd03c <DoPlay+0x114e>
	return;
	uint16_t mt = (wellfullness[0] > wellfullness[1]) ? wellfullness[0]:wellfullness[1];
    cfa6:	20 91 97 0f 	lds	r18, 0x0F97
    cfaa:	30 91 98 0f 	lds	r19, 0x0F98
    cfae:	80 91 95 0f 	lds	r24, 0x0F95
    cfb2:	90 91 96 0f 	lds	r25, 0x0F96
    cfb6:	82 17       	cp	r24, r18
    cfb8:	93 07       	cpc	r25, r19
    cfba:	08 f4       	brcc	.+2      	; 0xcfbe <DoPlay+0x10d0>
    cfbc:	c9 01       	movw	r24, r18


	if(mt < 6*5)
    cfbe:	8e 31       	cpi	r24, 0x1E	; 30
    cfc0:	91 05       	cpc	r25, r1
    cfc2:	18 f4       	brcc	.+6      	; 0xcfca <DoPlay+0x10dc>
    cfc4:	20 e0       	ldi	r18, 0x00	; 0
    cfc6:	30 e0       	ldi	r19, 0x00	; 0
    cfc8:	0c c0       	rjmp	.+24     	; 0xcfe2 <DoPlay+0x10f4>
	mt = 0;
	else{
		mt -= 6*5;
    cfca:	9c 01       	movw	r18, r24
    cfcc:	2e 51       	subi	r18, 0x1E	; 30
    cfce:	30 40       	sbci	r19, 0x00	; 0
		mt *= 4;//5 points for every jewel above 5*6
    cfd0:	22 0f       	add	r18, r18
    cfd2:	33 1f       	adc	r19, r19
    cfd4:	22 0f       	add	r18, r18
    cfd6:	33 1f       	adc	r19, r19
	}
	
	if(mt > MAXTEMPO)
    cfd8:	2f 36       	cpi	r18, 0x6F	; 111
    cfda:	31 05       	cpc	r19, r1
    cfdc:	10 f0       	brcs	.+4      	; 0xcfe2 <DoPlay+0x10f4>
    cfde:	2e e6       	ldi	r18, 0x6E	; 110
    cfe0:	30 e0       	ldi	r19, 0x00	; 0
	mt = MAXTEMPO;
	
	if(musicspeed < mt)
    cfe2:	80 91 7b 0f 	lds	r24, 0x0F7B
    cfe6:	48 2f       	mov	r20, r24
    cfe8:	50 e0       	ldi	r21, 0x00	; 0
    cfea:	42 17       	cp	r20, r18
    cfec:	53 07       	cpc	r21, r19
    cfee:	10 f4       	brcc	.+4      	; 0xcff4 <DoPlay+0x1106>
	musicspeed++;
    cff0:	8f 5f       	subi	r24, 0xFF	; 255
    cff2:	04 c0       	rjmp	.+8      	; 0xcffc <DoPlay+0x110e>
	else if(musicspeed > mt)
    cff4:	24 17       	cp	r18, r20
    cff6:	35 07       	cpc	r19, r21
    cff8:	18 f4       	brcc	.+6      	; 0xd000 <DoPlay+0x1112>
	musicspeed--;
    cffa:	81 50       	subi	r24, 0x01	; 1
    cffc:	80 93 7b 0f 	sts	0x0F7B, r24
	if(musicspeed > mt+10)
    d000:	40 91 7b 0f 	lds	r20, 0x0F7B
    d004:	84 2f       	mov	r24, r20
    d006:	90 e0       	ldi	r25, 0x00	; 0
    d008:	26 5f       	subi	r18, 0xF6	; 246
    d00a:	3f 4f       	sbci	r19, 0xFF	; 255
    d00c:	28 17       	cp	r18, r24
    d00e:	39 07       	cpc	r19, r25
    d010:	18 f4       	brcc	.+6      	; 0xd018 <DoPlay+0x112a>
	musicspeed -= 10;//respond quickly to chain action
    d012:	4a 50       	subi	r20, 0x0A	; 10
    d014:	40 93 7b 0f 	sts	0x0F7B, r20

	SetSongTempo((uint32_t)((musicspeed*musicspeed*2)/32));
    d018:	80 91 7b 0f 	lds	r24, 0x0F7B
    d01c:	90 e0       	ldi	r25, 0x00	; 0
    d01e:	fc 01       	movw	r30, r24
    d020:	ee 9f       	mul	r30, r30
    d022:	c0 01       	movw	r24, r0
    d024:	ef 9f       	mul	r30, r31
    d026:	90 0d       	add	r25, r0
    d028:	fe 9f       	mul	r31, r30
    d02a:	90 0d       	add	r25, r0
    d02c:	11 24       	eor	r1, r1
    d02e:	a4 e0       	ldi	r26, 0x04	; 4
    d030:	95 95       	asr	r25
    d032:	87 95       	ror	r24
    d034:	aa 95       	dec	r26
    d036:	e1 f7       	brne	.-8      	; 0xd030 <DoPlay+0x1142>
    d038:	0e 94 81 4b 	call	0x9702	; 0x9702 <SetSongTempo>


inline void DoDraw(){//rtl_Print2num(14,20,wellfullness[0]);rtl_Print3num(14,22,GetSongTempo());
//need to redraw preview jewels when gameover because crashedtiles overdraw them
	//Draw field map
	if(game_state & GS_FIRSTTICK || crashedredrawtime)// || state[0] & (LOSING|LOSING2|GAMEOVER))
    d03c:	80 91 a6 0e 	lds	r24, 0x0EA6
    d040:	85 fd       	sbrc	r24, 5
    d042:	04 c0       	rjmp	.+8      	; 0xd04c <DoPlay+0x115e>
    d044:	80 91 8d 0f 	lds	r24, 0x0F8D
    d048:	88 23       	and	r24, r24
    d04a:	11 f0       	breq	.+4      	; 0xd050 <DoPlay+0x1162>
		OneTimeDraw();
    d04c:	0e 94 f4 56 	call	0xade8	; 0xade8 <OneTimeDraw>
    d050:	2a ea       	ldi	r18, 0xAA	; 170
    d052:	3e e0       	ldi	r19, 0x0E	; 14
    d054:	3c 8f       	std	Y+28, r19	; 0x1c
    d056:	2b 8f       	std	Y+27, r18	; 0x1b
    d058:	42 ea       	ldi	r20, 0xA2	; 162
    d05a:	53 e0       	ldi	r21, 0x03	; 3
    d05c:	59 8f       	std	Y+25, r21	; 0x19
    d05e:	48 8f       	std	Y+24, r20	; 0x18
    d060:	64 eb       	ldi	r22, 0xB4	; 180
    d062:	7f e0       	ldi	r23, 0x0F	; 15
    d064:	7d 8b       	std	Y+21, r23	; 0x15
    d066:	6c 8b       	std	Y+20, r22	; 0x14
    d068:	8d e9       	ldi	r24, 0x9D	; 157
    d06a:	9e e0       	ldi	r25, 0x0E	; 14
    d06c:	9a 87       	std	Y+10, r25	; 0x0a
    d06e:	89 87       	std	Y+9, r24	; 0x09
    d070:	1f 8e       	std	Y+31, r1	; 0x1f
    d072:	1e 8e       	std	Y+30, r1	; 0x1e
    d074:	9e e0       	ldi	r25, 0x0E	; 14
    d076:	9d 8f       	std	Y+29, r25	; 0x1d
    d078:	a4 e0       	ldi	r26, 0x04	; 4
    d07a:	aa 8f       	std	Y+26, r26	; 0x1a
    d07c:	1f 8a       	std	Y+23, r1	; 0x17
    d07e:	1e 8a       	std	Y+22, r1	; 0x16
    d080:	f2 e0       	ldi	r31, 0x02	; 2
    d082:	5f 2e       	mov	r5, r31
    d084:	1b 8a       	std	Y+19, r1	; 0x13
    d086:	1a 8a       	std	Y+18, r1	; 0x12
    d088:	b4 e1       	ldi	r27, 0x14	; 20
    d08a:	b9 8b       	std	Y+17, r27	; 0x11
    d08c:	e5 e1       	ldi	r30, 0x15	; 21
    d08e:	e8 8b       	std	Y+16, r30	; 0x10
    d090:	f6 e1       	ldi	r31, 0x16	; 22
    d092:	ff 87       	std	Y+15, r31	; 0x0f
    d094:	2c e0       	ldi	r18, 0x0C	; 12
    d096:	2e 87       	std	Y+14, r18	; 0x0e
    d098:	3d e0       	ldi	r19, 0x0D	; 13
    d09a:	3d 87       	std	Y+13, r19	; 0x0d
    d09c:	9c 87       	std	Y+12, r25	; 0x0c
    d09e:	4f e0       	ldi	r20, 0x0F	; 15
    d0a0:	4b 87       	std	Y+11, r20	; 0x0b
    d0a2:	6a e5       	ldi	r22, 0x5A	; 90
    d0a4:	70 e0       	ldi	r23, 0x00	; 0
    d0a6:	7a 83       	std	Y+2, r23	; 0x02
    d0a8:	69 83       	std	Y+1, r22	; 0x01
    d0aa:	8d e0       	ldi	r24, 0x0D	; 13
    d0ac:	90 e0       	ldi	r25, 0x00	; 0
    d0ae:	98 87       	std	Y+8, r25	; 0x08
    d0b0:	8f 83       	std	Y+7, r24	; 0x07
    d0b2:	ae e0       	ldi	r26, 0x0E	; 14
    d0b4:	b0 e0       	ldi	r27, 0x00	; 0
    d0b6:	be 83       	std	Y+6, r27	; 0x06
    d0b8:	ad 83       	std	Y+5, r26	; 0x05
    d0ba:	1c 82       	std	Y+4, r1	; 0x04
    d0bc:	1b 82       	std	Y+3, r1	; 0x03
extern void CpuFillPad();


inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
    d0be:	ee e1       	ldi	r30, 0x1E	; 30
    d0c0:	4e 2e       	mov	r4, r30
    d0c2:	2e 8c       	ldd	r2, Y+30	; 0x1e
    d0c4:	ca 88       	ldd	r12, Y+18	; 0x12
    d0c6:	db 88       	ldd	r13, Y+19	; 0x13
    d0c8:	ef e5       	ldi	r30, 0x5F	; 95
    d0ca:	f0 e0       	ldi	r31, 0x00	; 0
    d0cc:	ce 0e       	add	r12, r30
    d0ce:	df 1e       	adc	r13, r31
    d0d0:	69 80       	ldd	r6, Y+1	; 0x01
    d0d2:	7a 80       	ldd	r7, Y+2	; 0x02
    d0d4:	43 01       	movw	r8, r6
    d0d6:	70 ed       	ldi	r23, 0xD0	; 208
    d0d8:	e7 2e       	mov	r14, r23
    d0da:	72 e0       	ldi	r23, 0x02	; 2
    d0dc:	f7 2e       	mov	r15, r23
    d0de:	28 e1       	ldi	r18, 0x18	; 24
    d0e0:	30 e0       	ldi	r19, 0x00	; 0
    d0e2:	3e a7       	std	Y+46, r19	; 0x2e
    d0e4:	2d a7       	std	Y+45, r18	; 0x2d
		}
	}
}


inline void DoPlay(){
    d0e6:	3e 88       	ldd	r3, Y+22	; 0x16
    d0e8:	33 2d       	mov	r19, r3
    d0ea:	34 5f       	subi	r19, 0xF4	; 244
    d0ec:	3c a7       	std	Y+44, r19	; 0x2c
    d0ee:	2d c1       	rjmp	.+602    	; 0xd34a <DoPlay+0x145c>
		uint8_t t;
	//	ox = p*18;//not needed
		//Draw actual well
		for(int8_t y=15;y>1;y--){
			for(int8_t x=5;x>-1;x--){
				if((state[p]&SCORING) && (stateframe[p]&1) && get_scoring(x,y,p))				
    d0f0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    d0f2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    d0f4:	8c 91       	ld	r24, X
    d0f6:	98 2f       	mov	r25, r24
    d0f8:	80 ff       	sbrs	r24, 0
    d0fa:	0c c0       	rjmp	.+24     	; 0xd114 <DoPlay+0x1226>
    d0fc:	e9 85       	ldd	r30, Y+9	; 0x09
    d0fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    d100:	80 81       	ld	r24, Z
    d102:	80 ff       	sbrs	r24, 0
    d104:	07 c0       	rjmp	.+14     	; 0xd114 <DoPlay+0x1226>
    d106:	ea a5       	ldd	r30, Y+42	; 0x2a
    d108:	fb a5       	ldd	r31, Y+43	; 0x2b
    d10a:	e0 0f       	add	r30, r16
    d10c:	f1 1d       	adc	r31, r1
    d10e:	80 81       	ld	r24, Z
    d110:	87 fd       	sbrc	r24, 7
    d112:	15 c0       	rjmp	.+42     	; 0xd13e <DoPlay+0x1250>
					t = 0;//flash on and off
				else if((state[p]&EXPLODING) && get_scoring(x,y,p))
    d114:	91 ff       	sbrs	r25, 1
    d116:	0c c0       	rjmp	.+24     	; 0xd130 <DoPlay+0x1242>
    d118:	e8 a5       	ldd	r30, Y+40	; 0x28
    d11a:	f9 a5       	ldd	r31, Y+41	; 0x29
    d11c:	e0 0f       	add	r30, r16
    d11e:	f1 1d       	adc	r31, r1
    d120:	80 81       	ld	r24, Z
    d122:	87 ff       	sbrs	r24, 7
    d124:	05 c0       	rjmp	.+10     	; 0xd130 <DoPlay+0x1242>
					t = 10+stateframe[p];//>10 IS EXPLODING FRAMES
    d126:	a9 85       	ldd	r26, Y+9	; 0x09
    d128:	ba 85       	ldd	r27, Y+10	; 0x0a
    d12a:	2c 91       	ld	r18, X
    d12c:	26 5f       	subi	r18, 0xF6	; 246
    d12e:	08 c0       	rjmp	.+16     	; 0xd140 <DoPlay+0x1252>
				else{
					t = well[woffset];
    d130:	f5 01       	movw	r30, r10
    d132:	20 81       	ld	r18, Z
					if((t & FLASHINGJEWEL) && (globalflashcounter&4))
    d134:	25 ff       	sbrs	r18, 5
    d136:	04 c0       	rjmp	.+8      	; 0xd140 <DoPlay+0x1252>
    d138:	80 91 01 01 	lds	r24, 0x0101
    d13c:	82 fd       	sbrc	r24, 2
    d13e:	20 e0       	ldi	r18, 0x00	; 0
    d140:	91 2f       	mov	r25, r17
    d142:	91 50       	subi	r25, 0x01	; 1
inline void DrawJewel(uint8_t x, int16_t y, uint8_t t, uint8_t p){
	if(t == 0){
    d144:	22 23       	and	r18, r18
    d146:	b9 f4       	brne	.+46     	; 0xd176 <DoPlay+0x1288>
		t = FIRSTGRIDRT+(p*3);
		vram[x+(y*VRAM_TILES_H)+0] = t++;
    d148:	29 2f       	mov	r18, r25
    d14a:	30 e0       	ldi	r19, 0x00	; 0
    d14c:	f9 01       	movw	r30, r18
    d14e:	ee 0d       	add	r30, r14
    d150:	ff 1d       	adc	r31, r15
    d152:	e0 5e       	subi	r30, 0xE0	; 224
    d154:	fe 4f       	sbci	r31, 0xFE	; 254
    d156:	49 89       	ldd	r20, Y+17	; 0x11
    d158:	40 83       	st	Z, r20
		vram[x+(y*VRAM_TILES_H)+1] = t++;
    d15a:	58 89       	ldd	r21, Y+16	; 0x10
    d15c:	51 83       	std	Z+1, r21	; 0x01
		vram[x+((y+1)*VRAM_TILES_H)+0] = t;
    d15e:	aa a1       	ldd	r26, Y+34	; 0x22
    d160:	bb a1       	ldd	r27, Y+35	; 0x23
    d162:	a2 0f       	add	r26, r18
    d164:	b3 1f       	adc	r27, r19
    d166:	a0 5e       	subi	r26, 0xE0	; 224
    d168:	be 4f       	sbci	r27, 0xFE	; 254
    d16a:	6f 85       	ldd	r22, Y+15	; 0x0f
    d16c:	6c 93       	st	X, r22
		vram[x+((y+1)*VRAM_TILES_H)+1] = RAM_TILES_COUNT;
    d16e:	74 e2       	ldi	r23, 0x24	; 36
    d170:	11 96       	adiw	r26, 0x01	; 1
    d172:	7c 93       	st	X, r23
    d174:	c6 c0       	rjmp	.+396    	; 0xd302 <DoPlay+0x1414>
		return;
	}

	if(t & HALFSTEP){//is a half step down, so draw y+1
    d176:	26 ff       	sbrs	r18, 6
    d178:	10 c0       	rjmp	.+32     	; 0xd19a <DoPlay+0x12ac>
	//BLANK ABOVE THIS JEWEL
	if(y > -1){
    d17a:	ad a5       	ldd	r26, Y+45	; 0x2d
    d17c:	be a5       	ldd	r27, Y+46	; 0x2e
    d17e:	b7 fd       	sbrc	r27, 7
    d180:	09 c0       	rjmp	.+18     	; 0xd194 <DoPlay+0x12a6>
		vram[x+(y*VRAM_TILES_H)] = FIRSTGRIDRT+(p*3);
    d182:	f7 01       	movw	r30, r14
    d184:	e9 0f       	add	r30, r25
    d186:	f1 1d       	adc	r31, r1
    d188:	e0 5e       	subi	r30, 0xE0	; 224
    d18a:	fe 4f       	sbci	r31, 0xFE	; 254
    d18c:	b9 89       	ldd	r27, Y+17	; 0x11
    d18e:	b0 83       	st	Z, r27
		vram[x+(y*VRAM_TILES_H)+1] = FIRSTGRIDRT+(p*3)+1;
    d190:	38 89       	ldd	r19, Y+16	; 0x10
    d192:	31 83       	std	Z+1, r19	; 0x01
    d194:	48 a1       	ldd	r20, Y+32	; 0x20
    d196:	59 a1       	ldd	r21, Y+33	; 0x21
    d198:	07 c0       	rjmp	.+14     	; 0xd1a8 <DoPlay+0x12ba>
	}
	y++;
}
if(y < -1)
    d19a:	4d a5       	ldd	r20, Y+45	; 0x2d
    d19c:	5e a5       	ldd	r21, Y+46	; 0x2e
    d19e:	6f ef       	ldi	r22, 0xFF	; 255
    d1a0:	4f 3f       	cpi	r20, 0xFF	; 255
    d1a2:	56 07       	cpc	r21, r22
    d1a4:	0c f4       	brge	.+2      	; 0xd1a8 <DoPlay+0x12ba>
    d1a6:	ad c0       	rjmp	.+346    	; 0xd302 <DoPlay+0x1414>
return;
t &= 0b00011111;//get rid of status bits
    d1a8:	82 2f       	mov	r24, r18
    d1aa:	8f 71       	andi	r24, 0x1F	; 31

if(t>19){//crash bar
    d1ac:	84 31       	cpi	r24, 0x14	; 20
    d1ae:	58 f1       	brcs	.+86     	; 0xd206 <DoPlay+0x1318>
t -= 20;
t *= 4;
    d1b0:	84 51       	subi	r24, 0x14	; 20
    d1b2:	88 0f       	add	r24, r24
    d1b4:	88 0f       	add	r24, r24
t += FIRSTCRASHRT;
    d1b6:	86 5e       	subi	r24, 0xE6	; 230
set_vram(x+0,y+0,t++);
    d1b8:	a4 2f       	mov	r26, r20

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    d1ba:	44 9d       	mul	r20, r4
    d1bc:	a0 01       	movw	r20, r0
    d1be:	11 24       	eor	r1, r1
    d1c0:	29 2f       	mov	r18, r25
    d1c2:	30 e0       	ldi	r19, 0x00	; 0
    d1c4:	fa 01       	movw	r30, r20
    d1c6:	e0 5e       	subi	r30, 0xE0	; 224
    d1c8:	fe 4f       	sbci	r31, 0xFE	; 254
    d1ca:	e2 0f       	add	r30, r18
    d1cc:	f3 1f       	adc	r31, r19
    d1ce:	80 83       	st	Z, r24
    d1d0:	8a 51       	subi	r24, 0x1A	; 26
set_vram(x+1,y+0,t++);
    d1d2:	98 2f       	mov	r25, r24
    d1d4:	94 5e       	subi	r25, 0xE4	; 228
    d1d6:	61 2f       	mov	r22, r17
    d1d8:	70 e0       	ldi	r23, 0x00	; 0
    d1da:	fb 01       	movw	r30, r22
    d1dc:	e0 5e       	subi	r30, 0xE0	; 224
    d1de:	fe 4f       	sbci	r31, 0xFE	; 254
    d1e0:	e4 0f       	add	r30, r20
    d1e2:	f5 1f       	adc	r31, r21

if(t>19){//crash bar
t -= 20;
t *= 4;
t += FIRSTCRASHRT;
set_vram(x+0,y+0,t++);
    d1e4:	85 5e       	subi	r24, 0xE5	; 229
    d1e6:	80 83       	st	Z, r24
set_vram(x+0,y+1,t++);
set_vram(x+1,y+1,t);
return;

	}
	if(t>9){//explosion
    d1e8:	af 5f       	subi	r26, 0xFF	; 255
    d1ea:	a4 9d       	mul	r26, r4
    d1ec:	d0 01       	movw	r26, r0
    d1ee:	11 24       	eor	r1, r1
    d1f0:	a0 5e       	subi	r26, 0xE0	; 224
    d1f2:	be 4f       	sbci	r27, 0xFE	; 254
    d1f4:	2a 0f       	add	r18, r26
    d1f6:	3b 1f       	adc	r19, r27
    d1f8:	f9 01       	movw	r30, r18
    d1fa:	90 83       	st	Z, r25
    d1fc:	a6 0f       	add	r26, r22
    d1fe:	b7 1f       	adc	r27, r23
    d200:	8e 5f       	subi	r24, 0xFE	; 254
    d202:	8c 93       	st	X, r24
    d204:	7e c0       	rjmp	.+252    	; 0xd302 <DoPlay+0x1414>
    d206:	8a 30       	cpi	r24, 0x0A	; 10
    d208:	40 f1       	brcs	.+80     	; 0xd25a <DoPlay+0x136c>
		t = FIRSTEXPLOSIONRT+(p*4);
		set_vram(x+0,y+0,t+0);
    d20a:	a4 2f       	mov	r26, r20
    d20c:	44 9d       	mul	r20, r4
    d20e:	90 01       	movw	r18, r0
    d210:	11 24       	eor	r1, r1
    d212:	89 2f       	mov	r24, r25
    d214:	90 e0       	ldi	r25, 0x00	; 0
    d216:	b9 01       	movw	r22, r18
    d218:	60 5e       	subi	r22, 0xE0	; 224
    d21a:	7e 4f       	sbci	r23, 0xFE	; 254
    d21c:	68 0f       	add	r22, r24
    d21e:	79 1f       	adc	r23, r25
    d220:	4e 85       	ldd	r20, Y+14	; 0x0e
    d222:	fb 01       	movw	r30, r22
    d224:	40 83       	st	Z, r20
		set_vram(x+1,y+0,t+1);
		set_vram(x+0,y+1,t+2);
		set_vram(x+1,y+1,t+3);
		return;
	}
	if(t>6){//flashing jewel
    d226:	41 2f       	mov	r20, r17
    d228:	50 e0       	ldi	r21, 0x00	; 0
    d22a:	ba 01       	movw	r22, r20
    d22c:	60 5e       	subi	r22, 0xE0	; 224
    d22e:	7e 4f       	sbci	r23, 0xFE	; 254
    d230:	62 0f       	add	r22, r18
    d232:	73 1f       	adc	r23, r19
    d234:	2d 85       	ldd	r18, Y+13	; 0x0d
    d236:	fb 01       	movw	r30, r22
    d238:	20 83       	st	Z, r18
    d23a:	af 5f       	subi	r26, 0xFF	; 255
    d23c:	a4 9d       	mul	r26, r4
    d23e:	d0 01       	movw	r26, r0
    d240:	11 24       	eor	r1, r1
    d242:	a0 5e       	subi	r26, 0xE0	; 224
    d244:	be 4f       	sbci	r27, 0xFE	; 254
    d246:	8a 0f       	add	r24, r26
    d248:	9b 1f       	adc	r25, r27
    d24a:	2c 85       	ldd	r18, Y+12	; 0x0c
    d24c:	fc 01       	movw	r30, r24
    d24e:	20 83       	st	Z, r18
    d250:	a4 0f       	add	r26, r20
    d252:	b5 1f       	adc	r27, r21
    d254:	3b 85       	ldd	r19, Y+11	; 0x0b
    d256:	3c 93       	st	X, r19
    d258:	54 c0       	rjmp	.+168    	; 0xd302 <DoPlay+0x1414>
    d25a:	87 30       	cpi	r24, 0x07	; 7
    d25c:	58 f1       	brcs	.+86     	; 0xd2b4 <DoPlay+0x13c6>
		t -= 7;
		t *= 4;
    d25e:	87 50       	subi	r24, 0x07	; 7
    d260:	28 2f       	mov	r18, r24
    d262:	30 e0       	ldi	r19, 0x00	; 0
    d264:	22 0f       	add	r18, r18
    d266:	33 1f       	adc	r19, r19
    d268:	22 0f       	add	r18, r18
    d26a:	33 1f       	adc	r19, r19
    d26c:	82 2f       	mov	r24, r18

		if(y > -1){
    d26e:	6f ef       	ldi	r22, 0xFF	; 255
    d270:	4f 3f       	cpi	r20, 0xFF	; 255
    d272:	56 07       	cpc	r21, r22
    d274:	71 f0       	breq	.+28     	; 0xd292 <DoPlay+0x13a4>
    d276:	44 9d       	mul	r20, r4
    d278:	f0 01       	movw	r30, r0
    d27a:	11 24       	eor	r1, r1
    d27c:	e0 5e       	subi	r30, 0xE0	; 224
    d27e:	fe 4f       	sbci	r31, 0xFE	; 254
    d280:	df 01       	movw	r26, r30
    d282:	a9 0f       	add	r26, r25
    d284:	b1 1d       	adc	r27, r1
    d286:	2c 93       	st	X, r18
		set_vram(x+0,y+1,t+2);
		set_vram(x+1,y+1,t+3);	
		return;
	}else{//normal jewel
		t--;
		t *= 4;
    d288:	e1 0f       	add	r30, r17
    d28a:	f1 1d       	adc	r31, r1
    d28c:	8f 5f       	subi	r24, 0xFF	; 255
    d28e:	80 83       	st	Z, r24
    d290:	81 50       	subi	r24, 0x01	; 1
    d292:	e4 2f       	mov	r30, r20
    d294:	ef 5f       	subi	r30, 0xFF	; 255
    d296:	e4 9d       	mul	r30, r4
    d298:	f0 01       	movw	r30, r0
    d29a:	11 24       	eor	r1, r1
    d29c:	e0 5e       	subi	r30, 0xE0	; 224
    d29e:	fe 4f       	sbci	r31, 0xFE	; 254
    d2a0:	df 01       	movw	r26, r30
    d2a2:	a9 0f       	add	r26, r25
    d2a4:	b1 1d       	adc	r27, r1
    d2a6:	8e 5f       	subi	r24, 0xFE	; 254
    d2a8:	8c 93       	st	X, r24
    d2aa:	e1 0f       	add	r30, r17
    d2ac:	f1 1d       	adc	r31, r1
    d2ae:	8f 5f       	subi	r24, 0xFF	; 255
    d2b0:	80 83       	st	Z, r24
    d2b2:	27 c0       	rjmp	.+78     	; 0xd302 <DoPlay+0x1414>
    d2b4:	81 50       	subi	r24, 0x01	; 1
    d2b6:	88 0f       	add	r24, r24
    d2b8:	88 0f       	add	r24, r24
    d2ba:	28 2f       	mov	r18, r24
    d2bc:	2d 5e       	subi	r18, 0xED	; 237
		t += 3;
	}
	t += JEWELSTART;
	if(y >= 0){
    d2be:	7f ef       	ldi	r23, 0xFF	; 255
    d2c0:	4f 3f       	cpi	r20, 0xFF	; 255
    d2c2:	57 07       	cpc	r21, r23
    d2c4:	71 f0       	breq	.+28     	; 0xd2e2 <DoPlay+0x13f4>
    d2c6:	44 9d       	mul	r20, r4
    d2c8:	f0 01       	movw	r30, r0
    d2ca:	11 24       	eor	r1, r1
    d2cc:	e0 5e       	subi	r30, 0xE0	; 224
    d2ce:	fe 4f       	sbci	r31, 0xFE	; 254
    d2d0:	df 01       	movw	r26, r30
    d2d2:	a9 0f       	add	r26, r25
    d2d4:	b1 1d       	adc	r27, r1
    d2d6:	8b 5c       	subi	r24, 0xCB	; 203
    d2d8:	8c 93       	st	X, r24
					if((t & FLASHINGJEWEL) && (globalflashcounter&4))
						t = 0;
				}				

				DrawJewel(ox+(x*2),((y-3)*2),t,p);
				if(woffset == (p*WELLSIZE)){
    d2da:	e1 0f       	add	r30, r17
    d2dc:	f1 1d       	adc	r31, r1
    d2de:	8f 5f       	subi	r24, 0xFF	; 255
    d2e0:	80 83       	st	Z, r24
    d2e2:	4f 5f       	subi	r20, 0xFF	; 255
    d2e4:	5f 4f       	sbci	r21, 0xFF	; 255
    d2e6:	44 9d       	mul	r20, r4
    d2e8:	f0 01       	movw	r30, r0
    d2ea:	11 24       	eor	r1, r1
    d2ec:	e0 5e       	subi	r30, 0xE0	; 224
    d2ee:	fe 4f       	sbci	r31, 0xFE	; 254
    d2f0:	df 01       	movw	r26, r30
    d2f2:	a9 0f       	add	r26, r25
    d2f4:	b1 1d       	adc	r27, r1
    d2f6:	2c 5d       	subi	r18, 0xDC	; 220
    d2f8:	2c 93       	st	X, r18
    d2fa:	e1 0f       	add	r30, r17
    d2fc:	f1 1d       	adc	r31, r1
    d2fe:	2f 5f       	subi	r18, 0xFF	; 255
    d300:	20 83       	st	Z, r18
    d302:	8a 89       	ldd	r24, Y+18	; 0x12
    d304:	9b 89       	ldd	r25, Y+19	; 0x13
    d306:	c8 16       	cp	r12, r24
    d308:	d9 06       	cpc	r13, r25
    d30a:	e9 f1       	breq	.+122    	; 0xd386 <DoPlay+0x1498>
					goto wellend;
					//y = -33;
					//break;
				}
				woffset--;
    d30c:	08 94       	sec
    d30e:	c1 08       	sbc	r12, r1
    d310:	d1 08       	sbc	r13, r1
		uint16_t woffset = (p*WELLSIZE)+WELLSIZE-1;//start at last jewel spot
		uint8_t t;
	//	ox = p*18;//not needed
		//Draw actual well
		for(int8_t y=15;y>1;y--){
			for(int8_t x=5;x>-1;x--){
    d312:	01 50       	subi	r16, 0x01	; 1
    d314:	12 50       	subi	r17, 0x02	; 2
    d316:	08 94       	sec
    d318:	a1 08       	sbc	r10, r1
    d31a:	b1 08       	sbc	r11, r1
    d31c:	0f 3f       	cpi	r16, 0xFF	; 255
    d31e:	09 f0       	breq	.+2      	; 0xd322 <DoPlay+0x1434>
    d320:	e7 ce       	rjmp	.-562    	; 0xd0f0 <DoPlay+0x1202>
    d322:	a4 ec       	ldi	r26, 0xC4	; 196
    d324:	bf ef       	ldi	r27, 0xFF	; 255
    d326:	ea 0e       	add	r14, r26
    d328:	fb 1e       	adc	r15, r27
    d32a:	ed a5       	ldd	r30, Y+45	; 0x2d
    d32c:	fe a5       	ldd	r31, Y+46	; 0x2e
    d32e:	32 97       	sbiw	r30, 0x02	; 2
    d330:	fe a7       	std	Y+46, r31	; 0x2e
    d332:	ed a7       	std	Y+45, r30	; 0x2d
    d334:	2a ef       	ldi	r18, 0xFA	; 250
    d336:	3f ef       	ldi	r19, 0xFF	; 255
    d338:	62 0e       	add	r6, r18
    d33a:	73 1e       	adc	r7, r19
    d33c:	82 0e       	add	r8, r18
    d33e:	93 1e       	adc	r9, r19

		uint16_t woffset = (p*WELLSIZE)+WELLSIZE-1;//start at last jewel spot
		uint8_t t;
	//	ox = p*18;//not needed
		//Draw actual well
		for(int8_t y=15;y>1;y--){
    d340:	38 e8       	ldi	r19, 0x88	; 136
    d342:	e3 16       	cp	r14, r19
    d344:	3f ef       	ldi	r19, 0xFF	; 255
    d346:	f3 06       	cpc	r15, r19
    d348:	f1 f0       	breq	.+60     	; 0xd386 <DoPlay+0x1498>
    d34a:	a7 01       	movw	r20, r14
    d34c:	42 5e       	subi	r20, 0xE2	; 226
    d34e:	5f 4f       	sbci	r21, 0xFF	; 255
    d350:	5b a3       	std	Y+35, r21	; 0x23
    d352:	4a a3       	std	Y+34, r20	; 0x22
    d354:	6d a5       	ldd	r22, Y+45	; 0x2d
    d356:	7e a5       	ldd	r23, Y+46	; 0x2e
    d358:	6f 5f       	subi	r22, 0xFF	; 255
    d35a:	7f 4f       	sbci	r23, 0xFF	; 255
    d35c:	79 a3       	std	Y+33, r23	; 0x21
    d35e:	68 a3       	std	Y+32, r22	; 0x20
    d360:	1c a5       	ldd	r17, Y+44	; 0x2c
    d362:	2d ea       	ldi	r18, 0xAD	; 173
    d364:	a2 2e       	mov	r10, r18
    d366:	2e e0       	ldi	r18, 0x0E	; 14
    d368:	b2 2e       	mov	r11, r18
    d36a:	ac 0c       	add	r10, r12
    d36c:	bd 1c       	adc	r11, r13
    d36e:	05 e0       	ldi	r16, 0x05	; 5
			for(int8_t x=5;x>-1;x--){
				if((state[p]&SCORING) && (stateframe[p]&1) && get_scoring(x,y,p))				
					t = 0;//flash on and off
				else if((state[p]&EXPLODING) && get_scoring(x,y,p))
    d370:	c4 01       	movw	r24, r8
    d372:	83 55       	subi	r24, 0x53	; 83
    d374:	91 4f       	sbci	r25, 0xF1	; 241
    d376:	99 a7       	std	Y+41, r25	; 0x29
    d378:	88 a7       	std	Y+40, r24	; 0x28
		uint8_t t;
	//	ox = p*18;//not needed
		//Draw actual well
		for(int8_t y=15;y>1;y--){
			for(int8_t x=5;x>-1;x--){
				if((state[p]&SCORING) && (stateframe[p]&1) && get_scoring(x,y,p))				
    d37a:	d3 01       	movw	r26, r6
    d37c:	a3 55       	subi	r26, 0x53	; 83
    d37e:	b1 4f       	sbci	r27, 0xF1	; 241
    d380:	bb a7       	std	Y+43, r27	; 0x2b
    d382:	aa a7       	std	Y+42, r26	; 0x2a
    d384:	b5 ce       	rjmp	.-662    	; 0xd0f0 <DoPlay+0x1202>


inline void StateDraw(uint8_t p){
		uint8_t ox = (p*16)+1;

		if(state[p] == GETREADY){
    d386:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d388:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d38a:	80 81       	ld	r24, Z
    d38c:	80 38       	cpi	r24, 0x80	; 128
    d38e:	19 f5       	brne	.+70     	; 0xd3d6 <DoPlay+0x14e8>
			if(p == 0){
    d390:	22 20       	and	r2, r2
    d392:	e1 f4       	brne	.+56     	; 0xd3cc <DoPlay+0x14de>
				uint8_t color = pgm_read_byte(&GetReadyPallet[(level*(GLOBALFLASHCOUNT+1))+(globalflashcounter)]);
    d394:	e0 91 83 0f 	lds	r30, 0x0F83
    d398:	f0 e0       	ldi	r31, 0x00	; 0
    d39a:	94 e0       	ldi	r25, 0x04	; 4
    d39c:	ee 0f       	add	r30, r30
    d39e:	ff 1f       	adc	r31, r31
    d3a0:	9a 95       	dec	r25
    d3a2:	e1 f7       	brne	.-8      	; 0xd39c <DoPlay+0x14ae>
    d3a4:	80 91 01 01 	lds	r24, 0x0101
    d3a8:	e8 0f       	add	r30, r24
    d3aa:	f1 1d       	adc	r31, r1
    d3ac:	e7 5e       	subi	r30, 0xE7	; 231
    d3ae:	f5 4e       	sbci	r31, 0xE5	; 229
    d3b0:	e4 91       	lpm	r30, Z+
				rtl_RamifyFontEx(0,readycharmap,charlist,compfont,0,color,false);
    d3b2:	80 e0       	ldi	r24, 0x00	; 0
    d3b4:	90 e0       	ldi	r25, 0x00	; 0
    d3b6:	68 e5       	ldi	r22, 0x58	; 88
    d3b8:	7b e8       	ldi	r23, 0x8B	; 139
    d3ba:	42 e1       	ldi	r20, 0x12	; 18
    d3bc:	5c e1       	ldi	r21, 0x1C	; 28
    d3be:	20 e5       	ldi	r18, 0x50	; 80
    d3c0:	3a e1       	ldi	r19, 0x1A	; 26
    d3c2:	00 e0       	ldi	r16, 0x00	; 0
    d3c4:	ee 2e       	mov	r14, r30
    d3c6:	cc 24       	eor	r12, r12
    d3c8:	0e 94 06 54 	call	0xa80c	; 0xa80c <rtl_RamifyFontEx>
			 }
			 rtl_Print(ox+3,6,PSTR("READY!"));
    d3cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d3ce:	66 e0       	ldi	r22, 0x06	; 6
    d3d0:	41 ea       	ldi	r20, 0xA1	; 161
    d3d2:	5c e8       	ldi	r21, 0x8C	; 140
    d3d4:	b5 c0       	rjmp	.+362    	; 0xd540 <DoPlay+0x1652>
			return;
		}

		if(state[p] & PAUSED){
    d3d6:	90 e0       	ldi	r25, 0x00	; 0
    d3d8:	86 ff       	sbrs	r24, 6
    d3da:	2f c0       	rjmp	.+94     	; 0xd43a <DoPlay+0x154c>
		//	for(uint8_t y=0;y<7;y++){//blank preview(done in dodraw())
			//	set_tile(13+(p*2),y,0);
		//		set_tile(14+(p*2),y,0);
		//	}

			if(p == 0){
    d3dc:	22 20       	and	r2, r2
    d3de:	19 f5       	brne	.+70     	; 0xd426 <DoPlay+0x1538>

				rtl_RamifyFontEx(0,pausecharmap,charlist,compfont,0,255,true);
    d3e0:	80 e0       	ldi	r24, 0x00	; 0
    d3e2:	90 e0       	ldi	r25, 0x00	; 0
    d3e4:	6f e5       	ldi	r22, 0x5F	; 95
    d3e6:	7b e8       	ldi	r23, 0x8B	; 139
    d3e8:	42 e1       	ldi	r20, 0x12	; 18
    d3ea:	5c e1       	ldi	r21, 0x1C	; 28
    d3ec:	20 e5       	ldi	r18, 0x50	; 80
    d3ee:	3a e1       	ldi	r19, 0x1A	; 26
    d3f0:	00 e0       	ldi	r16, 0x00	; 0
    d3f2:	ee 24       	eor	r14, r14
    d3f4:	ea 94       	dec	r14
    d3f6:	cc 24       	eor	r12, r12
    d3f8:	c3 94       	inc	r12
    d3fa:	0e 94 06 54 	call	0xa80c	; 0xa80c <rtl_RamifyFontEx>
				rtl_Print(3,13+cursorpos,PSTR(">"));
    d3fe:	60 91 85 0f 	lds	r22, 0x0F85
    d402:	63 5f       	subi	r22, 0xF3	; 243
    d404:	83 e0       	ldi	r24, 0x03	; 3
    d406:	4f e9       	ldi	r20, 0x9F	; 159
    d408:	5c e8       	ldi	r21, 0x8C	; 140
    d40a:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
				rtl_Print(4,13,PSTR("RESUME"));
    d40e:	84 e0       	ldi	r24, 0x04	; 4
    d410:	6d e0       	ldi	r22, 0x0D	; 13
    d412:	48 e9       	ldi	r20, 0x98	; 152
    d414:	5c e8       	ldi	r21, 0x8C	; 140
    d416:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
				rtl_Print(4,14,PSTR("QUIT"));
    d41a:	84 e0       	ldi	r24, 0x04	; 4
    d41c:	6e e0       	ldi	r22, 0x0E	; 14
    d41e:	43 e9       	ldi	r20, 0x93	; 147
    d420:	5c e8       	ldi	r21, 0x8C	; 140
    d422:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
			//	ramtilestate[0] = NEEDALLRAMMED;//MAKE SURE EVERYTHING IS SET BACK UP AFTER PAUSE
			}				
			if(globalflashcounter < (GLOBALFLASHCOUNT/2)){
    d426:	80 91 01 01 	lds	r24, 0x0101
    d42a:	87 30       	cpi	r24, 0x07	; 7
    d42c:	08 f0       	brcs	.+2      	; 0xd430 <DoPlay+0x1542>
    d42e:	8a c0       	rjmp	.+276    	; 0xd544 <DoPlay+0x1656>
				rtl_Print(ox+3,10,PSTR("PAUSE"));
    d430:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d432:	6a e0       	ldi	r22, 0x0A	; 10
    d434:	4d e8       	ldi	r20, 0x8D	; 141
    d436:	5c e8       	ldi	r21, 0x8C	; 140
    d438:	83 c0       	rjmp	.+262    	; 0xd540 <DoPlay+0x1652>
		*/
		return;
		}
		
		
		if(state[p] & (GAMEOVER|LOSING2)){
    d43a:	88 71       	andi	r24, 0x18	; 24
    d43c:	90 70       	andi	r25, 0x00	; 0
    d43e:	89 2b       	or	r24, r25
    d440:	09 f4       	brne	.+2      	; 0xd444 <DoPlay+0x1556>
    d442:	80 c0       	rjmp	.+256    	; 0xd544 <DoPlay+0x1656>
			if(globalflashcounter < (GLOBALFLASHCOUNT)/2 && crashheight[p] < 8){
    d444:	80 91 01 01 	lds	r24, 0x0101
    d448:	87 30       	cpi	r24, 0x07	; 7
    d44a:	48 f5       	brcc	.+82     	; 0xd49e <DoPlay+0x15b0>
    d44c:	ac 89       	ldd	r26, Y+20	; 0x14
    d44e:	bd 89       	ldd	r27, Y+21	; 0x15
    d450:	8c 91       	ld	r24, X
    d452:	88 30       	cpi	r24, 0x08	; 8
    d454:	20 f5       	brcc	.+72     	; 0xd49e <DoPlay+0x15b0>
				if(p == winner){
    d456:	80 91 82 0f 	lds	r24, 0x0F82
    d45a:	28 16       	cp	r2, r24
    d45c:	31 f4       	brne	.+12     	; 0xd46a <DoPlay+0x157c>
					rtl_Print(ox+2,10,PSTR("WINNER!!"));
    d45e:	83 2d       	mov	r24, r3
    d460:	8d 5f       	subi	r24, 0xFD	; 253
    d462:	6a e0       	ldi	r22, 0x0A	; 10
    d464:	44 e8       	ldi	r20, 0x84	; 132
    d466:	5c e8       	ldi	r21, 0x8C	; 140
    d468:	18 c0       	rjmp	.+48     	; 0xd49a <DoPlay+0x15ac>
				}
				else if(winner == 255){//draw
    d46a:	8f 3f       	cpi	r24, 0xFF	; 255
    d46c:	29 f4       	brne	.+10     	; 0xd478 <DoPlay+0x158a>
					rtl_Print(ox+3,10,PSTR("DRAW!!"));
    d46e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d470:	6a e0       	ldi	r22, 0x0A	; 10
    d472:	4d e7       	ldi	r20, 0x7D	; 125
    d474:	5c e8       	ldi	r21, 0x8C	; 140
    d476:	11 c0       	rjmp	.+34     	; 0xd49a <DoPlay+0x15ac>
				}
				else{
					if(!game_mode && ox>10){//cpu spot
    d478:	80 91 a4 0e 	lds	r24, 0x0EA4
    d47c:	88 23       	and	r24, r24
    d47e:	49 f4       	brne	.+18     	; 0xd492 <DoPlay+0x15a4>
    d480:	33 94       	inc	r3
    d482:	ba e0       	ldi	r27, 0x0A	; 10
    d484:	b3 15       	cp	r27, r3
    d486:	28 f4       	brcc	.+10     	; 0xd492 <DoPlay+0x15a4>
						rtl_Print(ox+1,10,PSTR("CPU FAIL!!"));
    d488:	85 2d       	mov	r24, r5
    d48a:	6a e0       	ldi	r22, 0x0A	; 10
    d48c:	42 e7       	ldi	r20, 0x72	; 114
    d48e:	5c e8       	ldi	r21, 0x8C	; 140
    d490:	04 c0       	rjmp	.+8      	; 0xd49a <DoPlay+0x15ac>
					}
					else
						rtl_Print(ox+1,10,PSTR("TRY AGAIN!"));
    d492:	85 2d       	mov	r24, r5
    d494:	6a e0       	ldi	r22, 0x0A	; 10
    d496:	47 e6       	ldi	r20, 0x67	; 103
    d498:	5c e8       	ldi	r21, 0x8C	; 140
    d49a:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
				}
			}
			if(p == winner){
    d49e:	80 91 82 0f 	lds	r24, 0x0F82
    d4a2:	28 16       	cp	r2, r24
    d4a4:	69 f5       	brne	.+90     	; 0xd500 <DoPlay+0x1612>
				if(!p){//only draw this for human player, or never in 2 player
    d4a6:	22 20       	and	r2, r2
    d4a8:	09 f0       	breq	.+2      	; 0xd4ac <DoPlay+0x15be>
    d4aa:	4c c0       	rjmp	.+152    	; 0xd544 <DoPlay+0x1656>
					if(cpuskill < 9){
    d4ac:	80 91 77 0e 	lds	r24, 0x0E77
    d4b0:	89 30       	cpi	r24, 0x09	; 9
    d4b2:	78 f4       	brcc	.+30     	; 0xd4d2 <DoPlay+0x15e4>
    d4b4:	83 5b       	subi	r24, 0xB3	; 179
    d4b6:	e8 8d       	ldd	r30, Y+24	; 0x18
    d4b8:	f9 8d       	ldd	r31, Y+25	; 0x19
    d4ba:	80 83       	st	Z, r24
						ColumnsPrint1num(ox+11,21,cpuskill);
						rtl_Print(ox+1,20,PSTR("NOW TRY"));
    d4bc:	85 2d       	mov	r24, r5
    d4be:	64 e1       	ldi	r22, 0x14	; 20
    d4c0:	4f e5       	ldi	r20, 0x5F	; 95
    d4c2:	5c e8       	ldi	r21, 0x8C	; 140
    d4c4:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
						rtl_Print(ox+1,21,PSTR("LEVEL"));
    d4c8:	85 2d       	mov	r24, r5
    d4ca:	65 e1       	ldi	r22, 0x15	; 21
    d4cc:	49 e5       	ldi	r20, 0x59	; 89
    d4ce:	5c e8       	ldi	r21, 0x8C	; 140
    d4d0:	37 c0       	rjmp	.+110    	; 0xd540 <DoPlay+0x1652>
					}else{
						rtl_Print(ox+1,14,PSTR("INCREDIBLE!"));
    d4d2:	85 2d       	mov	r24, r5
    d4d4:	6e e0       	ldi	r22, 0x0E	; 14
    d4d6:	4d e4       	ldi	r20, 0x4D	; 77
    d4d8:	5c e8       	ldi	r21, 0x8C	; 140
    d4da:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
						rtl_Print(ox+1,20,PSTR("YOU ARE THE"));
    d4de:	85 2d       	mov	r24, r5
    d4e0:	64 e1       	ldi	r22, 0x14	; 20
    d4e2:	41 e4       	ldi	r20, 0x41	; 65
    d4e4:	5c e8       	ldi	r21, 0x8C	; 140
    d4e6:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
						rtl_Print(ox+1,21,PSTR("COLUMNS"));
    d4ea:	85 2d       	mov	r24, r5
    d4ec:	65 e1       	ldi	r22, 0x15	; 21
    d4ee:	49 e3       	ldi	r20, 0x39	; 57
    d4f0:	5c e8       	ldi	r21, 0x8C	; 140
    d4f2:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
						rtl_Print(ox+1,22,PSTR("MASTER!!!"));
    d4f6:	85 2d       	mov	r24, r5
    d4f8:	66 e1       	ldi	r22, 0x16	; 22
    d4fa:	4f e2       	ldi	r20, 0x2F	; 47
    d4fc:	5c e8       	ldi	r21, 0x8C	; 140
    d4fe:	20 c0       	rjmp	.+64     	; 0xd540 <DoPlay+0x1652>
					}
				}
			}
			else if(game_mode == 0 && p == 0){
    d500:	80 91 a4 0e 	lds	r24, 0x0EA4
    d504:	88 23       	and	r24, r24
    d506:	f1 f4       	brne	.+60     	; 0xd544 <DoPlay+0x1656>
    d508:	22 20       	and	r2, r2
    d50a:	e1 f4       	brne	.+56     	; 0xd544 <DoPlay+0x1656>
				if(crashheight[p] < 3){
    d50c:	ac 89       	ldd	r26, Y+20	; 0x14
    d50e:	bd 89       	ldd	r27, Y+21	; 0x15
    d510:	8c 91       	ld	r24, X
    d512:	83 30       	cpi	r24, 0x03	; 3
    d514:	60 f4       	brcc	.+24     	; 0xd52e <DoPlay+0x1640>
    d516:	80 91 77 0e 	lds	r24, 0x0E77
    d51a:	83 5b       	subi	r24, 0xB3	; 179
    d51c:	e8 8d       	ldd	r30, Y+24	; 0x18
    d51e:	f9 8d       	ldd	r31, Y+25	; 0x19
    d520:	80 83       	st	Z, r24
					ColumnsPrint1num(ox+11,21,cpuskill);
					rtl_Print(ox+1,20,PSTR("BACK TO"));
    d522:	85 2d       	mov	r24, r5
    d524:	64 e1       	ldi	r22, 0x14	; 20
    d526:	47 e2       	ldi	r20, 0x27	; 39
    d528:	5c e8       	ldi	r21, 0x8C	; 140
    d52a:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
				}
				if(crashheight[p] < 2)
    d52e:	ac 89       	ldd	r26, Y+20	; 0x14
    d530:	bd 89       	ldd	r27, Y+21	; 0x15
    d532:	8c 91       	ld	r24, X
    d534:	82 30       	cpi	r24, 0x02	; 2
    d536:	30 f4       	brcc	.+12     	; 0xd544 <DoPlay+0x1656>
					rtl_Print(ox+1,21,PSTR("CPU LEVEL"));
    d538:	85 2d       	mov	r24, r5
    d53a:	65 e1       	ldi	r22, 0x15	; 21
    d53c:	4d e1       	ldi	r20, 0x1D	; 29
    d53e:	5c e8       	ldi	r21, 0x8C	; 140
    d540:	0e 94 bb 54 	call	0xa976	; 0xa976 <rtl_Print>
		}
wellend:
		ox = 13+(p*2);

		StateDraw(p);
		if(!(state[p] & (LOSING|LOSING2|GAMEOVER|PAUSED))){
    d544:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d546:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d548:	80 81       	ld	r24, Z
    d54a:	8c 75       	andi	r24, 0x5C	; 92
    d54c:	19 f0       	breq	.+6      	; 0xd554 <DoPlay+0x1666>
    d54e:	8d e0       	ldi	r24, 0x0D	; 13
    d550:	90 e0       	ldi	r25, 0x00	; 0
    d552:	e7 c0       	rjmp	.+462    	; 0xd722 <DoPlay+0x1834>
			
			if(cursetype[p] != CURSENOPREVIEW)
    d554:	ee 8d       	ldd	r30, Y+30	; 0x1e
    d556:	ff 8d       	ldd	r31, Y+31	; 0x1f
    d558:	ec 56       	subi	r30, 0x6C	; 108
    d55a:	f1 4f       	sbci	r31, 0xF1	; 241
    d55c:	80 81       	ld	r24, Z
    d55e:	80 32       	cpi	r24, 0x20	; 32
    d560:	09 f4       	brne	.+2      	; 0xd564 <DoPlay+0x1676>
    d562:	ca c0       	rjmp	.+404    	; 0xd6f8 <DoPlay+0x180a>
    d564:	ab 80       	ldd	r10, Y+3	; 0x03
    d566:	bc 80       	ldd	r11, Y+4	; 0x04
    d568:	2d e6       	ldi	r18, 0x6D	; 109
    d56a:	3f e0       	ldi	r19, 0x0F	; 15
    d56c:	a2 0e       	add	r10, r18
    d56e:	b3 1e       	adc	r11, r19
    d570:	8f 80       	ldd	r8, Y+7	; 0x07
    d572:	98 84       	ldd	r9, Y+8	; 0x08
    d574:	40 e2       	ldi	r20, 0x20	; 32
    d576:	51 e0       	ldi	r21, 0x01	; 1
    d578:	84 0e       	add	r8, r20
    d57a:	95 1e       	adc	r9, r21
    d57c:	cc 24       	eor	r12, r12
    d57e:	dd 24       	eor	r13, r13
    d580:	84 01       	movw	r16, r8
    d582:	ed 80       	ldd	r14, Y+5	; 0x05
    d584:	fe 80       	ldd	r15, Y+6	; 0x06
    d586:	e4 0e       	add	r14, r20
    d588:	f5 1e       	adc	r15, r21
    d58a:	b6 01       	movw	r22, r12
				for(uint8_t i=0;i<3;i++)
					DrawJewel(ox,oy+(i*2),preview[(p*3)+i],p);
    d58c:	d5 01       	movw	r26, r10
    d58e:	2c 91       	ld	r18, X
inline void DrawJewel(uint8_t x, int16_t y, uint8_t t, uint8_t p){
	if(t == 0){
    d590:	22 23       	and	r18, r18
    d592:	51 f4       	brne	.+20     	; 0xd5a8 <DoPlay+0x16ba>
		t = FIRSTGRIDRT+(p*3);
		vram[x+(y*VRAM_TILES_H)+0] = t++;
    d594:	29 89       	ldd	r18, Y+17	; 0x11
    d596:	f4 01       	movw	r30, r8
    d598:	20 83       	st	Z, r18
		vram[x+(y*VRAM_TILES_H)+1] = t++;
    d59a:	38 89       	ldd	r19, Y+16	; 0x10
    d59c:	31 83       	std	Z+1, r19	; 0x01
		vram[x+((y+1)*VRAM_TILES_H)+0] = t;
    d59e:	4f 85       	ldd	r20, Y+15	; 0x0f
    d5a0:	46 8f       	std	Z+30, r20	; 0x1e
		vram[x+((y+1)*VRAM_TILES_H)+1] = RAM_TILES_COUNT;
    d5a2:	54 e2       	ldi	r21, 0x24	; 36
    d5a4:	57 8f       	std	Z+31, r21	; 0x1f
    d5a6:	98 c0       	rjmp	.+304    	; 0xd6d8 <DoPlay+0x17ea>
		return;
	}

	if(t & HALFSTEP){//is a half step down, so draw y+1
    d5a8:	26 ff       	sbrs	r18, 6
    d5aa:	09 c0       	rjmp	.+18     	; 0xd5be <DoPlay+0x16d0>
	//BLANK ABOVE THIS JEWEL
	if(y > -1){
		vram[x+(y*VRAM_TILES_H)] = FIRSTGRIDRT+(p*3);
    d5ac:	e9 89       	ldd	r30, Y+17	; 0x11
    d5ae:	d4 01       	movw	r26, r8
    d5b0:	ec 93       	st	X, r30
		vram[x+(y*VRAM_TILES_H)+1] = FIRSTGRIDRT+(p*3)+1;
    d5b2:	f8 89       	ldd	r31, Y+16	; 0x10
    d5b4:	11 96       	adiw	r26, 0x01	; 1
    d5b6:	fc 93       	st	X, r31
    d5b8:	b6 01       	movw	r22, r12
    d5ba:	6f 5f       	subi	r22, 0xFF	; 255
    d5bc:	7f 4f       	sbci	r23, 0xFF	; 255
	}
	y++;
}
if(y < -1)
return;
t &= 0b00011111;//get rid of status bits
    d5be:	2f 71       	andi	r18, 0x1F	; 31

if(t>19){//crash bar
    d5c0:	24 31       	cpi	r18, 0x14	; 20
    d5c2:	28 f1       	brcs	.+74     	; 0xd60e <DoPlay+0x1720>
t -= 20;
t *= 4;
    d5c4:	24 51       	subi	r18, 0x14	; 20
    d5c6:	22 0f       	add	r18, r18
    d5c8:	22 0f       	add	r18, r18
t += FIRSTCRASHRT;
    d5ca:	26 5e       	subi	r18, 0xE6	; 230
set_vram(x+0,y+0,t++);
    d5cc:	e6 2f       	mov	r30, r22
    d5ce:	64 9d       	mul	r22, r4
    d5d0:	c0 01       	movw	r24, r0
    d5d2:	11 24       	eor	r1, r1
    d5d4:	d8 01       	movw	r26, r16
    d5d6:	a8 0f       	add	r26, r24
    d5d8:	b9 1f       	adc	r27, r25
    d5da:	2c 93       	st	X, r18
    d5dc:	2a 51       	subi	r18, 0x1A	; 26
set_vram(x+1,y+0,t++);
    d5de:	32 2f       	mov	r19, r18
    d5e0:	34 5e       	subi	r19, 0xE4	; 228
    d5e2:	8e 0d       	add	r24, r14
    d5e4:	9f 1d       	adc	r25, r15

if(t>19){//crash bar
t -= 20;
t *= 4;
t += FIRSTCRASHRT;
set_vram(x+0,y+0,t++);
    d5e6:	25 5e       	subi	r18, 0xE5	; 229
    d5e8:	dc 01       	movw	r26, r24
    d5ea:	2c 93       	st	X, r18
set_vram(x+0,y+1,t++);
set_vram(x+1,y+1,t);
return;

	}
	if(t>9){//explosion
    d5ec:	ef 5f       	subi	r30, 0xFF	; 255
    d5ee:	e4 9d       	mul	r30, r4
    d5f0:	f0 01       	movw	r30, r0
    d5f2:	11 24       	eor	r1, r1
    d5f4:	d8 01       	movw	r26, r16
    d5f6:	ae 0f       	add	r26, r30
    d5f8:	bf 1f       	adc	r27, r31
    d5fa:	3c 93       	st	X, r19
    d5fc:	e0 5e       	subi	r30, 0xE0	; 224
    d5fe:	fe 4f       	sbci	r31, 0xFE	; 254
    d600:	4d 81       	ldd	r20, Y+5	; 0x05
    d602:	5e 81       	ldd	r21, Y+6	; 0x06
    d604:	e4 0f       	add	r30, r20
    d606:	f5 1f       	adc	r31, r21
    d608:	2e 5f       	subi	r18, 0xFE	; 254
    d60a:	20 83       	st	Z, r18
    d60c:	65 c0       	rjmp	.+202    	; 0xd6d8 <DoPlay+0x17ea>
    d60e:	2a 30       	cpi	r18, 0x0A	; 10
    d610:	08 f1       	brcs	.+66     	; 0xd654 <DoPlay+0x1766>
		t = FIRSTEXPLOSIONRT+(p*4);
		set_vram(x+0,y+0,t+0);
    d612:	36 2f       	mov	r19, r22
    d614:	64 9d       	mul	r22, r4
    d616:	d0 01       	movw	r26, r0
    d618:	11 24       	eor	r1, r1
    d61a:	c8 01       	movw	r24, r16
    d61c:	8a 0f       	add	r24, r26
    d61e:	9b 1f       	adc	r25, r27
    d620:	2e 85       	ldd	r18, Y+14	; 0x0e
    d622:	fc 01       	movw	r30, r24
    d624:	20 83       	st	Z, r18
		set_vram(x+1,y+0,t+1);
		set_vram(x+0,y+1,t+2);
		set_vram(x+1,y+1,t+3);
		return;
	}
	if(t>6){//flashing jewel
    d626:	ae 0d       	add	r26, r14
    d628:	bf 1d       	adc	r27, r15
    d62a:	4d 85       	ldd	r20, Y+13	; 0x0d
    d62c:	4c 93       	st	X, r20
    d62e:	3f 5f       	subi	r19, 0xFF	; 255
    d630:	34 9d       	mul	r19, r4
    d632:	f0 01       	movw	r30, r0
    d634:	11 24       	eor	r1, r1
    d636:	98 01       	movw	r18, r16
    d638:	2e 0f       	add	r18, r30
    d63a:	3f 1f       	adc	r19, r31
    d63c:	4c 85       	ldd	r20, Y+12	; 0x0c
    d63e:	d9 01       	movw	r26, r18
    d640:	4c 93       	st	X, r20
    d642:	e0 5e       	subi	r30, 0xE0	; 224
    d644:	fe 4f       	sbci	r31, 0xFE	; 254
    d646:	6d 81       	ldd	r22, Y+5	; 0x05
    d648:	7e 81       	ldd	r23, Y+6	; 0x06
    d64a:	e6 0f       	add	r30, r22
    d64c:	f7 1f       	adc	r31, r23
    d64e:	7b 85       	ldd	r23, Y+11	; 0x0b
    d650:	70 83       	st	Z, r23
    d652:	42 c0       	rjmp	.+132    	; 0xd6d8 <DoPlay+0x17ea>
    d654:	27 30       	cpi	r18, 0x07	; 7
    d656:	10 f1       	brcs	.+68     	; 0xd69c <DoPlay+0x17ae>
		t -= 7;
		t *= 4;
    d658:	27 50       	subi	r18, 0x07	; 7
    d65a:	30 e0       	ldi	r19, 0x00	; 0
    d65c:	22 0f       	add	r18, r18
    d65e:	33 1f       	adc	r19, r19
    d660:	22 0f       	add	r18, r18
    d662:	33 1f       	adc	r19, r19
    d664:	42 2f       	mov	r20, r18

		if(y > -1){
			set_vram(x+0,y+0,t+0);//set to ram tile indices
    d666:	36 2f       	mov	r19, r22
    d668:	64 9d       	mul	r22, r4
    d66a:	d0 01       	movw	r26, r0
    d66c:	11 24       	eor	r1, r1
    d66e:	c8 01       	movw	r24, r16
    d670:	8a 0f       	add	r24, r26
    d672:	9b 1f       	adc	r25, r27
    d674:	fc 01       	movw	r30, r24
    d676:	20 83       	st	Z, r18
		set_vram(x+0,y+1,t+2);
		set_vram(x+1,y+1,t+3);	
		return;
	}else{//normal jewel
		t--;
		t *= 4;
    d678:	ae 0d       	add	r26, r14
    d67a:	bf 1d       	adc	r27, r15
    d67c:	4f 5f       	subi	r20, 0xFF	; 255
    d67e:	4c 93       	st	X, r20
    d680:	3f 5f       	subi	r19, 0xFF	; 255
    d682:	34 9d       	mul	r19, r4
    d684:	f0 01       	movw	r30, r0
    d686:	11 24       	eor	r1, r1
    d688:	d8 01       	movw	r26, r16
    d68a:	ae 0f       	add	r26, r30
    d68c:	bf 1f       	adc	r27, r31
    d68e:	4f 5f       	subi	r20, 0xFF	; 255
    d690:	4c 93       	st	X, r20
    d692:	ee 0d       	add	r30, r14
    d694:	ff 1d       	adc	r31, r15
    d696:	4f 5f       	subi	r20, 0xFF	; 255
    d698:	40 83       	st	Z, r20
    d69a:	1e c0       	rjmp	.+60     	; 0xd6d8 <DoPlay+0x17ea>
    d69c:	82 2f       	mov	r24, r18
    d69e:	81 50       	subi	r24, 0x01	; 1
    d6a0:	88 0f       	add	r24, r24
    d6a2:	88 0f       	add	r24, r24
    d6a4:	64 9d       	mul	r22, r4
    d6a6:	f0 01       	movw	r30, r0
    d6a8:	11 24       	eor	r1, r1
    d6aa:	d8 01       	movw	r26, r16
    d6ac:	ae 0f       	add	r26, r30
    d6ae:	bf 1f       	adc	r27, r31
    d6b0:	8b 5c       	subi	r24, 0xCB	; 203
    d6b2:	8c 93       	st	X, r24

		StateDraw(p);
		if(!(state[p] & (LOSING|LOSING2|GAMEOVER|PAUSED))){
			
			if(cursetype[p] != CURSENOPREVIEW)
				for(uint8_t i=0;i<3;i++)
    d6b4:	ee 0d       	add	r30, r14
    d6b6:	ff 1d       	adc	r31, r15
    d6b8:	8f 5f       	subi	r24, 0xFF	; 255
    d6ba:	80 83       	st	Z, r24
    d6bc:	6f 5f       	subi	r22, 0xFF	; 255
    d6be:	7f 4f       	sbci	r23, 0xFF	; 255
    d6c0:	64 9d       	mul	r22, r4
    d6c2:	f0 01       	movw	r30, r0
    d6c4:	11 24       	eor	r1, r1
    d6c6:	d8 01       	movw	r26, r16
    d6c8:	ae 0f       	add	r26, r30
    d6ca:	bf 1f       	adc	r27, r31
    d6cc:	8f 5f       	subi	r24, 0xFF	; 255
    d6ce:	8c 93       	st	X, r24
    d6d0:	ee 0d       	add	r30, r14
    d6d2:	ff 1d       	adc	r31, r15
    d6d4:	8f 5f       	subi	r24, 0xFF	; 255
    d6d6:	80 83       	st	Z, r24
    d6d8:	08 94       	sec
    d6da:	a1 1c       	adc	r10, r1
    d6dc:	b1 1c       	adc	r11, r1
    d6de:	2c e3       	ldi	r18, 0x3C	; 60
    d6e0:	30 e0       	ldi	r19, 0x00	; 0
    d6e2:	82 0e       	add	r8, r18
    d6e4:	93 1e       	adc	r9, r19
    d6e6:	42 e0       	ldi	r20, 0x02	; 2
    d6e8:	50 e0       	ldi	r21, 0x00	; 0
    d6ea:	c4 0e       	add	r12, r20
    d6ec:	d5 1e       	adc	r13, r21
    d6ee:	56 e0       	ldi	r21, 0x06	; 6
    d6f0:	c5 16       	cp	r12, r21
    d6f2:	d1 04       	cpc	r13, r1
    d6f4:	09 f0       	breq	.+2      	; 0xd6f8 <DoPlay+0x180a>
    d6f6:	49 cf       	rjmp	.-366    	; 0xd58a <DoPlay+0x169c>
					DrawJewel(ox,oy+(i*2),preview[(p*3)+i],p);
		
			//draw score
			ColumnsPrint2num(14+(p*2),6,score[p]);
    d6f8:	ee 8d       	ldd	r30, Y+30	; 0x1e
    d6fa:	ff 8d       	ldd	r31, Y+31	; 0x1f
    d6fc:	ed 58       	subi	r30, 0x8D	; 141
    d6fe:	f0 4f       	sbci	r31, 0xF0	; 240
    d700:	40 81       	ld	r20, Z
    d702:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d704:	66 e0       	ldi	r22, 0x06	; 6
    d706:	50 e0       	ldi	r21, 0x00	; 0
    d708:	0e 94 21 55 	call	0xaa42	; 0xaa42 <ColumnsPrint2num>
    d70c:	11 c0       	rjmp	.+34     	; 0xd730 <DoPlay+0x1842>
    d70e:	64 e2       	ldi	r22, 0x24	; 36
    d710:	60 83       	st	Z, r22
    d712:	7e 96       	adiw	r30, 0x1e	; 30
		}
		else{
			for(uint8_t i=13+0;i<13+4;i++)
			for(uint8_t j=0;j<7;j++)
    d714:	e2 17       	cp	r30, r18
    d716:	f3 07       	cpc	r31, r19
    d718:	d1 f7       	brne	.-12     	; 0xd70e <DoPlay+0x1820>
    d71a:	01 96       	adiw	r24, 0x01	; 1
		
			//draw score
			ColumnsPrint2num(14+(p*2),6,score[p]);
		}
		else{
			for(uint8_t i=13+0;i<13+4;i++)
    d71c:	81 31       	cpi	r24, 0x11	; 17
    d71e:	91 05       	cpc	r25, r1
    d720:	39 f0       	breq	.+14     	; 0xd730 <DoPlay+0x1842>
    d722:	fc 01       	movw	r30, r24
    d724:	e0 5e       	subi	r30, 0xE0	; 224
    d726:	fe 4f       	sbci	r31, 0xFE	; 254
			for(uint8_t j=0;j<7;j++)
    d728:	9c 01       	movw	r18, r24
    d72a:	2e 50       	subi	r18, 0x0E	; 14
    d72c:	3e 4f       	sbci	r19, 0xFE	; 254
    d72e:	ef cf       	rjmp	.-34     	; 0xd70e <DoPlay+0x1820>
		
			//draw score
			ColumnsPrint2num(14+(p*2),6,score[p]);
		}
		else{
			for(uint8_t i=13+0;i<13+4;i++)
    d730:	8e 8d       	ldd	r24, Y+30	; 0x1e
    d732:	9f 8d       	ldd	r25, Y+31	; 0x1f
    d734:	01 96       	adiw	r24, 0x01	; 1
    d736:	9f 8f       	std	Y+31, r25	; 0x1f
    d738:	8e 8f       	std	Y+30, r24	; 0x1e
    d73a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    d73c:	9e 5f       	subi	r25, 0xFE	; 254
    d73e:	9d 8f       	std	Y+29, r25	; 0x1d
    d740:	ab 8d       	ldd	r26, Y+27	; 0x1b
    d742:	bc 8d       	ldd	r27, Y+28	; 0x1c
    d744:	11 96       	adiw	r26, 0x01	; 1
    d746:	bc 8f       	std	Y+28, r27	; 0x1c
    d748:	ab 8f       	std	Y+27, r26	; 0x1b
    d74a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    d74c:	b0 5f       	subi	r27, 0xF0	; 240
    d74e:	ba 8f       	std	Y+26, r27	; 0x1a
    d750:	e8 8d       	ldd	r30, Y+24	; 0x18
    d752:	f9 8d       	ldd	r31, Y+25	; 0x19
    d754:	70 96       	adiw	r30, 0x10	; 16
    d756:	f9 8f       	std	Y+25, r31	; 0x19
    d758:	e8 8f       	std	Y+24, r30	; 0x18
    d75a:	2e 89       	ldd	r18, Y+22	; 0x16
    d75c:	3f 89       	ldd	r19, Y+23	; 0x17
    d75e:	20 5f       	subi	r18, 0xF0	; 240
    d760:	3f 4f       	sbci	r19, 0xFF	; 255
    d762:	3f 8b       	std	Y+23, r19	; 0x17
    d764:	2e 8b       	std	Y+22, r18	; 0x16
    d766:	30 e1       	ldi	r19, 0x10	; 16
    d768:	53 0e       	add	r5, r19
    d76a:	4c 89       	ldd	r20, Y+20	; 0x14
    d76c:	5d 89       	ldd	r21, Y+21	; 0x15
    d76e:	4f 5f       	subi	r20, 0xFF	; 255
    d770:	5f 4f       	sbci	r21, 0xFF	; 255
    d772:	5d 8b       	std	Y+21, r21	; 0x15
    d774:	4c 8b       	std	Y+20, r20	; 0x14
    d776:	6a 89       	ldd	r22, Y+18	; 0x12
    d778:	7b 89       	ldd	r23, Y+19	; 0x13
    d77a:	60 5a       	subi	r22, 0xA0	; 160
    d77c:	7f 4f       	sbci	r23, 0xFF	; 255
    d77e:	7b 8b       	std	Y+19, r23	; 0x13
    d780:	6a 8b       	std	Y+18, r22	; 0x12
    d782:	79 89       	ldd	r23, Y+17	; 0x11
    d784:	7d 5f       	subi	r23, 0xFD	; 253
    d786:	79 8b       	std	Y+17, r23	; 0x11
    d788:	88 89       	ldd	r24, Y+16	; 0x10
    d78a:	8d 5f       	subi	r24, 0xFD	; 253
    d78c:	88 8b       	std	Y+16, r24	; 0x10
    d78e:	9f 85       	ldd	r25, Y+15	; 0x0f
    d790:	9d 5f       	subi	r25, 0xFD	; 253
    d792:	9f 87       	std	Y+15, r25	; 0x0f
    d794:	ae 85       	ldd	r26, Y+14	; 0x0e
    d796:	ac 5f       	subi	r26, 0xFC	; 252
    d798:	ae 87       	std	Y+14, r26	; 0x0e
    d79a:	bd 85       	ldd	r27, Y+13	; 0x0d
    d79c:	bc 5f       	subi	r27, 0xFC	; 252
    d79e:	bd 87       	std	Y+13, r27	; 0x0d
    d7a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    d7a2:	ec 5f       	subi	r30, 0xFC	; 252
    d7a4:	ec 87       	std	Y+12, r30	; 0x0c
    d7a6:	fb 85       	ldd	r31, Y+11	; 0x0b
    d7a8:	fc 5f       	subi	r31, 0xFC	; 252
    d7aa:	fb 87       	std	Y+11, r31	; 0x0b
    d7ac:	29 85       	ldd	r18, Y+9	; 0x09
    d7ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    d7b0:	2f 5f       	subi	r18, 0xFF	; 255
    d7b2:	3f 4f       	sbci	r19, 0xFF	; 255
    d7b4:	3a 87       	std	Y+10, r19	; 0x0a
    d7b6:	29 87       	std	Y+9, r18	; 0x09
    d7b8:	49 81       	ldd	r20, Y+1	; 0x01
    d7ba:	5a 81       	ldd	r21, Y+2	; 0x02
    d7bc:	40 5a       	subi	r20, 0xA0	; 160
    d7be:	5f 4f       	sbci	r21, 0xFF	; 255
    d7c0:	5a 83       	std	Y+2, r21	; 0x02
    d7c2:	49 83       	std	Y+1, r20	; 0x01
    d7c4:	6f 81       	ldd	r22, Y+7	; 0x07
    d7c6:	78 85       	ldd	r23, Y+8	; 0x08
    d7c8:	6e 5f       	subi	r22, 0xFE	; 254
    d7ca:	7f 4f       	sbci	r23, 0xFF	; 255
    d7cc:	78 87       	std	Y+8, r23	; 0x08
    d7ce:	6f 83       	std	Y+7, r22	; 0x07
    d7d0:	8d 81       	ldd	r24, Y+5	; 0x05
    d7d2:	9e 81       	ldd	r25, Y+6	; 0x06
    d7d4:	02 96       	adiw	r24, 0x02	; 2
    d7d6:	9e 83       	std	Y+6, r25	; 0x06
    d7d8:	8d 83       	std	Y+5, r24	; 0x05
    d7da:	ab 81       	ldd	r26, Y+3	; 0x03
    d7dc:	bc 81       	ldd	r27, Y+4	; 0x04
    d7de:	13 96       	adiw	r26, 0x03	; 3
    d7e0:	bc 83       	std	Y+4, r27	; 0x04
    d7e2:	ab 83       	std	Y+3, r26	; 0x03
	//Draw field map
	if(game_state & GS_FIRSTTICK || crashedredrawtime)// || state[0] & (LOSING|LOSING2|GAMEOVER))
		OneTimeDraw();

	//Draw well
	for(uint8_t p=0;p<MAX_PLAYERS;p++){
    d7e4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    d7e6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    d7e8:	32 97       	sbiw	r30, 0x02	; 2
    d7ea:	09 f0       	breq	.+2      	; 0xd7ee <DoPlay+0x1900>
    d7ec:	6a cc       	rjmp	.-1836   	; 0xd0c2 <DoPlay+0x11d4>
	crashedredrawtime--;
}

inline void UpdateTimers(){
//HANDLE TIMERS AND PRIORITIES FOR PCM CHANNEL
		if(pcm_timeleft)
    d7ee:	80 91 8a 0f 	lds	r24, 0x0F8A
    d7f2:	88 23       	and	r24, r24
    d7f4:	19 f0       	breq	.+6      	; 0xd7fc <DoPlay+0x190e>
			pcm_timeleft--;
    d7f6:	81 50       	subi	r24, 0x01	; 1
    d7f8:	80 93 8a 0f 	sts	0x0F8A, r24

		if(globalflashcounter)
    d7fc:	80 91 01 01 	lds	r24, 0x0101
    d800:	88 23       	and	r24, r24
    d802:	11 f0       	breq	.+4      	; 0xd808 <DoPlay+0x191a>
			globalflashcounter--;
    d804:	81 50       	subi	r24, 0x01	; 1
    d806:	01 c0       	rjmp	.+2      	; 0xd80a <DoPlay+0x191c>
		else
			globalflashcounter = GLOBALFLASHCOUNT;
    d808:	8f e0       	ldi	r24, 0x0F	; 15
    d80a:	80 93 01 01 	sts	0x0101, r24

		flashcount++;
    d80e:	80 91 9f 0f 	lds	r24, 0x0F9F
    d812:	8f 5f       	subi	r24, 0xFF	; 255
    d814:	80 93 9f 0f 	sts	0x0F9F, r24
		
		if(flashcount > 12)//TODO  / 2
    d818:	8d 30       	cpi	r24, 0x0D	; 13
    d81a:	18 f0       	brcs	.+6      	; 0xd822 <DoPlay+0x1934>
			flashcount = 7;
    d81c:	87 e0       	ldi	r24, 0x07	; 7
    d81e:	80 93 9f 0f 	sts	0x0F9F, r24

		if(magicjewelsonscreen){
    d822:	80 91 6f 0e 	lds	r24, 0x0E6F
    d826:	88 23       	and	r24, r24
    d828:	d1 f0       	breq	.+52     	; 0xd85e <DoPlay+0x1970>
			if(!magiccolorwait){
    d82a:	80 91 70 0e 	lds	r24, 0x0E70
    d82e:	88 23       	and	r24, r24
    d830:	99 f4       	brne	.+38     	; 0xd858 <DoPlay+0x196a>
				magiccolorwait = 6/2;
    d832:	83 e0       	ldi	r24, 0x03	; 3
    d834:	80 93 70 0e 	sts	0x0E70, r24
			if(magiccolor < 5)
    d838:	80 91 7d 0e 	lds	r24, 0x0E7D
    d83c:	85 30       	cpi	r24, 0x05	; 5
    d83e:	20 f4       	brcc	.+8      	; 0xd848 <DoPlay+0x195a>
				magiccolor++;
    d840:	8f 5f       	subi	r24, 0xFF	; 255
    d842:	80 93 7d 0e 	sts	0x0E7D, r24
    d846:	02 c0       	rjmp	.+4      	; 0xd84c <DoPlay+0x195e>
			else
				magiccolor = 0;
    d848:	10 92 7d 0e 	sts	0x0E7D, r1
			ramtilestate[0] |= NEEDMAGICRAMMED;
    d84c:	80 91 c8 0f 	lds	r24, 0x0FC8
    d850:	81 60       	ori	r24, 0x01	; 1
    d852:	80 93 c8 0f 	sts	0x0FC8, r24
    d856:	03 c0       	rjmp	.+6      	; 0xd85e <DoPlay+0x1970>
		}
		else
			magiccolorwait--;
    d858:	81 50       	subi	r24, 0x01	; 1
    d85a:	80 93 70 0e 	sts	0x0E70, r24
		}

		if((game_state & GS_DEMO) && ++demotime > DEMOLENGTH){
    d85e:	80 91 a6 0e 	lds	r24, 0x0EA6
    d862:	81 ff       	sbrs	r24, 1
    d864:	12 c0       	rjmp	.+36     	; 0xd88a <DoPlay+0x199c>
    d866:	80 91 fb 0f 	lds	r24, 0x0FFB
    d86a:	90 91 fc 0f 	lds	r25, 0x0FFC
    d86e:	01 96       	adiw	r24, 0x01	; 1
    d870:	90 93 fc 0f 	sts	0x0FFC, r25
    d874:	80 93 fb 0f 	sts	0x0FFB, r24
    d878:	89 52       	subi	r24, 0x29	; 41
    d87a:	95 40       	sbci	r25, 0x05	; 5
    d87c:	30 f0       	brcs	.+12     	; 0xd88a <DoPlay+0x199c>
			demotime = 0;
    d87e:	10 92 fc 0f 	sts	0x0FFC, r1
    d882:	10 92 fb 0f 	sts	0x0FFB, r1
			game_state = GS_TITLE;
    d886:	10 92 a6 0e 	sts	0x0EA6, r1
		
		CalculateMusicTempo();
		DoDraw();
		UpdateTimers();
		
		if(game_state & GS_FIRSTTICK)
    d88a:	90 91 a6 0e 	lds	r25, 0x0EA6
    d88e:	95 ff       	sbrs	r25, 5
    d890:	04 c0       	rjmp	.+8      	; 0xd89a <DoPlay+0x19ac>
			game_state ^= GS_FIRSTTICK;
    d892:	80 e2       	ldi	r24, 0x20	; 32
    d894:	98 27       	eor	r25, r24
    d896:	90 93 a6 0e 	sts	0x0EA6, r25
}

inline void UpdateCrashedPieces(){
	//x/y values most significant 5 bits are used as tile coords, lowest 3 bits are used for subposition
	//TODO CRASHED MAGIC JEWELS DONT WORK RIGHT
	if(!crashedredrawtime)
    d89a:	80 91 8d 0f 	lds	r24, 0x0F8D
    d89e:	88 23       	and	r24, r24
    d8a0:	09 f4       	brne	.+2      	; 0xd8a4 <DoPlay+0x19b6>
    d8a2:	89 c0       	rjmp	.+274    	; 0xd9b6 <DoPlay+0x1ac8>
    d8a4:	1f e8       	ldi	r17, 0x8F	; 143
    d8a6:	61 2e       	mov	r6, r17
    d8a8:	1f e0       	ldi	r17, 0x0F	; 15
    d8aa:	71 2e       	mov	r7, r17
    d8ac:	b7 eb       	ldi	r27, 0xB7	; 183
    d8ae:	cb 2e       	mov	r12, r27
    d8b0:	bf e0       	ldi	r27, 0x0F	; 15
    d8b2:	db 2e       	mov	r13, r27
    d8b4:	a8 e8       	ldi	r26, 0x88	; 136
    d8b6:	ea 2e       	mov	r14, r26
    d8b8:	ae e0       	ldi	r26, 0x0E	; 14
    d8ba:	fa 2e       	mov	r15, r26
    d8bc:	f5 ef       	ldi	r31, 0xF5	; 245
    d8be:	af 2e       	mov	r10, r31
    d8c0:	ff e0       	ldi	r31, 0x0F	; 15
    d8c2:	bf 2e       	mov	r11, r31
    d8c4:	01 e7       	ldi	r16, 0x71	; 113
    d8c6:	1e e0       	ldi	r17, 0x0E	; 14
    d8c8:	ee e1       	ldi	r30, 0x1E	; 30
    d8ca:	9e 2e       	mov	r9, r30
		crashedpiecex[i] += crashedxvel[i];
		crashedpiecey[i] += crashedyvel[i];
		crashedyvel[i] += 2;
		
		if(crashedpiecex[i] > (26<<3)){
			crashedtype[i] = 255;//disabled
    d8cc:	88 24       	eor	r8, r8
    d8ce:	8a 94       	dec	r8
	//x/y values most significant 5 bits are used as tile coords, lowest 3 bits are used for subposition
	//TODO CRASHED MAGIC JEWELS DONT WORK RIGHT
	if(!crashedredrawtime)
		return;
	for(uint8_t i=0;i<MAX_PLAYERS*3;i++){
		if(crashedtype[i] == 255)//not active
    d8d0:	d3 01       	movw	r26, r6
    d8d2:	3c 91       	ld	r19, X
    d8d4:	3f 3f       	cpi	r19, 0xFF	; 255
    d8d6:	09 f4       	brne	.+2      	; 0xd8da <DoPlay+0x19ec>
    d8d8:	55 c0       	rjmp	.+170    	; 0xd984 <DoPlay+0x1a96>
			continue;
		
		//apply velocity
		crashedpiecex[i] += crashedxvel[i];
    d8da:	f5 01       	movw	r30, r10
    d8dc:	80 81       	ld	r24, Z
    d8de:	99 27       	eor	r25, r25
    d8e0:	87 fd       	sbrc	r24, 7
    d8e2:	90 95       	com	r25
    d8e4:	f7 01       	movw	r30, r14
    d8e6:	a0 81       	ld	r26, Z
    d8e8:	b1 81       	ldd	r27, Z+1	; 0x01
    d8ea:	a8 0f       	add	r26, r24
    d8ec:	b9 1f       	adc	r27, r25
    d8ee:	b1 83       	std	Z+1, r27	; 0x01
    d8f0:	a0 83       	st	Z, r26
		crashedpiecey[i] += crashedyvel[i];
    d8f2:	f8 01       	movw	r30, r16
    d8f4:	20 81       	ld	r18, Z
    d8f6:	82 2f       	mov	r24, r18
    d8f8:	99 27       	eor	r25, r25
    d8fa:	87 fd       	sbrc	r24, 7
    d8fc:	90 95       	com	r25
    d8fe:	f6 01       	movw	r30, r12
    d900:	40 81       	ld	r20, Z
    d902:	51 81       	ldd	r21, Z+1	; 0x01
    d904:	48 0f       	add	r20, r24
    d906:	59 1f       	adc	r21, r25
    d908:	51 83       	std	Z+1, r21	; 0x01
    d90a:	40 83       	st	Z, r20
		crashedyvel[i] += 2;
    d90c:	2e 5f       	subi	r18, 0xFE	; 254
    d90e:	f8 01       	movw	r30, r16
    d910:	20 83       	st	Z, r18
		
		if(crashedpiecex[i] > (26<<3)){
    d912:	a1 3d       	cpi	r26, 0xD1	; 209
    d914:	b1 05       	cpc	r27, r1
    d916:	18 f0       	brcs	.+6      	; 0xd91e <DoPlay+0x1a30>
			crashedtype[i] = 255;//disabled
    d918:	d3 01       	movw	r26, r6
    d91a:	8c 92       	st	X, r8
    d91c:	33 c0       	rjmp	.+102    	; 0xd984 <DoPlay+0x1a96>
			continue;
		}
		if(crashedpiecey[i] > (26<<3))
    d91e:	41 3d       	cpi	r20, 0xD1	; 209
    d920:	51 05       	cpc	r21, r1
    d922:	80 f5       	brcc	.+96     	; 0xd984 <DoPlay+0x1a96>
			continue;
		
		uint8_t x = crashedpiecex[i]>>3;
    d924:	73 e0       	ldi	r23, 0x03	; 3
    d926:	b6 95       	lsr	r27
    d928:	a7 95       	ror	r26
    d92a:	7a 95       	dec	r23
    d92c:	e1 f7       	brne	.-8      	; 0xd926 <DoPlay+0x1a38>
		uint8_t y = crashedpiecey[i]>>3;
    d92e:	63 e0       	ldi	r22, 0x03	; 3
    d930:	56 95       	lsr	r21
    d932:	47 95       	ror	r20
    d934:	6a 95       	dec	r22
    d936:	e1 f7       	brne	.-8      	; 0xd930 <DoPlay+0x1a42>
    d938:	24 2f       	mov	r18, r20
		uint8_t t = crashedtype[i];
		set_vram(x+0,y+0,t++);
    d93a:	73 2f       	mov	r23, r19
    d93c:	7f 5f       	subi	r23, 0xFF	; 255
    d93e:	49 9d       	mul	r20, r9
    d940:	c0 01       	movw	r24, r0
    d942:	11 24       	eor	r1, r1
    d944:	4a 2f       	mov	r20, r26
    d946:	50 e0       	ldi	r21, 0x00	; 0
    d948:	40 5e       	subi	r20, 0xE0	; 224
    d94a:	5e 4f       	sbci	r21, 0xFE	; 254
    d94c:	fa 01       	movw	r30, r20
    d94e:	e8 0f       	add	r30, r24
    d950:	f9 1f       	adc	r31, r25
    d952:	30 83       	st	Z, r19
		set_vram(x+1,y+0,t++);
    d954:	67 2f       	mov	r22, r23
    d956:	6f 5f       	subi	r22, 0xFF	; 255
    d958:	af 5f       	subi	r26, 0xFF	; 255
    d95a:	b0 e0       	ldi	r27, 0x00	; 0
    d95c:	80 5e       	subi	r24, 0xE0	; 224
    d95e:	9e 4f       	sbci	r25, 0xFE	; 254
    d960:	8a 0f       	add	r24, r26
    d962:	9b 1f       	adc	r25, r27
    d964:	fc 01       	movw	r30, r24
    d966:	70 83       	st	Z, r23
inline void UpdateCrashedPieces(){
	//x/y values most significant 5 bits are used as tile coords, lowest 3 bits are used for subposition
	//TODO CRASHED MAGIC JEWELS DONT WORK RIGHT
	if(!crashedredrawtime)
		return;
	for(uint8_t i=0;i<MAX_PLAYERS*3;i++){
    d968:	2f 5f       	subi	r18, 0xFF	; 255
    d96a:	29 9d       	mul	r18, r9
    d96c:	90 01       	movw	r18, r0
    d96e:	11 24       	eor	r1, r1
    d970:	42 0f       	add	r20, r18
    d972:	53 1f       	adc	r21, r19
    d974:	fa 01       	movw	r30, r20
    d976:	60 83       	st	Z, r22
    d978:	a0 5e       	subi	r26, 0xE0	; 224
    d97a:	be 4f       	sbci	r27, 0xFE	; 254
    d97c:	a2 0f       	add	r26, r18
    d97e:	b3 1f       	adc	r27, r19
    d980:	6f 5f       	subi	r22, 0xFF	; 255
    d982:	6c 93       	st	X, r22
    d984:	08 94       	sec
    d986:	61 1c       	adc	r6, r1
    d988:	71 1c       	adc	r7, r1
    d98a:	22 e0       	ldi	r18, 0x02	; 2
    d98c:	30 e0       	ldi	r19, 0x00	; 0
    d98e:	c2 0e       	add	r12, r18
    d990:	d3 1e       	adc	r13, r19
    d992:	e2 0e       	add	r14, r18
    d994:	f3 1e       	adc	r15, r19
    d996:	08 94       	sec
    d998:	a1 1c       	adc	r10, r1
    d99a:	b1 1c       	adc	r11, r1
    d99c:	0f 5f       	subi	r16, 0xFF	; 255
    d99e:	1f 4f       	sbci	r17, 0xFF	; 255
    d9a0:	35 e9       	ldi	r19, 0x95	; 149
    d9a2:	63 16       	cp	r6, r19
    d9a4:	3f e0       	ldi	r19, 0x0F	; 15
    d9a6:	73 06       	cpc	r7, r19
    d9a8:	09 f0       	breq	.+2      	; 0xd9ac <DoPlay+0x1abe>
    d9aa:	92 cf       	rjmp	.-220    	; 0xd8d0 <DoPlay+0x19e2>
		set_vram(x+0,y+0,t++);
		set_vram(x+1,y+0,t++);
		set_vram(x+0,y+1,t++);
		set_vram(x+1,y+1,t++);
	}
	crashedredrawtime--;
    d9ac:	80 91 8d 0f 	lds	r24, 0x0F8D
    d9b0:	81 50       	subi	r24, 0x01	; 1
    d9b2:	80 93 8d 0f 	sts	0x0F8D, r24
//	}
//UPDATECRASHEDPIECES://TODO, IF CRASHED PIECES ARE STILL ON SCREEN WHEN GAME OVER COMES, THEY GET STUCK
		UpdateCrashedPieces();
		RamTileStateMachine();//take care of all gameplay ram tile updates
    d9b6:	0e 94 aa 58 	call	0xb154	; 0xb154 <RamTileStateMachine>
inline void CpuThink(){//TODO USE LOCAL VARIABLES FOR ANYTHING POSSIBLE
uint16_t cpubaseval;
	//TODO FIND SOME RANDOM INITIAL SEEDS THE CPU PLAYS GOOD GAMES WITH AND STORE ~200 IN ARRAY FOR "GUARANTEED" GOOD CPU PLAYER
	//TODO SEE IF ALL EVALUATION CAN BE DONE WITH 8 BIT
	//FOR EACH INITIAL MOVE, ONLY ADD SCORE FOR BEST SECOND MOVE NOT ALL. 
	if(cpustate & CPUMOVEBLOCKED){
    d9ba:	90 91 a7 0e 	lds	r25, 0x0EA7
    d9be:	96 ff       	sbrs	r25, 6
    d9c0:	31 c0       	rjmp	.+98     	; 0xda24 <DoPlay+0x1b36>
		if(piecex[1] > cpudecision[0]){//we tried to go left but it was blocked, so eliminate all choices to the left
    d9c2:	80 91 a9 0f 	lds	r24, 0x0FA9
    d9c6:	90 91 6d 0e 	lds	r25, 0x0E6D
    d9ca:	98 17       	cp	r25, r24
    d9cc:	a8 f4       	brcc	.+42     	; 0xd9f8 <DoPlay+0x1b0a>
    d9ce:	20 e0       	ldi	r18, 0x00	; 0
			for(uint8_t i=0;i<piecex[1]*3;i++)
    d9d0:	33 e0       	ldi	r19, 0x03	; 3
    d9d2:	07 c0       	rjmp	.+14     	; 0xd9e2 <DoPlay+0x1af4>
				cpueval[i] = 0;
    d9d4:	ee 0f       	add	r30, r30
    d9d6:	ff 1f       	adc	r31, r31
    d9d8:	e6 53       	subi	r30, 0x36	; 54
    d9da:	f0 4f       	sbci	r31, 0xF0	; 240
    d9dc:	11 82       	std	Z+1, r1	; 0x01
    d9de:	10 82       	st	Z, r1
	//TODO FIND SOME RANDOM INITIAL SEEDS THE CPU PLAYS GOOD GAMES WITH AND STORE ~200 IN ARRAY FOR "GUARANTEED" GOOD CPU PLAYER
	//TODO SEE IF ALL EVALUATION CAN BE DONE WITH 8 BIT
	//FOR EACH INITIAL MOVE, ONLY ADD SCORE FOR BEST SECOND MOVE NOT ALL. 
	if(cpustate & CPUMOVEBLOCKED){
		if(piecex[1] > cpudecision[0]){//we tried to go left but it was blocked, so eliminate all choices to the left
			for(uint8_t i=0;i<piecex[1]*3;i++)
    d9e0:	2f 5f       	subi	r18, 0xFF	; 255
    d9e2:	e2 2f       	mov	r30, r18
    d9e4:	f0 e0       	ldi	r31, 0x00	; 0
    d9e6:	80 91 a9 0f 	lds	r24, 0x0FA9
    d9ea:	83 9f       	mul	r24, r19
    d9ec:	c0 01       	movw	r24, r0
    d9ee:	11 24       	eor	r1, r1
    d9f0:	e8 17       	cp	r30, r24
    d9f2:	f9 07       	cpc	r31, r25
    d9f4:	7c f3       	brlt	.-34     	; 0xd9d4 <DoPlay+0x1ae6>
    d9f6:	05 c6       	rjmp	.+3082   	; 0xe602 <DoPlay+0x2714>
				cpueval[i] = 0;
		}
		else if(piecex[1] < cpudecision[0]){//eliminate choices to the right
    d9f8:	89 17       	cp	r24, r25
    d9fa:	08 f0       	brcs	.+2      	; 0xd9fe <DoPlay+0x1b10>
    d9fc:	02 c6       	rjmp	.+3076   	; 0xe602 <DoPlay+0x2714>
			for(uint8_t i=(piecex[1]+1)*3;i<3*6;i++)
    d9fe:	90 e0       	ldi	r25, 0x00	; 0
    da00:	01 96       	adiw	r24, 0x01	; 1
    da02:	9c 01       	movw	r18, r24
    da04:	22 0f       	add	r18, r18
    da06:	33 1f       	adc	r19, r19
    da08:	28 0f       	add	r18, r24
    da0a:	09 c0       	rjmp	.+18     	; 0xda1e <DoPlay+0x1b30>
				cpueval[i] = 0;
    da0c:	e2 2f       	mov	r30, r18
    da0e:	f0 e0       	ldi	r31, 0x00	; 0
    da10:	ee 0f       	add	r30, r30
    da12:	ff 1f       	adc	r31, r31
    da14:	e6 53       	subi	r30, 0x36	; 54
    da16:	f0 4f       	sbci	r31, 0xF0	; 240
    da18:	11 82       	std	Z+1, r1	; 0x01
    da1a:	10 82       	st	Z, r1
		if(piecex[1] > cpudecision[0]){//we tried to go left but it was blocked, so eliminate all choices to the left
			for(uint8_t i=0;i<piecex[1]*3;i++)
				cpueval[i] = 0;
		}
		else if(piecex[1] < cpudecision[0]){//eliminate choices to the right
			for(uint8_t i=(piecex[1]+1)*3;i<3*6;i++)
    da1c:	2f 5f       	subi	r18, 0xFF	; 255
    da1e:	22 31       	cpi	r18, 0x12	; 18
    da20:	a8 f3       	brcs	.-22     	; 0xda0c <DoPlay+0x1b1e>
    da22:	ef c5       	rjmp	.+3038   	; 0xe602 <DoPlay+0x2714>
		}
		
		goto CPUPICKMOVE;
	}
		
	if((game_state & GS_FIRSTTICK) || !cpustate || state[1] & (APPLYGRAVITY|SCORING|EXPLODING|LOSING|LOSING2|GAMEOVER|GETREADY))
    da24:	80 91 a6 0e 	lds	r24, 0x0EA6
    da28:	85 fd       	sbrc	r24, 5
    da2a:	35 c6       	rjmp	.+3178   	; 0xe696 <DoPlay+0x27a8>
    da2c:	99 23       	and	r25, r25
    da2e:	09 f4       	brne	.+2      	; 0xda32 <DoPlay+0x1b44>
    da30:	32 c6       	rjmp	.+3172   	; 0xe696 <DoPlay+0x27a8>
    da32:	80 91 ab 0e 	lds	r24, 0x0EAB
    da36:	8f 7b       	andi	r24, 0xBF	; 191
    da38:	09 f0       	breq	.+2      	; 0xda3c <DoPlay+0x1b4e>
    da3a:	2d c6       	rjmp	.+3162   	; 0xe696 <DoPlay+0x27a8>
		return;

	oldpadstate[1] = padstate[1] = 0;
    da3c:	10 92 85 0e 	sts	0x0E85, r1
    da40:	10 92 84 0e 	sts	0x0E84, r1
    da44:	10 92 81 0e 	sts	0x0E81, r1
    da48:	10 92 80 0e 	sts	0x0E80, r1
	if(cpustate & CPUDECIDED)//done thinking, implement decision
    da4c:	95 fd       	sbrc	r25, 5
    da4e:	23 c6       	rjmp	.+3142   	; 0xe696 <DoPlay+0x27a8>
}


inline bool CpuShouldCrash(){
	if(score[1] > 9){//can crash
    da50:	30 91 74 0f 	lds	r19, 0x0F74
    da54:	3a 30       	cpi	r19, 0x0A	; 10
    da56:	10 f1       	brcs	.+68     	; 0xda9c <DoPlay+0x1bae>
		if((wellfullness[1] > 8*6) || (wellfullness[0]>8*6) ||//if we are in trouble don't die with any unused points! if they are in trouble finish them off!
    da58:	80 91 97 0f 	lds	r24, 0x0F97
    da5c:	90 91 98 0f 	lds	r25, 0x0F98
    da60:	c1 97       	sbiw	r24, 0x31	; 49
    da62:	90 f4       	brcc	.+36     	; 0xda88 <DoPlay+0x1b9a>
    da64:	80 91 95 0f 	lds	r24, 0x0F95
    da68:	90 91 96 0f 	lds	r25, 0x0F96
    da6c:	c1 97       	sbiw	r24, 0x31	; 49
    da6e:	60 f4       	brcc	.+24     	; 0xda88 <DoPlay+0x1b9a>
    da70:	20 91 ee 0f 	lds	r18, 0x0FEE
    da74:	83 2f       	mov	r24, r19
    da76:	90 e0       	ldi	r25, 0x00	; 0
    da78:	82 0f       	add	r24, r18
    da7a:	91 1d       	adc	r25, r1
    da7c:	4f 97       	sbiw	r24, 0x1f	; 31
    da7e:	24 f4       	brge	.+8      	; 0xda88 <DoPlay+0x1b9a>
    da80:	80 91 7c 0f 	lds	r24, 0x0F7C
    da84:	87 30       	cpi	r24, 0x07	; 7
    da86:	50 f0       	brcs	.+20     	; 0xda9c <DoPlay+0x1bae>
			((score[1]+cpuscoretocome) > 30) ||//don't waste points, but keep score around in case they get something good!
							(piece[0] > 6)){//crash their magic jewel!
			padstate[1] |= BTN_B;
    da88:	80 91 84 0e 	lds	r24, 0x0E84
    da8c:	90 91 85 0e 	lds	r25, 0x0E85
		return;

	if(CpuShouldCrash())//besides anything else, could and should we crash the enemy
		padstate[1] |= BTN_SL;
    da90:	81 60       	ori	r24, 0x01	; 1
    da92:	94 60       	ori	r25, 0x04	; 4
    da94:	90 93 85 0e 	sts	0x0E85, r25
    da98:	80 93 84 0e 	sts	0x0E84, r24
	
	if(cpustate == CPUFIRSTTICK){//last move is done, start new one
    da9c:	80 91 a7 0e 	lds	r24, 0x0EA7
    daa0:	80 31       	cpi	r24, 0x10	; 16
    daa2:	19 f0       	breq	.+6      	; 0xdaaa <DoPlay+0x1bbc>
    daa4:	88 24       	eor	r8, r8
    daa6:	99 24       	eor	r9, r9
    daa8:	ae c1       	rjmp	.+860    	; 0xde06 <DoPlay+0x1f18>
		if(wellfullness[1] < 3){//start off with a random move
    daaa:	80 91 97 0f 	lds	r24, 0x0F97
    daae:	90 91 98 0f 	lds	r25, 0x0F98
    dab2:	03 97       	sbiw	r24, 0x03	; 3
    dab4:	b0 f4       	brcc	.+44     	; 0xdae2 <DoPlay+0x1bf4>
			cpustate = CPUDECIDED;
    dab6:	80 e2       	ldi	r24, 0x20	; 32
    dab8:	80 93 a7 0e 	sts	0x0EA7, r24
			cpudecision[1] = (prng(MAX_PLAYERS)+3)%3;
    dabc:	82 e0       	ldi	r24, 0x02	; 2
    dabe:	0e 94 f6 54 	call	0xa9ec	; 0xa9ec <prng>
    dac2:	03 96       	adiw	r24, 0x03	; 3
    dac4:	63 e0       	ldi	r22, 0x03	; 3
    dac6:	70 e0       	ldi	r23, 0x00	; 0
    dac8:	5d d6       	rcall	.+3258   	; 0xe784 <__udivmodhi4>
    daca:	80 93 6e 0e 	sts	0x0E6E, r24
			cpudecision[0] = (prng(MAX_PLAYERS)+6)%6;
    dace:	82 e0       	ldi	r24, 0x02	; 2
    dad0:	0e 94 f6 54 	call	0xa9ec	; 0xa9ec <prng>
    dad4:	06 96       	adiw	r24, 0x06	; 6
    dad6:	66 e0       	ldi	r22, 0x06	; 6
    dad8:	70 e0       	ldi	r23, 0x00	; 0
    dada:	54 d6       	rcall	.+3240   	; 0xe784 <__udivmodhi4>
    dadc:	80 93 6d 0e 	sts	0x0E6D, r24
    dae0:	da c5       	rjmp	.+2996   	; 0xe696 <DoPlay+0x27a8>
			return;
		}
		
		cpumovepos[0] = 0;
    dae2:	10 92 7b 0e 	sts	0x0E7B, r1
		cpumovepos[1] = 0;
    dae6:	10 92 7c 0e 	sts	0x0E7C, r1
		cpuscoretocome = 0;
    daea:	10 92 ee 0f 	sts	0x0FEE, r1
    daee:	ea ec       	ldi	r30, 0xCA	; 202
    daf0:	ff e0       	ldi	r31, 0x0F	; 15
		for(uint8_t i=0;i<6*3;i++)
			cpueval[i] = 800L;
    daf2:	80 e2       	ldi	r24, 0x20	; 32
    daf4:	93 e0       	ldi	r25, 0x03	; 3
    daf6:	81 93       	st	Z+, r24
    daf8:	91 93       	st	Z+, r25
		}
		
		cpumovepos[0] = 0;
		cpumovepos[1] = 0;
		cpuscoretocome = 0;
		for(uint8_t i=0;i<6*3;i++)
    dafa:	4f e0       	ldi	r20, 0x0F	; 15
    dafc:	ee 3e       	cpi	r30, 0xEE	; 238
    dafe:	f4 07       	cpc	r31, r20
    db00:	d1 f7       	brne	.-12     	; 0xdaf6 <DoPlay+0x1c08>
			cpueval[i] = 800L;
		if(piece[(1*3)] > 6){//magic jewel, see which one to use and set decision
    db02:	90 91 7f 0f 	lds	r25, 0x0F7F
    db06:	97 30       	cpi	r25, 0x07	; 7
    db08:	80 f1       	brcs	.+96     	; 0xdb6a <DoPlay+0x1c7c>
    db0a:	e6 e9       	ldi	r30, 0x96	; 150
    db0c:	fd e0       	ldi	r31, 0x0D	; 13
    db0e:	22 e1       	ldi	r18, 0x12	; 18
		cpueval[i] = pgm_read_byte(&CpuBaseWeights[i])*cpubasemultiplier;
}

inline void CpuFindHighestColumn(){//speed irrelevant
	for(uint8_t i=3*6;i<WELLSIZE;i++){
		if(cpubuffer[i]){
    db10:	80 81       	ld	r24, Z
    db12:	88 23       	and	r24, r24
    db14:	61 f0       	breq	.+24     	; 0xdb2e <DoPlay+0x1c40>
			cpuhighestcolumn = i%6;
    db16:	82 2f       	mov	r24, r18
    db18:	66 e0       	ldi	r22, 0x06	; 6
    db1a:	28 d6       	rcall	.+3152   	; 0xe76c <__udivmodqi4>
    db1c:	90 93 6c 0e 	sts	0x0E6C, r25
			cpuhighestcolumnmag = 16-(i/6);
    db20:	82 2f       	mov	r24, r18
    db22:	24 d6       	rcall	.+3144   	; 0xe76c <__udivmodqi4>
    db24:	90 e1       	ldi	r25, 0x10	; 16
    db26:	98 1b       	sub	r25, r24
    db28:	90 93 b3 0f 	sts	0x0FB3, r25
    db2c:	04 c0       	rjmp	.+8      	; 0xdb36 <DoPlay+0x1c48>
	for(uint8_t i=0;i<3*6;i++)
		cpueval[i] = pgm_read_byte(&CpuBaseWeights[i])*cpubasemultiplier;
}

inline void CpuFindHighestColumn(){//speed irrelevant
	for(uint8_t i=3*6;i<WELLSIZE;i++){
    db2e:	2f 5f       	subi	r18, 0xFF	; 255
    db30:	31 96       	adiw	r30, 0x01	; 1
    db32:	20 36       	cpi	r18, 0x60	; 96
    db34:	69 f7       	brne	.-38     	; 0xdb10 <DoPlay+0x1c22>
}

inline void CpuDecideMagicUsage(){
	//center magic jewel takes a lot of code space! forget it; up or down!
	CpuFindHighestColumn();
	cpudecision[0] = cpuhighestcolumn;
    db36:	80 91 6c 0e 	lds	r24, 0x0E6C
    db3a:	80 93 6d 0e 	sts	0x0E6D, r24
	
	if(crashheight[1] > 1){//might consider down jewel
    db3e:	80 91 b5 0f 	lds	r24, 0x0FB5
    db42:	82 30       	cpi	r24, 0x02	; 2
    db44:	58 f0       	brcs	.+22     	; 0xdb5c <DoPlay+0x1c6e>
		if(cpuhighestcolumnmag > 7 && crashheight[0] < 4)//we are on defense, consider down jewel(a little variety I guess...if not the best strategy)
    db46:	80 91 b3 0f 	lds	r24, 0x0FB3
    db4a:	88 30       	cpi	r24, 0x08	; 8
    db4c:	50 f0       	brcs	.+20     	; 0xdb62 <DoPlay+0x1c74>
    db4e:	80 91 b4 0f 	lds	r24, 0x0FB4
    db52:	84 30       	cpi	r24, 0x04	; 4
    db54:	30 f4       	brcc	.+12     	; 0xdb62 <DoPlay+0x1c74>
			cpudecision[1] = 0;
    db56:	10 92 6e 0e 	sts	0x0E6E, r1
    db5a:	03 c0       	rjmp	.+6      	; 0xdb62 <DoPlay+0x1c74>
	}
	else
		cpudecision[1] = 2;//attack!
    db5c:	82 e0       	ldi	r24, 0x02	; 2
    db5e:	80 93 6e 0e 	sts	0x0E6E, r24
		cpuscoretocome = 0;
		for(uint8_t i=0;i<6*3;i++)
			cpueval[i] = 800L;
		if(piece[(1*3)] > 6){//magic jewel, see which one to use and set decision
			CpuDecideMagicUsage();
			cpustate = CPUDECIDED;
    db62:	80 e2       	ldi	r24, 0x20	; 32
    db64:	80 93 a7 0e 	sts	0x0EA7, r24
    db68:	96 c5       	rjmp	.+2860   	; 0xe696 <DoPlay+0x27a8>
			return;
		}else if((piece[3+0] == piece[3+1]) && (piece[3+1] == piece[3+2])){//all same color
    db6a:	80 91 80 0f 	lds	r24, 0x0F80
    db6e:	98 17       	cp	r25, r24
    db70:	79 f4       	brne	.+30     	; 0xdb90 <DoPlay+0x1ca2>
    db72:	80 91 81 0f 	lds	r24, 0x0F81
    db76:	98 17       	cp	r25, r24
    db78:	59 f4       	brne	.+22     	; 0xdb90 <DoPlay+0x1ca2>
			cpuevalmultiplier = 1;
    db7a:	81 e0       	ldi	r24, 0x01	; 1
    db7c:	80 93 75 0f 	sts	0x0F75, r24
			cpuscoremultiplier = 16;//just override base values
    db80:	80 e1       	ldi	r24, 0x10	; 16
    db82:	80 93 fd 0f 	sts	0x0FFD, r24
			cpusecondmovemultiplier = 0;
    db86:	10 92 b6 0f 	sts	0x0FB6, r1
			cpubasemultiplier = 0;
    db8a:	10 92 c5 0f 	sts	0x0FC5, r1
    db8e:	36 c1       	rjmp	.+620    	; 0xddfc <DoPlay+0x1f0e>
		}else{//normal, not all same color or magic jewel
			cpuheightmultiplier = 1;
    db90:	21 e0       	ldi	r18, 0x01	; 1
    db92:	20 93 96 0e 	sts	0x0E96, r18
			cpuscoremultiplier = 5;//1+((wellfullness[1]/4));//8;
    db96:	35 e0       	ldi	r19, 0x05	; 5
    db98:	30 93 fd 0f 	sts	0x0FFD, r19
			cpuevalmultiplier = 1;
    db9c:	20 93 75 0f 	sts	0x0F75, r18
			cpusecondmovemultiplier = 10;//8;
    dba0:	8a e0       	ldi	r24, 0x0A	; 10
    dba2:	80 93 b6 0f 	sts	0x0FB6, r24
			cpubasemultiplier = 1;
    dba6:	20 93 c5 0f 	sts	0x0FC5, r18
			
			if(wellfullness[1] < 5*6){
    dbaa:	80 91 97 0f 	lds	r24, 0x0F97
    dbae:	90 91 98 0f 	lds	r25, 0x0F98
    dbb2:	8e 31       	cpi	r24, 0x1E	; 30
    dbb4:	91 05       	cpc	r25, r1
    dbb6:	78 f4       	brcc	.+30     	; 0xdbd6 <DoPlay+0x1ce8>
				if(wellfullness[1] < 4*6){
    dbb8:	48 97       	sbiw	r24, 0x18	; 24
    dbba:	40 f4       	brcc	.+16     	; 0xdbcc <DoPlay+0x1cde>
					cpuheightmultiplier = 1;
					cpuscoremultiplier = 1;
    dbbc:	20 93 fd 0f 	sts	0x0FFD, r18
					cpusecondmovemultiplier = 0;
    dbc0:	10 92 b6 0f 	sts	0x0FB6, r1
					cpuevalmultiplier = 2;
    dbc4:	82 e0       	ldi	r24, 0x02	; 2
    dbc6:	80 93 75 0f 	sts	0x0F75, r24
    dbca:	05 c0       	rjmp	.+10     	; 0xdbd6 <DoPlay+0x1ce8>
				}
				else{
					cpuscoremultiplier = 5;
    dbcc:	30 93 fd 0f 	sts	0x0FFD, r19
					cpusecondmovemultiplier = 3;
    dbd0:	83 e0       	ldi	r24, 0x03	; 3
    dbd2:	80 93 b6 0f 	sts	0x0FB6, r24
			}*/
			//else if(wellfullness[1] > 5*6){
				//cpuevalmultiplier = 0;
			//}
			
			if(cpuevalmultiplier)
    dbd6:	80 91 75 0f 	lds	r24, 0x0F75
    dbda:	88 23       	and	r24, r24
    dbdc:	09 f4       	brne	.+2      	; 0xdbe0 <DoPlay+0x1cf2>
    dbde:	0e c1       	rjmp	.+540    	; 0xddfc <DoPlay+0x1f0e>
    dbe0:	88 24       	eor	r8, r8
    dbe2:	99 24       	eor	r9, r9
    dbe4:	6a e5       	ldi	r22, 0x5A	; 90
    dbe6:	70 e0       	ldi	r23, 0x00	; 0
    dbe8:	1f e0       	ldi	r17, 0x0F	; 15
    dbea:	06 c1       	rjmp	.+524    	; 0xddf8 <DoPlay+0x1f0a>
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
		for(uint8_t x=0;x<5;x++){
			if(!(t = cpubuffer[off++]))
    dbec:	fb 01       	movw	r30, r22
    dbee:	ec 57       	subi	r30, 0x7C	; 124
    dbf0:	f2 4f       	sbci	r31, 0xF2	; 242
    dbf2:	90 81       	ld	r25, Z
    dbf4:	ab 01       	movw	r20, r22
    dbf6:	4f 5f       	subi	r20, 0xFF	; 255
    dbf8:	5f 4f       	sbci	r21, 0xFF	; 255
    dbfa:	99 23       	and	r25, r25
    dbfc:	11 f4       	brne	.+4      	; 0xdc02 <DoPlay+0x1d14>
    dbfe:	ba 01       	movw	r22, r20
    dc00:	f2 c0       	rjmp	.+484    	; 0xdde6 <DoPlay+0x1ef8>
				continue;	
			
			if(t == cpubuffer[off+1]){
    dc02:	ba 01       	movw	r22, r20
    dc04:	6f 5f       	subi	r22, 0xFF	; 255
    dc06:	7f 4f       	sbci	r23, 0xFF	; 255
    dc08:	fb 01       	movw	r30, r22
    dc0a:	ec 57       	subi	r30, 0x7C	; 124
    dc0c:	f2 4f       	sbci	r31, 0xF2	; 242
    dc0e:	20 81       	ld	r18, Z
    dc10:	92 17       	cp	r25, r18
    dc12:	d1 f4       	brne	.+52     	; 0xdc48 <DoPlay+0x1d5a>
				score += 1;
    dc14:	08 94       	sec
    dc16:	81 1c       	adc	r8, r1
    dc18:	91 1c       	adc	r9, r1
				if(x < 4 && !cpubuffer[off+2]){
    dc1a:	34 30       	cpi	r19, 0x04	; 4
    dc1c:	09 f4       	brne	.+2      	; 0xdc20 <DoPlay+0x1d32>
    dc1e:	35 c5       	rjmp	.+2666   	; 0xe68a <DoPlay+0x279c>
    dc20:	fa 01       	movw	r30, r20
    dc22:	ec 57       	subi	r30, 0x7C	; 124
    dc24:	f2 4f       	sbci	r31, 0xF2	; 242
    dc26:	82 81       	ldd	r24, Z+2	; 0x02
    dc28:	88 23       	and	r24, r24
    dc2a:	e9 f4       	brne	.+58     	; 0xdc66 <DoPlay+0x1d78>
					score += 2;
    dc2c:	a2 e0       	ldi	r26, 0x02	; 2
    dc2e:	b0 e0       	ldi	r27, 0x00	; 0
    dc30:	8a 0e       	add	r8, r26
    dc32:	9b 1e       	adc	r9, r27
					if(x<3 && t == cpubuffer[off+3])
    dc34:	33 30       	cpi	r19, 0x03	; 3
    dc36:	b9 f0       	breq	.+46     	; 0xdc66 <DoPlay+0x1d78>
    dc38:	83 81       	ldd	r24, Z+3	; 0x03
    dc3a:	98 17       	cp	r25, r24
    dc3c:	a1 f4       	brne	.+40     	; 0xdc66 <DoPlay+0x1d78>
						score += 3;
    dc3e:	e3 e0       	ldi	r30, 0x03	; 3
    dc40:	f0 e0       	ldi	r31, 0x00	; 0
    dc42:	8e 0e       	add	r8, r30
    dc44:	9f 1e       	adc	r9, r31
    dc46:	0f c0       	rjmp	.+30     	; 0xdc66 <DoPlay+0x1d78>
				}					
			}
			else if(x < 4 && t == cpubuffer[off+2]){
    dc48:	34 30       	cpi	r19, 0x04	; 4
    dc4a:	09 f4       	brne	.+2      	; 0xdc4e <DoPlay+0x1d60>
    dc4c:	1e c5       	rjmp	.+2620   	; 0xe68a <DoPlay+0x279c>
    dc4e:	fa 01       	movw	r30, r20
    dc50:	ec 57       	subi	r30, 0x7C	; 124
    dc52:	f2 4f       	sbci	r31, 0xF2	; 242
    dc54:	82 81       	ldd	r24, Z+2	; 0x02
    dc56:	98 17       	cp	r25, r24
    dc58:	31 f4       	brne	.+12     	; 0xdc66 <DoPlay+0x1d78>
				if(cpubuffer[off+1] == 0)
    dc5a:	22 23       	and	r18, r18
    dc5c:	21 f4       	brne	.+8      	; 0xdc66 <DoPlay+0x1d78>
					score += 3;
    dc5e:	a3 e0       	ldi	r26, 0x03	; 3
    dc60:	b0 e0       	ldi	r27, 0x00	; 0
    dc62:	8a 0e       	add	r8, r26
    dc64:	9b 1e       	adc	r9, r27
			}
	
			if(x < 4 && /*x < 5 && */t == cpubuffer[off-5]){//above right
    dc66:	da 01       	movw	r26, r20
    dc68:	ac 57       	subi	r26, 0x7C	; 124
    dc6a:	b2 4f       	sbci	r27, 0xF2	; 242
    dc6c:	15 97       	sbiw	r26, 0x05	; 5
    dc6e:	8c 91       	ld	r24, X
    dc70:	15 96       	adiw	r26, 0x05	; 5
    dc72:	98 17       	cp	r25, r24
    dc74:	09 f0       	breq	.+2      	; 0xdc78 <DoPlay+0x1d8a>
    dc76:	4c c0       	rjmp	.+152    	; 0xdd10 <DoPlay+0x1e22>
				score+=3;
    dc78:	e3 e0       	ldi	r30, 0x03	; 3
    dc7a:	f0 e0       	ldi	r31, 0x00	; 0
    dc7c:	8e 0e       	add	r8, r30
    dc7e:	9f 1e       	adc	r9, r31
				if(true){//x < 4){
					 if(!cpubuffer[off-10]){
    dc80:	fd 01       	movw	r30, r26
    dc82:	3a 97       	sbiw	r30, 0x0a	; 10
    dc84:	20 81       	ld	r18, Z
    dc86:	22 23       	and	r18, r18
    dc88:	81 f4       	brne	.+32     	; 0xdcaa <DoPlay+0x1dbc>
						score+=1;
    dc8a:	08 94       	sec
    dc8c:	81 1c       	adc	r8, r1
    dc8e:	91 1c       	adc	r9, r1
						if(x < 3 && t == cpubuffer[off-15])
    dc90:	33 30       	cpi	r19, 0x03	; 3
    dc92:	09 f4       	brne	.+2      	; 0xdc96 <DoPlay+0x1da8>
    dc94:	fa c4       	rjmp	.+2548   	; 0xe68a <DoPlay+0x279c>
    dc96:	fd 01       	movw	r30, r26
    dc98:	3f 97       	sbiw	r30, 0x0f	; 15
    dc9a:	80 81       	ld	r24, Z
    dc9c:	98 17       	cp	r25, r24
    dc9e:	c1 f5       	brne	.+112    	; 0xdd10 <DoPlay+0x1e22>
							score += 2;
    dca0:	a2 e0       	ldi	r26, 0x02	; 2
    dca2:	b0 e0       	ldi	r27, 0x00	; 0
    dca4:	8a 0e       	add	r8, r26
    dca6:	9b 1e       	adc	r9, r27
    dca8:	33 c0       	rjmp	.+102    	; 0xdd10 <DoPlay+0x1e22>
					}
					else if(t == cpubuffer[off-16]){//one is in scoring spot, see if it could drop the right color
    dcaa:	fd 01       	movw	r30, r26
    dcac:	70 97       	sbiw	r30, 0x10	; 16
    dcae:	80 81       	ld	r24, Z
    dcb0:	98 17       	cp	r25, r24
    dcb2:	71 f5       	brne	.+92     	; 0xdd10 <DoPlay+0x1e22>
						score += 4;
    dcb4:	e4 e0       	ldi	r30, 0x04	; 4
    dcb6:	f0 e0       	ldi	r31, 0x00	; 0
    dcb8:	8e 0e       	add	r8, r30
    dcba:	9f 1e       	adc	r9, r31
						t = cpubuffer[off-10];
						if(t == cpubuffer[off-11])
    dcbc:	fd 01       	movw	r30, r26
    dcbe:	3b 97       	sbiw	r30, 0x0b	; 11
    dcc0:	80 81       	ld	r24, Z
    dcc2:	28 17       	cp	r18, r24
    dcc4:	21 f4       	brne	.+8      	; 0xdcce <DoPlay+0x1de0>
							score += 10;
    dcc6:	8a e0       	ldi	r24, 0x0A	; 10
    dcc8:	90 e0       	ldi	r25, 0x00	; 0
    dcca:	88 0e       	add	r8, r24
    dccc:	99 1e       	adc	r9, r25
						if(t == cpubuffer[off-17])
    dcce:	fa 01       	movw	r30, r20
    dcd0:	ed 58       	subi	r30, 0x8D	; 141
    dcd2:	f2 4f       	sbci	r31, 0xF2	; 242
    dcd4:	80 81       	ld	r24, Z
    dcd6:	28 17       	cp	r18, r24
    dcd8:	21 f4       	brne	.+8      	; 0xdce2 <DoPlay+0x1df4>
							score += 10;
    dcda:	aa e0       	ldi	r26, 0x0A	; 10
    dcdc:	b0 e0       	ldi	r27, 0x00	; 0
    dcde:	8a 0e       	add	r8, r26
    dce0:	9b 1e       	adc	r9, r27
						if(x < 3){
    dce2:	33 30       	cpi	r19, 0x03	; 3
    dce4:	c9 f0       	breq	.+50     	; 0xdd18 <DoPlay+0x1e2a>
							if(t == cpubuffer[off-9])
    dce6:	fa 01       	movw	r30, r20
    dce8:	e5 58       	subi	r30, 0x85	; 133
    dcea:	f2 4f       	sbci	r31, 0xF2	; 242
    dcec:	80 81       	ld	r24, Z
    dcee:	28 17       	cp	r18, r24
    dcf0:	21 f4       	brne	.+8      	; 0xdcfa <DoPlay+0x1e0c>
								score += 10;
    dcf2:	ea e0       	ldi	r30, 0x0A	; 10
    dcf4:	f0 e0       	ldi	r31, 0x00	; 0
    dcf6:	8e 0e       	add	r8, r30
    dcf8:	9f 1e       	adc	r9, r31
							if(t == cpubuffer[off-15])
    dcfa:	fa 01       	movw	r30, r20
    dcfc:	eb 58       	subi	r30, 0x8B	; 139
    dcfe:	f2 4f       	sbci	r31, 0xF2	; 242
    dd00:	80 81       	ld	r24, Z
    dd02:	28 17       	cp	r18, r24
    dd04:	31 f4       	brne	.+12     	; 0xdd12 <DoPlay+0x1e24>
								score += 10;
    dd06:	8a e0       	ldi	r24, 0x0A	; 10
    dd08:	90 e0       	ldi	r25, 0x00	; 0
    dd0a:	88 0e       	add	r8, r24
    dd0c:	99 1e       	adc	r9, r25
    dd0e:	01 c0       	rjmp	.+2      	; 0xdd12 <DoPlay+0x1e24>
    dd10:	29 2f       	mov	r18, r25
					}
				}				
				
				
			}
			if(x > 1 && t == cpubuffer[off-7]){//above left(TODO MAKE SURE IT WORKS)
    dd12:	32 30       	cpi	r19, 0x02	; 2
    dd14:	08 f4       	brcc	.+2      	; 0xdd18 <DoPlay+0x1e2a>
    dd16:	54 c0       	rjmp	.+168    	; 0xddc0 <DoPlay+0x1ed2>
    dd18:	da 01       	movw	r26, r20
    dd1a:	ac 57       	subi	r26, 0x7C	; 124
    dd1c:	b2 4f       	sbci	r27, 0xF2	; 242
    dd1e:	17 97       	sbiw	r26, 0x07	; 7
    dd20:	8c 91       	ld	r24, X
    dd22:	17 96       	adiw	r26, 0x07	; 7
    dd24:	28 17       	cp	r18, r24
    dd26:	09 f0       	breq	.+2      	; 0xdd2a <DoPlay+0x1e3c>
    dd28:	4b c0       	rjmp	.+150    	; 0xddc0 <DoPlay+0x1ed2>
				score += 3;
    dd2a:	e3 e0       	ldi	r30, 0x03	; 3
    dd2c:	f0 e0       	ldi	r31, 0x00	; 0
    dd2e:	8e 0e       	add	r8, r30
    dd30:	9f 1e       	adc	r9, r31
				if(true){
					 if(!cpubuffer[off-14]){
    dd32:	fd 01       	movw	r30, r26
    dd34:	3e 97       	sbiw	r30, 0x0e	; 14
    dd36:	90 81       	ld	r25, Z
    dd38:	99 23       	and	r25, r25
    dd3a:	79 f4       	brne	.+30     	; 0xdd5a <DoPlay+0x1e6c>
						 score+=1;
    dd3c:	08 94       	sec
    dd3e:	81 1c       	adc	r8, r1
    dd40:	91 1c       	adc	r9, r1
						 if(x > 2 && t == cpubuffer[off-21])
    dd42:	32 30       	cpi	r19, 0x02	; 2
    dd44:	e9 f1       	breq	.+122    	; 0xddc0 <DoPlay+0x1ed2>
    dd46:	fd 01       	movw	r30, r26
    dd48:	75 97       	sbiw	r30, 0x15	; 21
    dd4a:	80 81       	ld	r24, Z
    dd4c:	28 17       	cp	r18, r24
    dd4e:	c1 f5       	brne	.+112    	; 0xddc0 <DoPlay+0x1ed2>
							score += 2;
    dd50:	82 e0       	ldi	r24, 0x02	; 2
    dd52:	90 e0       	ldi	r25, 0x00	; 0
    dd54:	88 0e       	add	r8, r24
    dd56:	99 1e       	adc	r9, r25
    dd58:	33 c0       	rjmp	.+102    	; 0xddc0 <DoPlay+0x1ed2>
					 }
					 else if(t == cpubuffer[off-20]){//one is in scoring spot, see if it could drop the right color
    dd5a:	fd 01       	movw	r30, r26
    dd5c:	74 97       	sbiw	r30, 0x14	; 20
    dd5e:	80 81       	ld	r24, Z
    dd60:	28 17       	cp	r18, r24
    dd62:	71 f5       	brne	.+92     	; 0xddc0 <DoPlay+0x1ed2>
						score += 3;
    dd64:	e3 e0       	ldi	r30, 0x03	; 3
    dd66:	f0 e0       	ldi	r31, 0x00	; 0
    dd68:	8e 0e       	add	r8, r30
    dd6a:	9f 1e       	adc	r9, r31
						 t = cpubuffer[off-14];
						 if(t == cpubuffer[off-13])
    dd6c:	fd 01       	movw	r30, r26
    dd6e:	3d 97       	sbiw	r30, 0x0d	; 13
    dd70:	80 81       	ld	r24, Z
    dd72:	98 17       	cp	r25, r24
    dd74:	21 f4       	brne	.+8      	; 0xdd7e <DoPlay+0x1e90>
							score += 6;
    dd76:	a6 e0       	ldi	r26, 0x06	; 6
    dd78:	b0 e0       	ldi	r27, 0x00	; 0
    dd7a:	8a 0e       	add	r8, r26
    dd7c:	9b 1e       	adc	r9, r27
						if(t == cpubuffer[off-19])
    dd7e:	fa 01       	movw	r30, r20
    dd80:	ef 58       	subi	r30, 0x8F	; 143
    dd82:	f2 4f       	sbci	r31, 0xF2	; 242
    dd84:	80 81       	ld	r24, Z
    dd86:	98 17       	cp	r25, r24
    dd88:	21 f4       	brne	.+8      	; 0xdd92 <DoPlay+0x1ea4>
							score += 6;
    dd8a:	e6 e0       	ldi	r30, 0x06	; 6
    dd8c:	f0 e0       	ldi	r31, 0x00	; 0
    dd8e:	8e 0e       	add	r8, r30
    dd90:	9f 1e       	adc	r9, r31
						if(x > 2){
    dd92:	32 30       	cpi	r19, 0x02	; 2
    dd94:	a1 f0       	breq	.+40     	; 0xddbe <DoPlay+0x1ed0>
							if(t == cpubuffer[off-15])
    dd96:	fa 01       	movw	r30, r20
    dd98:	eb 58       	subi	r30, 0x8B	; 139
    dd9a:	f2 4f       	sbci	r31, 0xF2	; 242
    dd9c:	80 81       	ld	r24, Z
    dd9e:	98 17       	cp	r25, r24
    dda0:	21 f4       	brne	.+8      	; 0xddaa <DoPlay+0x1ebc>
								score += 6;
    dda2:	a6 e0       	ldi	r26, 0x06	; 6
    dda4:	b0 e0       	ldi	r27, 0x00	; 0
    dda6:	8a 0e       	add	r8, r26
    dda8:	9b 1e       	adc	r9, r27
							if(t == cpubuffer[off-21])
    ddaa:	fa 01       	movw	r30, r20
    ddac:	e1 59       	subi	r30, 0x91	; 145
    ddae:	f2 4f       	sbci	r31, 0xF2	; 242
    ddb0:	80 81       	ld	r24, Z
    ddb2:	98 17       	cp	r25, r24
    ddb4:	21 f4       	brne	.+8      	; 0xddbe <DoPlay+0x1ed0>
								score += 6;
    ddb6:	e6 e0       	ldi	r30, 0x06	; 6
    ddb8:	f0 e0       	ldi	r31, 0x00	; 0
    ddba:	8e 0e       	add	r8, r30
    ddbc:	9f 1e       	adc	r9, r31
    ddbe:	29 2f       	mov	r18, r25
					 }
				 }
			 }
			}
	
			if(t == cpubuffer[off-6]){
    ddc0:	fa 01       	movw	r30, r20
    ddc2:	ec 57       	subi	r30, 0x7C	; 124
    ddc4:	f2 4f       	sbci	r31, 0xF2	; 242
    ddc6:	36 97       	sbiw	r30, 0x06	; 6
    ddc8:	80 81       	ld	r24, Z
    ddca:	36 96       	adiw	r30, 0x06	; 6
    ddcc:	28 17       	cp	r18, r24
    ddce:	59 f4       	brne	.+22     	; 0xdde6 <DoPlay+0x1ef8>
				score+=1;
    ddd0:	08 94       	sec
    ddd2:	81 1c       	adc	r8, r1
    ddd4:	91 1c       	adc	r9, r1
							score += 2;
						if(t == cpubuffer[off-19])
							score += 2;	
					}
				}
				else if(!cpubuffer[off-12])//nothing above
    ddd6:	3c 97       	sbiw	r30, 0x0c	; 12
    ddd8:	80 81       	ld	r24, Z
    ddda:	88 23       	and	r24, r24
    dddc:	21 f4       	brne	.+8      	; 0xdde6 <DoPlay+0x1ef8>
					score += 3;
    ddde:	43 e0       	ldi	r20, 0x03	; 3
    dde0:	50 e0       	ldi	r21, 0x00	; 0
    dde2:	84 0e       	add	r8, r20
    dde4:	95 1e       	adc	r9, r21
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
		for(uint8_t x=0;x<5;x++){
    dde6:	3f 5f       	subi	r19, 0xFF	; 255
    dde8:	35 30       	cpi	r19, 0x05	; 5
    ddea:	09 f0       	breq	.+2      	; 0xddee <DoPlay+0x1f00>
    ddec:	ff ce       	rjmp	.-514    	; 0xdbec <DoPlay+0x1cfe>
{-14}{-13}{-12}{-11}{-10}{ -9}
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
    ddee:	11 50       	subi	r17, 0x01	; 1
    ddf0:	14 30       	cpi	r17, 0x04	; 4
    ddf2:	31 f0       	breq	.+12     	; 0xde00 <DoPlay+0x1f12>
				//		score += 4;
			//	}			
			}
			off++;
		}//x			
		off -= 11;
    ddf4:	6b 50       	subi	r22, 0x0B	; 11
    ddf6:	70 40       	sbci	r23, 0x00	; 0
    ddf8:	30 e0       	ldi	r19, 0x00	; 0
    ddfa:	f8 ce       	rjmp	.-528    	; 0xdbec <DoPlay+0x1cfe>
    ddfc:	88 24       	eor	r8, r8
    ddfe:	99 24       	eor	r9, r9
			
			if(cpuevalmultiplier)
				cpubaseval = CpuEvaluate();
		}			
		CpuApplyBaseWeights();
		cpustate = CPUEVALUATING;
    de00:	88 e0       	ldi	r24, 0x08	; 8
    de02:	80 93 a7 0e 	sts	0x0EA7, r24
	}

	if(cpustate & CPUEVALUATING){//lets get down to the numbers!!!
    de06:	80 91 a7 0e 	lds	r24, 0x0EA7
    de0a:	83 ff       	sbrs	r24, 3
    de0c:	44 c4       	rjmp	.+2184   	; 0xe696 <DoPlay+0x27a8>
		if(halfstep[1]){
    de0e:	80 91 b2 0f 	lds	r24, 0x0FB2
    de12:	88 23       	and	r24, r24
    de14:	b1 f0       	breq	.+44     	; 0xde42 <DoPlay+0x1f54>
			if(well[WELLSIZE+piecex[1]+((piecey[1]+3)*6)])//about to land piece, choose the  best move we have so far
    de16:	20 91 a9 0f 	lds	r18, 0x0FA9
    de1a:	80 91 a9 0e 	lds	r24, 0x0EA9
    de1e:	90 e0       	ldi	r25, 0x00	; 0
    de20:	fc 01       	movw	r30, r24
    de22:	ee 0f       	add	r30, r30
    de24:	ff 1f       	adc	r31, r31
    de26:	e8 0f       	add	r30, r24
    de28:	f9 1f       	adc	r31, r25
    de2a:	ee 0f       	add	r30, r30
    de2c:	ff 1f       	adc	r31, r31
    de2e:	e3 55       	subi	r30, 0x53	; 83
    de30:	f1 4f       	sbci	r31, 0xF1	; 241
    de32:	e2 0f       	add	r30, r18
    de34:	f1 1d       	adc	r31, r1
    de36:	ee 58       	subi	r30, 0x8E	; 142
    de38:	ff 4f       	sbci	r31, 0xFF	; 255
    de3a:	80 81       	ld	r24, Z
    de3c:	88 23       	and	r24, r24
    de3e:	09 f0       	breq	.+2      	; 0xde42 <DoPlay+0x1f54>
    de40:	e0 c3       	rjmp	.+1984   	; 0xe602 <DoPlay+0x2714>
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
inline void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    de42:	e6 e0       	ldi	r30, 0x06	; 6
    de44:	ee 2e       	mov	r14, r30
				
			blank_piece(1);
			CpuBufferWellAsm(&well[WELLSIZE]);
			add_piece(1);
		//	cpueval[cpumovepos[0]] = 1000L;
			cputotal = (uint16_t)(500L);
    de46:	74 ef       	ldi	r23, 0xF4	; 244
    de48:	c7 2e       	mov	r12, r23
    de4a:	71 e0       	ldi	r23, 0x01	; 1
    de4c:	d7 2e       	mov	r13, r23
			cpueval[cpumovepos[0]] += cputotal;

			if(++cpumovepos[0] > 17){
				cpumovepos[0] = 0;
				if(!cpusecondmovemultiplier)
					cpumovepos[1] = 17;
    de4e:	61 e1       	ldi	r22, 0x11	; 17
    de50:	b6 2e       	mov	r11, r22
state[1] |= PAUSED;state[1] ^= PAUSED;
#endif
//TODO IF WE HAVE A 3+ CHAIN AVAILABLE, DO NOT EVALUATE

		while(true){
			if(vsync_flag){
    de52:	80 91 30 0d 	lds	r24, 0x0D30
    de56:	88 23       	and	r24, r24
    de58:	99 f0       	breq	.+38     	; 0xde80 <DoPlay+0x1f92>
				vsync_flag = 0;
    de5a:	10 92 30 0d 	sts	0x0D30, r1
				totalvsyncs++;
    de5e:	80 91 79 0e 	lds	r24, 0x0E79
    de62:	90 91 7a 0e 	lds	r25, 0x0E7A
    de66:	01 96       	adiw	r24, 0x01	; 1
    de68:	90 93 7a 0e 	sts	0x0E7A, r25
    de6c:	80 93 79 0e 	sts	0x0E79, r24
				if(++vsyncs > 1)
    de70:	80 91 78 0e 	lds	r24, 0x0E78
    de74:	8f 5f       	subi	r24, 0xFF	; 255
    de76:	80 93 78 0e 	sts	0x0E78, r24
    de7a:	82 30       	cpi	r24, 0x02	; 2
    de7c:	08 f0       	brcs	.+2      	; 0xde80 <DoPlay+0x1f92>
    de7e:	0b c4       	rjmp	.+2070   	; 0xe696 <DoPlay+0x27a8>
    de80:	e0 91 a9 0f 	lds	r30, 0x0FA9
    de84:	e0 5a       	subi	r30, 0xA0	; 160
    de86:	80 91 a9 0e 	lds	r24, 0x0EA9
    de8a:	8e 9d       	mul	r24, r14
    de8c:	c0 01       	movw	r24, r0
    de8e:	11 24       	eor	r1, r1
    de90:	e8 0f       	add	r30, r24
	well[off] = 0;//smaller than loop!
    de92:	ae 2f       	mov	r26, r30
    de94:	b0 e0       	ldi	r27, 0x00	; 0
    de96:	a3 55       	subi	r26, 0x53	; 83
    de98:	b1 4f       	sbci	r27, 0xF1	; 241
    de9a:	1c 92       	st	X, r1
	off += 6;
    de9c:	ea 5f       	subi	r30, 0xFA	; 250
	well[off] = 0;
    de9e:	ae 2f       	mov	r26, r30
    dea0:	b0 e0       	ldi	r27, 0x00	; 0
    dea2:	a3 55       	subi	r26, 0x53	; 83
    dea4:	b1 4f       	sbci	r27, 0xF1	; 241
    dea6:	1c 92       	st	X, r1
	off += 6;
	well[off] = 0;
    dea8:	ea 5f       	subi	r30, 0xFA	; 250
    deaa:	f0 e0       	ldi	r31, 0x00	; 0
    deac:	e3 55       	subi	r30, 0x53	; 83
    deae:	f1 4f       	sbci	r31, 0xF1	; 241
    deb0:	10 82       	st	Z, r1
			}
		//	if(cpueval[cpumovepos[0]] == 0)//first move is a losing move, don't check 18 second move variations
			//	goto cpunextmove;
				
			blank_piece(1);
			CpuBufferWellAsm(&well[WELLSIZE]);
    deb2:	8d e0       	ldi	r24, 0x0D	; 13
    deb4:	9f e0       	ldi	r25, 0x0F	; 15
    deb6:	0e 94 12 4a 	call	0x9424	; 0x9424 <CpuBufferWellAsm>
    deba:	af e7       	ldi	r26, 0x7F	; 127
    debc:	bf e0       	ldi	r27, 0x0F	; 15
    debe:	30 e0       	ldi	r19, 0x00	; 0



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    dec0:	20 91 a9 0f 	lds	r18, 0x0FA9
    dec4:	80 91 a9 0e 	lds	r24, 0x0EA9
    dec8:	83 0f       	add	r24, r19
    deca:	90 e0       	ldi	r25, 0x00	; 0
    decc:	fc 01       	movw	r30, r24
    dece:	ee 0f       	add	r30, r30
    ded0:	ff 1f       	adc	r31, r31
    ded2:	e8 0f       	add	r30, r24
    ded4:	f9 1f       	adc	r31, r25
    ded6:	ee 0f       	add	r30, r30
    ded8:	ff 1f       	adc	r31, r31
    deda:	e3 55       	subi	r30, 0x53	; 83
    dedc:	f1 4f       	sbci	r31, 0xF1	; 241
    dede:	e2 0f       	add	r30, r18
    dee0:	f1 1d       	adc	r31, r1
    dee2:	e0 5a       	subi	r30, 0xA0	; 160
    dee4:	ff 4f       	sbci	r31, 0xFF	; 255
    dee6:	80 91 b2 0f 	lds	r24, 0x0FB2
    deea:	82 95       	swap	r24
    deec:	88 0f       	add	r24, r24
    deee:	88 0f       	add	r24, r24
    def0:	80 7c       	andi	r24, 0xC0	; 192
    def2:	9d 91       	ld	r25, X+
    def4:	89 2b       	or	r24, r25
    def6:	80 83       	st	Z, r24
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
inline void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    def8:	3f 5f       	subi	r19, 0xFF	; 255
    defa:	33 30       	cpi	r19, 0x03	; 3
    defc:	09 f7       	brne	.-62     	; 0xdec0 <DoPlay+0x1fd2>
			add_piece(1);
		//	cpueval[cpumovepos[0]] = 1000L;
			cputotal = (uint16_t)(500L);
    defe:	d0 92 ff 0f 	sts	0x0FFF, r13
    df02:	c0 92 fe 0f 	sts	0x0FFE, r12
			uint8_t bufferreturn;
			if(true){//CpuBufferMove(cpumovepos[0],false)){
				bufferreturn = CpuBufferMove(cpumovepos[0],false);
    df06:	20 91 7b 0e 	lds	r18, 0x0E7B
#include "cpumisc.h"

inline bool CpuBufferMove(uint8_t m, bool prvw){
	uint8_t c = m/3;
    df0a:	82 2f       	mov	r24, r18
    df0c:	63 e0       	ldi	r22, 0x03	; 3
    df0e:	2e d4       	rcall	.+2140   	; 0xe76c <__udivmodqi4>
    df10:	38 2f       	mov	r19, r24
	uint8_t r = m%3;
    df12:	82 2f       	mov	r24, r18
    df14:	2b d4       	rcall	.+2134   	; 0xe76c <__udivmodqi4>
    df16:	79 2f       	mov	r23, r25
    df18:	93 2f       	mov	r25, r19
    df1a:	40 e0       	ldi	r20, 0x00	; 0
inline uint16_t CpuScoreAndGravity(uint8_t c);

inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
		if(cpubuffer[off])
    df1c:	e9 2f       	mov	r30, r25
    df1e:	f0 e0       	ldi	r31, 0x00	; 0
    df20:	ec 57       	subi	r30, 0x7C	; 124
    df22:	f2 4f       	sbci	r31, 0xF2	; 242
    df24:	80 81       	ld	r24, Z
    df26:	88 23       	and	r24, r24
    df28:	29 f4       	brne	.+10     	; 0xdf34 <DoPlay+0x2046>

inline uint16_t CpuScoreAndGravity(uint8_t c);

inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
    df2a:	4f 5f       	subi	r20, 0xFF	; 255
    df2c:	40 31       	cpi	r20, 0x10	; 16
    df2e:	91 f0       	breq	.+36     	; 0xdf54 <DoPlay+0x2066>
		if(cpubuffer[off])
			return i;
		off += 6;
    df30:	9a 5f       	subi	r25, 0xFA	; 250
    df32:	f4 cf       	rjmp	.-24     	; 0xdf1c <DoPlay+0x202e>

	//how high are the jewels in this column?
	//we want to set the jewel down without slowing CpuScoreAndGravity()
	uint8_t h = buffer_column_height(c);
	if(h < 6 || (h<9 && c == 2)){//HACK WAS h<6 losing move
    df34:	46 30       	cpi	r20, 0x06	; 6
    df36:	20 f0       	brcs	.+8      	; 0xdf40 <DoPlay+0x2052>
    df38:	49 30       	cpi	r20, 0x09	; 9
    df3a:	60 f4       	brcc	.+24     	; 0xdf54 <DoPlay+0x2066>
    df3c:	32 30       	cpi	r19, 0x02	; 2
    df3e:	51 f4       	brne	.+20     	; 0xdf54 <DoPlay+0x2066>
		//TODO TAKE INTO CONSIDERATION SCORING
		if(prvw && ((preview[(1*3)+0] == preview[(1*3)+1]) && (preview[(1*3)+1] == preview[(1*3)+2]))){}//not all 1 color so will be a loss
		else if(!prvw && ((piece[(1*3)+0] == piece[(1*3)+1]) && (piece[(1*3)+1] == piece[(1*3)+2]))){}
    df40:	90 91 7f 0f 	lds	r25, 0x0F7F
    df44:	80 91 80 0f 	lds	r24, 0x0F80
    df48:	98 17       	cp	r25, r24
    df4a:	39 f5       	brne	.+78     	; 0xdf9a <DoPlay+0x20ac>
    df4c:	80 91 81 0f 	lds	r24, 0x0F81
    df50:	98 17       	cp	r25, r24
    df52:	19 f5       	brne	.+70     	; 0xdf9a <DoPlay+0x20ac>
		else
			return false;
	}		
//NOW JUST PUT PIECE AT TOP AND LET CPUSCOREANDGRAVITY() DO THE REST
	uint16_t offset = (((h-3)*6)+c);
    df54:	23 2f       	mov	r18, r19
    df56:	30 e0       	ldi	r19, 0x00	; 0
    df58:	22 51       	subi	r18, 0x12	; 18
    df5a:	30 40       	sbci	r19, 0x00	; 0
    df5c:	4e 9d       	mul	r20, r14
    df5e:	c0 01       	movw	r24, r0
    df60:	11 24       	eor	r1, r1
    df62:	28 0f       	add	r18, r24
    df64:	39 1f       	adc	r19, r25
	uint8_t pt[3];
	
	if(!prvw){//not the preview piece
		for(uint8_t i=0;i<3;i++)
			pt[i] = piece[(1*3)+i];
    df66:	40 91 7f 0f 	lds	r20, 0x0F7F
    df6a:	60 91 80 0f 	lds	r22, 0x0F80
    df6e:	50 91 81 0f 	lds	r21, 0x0F81
    df72:	90 e0       	ldi	r25, 0x00	; 0
    df74:	05 c0       	rjmp	.+10     	; 0xdf80 <DoPlay+0x2092>
			pt[i] = preview[(1*3)+i];
	}
	
//	if(pt[0] == pt[1] && pt[1] == pt[2])//don't need consideration
//		return false;
	for(uint8_t i=0;i<r;i++){
    df76:	9f 5f       	subi	r25, 0xFF	; 255
    df78:	85 2f       	mov	r24, r21
    df7a:	56 2f       	mov	r21, r22
    df7c:	64 2f       	mov	r22, r20
    df7e:	48 2f       	mov	r20, r24
    df80:	97 17       	cp	r25, r23
    df82:	c8 f3       	brcs	.-14     	; 0xdf76 <DoPlay+0x2088>
		pt[2] = pt[1];
		pt[1] = pt[0];
		pt[0] = t;
	}

	cpubuffer[offset] = pt[0];
    df84:	f9 01       	movw	r30, r18
    df86:	ec 57       	subi	r30, 0x7C	; 124
    df88:	f2 4f       	sbci	r31, 0xF2	; 242
    df8a:	40 83       	st	Z, r20
	offset += 6;
	cpubuffer[offset] = pt[1];
    df8c:	f9 01       	movw	r30, r18
    df8e:	e6 57       	subi	r30, 0x76	; 118
    df90:	f2 4f       	sbci	r31, 0xF2	; 242
    df92:	60 83       	st	Z, r22
	offset += 6;
	cpubuffer[offset] = pt[2];
    df94:	56 83       	std	Z+6, r21	; 0x06
    df96:	11 e0       	ldi	r17, 0x01	; 1
    df98:	01 c0       	rjmp	.+2      	; 0xdf9c <DoPlay+0x20ae>
    df9a:	10 e0       	ldi	r17, 0x00	; 0
		//	cpueval[cpumovepos[0]] = 1000L;
			cputotal = (uint16_t)(500L);
			uint8_t bufferreturn;
			if(true){//CpuBufferMove(cpumovepos[0],false)){
				bufferreturn = CpuBufferMove(cpumovepos[0],false);
				cpulastscore = CpuScoreAndGravityAsm(&well[WELLSIZE]);//CpuScoreAndGravity(cpumovepos[0]/3);
    df9c:	8d e0       	ldi	r24, 0x0D	; 13
    df9e:	9f e0       	ldi	r25, 0x0F	; 15
    dfa0:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <CpuScoreAndGravityAsm>
    dfa4:	48 2f       	mov	r20, r24
    dfa6:	50 e0       	ldi	r21, 0x00	; 0
    dfa8:	50 93 af 0f 	sts	0x0FAF, r21
    dfac:	40 93 ae 0f 	sts	0x0FAE, r20
				if(!bufferreturn){
    dfb0:	11 23       	and	r17, r17
    dfb2:	41 f4       	brne	.+16     	; 0xdfc4 <DoPlay+0x20d6>
					if(!cpulastscore){//move is a loss if it didn't score
    dfb4:	41 15       	cp	r20, r1
    dfb6:	51 05       	cpc	r21, r1
    dfb8:	41 f4       	brne	.+16     	; 0xdfca <DoPlay+0x20dc>
						cputotal = 0;
    dfba:	10 92 ff 0f 	sts	0x0FFF, r1
    dfbe:	10 92 fe 0f 	sts	0x0FFE, r1
    dfc2:	f7 c2       	rjmp	.+1518   	; 0xe5b2 <DoPlay+0x26c4>
					}
					//even if it did
				}				
				//cpueval[cpumovepos[0]] += 100;//better than a losing move...
				//cpulastscore = cpulastscore*cpulastscore*cpulastscore*cpulastscore;
				if(cpulastscore){
    dfc4:	41 15       	cp	r20, r1
    dfc6:	51 05       	cpc	r21, r1
    dfc8:	21 f0       	breq	.+8      	; 0xdfd2 <DoPlay+0x20e4>
					ColumnsPrint3num(16,16,cpulastscore);
    dfca:	80 e1       	ldi	r24, 0x10	; 16
    dfcc:	60 e1       	ldi	r22, 0x10	; 16
    dfce:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <ColumnsPrint3num>
				//	while(true){};
				}
				if(cpuscoremultiplier)
    dfd2:	20 91 fd 0f 	lds	r18, 0x0FFD
    dfd6:	22 23       	and	r18, r18
    dfd8:	b9 f0       	breq	.+46     	; 0xe008 <DoPlay+0x211a>
					cputotal += (uint16_t)(cpulastscore*cpuscoremultiplier);
    dfda:	30 e0       	ldi	r19, 0x00	; 0
    dfdc:	80 91 ae 0f 	lds	r24, 0x0FAE
    dfe0:	90 91 af 0f 	lds	r25, 0x0FAF
    dfe4:	b9 01       	movw	r22, r18
    dfe6:	68 9f       	mul	r22, r24
    dfe8:	90 01       	movw	r18, r0
    dfea:	69 9f       	mul	r22, r25
    dfec:	30 0d       	add	r19, r0
    dfee:	78 9f       	mul	r23, r24
    dff0:	30 0d       	add	r19, r0
    dff2:	11 24       	eor	r1, r1
    dff4:	80 91 fe 0f 	lds	r24, 0x0FFE
    dff8:	90 91 ff 0f 	lds	r25, 0x0FFF
    dffc:	82 0f       	add	r24, r18
    dffe:	93 1f       	adc	r25, r19
    e000:	90 93 ff 0f 	sts	0x0FFF, r25
    e004:	80 93 fe 0f 	sts	0x0FFE, r24
				if(cpulastchain > 1){//good chain, we will take these all day long!
    e008:	80 91 76 0f 	lds	r24, 0x0F76
    e00c:	82 30       	cpi	r24, 0x02	; 2
    e00e:	68 f0       	brcs	.+26     	; 0xe02a <DoPlay+0x213c>
					cpustate = CPUDECIDED;
    e010:	80 e2       	ldi	r24, 0x20	; 32
    e012:	80 93 a7 0e 	sts	0x0EA7, r24
					cpudecision[0] = cpumovepos[0]/3;
    e016:	20 91 7b 0e 	lds	r18, 0x0E7B
    e01a:	82 2f       	mov	r24, r18
    e01c:	63 e0       	ldi	r22, 0x03	; 3
    e01e:	a6 d3       	rcall	.+1868   	; 0xe76c <__udivmodqi4>
    e020:	80 93 6d 0e 	sts	0x0E6D, r24
					cpudecision[1] = (cpumovepos[0]+3)%3;
    e024:	30 e0       	ldi	r19, 0x00	; 0
    e026:	c9 01       	movw	r24, r18
    e028:	17 c3       	rjmp	.+1582   	; 0xe658 <DoPlay+0x276a>
					return;
				}
				
				if(!cpusecondmovemultiplier){//not thinking about second move, see if we are still doing evaluation
    e02a:	80 91 b6 0f 	lds	r24, 0x0FB6
    e02e:	88 23       	and	r24, r24
    e030:	09 f0       	breq	.+2      	; 0xe034 <DoPlay+0x2146>
    e032:	37 c1       	rjmp	.+622    	; 0xe2a2 <DoPlay+0x23b4>
					if(cpuevalmultiplier){
    e034:	80 91 75 0f 	lds	r24, 0x0F75
    e038:	88 23       	and	r24, r24
    e03a:	09 f4       	brne	.+2      	; 0xe03e <DoPlay+0x2150>
    e03c:	01 c1       	rjmp	.+514    	; 0xe240 <DoPlay+0x2352>
    e03e:	40 e0       	ldi	r20, 0x00	; 0
    e040:	50 e0       	ldi	r21, 0x00	; 0
    e042:	0a e5       	ldi	r16, 0x5A	; 90
    e044:	10 e0       	ldi	r17, 0x00	; 0
    e046:	3f e0       	ldi	r19, 0x0F	; 15
    e048:	f3 2e       	mov	r15, r19
    e04a:	db c0       	rjmp	.+438    	; 0xe202 <DoPlay+0x2314>
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
		for(uint8_t x=0;x<5;x++){
			if(!(t = cpubuffer[off++]))
    e04c:	f8 01       	movw	r30, r16
    e04e:	ec 57       	subi	r30, 0x7C	; 124
    e050:	f2 4f       	sbci	r31, 0xF2	; 242
    e052:	90 81       	ld	r25, Z
    e054:	b8 01       	movw	r22, r16
    e056:	6f 5f       	subi	r22, 0xFF	; 255
    e058:	7f 4f       	sbci	r23, 0xFF	; 255
    e05a:	99 23       	and	r25, r25
    e05c:	11 f4       	brne	.+4      	; 0xe062 <DoPlay+0x2174>
    e05e:	8b 01       	movw	r16, r22
    e060:	c6 c0       	rjmp	.+396    	; 0xe1ee <DoPlay+0x2300>
				continue;	
			
			if(t == cpubuffer[off+1]){
    e062:	8b 01       	movw	r16, r22
    e064:	0f 5f       	subi	r16, 0xFF	; 255
    e066:	1f 4f       	sbci	r17, 0xFF	; 255
    e068:	f8 01       	movw	r30, r16
    e06a:	ec 57       	subi	r30, 0x7C	; 124
    e06c:	f2 4f       	sbci	r31, 0xF2	; 242
    e06e:	20 81       	ld	r18, Z
    e070:	92 17       	cp	r25, r18
    e072:	99 f4       	brne	.+38     	; 0xe09a <DoPlay+0x21ac>
				score += 1;
    e074:	4f 5f       	subi	r20, 0xFF	; 255
    e076:	5f 4f       	sbci	r21, 0xFF	; 255
				if(x < 4 && !cpubuffer[off+2]){
    e078:	34 30       	cpi	r19, 0x04	; 4
    e07a:	09 f4       	brne	.+2      	; 0xe07e <DoPlay+0x2190>
    e07c:	08 c3       	rjmp	.+1552   	; 0xe68e <DoPlay+0x27a0>
    e07e:	fb 01       	movw	r30, r22
    e080:	ec 57       	subi	r30, 0x7C	; 124
    e082:	f2 4f       	sbci	r31, 0xF2	; 242
    e084:	82 81       	ldd	r24, Z+2	; 0x02
    e086:	88 23       	and	r24, r24
    e088:	a9 f4       	brne	.+42     	; 0xe0b4 <DoPlay+0x21c6>
					score += 2;
    e08a:	4e 5f       	subi	r20, 0xFE	; 254
    e08c:	5f 4f       	sbci	r21, 0xFF	; 255
					if(x<3 && t == cpubuffer[off+3])
    e08e:	33 30       	cpi	r19, 0x03	; 3
    e090:	89 f0       	breq	.+34     	; 0xe0b4 <DoPlay+0x21c6>
    e092:	83 81       	ldd	r24, Z+3	; 0x03
    e094:	98 17       	cp	r25, r24
    e096:	71 f4       	brne	.+28     	; 0xe0b4 <DoPlay+0x21c6>
    e098:	0b c0       	rjmp	.+22     	; 0xe0b0 <DoPlay+0x21c2>
						score += 3;
				}					
			}
			else if(x < 4 && t == cpubuffer[off+2]){
    e09a:	34 30       	cpi	r19, 0x04	; 4
    e09c:	09 f4       	brne	.+2      	; 0xe0a0 <DoPlay+0x21b2>
    e09e:	f7 c2       	rjmp	.+1518   	; 0xe68e <DoPlay+0x27a0>
    e0a0:	fb 01       	movw	r30, r22
    e0a2:	ec 57       	subi	r30, 0x7C	; 124
    e0a4:	f2 4f       	sbci	r31, 0xF2	; 242
    e0a6:	82 81       	ldd	r24, Z+2	; 0x02
    e0a8:	98 17       	cp	r25, r24
    e0aa:	21 f4       	brne	.+8      	; 0xe0b4 <DoPlay+0x21c6>
				if(cpubuffer[off+1] == 0)
    e0ac:	22 23       	and	r18, r18
    e0ae:	11 f4       	brne	.+4      	; 0xe0b4 <DoPlay+0x21c6>
					score += 3;
    e0b0:	4d 5f       	subi	r20, 0xFD	; 253
    e0b2:	5f 4f       	sbci	r21, 0xFF	; 255
			}
	
			if(x < 4 && /*x < 5 && */t == cpubuffer[off-5]){//above right
    e0b4:	db 01       	movw	r26, r22
    e0b6:	ac 57       	subi	r26, 0x7C	; 124
    e0b8:	b2 4f       	sbci	r27, 0xF2	; 242
    e0ba:	15 97       	sbiw	r26, 0x05	; 5
    e0bc:	8c 91       	ld	r24, X
    e0be:	15 96       	adiw	r26, 0x05	; 5
    e0c0:	98 17       	cp	r25, r24
    e0c2:	e9 f5       	brne	.+122    	; 0xe13e <DoPlay+0x2250>
				score+=3;
    e0c4:	4d 5f       	subi	r20, 0xFD	; 253
    e0c6:	5f 4f       	sbci	r21, 0xFF	; 255
				if(true){//x < 4){
					 if(!cpubuffer[off-10]){
    e0c8:	fd 01       	movw	r30, r26
    e0ca:	3a 97       	sbiw	r30, 0x0a	; 10
    e0cc:	20 81       	ld	r18, Z
    e0ce:	22 23       	and	r18, r18
    e0d0:	69 f4       	brne	.+26     	; 0xe0ec <DoPlay+0x21fe>
						score+=1;
    e0d2:	4f 5f       	subi	r20, 0xFF	; 255
    e0d4:	5f 4f       	sbci	r21, 0xFF	; 255
						if(x < 3 && t == cpubuffer[off-15])
    e0d6:	33 30       	cpi	r19, 0x03	; 3
    e0d8:	09 f4       	brne	.+2      	; 0xe0dc <DoPlay+0x21ee>
    e0da:	d9 c2       	rjmp	.+1458   	; 0xe68e <DoPlay+0x27a0>
    e0dc:	fd 01       	movw	r30, r26
    e0de:	3f 97       	sbiw	r30, 0x0f	; 15
    e0e0:	80 81       	ld	r24, Z
    e0e2:	98 17       	cp	r25, r24
    e0e4:	61 f5       	brne	.+88     	; 0xe13e <DoPlay+0x2250>
							score += 2;
    e0e6:	4e 5f       	subi	r20, 0xFE	; 254
    e0e8:	5f 4f       	sbci	r21, 0xFF	; 255
    e0ea:	29 c0       	rjmp	.+82     	; 0xe13e <DoPlay+0x2250>
					}
					else if(t == cpubuffer[off-16]){//one is in scoring spot, see if it could drop the right color
    e0ec:	fd 01       	movw	r30, r26
    e0ee:	70 97       	sbiw	r30, 0x10	; 16
    e0f0:	80 81       	ld	r24, Z
    e0f2:	98 17       	cp	r25, r24
    e0f4:	21 f5       	brne	.+72     	; 0xe13e <DoPlay+0x2250>
						score += 4;
    e0f6:	4c 5f       	subi	r20, 0xFC	; 252
    e0f8:	5f 4f       	sbci	r21, 0xFF	; 255
						t = cpubuffer[off-10];
						if(t == cpubuffer[off-11])
    e0fa:	fd 01       	movw	r30, r26
    e0fc:	3b 97       	sbiw	r30, 0x0b	; 11
    e0fe:	80 81       	ld	r24, Z
    e100:	28 17       	cp	r18, r24
    e102:	11 f4       	brne	.+4      	; 0xe108 <DoPlay+0x221a>
							score += 10;
    e104:	46 5f       	subi	r20, 0xF6	; 246
    e106:	5f 4f       	sbci	r21, 0xFF	; 255
						if(t == cpubuffer[off-17])
    e108:	fb 01       	movw	r30, r22
    e10a:	ed 58       	subi	r30, 0x8D	; 141
    e10c:	f2 4f       	sbci	r31, 0xF2	; 242
    e10e:	80 81       	ld	r24, Z
    e110:	28 17       	cp	r18, r24
    e112:	11 f4       	brne	.+4      	; 0xe118 <DoPlay+0x222a>
							score += 10;
    e114:	46 5f       	subi	r20, 0xF6	; 246
    e116:	5f 4f       	sbci	r21, 0xFF	; 255
						if(x < 3){
    e118:	33 30       	cpi	r19, 0x03	; 3
    e11a:	a9 f0       	breq	.+42     	; 0xe146 <DoPlay+0x2258>
							if(t == cpubuffer[off-9])
    e11c:	fb 01       	movw	r30, r22
    e11e:	e5 58       	subi	r30, 0x85	; 133
    e120:	f2 4f       	sbci	r31, 0xF2	; 242
    e122:	80 81       	ld	r24, Z
    e124:	28 17       	cp	r18, r24
    e126:	11 f4       	brne	.+4      	; 0xe12c <DoPlay+0x223e>
								score += 10;
    e128:	46 5f       	subi	r20, 0xF6	; 246
    e12a:	5f 4f       	sbci	r21, 0xFF	; 255
							if(t == cpubuffer[off-15])
    e12c:	fb 01       	movw	r30, r22
    e12e:	eb 58       	subi	r30, 0x8B	; 139
    e130:	f2 4f       	sbci	r31, 0xF2	; 242
    e132:	80 81       	ld	r24, Z
    e134:	28 17       	cp	r18, r24
    e136:	21 f4       	brne	.+8      	; 0xe140 <DoPlay+0x2252>
								score += 10;
    e138:	46 5f       	subi	r20, 0xF6	; 246
    e13a:	5f 4f       	sbci	r21, 0xFF	; 255
    e13c:	01 c0       	rjmp	.+2      	; 0xe140 <DoPlay+0x2252>
    e13e:	29 2f       	mov	r18, r25
					}
				}				
				
				
			}
			if(x > 1 && t == cpubuffer[off-7]){//above left(TODO MAKE SURE IT WORKS)
    e140:	32 30       	cpi	r19, 0x02	; 2
    e142:	08 f4       	brcc	.+2      	; 0xe146 <DoPlay+0x2258>
    e144:	44 c0       	rjmp	.+136    	; 0xe1ce <DoPlay+0x22e0>
    e146:	db 01       	movw	r26, r22
    e148:	ac 57       	subi	r26, 0x7C	; 124
    e14a:	b2 4f       	sbci	r27, 0xF2	; 242
    e14c:	17 97       	sbiw	r26, 0x07	; 7
    e14e:	8c 91       	ld	r24, X
    e150:	17 96       	adiw	r26, 0x07	; 7
    e152:	28 17       	cp	r18, r24
    e154:	e1 f5       	brne	.+120    	; 0xe1ce <DoPlay+0x22e0>
				score += 3;
    e156:	4d 5f       	subi	r20, 0xFD	; 253
    e158:	5f 4f       	sbci	r21, 0xFF	; 255
				if(true){
					 if(!cpubuffer[off-14]){
    e15a:	fd 01       	movw	r30, r26
    e15c:	3e 97       	sbiw	r30, 0x0e	; 14
    e15e:	90 81       	ld	r25, Z
    e160:	99 23       	and	r25, r25
    e162:	61 f4       	brne	.+24     	; 0xe17c <DoPlay+0x228e>
						 score+=1;
    e164:	4f 5f       	subi	r20, 0xFF	; 255
    e166:	5f 4f       	sbci	r21, 0xFF	; 255
						 if(x > 2 && t == cpubuffer[off-21])
    e168:	32 30       	cpi	r19, 0x02	; 2
    e16a:	89 f1       	breq	.+98     	; 0xe1ce <DoPlay+0x22e0>
    e16c:	fd 01       	movw	r30, r26
    e16e:	75 97       	sbiw	r30, 0x15	; 21
    e170:	80 81       	ld	r24, Z
    e172:	28 17       	cp	r18, r24
    e174:	61 f5       	brne	.+88     	; 0xe1ce <DoPlay+0x22e0>
							score += 2;
    e176:	4e 5f       	subi	r20, 0xFE	; 254
    e178:	5f 4f       	sbci	r21, 0xFF	; 255
    e17a:	29 c0       	rjmp	.+82     	; 0xe1ce <DoPlay+0x22e0>
					 }
					 else if(t == cpubuffer[off-20]){//one is in scoring spot, see if it could drop the right color
    e17c:	fd 01       	movw	r30, r26
    e17e:	74 97       	sbiw	r30, 0x14	; 20
    e180:	80 81       	ld	r24, Z
    e182:	28 17       	cp	r18, r24
    e184:	21 f5       	brne	.+72     	; 0xe1ce <DoPlay+0x22e0>
						score += 3;
    e186:	4d 5f       	subi	r20, 0xFD	; 253
    e188:	5f 4f       	sbci	r21, 0xFF	; 255
						 t = cpubuffer[off-14];
						 if(t == cpubuffer[off-13])
    e18a:	fd 01       	movw	r30, r26
    e18c:	3d 97       	sbiw	r30, 0x0d	; 13
    e18e:	80 81       	ld	r24, Z
    e190:	98 17       	cp	r25, r24
    e192:	11 f4       	brne	.+4      	; 0xe198 <DoPlay+0x22aa>
							score += 6;
    e194:	4a 5f       	subi	r20, 0xFA	; 250
    e196:	5f 4f       	sbci	r21, 0xFF	; 255
						if(t == cpubuffer[off-19])
    e198:	fb 01       	movw	r30, r22
    e19a:	ef 58       	subi	r30, 0x8F	; 143
    e19c:	f2 4f       	sbci	r31, 0xF2	; 242
    e19e:	80 81       	ld	r24, Z
    e1a0:	98 17       	cp	r25, r24
    e1a2:	11 f4       	brne	.+4      	; 0xe1a8 <DoPlay+0x22ba>
							score += 6;
    e1a4:	4a 5f       	subi	r20, 0xFA	; 250
    e1a6:	5f 4f       	sbci	r21, 0xFF	; 255
						if(x > 2){
    e1a8:	32 30       	cpi	r19, 0x02	; 2
    e1aa:	81 f0       	breq	.+32     	; 0xe1cc <DoPlay+0x22de>
							if(t == cpubuffer[off-15])
    e1ac:	fb 01       	movw	r30, r22
    e1ae:	eb 58       	subi	r30, 0x8B	; 139
    e1b0:	f2 4f       	sbci	r31, 0xF2	; 242
    e1b2:	80 81       	ld	r24, Z
    e1b4:	98 17       	cp	r25, r24
    e1b6:	11 f4       	brne	.+4      	; 0xe1bc <DoPlay+0x22ce>
								score += 6;
    e1b8:	4a 5f       	subi	r20, 0xFA	; 250
    e1ba:	5f 4f       	sbci	r21, 0xFF	; 255
							if(t == cpubuffer[off-21])
    e1bc:	fb 01       	movw	r30, r22
    e1be:	e1 59       	subi	r30, 0x91	; 145
    e1c0:	f2 4f       	sbci	r31, 0xF2	; 242
    e1c2:	80 81       	ld	r24, Z
    e1c4:	98 17       	cp	r25, r24
    e1c6:	11 f4       	brne	.+4      	; 0xe1cc <DoPlay+0x22de>
								score += 6;
    e1c8:	4a 5f       	subi	r20, 0xFA	; 250
    e1ca:	5f 4f       	sbci	r21, 0xFF	; 255
    e1cc:	29 2f       	mov	r18, r25
					 }
				 }
			 }
			}
	
			if(t == cpubuffer[off-6]){
    e1ce:	fb 01       	movw	r30, r22
    e1d0:	ec 57       	subi	r30, 0x7C	; 124
    e1d2:	f2 4f       	sbci	r31, 0xF2	; 242
    e1d4:	36 97       	sbiw	r30, 0x06	; 6
    e1d6:	80 81       	ld	r24, Z
    e1d8:	36 96       	adiw	r30, 0x06	; 6
    e1da:	28 17       	cp	r18, r24
    e1dc:	41 f4       	brne	.+16     	; 0xe1ee <DoPlay+0x2300>
				score+=1;
    e1de:	4f 5f       	subi	r20, 0xFF	; 255
    e1e0:	5f 4f       	sbci	r21, 0xFF	; 255
							score += 2;
						if(t == cpubuffer[off-19])
							score += 2;	
					}
				}
				else if(!cpubuffer[off-12])//nothing above
    e1e2:	3c 97       	sbiw	r30, 0x0c	; 12
    e1e4:	80 81       	ld	r24, Z
    e1e6:	88 23       	and	r24, r24
    e1e8:	11 f4       	brne	.+4      	; 0xe1ee <DoPlay+0x2300>
					score += 3;
    e1ea:	4d 5f       	subi	r20, 0xFD	; 253
    e1ec:	5f 4f       	sbci	r21, 0xFF	; 255
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
		for(uint8_t x=0;x<5;x++){
    e1ee:	3f 5f       	subi	r19, 0xFF	; 255
    e1f0:	35 30       	cpi	r19, 0x05	; 5
    e1f2:	09 f0       	breq	.+2      	; 0xe1f6 <DoPlay+0x2308>
    e1f4:	2b cf       	rjmp	.-426    	; 0xe04c <DoPlay+0x215e>
{-14}{-13}{-12}{-11}{-10}{ -9}
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
    e1f6:	fa 94       	dec	r15
    e1f8:	74 e0       	ldi	r23, 0x04	; 4
    e1fa:	f7 16       	cp	r15, r23
    e1fc:	21 f0       	breq	.+8      	; 0xe206 <DoPlay+0x2318>
				//		score += 4;
			//	}			
			}
			off++;
		}//x			
		off -= 11;
    e1fe:	0b 50       	subi	r16, 0x0B	; 11
    e200:	10 40       	sbci	r17, 0x00	; 0
    e202:	30 e0       	ldi	r19, 0x00	; 0
    e204:	23 cf       	rjmp	.-442    	; 0xe04c <DoPlay+0x215e>
					return;
				}
				
				if(!cpusecondmovemultiplier){//not thinking about second move, see if we are still doing evaluation
					if(cpuevalmultiplier){
						cpulasteval = CpuEvaluate();
    e206:	50 93 78 0f 	sts	0x0F78, r21
    e20a:	40 93 77 0f 	sts	0x0F77, r20
						if(cpulasteval > cpubaseval)
    e20e:	84 16       	cp	r8, r20
    e210:	95 06       	cpc	r9, r21
    e212:	b0 f4       	brcc	.+44     	; 0xe240 <DoPlay+0x2352>
							cputotal += ((cpulasteval-cpubaseval)*cpuevalmultiplier);	
    e214:	48 19       	sub	r20, r8
    e216:	59 09       	sbc	r21, r9
    e218:	80 91 75 0f 	lds	r24, 0x0F75
    e21c:	90 e0       	ldi	r25, 0x00	; 0
    e21e:	48 9f       	mul	r20, r24
    e220:	90 01       	movw	r18, r0
    e222:	49 9f       	mul	r20, r25
    e224:	30 0d       	add	r19, r0
    e226:	58 9f       	mul	r21, r24
    e228:	30 0d       	add	r19, r0
    e22a:	11 24       	eor	r1, r1
    e22c:	80 91 fe 0f 	lds	r24, 0x0FFE
    e230:	90 91 ff 0f 	lds	r25, 0x0FFF
    e234:	82 0f       	add	r24, r18
    e236:	93 1f       	adc	r25, r19
    e238:	90 93 ff 0f 	sts	0x0FFF, r25
    e23c:	80 93 fe 0f 	sts	0x0FFE, r24
					}						
					cputotal += (CpuEvaluateHeight()*cpuheightmultiplier);
    e240:	00 91 fe 0f 	lds	r16, 0x0FFE
    e244:	10 91 ff 0f 	lds	r17, 0x0FFF
}

inline uint16_t CpuEvaluateHeight(){
	uint16_t total = 0;
	
	for(uint8_t i=3*6;i<(12+(score[0]/10))*6;i++){	
    e248:	80 91 73 0f 	lds	r24, 0x0F73
    e24c:	6a e0       	ldi	r22, 0x0A	; 10
    e24e:	8e d2       	rcall	.+1308   	; 0xe76c <__udivmodqi4>
    e250:	8e 9d       	mul	r24, r14
    e252:	a0 01       	movw	r20, r0
    e254:	11 24       	eor	r1, r1
    e256:	49 5b       	subi	r20, 0xB9	; 185
    e258:	5f 4f       	sbci	r21, 0xFF	; 255
    e25a:	20 e0       	ldi	r18, 0x00	; 0
    e25c:	30 e0       	ldi	r19, 0x00	; 0
    e25e:	a2 e1       	ldi	r26, 0x12	; 18
    e260:	0d c0       	rjmp	.+26     	; 0xe27c <DoPlay+0x238e>
		if(!cpubuffer[i])
    e262:	ec 57       	subi	r30, 0x7C	; 124
    e264:	f2 4f       	sbci	r31, 0xF2	; 242
    e266:	80 81       	ld	r24, Z
    e268:	88 23       	and	r24, r24
    e26a:	39 f4       	brne	.+14     	; 0xe27a <DoPlay+0x238c>
			total+=(64-(i/6));
    e26c:	20 5c       	subi	r18, 0xC0	; 192
    e26e:	3f 4f       	sbci	r19, 0xFF	; 255
    e270:	8a 2f       	mov	r24, r26
    e272:	66 e0       	ldi	r22, 0x06	; 6
    e274:	7b d2       	rcall	.+1270   	; 0xe76c <__udivmodqi4>
    e276:	28 1b       	sub	r18, r24
    e278:	31 09       	sbc	r19, r1
}

inline uint16_t CpuEvaluateHeight(){
	uint16_t total = 0;
	
	for(uint8_t i=3*6;i<(12+(score[0]/10))*6;i++){	
    e27a:	af 5f       	subi	r26, 0xFF	; 255
    e27c:	ea 2f       	mov	r30, r26
    e27e:	f0 e0       	ldi	r31, 0x00	; 0
    e280:	4e 17       	cp	r20, r30
    e282:	5f 07       	cpc	r21, r31
    e284:	74 f7       	brge	.-36     	; 0xe262 <DoPlay+0x2374>
					if(cpuevalmultiplier){
						cpulasteval = CpuEvaluate();
						if(cpulasteval > cpubaseval)
							cputotal += ((cpulasteval-cpubaseval)*cpuevalmultiplier);	
					}						
					cputotal += (CpuEvaluateHeight()*cpuheightmultiplier);
    e286:	80 91 96 0e 	lds	r24, 0x0E96
    e28a:	90 e0       	ldi	r25, 0x00	; 0
    e28c:	dc 01       	movw	r26, r24
    e28e:	2a 9f       	mul	r18, r26
    e290:	c0 01       	movw	r24, r0
    e292:	2b 9f       	mul	r18, r27
    e294:	90 0d       	add	r25, r0
    e296:	3a 9f       	mul	r19, r26
    e298:	90 0d       	add	r25, r0
    e29a:	11 24       	eor	r1, r1
    e29c:	80 0f       	add	r24, r16
    e29e:	91 1f       	adc	r25, r17
    e2a0:	84 c1       	rjmp	.+776    	; 0xe5aa <DoPlay+0x26bc>
					goto CPUNEXTMOVE;
				}else if(CpuBufferMove(cpumovepos[1],true)){//do second move
    e2a2:	20 91 7c 0e 	lds	r18, 0x0E7C
#include "cpumisc.h"

inline bool CpuBufferMove(uint8_t m, bool prvw){
	uint8_t c = m/3;
    e2a6:	82 2f       	mov	r24, r18
    e2a8:	63 e0       	ldi	r22, 0x03	; 3
    e2aa:	60 d2       	rcall	.+1216   	; 0xe76c <__udivmodqi4>
    e2ac:	38 2f       	mov	r19, r24
	uint8_t r = m%3;
    e2ae:	82 2f       	mov	r24, r18
    e2b0:	5d d2       	rcall	.+1210   	; 0xe76c <__udivmodqi4>
    e2b2:	79 2f       	mov	r23, r25
    e2b4:	93 2f       	mov	r25, r19
    e2b6:	40 e0       	ldi	r20, 0x00	; 0
inline uint16_t CpuScoreAndGravity(uint8_t c);

inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
		if(cpubuffer[off])
    e2b8:	e9 2f       	mov	r30, r25
    e2ba:	f0 e0       	ldi	r31, 0x00	; 0
    e2bc:	ec 57       	subi	r30, 0x7C	; 124
    e2be:	f2 4f       	sbci	r31, 0xF2	; 242
    e2c0:	80 81       	ld	r24, Z
    e2c2:	88 23       	and	r24, r24
    e2c4:	29 f4       	brne	.+10     	; 0xe2d0 <DoPlay+0x23e2>

inline uint16_t CpuScoreAndGravity(uint8_t c);

inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
    e2c6:	4f 5f       	subi	r20, 0xFF	; 255
    e2c8:	40 31       	cpi	r20, 0x10	; 16
    e2ca:	a1 f0       	breq	.+40     	; 0xe2f4 <DoPlay+0x2406>
		if(cpubuffer[off])
			return i;
		off += 6;
    e2cc:	9a 5f       	subi	r25, 0xFA	; 250
    e2ce:	f4 cf       	rjmp	.-24     	; 0xe2b8 <DoPlay+0x23ca>

	//how high are the jewels in this column?
	//we want to set the jewel down without slowing CpuScoreAndGravity()
	uint8_t h = buffer_column_height(c);
	if(h < 6 || (h<9 && c == 2)){//HACK WAS h<6 losing move
    e2d0:	46 30       	cpi	r20, 0x06	; 6
    e2d2:	20 f0       	brcs	.+8      	; 0xe2dc <DoPlay+0x23ee>
    e2d4:	49 30       	cpi	r20, 0x09	; 9
    e2d6:	70 f4       	brcc	.+28     	; 0xe2f4 <DoPlay+0x2406>
    e2d8:	32 30       	cpi	r19, 0x02	; 2
    e2da:	61 f4       	brne	.+24     	; 0xe2f4 <DoPlay+0x2406>
		//TODO TAKE INTO CONSIDERATION SCORING
		if(prvw && ((preview[(1*3)+0] == preview[(1*3)+1]) && (preview[(1*3)+1] == preview[(1*3)+2]))){}//not all 1 color so will be a loss
    e2dc:	90 91 70 0f 	lds	r25, 0x0F70
    e2e0:	80 91 71 0f 	lds	r24, 0x0F71
    e2e4:	98 17       	cp	r25, r24
    e2e6:	09 f0       	breq	.+2      	; 0xe2ea <DoPlay+0x23fc>
    e2e8:	64 c1       	rjmp	.+712    	; 0xe5b2 <DoPlay+0x26c4>
    e2ea:	80 91 72 0f 	lds	r24, 0x0F72
    e2ee:	98 17       	cp	r25, r24
    e2f0:	09 f0       	breq	.+2      	; 0xe2f4 <DoPlay+0x2406>
    e2f2:	5f c1       	rjmp	.+702    	; 0xe5b2 <DoPlay+0x26c4>
		else if(!prvw && ((piece[(1*3)+0] == piece[(1*3)+1]) && (piece[(1*3)+1] == piece[(1*3)+2]))){}
		else
			return false;
	}		
//NOW JUST PUT PIECE AT TOP AND LET CPUSCOREANDGRAVITY() DO THE REST
	uint16_t offset = (((h-3)*6)+c);
    e2f4:	23 2f       	mov	r18, r19
    e2f6:	30 e0       	ldi	r19, 0x00	; 0
    e2f8:	22 51       	subi	r18, 0x12	; 18
    e2fa:	30 40       	sbci	r19, 0x00	; 0
    e2fc:	4e 9d       	mul	r20, r14
    e2fe:	c0 01       	movw	r24, r0
    e300:	11 24       	eor	r1, r1
    e302:	28 0f       	add	r18, r24
    e304:	39 1f       	adc	r19, r25
		for(uint8_t i=0;i<3;i++)
			pt[i] = piece[(1*3)+i];
	}
	else{//the preview piece
		for(uint8_t i=0;i<3;i++)
			pt[i] = preview[(1*3)+i];
    e306:	40 91 70 0f 	lds	r20, 0x0F70
    e30a:	60 91 71 0f 	lds	r22, 0x0F71
    e30e:	50 91 72 0f 	lds	r21, 0x0F72
    e312:	90 e0       	ldi	r25, 0x00	; 0
    e314:	05 c0       	rjmp	.+10     	; 0xe320 <DoPlay+0x2432>
	}
	
//	if(pt[0] == pt[1] && pt[1] == pt[2])//don't need consideration
//		return false;
	for(uint8_t i=0;i<r;i++){
    e316:	9f 5f       	subi	r25, 0xFF	; 255
    e318:	85 2f       	mov	r24, r21
    e31a:	56 2f       	mov	r21, r22
    e31c:	64 2f       	mov	r22, r20
    e31e:	48 2f       	mov	r20, r24
    e320:	97 17       	cp	r25, r23
    e322:	c8 f3       	brcs	.-14     	; 0xe316 <DoPlay+0x2428>
		pt[2] = pt[1];
		pt[1] = pt[0];
		pt[0] = t;
	}

	cpubuffer[offset] = pt[0];
    e324:	f9 01       	movw	r30, r18
    e326:	ec 57       	subi	r30, 0x7C	; 124
    e328:	f2 4f       	sbci	r31, 0xF2	; 242
    e32a:	40 83       	st	Z, r20
	offset += 6;
	cpubuffer[offset] = pt[1];
    e32c:	f9 01       	movw	r30, r18
    e32e:	e6 57       	subi	r30, 0x76	; 118
    e330:	f2 4f       	sbci	r31, 0xF2	; 242
    e332:	60 83       	st	Z, r22
	offset += 6;
	cpubuffer[offset] = pt[2];
    e334:	56 83       	std	Z+6, r21	; 0x06
					}						
					cputotal += (CpuEvaluateHeight()*cpuheightmultiplier);
					goto CPUNEXTMOVE;
				}else if(CpuBufferMove(cpumovepos[1],true)){//do second move
					//cputotal += 100;
					if(vsync_flag){//todo get rid of last score/eval calculated since we will redo it next time
    e336:	80 91 30 0d 	lds	r24, 0x0D30
    e33a:	88 23       	and	r24, r24
    e33c:	99 f0       	breq	.+38     	; 0xe364 <DoPlay+0x2476>
						vsync_flag = 0;
    e33e:	10 92 30 0d 	sts	0x0D30, r1
						totalvsyncs++;
    e342:	80 91 79 0e 	lds	r24, 0x0E79
    e346:	90 91 7a 0e 	lds	r25, 0x0E7A
    e34a:	01 96       	adiw	r24, 0x01	; 1
    e34c:	90 93 7a 0e 	sts	0x0E7A, r25
    e350:	80 93 79 0e 	sts	0x0E79, r24
						if(++vsyncs > 1)
    e354:	80 91 78 0e 	lds	r24, 0x0E78
    e358:	8f 5f       	subi	r24, 0xFF	; 255
    e35a:	80 93 78 0e 	sts	0x0E78, r24
    e35e:	82 30       	cpi	r24, 0x02	; 2
    e360:	08 f0       	brcs	.+2      	; 0xe364 <DoPlay+0x2476>
    e362:	99 c1       	rjmp	.+818    	; 0xe696 <DoPlay+0x27a8>
							return;
				
					}
					//TODO DONT CALCULATE IF SECOND JEWEL IS MAGIC OR ALL SAME
					//cpubestscore[cpubestoff] += 1;//better than a losing move...
					cpulastscore = CpuScoreAndGravityAsm(&well[WELLSIZE]);//CpuScoreAndGravity(cpumovepos[1]/3);
    e364:	8d e0       	ldi	r24, 0x0D	; 13
    e366:	9f e0       	ldi	r25, 0x0F	; 15
    e368:	0e 94 d7 4a 	call	0x95ae	; 0x95ae <CpuScoreAndGravityAsm>
    e36c:	90 e0       	ldi	r25, 0x00	; 0
    e36e:	90 93 af 0f 	sts	0x0FAF, r25
    e372:	80 93 ae 0f 	sts	0x0FAE, r24
					cpueval[cpumovepos[0]] += (cpulastscore*cpusecondmovemultiplier);
    e376:	e0 91 7b 0e 	lds	r30, 0x0E7B
    e37a:	f0 e0       	ldi	r31, 0x00	; 0
    e37c:	ee 0f       	add	r30, r30
    e37e:	ff 1f       	adc	r31, r31
    e380:	e6 53       	subi	r30, 0x36	; 54
    e382:	f0 4f       	sbci	r31, 0xF0	; 240
    e384:	20 91 b6 0f 	lds	r18, 0x0FB6
    e388:	30 e0       	ldi	r19, 0x00	; 0
    e38a:	ac 01       	movw	r20, r24
    e38c:	42 9f       	mul	r20, r18
    e38e:	c0 01       	movw	r24, r0
    e390:	43 9f       	mul	r20, r19
    e392:	90 0d       	add	r25, r0
    e394:	52 9f       	mul	r21, r18
    e396:	90 0d       	add	r25, r0
    e398:	11 24       	eor	r1, r1
    e39a:	20 81       	ld	r18, Z
    e39c:	31 81       	ldd	r19, Z+1	; 0x01
    e39e:	82 0f       	add	r24, r18
    e3a0:	93 1f       	adc	r25, r19
    e3a2:	91 83       	std	Z+1, r25	; 0x01
    e3a4:	80 83       	st	Z, r24

					if(cpuevalmultiplier){
    e3a6:	80 91 75 0f 	lds	r24, 0x0F75
    e3aa:	88 23       	and	r24, r24
    e3ac:	09 f4       	brne	.+2      	; 0xe3b0 <DoPlay+0x24c2>
    e3ae:	01 c1       	rjmp	.+514    	; 0xe5b2 <DoPlay+0x26c4>
    e3b0:	40 e0       	ldi	r20, 0x00	; 0
    e3b2:	50 e0       	ldi	r21, 0x00	; 0
    e3b4:	0a e5       	ldi	r16, 0x5A	; 90
    e3b6:	10 e0       	ldi	r17, 0x00	; 0
    e3b8:	bf e0       	ldi	r27, 0x0F	; 15
    e3ba:	fb 2e       	mov	r15, r27
    e3bc:	db c0       	rjmp	.+438    	; 0xe574 <DoPlay+0x2686>
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
		for(uint8_t x=0;x<5;x++){
			if(!(t = cpubuffer[off++]))
    e3be:	f8 01       	movw	r30, r16
    e3c0:	ec 57       	subi	r30, 0x7C	; 124
    e3c2:	f2 4f       	sbci	r31, 0xF2	; 242
    e3c4:	90 81       	ld	r25, Z
    e3c6:	b8 01       	movw	r22, r16
    e3c8:	6f 5f       	subi	r22, 0xFF	; 255
    e3ca:	7f 4f       	sbci	r23, 0xFF	; 255
    e3cc:	99 23       	and	r25, r25
    e3ce:	11 f4       	brne	.+4      	; 0xe3d4 <DoPlay+0x24e6>
    e3d0:	8b 01       	movw	r16, r22
    e3d2:	c6 c0       	rjmp	.+396    	; 0xe560 <DoPlay+0x2672>
				continue;	
			
			if(t == cpubuffer[off+1]){
    e3d4:	8b 01       	movw	r16, r22
    e3d6:	0f 5f       	subi	r16, 0xFF	; 255
    e3d8:	1f 4f       	sbci	r17, 0xFF	; 255
    e3da:	f8 01       	movw	r30, r16
    e3dc:	ec 57       	subi	r30, 0x7C	; 124
    e3de:	f2 4f       	sbci	r31, 0xF2	; 242
    e3e0:	20 81       	ld	r18, Z
    e3e2:	92 17       	cp	r25, r18
    e3e4:	99 f4       	brne	.+38     	; 0xe40c <DoPlay+0x251e>
				score += 1;
    e3e6:	4f 5f       	subi	r20, 0xFF	; 255
    e3e8:	5f 4f       	sbci	r21, 0xFF	; 255
				if(x < 4 && !cpubuffer[off+2]){
    e3ea:	34 30       	cpi	r19, 0x04	; 4
    e3ec:	09 f4       	brne	.+2      	; 0xe3f0 <DoPlay+0x2502>
    e3ee:	51 c1       	rjmp	.+674    	; 0xe692 <DoPlay+0x27a4>
    e3f0:	fb 01       	movw	r30, r22
    e3f2:	ec 57       	subi	r30, 0x7C	; 124
    e3f4:	f2 4f       	sbci	r31, 0xF2	; 242
    e3f6:	82 81       	ldd	r24, Z+2	; 0x02
    e3f8:	88 23       	and	r24, r24
    e3fa:	a9 f4       	brne	.+42     	; 0xe426 <DoPlay+0x2538>
					score += 2;
    e3fc:	4e 5f       	subi	r20, 0xFE	; 254
    e3fe:	5f 4f       	sbci	r21, 0xFF	; 255
					if(x<3 && t == cpubuffer[off+3])
    e400:	33 30       	cpi	r19, 0x03	; 3
    e402:	89 f0       	breq	.+34     	; 0xe426 <DoPlay+0x2538>
    e404:	83 81       	ldd	r24, Z+3	; 0x03
    e406:	98 17       	cp	r25, r24
    e408:	71 f4       	brne	.+28     	; 0xe426 <DoPlay+0x2538>
    e40a:	0b c0       	rjmp	.+22     	; 0xe422 <DoPlay+0x2534>
						score += 3;
				}					
			}
			else if(x < 4 && t == cpubuffer[off+2]){
    e40c:	34 30       	cpi	r19, 0x04	; 4
    e40e:	09 f4       	brne	.+2      	; 0xe412 <DoPlay+0x2524>
    e410:	40 c1       	rjmp	.+640    	; 0xe692 <DoPlay+0x27a4>
    e412:	fb 01       	movw	r30, r22
    e414:	ec 57       	subi	r30, 0x7C	; 124
    e416:	f2 4f       	sbci	r31, 0xF2	; 242
    e418:	82 81       	ldd	r24, Z+2	; 0x02
    e41a:	98 17       	cp	r25, r24
    e41c:	21 f4       	brne	.+8      	; 0xe426 <DoPlay+0x2538>
				if(cpubuffer[off+1] == 0)
    e41e:	22 23       	and	r18, r18
    e420:	11 f4       	brne	.+4      	; 0xe426 <DoPlay+0x2538>
					score += 3;
    e422:	4d 5f       	subi	r20, 0xFD	; 253
    e424:	5f 4f       	sbci	r21, 0xFF	; 255
			}
	
			if(x < 4 && /*x < 5 && */t == cpubuffer[off-5]){//above right
    e426:	db 01       	movw	r26, r22
    e428:	ac 57       	subi	r26, 0x7C	; 124
    e42a:	b2 4f       	sbci	r27, 0xF2	; 242
    e42c:	15 97       	sbiw	r26, 0x05	; 5
    e42e:	8c 91       	ld	r24, X
    e430:	15 96       	adiw	r26, 0x05	; 5
    e432:	98 17       	cp	r25, r24
    e434:	e9 f5       	brne	.+122    	; 0xe4b0 <DoPlay+0x25c2>
				score+=3;
    e436:	4d 5f       	subi	r20, 0xFD	; 253
    e438:	5f 4f       	sbci	r21, 0xFF	; 255
				if(true){//x < 4){
					 if(!cpubuffer[off-10]){
    e43a:	fd 01       	movw	r30, r26
    e43c:	3a 97       	sbiw	r30, 0x0a	; 10
    e43e:	20 81       	ld	r18, Z
    e440:	22 23       	and	r18, r18
    e442:	69 f4       	brne	.+26     	; 0xe45e <DoPlay+0x2570>
						score+=1;
    e444:	4f 5f       	subi	r20, 0xFF	; 255
    e446:	5f 4f       	sbci	r21, 0xFF	; 255
						if(x < 3 && t == cpubuffer[off-15])
    e448:	33 30       	cpi	r19, 0x03	; 3
    e44a:	09 f4       	brne	.+2      	; 0xe44e <DoPlay+0x2560>
    e44c:	22 c1       	rjmp	.+580    	; 0xe692 <DoPlay+0x27a4>
    e44e:	fd 01       	movw	r30, r26
    e450:	3f 97       	sbiw	r30, 0x0f	; 15
    e452:	80 81       	ld	r24, Z
    e454:	98 17       	cp	r25, r24
    e456:	61 f5       	brne	.+88     	; 0xe4b0 <DoPlay+0x25c2>
							score += 2;
    e458:	4e 5f       	subi	r20, 0xFE	; 254
    e45a:	5f 4f       	sbci	r21, 0xFF	; 255
    e45c:	29 c0       	rjmp	.+82     	; 0xe4b0 <DoPlay+0x25c2>
					}
					else if(t == cpubuffer[off-16]){//one is in scoring spot, see if it could drop the right color
    e45e:	fd 01       	movw	r30, r26
    e460:	70 97       	sbiw	r30, 0x10	; 16
    e462:	80 81       	ld	r24, Z
    e464:	98 17       	cp	r25, r24
    e466:	21 f5       	brne	.+72     	; 0xe4b0 <DoPlay+0x25c2>
						score += 4;
    e468:	4c 5f       	subi	r20, 0xFC	; 252
    e46a:	5f 4f       	sbci	r21, 0xFF	; 255
						t = cpubuffer[off-10];
						if(t == cpubuffer[off-11])
    e46c:	fd 01       	movw	r30, r26
    e46e:	3b 97       	sbiw	r30, 0x0b	; 11
    e470:	80 81       	ld	r24, Z
    e472:	28 17       	cp	r18, r24
    e474:	11 f4       	brne	.+4      	; 0xe47a <DoPlay+0x258c>
							score += 10;
    e476:	46 5f       	subi	r20, 0xF6	; 246
    e478:	5f 4f       	sbci	r21, 0xFF	; 255
						if(t == cpubuffer[off-17])
    e47a:	fb 01       	movw	r30, r22
    e47c:	ed 58       	subi	r30, 0x8D	; 141
    e47e:	f2 4f       	sbci	r31, 0xF2	; 242
    e480:	80 81       	ld	r24, Z
    e482:	28 17       	cp	r18, r24
    e484:	11 f4       	brne	.+4      	; 0xe48a <DoPlay+0x259c>
							score += 10;
    e486:	46 5f       	subi	r20, 0xF6	; 246
    e488:	5f 4f       	sbci	r21, 0xFF	; 255
						if(x < 3){
    e48a:	33 30       	cpi	r19, 0x03	; 3
    e48c:	a9 f0       	breq	.+42     	; 0xe4b8 <DoPlay+0x25ca>
							if(t == cpubuffer[off-9])
    e48e:	fb 01       	movw	r30, r22
    e490:	e5 58       	subi	r30, 0x85	; 133
    e492:	f2 4f       	sbci	r31, 0xF2	; 242
    e494:	80 81       	ld	r24, Z
    e496:	28 17       	cp	r18, r24
    e498:	11 f4       	brne	.+4      	; 0xe49e <DoPlay+0x25b0>
								score += 10;
    e49a:	46 5f       	subi	r20, 0xF6	; 246
    e49c:	5f 4f       	sbci	r21, 0xFF	; 255
							if(t == cpubuffer[off-15])
    e49e:	fb 01       	movw	r30, r22
    e4a0:	eb 58       	subi	r30, 0x8B	; 139
    e4a2:	f2 4f       	sbci	r31, 0xF2	; 242
    e4a4:	80 81       	ld	r24, Z
    e4a6:	28 17       	cp	r18, r24
    e4a8:	21 f4       	brne	.+8      	; 0xe4b2 <DoPlay+0x25c4>
								score += 10;
    e4aa:	46 5f       	subi	r20, 0xF6	; 246
    e4ac:	5f 4f       	sbci	r21, 0xFF	; 255
    e4ae:	01 c0       	rjmp	.+2      	; 0xe4b2 <DoPlay+0x25c4>
    e4b0:	29 2f       	mov	r18, r25
					}
				}				
				
				
			}
			if(x > 1 && t == cpubuffer[off-7]){//above left(TODO MAKE SURE IT WORKS)
    e4b2:	32 30       	cpi	r19, 0x02	; 2
    e4b4:	08 f4       	brcc	.+2      	; 0xe4b8 <DoPlay+0x25ca>
    e4b6:	44 c0       	rjmp	.+136    	; 0xe540 <DoPlay+0x2652>
    e4b8:	db 01       	movw	r26, r22
    e4ba:	ac 57       	subi	r26, 0x7C	; 124
    e4bc:	b2 4f       	sbci	r27, 0xF2	; 242
    e4be:	17 97       	sbiw	r26, 0x07	; 7
    e4c0:	8c 91       	ld	r24, X
    e4c2:	17 96       	adiw	r26, 0x07	; 7
    e4c4:	28 17       	cp	r18, r24
    e4c6:	e1 f5       	brne	.+120    	; 0xe540 <DoPlay+0x2652>
				score += 3;
    e4c8:	4d 5f       	subi	r20, 0xFD	; 253
    e4ca:	5f 4f       	sbci	r21, 0xFF	; 255
				if(true){
					 if(!cpubuffer[off-14]){
    e4cc:	fd 01       	movw	r30, r26
    e4ce:	3e 97       	sbiw	r30, 0x0e	; 14
    e4d0:	90 81       	ld	r25, Z
    e4d2:	99 23       	and	r25, r25
    e4d4:	61 f4       	brne	.+24     	; 0xe4ee <DoPlay+0x2600>
						 score+=1;
    e4d6:	4f 5f       	subi	r20, 0xFF	; 255
    e4d8:	5f 4f       	sbci	r21, 0xFF	; 255
						 if(x > 2 && t == cpubuffer[off-21])
    e4da:	32 30       	cpi	r19, 0x02	; 2
    e4dc:	89 f1       	breq	.+98     	; 0xe540 <DoPlay+0x2652>
    e4de:	fd 01       	movw	r30, r26
    e4e0:	75 97       	sbiw	r30, 0x15	; 21
    e4e2:	80 81       	ld	r24, Z
    e4e4:	28 17       	cp	r18, r24
    e4e6:	61 f5       	brne	.+88     	; 0xe540 <DoPlay+0x2652>
							score += 2;
    e4e8:	4e 5f       	subi	r20, 0xFE	; 254
    e4ea:	5f 4f       	sbci	r21, 0xFF	; 255
    e4ec:	29 c0       	rjmp	.+82     	; 0xe540 <DoPlay+0x2652>
					 }
					 else if(t == cpubuffer[off-20]){//one is in scoring spot, see if it could drop the right color
    e4ee:	fd 01       	movw	r30, r26
    e4f0:	74 97       	sbiw	r30, 0x14	; 20
    e4f2:	80 81       	ld	r24, Z
    e4f4:	28 17       	cp	r18, r24
    e4f6:	21 f5       	brne	.+72     	; 0xe540 <DoPlay+0x2652>
						score += 3;
    e4f8:	4d 5f       	subi	r20, 0xFD	; 253
    e4fa:	5f 4f       	sbci	r21, 0xFF	; 255
						 t = cpubuffer[off-14];
						 if(t == cpubuffer[off-13])
    e4fc:	fd 01       	movw	r30, r26
    e4fe:	3d 97       	sbiw	r30, 0x0d	; 13
    e500:	80 81       	ld	r24, Z
    e502:	98 17       	cp	r25, r24
    e504:	11 f4       	brne	.+4      	; 0xe50a <DoPlay+0x261c>
							score += 6;
    e506:	4a 5f       	subi	r20, 0xFA	; 250
    e508:	5f 4f       	sbci	r21, 0xFF	; 255
						if(t == cpubuffer[off-19])
    e50a:	fb 01       	movw	r30, r22
    e50c:	ef 58       	subi	r30, 0x8F	; 143
    e50e:	f2 4f       	sbci	r31, 0xF2	; 242
    e510:	80 81       	ld	r24, Z
    e512:	98 17       	cp	r25, r24
    e514:	11 f4       	brne	.+4      	; 0xe51a <DoPlay+0x262c>
							score += 6;
    e516:	4a 5f       	subi	r20, 0xFA	; 250
    e518:	5f 4f       	sbci	r21, 0xFF	; 255
						if(x > 2){
    e51a:	32 30       	cpi	r19, 0x02	; 2
    e51c:	81 f0       	breq	.+32     	; 0xe53e <DoPlay+0x2650>
							if(t == cpubuffer[off-15])
    e51e:	fb 01       	movw	r30, r22
    e520:	eb 58       	subi	r30, 0x8B	; 139
    e522:	f2 4f       	sbci	r31, 0xF2	; 242
    e524:	80 81       	ld	r24, Z
    e526:	98 17       	cp	r25, r24
    e528:	11 f4       	brne	.+4      	; 0xe52e <DoPlay+0x2640>
								score += 6;
    e52a:	4a 5f       	subi	r20, 0xFA	; 250
    e52c:	5f 4f       	sbci	r21, 0xFF	; 255
							if(t == cpubuffer[off-21])
    e52e:	fb 01       	movw	r30, r22
    e530:	e1 59       	subi	r30, 0x91	; 145
    e532:	f2 4f       	sbci	r31, 0xF2	; 242
    e534:	80 81       	ld	r24, Z
    e536:	98 17       	cp	r25, r24
    e538:	11 f4       	brne	.+4      	; 0xe53e <DoPlay+0x2650>
								score += 6;
    e53a:	4a 5f       	subi	r20, 0xFA	; 250
    e53c:	5f 4f       	sbci	r21, 0xFF	; 255
    e53e:	29 2f       	mov	r18, r25
					 }
				 }
			 }
			}
	
			if(t == cpubuffer[off-6]){
    e540:	fb 01       	movw	r30, r22
    e542:	ec 57       	subi	r30, 0x7C	; 124
    e544:	f2 4f       	sbci	r31, 0xF2	; 242
    e546:	36 97       	sbiw	r30, 0x06	; 6
    e548:	80 81       	ld	r24, Z
    e54a:	36 96       	adiw	r30, 0x06	; 6
    e54c:	28 17       	cp	r18, r24
    e54e:	41 f4       	brne	.+16     	; 0xe560 <DoPlay+0x2672>
				score+=1;
    e550:	4f 5f       	subi	r20, 0xFF	; 255
    e552:	5f 4f       	sbci	r21, 0xFF	; 255
							score += 2;
						if(t == cpubuffer[off-19])
							score += 2;	
					}
				}
				else if(!cpubuffer[off-12])//nothing above
    e554:	3c 97       	sbiw	r30, 0x0c	; 12
    e556:	80 81       	ld	r24, Z
    e558:	88 23       	and	r24, r24
    e55a:	11 f4       	brne	.+4      	; 0xe560 <DoPlay+0x2672>
					score += 3;
    e55c:	4d 5f       	subi	r20, 0xFD	; 253
    e55e:	5f 4f       	sbci	r21, 0xFF	; 255
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
		for(uint8_t x=0;x<5;x++){
    e560:	3f 5f       	subi	r19, 0xFF	; 255
    e562:	35 30       	cpi	r19, 0x05	; 5
    e564:	09 f0       	breq	.+2      	; 0xe568 <DoPlay+0x267a>
    e566:	2b cf       	rjmp	.-426    	; 0xe3be <DoPlay+0x24d0>
{-14}{-13}{-12}{-11}{-10}{ -9}
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	for(uint8_t y=15;y>2+2;y--){
    e568:	fa 94       	dec	r15
    e56a:	64 e0       	ldi	r22, 0x04	; 4
    e56c:	f6 16       	cp	r15, r22
    e56e:	21 f0       	breq	.+8      	; 0xe578 <DoPlay+0x268a>
				//		score += 4;
			//	}			
			}
			off++;
		}//x			
		off -= 11;
    e570:	0b 50       	subi	r16, 0x0B	; 11
    e572:	10 40       	sbci	r17, 0x00	; 0
    e574:	30 e0       	ldi	r19, 0x00	; 0
    e576:	23 cf       	rjmp	.-442    	; 0xe3be <DoPlay+0x24d0>
					//cpubestscore[cpubestoff] += 1;//better than a losing move...
					cpulastscore = CpuScoreAndGravityAsm(&well[WELLSIZE]);//CpuScoreAndGravity(cpumovepos[1]/3);
					cpueval[cpumovepos[0]] += (cpulastscore*cpusecondmovemultiplier);

					if(cpuevalmultiplier){
						cpulasteval = CpuEvaluate();
    e578:	50 93 78 0f 	sts	0x0F78, r21
    e57c:	40 93 77 0f 	sts	0x0F77, r20
						if(cpulasteval > cpubaseval)
    e580:	84 16       	cp	r8, r20
    e582:	95 06       	cpc	r9, r21
    e584:	b0 f4       	brcc	.+44     	; 0xe5b2 <DoPlay+0x26c4>
							cputotal += ((cpulasteval-cpubaseval)*cpuevalmultiplier);
    e586:	48 19       	sub	r20, r8
    e588:	59 09       	sbc	r21, r9
    e58a:	80 91 75 0f 	lds	r24, 0x0F75
    e58e:	90 e0       	ldi	r25, 0x00	; 0
    e590:	48 9f       	mul	r20, r24
    e592:	90 01       	movw	r18, r0
    e594:	49 9f       	mul	r20, r25
    e596:	30 0d       	add	r19, r0
    e598:	58 9f       	mul	r21, r24
    e59a:	30 0d       	add	r19, r0
    e59c:	11 24       	eor	r1, r1
    e59e:	80 91 fe 0f 	lds	r24, 0x0FFE
    e5a2:	90 91 ff 0f 	lds	r25, 0x0FFF
    e5a6:	82 0f       	add	r24, r18
    e5a8:	93 1f       	adc	r25, r19
    e5aa:	90 93 ff 0f 	sts	0x0FFF, r25
    e5ae:	80 93 fe 0f 	sts	0x0FFE, r24
				cpueval[cpumovepos[0]] = 0;
				
				goto CPUNEXTMOVE;
			}
CPUNEXTMOVE:
			cpueval[cpumovepos[0]] += cputotal;
    e5b2:	40 91 7b 0e 	lds	r20, 0x0E7B
    e5b6:	e4 2f       	mov	r30, r20
    e5b8:	f0 e0       	ldi	r31, 0x00	; 0
    e5ba:	ee 0f       	add	r30, r30
    e5bc:	ff 1f       	adc	r31, r31
    e5be:	e6 53       	subi	r30, 0x36	; 54
    e5c0:	f0 4f       	sbci	r31, 0xF0	; 240
    e5c2:	80 81       	ld	r24, Z
    e5c4:	91 81       	ldd	r25, Z+1	; 0x01
    e5c6:	20 91 fe 0f 	lds	r18, 0x0FFE
    e5ca:	30 91 ff 0f 	lds	r19, 0x0FFF
    e5ce:	82 0f       	add	r24, r18
    e5d0:	93 1f       	adc	r25, r19
    e5d2:	91 83       	std	Z+1, r25	; 0x01
    e5d4:	80 83       	st	Z, r24

			if(++cpumovepos[0] > 17){
    e5d6:	4f 5f       	subi	r20, 0xFF	; 255
    e5d8:	40 93 7b 0e 	sts	0x0E7B, r20
    e5dc:	42 31       	cpi	r20, 0x12	; 18
    e5de:	08 f4       	brcc	.+2      	; 0xe5e2 <DoPlay+0x26f4>
    e5e0:	38 cc       	rjmp	.-1936   	; 0xde52 <DoPlay+0x1f64>
				cpumovepos[0] = 0;
    e5e2:	10 92 7b 0e 	sts	0x0E7B, r1
				if(!cpusecondmovemultiplier)
    e5e6:	80 91 b6 0f 	lds	r24, 0x0FB6
    e5ea:	88 23       	and	r24, r24
    e5ec:	11 f4       	brne	.+4      	; 0xe5f2 <DoPlay+0x2704>
					cpumovepos[1] = 17;
    e5ee:	b0 92 7c 0e 	sts	0x0E7C, r11
				if(++cpumovepos[1] > 17){//tried all moves, use the best
    e5f2:	80 91 7c 0e 	lds	r24, 0x0E7C
    e5f6:	8f 5f       	subi	r24, 0xFF	; 255
    e5f8:	80 93 7c 0e 	sts	0x0E7C, r24
    e5fc:	82 31       	cpi	r24, 0x12	; 18
    e5fe:	08 f4       	brcc	.+2      	; 0xe602 <DoPlay+0x2714>
    e600:	28 cc       	rjmp	.-1968   	; 0xde52 <DoPlay+0x1f64>
CPUPICKMOVE:			cpumovepos[1] = 0;
    e602:	10 92 7c 0e 	sts	0x0E7C, r1
    e606:	ea ec       	ldi	r30, 0xCA	; 202
    e608:	ff e0       	ldi	r31, 0x0F	; 15
    e60a:	40 e0       	ldi	r20, 0x00	; 0
    e60c:	80 e0       	ldi	r24, 0x00	; 0
    e60e:	90 e0       	ldi	r25, 0x00	; 0
    e610:	5f ef       	ldi	r21, 0xFF	; 255

					uint8_t best = 255;
					uint16_t mag = 0;
					for(uint8_t i=0;i<18;i++){
//ColumnsPrint3num(16,8+i,cpueval[i]/10);
						if(cpueval[i] > mag){
    e612:	20 81       	ld	r18, Z
    e614:	31 81       	ldd	r19, Z+1	; 0x01
    e616:	82 17       	cp	r24, r18
    e618:	93 07       	cpc	r25, r19
    e61a:	10 f0       	brcs	.+4      	; 0xe620 <DoPlay+0x2732>
    e61c:	9c 01       	movw	r18, r24
    e61e:	01 c0       	rjmp	.+2      	; 0xe622 <DoPlay+0x2734>
    e620:	54 2f       	mov	r21, r20
				if(++cpumovepos[1] > 17){//tried all moves, use the best
CPUPICKMOVE:			cpumovepos[1] = 0;

					uint8_t best = 255;
					uint16_t mag = 0;
					for(uint8_t i=0;i<18;i++){
    e622:	4f 5f       	subi	r20, 0xFF	; 255
    e624:	32 96       	adiw	r30, 0x02	; 2
    e626:	42 31       	cpi	r20, 0x12	; 18
    e628:	11 f0       	breq	.+4      	; 0xe62e <DoPlay+0x2740>
    e62a:	c9 01       	movw	r24, r18
    e62c:	f2 cf       	rjmp	.-28     	; 0xe612 <DoPlay+0x2724>
						if(cpueval[i] > mag){
							best = i;
							mag = cpueval[i];
						}
					}
cpumovenum++;
    e62e:	80 91 9f 0e 	lds	r24, 0x0E9F
    e632:	90 91 a0 0e 	lds	r25, 0x0EA0
    e636:	01 96       	adiw	r24, 0x01	; 1
    e638:	90 93 a0 0e 	sts	0x0EA0, r25
    e63c:	80 93 9f 0e 	sts	0x0E9F, r24
					if(best == 255)//could not make a move that doesn't lose, don't make a suicide move run out the time(maybe they will lose first)
    e640:	5f 3f       	cpi	r21, 0xFF	; 255
    e642:	49 f1       	breq	.+82     	; 0xe696 <DoPlay+0x27a8>
						return;
					cpustate = CPUDECIDED;
    e644:	80 e2       	ldi	r24, 0x20	; 32
    e646:	80 93 a7 0e 	sts	0x0EA7, r24
					cpudecision[0] = best/3;
    e64a:	85 2f       	mov	r24, r21
    e64c:	63 e0       	ldi	r22, 0x03	; 3
    e64e:	8e d0       	rcall	.+284    	; 0xe76c <__udivmodqi4>
    e650:	80 93 6d 0e 	sts	0x0E6D, r24
					cpudecision[1] = (best+3)%3;//HACK? WHAT IS WRONG HERE!
    e654:	85 2f       	mov	r24, r21
    e656:	90 e0       	ldi	r25, 0x00	; 0
    e658:	03 96       	adiw	r24, 0x03	; 3
    e65a:	63 e0       	ldi	r22, 0x03	; 3
    e65c:	70 e0       	ldi	r23, 0x00	; 0
    e65e:	a6 d0       	rcall	.+332    	; 0xe7ac <__divmodhi4>
    e660:	80 93 6e 0e 	sts	0x0E6E, r24
    e664:	18 c0       	rjmp	.+48     	; 0xe696 <DoPlay+0x27a8>
		SummonMagicJewel(p);
	//}
		return;
	}

	if(state[p] & (GAMEOVER|GETREADY))
    e666:	ed a5       	ldd	r30, Y+45	; 0x2d
    e668:	fe a5       	ldd	r31, Y+46	; 0x2e
    e66a:	e6 55       	subi	r30, 0x56	; 86
    e66c:	f1 4f       	sbci	r31, 0xF1	; 241
    e66e:	80 81       	ld	r24, Z
    e670:	98 2f       	mov	r25, r24
    e672:	80 79       	andi	r24, 0x90	; 144
    e674:	11 f0       	breq	.+4      	; 0xe67a <DoPlay+0x278c>
    e676:	0c 94 59 64 	jmp	0xc8b2	; 0xc8b2 <DoPlay+0x9c4>
    e67a:	0c 94 d3 64 	jmp	0xc9a6	; 0xc9a6 <DoPlay+0xab8>
bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
    e67e:	95 fd       	sbrc	r25, 5
    e680:	02 c0       	rjmp	.+4      	; 0xe686 <DoPlay+0x2798>
    e682:	0c 94 59 64 	jmp	0xc8b2	; 0xc8b2 <DoPlay+0x9c4>
    e686:	0c 94 e5 64 	jmp	0xc9ca	; 0xc9ca <DoPlay+0xadc>
    e68a:	29 2f       	mov	r18, r25
    e68c:	45 cb       	rjmp	.-2422   	; 0xdd18 <DoPlay+0x1e2a>
    e68e:	29 2f       	mov	r18, r25
    e690:	5a cd       	rjmp	.-1356   	; 0xe146 <DoPlay+0x2258>
    e692:	29 2f       	mov	r18, r25
    e694:	11 cf       	rjmp	.-478    	; 0xe4b8 <DoPlay+0x25ca>
		CpuThink();//all extra time goes to cpu player, he is expensive!
}
    e696:	ae 96       	adiw	r28, 0x2e	; 46
    e698:	e2 e1       	ldi	r30, 0x12	; 18
    e69a:	d9 c0       	rjmp	.+434    	; 0xe84e <__epilogue_restores__>

0000e69c <main>:


//Boot loader limit 61440
void main() __attribute__ ((noreturn));//gcc already knows it doesn't return...
void main(){
	InitMusicPlayer(patches);
    e69c:	8b ec       	ldi	r24, 0xCB	; 203
    e69e:	99 e6       	ldi	r25, 0x69	; 105
    e6a0:	0e 94 ec 4b 	call	0x97d8	; 0x97d8 <InitMusicPlayer>
	SetTileTable(ColumnsTiles);
    e6a4:	84 ee       	ldi	r24, 0xE4	; 228
    e6a6:	90 e0       	ldi	r25, 0x00	; 0
    e6a8:	0e 94 d8 4a 	call	0x95b0	; 0x95b0 <SetTileTable>
    e6ac:	e0 e2       	ldi	r30, 0x20	; 32
    e6ae:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = RAM_TILES_COUNT;
    e6b0:	84 e2       	ldi	r24, 0x24	; 36
    e6b2:	81 93       	st	Z+, r24
//Boot loader limit 61440
void main() __attribute__ ((noreturn));//gcc already knows it doesn't return...
void main(){
	InitMusicPlayer(patches);
	SetTileTable(ColumnsTiles);
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    e6b4:	94 e0       	ldi	r25, 0x04	; 4
    e6b6:	ec 32       	cpi	r30, 0x2C	; 44
    e6b8:	f9 07       	cpc	r31, r25
    e6ba:	d9 f7       	brne	.-10     	; 0xe6b2 <main+0x16>
		WaitVsync(60);
		TriggerFx(47,255,true);
		WaitVsync(60);	
	}		
	*/	
	lfsr[0] = lfsr[1] = lfsr[2] = 0x2A46;//0xACE1;
    e6bc:	86 e4       	ldi	r24, 0x46	; 70
    e6be:	9a e2       	ldi	r25, 0x2A	; 42
    e6c0:	90 93 9e 0f 	sts	0x0F9E, r25
    e6c4:	80 93 9d 0f 	sts	0x0F9D, r24
    e6c8:	90 93 9c 0f 	sts	0x0F9C, r25
    e6cc:	80 93 9b 0f 	sts	0x0F9B, r24
    e6d0:	90 93 9a 0f 	sts	0x0F9A, r25
    e6d4:	80 93 99 0f 	sts	0x0F99, r24
	cpuskill = 9;
    e6d8:	89 e0       	ldi	r24, 0x09	; 9
    e6da:	80 93 77 0e 	sts	0x0E77, r24
	level = 1;
    e6de:	81 e0       	ldi	r24, 0x01	; 1
    e6e0:	80 93 83 0f 	sts	0x0F83, r24
	musictrack = !level;
    e6e4:	10 92 00 01 	sts	0x0100, r1
	StartSong(Song1);//StartSong(Song0);
    e6e8:	89 e4       	ldi	r24, 0x49	; 73
    e6ea:	9a e7       	ldi	r25, 0x7A	; 122
    e6ec:	0e 94 07 4c 	call	0x980e	; 0x980e <StartSong>
	SetMasterVolume(MASTERVOLUME);
    e6f0:	80 e8       	ldi	r24, 0x80	; 128
    e6f2:	0e 94 5a 4c 	call	0x98b4	; 0x98b4 <SetMasterVolume>
	//while(1){};
	//Intro();
	game_state = GS_TITLE;
    e6f6:	10 92 a6 0e 	sts	0x0EA6, r1
    e6fa:	09 c0       	rjmp	.+18     	; 0xe70e <main+0x72>
	
MAINTOP:
	while(vsyncs < 2){
		WaitVsync(1);
    e6fc:	81 e0       	ldi	r24, 0x01	; 1
    e6fe:	90 e0       	ldi	r25, 0x00	; 0
    e700:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <WaitVsync>
		vsyncs++;
    e704:	80 91 78 0e 	lds	r24, 0x0E78
    e708:	8f 5f       	subi	r24, 0xFF	; 255
    e70a:	80 93 78 0e 	sts	0x0E78, r24
	//while(1){};
	//Intro();
	game_state = GS_TITLE;
	
MAINTOP:
	while(vsyncs < 2){
    e70e:	80 91 78 0e 	lds	r24, 0x0E78
    e712:	82 30       	cpi	r24, 0x02	; 2
    e714:	98 f3       	brcs	.-26     	; 0xe6fc <main+0x60>
		WaitVsync(1);
		vsyncs++;
	}
	vsyncs = 0;
    e716:	10 92 78 0e 	sts	0x0E78, r1
	
	if(game_state == GS_TITLE)
    e71a:	80 91 a6 0e 	lds	r24, 0x0EA6
    e71e:	88 23       	and	r24, r24
    e720:	19 f4       	brne	.+6      	; 0xe728 <main+0x8c>
		DoTitle();
    e722:	0e 94 53 5b 	call	0xb6a6	; 0xb6a6 <DoTitle>
    e726:	f3 cf       	rjmp	.-26     	; 0xe70e <main+0x72>
	else
		DoPlay();
    e728:	0e 94 77 5f 	call	0xbeee	; 0xbeee <DoPlay>
    e72c:	f0 cf       	rjmp	.-32     	; 0xe70e <main+0x72>

0000e72e <__mulsi3>:
    e72e:	62 9f       	mul	r22, r18
    e730:	d0 01       	movw	r26, r0
    e732:	73 9f       	mul	r23, r19
    e734:	f0 01       	movw	r30, r0
    e736:	82 9f       	mul	r24, r18
    e738:	e0 0d       	add	r30, r0
    e73a:	f1 1d       	adc	r31, r1
    e73c:	64 9f       	mul	r22, r20
    e73e:	e0 0d       	add	r30, r0
    e740:	f1 1d       	adc	r31, r1
    e742:	92 9f       	mul	r25, r18
    e744:	f0 0d       	add	r31, r0
    e746:	83 9f       	mul	r24, r19
    e748:	f0 0d       	add	r31, r0
    e74a:	74 9f       	mul	r23, r20
    e74c:	f0 0d       	add	r31, r0
    e74e:	65 9f       	mul	r22, r21
    e750:	f0 0d       	add	r31, r0
    e752:	99 27       	eor	r25, r25
    e754:	72 9f       	mul	r23, r18
    e756:	b0 0d       	add	r27, r0
    e758:	e1 1d       	adc	r30, r1
    e75a:	f9 1f       	adc	r31, r25
    e75c:	63 9f       	mul	r22, r19
    e75e:	b0 0d       	add	r27, r0
    e760:	e1 1d       	adc	r30, r1
    e762:	f9 1f       	adc	r31, r25
    e764:	bd 01       	movw	r22, r26
    e766:	cf 01       	movw	r24, r30
    e768:	11 24       	eor	r1, r1
    e76a:	08 95       	ret

0000e76c <__udivmodqi4>:
    e76c:	99 1b       	sub	r25, r25
    e76e:	79 e0       	ldi	r23, 0x09	; 9
    e770:	04 c0       	rjmp	.+8      	; 0xe77a <__udivmodqi4_ep>

0000e772 <__udivmodqi4_loop>:
    e772:	99 1f       	adc	r25, r25
    e774:	96 17       	cp	r25, r22
    e776:	08 f0       	brcs	.+2      	; 0xe77a <__udivmodqi4_ep>
    e778:	96 1b       	sub	r25, r22

0000e77a <__udivmodqi4_ep>:
    e77a:	88 1f       	adc	r24, r24
    e77c:	7a 95       	dec	r23
    e77e:	c9 f7       	brne	.-14     	; 0xe772 <__udivmodqi4_loop>
    e780:	80 95       	com	r24
    e782:	08 95       	ret

0000e784 <__udivmodhi4>:
    e784:	aa 1b       	sub	r26, r26
    e786:	bb 1b       	sub	r27, r27
    e788:	51 e1       	ldi	r21, 0x11	; 17
    e78a:	07 c0       	rjmp	.+14     	; 0xe79a <__udivmodhi4_ep>

0000e78c <__udivmodhi4_loop>:
    e78c:	aa 1f       	adc	r26, r26
    e78e:	bb 1f       	adc	r27, r27
    e790:	a6 17       	cp	r26, r22
    e792:	b7 07       	cpc	r27, r23
    e794:	10 f0       	brcs	.+4      	; 0xe79a <__udivmodhi4_ep>
    e796:	a6 1b       	sub	r26, r22
    e798:	b7 0b       	sbc	r27, r23

0000e79a <__udivmodhi4_ep>:
    e79a:	88 1f       	adc	r24, r24
    e79c:	99 1f       	adc	r25, r25
    e79e:	5a 95       	dec	r21
    e7a0:	a9 f7       	brne	.-22     	; 0xe78c <__udivmodhi4_loop>
    e7a2:	80 95       	com	r24
    e7a4:	90 95       	com	r25
    e7a6:	bc 01       	movw	r22, r24
    e7a8:	cd 01       	movw	r24, r26
    e7aa:	08 95       	ret

0000e7ac <__divmodhi4>:
    e7ac:	97 fb       	bst	r25, 7
    e7ae:	09 2e       	mov	r0, r25
    e7b0:	07 26       	eor	r0, r23
    e7b2:	0a d0       	rcall	.+20     	; 0xe7c8 <__divmodhi4_neg1>
    e7b4:	77 fd       	sbrc	r23, 7
    e7b6:	04 d0       	rcall	.+8      	; 0xe7c0 <__divmodhi4_neg2>
    e7b8:	e5 df       	rcall	.-54     	; 0xe784 <__udivmodhi4>
    e7ba:	06 d0       	rcall	.+12     	; 0xe7c8 <__divmodhi4_neg1>
    e7bc:	00 20       	and	r0, r0
    e7be:	1a f4       	brpl	.+6      	; 0xe7c6 <__divmodhi4_exit>

0000e7c0 <__divmodhi4_neg2>:
    e7c0:	70 95       	com	r23
    e7c2:	61 95       	neg	r22
    e7c4:	7f 4f       	sbci	r23, 0xFF	; 255

0000e7c6 <__divmodhi4_exit>:
    e7c6:	08 95       	ret

0000e7c8 <__divmodhi4_neg1>:
    e7c8:	f6 f7       	brtc	.-4      	; 0xe7c6 <__divmodhi4_exit>
    e7ca:	90 95       	com	r25
    e7cc:	81 95       	neg	r24
    e7ce:	9f 4f       	sbci	r25, 0xFF	; 255
    e7d0:	08 95       	ret

0000e7d2 <__udivmodsi4>:
    e7d2:	a1 e2       	ldi	r26, 0x21	; 33
    e7d4:	1a 2e       	mov	r1, r26
    e7d6:	aa 1b       	sub	r26, r26
    e7d8:	bb 1b       	sub	r27, r27
    e7da:	fd 01       	movw	r30, r26
    e7dc:	0d c0       	rjmp	.+26     	; 0xe7f8 <__udivmodsi4_ep>

0000e7de <__udivmodsi4_loop>:
    e7de:	aa 1f       	adc	r26, r26
    e7e0:	bb 1f       	adc	r27, r27
    e7e2:	ee 1f       	adc	r30, r30
    e7e4:	ff 1f       	adc	r31, r31
    e7e6:	a2 17       	cp	r26, r18
    e7e8:	b3 07       	cpc	r27, r19
    e7ea:	e4 07       	cpc	r30, r20
    e7ec:	f5 07       	cpc	r31, r21
    e7ee:	20 f0       	brcs	.+8      	; 0xe7f8 <__udivmodsi4_ep>
    e7f0:	a2 1b       	sub	r26, r18
    e7f2:	b3 0b       	sbc	r27, r19
    e7f4:	e4 0b       	sbc	r30, r20
    e7f6:	f5 0b       	sbc	r31, r21

0000e7f8 <__udivmodsi4_ep>:
    e7f8:	66 1f       	adc	r22, r22
    e7fa:	77 1f       	adc	r23, r23
    e7fc:	88 1f       	adc	r24, r24
    e7fe:	99 1f       	adc	r25, r25
    e800:	1a 94       	dec	r1
    e802:	69 f7       	brne	.-38     	; 0xe7de <__udivmodsi4_loop>
    e804:	60 95       	com	r22
    e806:	70 95       	com	r23
    e808:	80 95       	com	r24
    e80a:	90 95       	com	r25
    e80c:	9b 01       	movw	r18, r22
    e80e:	ac 01       	movw	r20, r24
    e810:	bd 01       	movw	r22, r26
    e812:	cf 01       	movw	r24, r30
    e814:	08 95       	ret

0000e816 <__prologue_saves__>:
    e816:	2f 92       	push	r2
    e818:	3f 92       	push	r3
    e81a:	4f 92       	push	r4
    e81c:	5f 92       	push	r5
    e81e:	6f 92       	push	r6
    e820:	7f 92       	push	r7
    e822:	8f 92       	push	r8
    e824:	9f 92       	push	r9
    e826:	af 92       	push	r10
    e828:	bf 92       	push	r11
    e82a:	cf 92       	push	r12
    e82c:	df 92       	push	r13
    e82e:	ef 92       	push	r14
    e830:	ff 92       	push	r15
    e832:	0f 93       	push	r16
    e834:	1f 93       	push	r17
    e836:	cf 93       	push	r28
    e838:	df 93       	push	r29
    e83a:	cd b7       	in	r28, 0x3d	; 61
    e83c:	de b7       	in	r29, 0x3e	; 62
    e83e:	ca 1b       	sub	r28, r26
    e840:	db 0b       	sbc	r29, r27
    e842:	0f b6       	in	r0, 0x3f	; 63
    e844:	f8 94       	cli
    e846:	de bf       	out	0x3e, r29	; 62
    e848:	0f be       	out	0x3f, r0	; 63
    e84a:	cd bf       	out	0x3d, r28	; 61
    e84c:	09 94       	ijmp

0000e84e <__epilogue_restores__>:
    e84e:	2a 88       	ldd	r2, Y+18	; 0x12
    e850:	39 88       	ldd	r3, Y+17	; 0x11
    e852:	48 88       	ldd	r4, Y+16	; 0x10
    e854:	5f 84       	ldd	r5, Y+15	; 0x0f
    e856:	6e 84       	ldd	r6, Y+14	; 0x0e
    e858:	7d 84       	ldd	r7, Y+13	; 0x0d
    e85a:	8c 84       	ldd	r8, Y+12	; 0x0c
    e85c:	9b 84       	ldd	r9, Y+11	; 0x0b
    e85e:	aa 84       	ldd	r10, Y+10	; 0x0a
    e860:	b9 84       	ldd	r11, Y+9	; 0x09
    e862:	c8 84       	ldd	r12, Y+8	; 0x08
    e864:	df 80       	ldd	r13, Y+7	; 0x07
    e866:	ee 80       	ldd	r14, Y+6	; 0x06
    e868:	fd 80       	ldd	r15, Y+5	; 0x05
    e86a:	0c 81       	ldd	r16, Y+4	; 0x04
    e86c:	1b 81       	ldd	r17, Y+3	; 0x03
    e86e:	aa 81       	ldd	r26, Y+2	; 0x02
    e870:	b9 81       	ldd	r27, Y+1	; 0x01
    e872:	ce 0f       	add	r28, r30
    e874:	d1 1d       	adc	r29, r1
    e876:	0f b6       	in	r0, 0x3f	; 63
    e878:	f8 94       	cli
    e87a:	de bf       	out	0x3e, r29	; 62
    e87c:	0f be       	out	0x3f, r0	; 63
    e87e:	cd bf       	out	0x3d, r28	; 61
    e880:	ed 01       	movw	r28, r26
    e882:	08 95       	ret

0000e884 <_exit>:
    e884:	f8 94       	cli

0000e886 <__stop_program>:
    e886:	ff cf       	rjmp	.-2      	; 0xe886 <__stop_program>
