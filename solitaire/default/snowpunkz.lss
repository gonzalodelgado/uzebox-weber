
snowpunkz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00800100  0000eb84  0000ec84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000eb84  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cd1  00800120  00800120  0000eca0  2**5
                  ALLOC
  3 .debug_aranges 000005f0  00000000  00000000  0000eca0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000013a6  00000000  00000000  0000f290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000067ec  00000000  00000000  00010636  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c48  00000000  00000000  00016e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000059cb  00000000  00000000  00017a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008d0  00000000  00000000  0001d438  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016c1  00000000  00000000  0001dd08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000032cf  00000000  00000000  0001f3c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ab0  00000000  00000000  00022698  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
/**
 * Dynamically sets the rasterizer parameters:
 * firstScanlineToRender = First scanline to render
 * scanlinesToRender     = Total number of vertical lines to render. 
 */
void SetRenderingParameters(u8 firstScanlineToRender, u8 scanlinesToRender){        
       0:	0c 94 f8 42 	jmp	0x85f0	; 0x85f0 <__ctors_end>

	playSong=false;
}


void ResumeSong(){
       4:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}


	void SetSpriteVisibility(bool visible){
       8:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
       c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      10:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      14:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      18:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      1c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      20:	0c 94 55 47 	jmp	0x8eaa	; 0x8eaa <__vector_8>
      24:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      28:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      2c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      30:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      34:	0c 94 39 45 	jmp	0x8a72	; 0x8a72 <__vector_13>
      38:	0c 94 76 45 	jmp	0x8aec	; 0x8aec <__vector_14>
      3c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      40:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      44:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      48:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      4c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      50:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      54:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      58:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      5c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      60:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      64:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      68:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>
      6c:	0c 94 65 43 	jmp	0x86ca	; 0x86ca <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	d4 48 d7 48 f1 49 d4 4c ce 4c e0 48 e5 48 ea 48     .H.H.I.L.L.H.H.H
      ce:	bd 4c ed 48 f0 48 f3 48 37 49 3a 49 3d 49           .L.H.H.H7I:I=I

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <patch00>:
      e8:	00 02 04 00 08 4a 01 08 4e 01 08 52 01 08 56 01     .....J..N..R..V.
      f8:	08 5a 01 00 f2 06 05 00 00 ff                       .Z........

00000102 <patch01>:
     102:	00 02 00 00 08 2d 01 08 32 01 08 36 01 08 3b 01     .....-..2..6..;.
     112:	08 40 01 08 44 01 08 49 01 08 4d 01 00 f2 08 05     .@..D..I..M.....
     122:	00 00 ff                                            ...

00000125 <patch02>:
     125:	00 02 02 00 08 2f 01 08 31 01 08 33 01 08 36 01     ...../..1..3..6.
     135:	08 38 01 08 3a 01 08 3c 01 00 fc 10 05 00 00 ff     .8..:..<........

00000145 <patch03>:
     145:	00 02 03 00 07 3a 01 00 19 00 0a df 00 09 aa 01     .....:..........
     155:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 09 05     ................
     165:	00 00 ff                                            ...

00000168 <patch04>:
     168:	00 09 aa 00 0a a0 00 02 04 00 07 36 00 00 10 01     ...........6....
     178:	06 00 00 00 fd 20 05 00 00 ff                       ..... ....

00000182 <patch05>:
     182:	00 02 03 00 07 3c 00 0a 78 00 09 63 01 07 4a 04     .....<..x..c..J.
     192:	07 4d 00 02 02 01 0a 3c 06 00 f8 02 00 f6 06 00     .M.....<........
     1a2:	ec 06 07 48 0a 05 00 00 ff                          ...H.....

000001ab <patch06>:
     1ab:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     1bb:	00 e2 08 05 00 00 ff                                .......

000001c2 <patch07>:
     1c2:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     1d2:	00 e2 08 05 00 00 ff                                .......

000001d9 <patch08>:
     1d9:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     1e9:	00 e2 08 05 00 00 ff                                .......

000001f0 <patch09>:
     1f0:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     200:	00 e2 08 05 00 00 ff                                .......

00000207 <patch10>:
     207:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     217:	00 e2 08 05 00 00 ff                                .......

0000021e <patch11>:
     21e:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     22e:	00 e2 08 05 00 00 ff                                .......

00000235 <patch12>:
     235:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     245:	00 e2 08 05 00 00 ff                                .......

0000024c <patch13>:
     24c:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     25c:	00 e2 08 05 00 00 ff                                .......

00000263 <patch14>:
     263:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     273:	00 e2 08 05 00 00 ff                                .......

0000027a <patch15>:
     27a:	00 09 58 00 0a 9b 00 02 04 00 07 3b 00 00 10 00     ..X........;....
     28a:	06 00 00 00 f8 10 05 00 00 ff                       ..........

00000294 <patch16>:
     294:	00 09 aa 00 0a b4 00 02 04 00 07 36 00 00 10 01     ...........6....
     2a4:	06 00 00 00 fd 08 05 00 00 ff                       ..........

000002ae <patch17>:
     2ae:	00 09 8c 00 0a 5a 00 02 04 01 07 5a 01 00 02 00     .....Z.....Z....
     2be:	06 00 00 00 fa 12 05 00 00 ff                       ..........

000002c8 <patch18>:
     2c8:	00 09 b4 00 0a 5a 00 02 04 01 07 5a 00 00 05 00     .....Z.....Z....
     2d8:	06 00 00 00 fa 12 05 00 00 ff                       ..........

000002e2 <patch19>:
     2e2:	00 01 7a 00 07 3c 00 00 0f 01 00 f1 01 00 f8 03     ..z..<..........
     2f2:	05 00 00 ff                                         ....

000002f6 <patch20>:
     2f6:	00 01 0b 00 07 28 00 00 ec 04 05 00 00 ff           .....(........

00000304 <patch21>:
     304:	00 01 0b 00 07 28 00 00 ec 04 05 00 00 ff           .....(........

00000312 <patch22>:
     312:	00 02 02 00 07 4c 00 00 19 00 0a c7 00 09 a0 01     .....L..........
     322:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 05 05     ................
     332:	00 00 ff                                            ...

00000335 <patch23>:
     335:	00 02 04 00 07 50 00 0a 2d 00 09 97 00 00 02 01     .....P..-.......
     345:	00 fd 04 00 f9 0b 05 00 00 ff                       ..........

0000034f <patch24>:
     34f:	00 02 03 00 07 50 00 0a 78 00 09 63 01 07 54 04     .....P..x..c..T.
     35f:	07 57 00 02 02 01 0a 3c 02 00 f8 00 00 f6 03 00     .W.....<........
     36f:	ec 0b 05 00 00 ff                                   ......

00000375 <patch25>:
     375:	00 01 05 00 07 42 00 00 e2 01 00 f1 01 00 f8 01     .....B..........
     385:	05 00 00 ff                                         ....

00000389 <patch26>:
     389:	00 01 08 00 07 37 00 00 e2 01 00 f1 01 00 f8 02     .....7..........
     399:	05 00 00 ff                                         ....

0000039d <patch27>:
     39d:	00 01 01 00 07 53 00 00 e2 08 05 00 00 ff           .....S........

000003ab <patch28>:
     3ab:	00 02 05 00 07 64 00 0a 79 00 09 58 00 00 f6 04     .....d..y..X....
     3bb:	00 f1 05 05 00 00 ff                                .......

000003c2 <patch29>:
     3c2:	00 02 04 00 07 66 00 0a 4d 00 09 4d 00 00 fb 03     .....f..M..M....
     3d2:	00 ec 05 05 00 00 ff                                .......

000003d9 <patch30>:
     3d9:	00 02 03 00 07 3a 01 00 19 00 0a df 00 09 aa 01     .....:..........
     3e9:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 05 05     ................
     3f9:	00 00 ff                                            ...

000003fc <patch31>:
     3fc:	00 02 04 00 07 43 00 0a cb 00 09 9e 03 00 ff 03     .....C..........
     40c:	00 fe 03 00 f9 03 00 f3 0b 05 00 00 ff              .............

00000419 <patch32>:
     419:	00 02 03 00 07 50 00 0a 78 00 09 63 01 07 54 04     .....P..x..c..T.
     429:	07 57 00 02 02 01 0a 3c 02 00 f8 00 00 f6 03 00     .W.....<........
     439:	ec 0b 05 00 00 ff                                   ......

0000043f <patch33>:
     43f:	00 02 04 00 07 43 00 0a cb 00 09 9e 03 00 ff 03     .....C..........
     44f:	00 fe 03 00 f9 03 00 f3 0b 05 00 00 ff              .............

0000045c <patch34>:
     45c:	00 02 05 00 07 66 00 0a 79 00 09 37 00 00 f6 04     .....f..y..7....
     46c:	00 ef 00 02 03 05 05 00 00 ff                       ..........

00000476 <patch35>:
     476:	00 02 04 00 07 68 00 0a b4 00 09 3c 00 00 07 01     .....h.....<....
     486:	00 fb 00 09 5a 05 00 f1 00 02 05 00 09 78 05 05     ....Z........x..
     496:	00 05 ff                                            ...

00000499 <patch36>:
     499:	00 01 12 00 07 42 00 00 e2 01 00 f1 01 00 f8 01     .....B..........
     4a9:	05 00 00 ff                                         ....

000004ad <patch37>:
     4ad:	00 01 05 00 07 33 00 00 f1 08 05 00 00 ff           .....3........

000004bb <patch38>:
     4bb:	00 01 09 00 07 42 00 00 e2 01 00 f1 01 00 f8 01     .....B..........
     4cb:	05 00 00 ff                                         ....

000004cf <patch39>:
     4cf:	00 01 16 00 07 90 00 00 e2 08 05 00 00 ff           ..............

000004dd <patch40>:
     4dd:	00 01 01 00 07 28 00 00 f1 08 05 00 00 ff           .....(........

000004eb <patch44>:
     4eb:	00 01 03 00 07 28 00 00 ec 08 05 00 00 ff           .....(........

000004f9 <patch45>:
     4f9:	00 01 01 00 07 32 00 00 e2 08 05 00 00 ff           .....2........

00000507 <patch46>:
     507:	00 09 d2 00 0a 6e 00 02 04 00 07 74 00 00 10 01     .....n.....t....
     517:	06 00 00 00 fc 27 05 00 00 ff                       .....'....

00000521 <patch47>:
     521:	00 09 a9 00 0a 3e 00 02 00 00 07 29 00 00 03 02     .....>.....)....
     531:	02 01 00 00 02 10 00 01 14 00 00 64 00 ff 3c 00     ...........d..<.
     541:	fe 08 05 00 00 ff                                   ......

00000547 <patch48>:
     547:	00 02 04 00 07 5e 00 0a 78 00 09 63 01 07 54 04     .....^..x..c..T.
     557:	07 57 00 02 02 01 0a 3c 06 00 f8 02 00 f6 04 07     .W.....<........
     567:	4e 03 00 ec 0b 05 00 00 ff                          N........

00000570 <patch49>:
     570:	00 01 07 00 07 28 00 00 e2 08 05 00 00 ff           .....(........

0000057e <patch50>:
     57e:	00 01 02 00 07 28 00 00 e2 01 00 f1 01 05 00 00     .....(..........
     58e:	ff                                                  .

0000058f <patch51>:
     58f:	00 01 09 00 07 40 01 01 0c 01 00 fc 01 00 f4 01     .....@..........
     59f:	00 e2 08 05 00 00 ff                                .......

000005a6 <patch52>:
     5a6:	00 01 05 00 07 60 00 00 e2 01 00 f1 01 00 f8 01     .....`..........
     5b6:	05 00 00 ff                                         ....

000005ba <patch53>:
     5ba:	00 01 01 00 07 40 00 00 e2 00 00 fd 2d 05 00 00     .....@......-...
     5ca:	ff                                                  .

000005cb <patch54>:
     5cb:	00 01 00 00 07 44 00 00 ec 01 00 fe 00 01 01 0a     .....D..........
     5db:	05 00 00 ff                                         ....

000005df <patch55>:
     5df:	00 01 2c 00 07 60 00 00 e2 01 00 fc 00 01 27 10     ..,..`........'.
     5ef:	05 00 00 ff                                         ....

000005f3 <patch56>:
     5f3:	00 01 42 00 07 60 00 00 e2 01 00 fc 00 01 2d 10     ..B..`........-.
     603:	05 00 00 ff                                         ....

00000607 <patch57>:
     607:	00 01 01 00 07 90 00 00 e2 08 05 00 00 ff           ..............

00000615 <patch58>:
     615:	00 01 0a 00 07 90 00 00 e2 08 05 00 00 ff           ..............

00000623 <patch59>:
     623:	00 01 01 00 07 28 00 00 e2 08 05 00 00 ff           .....(........

00000631 <patch60>:
     631:	00 01 29 00 07 28 00 00 e2 08 05 00 00 ff           ..)..(........

0000063f <patch61>:
     63f:	00 01 01 00 07 28 00 00 e2 08 05 00 00 ff           .....(........

0000064d <patch62>:
     64d:	00 02 00 00 07 42 00 00 19 00 0a b4 00 09 a0 01     .....B..........
     65d:	00 ff 05 02 02 00 06 00 10 00 fc 03 00 f6 04 00     ................
     66d:	f4 05 05 00 00 ff                                   ......

00000673 <patch63>:
     673:	00 02 04 00 07 16 00 0a 5a 00 09 65 00 00 02 04     ........Z..e....
     683:	00 00 06 00 fd 03 07 19 08 00 f9 0b 05 00 00 ff     ................

00000693 <patch64>:
     693:	00 02 03 00 07 50 00 0a 78 00 09 63 01 07 54 04     .....P..x..c..T.
     6a3:	07 57 00 02 02 01 0a 3c 16 00 f8 00 00 f6 06 07     .W.....<........
     6b3:	50 06 00 ec 0b 05 00 00 ff                          P........

000006bc <patch65>:
     6bc:	08 05 00 00 ff                                      .....

000006c1 <patch66>:
     6c1:	00 02 02 00 07 4c 00 00 19 00 0a c7 00 09 a0 01     .....L..........
     6d1:	00 ff 13 00 fc 00 06 00 03 00 f6 04 00 f4 05 05     ................
     6e1:	00 00 ff                                            ...

000006e4 <patch67>:
     6e4:	00 09 aa 00 0a b4 00 02 04 00 07 36 00 00 10 01     ...........6....
     6f4:	06 00 00 00 fd 08 05 00 00 ff                       ..........

000006fe <patch68>:
     6fe:	00 02 03 00 07 3c 00 0a 78 00 09 63 01 07 46 04     .....<..x..c..F.
     70e:	07 49 00 02 02 01 0a 3c 16 00 f8 00 00 f6 03 00     .I.....<........
     71e:	ec 0b 05 00 00 ff                                   ......

00000724 <patch69>:
     724:	00 02 03 00 07 4c 00 00 19 00 0a 58 00 09 c8 01     .....L.....X....
     734:	00 f9 07 00 f6 00 06 00 04 00 f4 05 05 00 00 ff     ................

00000744 <patch70>:
     744:	00 02 03 00 07 3c 00 0a de 00 09 43 01 07 4a 04     .....<.....C..J.
     754:	07 4d 00 02 02 01 0a 3c 06 00 f8 14 00 f6 06 00     .M.....<........
     764:	ec 06 07 48 0a 05 00 00 ff                          ...H.....

0000076d <patch71>:
     76d:	00 09 aa 00 0a a0 00 02 04 00 07 36 00 00 10 00     ...........6....
     77d:	00 fd 20 05 00 00 ff                                .. ....

00000784 <patch72>:
     784:	00 01 01 00 07 28 00 00 f1 08 05 00 00 ff           .....(........

00000792 <patch73>:
     792:	00 01 03 00 07 28 00 00 ec 08 05 00 00 ff           .....(........

000007a0 <patch74>:
     7a0:	00 01 01 00 07 32 00 00 e2 08 05 00 00 ff           .....2........

000007ae <patch75>:
     7ae:	00 01 01 00 07 20 00 00 e2 00 00 fd 2d 05 00 00     ..... ......-...
     7be:	ff                                                  .

000007bf <patches>:
     7bf:	00 00 00 e8 00 00 00 00 00 00 00 00 02 01 00 00     ................
     7cf:	00 00 00 00 00 25 01 00 00 00 00 00 00 00 45 01     .....%........E.
     7df:	00 00 00 00 00 00 00 68 01 00 00 00 00 00 00 00     .......h........
     7ef:	82 01 00 00 00 00 01 00 00 ab 01 00 00 00 00 01     ................
     7ff:	00 00 c2 01 00 00 00 00 01 00 00 d9 01 00 00 00     ................
     80f:	00 01 00 00 f0 01 00 00 00 00 01 00 00 07 02 00     ................
     81f:	00 00 00 01 00 00 1e 02 00 00 00 00 01 00 00 35     ...............5
     82f:	02 00 00 00 00 01 00 00 4c 02 00 00 00 00 01 00     ........L.......
     83f:	00 63 02 00 00 00 00 00 00 00 7a 02 00 00 00 00     .c........z.....
     84f:	00 00 00 94 02 00 00 00 00 00 00 00 ae 02 00 00     ................
     85f:	00 00 01 00 00 c8 02 00 00 00 00 01 00 00 e2 02     ................
     86f:	00 00 00 00 01 00 00 f6 02 00 00 00 00 01 00 00     ................
     87f:	04 03 00 00 00 00 00 00 00 12 03 00 00 00 00 00     ................
     88f:	00 00 35 03 00 00 00 00 00 00 00 4f 03 00 00 00     ..5........O....
     89f:	00 01 00 00 75 03 00 00 00 00 01 00 00 89 03 00     ....u...........
     8af:	00 00 00 01 00 00 9d 03 00 00 00 00 00 00 00 ab     ................
     8bf:	03 00 00 00 00 00 00 00 c2 03 00 00 00 00 00 00     ................
     8cf:	00 d9 03 00 00 00 00 00 00 00 fc 03 00 00 00 00     ................
     8df:	00 00 00 19 04 00 00 00 00 00 00 00 3f 04 00 00     ............?...
     8ef:	00 00 00 00 00 5c 04 00 00 00 00 00 00 00 76 04     .....\........v.
     8ff:	00 00 00 00 01 00 00 99 04 00 00 00 00 01 00 00     ................
     90f:	ad 04 00 00 00 00 01 00 00 bb 04 00 00 00 00 01     ................
     91f:	00 00 cf 04 00 00 00 00 00 00 00 dd 04 00 00 00     ................
     92f:	00 00 00 00 dd 04 00 00 00 00 00 00 00 dd 04 00     ................
     93f:	00 00 00 01 00 00 dd 04 00 00 00 00 01 00 00 eb     ................
     94f:	04 00 00 00 00 01 00 00 f9 04 00 00 00 00 00 00     ................
     95f:	00 07 05 00 00 00 00 00 00 00 21 05 00 00 00 00     ..........!.....
     96f:	00 00 00 47 05 00 00 00 00 01 00 00 70 05 00 00     ...G........p...
     97f:	00 00 01 00 00 7e 05 00 00 00 00 01 00 00 8f 05     .....~..........
     98f:	00 00 00 00 01 00 00 a6 05 00 00 00 00 01 00 00     ................
     99f:	ba 05 00 00 00 00 01 00 00 cb 05 00 00 00 00 01     ................
     9af:	00 00 df 05 00 00 00 00 01 00 00 f3 05 00 00 00     ................
     9bf:	00 01 00 00 07 06 00 00 00 00 01 00 00 15 06 00     ................
     9cf:	00 00 00 01 00 00 23 06 00 00 00 00 01 00 00 31     ......#........1
     9df:	06 00 00 00 00 01 00 00 3f 06 00 00 00 00 00 00     ........?.......
     9ef:	00 4d 06 00 00 00 00 00 00 00 73 06 00 00 00 00     .M........s.....
     9ff:	00 00 00 93 06 00 00 00 00 00 00 00 bc 06 00 00     ................
     a0f:	00 00 00 00 00 c1 06 00 00 00 00 00 00 00 e4 06     ................
     a1f:	00 00 00 00 00 00 00 fe 06 00 00 00 00 00 00 00     ................
     a2f:	24 07 00 00 00 00 00 00 00 44 07 00 00 00 00 00     $........D......
     a3f:	00 00 6d 07 00 00 00 00 01 00 00 84 07 00 00 00     ..m.............
     a4f:	00 01 00 00 92 07 00 00 00 00 01 00 00 a0 07 00     ................
     a5f:	00 00 00 01 00 00 ae 07 00 00 00 00                 ............

00000a6b <Level2Song>:
     a6b:	00 c0 16 00 c1 17 00 c2 18 00 c3 00 00 b0 07 7f     ................
     a7b:	00 0b 7f 00 b1 07 7f 00 0b 7f 00 b2 07 7f 00 0b     ................
     a8b:	7f 00 92 29 7f 00 b3 07 7f 00 0b 7f 00 93 1c 7f     ...)............
     a9b:	00 ff 06 01 53 07 92 2b 7f 00 93 1b 7f 07 92 1f     ....S..+........
     aab:	7f 00 93 19 7f 08 92 1f 7f 00 93 19 7f 07 91 3a     ...............:
     abb:	7f 00 3e 7f 00 92 1a 7f 00 93 19 7f 0f 91 3a 7f     ..>...........:.
     acb:	00 3e 7f 00 92 1d 7f 00 93 1a 7f 0f 91 3a 7f 00     .>...........:..
     adb:	3e 7f 00 92 1e 7f 07 93 1a 7f 07 91 39 7f 00 3d     >...........9..=
     aeb:	7f 00 92 1f 7f 08 90 49 50 00 93 19 7f 07 90 4a     .......IP......J
     afb:	50 00 93 1b 7f 08 90 4e 50 00 91 3a 7f 00 3e 7f     P......NP..:..>.
     b0b:	00 93 1b 7f 07 1c 7f 0f 1b 7f 0e 92 1f 7f 00 93     ................
     b1b:	19 7f 08 92 1f 7f 00 93 19 7f 07 92 22 7f 00 93     ............"...
     b2b:	19 7f 08 b0 0b 7c 07 0b 78 00 92 21 7f 00 93 1a     .....|..x..!....
     b3b:	7f 07 b0 0b 74 08 0b 70 00 92 20 7f 07 b0 0b 6c     ....t..p.. ....l
     b4b:	00 93 1a 7f 08 b0 0b 68 00 92 1f 7f 07 b0 0b 64     .......h.......d
     b5b:	00 93 19 7f 07 b0 0b 7f 00 90 4f 50 00 93 1c 7f     ..........OP....
     b6b:	08 1c 7f 07 1b 7f 0f 1a 7f 00 1c 7f 07 1a 7f 08     ................
     b7b:	92 1f 7f 00 93 19 7f 07 92 1f 7f 00 93 19 7f 07     ................
     b8b:	91 3a 7f 00 3e 7f 00 92 1a 7f 00 93 19 7f 0f 91     .:..>...........
     b9b:	3a 7f 00 3e 7f 00 92 1d 7f 00 93 1a 7f 0f b0 0b     :..>............
     bab:	7c 00 91 3a 7f 00 3e 7f 00 92 1e 7f 07 b0 0b 78     |..:..>........x
     bbb:	00 93 1a 7f 08 b0 0b 74 00 91 39 7f 00 3d 7f 00     .......t..9..=..
     bcb:	92 1f 7f 07 b0 0b 70 00 93 19 7f 07 b0 0b 6c 00     ......p.......l.
     bdb:	93 1b 7f 08 b0 0b 68 00 91 3a 7f 00 3e 7f 00 93     ......h..:..>...
     beb:	1b 7f 07 b0 0b 64 00 93 1c 7f 08 b0 0b 60 07 0b     .....d.......`..
     bfb:	5c 00 93 1b 7f 07 b0 0b 58 08 0b 54 00 92 1f 7f     \.......X..T....
     c0b:	00 93 19 7f 07 b0 0b 50 00 92 1f 7f 00 93 19 7f     .......P........
     c1b:	08 b0 0b 4c 00 92 22 7f 00 93 19 7f 07 b0 0b 48     ...L.."........H
     c2b:	07 0b 44 00 92 21 7f 00 93 1a 7f 08 b0 0b 40 07     ..D..!........@.
     c3b:	0b 3c 00 92 20 7f 07 b0 0b 38 00 93 1a 7f 08 b0     .<.. ....8......
     c4b:	0b 34 00 92 1f 7f 07 b0 0b 30 00 93 19 7f 08 b0     .4.......0......
     c5b:	0b 2c 00 93 1c 7f 07 b0 0b 28 00 93 1c 7f 07 b0     .,.......(......
     c6b:	0b 24 00 92 29 7f 00 93 1b 7f 08 b0 0b 20 07 0b     .$..)........ ..
     c7b:	1c 00 92 29 7f 00 93 1c 7f 08 b0 0b 18 00 92 2b     ...)...........+
     c8b:	7f 00 93 1a 7f 07 b0 0b 7f 00 90 43 7f 00 92 1f     ...........C....
     c9b:	7f 00 93 19 7f 07 92 1f 7f 00 93 19 7f 08 91 3a     ...............:
     cab:	7f 00 3e 7f 00 92 1a 7f 00 93 19 7f 0f 91 3a 7f     ..>...........:.
     cbb:	00 3e 7f 00 92 1d 7f 00 93 1a 7f 0e 91 3a 7f 00     .>...........:..
     ccb:	3e 7f 00 92 1e 7f 08 93 1a 7f 07 91 39 7f 00 3d     >...........9..=
     cdb:	7f 00 92 1f 7f 07 93 19 7f 08 90 44 7f 00 93 1b     ...........D....
     ceb:	7f 07 91 3a 7f 00 3e 7f 00 93 1b 7f 08 90 47 7f     ...:..>.......G.
     cfb:	00 93 1c 7f 0e 90 48 7f 00 93 1b 7f 0f 90 4a 7f     ......H.......J.
     d0b:	00 92 1f 7f 00 93 19 7f 08 92 1f 7f 00 93 19 7f     ................
     d1b:	07 92 22 7f 00 93 19 7f 0f 92 21 7f 00 93 1a 7f     ..".......!.....
     d2b:	0e 92 20 7f 08 93 1a 7f 07 92 1f 7f 08 93 19 7f     .. .............
     d3b:	07 90 4b 7f 00 93 1c 7f 07 1c 7f 08 90 4d 7f 00     ..K..........M..
     d4b:	93 1b 7f 0f 90 4b 7f 00 93 1c 7f 07 1a 7f 07 90     .....K..........
     d5b:	4a 7f 00 92 1f 7f 00 93 19 7f 08 92 1f 7f 00 93     J...............
     d6b:	19 7f 07 91 3a 7f 00 3e 7f 00 92 1a 7f 00 93 19     ....:..>........
     d7b:	7f 0f 91 3a 7f 00 3e 7f 00 92 1d 7f 00 93 1a 7f     ...:..>.........
     d8b:	0f 91 3a 7f 00 3e 7f 00 92 1e 7f 07 93 1a 7f 07     ..:..>..........
     d9b:	91 39 7f 00 3d 7f 00 92 1f 7f 08 93 19 7f 07 90     .9..=...........
     dab:	4b 7f 00 93 1b 7f 08 91 3a 7f 00 3e 7f 00 93 1b     K.......:..>....
     dbb:	7f 07 90 4a 7f 00 93 1c 7f 0f 90 48 7f 00 93 1b     ...J.......H....
     dcb:	7f 0e 90 47 7f 00 92 1f 7f 00 93 19 7f 08 92 1f     ...G............
     ddb:	7f 00 93 19 7f 07 92 22 7f 00 93 19 7f 0f 92 21     .......".......!
     deb:	7f 00 93 1a 7f 0f 90 48 7f 00 92 20 7f 07 93 1a     .......H... ....
     dfb:	7f 08 90 47 7f 00 92 1f 7f 07 93 19 7f 07 1c 7f     ...G............
     e0b:	08 1c 7f 07 90 44 7f 00 92 29 7f 00 93 1b 7f 0f     .....D...)......
     e1b:	92 29 7f 00 93 1c 7f 07 92 2b 7f 00 93 1a 7f 08     .).......+......
     e2b:	90 43 7f 00 92 1f 7f 00 93 19 7f 07 92 1f 7f 00     .C..............
     e3b:	93 19 7f 07 91 3a 7f 00 3e 7f 00 92 1a 7f 00 93     .....:..>.......
     e4b:	19 7f 0f 91 3a 7f 00 3e 7f 00 92 1d 7f 00 93 1a     ....:..>........
     e5b:	7f 0f 91 3a 7f 00 3e 7f 00 92 1e 7f 07 93 1a 7f     ...:..>.........
     e6b:	08 91 39 7f 00 3d 7f 00 92 1f 7f 07 93 19 7f 08     ..9..=..........
     e7b:	90 44 7f 00 93 1b 7f 07 91 3a 7f 00 3e 7f 00 93     .D.......:..>...
     e8b:	1b 7f 07 90 47 7f 00 93 1c 7f 0f 90 48 7f 00 93     ....G.......H...
     e9b:	1b 7f 0f 90 4a 7f 00 92 1f 7f 00 93 19 7f 07 92     ....J...........
     eab:	1f 7f 00 93 19 7f 08 92 22 7f 00 93 19 7f 0e 92     ........".......
     ebb:	21 7f 00 93 1a 7f 0f 92 20 7f 08 93 1a 7f 07 92     !....... .......
     ecb:	1f 7f 07 93 19 7f 08 90 4b 7f 00 93 1c 7f 07 1c     ........K.......
     edb:	7f 07 90 4d 7f 00 93 1b 7f 0f 90 4b 7f 00 93 1c     ...M.......K....
     eeb:	7f 08 1a 7f 07 90 4d 7f 00 92 1f 7f 00 93 19 7f     ......M.........
     efb:	07 92 1f 7f 00 93 19 7f 08 91 3a 7f 00 3e 7f 00     ..........:..>..
     f0b:	92 1a 7f 00 93 19 7f 0f 90 4f 7f 00 91 3a 7f 00     .........O...:..
     f1b:	3e 7f 00 92 1d 7f 00 93 1a 7f 0e 90 4d 7f 00 91     >...........M...
     f2b:	3a 7f 00 3e 7f 00 92 1e 7f 08 93 1a 7f 07 90 4b     :..>...........K
     f3b:	7f 00 91 39 7f 00 3d 7f 00 92 1f 7f 07 93 19 7f     ...9..=.........
     f4b:	08 90 4a 7f 00 93 1b 7f 07 91 3a 7f 00 3e 7f 00     ..J.......:..>..
     f5b:	93 1b 7f 08 90 4b 7f 00 93 1c 7f 0e 90 4a 7f 00     .....K.......J..
     f6b:	93 1b 7f 0f 90 48 7f 00 92 1f 7f 00 93 19 7f 08     .....H..........
     f7b:	92 1f 7f 00 93 19 7f 07 90 47 7f 00 92 22 7f 00     .........G..."..
     f8b:	93 19 7f 0f 92 21 7f 00 93 1a 7f 0f 90 44 7f 00     .....!.......D..
     f9b:	92 20 7f 07 93 1a 7f 07 90 43 7f 00 92 1f 7f 08     . .......C......
     fab:	93 19 7f 07 1c 7f 07 1c 7f 08 92 29 7f 00 93 1b     ...........)....
     fbb:	7f 0f 92 29 7f 00 93 1c 7f 07 92 2b 7f 00 93 1a     ...).......+....
     fcb:	7f 07 90 43 7f 00 92 1f 7f 00 93 19 7f 08 90 44     ...C...........D
     fdb:	7f 00 92 1f 7f 00 93 19 7f 07 90 47 7f 00 91 3a     ...........G...:
     feb:	7f 00 3e 7f 00 92 1a 7f 00 93 19 7f 0f 90 48 7f     ..>...........H.
     ffb:	00 91 3a 7f 00 3e 7f 00 92 1d 7f 00 93 1a 7f 0f     ..:..>..........
    100b:	90 47 7f 00 91 3a 7f 00 3e 7f 00 92 1e 7f 07 93     .G...:..>.......
    101b:	1a 7f 07 90 44 7f 00 91 39 7f 00 3d 7f 00 92 1f     ....D...9..=....
    102b:	7f 08 93 19 7f 07 90 43 7f 00 93 1b 7f 08 91 3a     .......C.......:
    103b:	7f 00 3e 7f 00 93 1b 7f 07 1c 7f 0f 90 43 7f 00     ..>..........C..
    104b:	93 1b 7f 07 90 44 7f 08 47 7f 00 92 1f 7f 00 93     .....D..G.......
    105b:	19 7f 07 92 1f 7f 00 93 19 7f 07 90 48 7f 00 92     ............H...
    106b:	22 7f 00 93 19 7f 0f 90 47 7f 00 92 21 7f 00 93     ".......G...!...
    107b:	1a 7f 0f 90 44 7f 00 92 20 7f 07 93 1a 7f 08 90     ....D... .......
    108b:	43 7f 00 92 1f 7f 07 93 19 7f 07 1c 7f 08 1c 7f     C...............
    109b:	07 1b 7f 0f 1c 7f 07 1a 7f 08 90 43 7f 00 92 1f     ...........C....
    10ab:	7f 00 93 19 7f 07 90 44 7f 00 92 1f 7f 00 93 19     .......D........
    10bb:	7f 07 90 47 7f 00 91 3a 7f 00 3e 7f 00 92 1a 7f     ...G...:..>.....
    10cb:	00 93 19 7f 0f 90 48 7f 00 91 3a 7f 00 3e 7f 00     ......H...:..>..
    10db:	92 1d 7f 00 93 1a 7f 0f 90 47 7f 00 91 3a 7f 00     .........G...:..
    10eb:	3e 7f 00 92 1e 7f 07 93 1a 7f 08 90 44 7f 00 91     >...........D...
    10fb:	39 7f 00 3d 7f 00 92 1f 7f 07 93 19 7f 08 90 43     9..=...........C
    110b:	7f 00 93 1b 7f 07 91 3a 7f 00 3e 7f 00 93 1b 7f     .......:..>.....
    111b:	07 1c 7f 0f 90 43 7f 00 93 1b 7f 07 90 44 7f 08     .....C.......D..
    112b:	47 7f 00 92 1f 7f 00 93 19 7f 07 92 1f 7f 00 93     G...............
    113b:	19 7f 08 90 48 7f 00 92 22 7f 00 93 19 7f 0e 90     ....H...".......
    114b:	47 7f 00 92 21 7f 00 93 1a 7f 0f 90 44 7f 00 92     G...!.......D...
    115b:	20 7f 08 93 1a 7f 07 90 43 7f 00 92 1f 7f 07 93      .......C.......
    116b:	19 7f 08 1c 7f 07 1c 7f 08 92 29 7f 00 93 1b 7f     ..........).....
    117b:	0e 92 29 7f 00 93 1c 7f 08 92 2b 7f 00 93 1a 7f     ..).......+.....
    118b:	07 92 24 7f 00 93 19 7f 07 92 24 7f 00 93 19 7f     ..$.......$.....
    119b:	08 91 46 7f 00 43 7f 00 92 1f 7f 00 93 19 7f 07     ..F..C..........
    11ab:	91 46 7f 00 43 7f 08 90 48 60 00 92 22 7f 00 93     .F..C...H`.."...
    11bb:	1a 7f 07 91 46 7f 00 43 7f 07 90 4a 60 00 92 1f     ....F..C...J`...
    11cb:	7f 08 93 1a 7f 07 90 4b 60 00 91 46 7f 00 43 7f     .......K`..F..C.
    11db:	00 92 24 7f 08 24 7f 00 93 19 7f 07 90 48 60 00     ..$..$.......H`.
    11eb:	92 1f 7f 00 93 1b 7f 07 91 46 7f 00 43 7f 00 93     .........F..C...
    11fb:	1b 7f 08 90 4f 60 00 92 22 7f 00 93 1c 7f 0e 92     ....O`..".......
    120b:	24 7f 00 93 1b 7f 0f 90 4f 60 00 92 26 7f 00 93     $.......O`..&...
    121b:	19 7f 08 92 26 7f 00 93 19 7f 07 90 4e 60 00 91     ....&.......N`..
    122b:	48 7f 00 45 7f 00 92 21 7f 00 93 19 7f 07 91 48     H..E...!.......H
    123b:	7f 00 45 7f 08 92 24 7f 00 93 1a 7f 07 91 48 7f     ..E...$.......H.
    124b:	00 45 7f 08 90 4a 60 00 92 21 7f 07 93 1a 7f 07     .E...J`..!......
    125b:	91 48 7f 00 45 7f 00 92 26 7f 08 26 7f 00 93 19     .H..E...&..&....
    126b:	7f 07 92 21 7f 00 93 1c 7f 07 91 48 7f 00 45 7f     ...!.......H..E.
    127b:	00 93 1c 7f 08 92 24 7f 00 93 1b 7f 0f 92 26 7f     ......$.......&.
    128b:	00 93 1c 7f 07 1a 7f 07 92 27 7f 00 93 19 7f 08     .........'......
    129b:	92 27 7f 00 93 19 7f 07 91 4a 7f 00 46 7f 00 92     .'.......J..F...
    12ab:	22 7f 00 93 19 7f 08 91 4a 7f 00 46 7f 07 90 48     ".......J..F...H
    12bb:	60 00 92 24 7f 00 93 1a 7f 07 91 4a 7f 00 46 7f     `..$.......J..F.
    12cb:	08 90 4a 60 00 92 22 7f 07 93 1a 7f 07 90 4b 60     ..J`..".......K`
    12db:	00 91 4a 7f 00 46 7f 00 92 27 7f 08 27 7f 00 93     ..J..F...'..'...
    12eb:	19 7f 07 90 48 60 00 92 22 7f 00 93 1b 7f 08 91     ....H`..".......
    12fb:	4a 7f 00 46 7f 00 93 1b 7f 07 90 4f 60 00 92 24     J..F.......O`..$
    130b:	7f 00 93 1c 7f 0f 92 27 7f 00 93 1b 7f 0f 90 4f     .......'.......O
    131b:	60 00 91 45 7f 00 41 7f 00 92 29 7f 00 93 19 7f     `..E..A...).....
    132b:	07 19 7f 07 90 4d 60 00 91 45 7f 00 41 7f 00 92     .....M`..E..A...
    133b:	29 7f 00 93 19 7f 0f 91 45 7f 00 41 7f 00 92 29     ).......E..A...)
    134b:	7f 00 93 1a 7f 0f 90 51 60 00 91 45 7f 00 41 7f     .......Q`..E..A.
    135b:	00 92 29 7f 07 93 1a 7f 08 91 45 7f 00 42 7f 00     ..).......E..B..
    136b:	92 2a 7f 07 93 19 7f 07 91 45 7f 00 42 7f 00 92     .*.......E..B...
    137b:	2a 7f 0f 91 45 7f 00 42 7f 00 92 2a 7f 00 93 1a     *...E..B...*....
    138b:	7f 0f 91 45 7f 00 42 7f 00 92 2a 7f 00 93 1a 7f     ...E..B...*.....
    139b:	07 1a 7f 08 90 51 60 00 93 1c 7f 07 90 4f 60 00     .....Q`......O`.
    13ab:	93 1b 7f 08 90 4e 60 00 93 1b 7f 07 90 4b 60 00     .....N`......K`.
    13bb:	93 1c 7f 07 90 4e 60 00 92 26 7f 00 93 1b 7f 08     .....N`..&......
    13cb:	90 4b 60 00 93 1b 7f 07 90 4a 60 00 93 1c 7f 07     .K`......J`.....
    13db:	90 49 60 00 93 1b 7f 08 90 4a 60 00 93 1b 7f 07     .I`......J`.....
    13eb:	1c 7f 08 1b 7f 07 1b 7f 07 1c 7f 08 1a 7f 07 1b     ................
    13fb:	7f 00 ff 06 01 45 0f 92 1f 7f 07 1f 7f 08 91 3a     .....E.........:
    140b:	7f 00 3e 7f 00 92 1a 7f 07 ff 2f 00                 ..>......./.

00001417 <Level3Song>:
    1417:	00 c0 1e 00 c1 1f 00 c2 20 00 c3 00 00 b0 07 7f     ........ .......
    1427:	00 b2 07 7f 00 07 7f 00 92 24 6e 00 b3 07 7f 00     .........$n.....
    1437:	93 24 6e 00 b1 07 7f 00 91 4c 6e 00 ff 06 01 53     .$n......Ln....S
    1447:	0d 93 26 6e 07 26 6e 07 92 24 6e 00 93 25 6e 00     ..&n.&n..$n..%n.
    1457:	91 4f 6e 0e 93 26 6e 07 26 6e 00 91 4f 6e 07 92     .On..&n.&n..On..
    1467:	21 6e 00 93 24 6e 00 91 4c 6e 0e 92 21 6e 00 93     !n..$n..Ln..!n..
    1477:	27 6e 00 91 48 6e 0d 93 25 6e 0e 24 6e 07 26 6e     'n..Hn..%n.$n.&n
    1487:	07 92 29 6e 00 93 24 6e 00 91 51 6e 07 93 26 6e     ..)n..$n..Qn..&n
    1497:	07 27 6e 0e 92 29 6e 00 93 25 6e 00 91 54 6e 14     .'n..)n..%n..Tn.
    14a7:	93 26 6e 00 91 54 6e 07 92 2b 6e 00 93 26 6e 00     .&n..Tn..+n..&n.
    14b7:	91 56 6e 07 93 26 6e 07 92 2b 6e 00 93 27 6e 00     .Vn..&n..+n..'n.
    14c7:	91 58 6e 0e 93 25 6e 0e 26 6e 07 26 6e 07 92 24     .Xn..%n.&n.&n..$
    14d7:	6e 00 93 26 6e 00 91 4c 6e 0e 93 26 6e 06 24 6e     n..&n..Ln..&n.$n
    14e7:	07 92 24 6e 00 93 25 6e 00 91 4f 6e 0e 93 24 6e     ..$n..%n..On..$n
    14f7:	07 26 6e 00 91 4f 6e 07 92 2d 6e 00 93 24 6e 00     .&n..On..-n..$n.
    1507:	91 4c 6e 0e 92 2d 6e 00 93 26 6e 00 91 48 6e 07     .Ln..-n..&n..Hn.
    1517:	93 24 6e 07 25 6e 14 92 2d 6e 00 93 24 6e 07 92     .$n.%n..-n..$n..
    1527:	29 6e 00 93 24 6e 00 91 51 6e 07 93 25 6e 07 27     )n..$n..Qn..%n.'
    1537:	6e 0e 92 29 6e 00 93 25 6e 00 91 54 6e 0e 93 26     n..)n..%n..Tn..&
    1547:	6e 07 91 54 6e 07 92 2b 6e 00 93 25 6e 00 91 58     n..Tn..+n..%n..X
    1557:	6e 0d 92 2b 6e 00 93 27 6e 00 91 56 6e 1c 93 25     n..+n..'n..Vn..%
    1567:	6e 07 92 29 6e 00 93 25 6e 07 90 4f 6e 00 92 24     n..)n..%n..On..$
    1577:	6e 00 93 24 6e 00 91 4c 6e 0e 90 4e 6e 00 93 26     n..$n..Ln..Nn..&
    1587:	6e 07 26 6e 07 90 4f 6e 00 92 24 6e 00 93 25 6e     n.&n..On..$n..%n
    1597:	00 91 4f 6e 0d 93 26 6e 07 26 6e 00 91 4f 6e 07     ..On..&n.&n..On.
    15a7:	92 21 6e 00 93 24 6e 00 91 4c 6e 0e 92 21 6e 00     .!n..$n..Ln..!n.
    15b7:	93 27 6e 00 91 48 6e 0e 93 25 6e 0e 24 6e 07 26     .'n..Hn..%n.$n.&
    15c7:	6e 06 92 29 6e 00 93 24 6e 00 91 51 6e 07 93 26     n..)n..$n..Qn..&
    15d7:	6e 07 90 4d 6e 00 93 27 6e 0e 90 4c 6e 00 92 29     n..Mn..'n..Ln..)
    15e7:	6e 00 93 25 6e 00 91 54 6e 0e 90 4d 6e 07 93 26     n..%n..Tn..Mn..&
    15f7:	6e 00 91 54 6e 07 90 4c 6e 00 92 2b 6e 00 93 26     n..Tn..Ln..+n..&
    1607:	6e 00 91 56 6e 07 93 26 6e 07 90 48 6e 00 92 2b     n..Vn..&n..Hn..+
    1617:	6e 00 93 27 6e 00 91 58 6e 0d 90 45 6e 00 93 25     n..'n..Xn..En..%
    1627:	6e 0e 90 43 6e 00 93 26 6e 07 26 6e 07 92 24 6e     n..Cn..&n.&n..$n
    1637:	00 93 26 6e 00 91 4c 6e 0e 93 26 6e 07 24 6e 07     ..&n..Ln..&n.$n.
    1647:	92 24 6e 00 93 25 6e 00 91 4f 6e 0e 93 24 6e 06     .$n..%n..On..$n.
    1657:	26 6e 00 91 4f 6e 07 92 2d 6e 00 93 24 6e 00 91     &n..On..-n..$n..
    1667:	4c 6e 0e 92 2d 6e 00 93 26 6e 00 91 48 6e 07 93     Ln..-n..&n..Hn..
    1677:	24 6e 07 25 6e 15 92 2d 6e 00 93 24 6e 07 92 29     $n.%n..-n..$n..)
    1687:	6e 00 93 24 6e 00 91 51 6e 07 93 25 6e 06 27 6e     n..$n..Qn..%n.'n
    1697:	0e 92 29 6e 00 93 25 6e 00 91 54 6e 0e 90 48 6e     ..)n..%n..Tn..Hn
    16a7:	00 93 26 6e 07 91 54 6e 07 90 47 6e 00 92 2b 6e     ..&n..Tn..Gn..+n
    16b7:	00 93 25 6e 00 91 58 6e 0e 90 4a 6e 00 92 2b 6e     ..%n..Xn..Jn..+n
    16c7:	00 93 27 6e 00 91 56 6e 0e 90 51 6e 00 93 26 6e     ..'n..Vn..Qn..&n
    16d7:	06 26 6e 07 90 4f 6e 00 93 26 6e 07 26 6e 07 92     .&n..On..&n.&n..
    16e7:	24 6e 00 93 24 6e 00 91 4c 6e 0e 93 26 6e 07 26     $n..$n..Ln..&n.&
    16f7:	6e 07 92 24 6e 00 93 25 6e 00 91 4f 6e 0e 93 26     n..$n..%n..On..&
    1707:	6e 07 26 6e 00 91 4f 6e 07 92 21 6e 00 93 24 6e     n.&n..On..!n..$n
    1717:	00 91 4c 6e 0d 92 21 6e 00 93 27 6e 00 91 48 6e     ..Ln..!n..'n..Hn
    1727:	0e 93 25 6e 0e 24 6e 07 26 6e 07 92 29 6e 00 93     ..%n.$n.&n..)n..
    1737:	24 6e 00 91 51 6e 07 93 26 6e 07 90 51 6e 00 93     $n..Qn..&n..Qn..
    1747:	27 6e 0d 90 53 6e 00 92 29 6e 00 93 25 6e 00 91     'n..Sn..)n..%n..
    1757:	54 6e 0e 90 51 6e 07 93 26 6e 00 91 54 6e 07 90     Tn..Qn..&n..Tn..
    1767:	4f 6e 00 92 2b 6e 00 93 26 6e 00 91 56 6e 07 93     On..+n..&n..Vn..
    1777:	26 6e 07 90 4d 6e 00 92 2b 6e 00 93 24 6e 00 27     &n..Mn..+n..$n.'
    1787:	6e 00 91 58 6e 0e 90 4c 6e 00 93 25 6e 0e 90 4a     n..Xn..Ln..%n..J
    1797:	6e 00 93 26 6e 07 26 6e 06 90 4c 6e 00 92 24 6e     n..&n.&n..Ln..$n
    17a7:	00 93 26 6e 00 91 4c 6e 0e 93 26 6e 07 24 6e 07     ..&n..Ln..&n.$n.
    17b7:	90 48 6e 00 92 24 6e 00 93 25 6e 00 91 4f 6e 0e     .Hn..$n..%n..On.
    17c7:	90 43 6e 00 93 24 6e 07 26 6e 00 91 4f 6e 07 92     .Cn..$n.&n..On..
    17d7:	2d 6e 00 93 24 6e 00 91 4c 6e 0e 92 2d 6e 00 93     -n..$n..Ln..-n..
    17e7:	26 6e 00 91 48 6e 06 93 24 6e 07 25 6e 15 92 2d     &n..Hn..$n.%n..-
    17f7:	6e 00 93 24 6e 07 92 29 6e 00 93 24 6e 00 91 51     n..$n..)n..$n..Q
    1807:	6e 07 93 25 6e 07 27 6e 0e 92 29 6e 00 93 25 6e     n..%n.'n..)n..%n
    1817:	00 91 54 6e 0d 90 48 6e 00 93 26 6e 07 91 54 6e     ..Tn..Hn..&n..Tn
    1827:	07 90 47 6e 00 92 2b 6e 00 93 25 6e 00 91 58 6e     ..Gn..+n..%n..Xn
    1837:	0e 90 48 6e 00 92 2b 6e 00 93 27 6e 00 91 56 6e     ..Hn..+n..'n..Vn
    1847:	0e 90 4a 6e 00 93 25 6e 0e 90 4c 6e 00 93 26 6e     ..Jn..%n..Ln..&n
    1857:	07 26 6e 07 92 28 6e 00 93 24 6e 00 91 4f 6e 0d     .&n..(n..$n..On.
    1867:	93 26 6e 07 26 6e 07 90 4f 6e 00 92 28 6e 00 93     .&n.&n..On..(n..
    1877:	25 6e 00 91 4f 6e 0e 93 26 6e 07 92 28 6e 00 93     %n..On..&n..(n..
    1887:	26 6e 00 91 4f 6e 07 90 48 6e 00 92 27 6e 00 93     &n..On..Hn..'n..
    1897:	24 6e 00 91 4e 6e 0e 92 27 6e 00 93 27 6e 00 91     $n..Nn..'n..'n..
    18a7:	4e 6e 0e 90 4c 6e 00 93 25 6e 0d 92 27 6e 00 93     Nn..Ln..%n..'n..
    18b7:	24 6e 07 25 6e 07 90 4d 6e 00 92 26 6e 00 93 26     $n.%n..Mn..&n..&
    18c7:	6e 00 91 4d 6e 0e 90 4c 6e 00 93 27 6e 0e 90 4d     n..Mn..Ln..'n..M
    18d7:	6e 00 92 26 6e 00 93 25 6e 00 91 4d 6e 0e 90 4a     n..&n..%n..Mn..J
    18e7:	6e 07 92 26 6e 00 93 26 6e 00 91 4d 6e 06 92 2b     n..&n..&n..Mn..+
    18f7:	6e 00 93 26 6e 00 91 4c 6e 07 93 26 6e 07 90 48     n..&n..Ln..&n..H
    1907:	6e 00 92 2b 6e 00 93 27 6e 00 91 4c 6e 0e 90 47     n..+n..'n..Ln..G
    1917:	6e 00 93 25 6e 0e 90 48 6e 00 92 2b 6e 00 93 26     n..%n..Hn..+n..&
    1927:	6e 07 26 6e 07 92 28 6e 00 93 24 6e 00 91 4c 6e     n.&n..(n..$n..Ln
    1937:	0e 93 26 6e 07 26 6e 06 92 28 6e 00 93 25 6e 00     ..&n.&n..(n..%n.
    1947:	91 4c 6e 0e 93 26 6e 07 92 28 6e 00 93 26 6e 00     .Ln..&n..(n..&n.
    1957:	91 4c 6e 07 92 27 6e 00 93 24 6e 00 91 54 6e 0e     .Ln..'n..$n..Tn.
    1967:	92 27 6e 00 93 27 6e 00 91 4c 6e 0e 93 25 6e 07     .'n..'n..Ln..%n.
    1977:	24 6e 07 92 27 6e 06 93 26 6e 07 92 26 6e 00 93     $n..'n..&n..&n..
    1987:	25 6e 00 91 58 6e 0e 93 27 6e 0e 92 26 6e 00 93     %n..Xn..'n..&n..
    1997:	25 6e 00 91 58 6e 0e 93 26 6e 07 92 26 6e 00 91     %n..Xn..&n..&n..
    19a7:	58 6e 07 92 25 6e 00 93 25 6e 00 26 6e 00 91 5b     Xn..%n..%n.&n..[
    19b7:	6e 0d 92 25 6e 00 93 27 6e 00 91 59 6e 0e 93 26     n..%n..'n..Yn..&
    19c7:	6e 07 25 6e 07 25 6e 07 26 6e 07 90 4f 6e 00 92     n.%n.%n.&n..On..
    19d7:	24 6e 00 93 24 6e 00 91 4c 6e 0e 90 4e 6e 00 93     $n..$n..Ln..Nn..
    19e7:	26 6e 07 26 6e 07 90 4f 6e 00 92 24 6e 00 93 25     &n.&n..On..$n..%
    19f7:	6e 00 91 4f 6e 0d 93 26 6e 07 26 6e 00 91 4f 6e     n..On..&n.&n..On
    1a07:	07 92 21 6e 00 93 24 6e 00 91 4c 6e 0e 92 21 6e     ..!n..$n..Ln..!n
    1a17:	00 93 27 6e 00 91 48 6e 0e 93 25 6e 0e 24 6e 07     ..'n..Hn..%n.$n.
    1a27:	26 6e 07 92 29 6e 00 93 24 6e 00 91 51 6e 06 93     &n..)n..$n..Qn..
    1a37:	26 6e 07 90 4d 6e 00 93 27 6e 0e 90 4c 6e 00 92     &n..Mn..'n..Ln..
    1a47:	29 6e 00 93 25 6e 00 91 54 6e 0e 90 4d 6e 07 93     )n..%n..Tn..Mn..
    1a57:	26 6e 00 91 54 6e 07 90 4c 6e 00 92 2b 6e 00 93     &n..Tn..Ln..+n..
    1a67:	26 6e 00 91 56 6e 07 93 26 6e 07 90 48 6e 00 92     &n..Vn..&n..Hn..
    1a77:	2b 6e 00 93 27 6e 00 91 58 6e 0e 90 45 6e 00 93     +n..'n..Xn..En..
    1a87:	25 6e 0d 90 43 6e 00 93 26 6e 07 26 6e 07 92 24     %n..Cn..&n.&n..$
    1a97:	6e 00 93 26 6e 00 91 4c 6e 0e 93 26 6e 07 24 6e     n..&n..Ln..&n.$n
    1aa7:	07 92 24 6e 00 93 25 6e 00 91 4f 6e 0e 93 24 6e     ..$n..%n..On..$n
    1ab7:	07 26 6e 00 91 4f 6e 06 92 2d 6e 00 93 24 6e 00     .&n..On..-n..$n.
    1ac7:	91 4c 6e 0e 92 2d 6e 00 93 26 6e 00 91 48 6e 07     .Ln..-n..&n..Hn.
    1ad7:	93 24 6e 07 25 6e 15 92 2d 6e 00 93 24 6e 07 92     .$n.%n..-n..$n..
    1ae7:	29 6e 00 93 24 6e 00 91 51 6e 07 93 25 6e 07 27     )n..$n..Qn..%n.'
    1af7:	6e 0d 92 29 6e 00 93 25 6e 00 91 54 6e 0e 90 48     n..)n..%n..Tn..H
    1b07:	6e 00 93 26 6e 07 91 54 6e 07 90 47 6e 00 92 2b     n..&n..Tn..Gn..+
    1b17:	6e 00 93 25 6e 00 91 58 6e 0e 90 4a 6e 00 92 2b     n..%n..Xn..Jn..+
    1b27:	6e 00 93 27 6e 00 91 56 6e 0e 90 51 6e 00 93 26     n..'n..Vn..Qn..&
    1b37:	6e 07 26 6e 07 90 4f 6e 00 93 26 6e 06 26 6e 07     n.&n..On..&n.&n.
    1b47:	92 24 6e 00 93 24 6e 00 91 4c 6e 0e 93 26 6e 07     .$n..$n..Ln..&n.
    1b57:	26 6e 07 92 24 6e 00 93 25 6e 00 91 4f 6e 0e 93     &n..$n..%n..On..
    1b67:	26 6e 07 26 6e 00 91 4f 6e 07 92 21 6e 00 93 24     &n.&n..On..!n..$
    1b77:	6e 00 91 4c 6e 0d 92 21 6e 00 93 27 6e 00 91 48     n..Ln..!n..'n..H
    1b87:	6e 0e 93 25 6e 0e 24 6e 07 26 6e 07 92 29 6e 00     n..%n.$n.&n..)n.
    1b97:	93 24 6e 00 91 51 6e 07 93 26 6e 07 90 51 6e 00     .$n..Qn..&n..Qn.
    1ba7:	93 27 6e 0e 90 53 6e 00 92 29 6e 00 93 25 6e 00     .'n..Sn..)n..%n.
    1bb7:	91 54 6e 0d 90 51 6e 07 93 26 6e 00 91 54 6e 07     .Tn..Qn..&n..Tn.
    1bc7:	90 4f 6e 00 92 2b 6e 00 93 26 6e 00 91 56 6e 07     .On..+n..&n..Vn.
    1bd7:	93 26 6e 07 90 4d 6e 00 92 2b 6e 00 93 27 6e 00     .&n..Mn..+n..'n.
    1be7:	91 58 6e 0e 90 4c 6e 00 93 25 6e 0e 90 4a 6e 00     .Xn..Ln..%n..Jn.
    1bf7:	93 26 6e 07 26 6e 07 90 4c 6e 00 92 24 6e 00 93     .&n.&n..Ln..$n..
    1c07:	26 6e 00 91 4c 6e 0d 93 26 6e 07 24 6e 07 90 48     &n..Ln..&n.$n..H
    1c17:	6e 00 92 24 6e 00 93 25 6e 00 91 4f 6e 0e 90 43     n..$n..%n..On..C
    1c27:	6e 00 93 24 6e 07 26 6e 00 91 4f 6e 07 92 2d 6e     n..$n.&n..On..-n
    1c37:	00 93 24 6e 00 91 4c 6e 0e 92 2d 6e 00 93 26 6e     ..$n..Ln..-n..&n
    1c47:	00 91 48 6e 07 93 24 6e 06 25 6e 15 92 2d 6e 00     ..Hn..$n.%n..-n.
    1c57:	93 24 6e 07 92 29 6e 00 93 24 6e 00 91 51 6e 07     .$n..)n..$n..Qn.
    1c67:	93 25 6e 07 27 6e 0e 92 29 6e 00 93 25 6e 00 91     .%n.'n..)n..%n..
    1c77:	54 6e 0e 90 48 6e 00 93 26 6e 07 91 54 6e 06 90     Tn..Hn..&n..Tn..
    1c87:	47 6e 00 92 2b 6e 00 93 25 6e 00 91 58 6e 0e 90     Gn..+n..%n..Xn..
    1c97:	48 6e 00 92 2b 6e 00 93 27 6e 00 91 56 6e 0e 90     Hn..+n..'n..Vn..
    1ca7:	4a 6e 00 93 25 6e 0e 90 4c 6e 00 93 26 6e 07 26     Jn..%n..Ln..&n.&
    1cb7:	6e 07 92 28 6e 00 93 24 6e 00 91 4f 6e 0e 93 26     n..(n..$n..On..&
    1cc7:	6e 06 26 6e 07 90 4f 6e 00 92 28 6e 00 93 25 6e     n.&n..On..(n..%n
    1cd7:	00 91 4f 6e 0e 93 26 6e 07 92 28 6e 00 93 26 6e     ..On..&n..(n..&n
    1ce7:	00 91 4f 6e 07 90 48 6e 00 92 27 6e 00 93 24 6e     ..On..Hn..'n..$n
    1cf7:	00 91 4e 6e 0e 92 27 6e 00 93 27 6e 00 91 4e 6e     ..Nn..'n..'n..Nn
    1d07:	0e 90 4c 6e 00 93 25 6e 0d 92 27 6e 00 93 24 6e     ..Ln..%n..'n..$n
    1d17:	07 25 6e 07 90 4d 6e 00 92 26 6e 00 93 26 6e 00     .%n..Mn..&n..&n.
    1d27:	91 4d 6e 0e 90 4c 6e 00 93 27 6e 0e 90 4d 6e 00     .Mn..Ln..'n..Mn.
    1d37:	92 26 6e 00 93 25 6e 00 91 4d 6e 0e 90 4a 6e 07     .&n..%n..Mn..Jn.
    1d47:	92 26 6e 00 93 26 6e 00 91 4d 6e 07 92 2b 6e 00     .&n..&n..Mn..+n.
    1d57:	93 26 6e 00 91 4c 6e 07 93 26 6e 06 90 48 6e 00     .&n..Ln..&n..Hn.
    1d67:	92 2b 6e 00 93 27 6e 00 91 4c 6e 0e 90 47 6e 00     .+n..'n..Ln..Gn.
    1d77:	93 25 6e 0e 90 48 6e 00 92 2b 6e 00 93 26 6e 07     .%n..Hn..+n..&n.
    1d87:	26 6e 07 92 28 6e 00 93 24 6e 00 91 4c 6e 0e 93     &n..(n..$n..Ln..
    1d97:	26 6e 07 26 6e 07 92 28 6e 00 93 25 6e 00 91 4c     &n.&n..(n..%n..L
    1da7:	6e 0d 93 26 6e 07 92 28 6e 00 93 26 6e 00 91 4c     n..&n..(n..&n..L
    1db7:	6e 07 92 27 6e 00 93 24 6e 00 91 54 6e 0e 92 27     n..'n..$n..Tn..'
    1dc7:	6e 00 93 27 6e 00 91 4c 6e 0e 93 25 6e 07 24 6e     n..'n..Ln..%n.$n
    1dd7:	07 92 27 6e 07 93 26 6e 06 92 26 6e 00 93 25 6e     ..'n..&n..&n..%n
    1de7:	00 91 58 6e 0e 93 27 6e 0e 92 26 6e 00 93 25 6e     ..Xn..'n..&n..%n
    1df7:	00 91 58 6e 0e 93 26 6e 07 92 26 6e 00 91 58 6e     ..Xn..&n..&n..Xn
    1e07:	07 92 25 6e 00 93 25 6e 00 91 5b 6e 0e 92 25 6e     ..%n..%n..[n..%n
    1e17:	00 93 27 6e 00 91 59 6e 0d 93 26 6e 07 25 6e 07     ..'n..Yn..&n.%n.
    1e27:	25 6e 07 26 6e 07 c0 21 00 90 48 6e 00 92 24 6e     %n.&n..!..Hn..$n
    1e37:	00 93 24 6e 00 91 48 6e 0e 90 48 6e 00 92 24 6e     ..$n..Hn..Hn..$n
    1e47:	00 93 26 6e 00 91 48 6e 07 93 26 6e 07 25 6e 0e     ..&n..Hn..&n.%n.
    1e57:	26 6e 06 26 6e 07 24 6e 0e 90 48 6e 00 92 24 6e     &n.&n.$n..Hn..$n
    1e67:	00 93 27 6e 00 91 48 6e 0e 93 25 6e 0e 90 48 6e     ..'n..Hn..%n..Hn
    1e77:	00 92 24 6e 00 93 24 6e 00 91 48 6e 07 93 26 6e     ..$n..$n..Hn..&n
    1e87:	07 24 6e 07 26 6e 06 90 48 6e 00 92 22 6e 00 93     .$n.&n..Hn.."n..
    1e97:	27 6e 00 91 48 6e 0e 93 25 6e 0e 90 48 6e 00 92     'n..Hn..%n..Hn..
    1ea7:	22 6e 00 91 48 6e 07 93 26 6e 07 26 6e 07 26 6e     "n..Hn..&n.&n.&n
    1eb7:	07 27 6e 0e 25 6e 0d 26 6e 07 26 6e 07 90 48 6e     .'n.%n.&n.&n..Hn
    1ec7:	00 92 20 6e 00 93 26 6e 00 91 48 6e 0e 90 48 6e     .. n..&n..Hn..Hn
    1ed7:	00 92 20 6e 00 93 26 6e 00 91 48 6e 07 93 24 6e     .. n..&n..Hn..$n
    1ee7:	07 25 6e 0e 24 6e 07 26 6e 07 24 6e 0d 90 48 6e     .%n.$n.&n.$n..Hn
    1ef7:	00 92 20 6e 00 93 26 6e 00 91 48 6e 07 93 24 6e     .. n..&n..Hn..$n
    1f07:	07 25 6e 0e 90 48 6e 00 92 1f 6e 00 91 48 6e 07     .%n..Hn...n..Hn.
    1f17:	93 24 6e 07 24 6e 07 25 6e 07 90 48 6e 00 92 1f     .$n.$n.%n..Hn...
    1f27:	6e 00 93 27 6e 00 91 48 6e 0d 93 25 6e 0e 90 48     n..'n..Hn..%n..H
    1f37:	6e 00 92 1f 6e 00 93 26 6e 00 91 48 6e 0e 93 25     n...n..&n..Hn..%
    1f47:	6e 0e 92 37 6e 00 93 27 6e 07 92 3c 6e 07 43 6e     n..7n..'n..<n.Cn
    1f57:	0e 93 25 6e 07 25 6e 06 90 48 6e 00 92 24 6e 00     ..%n.%n..Hn..$n.
    1f67:	93 24 6e 00 91 48 6e 0e 90 48 6e 00 92 24 6e 00     .$n..Hn..Hn..$n.
    1f77:	93 26 6e 00 91 48 6e 07 93 26 6e 07 92 48 6e 00     .&n..Hn..&n..Hn.
    1f87:	93 25 6e 0e 26 6e 07 26 6e 07 92 48 6e 00 93 24     .%n.&n.&n..Hn..$
    1f97:	6e 0e 90 48 6e 00 92 24 6e 00 93 27 6e 00 91 48     n..Hn..$n..'n..H
    1fa7:	6e 0d 93 25 6e 07 92 48 6e 07 90 48 6e 00 92 24     n..%n..Hn..Hn..$
    1fb7:	6e 00 93 24 6e 00 91 48 6e 07 93 26 6e 07 24 6e     n..$n..Hn..&n.$n
    1fc7:	07 26 6e 07 90 48 6e 00 92 22 6e 00 93 27 6e 00     .&n..Hn.."n..'n.
    1fd7:	91 48 6e 0e 92 46 6e 00 93 25 6e 0e 90 48 6e 00     .Hn..Fn..%n..Hn.
    1fe7:	92 22 6e 00 91 48 6e 06 93 26 6e 07 26 6e 07 26     ."n..Hn..&n.&n.&
    1ff7:	6e 07 27 6e 0e 25 6e 0e 92 46 6e 00 93 26 6e 07     n.'n.%n..Fn..&n.
    2007:	92 45 6e 00 93 26 6e 07 90 48 6e 00 92 20 6e 00     .En..&n..Hn.. n.
    2017:	93 26 6e 00 91 48 6e 0d 90 48 6e 00 92 20 6e 00     .&n..Hn..Hn.. n.
    2027:	93 26 6e 00 91 48 6e 07 93 24 6e 07 92 44 6e 00     .&n..Hn..$n..Dn.
    2037:	93 25 6e 0e 24 6e 07 26 6e 07 92 44 6e 00 93 24     .%n.$n.&n..Dn..$
    2047:	6e 0e 90 48 6e 00 92 20 6e 00 93 26 6e 00 91 48     n..Hn.. n..&n..H
    2057:	6e 07 93 24 6e 07 25 6e 06 92 44 6e 07 90 48 6e     n..$n.%n..Dn..Hn
    2067:	00 92 1f 6e 00 91 48 6e 07 93 24 6e 07 24 6e 07     ...n..Hn..$n.$n.
    2077:	25 6e 07 90 48 6e 00 92 1f 6e 00 93 27 6e 00 91     %n..Hn...n..'n..
    2087:	48 6e 0e 93 25 6e 0e 90 48 6e 00 92 1f 6e 00 93     Hn..%n..Hn...n..
    2097:	26 6e 00 91 48 6e 0e 93 25 6e 0d 92 43 6e 00 93     &n..Hn..%n..Cn..
    20a7:	27 6e 07 92 44 6e 07 44 6e 07 45 6e 07 45 6e 00     'n..Dn.Dn.En.En.
    20b7:	93 25 6e 07 92 46 6e 00 93 25 6e 07 90 48 6e 00     .%n..Fn..%n..Hn.
    20c7:	92 24 6e 00 93 24 6e 00 91 48 6e 0e 90 48 6e 00     .$n..$n..Hn..Hn.
    20d7:	92 24 6e 00 93 26 6e 00 91 48 6e 07 93 26 6e 06     .$n..&n..Hn..&n.
    20e7:	92 48 6e 00 93 25 6e 0e 26 6e 07 26 6e 07 92 48     .Hn..%n.&n.&n..H
    20f7:	6e 00 93 24 6e 0e 90 48 6e 00 92 24 6e 00 93 27     n..$n..Hn..$n..'
    2107:	6e 00 91 48 6e 0e 93 25 6e 07 92 48 6e 07 90 48     n..Hn..%n..Hn..H
    2117:	6e 00 92 24 6e 00 93 24 6e 00 91 48 6e 06 93 26     n..$n..$n..Hn..&
    2127:	6e 07 24 6e 07 26 6e 07 90 48 6e 00 92 22 6e 00     n.$n.&n..Hn.."n.
    2137:	93 27 6e 00 91 48 6e 0e 92 46 6e 00 93 25 6e 0e     .'n..Hn..Fn..%n.
    2147:	90 48 6e 00 92 22 6e 00 91 48 6e 07 93 26 6e 07     .Hn.."n..Hn..&n.
    2157:	26 6e 07 26 6e 07 24 6e 00 27 6e 0d 25 6e 0e 92     &n.&n.$n.'n.%n..
    2167:	46 6e 00 93 26 6e 07 92 45 6e 00 93 26 6e 07 90     Fn..&n..En..&n..
    2177:	48 6e 00 92 20 6e 00 93 26 6e 00 91 48 6e 0e 90     Hn.. n..&n..Hn..
    2187:	48 6e 00 92 20 6e 00 93 26 6e 00 91 48 6e 07 93     Hn.. n..&n..Hn..
    2197:	24 6e 07 92 44 6e 00 93 25 6e 0d 24 6e 07 26 6e     $n..Dn..%n.$n.&n
    21a7:	07 92 44 6e 00 93 24 6e 0e 90 48 6e 00 92 20 6e     ..Dn..$n..Hn.. n
    21b7:	00 93 26 6e 00 91 48 6e 07 93 24 6e 07 25 6e 07     ..&n..Hn..$n.%n.
    21c7:	92 44 6e 07 90 48 6e 00 92 1f 6e 00 91 48 6e 07     .Dn..Hn...n..Hn.
    21d7:	93 24 6e 07 24 6e 07 25 6e 06 90 48 6e 00 92 1f     .$n.$n.%n..Hn...
    21e7:	6e 00 93 27 6e 00 91 48 6e 0e 93 25 6e 0e 90 48     n..'n..Hn..%n..H
    21f7:	6e 00 92 1f 6e 00 93 26 6e 00 91 48 6e 0e 93 25     n...n..&n..Hn..%
    2207:	6e 0e 90 47 6e 00 92 43 6e 00 93 27 6e 00 91 47     n..Gn..Cn..'n..G
    2217:	6e 07 92 44 6e 07 44 6e 06 45 6e 07 45 6e 00 93     n..Dn.Dn.En.En..
    2227:	25 6e 07 92 46 6e 00 93 25 6e 07 26 6e 00 91 4c     %n..Fn..%n.&n..L
    2237:	6e 00 ff 06 01 45 17 ff 2f 00                       n....E../.

00002241 <Level4Song>:
    2241:	00 c0 2e 00 c1 2f 00 c2 30 00 c3 08 00 b0 07 7f     ...../..0.......
    2251:	00 b1 07 7f 00 b2 07 7f 00 b3 07 7f 00 07 7f 00     ................
    2261:	07 7f 00 07 7f 00 07 7f 00 07 7f 00 ff 06 01 53     ...............S
    2271:	01 b0 64 00 00 64 00 00 64 00 00 b1 64 00 00 64     ..d..d..d...d..d
    2281:	00 00 b2 64 00 00 64 00 00 b3 64 00 00 64 00 00     ...d..d...d..d..
    2291:	64 00 00 64 00 00 64 00 00 64 00 04 b0 64 7f 00     d..d..d..d...d..
    22a1:	64 7f 00 64 7f 00 b1 64 7f 00 64 7f 00 b2 64 7f     d..d...d..d...d.
    22b1:	00 64 7f 00 b3 64 7f 00 64 7f 00 64 7f 00 64 7f     .d...d..d..d..d.
    22c1:	00 64 7f 00 64 7f 17 91 4e 46 1c 93 35 3f 0e 92     .d..d...NF..5?..
    22d1:	2a 50 1c 2b 56 0f 93 35 3f 0e 92 2a 54 1c 2b 5b     *P.+V..5?..*T.+[
    22e1:	0e 93 35 3f 0e 92 2a 57 1d 2b 60 0e 28 5e 00 93     ..5?..*W.+`.(^..
    22f1:	35 3f 1c 91 4e 46 1c 93 35 3f 0e 92 2a 50 1d 2b     5?..NF..5?..*P.+
    2301:	56 0e 93 35 3f 0e 92 2a 54 1c 2b 5b 0e 93 35 3f     V..5?..*T.+[..5?
    2311:	0e 92 2a 57 1d 2b 60 0e 2f 5e 00 93 35 3f 0e 92     ..*W.+`./^..5?..
    2321:	2b 5e 0e 91 4e 46 1c 93 35 3f 0f 90 36 50 00 92     +^..NF..5?..6P..
    2331:	2a 50 1c 90 37 56 00 92 2b 56 0e 93 35 3f 0e 90     *P..7V..+V..5?..
    2341:	36 54 00 92 2a 54 1c 90 37 5b 00 92 2b 5b 0e 93     6T..*T..7[..+[..
    2351:	35 3f 0f 90 36 57 00 92 2a 57 1c 90 37 60 00 92     5?..6W..*W..7`..
    2361:	2b 60 0e 90 34 5e 00 92 28 5e 00 93 35 3f 15 35     +`..4^..(^..5?.5
    2371:	3b 03 35 3f 02 35 43 02 91 4e 46 00 93 35 49 1d     ;.5?.5C..NF..5I.
    2381:	35 3f 0e 90 36 50 00 92 2a 50 0e 93 35 46 0e 90     5?..6P..*P..5F..
    2391:	37 56 00 92 2b 56 0e 93 35 4d 0e 90 36 54 00 92     7V..+V..5M..6T..
    23a1:	2a 54 0e 93 35 54 0f 90 37 5b 00 92 2b 5b 0e 90     *T..5T..7[..+[..
    23b1:	34 5b 00 92 28 5b 00 93 33 50 07 39 50 07 90 36     4[..([..3P.9P..6
    23c1:	57 00 92 2a 57 00 93 39 50 07 38 50 07 90 37 57     W..*W..9P.8P..7W
    23d1:	00 92 2b 57 00 93 36 46 07 34 46 07 90 34 60 00     ..+W..6F.4F..4`.
    23e1:	92 28 60 00 93 34 50 07 33 50 00 38 50 07 90 3b     .(`..4P.3P.8P..;
    23f1:	5e 00 92 2f 5e 00 93 34 50 07 34 50 07 90 37 5e     ^../^..4P.4P..7^
    2401:	00 92 2b 5e 00 93 37 50 07 36 50 08 91 1e 50 00     ..+^..7P.6P...P.
    2411:	93 33 58 15 33 50 07 34 50 0e 90 36 50 00 92 2a     .3X.3P.4P..6P..*
    2421:	50 07 93 33 50 07 33 54 0e 90 37 56 00 92 2b 56     P..3P.3T..7V..+V
    2431:	07 93 33 50 07 34 50 0e 90 36 54 00 92 2a 54 00     ..3P.4P..6T..*T.
    2441:	93 33 50 0f 33 58 0e 90 37 5b 00 92 2b 5b 07 93     .3P.3X..7[..+[..
    2451:	33 50 07 34 50 0e 90 36 57 00 92 2a 57 07 93 33     3P.4P..6W..*W..3
    2461:	50 07 33 54 0e 90 37 60 00 92 2b 60 07 93 33 50     P.3T..7`..+`..3P
    2471:	07 90 34 5e 00 92 28 5e 00 93 34 46 07 34 50 08     ..4^..(^..4F.4P.
    2481:	33 50 0e 91 1e 50 00 93 33 58 15 33 50 07 34 50     3P...P..3X.3P.4P
    2491:	0e 90 36 50 00 92 2a 50 07 93 33 50 07 33 54 0e     ..6P..*P..3P.3T.
    24a1:	90 37 56 00 92 2b 56 07 93 33 50 07 34 50 0f 90     .7V..+V..3P.4P..
    24b1:	36 54 00 92 2a 54 00 93 33 50 0e 33 58 0e 90 37     6T..*T..3P.3X..7
    24c1:	5b 00 92 2b 5b 07 93 33 50 07 34 50 0e 90 36 57     [..+[..3P.4P..6W
    24d1:	00 92 2a 57 07 93 33 50 07 33 54 0e 90 37 60 00     ..*W..3P.3T..7`.
    24e1:	92 2b 60 07 93 33 50 08 90 3b 5e 00 92 2f 5e 00     .+`..3P..;^../^.
    24f1:	93 34 46 07 34 50 07 90 37 5e 00 92 2b 5e 00 93     .4F.4P..7^..+^..
    2501:	33 50 07 34 50 07 91 1e 50 00 93 33 58 15 33 50     3P.4P...P..3X.3P
    2511:	07 34 50 0e 90 36 50 00 92 2a 50 07 93 33 50 07     .4P..6P..*P..3P.
    2521:	33 54 0f 90 37 56 00 92 2b 56 07 93 33 50 07 34     3T..7V..+V..3P.4
    2531:	50 0e 90 36 54 00 92 2a 54 00 93 33 50 0e 33 58     P..6T..*T..3P.3X
    2541:	0e 90 37 5b 00 92 2b 5b 07 93 33 50 07 34 50 0e     ..7[..+[..3P.4P.
    2551:	90 36 57 00 92 2a 57 07 93 33 50 07 33 54 0f 90     .6W..*W..3P.3T..
    2561:	37 60 00 92 2b 60 07 93 33 50 07 90 34 5e 00 92     7`..+`..3P..4^..
    2571:	28 5e 00 93 34 46 07 34 50 07 33 50 0e 91 1e 50     (^..4F.4P.3P...P
    2581:	00 93 33 58 15 33 50 07 34 50 0e 90 36 50 00 92     ..3X.3P.4P..6P..
    2591:	2a 50 07 93 33 50 08 33 54 0e 90 37 56 00 92 2b     *P..3P.3T..7V..+
    25a1:	56 07 93 33 50 07 34 50 0e 90 36 54 00 92 2a 54     V..3P.4P..6T..*T
    25b1:	00 93 33 50 0e 33 58 0e 90 37 5b 00 92 2b 5b 07     ..3P.3X..7[..+[.
    25c1:	93 33 50 07 90 34 5b 00 92 28 5b 00 93 34 50 07     .3P..4[..([..4P.
    25d1:	39 50 08 90 36 57 00 92 2a 57 00 93 39 50 07 38     9P..6W..*W..9P.8
    25e1:	50 07 90 37 57 00 92 2b 57 00 93 3c 50 07 34 46     P..7W..+W..<P.4F
    25f1:	07 90 34 60 00 92 28 60 00 93 34 50 07 38 50 07     ..4`..(`..4P.8P.
    2601:	90 3b 5e 00 92 2f 5e 00 93 34 50 07 34 50 07 90     .;^../^..4P.4P..
    2611:	37 5e 00 92 2b 5e 00 93 37 50 07 36 50 07 91 1e     7^..+^..7P.6P...
    2621:	50 00 93 3a 5a 15 33 50 07 3b 46 0f 90 3d 50 00     P..:Z.3P.;F..=P.
    2631:	92 2a 50 07 93 33 50 07 33 54 0e 90 3b 56 00 92     .*P..3P.3T..;V..
    2641:	2b 56 07 93 33 50 07 34 50 0e 90 3d 54 00 92 2a     +V..3P.4P..=T..*
    2651:	54 00 93 33 50 0e 33 58 0e 90 3e 5b 00 92 2b 5b     T..3P.3X..>[..+[
    2661:	07 93 33 50 08 34 50 0e 90 3d 57 00 92 2a 57 07     ..3P.4P..=W..*W.
    2671:	93 33 50 07 33 54 0e 90 3e 60 00 92 2b 60 07 93     .3P.3T..>`..+`..
    2681:	33 50 07 90 3b 5e 00 92 28 5e 00 93 34 46 07 34     3P..;^..(^..4F.4
    2691:	50 07 33 50 07 34 46 07 91 1e 50 00 93 33 58 16     P.3P.4F...P..3X.
    26a1:	33 50 07 34 50 0e 90 3d 50 00 92 2a 50 07 93 33     3P.4P..=P..*P..3
    26b1:	50 07 33 54 0e 90 3e 56 00 92 2b 56 07 93 33 50     P.3T..>V..+V..3P
    26c1:	07 34 50 0e 90 3d 54 00 92 2a 54 00 93 33 50 0e     .4P..=T..*T..3P.
    26d1:	33 58 0f 90 3b 5b 00 92 2b 5b 07 93 33 50 07 34     3X..;[..+[..3P.4
    26e1:	50 0e 90 3d 57 00 92 2a 57 07 93 33 50 07 3b 50     P..=W..*W..3P.;P
    26f1:	07 3b 46 07 90 3e 60 00 92 2b 60 00 93 39 46 07     .;F..>`..+`..9F.
    2701:	37 46 07 90 40 5e 00 92 2f 5e 00 93 3b 46 07 34     7F..@^../^..;F.4
    2711:	50 07 90 3e 5e 00 92 2b 5e 00 93 33 50 07 34 50     P..>^..+^..3P.4P
    2721:	08 91 1e 50 00 93 3c 5a 15 33 50 07 34 50 0e 90     ...P..<Z.3P.4P..
    2731:	3d 50 00 92 2a 50 07 93 33 50 15 90 3e 56 00 92     =P..*P..3P..>V..
    2741:	2b 56 07 93 33 50 07 34 50 0e 90 3d 54 00 92 2a     +V..3P.4P..=T..*
    2751:	54 00 93 33 50 1d 90 3b 5b 00 92 2b 5b 07 93 33     T..3P..;[..+[..3
    2761:	50 07 34 50 0e 90 3d 57 00 92 2a 57 07 93 33 50     P.4P..=W..*W..3P
    2771:	07 34 50 0e 90 3e 60 00 92 2b 60 07 93 33 50 07     .4P..>`..+`..3P.
    2781:	90 3b 5e 00 92 28 5e 00 93 34 46 08 34 50 07 33     .;^..(^..4F.4P.3
    2791:	50 07 34 46 07 91 1e 50 00 93 33 58 00 3b 50 0e     P.4F...P..3X.;P.
    27a1:	90 3b 50 07 93 33 50 07 34 50 0e 90 3d 50 00 92     .;P..3P.4P..=P..
    27b1:	2a 50 07 93 33 50 07 33 54 00 3b 50 0e 90 3b 56     *P..3P.3T.;P..;V
    27c1:	00 92 2b 56 07 93 33 50 08 34 50 0e 90 3d 54 00     ..+V..3P.4P..=T.
    27d1:	92 2a 54 00 93 33 50 0e 33 58 00 3b 50 0e 90 3e     .*T..3P.3X.;P..>
    27e1:	5b 00 92 2b 5b 07 93 33 50 07 90 3b 5b 00 92 28     [..+[..3P..;[..(
    27f1:	5b 00 93 34 50 07 39 50 04 39 3e 03 90 3d 57 00     [..4P.9P.9>..=W.
    2801:	92 2a 57 00 93 39 50 07 38 50 07 90 3e 57 00 92     .*W..9P.8P..>W..
    2811:	2b 57 00 93 33 54 00 3c 55 07 34 4a 04 34 3e 03     +W..3T.<U.4J.4>.
    2821:	90 40 60 00 92 28 60 00 93 34 55 08 38 50 07 90     .@`..(`..4U.8P..
    2831:	42 5e 00 92 2f 5e 00 93 3c 5a 07 34 52 07 90 43     B^../^..<Z.4R..C
    2841:	5e 00 92 2b 5e 00 93 37 50 07 36 50 07 90 42 5e     ^..+^..7P.6P..B^
    2851:	00 92 36 54 00 93 33 58 00 3a 5a 00 91 4e 46 15     ..6T..3X.:Z..NF.
    2861:	92 36 41 00 93 33 50 07 92 42 61 00 93 34 50 0e     .6A..3P..Ba..4P.
    2871:	90 2a 50 00 92 34 5a 07 36 54 00 93 33 50 07 33     .*P..4Z.6T..3P.3
    2881:	54 00 3b 50 08 92 36 44 07 90 37 56 00 2b 56 00     T.;P..6D..7V.+V.
    2891:	92 34 4c 07 36 42 00 93 33 50 07 92 42 56 00 93     .4L.6B..3P..BV..
    28a1:	34 50 07 92 36 4a 07 90 2a 54 00 92 34 40 00 93     4P..6J..*T..4@..
    28b1:	33 50 07 92 36 54 07 93 33 58 00 3b 50 07 92 36     3P..6T..3X.;P..6
    28c1:	44 07 90 37 5b 00 2b 5b 00 92 34 4b 07 36 42 00     D..7[.+[..4K.6B.
    28d1:	93 33 50 07 92 43 56 00 93 34 50 07 92 42 50 07     .3P..CV..4P..BP.
    28e1:	90 2a 57 00 92 34 40 07 36 54 00 93 33 50 08 33     .*W..4@.6T..3P.3
    28f1:	54 00 3b 50 07 92 36 42 07 90 37 60 00 2b 60 00     T.;P..6B..7`.+`.
    2901:	92 34 4b 07 36 40 00 93 33 50 07 90 34 5e 00 28     .4K.6@..3P..4^.(
    2911:	5e 00 92 42 54 00 93 34 46 07 92 43 5a 00 93 34     ^..BT..4F..CZ..4
    2921:	50 07 92 40 54 00 93 33 50 07 92 37 4a 00 93 34     P..@T..3P..7J..4
    2931:	46 07 91 4e 46 00 92 36 5b 00 93 33 58 00 3b 50     F..NF..6[..3X.;P
    2941:	07 92 34 54 07 40 5b 07 36 54 00 93 33 50 07 92     ..4T.@[.6T..3P..
    2951:	42 62 00 93 34 50 0e 90 36 50 00 92 34 54 08 36     Bb..4P..6P..4T.6
    2961:	67 00 93 33 50 07 33 54 00 3b 50 07 92 36 50 07     g..3P.3T.;P..6P.
    2971:	90 37 56 00 92 34 54 07 36 40 00 93 33 50 07 92     .7V..4T.6@..3P..
    2981:	42 54 00 93 34 50 07 92 36 48 07 90 36 54 00 92     BT..4P..6H..6T..
    2991:	34 40 00 93 33 50 07 92 36 54 07 93 33 58 00 3b     4@..3P..6T..3X.;
    29a1:	50 07 92 36 49 07 90 37 5b 00 92 34 54 07 36 43     P..6I..7[..4T.6C
    29b1:	00 93 33 50 07 92 43 63 00 93 34 50 08 92 42 5e     ..3P..Cc..4P..B^
    29c1:	07 90 36 57 00 92 34 46 07 36 5e 00 93 33 50 07     ..6W..4F.6^..3P.
    29d1:	33 54 07 92 36 49 00 93 3b 46 07 90 37 60 00 92     3T..6I..;F..7`..
    29e1:	34 54 00 93 39 46 07 92 36 41 00 93 37 46 07 90     4T..9F..6A..7F..
    29f1:	3b 5e 00 92 42 60 00 93 34 46 07 92 43 6c 00 93     ;^..B`..4F..Cl..
    2a01:	34 50 07 90 37 5e 00 92 40 5e 00 93 33 50 07 92     4P..7^..@^..3P..
    2a11:	37 5d 00 93 34 50 07 91 4e 46 00 92 36 54 00 93     7]..4P..NF..6T..
    2a21:	3c 5a 15 92 36 41 00 93 33 50 08 92 42 61 00 93     <Z..6A..3P..Ba..
    2a31:	34 50 0e 90 36 50 00 92 34 5a 07 36 54 00 93 33     4P..6P..4Z.6T..3
    2a41:	50 07 33 54 07 92 36 44 07 90 37 56 00 92 34 4c     P.3T..6D..7V..4L
    2a51:	07 36 42 00 93 33 50 07 92 42 56 00 93 34 50 07     .6B..3P..BV..4P.
    2a61:	92 36 4a 07 90 36 54 00 92 34 40 00 93 33 50 07     .6J..6T..4@..3P.
    2a71:	92 36 54 07 93 33 58 07 92 36 44 07 90 37 5b 00     .6T..3X..6D..7[.
    2a81:	92 34 4b 08 36 42 00 93 33 50 07 92 43 56 00 93     .4K.6B..3P..CV..
    2a91:	34 50 07 92 42 50 07 90 36 57 00 92 34 40 07 36     4P..BP..6W..4@.6
    2aa1:	54 00 93 33 50 07 33 54 07 92 36 42 07 90 37 60     T..3P.3T..6B..7`
    2ab1:	00 92 34 4b 07 36 40 00 93 33 50 07 90 34 5e 00     ..4K.6@..3P..4^.
    2ac1:	92 42 54 00 93 34 46 07 92 43 5a 00 93 34 50 07     .BT..4F..CZ..4P.
    2ad1:	92 40 54 00 93 33 50 07 92 37 4a 00 93 34 46 07     .@T..3P..7J..4F.
    2ae1:	91 4e 46 00 92 36 5b 00 93 33 58 08 92 34 54 07     .NF..6[..3X..4T.
    2af1:	40 5b 07 36 54 00 93 33 50 07 92 42 62 00 93 34     @[.6T..3P..Bb..4
    2b01:	50 0e 90 36 50 00 92 34 54 07 36 67 00 93 33 50     P..6P..4T.6g..3P
    2b11:	07 33 54 07 92 36 50 07 90 37 56 00 92 34 54 07     .3T..6P..7V..4T.
    2b21:	36 40 00 93 33 50 07 92 42 54 00 93 34 50 07 92     6@..3P..BT..4P..
    2b31:	36 48 07 90 36 54 00 92 34 40 00 93 33 50 07 92     6H..6T..4@..3P..
    2b41:	36 54 08 93 33 58 07 92 36 49 07 90 37 5b 00 92     6T..3X..6I..7[..
    2b51:	34 54 07 36 43 00 93 33 50 07 90 34 5b 00 92 43     4T.6C..3P..4[..C
    2b61:	63 00 93 34 50 07 92 42 5e 00 93 39 50 03 39 3e     c..4P..B^..9P.9>
    2b71:	04 90 36 57 00 92 34 46 00 93 39 50 07 92 36 5e     ..6W..4F..9P..6^
    2b81:	00 93 38 50 07 90 37 57 00 93 3c 50 07 92 36 49     ..8P..7W..<P..6I
    2b91:	00 93 34 46 04 34 3e 03 90 34 60 00 92 34 54 00     ..4F.4>..4`..4T.
    2ba1:	93 34 50 07 92 36 41 00 93 33 50 00 38 50 07 90     .4P..6A..3P.8P..
    2bb1:	3b 5e 00 92 42 60 00 93 3c 50 04 37 3e 03 92 43     ;^..B`..<P.7>..C
    2bc1:	6c 00 93 37 50 04 36 3e 03 90 37 5e 00 92 40 5e     l..7P.6>..7^..@^
    2bd1:	00 93 33 50 00 36 50 08 92 37 5d 00 93 3b 50 07     ..3P.6P..7]..;P.
    2be1:	91 55 46 00 92 36 54 00 93 3a 5a 15 92 36 41 00     .UF..6T..:Z..6A.
    2bf1:	93 33 50 07 92 42 61 00 93 34 50 0e 92 34 5a 00     .3P..Ba..4P..4Z.
    2c01:	90 3d 58 07 92 36 54 00 93 33 50 07 33 54 07 92     .=X..6T..3P.3T..
    2c11:	36 44 07 90 3b 5e 00 92 34 4c 07 36 42 00 93 33     6D..;^..4L.6B..3
    2c21:	50 07 92 42 56 00 93 34 50 07 92 36 4a 08 90 3d     P..BV..4P..6J..=
    2c31:	5c 00 92 34 40 00 93 33 50 07 92 36 54 07 93 33     \..4@..3P..6T..3
    2c41:	58 07 92 36 44 07 90 3e 64 00 92 34 4b 07 36 42     X..6D..>d..4K.6B
    2c51:	00 93 33 50 07 92 43 56 00 93 34 50 07 92 42 50     ..3P..CV..4P..BP
    2c61:	07 90 3d 5f 00 92 34 40 07 36 54 00 93 33 50 07     ..=_..4@.6T..3P.
    2c71:	33 54 07 92 36 42 07 90 3e 61 00 92 34 4b 07 36     3T..6B..>a..4K.6
    2c81:	40 00 93 33 50 08 90 3b 60 00 92 42 54 00 93 34     @..3P..;`..BT..4
    2c91:	46 07 92 43 5a 00 93 34 50 07 92 40 54 00 93 33     F..CZ..4P..@T..3
    2ca1:	50 07 92 37 4a 00 93 34 46 07 91 55 46 00 92 36     P..7J..4F..UF..6
    2cb1:	5b 00 93 33 58 00 3c 5a 07 92 34 54 07 40 5b 07     [..3X.<Z..4T.@[.
    2cc1:	36 54 00 93 33 50 07 92 42 62 00 93 3b 46 0e 90     6T..3P..Bb..;F..
    2cd1:	3d 58 00 92 34 54 07 36 67 00 93 33 50 07 33 54     =X..4T.6g..3P.3T
    2ce1:	07 92 36 50 07 90 3e 5e 00 92 34 54 08 36 40 00     ..6P..>^..4T.6@.
    2cf1:	93 33 50 07 92 42 54 00 93 34 50 07 92 36 48 07     .3P..BT..4P..6H.
    2d01:	90 3d 5c 00 92 34 40 00 93 33 50 07 92 36 54 07     .=\..4@..3P..6T.
    2d11:	93 33 58 07 92 36 49 07 90 3b 61 00 92 34 54 07     .3X..6I..;a..4T.
    2d21:	36 43 00 93 33 50 07 92 43 63 00 93 34 50 07 92     6C..3P..Cc..4P..
    2d31:	42 5e 07 90 3d 5f 00 92 34 46 07 36 5e 00 93 33     B^..=_..4F.6^..3
    2d41:	50 07 3b 50 07 92 36 49 00 93 3b 46 08 90 3e 61     P.;P..6I..;F..>a
    2d51:	00 92 34 54 00 93 39 46 07 92 36 41 00 93 37 46     ..4T..9F..6A..7F
    2d61:	07 90 40 60 00 3b 60 00 92 42 60 00 93 3b 46 07     ..@`.;`..B`..;F.
    2d71:	92 43 6c 00 93 34 50 07 90 3e 60 00 92 40 5e 00     .Cl..4P..>`..@^.
    2d81:	93 33 50 07 92 37 5d 00 93 34 50 07 91 55 46 00     .3P..7]..4P..UF.
    2d91:	92 36 54 00 93 3c 5a 15 92 36 41 00 93 33 50 07     .6T..<Z..6A..3P.
    2da1:	92 42 61 00 93 34 50 0e 90 3d 58 00 92 34 5a 07     .Ba..4P..=X..4Z.
    2db1:	36 54 00 93 33 50 08 33 54 07 92 36 44 07 90 3e     6T..3P.3T..6D..>
    2dc1:	5e 00 92 34 4c 07 36 42 00 93 33 50 07 92 42 56     ^..4L.6B..3P..BV
    2dd1:	00 93 34 50 07 92 36 4a 07 90 3d 5c 00 92 34 40     ..4P..6J..=\..4@
    2de1:	00 93 33 50 07 92 36 54 07 93 33 58 07 92 36 44     ..3P..6T..3X..6D
    2df1:	07 90 3b 61 00 92 34 4b 07 36 42 00 93 33 50 07     ..;a..4K.6B..3P.
    2e01:	92 43 56 00 93 34 50 07 92 42 50 07 90 3d 5f 00     .CV..4P..BP..=_.
    2e11:	92 34 40 08 36 54 00 93 33 50 07 33 54 07 92 36     .4@.6T..3P.3T..6
    2e21:	42 07 90 3e 61 00 92 34 4b 07 36 40 00 93 33 50     B..>a..4K.6@..3P
    2e31:	07 90 3b 60 00 92 42 54 00 93 34 46 07 92 43 5a     ..;`..BT..4F..CZ
    2e41:	00 93 34 50 07 92 40 54 00 93 33 50 07 92 37 4a     ..4P..@T..3P..7J
    2e51:	00 93 34 46 07 91 55 46 00 92 36 5b 00 93 3a 64     ..4F..UF..6[..:d
    2e61:	07 92 34 54 07 90 3b 58 00 92 40 5b 07 36 54 00     ..4T..;X..@[.6T.
    2e71:	93 33 50 07 92 42 62 00 93 3b 46 0f 90 3d 58 00     .3P..Bb..;F..=X.
    2e81:	92 34 54 07 36 67 00 93 33 50 07 33 54 07 92 36     .4T.6g..3P.3T..6
    2e91:	50 07 90 3b 5e 00 92 34 54 07 36 40 00 93 33 50     P..;^..4T.6@..3P
    2ea1:	07 92 42 54 00 93 34 50 07 92 36 48 07 90 3d 5c     ..BT..4P..6H..=\
    2eb1:	00 92 34 40 00 93 33 50 07 92 36 54 07 93 33 58     ..4@..3P..6T..3X
    2ec1:	07 92 36 49 07 90 3e 5f 00 92 34 54 07 36 43 00     ..6I..>_..4T.6C.
    2ed1:	93 33 50 08 90 3b 60 00 92 43 63 00 93 34 50 07     .3P..;`..Cc..4P.
    2ee1:	92 42 5e 00 93 39 50 07 90 3d 5f 00 92 34 46 00     .B^..9P..=_..4F.
    2ef1:	93 39 50 07 92 36 5e 00 93 38 50 07 90 3e 5f 00     .9P..6^..8P..>_.
    2f01:	93 3c 50 07 92 36 49 00 93 34 46 07 90 40 61 00     .<P..6I..4F..@a.
    2f11:	92 34 54 00 93 38 50 07 92 36 41 00 93 37 50 07     .4T..8P..6A..7P.
    2f21:	90 42 60 00 92 42 60 00 93 3c 46 07 92 43 6c 00     .B`..B`..<F..Cl.
    2f31:	93 37 50 04 37 48 03 90 43 62 00 92 40 5e 00 93     .7P.7H..Cb..@^..
    2f41:	37 5a 07 92 37 5d 00 93 36 50 07 90 42 61 01 91     7Z..7]..6P..Ba..
    2f51:	1e 50 00 93 3a 5a 15 33 50 07 34 50 0e 90 3d 50     .P..:Z.3P.4P..=P
    2f61:	00 92 2a 50 07 93 33 50 07 33 54 0e 90 3b 56 00     ..*P..3P.3T..;V.
    2f71:	92 2b 56 07 93 33 50 07 34 50 0e 90 3d 54 00 92     .+V..3P.4P..=T..
    2f81:	2a 54 00 93 33 50 0e 33 58 0f 90 3e 5b 00 92 2b     *T..3P.3X..>[..+
    2f91:	5b 07 93 33 50 07 34 50 0e 90 3d 57 00 92 2a 57     [..3P.4P..=W..*W
    2fa1:	07 93 33 50 07 33 54 0e 90 3e 60 00 92 2b 60 07     ..3P.3T..>`..+`.
    2fb1:	93 33 50 07 90 3b 5e 00 92 28 5e 00 93 34 46 07     .3P..;^..(^..4F.
    2fc1:	34 50 07 33 50 07 34 46 07 91 4e 46 00 93 33 58     4P.3P.4F..NF..3X
    2fd1:	16 33 50 07 34 50 0e 90 3d 50 00 92 2a 50 07 93     .3P.4P..=P..*P..
    2fe1:	33 50 07 33 54 0e 90 3e 56 00 92 2b 56 07 93 33     3P.3T..>V..+V..3
    2ff1:	50 07 34 50 0e 90 3d 54 00 92 2a 54 00 93 33 50     P.4P..=T..*T..3P
    3001:	0f 33 58 0e 90 3b 5b 00 92 2b 5b 07 93 33 50 07     .3X..;[..+[..3P.
    3011:	34 50 0e 90 3d 57 00 92 2a 57 07 93 33 50 07 33     4P..=W..*W..3P.3
    3021:	54 07 3b 46 07 90 3e 60 00 92 2b 60 00 93 39 46     T.;F..>`..+`..9F
    3031:	07 37 46 07 90 40 5e 00 92 2f 5e 00 93 34 46 07     .7F..@^../^..4F.
    3041:	34 50 08 90 3e 5e 00 92 2b 5e 00 93 33 50 07 34     4P..>^..+^..3P.4
    3051:	50 07 91 55 46 00 93 3c 5a 15 33 50 07 34 50 0e     P..UF..<Z.3P.4P.
    3061:	90 3d 50 00 92 2a 50 07 93 33 50 07 33 54 0e 90     .=P..*P..3P.3T..
    3071:	3e 56 00 92 2b 56 07 93 33 50 07 34 50 0f 90 3d     >V..+V..3P.4P..=
    3081:	54 00 92 2a 54 00 93 33 50 0e 33 58 0e 90 3b 5b     T..*T..3P.3X..;[
    3091:	00 92 2b 5b 07 93 33 50 07 34 50 0e 90 3d 57 00     ..+[..3P.4P..=W.
    30a1:	92 2a 57 07 93 33 50 07 33 54 0e 90 3e 60 00 92     .*W..3P.3T..>`..
    30b1:	2b 60 08 93 33 50 07 90 3b 5e 00 92 28 5e 00 93     +`..3P..;^..(^..
    30c1:	34 46 07 34 50 07 33 50 07 34 46 07 91 55 46 00     4F.4P.3P.4F..UF.
    30d1:	93 33 58 0e 90 3b 50 07 93 33 50 07 34 50 0e 90     .3X..;P..3P.4P..
    30e1:	3d 50 00 92 2a 50 07 93 33 50 07 33 54 0f 90 3b     =P..*P..3P.3T..;
    30f1:	56 00 92 2b 56 07 93 33 50 07 34 50 0e 90 3d 54     V..+V..3P.4P..=T
    3101:	00 92 2a 54 00 93 33 50 0e 33 58 0e 90 3e 5b 00     ..*T..3P.3X..>[.
    3111:	92 2b 5b 07 93 33 50 07 90 3b 5b 00 92 28 5b 00     .+[..3P..;[..([.
    3121:	93 34 50 07 39 50 04 39 3e 03 90 3d 57 00 92 2a     .4P.9P.9>..=W..*
    3131:	57 00 93 39 50 07 33 50 00 38 50 07 90 3e 57 00     W..9P.3P.8P..>W.
    3141:	92 2b 57 00 93 3c 50 08 34 4a 03 34 3e 04 90 40     .+W..<P.4J.4>..@
    3151:	60 00 92 28 60 00 93 34 55 07 38 50 06 34 3b 01     `..(`..4U.8P.4;.
    3161:	90 42 5e 00 92 2f 5e 00 93 34 50 07 34 50 07 90     .B^../^..4P.4P..
    3171:	43 5e 00 92 2b 5e 00 93 37 50 07 36 50 07 90 42     C^..+^..7P.6P..B
    3181:	5e 00 91 1e 50 00 92 36 54 00 93 3a 5a 15 92 36     ^...P..6T..:Z..6
    3191:	4d 00 93 33 50 07 92 42 61 00 93 34 50 0e 92 34     M..3P..Ba..4P..4
    31a1:	5a 08 36 54 00 93 33 50 07 33 54 07 92 36 4d 07     Z.6T..3P.3T..6M.
    31b1:	34 4c 07 36 4d 00 93 33 50 07 92 42 56 00 93 34     4L.6M..3P..BV..4
    31c1:	50 07 92 36 54 07 34 52 00 93 33 50 07 92 36 54     P..6T.4R..3P..6T
    31d1:	07 93 33 58 07 92 36 4d 07 34 4b 07 36 4d 00 93     ..3X..6M.4K.6M..
    31e1:	33 50 07 92 43 56 00 93 34 50 07 92 42 50 08 34     3P..CV..4P..BP.4
    31f1:	4d 07 36 54 00 93 33 51 07 33 55 07 92 36 4d 07     M.6T..3Q.3U..6M.
    3201:	34 4b 07 36 4d 00 93 33 51 07 92 42 54 00 93 34     4K.6M..3Q..BT..4
    3211:	47 07 92 43 5a 00 93 34 51 07 92 40 54 00 93 33     G..CZ..4Q..@T..3
    3221:	51 07 92 37 4a 00 93 34 47 07 91 1e 53 00 92 36     Q..7J..4G...S..6
    3231:	5b 00 93 33 5a 07 92 34 54 07 40 5b 07 36 54 00     [..3Z..4T.@[.6T.
    3241:	93 33 52 07 92 42 62 00 93 34 51 0f 92 34 54 07     .3R..Bb..4Q..4T.
    3251:	36 67 00 93 33 52 07 33 56 07 92 36 50 07 34 54     6g..3R.3V..6P.4T
    3261:	07 36 4d 00 93 33 53 07 92 42 54 00 93 34 52 07     .6M..3S..BT..4R.
    3271:	92 36 50 07 34 4d 00 93 33 53 07 92 36 54 07 93     .6P.4M..3S..6T..
    3281:	33 5b 07 92 36 49 07 34 54 08 36 4d 00 93 33 53     3[..6I.4T.6M..3S
    3291:	07 92 43 63 00 93 34 53 07 92 42 5e 07 34 46 07     ..Cc..4S..B^.4F.
    32a1:	36 5e 00 93 33 54 07 33 58 07 92 36 49 00 93 3b     6^..3T.3X..6I..;
    32b1:	48 07 92 34 54 00 93 39 46 07 92 36 4d 00 93 37     H..4T..9F..6M..7
    32c1:	46 07 92 42 60 00 93 34 48 07 92 43 6c 00 93 34     F..B`..4H..Cl..4
    32d1:	53 07 92 40 5e 00 93 33 54 07 92 37 5d 00 93 34     S..@^..3T..7]..4
    32e1:	53 07 91 1e 56 00 92 36 54 00 93 3c 64 07 33 5d     S...V..6T..<d.3]
    32f1:	0f 92 36 4d 00 93 33 54 07 90 4e 66 00 92 42 61     ..6M..3T..Nf..Ba
    3301:	00 93 3a 6e 0e 92 34 5a 07 36 54 00 93 33 54 07     ..:n..4Z.6T..3T.
    3311:	91 1e 56 00 93 33 59 07 92 36 4d 00 93 33 5d 07     ..V..3Y..6M..3].
    3321:	92 34 4c 07 36 4d 00 93 33 54 07 92 42 56 00 93     .4L.6M..3T..BV..
    3331:	34 5e 07 92 36 4a 07 34 4d 00 93 33 54 07 92 36     4^..6J.4M..3T..6
    3341:	54 07 91 1e 56 00 93 33 5d 08 92 36 4d 00 93 33     T...V..3]..6M..3
    3351:	5d 07 92 34 4b 07 36 4d 00 93 33 54 07 90 4f 66     ]..4K.6M..3T..Of
    3361:	00 92 43 56 00 93 3a 6e 07 90 4e 63 00 92 42 50     ..CV..:n..Nc..BP
    3371:	07 34 4d 07 36 54 00 93 33 54 07 91 1e 56 00 93     .4M.6T..3T...V..
    3381:	33 59 07 92 36 4d 00 93 33 5d 07 90 4c 66 00 92     3Y..6M..3]..Lf..
    3391:	34 4b 00 93 3a 61 07 90 4e 62 00 92 36 4d 00 93     4K..:a..Nb..6M..
    33a1:	33 54 00 3c 6e 07 92 42 54 00 93 34 69 07 90 4f     3T.<n..BT..4i..O
    33b1:	5e 00 92 43 5a 00 93 34 69 07 92 40 54 00 93 3a     ^..CZ..4i..@T..:
    33c1:	60 07 90 4c 5e 00 92 37 4a 00 93 34 69 08 91 1e     `..L^..7J..4i...
    33d1:	5a 00 92 36 5b 00 93 3c 69 07 92 34 54 00 93 33     Z..6[..<i..4T..3
    33e1:	5d 07 90 4c 63 00 92 40 5b 07 36 54 00 93 33 54     ]..Lc..@[.6T..3T
    33f1:	07 90 4e 67 00 92 42 62 00 93 3a 6e 0e 92 34 54     ..Ng..Bb..:n..4T
    3401:	07 36 64 00 93 33 54 07 91 1e 5c 00 93 33 59 07     .6d..3T...\..3Y.
    3411:	92 36 50 00 93 33 5d 07 92 34 54 07 36 4d 00 93     .6P..3]..4T.6M..
    3421:	33 54 07 92 42 54 00 93 34 5e 07 92 36 4d 08 34     3T..BT..4^..6M.4
    3431:	4d 00 93 33 54 07 92 36 54 07 91 1e 5e 00 93 33     M..3T..6T...^..3
    3441:	5d 07 92 36 49 00 93 33 5d 07 92 34 54 07 36 4d     ]..6I..3]..4T.6M
    3451:	00 93 33 54 07 90 4f 66 00 92 43 63 00 93 3a 6e     ..3T..Of..Cc..:n
    3461:	07 90 4e 63 00 92 42 5e 00 93 33 5d 07 92 34 46     ..Nc..B^..3]..4F
    3471:	00 93 33 63 07 92 36 5e 00 93 33 54 07 91 1e 60     ..3c..6^..3T...`
    3481:	00 93 33 59 00 34 62 07 92 36 49 00 93 33 5d 00     ..3Y.4b..6I..3].
    3491:	34 58 07 90 4c 66 00 92 34 54 00 93 3a 61 07 90     4X..Lf..4T..:a..
    34a1:	4e 62 00 92 36 4d 00 93 3c 6e 07 92 42 60 00 93     Nb..6M..<n..B`..
    34b1:	34 73 08 90 4f 5e 00 92 43 68 00 93 34 5e 03 34     4s..O^..Ch..4^.4
    34c1:	54 04 90 4c 5e 00 92 40 5e 00 93 33 54 00 34 73     T..L^..@^..3T.4s
    34d1:	07 92 37 5d 00 93 33 63 00 34 73 07 90 4e 68 00     ..7]..3c.4s..Nh.
    34e1:	91 1e 50 00 93 3a 78 0e 92 34 4d 07 36 4d 00 93     ..P..:x..4M.6M..
    34f1:	33 50 07 92 42 61 00 93 34 50 0e 92 34 5a 07 36     3P..Ba..4P..4Z.6
    3501:	54 00 93 33 50 07 33 54 07 92 36 4d 07 34 4c 07     T..3P.3T..6M.4L.
    3511:	36 4d 00 93 33 50 08 92 42 56 00 93 34 50 07 92     6M..3P..BV..4P..
    3521:	36 4a 07 34 4d 00 93 33 50 07 92 36 54 07 91 1f     6J.4M..3P..6T...
    3531:	50 07 92 36 4d 07 34 4b 07 36 4d 00 93 33 50 07     P..6M.4K.6M..3P.
    3541:	92 43 56 00 93 34 50 07 92 42 50 07 34 4d 07 36     .CV..4P..BP.4M.6
    3551:	54 00 93 33 50 07 33 54 07 92 36 4d 08 34 4b 07     T..3P.3T..6M.4K.
    3561:	36 4d 00 93 33 50 07 92 42 54 00 93 34 46 07 92     6M..3P..BT..4F..
    3571:	43 5a 00 93 34 50 07 92 40 54 00 93 33 50 07 92     CZ..4P..@T..3P..
    3581:	37 4a 00 93 34 46 07 91 23 50 00 92 36 5b 00 93     7J..4F..#P..6[..
    3591:	33 58 07 92 34 54 07 40 5b 07 36 54 00 93 33 50     3X..4T.@[.6T..3P
    35a1:	07 92 42 62 00 93 34 50 0e 92 34 54 07 36 64 00     ..Bb..4P..4T.6d.
    35b1:	93 33 50 07 33 54 08 92 36 50 07 34 54 07 36 4d     .3P.3T..6P.4T.6M
    35c1:	00 93 33 50 07 92 42 54 00 93 34 50 07 92 36 4d     ..3P..BT..4P..6M
    35d1:	07 34 4d 00 93 33 50 07 92 36 54 07 91 26 50 00     .4M..3P..6T..&P.
    35e1:	93 33 58 07 92 36 49 07 34 54 07 36 4d 00 93 33     .3X..6I.4T.6M..3
    35f1:	50 07 92 43 63 00 93 34 50 07 92 42 5e 07 34 46     P..Cc..4P..B^.4F
    3601:	07 36 5e 00 93 33 50 08 33 54 07 92 36 49 00 93     .6^..3P.3T..6I..
    3611:	3b 46 07 92 34 54 00 93 39 46 07 92 36 4d 00 93     ;F..4T..9F..6M..
    3621:	37 46 07 92 42 60 00 93 34 46 07 92 43 68 00 93     7F..B`..4F..Ch..
    3631:	34 50 07 92 40 5e 00 93 33 50 07 92 37 5d 00 93     4P..@^..3P..7]..
    3641:	34 50 07 91 42 50 00 92 36 54 00 93 33 58 00 3c     4P..BP..6T..3X.<
    3651:	5a 15 92 36 4d 00 93 33 50 07 92 42 61 00 93 34     Z..6M..3P..Ba..4
    3661:	50 0f 92 34 5a 07 36 54 00 93 33 50 07 33 54 07     P..4Z.6T..3P.3T.
    3671:	92 36 4d 07 34 4c 07 36 4d 00 93 33 50 07 92 42     .6M.4L.6M..3P..B
    3681:	56 00 93 34 50 07 92 36 4a 07 34 4d 00 93 33 50     V..4P..6J.4M..3P
    3691:	07 92 36 54 07 90 43 51 00 1f 50 00 91 43 51 00     ..6T..CQ..P..CQ.
    36a1:	93 33 58 07 92 36 4d 07 34 4b 07 36 4d 00 93 33     .3X..6M.4K.6M..3
    36b1:	50 07 92 43 56 00 93 34 50 08 92 42 50 07 34 4d     P..CV..4P..BP.4M
    36c1:	07 36 54 00 93 33 50 07 33 54 07 92 36 4d 07 34     .6T..3P.3T..6M.4
    36d1:	4b 07 36 4d 00 93 33 50 07 92 42 54 00 93 34 46     K.6M..3P..BT..4F
    36e1:	07 92 43 5a 00 93 34 50 07 92 40 54 00 93 33 50     ..CZ..4P..@T..3P
    36f1:	07 92 37 4a 00 93 34 46 07 90 42 53 00 23 50 00     ..7J..4F..BS.#P.
    3701:	91 47 53 00 92 36 5b 00 93 33 58 07 92 34 54 07     .GS..6[..3X..4T.
    3711:	40 5b 07 36 54 00 93 33 50 08 92 42 62 00 93 34     @[.6T..3P..Bb..4
    3721:	50 0e 92 34 54 07 36 64 00 93 33 50 07 33 54 07     P..4T.6d..3P.3T.
    3731:	92 36 50 07 34 54 07 36 4d 00 93 33 50 07 92 42     .6P.4T.6M..3P..B
    3741:	54 00 93 34 50 07 92 36 4d 07 34 4d 00 93 33 50     T..4P..6M.4M..3P
    3751:	07 92 36 54 07 90 43 54 00 26 50 00 91 4a 54 00     ..6T..CT.&P..JT.
    3761:	93 33 58 07 92 36 49 07 34 54 08 36 4d 00 93 33     .3X..6I.4T.6M..3
    3771:	50 07 90 4c 54 00 91 4c 54 00 92 43 63 00 93 34     P..LT..LT..Cc..4
    3781:	50 07 92 42 5e 00 93 39 50 03 39 3e 04 92 34 46     P..B^..9P.9>..4F
    3791:	00 93 39 50 07 92 36 5e 00 93 33 50 00 38 50 07     ..9P..6^..3P.8P.
    37a1:	90 4e 55 00 91 4e 55 00 93 3c 50 07 92 36 49 00     .NU..NU..<P..6I.
    37b1:	93 34 4a 04 34 3e 03 92 34 54 00 93 34 55 07 92     .4J.4>..4T..4U..
    37c1:	36 4d 00 93 38 50 06 34 3b 01 90 4f 55 00 91 4f     6M..8P.4;..OU..O
    37d1:	55 00 92 42 60 00 93 34 50 07 92 43 68 00 93 34     U..B`..4P..Ch..4
    37e1:	50 07 92 40 5e 00 93 37 50 07 92 37 5d 00 93 36     P..@^..7P..7]..6
    37f1:	50 07 90 42 56 00 91 4e 56 00 92 36 54 00 93 3c     P..BV..NV..6T..<
    3801:	5a 01 90 1e 50 15 92 36 4d 00 93 33 50 07 92 42     Z...P..6M..3P..B
    3811:	61 00 93 34 50 0e 92 34 5a 07 36 54 00 93 33 50     a..4P..4Z.6T..3P
    3821:	07 33 54 07 92 36 4d 07 34 4c 07 36 4d 00 93 33     .3T..6M.4L.6M..3
    3831:	50 07 92 42 56 00 93 34 50 07 92 36 4a 07 34 4d     P..BV..4P..6J.4M
    3841:	00 93 33 50 07 92 36 54 08 90 43 58 00 1f 50 00     ..3P..6T..CX..P.
    3851:	93 33 58 07 92 36 4d 07 34 4b 07 36 4d 00 93 33     .3X..6M.4K.6M..3
    3861:	50 07 92 43 56 00 93 34 50 07 92 42 50 07 34 4d     P..CV..4P..BP.4M
    3871:	07 36 54 00 93 33 50 07 33 54 07 92 36 4d 07 34     .6T..3P.3T..6M.4
    3881:	4b 07 36 4d 00 93 33 50 07 92 42 54 00 93 34 46     K.6M..3P..BT..4F
    3891:	07 92 43 5a 00 93 34 50 07 92 40 54 00 93 33 50     ..CZ..4P..@T..3P
    38a1:	08 92 37 4a 00 93 34 46 07 90 47 59 00 23 50 00     ..7J..4F..GY.#P.
    38b1:	92 36 5b 00 93 33 58 07 92 34 54 07 40 5b 07 36     .6[..3X..4T.@[.6
    38c1:	54 00 93 33 50 07 92 42 62 00 93 34 50 0e 92 34     T..3P..Bb..4P..4
    38d1:	54 07 36 64 00 93 33 50 07 33 54 07 92 36 50 07     T.6d..3P.3T..6P.
    38e1:	34 54 07 36 4d 00 93 33 50 07 92 42 54 00 93 34     4T.6M..3P..BT..4
    38f1:	50 08 92 36 4d 07 34 4d 00 93 33 50 07 92 36 54     P..6M.4M..3P..6T
    3901:	07 90 4a 5b 00 26 50 00 91 4f 5b 00 93 33 58 07     ..J[.&P..O[..3X.
    3911:	92 36 49 07 34 54 07 36 4d 00 93 33 50 07 90 4e     .6I.4T.6M..3P..N
    3921:	5c 00 91 4e 5c 00 92 43 63 00 93 34 50 07 92 42     \..N\..Cc..4P..B
    3931:	5e 00 93 39 50 04 39 3e 03 92 34 46 00 93 39 50     ^..9P.9>..4F..9P
    3941:	07 92 36 5e 00 93 38 50 07 90 51 5c 00 91 51 5c     ..6^..8P..Q\..Q\
    3951:	00 93 3c 50 07 92 36 49 00 93 34 4a 04 34 3e 03     ..<P..6I..4J.4>.
    3961:	92 34 54 00 93 34 55 07 92 36 4d 00 93 38 50 06     .4T..4U..6M..8P.
    3971:	34 3b 02 90 53 5c 00 91 53 5c 00 92 42 60 00 93     4;..S\..S\..B`..
    3981:	34 50 07 92 43 68 00 93 34 50 07 92 40 5e 00 93     4P..Ch..4P..@^..
    3991:	37 50 07 92 37 5d 00 93 36 50 07 90 3d 5c 00 91     7P..7]..6P..=\..
    39a1:	55 60 00 92 36 54 00 93 33 58 00 90 1e 50 15 92     U`..6T..3X...P..
    39b1:	36 4d 00 93 33 50 07 92 42 61 00 93 34 50 0e 92     6M..3P..Ba..4P..
    39c1:	34 5a 07 36 54 00 93 33 50 07 33 54 07 92 36 4d     4Z.6T..3P.3T..6M
    39d1:	07 34 4c 08 36 4d 00 93 33 50 07 92 42 56 00 93     .4L.6M..3P..BV..
    39e1:	34 50 07 92 36 4a 07 34 4d 00 93 33 50 07 92 36     4P..6J.4M..3P..6
    39f1:	54 07 90 3e 5e 00 1f 50 00 93 33 58 07 92 36 4d     T..>^..P..3X..6M
    3a01:	07 34 4b 07 36 4d 00 93 33 50 07 92 43 56 00 93     .4K.6M..3P..CV..
    3a11:	34 50 07 92 42 50 07 34 4d 07 36 54 00 93 33 50     4P..BP.4M.6T..3P
    3a21:	07 33 54 08 92 36 4d 07 34 4b 07 36 4d 00 93 33     .3T..6M.4K.6M..3
    3a31:	50 07 92 42 54 00 93 34 46 07 92 43 5a 00 93 34     P..BT..4F..CZ..4
    3a41:	50 07 92 40 54 00 93 33 50 07 92 37 4a 00 93 34     P..@T..3P..7J..4
    3a51:	46 07 90 42 60 00 23 50 00 92 36 5b 00 93 33 58     F..B`.#P..6[..3X
    3a61:	07 92 34 54 07 40 5b 07 36 54 00 93 33 50 07 92     ..4T.@[.6T..3P..
    3a71:	42 62 00 93 34 50 0e 92 34 54 07 36 64 00 93 33     Bb..4P..4T.6d..3
    3a81:	50 08 33 54 07 92 36 50 07 34 54 07 36 4d 00 93     P.3T..6P.4T.6M..
    3a91:	33 50 07 92 42 54 00 93 34 50 07 92 36 4d 07 34     3P..BT..4P..6M.4
    3aa1:	4d 00 93 33 50 07 92 36 54 07 90 43 61 00 26 50     M..3P..6T..Ca.&P
    3ab1:	00 93 33 58 07 92 36 49 07 34 54 07 36 4d 00 93     ..3X..6I.4T.6M..
    3ac1:	33 50 07 90 53 60 00 91 53 60 00 92 43 63 00 93     3P..S`..S`..Cc..
    3ad1:	34 50 07 92 42 5e 00 93 39 50 04 39 3e 03 92 34     4P..B^..9P.9>..4
    3ae1:	46 00 93 39 50 08 92 36 5e 00 93 38 50 07 90 55     F..9P..6^..8P..U
    3af1:	60 00 91 55 60 00 93 3c 50 07 92 36 49 00 93 34     `..U`..<P..6I..4
    3b01:	4a 03 34 3e 04 92 34 54 00 93 34 55 07 92 36 4d     J.4>..4T..4U..6M
    3b11:	00 93 33 50 06 34 3b 01 90 56 61 00 91 56 61 00     ..3P.4;..Va..Va.
    3b21:	92 42 60 00 93 34 50 07 92 43 68 00 93 34 50 07     .B`..4P..Ch..4P.
    3b31:	92 40 5e 00 93 37 50 07 92 37 5d 00 93 36 50 07     .@^..7P..7]..6P.
    3b41:	90 36 64 00 1e 64 00 91 1e 64 00 92 36 54 00 93     .6d..d...d..6T..
    3b51:	3a 78 15 92 36 4d 00 93 33 50 07 92 42 61 00 93     :x..6M..3P..Ba..
    3b61:	34 50 0f 92 34 5a 07 36 54 00 93 33 50 07 33 54     4P..4Z.6T..3P.3T
    3b71:	07 92 36 4d 07 34 4c 07 36 4d 00 93 33 50 07 92     ..6M.4L.6M..3P..
    3b81:	42 56 00 93 34 50 07 92 36 4a 07 34 4d 00 93 33     BV..4P..6J.4M..3
    3b91:	50 07 92 36 54 07 93 33 58 07 92 36 4b 07 34 47     P..6T..3X..6K.4G
    3ba1:	07 36 47 00 93 33 50 08 92 43 4d 00 93 34 50 07     .6G..3P..CM..4P.
    3bb1:	92 42 46 07 34 41 07 36 45 00 93 33 50 07 33 54     .BF.4A.6E..3P.3T
    3bc1:	07 92 36 3c 07 34 38 07 36 38 00 93 33 50 07 92     ..6<.48.68..3P..
    3bd1:	42 3a 00 93 34 46 07 92 43 3d 00 93 34 50 07 92     B:..4F..C=..4P..
    3be1:	40 36 00 93 33 50 07 92 37 2e 00 93 34 46 07 90     @6..3P..7...4F..
    3bf1:	1e 5a 00 91 1e 5a 00 92 36 36 00 93 33 58 07 92     .Z...Z..66..3X..
    3c01:	34 30 07 40 32 08 36 2c 00 93 33 50 07 92 42 31     40.@2.6,..3P..B1
    3c11:	00 93 34 50 0e 92 34 25 07 36 2b 00 93 33 50 07     ..4P..4%.6+..3P.
    3c21:	33 54 07 92 36 1e 07 34 1d 07 36 19 00 93 33 50     3T..6..4..6...3P
    3c31:	07 92 42 19 00 93 34 50 07 92 36 15 07 34 13 00     ..B...4P..6..4..
    3c41:	93 33 50 07 92 36 13 07 93 33 58 16 33 50 07 34     .3P..6...3X.3P.4
    3c51:	50 07 39 50 03 39 3e 04 39 50 07 33 50 00 38 50     P.9P.9>.9P.3P.8P
    3c61:	07 3c 50 07 34 4a 04 34 3e 03 34 55 07 38 50 06     .<P.4J.4>.4U.8P.
    3c71:	34 3b 01 34 50 07 34 50 07 37 50 07 36 50 3e ff     4;.4P.4P.7P.6P>.
    3c81:	06 01 45 00 ff 2f 00                                ..E../.

00003c88 <Level5Song>:
    3c88:	00 c0 3e 00 c1 3f 00 c2 40 00 c3 30 00 b0 07 7f     ..>..?..@..0....
    3c98:	00 b1 07 7f 00 b2 07 7f 00 92 2e 64 00 b3 07 7f     ...........d....
    3ca8:	00 ff 06 01 53 10 91 35 64 11 3a 64 11 3e 64 10     ....S..5d.:d.>d.
    3cb8:	3a 64 11 35 64 11 92 2b 64 11 91 32 64 10 37 64     :d.5d..+d..2d.7d
    3cc8:	11 3a 64 11 37 64 10 32 64 11 92 30 64 11 91 37     .:d.7d.2d..0d..7
    3cd8:	64 11 3a 64 10 41 64 11 3a 64 11 37 64 10 92 29     d.:d.Ad.:d.7d..)
    3ce8:	64 11 91 35 64 11 3c 64 11 3f 64 10 90 41 64 00     d..5d.<d.?d..Ad.
    3cf8:	91 3c 64 11 35 64 11 90 46 64 00 92 2e 64 10 91     .<d.5d..Fd...d..
    3d08:	35 64 11 3a 64 11 3e 64 11 90 41 64 00 91 3a 64     5d.:d.>d..Ad..:d
    3d18:	10 35 64 11 90 4a 64 00 92 2b 64 11 91 32 64 10     .5d..Jd..+d..2d.
    3d28:	37 64 11 3a 64 11 90 46 64 00 91 37 64 11 32 64     7d.:d..Fd..7d.2d
    3d38:	10 90 4d 64 00 92 30 64 11 91 37 64 11 3a 64 11     ..Md..0d..7d.:d.
    3d48:	41 64 10 3a 64 11 37 64 11 92 29 64 10 91 35 64     Ad.:d.7d..)d..5d
    3d58:	11 3c 64 11 3f 64 11 90 41 64 00 91 3c 64 10 35     .<d.?d..Ad..<d.5
    3d68:	64 11 90 46 64 00 92 2e 64 11 91 35 64 10 3a 64     d..Fd...d..5d.:d
    3d78:	11 3e 64 11 90 41 64 00 91 3a 64 11 35 64 10 90     .>d..Ad..:d.5d..
    3d88:	4a 64 00 92 2b 64 11 91 32 64 11 37 64 10 3a 64     Jd..+d..2d.7d.:d
    3d98:	11 90 46 64 00 91 37 64 11 32 64 11 90 4d 64 00     ..Fd..7d.2d..Md.
    3da8:	92 30 64 10 91 37 64 11 3a 64 11 41 64 10 3a 64     .0d..7d.:d.Ad.:d
    3db8:	11 37 64 11 92 29 64 11 91 35 64 10 3c 64 11 3f     .7d..)d..5d.<d.?
    3dc8:	64 11 90 4d 64 00 91 3c 64 10 35 64 11 90 4f 64     d..Md..<d.5d..Od
    3dd8:	00 92 27 64 11 91 37 64 11 3a 64 10 37 64 11 3a     ..'d..7d.:d.7d.:
    3de8:	64 11 37 64 11 90 45 64 00 92 29 64 10 91 35 64     d.7d..Ed..)d..5d
    3df8:	11 39 64 11 35 64 10 90 4f 64 00 91 39 64 11 35     .9d.5d..Od..9d.5
    3e08:	64 11 90 4d 64 00 92 2e 64 11 91 35 64 10 3a 64     d..Md...d..5d.:d
    3e18:	11 35 64 11 3a 64 10 35 64 11 90 4a 64 00 92 2b     .5d.:d.5d..Jd..+
    3e28:	64 11 91 32 64 11 3a 64 10 32 64 11 3a 64 11 32     d..2d.:d.2d.:d.2
    3e38:	64 10 90 4a 64 00 92 30 64 11 91 37 64 11 3a 64     d..Jd..0d..7d.:d
    3e48:	11 37 64 10 3a 64 11 37 64 11 90 4a 64 00 92 29     .7d.:d.7d..Jd..)
    3e58:	64 10 91 30 64 11 39 64 11 30 64 11 90 48 64 00     d..0d.9d.0d..Hd.
    3e68:	91 39 64 10 30 64 11 90 46 64 00 92 2e 64 11 91     .9d.0d..Fd...d..
    3e78:	35 64 10 3a 64 11 35 64 11 3a 64 11 35 64 10 92     5d.:d.5d.:d.5d..
    3e88:	2e 64 11 91 35 64 11 3a 64 11 35 64 10 90 41 64     .d..5d.:d.5d..Ad
    3e98:	00 91 3a 64 11 35 64 11 90 46 64 00 92 2e 64 10     ..:d.5d..Fd...d.
    3ea8:	91 35 64 11 3a 64 11 3e 64 11 90 41 64 00 91 3a     .5d.:d.>d..Ad..:
    3eb8:	64 10 35 64 11 90 4a 64 00 92 2b 64 11 91 32 64     d.5d..Jd..+d..2d
    3ec8:	10 37 64 11 3a 64 11 90 46 64 00 91 37 64 11 32     .7d.:d..Fd..7d.2
    3ed8:	64 10 90 4d 64 00 92 30 64 11 91 37 64 11 3a 64     d..Md..0d..7d.:d
    3ee8:	10 41 64 11 3a 64 11 37 64 11 92 29 64 10 91 35     .Ad.:d.7d..)d..5
    3ef8:	64 11 3c 64 11 3f 64 10 90 41 64 00 91 3c 64 11     d.<d.?d..Ad..<d.
    3f08:	35 64 11 90 46 64 00 92 2e 64 11 91 35 64 10 3a     5d..Fd...d..5d.:
    3f18:	64 11 3e 64 11 90 41 64 00 91 3a 64 11 35 64 10     d.>d..Ad..:d.5d.
    3f28:	90 4a 64 00 92 2b 64 11 91 32 64 11 37 64 10 3a     .Jd..+d..2d.7d.:
    3f38:	64 11 90 46 64 00 91 37 64 11 32 64 11 90 4d 64     d..Fd..7d.2d..Md
    3f48:	00 92 30 64 10 91 37 64 11 3a 64 11 41 64 10 3a     ..0d..7d.:d.Ad.:
    3f58:	64 11 37 64 11 92 29 64 11 91 35 64 10 3c 64 11     d.7d..)d..5d.<d.
    3f68:	3f 64 11 90 4d 64 00 91 3c 64 10 35 64 11 90 4f     ?d..Md..<d.5d..O
    3f78:	64 00 92 27 64 11 91 37 64 11 3a 64 10 37 64 11     d..'d..7d.:d.7d.
    3f88:	3a 64 11 37 64 10 90 45 64 00 92 29 64 11 91 35     :d.7d..Ed..)d..5
    3f98:	64 11 39 64 11 35 64 10 90 4f 64 00 91 39 64 11     d.9d.5d..Od..9d.
    3fa8:	35 64 11 90 4d 64 00 92 2e 64 10 91 35 64 11 3a     5d..Md...d..5d.:
    3fb8:	64 11 35 64 11 3a 64 10 35 64 11 90 4a 64 00 92     d.5d.:d.5d..Jd..
    3fc8:	2b 64 11 91 32 64 11 3a 64 10 32 64 11 3a 64 11     +d..2d.:d.2d.:d.
    3fd8:	32 64 10 90 4a 64 00 92 30 64 11 91 37 64 11 3a     2d..Jd..0d..7d.:
    3fe8:	64 11 37 64 10 3a 64 11 37 64 11 90 4a 64 00 92     d.7d.:d.7d..Jd..
    3ff8:	29 64 10 91 30 64 11 39 64 11 30 64 11 90 48 64     )d..0d.9d.0d..Hd
    4008:	00 91 39 64 10 30 64 11 90 46 64 00 92 2e 64 11     ..9d.0d..Fd...d.
    4018:	91 35 64 10 3a 64 11 35 64 11 3a 64 11 35 64 10     .5d.:d.5d.:d.5d.
    4028:	92 2e 64 11 91 35 64 11 3a 64 10 35 64 11 90 46     ..d..5d.:d.5d..F
    4038:	64 00 91 3a 64 11 35 64 11 90 46 64 00 92 27 64     d..:d.5d..Fd..'d
    4048:	10 91 37 64 11 3a 64 11 37 64 10 3a 64 11 37 64     ..7d.:d.7d.:d.7d
    4058:	11 90 45 64 00 92 27 64 11 91 37 64 10 3a 64 11     ..Ed..'d..7d.:d.
    4068:	37 64 11 90 48 64 00 91 3a 64 11 37 64 10 90 46     7d..Hd..:d.7d..F
    4078:	64 00 92 26 64 11 91 35 64 11 3a 64 10 35 64 11     d..&d..5d.:d.5d.
    4088:	3a 64 11 35 64 11 90 41 64 00 92 26 64 10 91 35     :d.5d..Ad..&d..5
    4098:	64 11 3a 64 11 35 64 10 3a 64 11 35 64 11 90 3f     d.:d.5d.:d.5d..?
    40a8:	64 00 92 30 64 11 91 37 64 10 3a 64 11 37 64 11     d..0d..7d.:d.7d.
    40b8:	90 3e 64 00 91 3a 64 10 37 64 11 90 3f 64 00 92     .>d..:d.7d..?d..
    40c8:	29 64 11 91 30 64 11 39 64 10 30 64 11 90 41 64     )d..0d.9d.0d..Ad
    40d8:	00 91 39 64 11 30 64 10 90 3e 64 00 92 2e 64 11     ..9d.0d..>d...d.
    40e8:	91 35 64 11 3a 64 11 35 64 10 3a 64 11 35 64 11     .5d.:d.5d.:d.5d.
    40f8:	92 2c 64 11 91 35 64 10 38 64 11 35 64 11 90 46     .,d..5d.8d.5d..F
    4108:	64 00 91 38 64 10 35 64 11 90 46 64 00 92 27 64     d..8d.5d..Fd..'d
    4118:	11 91 37 64 11 3a 64 10 37 64 11 3a 64 11 37 64     ..7d.:d.7d.:d.7d
    4128:	10 90 45 64 00 92 27 64 11 91 37 64 11 3a 64 11     ..Ed..'d..7d.:d.
    4138:	37 64 10 90 48 64 00 91 3a 64 11 37 64 11 90 46     7d..Hd..:d.7d..F
    4148:	64 00 92 26 64 10 91 35 64 11 3a 64 11 35 64 11     d..&d..5d.:d.5d.
    4158:	90 41 64 00 91 3a 64 10 35 64 11 90 4d 64 00 92     .Ad..:d.5d..Md..
    4168:	26 64 11 91 35 64 10 3a 64 11 35 64 11 3a 64 11     &d..5d.:d.5d.:d.
    4178:	35 64 10 90 4b 64 00 92 30 64 11 91 37 64 11 3a     5d..Kd..0d..7d.:
    4188:	64 10 37 64 11 3a 64 11 37 64 11 90 4a 64 00 92     d.7d.:d.7d..Jd..
    4198:	29 64 10 91 30 64 11 39 64 11 30 64 11 90 48 64     )d..0d.9d.0d..Hd
    41a8:	00 91 39 64 10 30 64 11 90 46 64 00 92 2e 64 11     ..9d.0d..Fd...d.
    41b8:	91 35 64 10 3a 64 11 35 64 11 3a 64 11 35 64 10     .5d.:d.5d.:d.5d.
    41c8:	ff 06 01 45 00 ff 2f 00                             ...E../.

000041d0 <Level6Song>:
    41d0:	00 c0 03 00 c1 04 00 c2 05 00 c3 00 00 b0 07 64     ...............d
    41e0:	00 07 78 00 07 64 00 90 24 64 00 b1 07 64 00 b2     ..x..d..$d...d..
    41f0:	07 64 00 92 30 64 00 b3 07 6e 06 ff 06 01 53 06     .d..0d...n....S.
    4200:	91 3f 64 00 43 64 0d 90 24 64 00 92 30 64 0d 91     .?d.Cd..$d..0d..
    4210:	3f 64 00 43 64 06 90 24 64 00 92 30 64 0d 91 43     ?d.Cd..$d..0d..C
    4220:	64 00 3f 64 06 90 24 64 00 92 30 64 0d 91 3f 64     d.?d..$d..0d..?d
    4230:	00 43 64 0c 90 24 64 00 92 30 64 0d 90 1f 64 00     .Cd..$d..0d...d.
    4240:	92 2b 64 0d 91 3a 64 00 3e 64 0d 90 1f 64 00 92     .+d..:d.>d...d..
    4250:	2b 64 0c 91 3a 64 00 3e 64 07 90 20 64 00 92 2c     +d..:d.>d.. d..,
    4260:	64 0c 91 3c 64 00 3f 64 07 90 20 64 00 92 2c 64     d..<d.?d.. d..,d
    4270:	0c 91 3f 64 00 3c 64 0d 90 20 64 00 92 2c 64 0d     ..?d.<d.. d..,d.
    4280:	90 27 64 00 92 33 64 0d 91 3f 64 00 43 64 0c 90     .'d..3d..?d.Cd..
    4290:	24 64 00 92 30 64 0d 91 3f 64 00 43 64 06 90 24     $d..0d..?d.Cd..$
    42a0:	64 00 92 30 64 0d 91 43 64 00 3f 64 06 90 24 64     d..0d..Cd.?d..$d
    42b0:	00 92 30 64 0d 91 3f 64 00 43 64 0d 90 24 64 00     ..0d..?d.Cd..$d.
    42c0:	92 30 64 0c 90 1f 64 00 92 2b 64 0d 91 3a 64 00     .0d...d..+d..:d.
    42d0:	3e 64 0d 90 1f 64 00 92 2b 64 0d 91 3a 64 00 3e     >d...d..+d..:d.>
    42e0:	64 06 90 20 64 00 92 2c 64 0d 91 3c 64 00 3f 64     d.. d..,d..<d.?d
    42f0:	06 90 20 64 00 92 2c 64 0d 91 3f 64 00 3c 64 0c     .. d..,d..?d.<d.
    4300:	90 20 64 00 92 2c 64 0d 90 24 64 00 92 30 64 00     . d..,d..$d..0d.
    4310:	93 06 64 0d 91 3f 64 00 43 64 0d 90 24 64 00 92     ..d..?d.Cd..$d..
    4320:	30 64 00 93 06 64 0c 91 3f 64 00 43 64 07 90 24     0d...d..?d.Cd..$
    4330:	64 00 92 30 64 06 93 06 64 06 91 43 64 00 3f 64     d..0d...d..Cd.?d
    4340:	07 90 24 64 00 92 30 64 0c 91 3f 64 00 43 64 00     ..$d..0d..?d.Cd.
    4350:	93 06 64 0d 90 24 64 00 92 30 64 0d 90 1f 64 00     ..d..$d..0d...d.
    4360:	92 2b 64 00 93 06 64 0c 91 3a 64 00 3e 64 0d 90     .+d...d..:d.>d..
    4370:	1f 64 00 92 2b 64 00 93 06 64 0d 91 3a 64 00 3e     .d..+d...d..:d.>
    4380:	64 06 90 20 64 00 92 2c 64 07 93 06 64 06 91 3c     d.. d..,d...d..<
    4390:	64 00 3f 64 06 90 20 64 00 92 2c 64 0d 91 3f 64     d.?d.. d..,d..?d
    43a0:	00 3c 64 00 93 06 64 0d 90 20 64 00 92 2c 64 0c     .<d...d.. d..,d.
    43b0:	90 27 64 00 92 33 64 00 93 06 64 0d 91 3f 64 00     .'d..3d...d..?d.
    43c0:	43 64 0d 90 24 64 00 92 30 64 00 93 06 64 0d 91     Cd..$d..0d...d..
    43d0:	3f 64 00 43 64 06 90 24 64 00 92 30 64 06 93 06     ?d.Cd..$d..0d...
    43e0:	64 07 91 43 64 00 3f 64 06 90 24 64 00 92 30 64     d..Cd.?d..$d..0d
    43f0:	0d 91 3f 64 00 43 64 00 93 06 64 0c 90 24 64 00     ..?d.Cd...d..$d.
    4400:	92 30 64 0d 90 4f 7f 00 92 4f 7f 0d 90 4b 7f 00     .0d..O...O...K..
    4410:	91 3a 64 00 3e 64 00 92 4b 7f 19 90 4d 7f 00 91     .:d.>d..K...M...
    4420:	3a 64 00 3e 64 00 92 4d 7f 0d 90 48 7f 00 92 48     :d.>d..M...H...H
    4430:	7f 06 91 3c 64 00 3f 64 13 3f 64 00 3c 64 1a 90     ...<d.?d.?d.<d..
    4440:	48 64 00 92 30 64 06 90 48 25 06 4b 64 00 91 3f     Hd..0d..H%.Kd..?
    4450:	64 00 43 64 07 90 48 24 06 48 64 00 92 30 64 06     d.Cd..H$.Hd..0d.
    4460:	90 48 24 07 52 64 00 91 3f 64 00 43 64 06 90 52     .H$.Rd..?d.Cd..R
    4470:	24 00 92 30 64 07 90 4f 64 06 4f 24 00 91 43 64     $..0d..Od.O$..Cd
    4480:	00 3f 64 06 90 48 64 00 92 30 64 07 90 48 24 06     .?d..Hd..0d..H$.
    4490:	54 64 00 91 3f 64 00 43 64 06 90 54 24 07 52 64     Td..?d.Cd..T$.Rd
    44a0:	00 92 30 64 06 90 52 24 06 48 64 00 92 2b 64 07     ..0d..R$.Hd..+d.
    44b0:	90 48 24 06 59 64 00 91 3a 64 00 3e 64 06 90 59     .H$.Yd..:d.>d..Y
    44c0:	24 07 5b 64 00 92 2b 64 06 90 5b 24 06 91 3a 64     $.[d..+d..[$..:d
    44d0:	00 3e 64 07 92 2c 64 0d 91 3c 64 00 3f 64 06 92     .>d..,d..<d.?d..
    44e0:	2c 64 0d 91 3f 64 00 3c 64 0c 92 2c 64 0d 90 48     ,d..?d.<d..,d..H
    44f0:	64 00 92 33 64 06 90 48 25 07 4b 64 00 91 3f 64     d..3d..H%.Kd..?d
    4500:	00 43 64 06 90 48 24 06 48 64 00 92 30 64 07 90     .Cd..H$.Hd..0d..
    4510:	48 24 06 52 64 00 91 3f 64 00 43 64 06 90 52 24     H$.Rd..?d.Cd..R$
    4520:	00 92 30 64 07 90 4f 64 06 4f 24 00 91 43 64 00     ..0d..Od.O$..Cd.
    4530:	3f 64 07 90 48 64 00 92 30 64 06 90 48 24 06 54     ?d..Hd..0d..H$.T
    4540:	64 00 91 3f 64 00 43 64 07 90 54 24 06 52 64 00     d..?d.Cd..T$.Rd.
    4550:	92 30 64 06 90 52 24 07 48 64 00 92 2b 64 06 90     .0d..R$.Hd..+d..
    4560:	48 24 06 57 64 00 91 3a 64 00 3e 64 07 90 57 24     H$.Wd..:d.>d..W$
    4570:	06 56 64 00 92 2b 64 06 90 56 24 07 91 3a 64 00     .Vd..+d..V$..:d.
    4580:	3e 64 06 92 2c 64 0d 91 3c 64 00 3f 64 06 92 2c     >d..,d..<d.?d..,
    4590:	64 0d 91 3f 64 00 3c 64 0d 92 2c 64 0c 90 48 64     d..?d.<d..,d..Hd
    45a0:	00 92 30 64 00 93 06 64 07 90 48 25 06 4b 64 00     ..0d...d..H%.Kd.
    45b0:	91 3f 64 00 43 64 06 90 48 24 07 48 64 00 92 30     .?d.Cd..H$.Hd..0
    45c0:	64 00 93 06 64 06 90 48 24 06 52 64 00 91 3f 64     d...d..H$.Rd..?d
    45d0:	00 43 64 07 90 52 24 00 92 30 64 06 90 4f 64 00     .Cd..R$..0d..Od.
    45e0:	93 06 64 06 90 4f 24 00 91 43 64 00 3f 64 07 90     ..d..O$..Cd.?d..
    45f0:	48 64 00 92 30 64 06 90 48 24 07 54 64 00 91 3f     Hd..0d..H$.Td..?
    4600:	64 00 43 64 00 93 06 64 06 90 54 24 06 52 64 00     d.Cd...d..T$.Rd.
    4610:	92 30 64 07 90 52 24 06 48 64 00 92 2b 64 00 93     .0d..R$.Hd..+d..
    4620:	06 64 06 90 48 24 07 59 64 00 91 3a 64 00 3e 64     .d..H$.Yd..:d.>d
    4630:	06 90 59 24 06 5b 64 00 92 2b 64 00 93 06 64 07     ..Y$.[d..+d...d.
    4640:	90 5b 24 06 91 3a 64 00 3e 64 06 92 2c 64 07 93     .[$..:d.>d..,d..
    4650:	06 64 06 91 3c 64 00 3f 64 06 92 2c 64 0d 91 3f     .d..<d.?d..,d..?
    4660:	64 00 3c 64 00 93 06 64 0d 92 2c 64 0d 90 48 64     d.<d...d..,d..Hd
    4670:	00 92 33 64 00 93 06 64 06 90 48 25 06 4b 64 00     ..3d...d..H%.Kd.
    4680:	91 3f 64 00 43 64 07 90 48 24 06 48 64 00 92 30     .?d.Cd..H$.Hd..0
    4690:	64 00 93 06 64 06 90 48 24 07 52 64 00 91 3f 64     d...d..H$.Rd..?d
    46a0:	00 43 64 06 90 52 24 00 92 30 64 06 90 4f 64 00     .Cd..R$..0d..Od.
    46b0:	93 06 64 07 90 4f 24 00 91 43 64 00 3f 64 06 90     ..d..O$..Cd.?d..
    46c0:	48 64 00 92 30 64 06 90 48 24 07 54 64 00 91 3f     Hd..0d..H$.Td..?
    46d0:	64 00 43 64 00 93 06 64 06 90 54 24 07 92 30 64     d.Cd...d..T$..0d
    46e0:	0c 90 4f 7f 00 91 4f 7f 00 92 4f 7f 0d 90 4b 7f     ..O...O...O...K.
    46f0:	00 91 4b 7f 00 92 4b 7f 19 90 4d 7f 00 91 4d 7f     ..K...K...M...M.
    4700:	00 92 4d 7f 0d 90 48 7f 00 91 48 7f 00 92 48 7f     ..M...H...H...H.
    4710:	33 90 48 64 00 3c 64 00 92 30 64 00 93 06 64 0d     3.Hd.<d..0d...d.
    4720:	91 3f 64 00 43 64 06 90 3a 64 00 46 64 06 3c 64     .?d.Cd..:d.Fd.<d
    4730:	00 48 64 00 92 30 64 00 93 06 64 0d 91 3f 64 00     .Hd..0d...d..?d.
    4740:	43 64 06 90 3a 64 00 46 64 00 92 30 64 07 90 3c     Cd..:d.Fd..0d..<
    4750:	64 00 48 64 00 93 06 64 06 90 3a 64 00 46 64 00     d.Hd...d..:d.Fd.
    4760:	91 43 64 00 3f 64 06 90 3c 64 00 48 64 00 92 30     .Cd.?d..<d.Hd..0
    4770:	64 0d 91 3f 64 00 43 64 00 93 06 64 0d 92 30 64     d..?d.Cd...d..0d
    4780:	0d 2b 64 00 93 06 64 0c 91 3a 64 00 3e 64 0d 92     .+d...d..:d.>d..
    4790:	2b 64 00 93 06 64 0d 91 3a 64 00 3e 64 06 92 2c     +d...d..:d.>d..,
    47a0:	64 06 90 48 64 00 93 06 64 07 90 3c 64 00 91 3c     d..Hd...d..<d..<
    47b0:	64 00 3f 64 06 90 54 64 00 92 2c 64 06 90 48 64     d.?d..Td..,d..Hd
    47c0:	07 3c 64 00 91 3f 64 00 3c 64 00 93 06 64 0c 92     .<d..?d.<d...d..
    47d0:	2c 64 0d 33 64 00 93 06 64 0d 91 3f 64 00 43 64     ,d.3d...d..?d.Cd
    47e0:	0d 92 30 64 00 93 06 64 0c 91 3f 64 00 43 64 07     ..0d...d..?d.Cd.
    47f0:	92 30 64 06 90 4a 64 00 93 06 64 06 91 43 64 00     .0d..Jd...d..Cd.
    4800:	3f 64 07 90 4b 64 00 92 30 64 0c 91 3f 64 00 43     ?d..Kd..0d..?d.C
    4810:	64 00 93 06 64 0d 92 30 64 0d 2b 64 00 93 06 64     d...d..0d.+d...d
    4820:	0d 91 3a 64 00 3e 64 0c 92 2b 64 00 93 06 64 0d     ..:d.>d..+d...d.
    4830:	91 3a 64 00 3e 64 06 92 2c 64 07 90 3f 64 00 93     .:d.>d..,d..?d..
    4840:	06 64 06 91 3c 64 00 3f 64 06 90 3e 64 00 92 2c     .d..<d.?d..>d..,
    4850:	64 0d 91 3f 64 00 3c 64 00 93 06 64 0d 92 2c 64     d..?d.<d...d..,d
    4860:	0c 90 48 64 00 3c 64 00 92 30 64 00 93 06 64 0d     ..Hd.<d..0d...d.
    4870:	91 3f 64 00 43 64 07 90 3a 64 00 46 64 06 3c 64     .?d.Cd..:d.Fd.<d
    4880:	00 48 64 00 92 30 64 00 93 06 64 0d 91 3f 64 00     .Hd..0d...d..?d.
    4890:	43 64 06 90 3a 64 00 46 64 00 92 30 64 06 90 3c     Cd..:d.Fd..0d..<
    48a0:	64 00 48 64 00 93 06 64 07 90 3a 64 00 46 64 00     d.Hd...d..:d.Fd.
    48b0:	91 43 64 00 3f 64 06 90 3c 64 00 48 64 00 92 30     .Cd.?d..<d.Hd..0
    48c0:	64 0d 91 3f 64 00 43 64 00 93 06 64 0c 92 30 64     d..?d.Cd...d..0d
    48d0:	0d 2b 64 00 93 06 64 0d 91 3a 64 00 3e 64 0d 92     .+d...d..:d.>d..
    48e0:	2b 64 00 93 06 64 0c 91 3a 64 00 3e 64 07 92 2c     +d...d..:d.>d..,
    48f0:	64 06 90 48 64 00 93 06 64 06 90 3c 64 00 91 3c     d..Hd...d..<d..<
    4900:	64 00 3f 64 07 90 54 64 00 92 2c 64 06 90 48 64     d.?d..Td..,d..Hd
    4910:	06 3c 64 00 91 3f 64 00 3c 64 00 93 06 64 0d 92     .<d..?d.<d...d..
    4920:	2c 64 0d 33 64 00 93 06 64 0d 91 3f 64 00 43 64     ,d.3d...d..?d.Cd
    4930:	0c 92 30 64 00 93 06 64 0d 91 3f 64 00 43 64 06     ..0d...d..?d.Cd.
    4940:	92 30 64 07 90 56 64 00 93 06 64 06 91 43 64 00     .0d..Vd...d..Cd.
    4950:	3f 64 06 90 57 64 00 92 30 64 0d 91 3f 64 00 43     ?d..Wd..0d..?d.C
    4960:	64 00 93 06 64 0d 92 30 64 0c 2b 64 00 93 06 64     d...d..0d.+d...d
    4970:	0d 91 3a 64 00 3e 64 0d 92 2b 64 00 93 06 64 0d     ..:d.>d..+d...d.
    4980:	91 3a 64 00 3e 64 06 92 2c 64 06 90 44 64 00 93     .:d.>d..,d..Dd..
    4990:	06 64 07 91 3c 64 00 3f 64 06 90 43 64 00 92 2c     .d..<d.?d..Cd..,
    49a0:	64 0d 91 3f 64 00 3c 64 00 93 06 64 0c 92 2c 64     d..?d.<d...d..,d
    49b0:	0d 90 4a 64 00 92 32 64 00 93 06 64 06 90 4a 25     ..Jd..2d...d..J%
    49c0:	07 4d 64 00 91 41 64 00 45 64 06 90 4a 24 07 4a     .Md..Ad.Ed..J$.J
    49d0:	64 00 92 32 64 00 93 06 64 06 90 4a 24 06 54 64     d..2d...d..J$.Td
    49e0:	00 91 41 64 00 45 64 07 90 54 24 00 92 32 64 06     ..Ad.Ed..T$..2d.
    49f0:	90 51 64 00 93 06 64 06 90 51 24 00 91 45 64 00     .Qd...d..Q$..Ed.
    4a00:	41 64 07 90 4a 64 00 92 32 64 06 90 4a 24 06 56     Ad..Jd..2d..J$.V
    4a10:	64 00 91 41 64 00 45 64 00 93 06 64 07 90 56 24     d..Ad.Ed...d..V$
    4a20:	06 54 64 00 92 32 64 06 90 54 24 07 4a 64 00 92     .Td..2d..T$.Jd..
    4a30:	2d 64 00 93 06 64 06 90 4a 24 06 5b 64 00 91 3c     -d...d..J$.[d..<
    4a40:	64 00 40 64 07 90 5b 24 06 5d 64 00 92 2d 64 00     d.@d..[$.]d..-d.
    4a50:	93 06 64 07 90 5d 24 06 91 3c 64 00 40 64 06 92     ..d..]$..<d.@d..
    4a60:	2e 64 07 93 06 64 06 91 3e 64 00 41 64 06 92 2e     .d...d..>d.Ad...
    4a70:	64 0d 91 41 64 00 3e 64 00 93 06 64 0d 92 2e 64     d..Ad.>d...d...d
    4a80:	0c 90 4a 64 00 92 35 64 00 93 06 64 07 90 4a 25     ..Jd..5d...d..J%
    4a90:	06 4d 64 00 91 41 64 00 45 64 06 90 4a 24 07 4a     .Md..Ad.Ed..J$.J
    4aa0:	64 00 92 32 64 00 93 06 64 06 90 4a 24 07 54 64     d..2d...d..J$.Td
    4ab0:	00 91 41 64 00 45 64 06 90 54 24 00 92 32 64 06     ..Ad.Ed..T$..2d.
    4ac0:	90 51 64 00 93 06 64 07 90 51 24 00 91 45 64 00     .Qd...d..Q$..Ed.
    4ad0:	41 64 06 90 4a 64 00 92 32 64 06 90 4a 24 07 56     Ad..Jd..2d..J$.V
    4ae0:	64 00 91 41 64 00 45 64 00 93 06 64 06 90 56 24     d..Ad.Ed...d..V$
    4af0:	06 54 64 00 92 32 64 07 90 54 24 06 4a 64 00 92     .Td..2d..T$.Jd..
    4b00:	2d 64 00 93 06 64 06 90 4a 24 07 59 64 00 91 3c     -d...d..J$.Yd..<
    4b10:	64 00 40 64 06 90 59 24 06 58 64 00 92 2d 64 00     d.@d..Y$.Xd..-d.
    4b20:	93 06 64 07 90 58 24 06 91 3c 64 00 40 64 07 92     ..d..X$..<d.@d..
    4b30:	2e 64 06 93 06 64 06 91 3e 64 00 41 64 07 92 2e     .d...d..>d.Ad...
    4b40:	64 0c 91 41 64 00 3e 64 00 93 06 64 0d 92 2e 64     d..Ad.>d...d...d
    4b50:	0d 90 4a 64 00 93 06 64 06 90 4a 25 06 4d 64 00     ..Jd...d..J%.Md.
    4b60:	91 41 64 00 45 64 07 90 4a 24 06 4a 64 00 93 06     .Ad.Ed..J$.Jd...
    4b70:	64 06 90 4a 24 07 54 64 00 91 41 64 00 45 64 06     d..J$.Td..Ad.Ed.
    4b80:	90 54 24 07 51 64 00 93 06 64 06 90 51 24 00 91     .T$.Qd...d..Q$..
    4b90:	45 64 00 41 64 06 90 4a 64 07 4a 24 06 56 64 00     Ed.Ad..Jd.J$.Vd.
    4ba0:	91 41 64 00 45 64 00 93 06 64 06 90 56 24 07 54     .Ad.Ed...d..V$.T
    4bb0:	64 06 54 24 06 4a 64 00 93 06 64 07 90 4a 24 06     d.T$.Jd...d..J$.
    4bc0:	5b 64 00 91 3c 64 00 40 64 06 90 5b 24 07 5d 64     [d..<d.@d..[$.]d
    4bd0:	00 93 06 64 06 90 5d 24 06 91 3c 64 00 40 64 0d     ...d..]$..<d.@d.
    4be0:	93 06 64 07 91 3e 64 00 41 64 13 41 64 00 3e 64     ..d..>d.Ad.Ad.>d
    4bf0:	00 93 06 64 19 90 4a 64 00 93 06 64 06 90 4a 25     ...d..Jd...d..J%
    4c00:	07 4d 64 00 91 41 64 00 45 64 06 90 4a 24 06 4a     .Md..Ad.Ed..J$.J
    4c10:	64 00 93 06 64 07 90 4a 24 06 54 64 00 91 41 64     d...d..J$.Td..Ad
    4c20:	00 45 64 06 90 54 24 07 51 64 00 93 06 64 06 90     .Ed..T$.Qd...d..
    4c30:	51 24 00 91 45 64 00 41 64 07 90 4a 64 06 4a 24     Q$..Ed.Ad..Jd.J$
    4c40:	06 56 64 00 91 41 64 00 45 64 00 93 06 64 07 90     .Vd..Ad.Ed...d..
    4c50:	56 24 06 54 64 06 54 24 07 4a 64 00 93 06 64 06     V$.Td.T$.Jd...d.
    4c60:	90 4a 24 06 59 64 00 93 06 5c 07 90 59 24 06 58     .J$.Yd...\..Y$.X
    4c70:	64 00 93 06 64 06 90 58 24 07 93 06 5c 0c 06 64     d...d..X$...\..d
    4c80:	07 06 5c 06 06 64 07 06 5b 06 06 69 06 06 60 07     ..\..d..[..i..`.
    4c90:	06 6a 06 06 64 00 ff 06 01 45 06 ff 2f 00           .j..d....E../.

00004c9e <Level7Song>:
    4c9e:	00 c0 42 00 c1 43 00 c2 44 00 b0 07 7f 00 b2 07     ..B..C..D.......
    4cae:	7f 00 b1 07 7f 00 ff 06 01 53 01 92 37 5a 00 91     .........S..7Z..
    4cbe:	43 7f 0a 90 46 7f 0a 91 4a 7f 0a 90 4b 7f 00 b0     C...F...J...K...
    4cce:	0b 7f 0a 91 43 7f 0a 90 46 7f 0a 91 4a 7f 0a 90     ....C...F...J...
    4cde:	4b 7f 0a 92 3a 5a 00 91 43 7f 0a 90 46 7f 0a 91     K...:Z..C...F...
    4cee:	4a 7f 0a 90 4b 7f 0a 92 3e 5a 00 91 43 7f 0a 90     J...K...>Z..C...
    4cfe:	46 7f 0a 91 4a 7f 0a 90 4b 7f 0a 92 3d 5a 00 91     F...J...K...=Z..
    4d0e:	42 7f 0a 90 45 7f 0a 91 4a 7f 0a 90 4b 7f 0a 92     B...E...J...K...
    4d1e:	36 5a 00 91 42 7f 0a 90 45 7f 0a 91 4a 7f 0a 90     6Z..B...E...J...
    4d2e:	4b 7f 0a 91 42 7f 0a 90 45 7f 0a 91 4a 7f 0a 90     K...B...E...J...
    4d3e:	4b 7f 0a 91 42 7f 0a 90 45 7f 0a 91 4a 7f 0a 90     K...B...E...J...
    4d4e:	4b 7f 0a 92 35 5a 00 91 41 7f 0a 90 44 7f 0a 91     K...5Z..A...D...
    4d5e:	4a 7f 0a 90 4b 7f 0a 91 41 7f 0a 90 44 7f 0a 91     J...K...A...D...
    4d6e:	4a 7f 0a 90 4b 7f 0a 91 41 7f 0a 90 44 7f 0a 91     J...K...A...D...
    4d7e:	4a 7f 0a 90 4b 7f 00 92 38 5a 0a 91 41 7f 0a 90     J...K...8Z..A...
    4d8e:	44 7f 0a 92 3d 5a 00 91 4a 7f 0a 90 4b 7f 0a 92     D...=Z..J...K...
    4d9e:	3c 5a 00 91 40 7f 0a 90 43 7f 0a 91 4a 7f 0a 90     <Z..@...C...J...
    4dae:	4b 7f 0a 92 34 5a 00 91 40 7f 0a 90 43 7f 0a 91     K...4Z..@...C...
    4dbe:	4a 7f 0a 90 4b 7f 0a 91 40 7f 0a 90 43 7f 0a 91     J...K...@...C...
    4dce:	4a 7f 0a 90 4b 7f 0a 91 40 7f 0a 90 43 7f 0a 91     J...K...@...C...
    4dde:	4a 7f 0a 90 4b 7f 0a 92 33 5a 00 91 3f 7f 0a 90     J...K...3Z..?...
    4dee:	43 7f 00 92 32 5a 0a 33 5a 00 91 48 7f 0a 90 4a     C...2Z.3Z..H...J
    4dfe:	7f 0a 91 3f 7f 0a 90 43 7f 0a 91 48 7f 0a 90 4a     ...?...C...H...J
    4e0e:	7f 0a 92 37 5a 00 91 3f 7f 0a 90 43 7f 0a 91 48     ...7Z..?...C...H
    4e1e:	7f 0a 90 4a 7f 00 92 3f 5a 0a 91 3f 7f 0a 90 43     ...J...?Z..?...C
    4e2e:	7f 0a 92 3e 5a 00 91 48 7f 0a 90 4a 7f 0a 92 32     ...>Z..H...J...2
    4e3e:	5a 00 91 3e 7f 0a 90 43 7f 00 92 31 5a 0a 32 5a     Z..>...C...1Z.2Z
    4e4e:	00 91 48 7f 0a 90 4a 7f 0a 91 3e 7f 0a 90 43 7f     ..H...J...>...C.
    4e5e:	0a 91 48 7f 0a 90 4a 7f 0a 92 37 5a 00 91 3e 7f     ..H...J...7Z..>.
    4e6e:	0a 90 43 7f 0a 91 48 7f 0a 90 4a 7f 00 92 3e 5a     ..C...H...J...>Z
    4e7e:	0a 91 3e 7f 0a 90 43 7f 0a 92 3d 5a 00 91 48 7f     ..>...C...=Z..H.
    4e8e:	0a 90 4a 7f 0a 92 32 5a 00 91 3c 7f 0a 90 42 7f     ..J...2Z..<...B.
    4e9e:	00 92 36 5a 0a 39 5a 00 91 45 7f 0a 90 48 7f 00     ..6Z.9Z..E...H..
    4eae:	92 36 5a 0a 39 5a 00 91 42 7f 0a 90 45 7f 00 92     .6Z.9Z..B...E...
    4ebe:	3c 5a 0a 39 5a 00 91 48 7f 0a 90 4b 7f 00 92 3c     <Z.9Z..H...K...<
    4ece:	5a 0a 3f 5a 00 91 45 7f 0a 90 48 7f 00 92 3c 5a     Z.?Z..E...H...<Z
    4ede:	0a 3f 5a 00 91 4b 7f 0a 92 42 5a 0a 45 5a 0a 90     .?Z..K...BZ.EZ..
    4eee:	4e 7f 00 92 42 5a 0a 3f 5a 0a 3c 5a 0a 3f 5a 00     N...BZ.?Z.<Z.?Z.
    4efe:	91 51 7f 0a 92 3c 5a 0a 39 5a 0a 90 54 7f 00 92     .Q...<Z.9Z..T...
    4f0e:	36 5a 0a 37 5a 00 91 43 7f 00 ff 06 01 45 0a 90     6Z.7Z..C.....E..
    4f1e:	46 7f 0a 91 4a 7f 00 ff 2f 00                       F...J.../.

00004f28 <TableTiles>:
    4f28:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f38:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f48:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f58:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f68:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f78:	20 20 20 20 20 20 20 20 20 20 20 00 00 ff ff 00                .....
    4f88:	20 20 00 00 00 ff ff 00 20 20 ff ff 20 20 20 20       ......  ..    
    4f98:	20 20 ff ff 20 20 20 20 20 20 00 00 20 20 20 20       ..      ..    
    4fa8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4fb8:	20 20 20 20 20 20 20 20 00 ff ff 00 00 ff ff 00             ........
    4fc8:	00 ff ff 00 00 ff ff 00 20 20 20 20 20 20 20 20     ........        
    4fd8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4fe8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4ff8:	20 20 20 20 20 20 20 20 00 ff ff 00 00 20 20 20             .....   
    5008:	00 ff ff 00 00 00 20 20 20 20 20 20 ff ff 20 20     ......      ..  
    5018:	20 20 20 20 ff ff 20 20 20 20 20 20 00 00 20 20         ..      ..  
    5028:	20 20 00 00 20 20 20 20 20 20 ff ff 20 20 20 20       ..      ..    
    5038:	20 20 ff ff 20 20 20 20 20 20 00 00 20 20 20 20       ..      ..    
    5048:	20 20 00 00 20 20 20 20 20 20 ff ff 20 20 20 20       ..      ..    
    5058:	20 20 ff ff 20 20 20 20 20 20 00 00 20 20 20 20       ..      ..    
    5068:	20 20 20 20 00 00 20 20 20 20 20 20 ff ff 20 20         ..      ..  
    5078:	20 20 20 20 ff ff 20 20 20 20 20 20 00 00 20 20         ..      ..  
    5088:	20 20 20 20 00 00 20 20 20 20 20 20 ff ff 20 20         ..      ..  
    5098:	20 20 20 20 ff ff 20 20 20 20 20 20 00 00 20 20         ..      ..  
    50a8:	20 20 00 00 20 20 20 20 20 20 ff ff 20 20 20 20       ..      ..    
    50b8:	20 20 ff ff 20 20 20 20 20 20 00 00 00 ff ff 00       ..      ......
    50c8:	20 20 20 00 00 ff ff 00 20 20 20 20 20 20 20 20        .....        
    50d8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    50e8:	20 20 20 20 00 00 20 20 20 20 20 20 ff ff 20 20         ..      ..  
    50f8:	20 20 20 20 ff ff 20 20 00 ff ff 00 00 00 20 20         ..  ......  
    5108:	00 ff ff 00 00 20 20 20 20 20 20 20 20 20 20 20     .....           
    5118:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     

00005128 <Tiles>:
    5128:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5138:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5148:	00 ff 00 00 00 00 00 ff 00 ff 00 00 ff 00 00 ff     ................
    5158:	00 ff 00 00 ff 00 00 ff 00 ff ff ff ff ff ff ff     ................
    5168:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5178:	00 ff 00 00 00 00 ff ff 00 ff ff ff ff 00 00 ff     ................
    5188:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff ff ff ff     ................
    5198:	00 ff 00 00 00 00 00 ff 00 ff ff ff ff ff ff ff     ................
    51a8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    51b8:	00 ff 00 00 00 00 ff ff 00 ff ff ff ff 00 00 ff     ................
    51c8:	00 ff ff ff 00 00 ff ff 00 ff ff ff ff 00 00 ff     ................
    51d8:	00 ff 00 00 00 00 ff ff 00 ff ff ff ff ff ff ff     ................
    51e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    51f8:	00 ff 00 00 ff 00 00 ff 00 ff 00 00 ff 00 00 ff     ................
    5208:	00 ff 00 00 00 00 00 ff 00 ff ff ff ff 00 00 ff     ................
    5218:	00 ff ff ff ff 00 00 ff 00 ff ff ff ff ff ff ff     ................
    5228:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5238:	00 ff 00 00 00 00 00 ff 00 ff 00 00 ff ff ff ff     ................
    5248:	00 ff 00 00 00 00 ff ff 00 ff ff ff ff 00 00 ff     ................
    5258:	00 ff 00 00 00 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5268:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5278:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff ff ff ff     ................
    5288:	00 ff 00 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5298:	00 ff ff 00 00 00 ff ff 00 ff ff ff ff ff ff ff     ................
    52a8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    52b8:	00 ff 00 00 00 00 00 ff 00 ff 00 00 ff 00 00 ff     ................
    52c8:	00 ff ff ff 00 00 ff ff 00 ff ff 00 00 ff ff ff     ................
    52d8:	00 ff ff 00 00 ff ff ff 00 ff ff ff ff ff ff ff     ................
    52e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    52f8:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5308:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5318:	00 ff ff 00 00 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5328:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5338:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5348:	00 ff ff 00 00 00 00 ff 00 ff ff ff ff 00 00 ff     ................
    5358:	00 ff ff 00 00 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5368:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5378:	00 ff 00 ff 00 00 00 ff 00 ff 00 ff 00 ff 00 ff     ................
    5388:	00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff     ................
    5398:	00 ff 00 ff 00 00 00 ff 00 ff ff ff ff ff ff ff     ................
    53a8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    53b8:	00 ff ff ff ff 00 00 ff 00 ff ff ff ff 00 00 ff     ................
    53c8:	00 ff ff ff ff 00 00 ff 00 ff 00 00 ff 00 00 ff     ................
    53d8:	00 ff ff 00 00 00 ff ff 00 ff ff ff ff ff ff ff     ................
    53e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    53f8:	00 ff ff 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5408:	00 ff 00 00 ff 00 00 ff 00 ff 00 00 00 00 ff ff     ................
    5418:	00 ff ff 00 00 00 00 ff 00 ff ff ff ff ff ff ff     ................
    5428:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5438:	00 ff 00 00 ff 00 00 ff 00 ff 00 00 ff 00 00 ff     ................
    5448:	00 ff 00 00 00 00 ff ff 00 ff 00 00 ff 00 00 ff     ................
    5458:	00 ff 00 00 ff 00 00 ff 00 ff ff ff ff ff ff ff     ................
    5468:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5478:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    5488:	00 ff 0e 0e 0e 0e 0e ff 00 ff 0e 0e ff 0e 0e ff     ................
    5498:	00 ff 0e 0e ff 0e 0e ff 00 ff ff ff ff ff ff ff     ................
    54a8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    54b8:	00 ff 0e 0e 0e 0e ff ff 00 ff ff ff ff 0e 0e ff     ................
    54c8:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff ff ff ff     ................
    54d8:	00 ff 0e 0e 0e 0e 0e ff 00 ff ff ff ff ff ff ff     ................
    54e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    54f8:	00 ff 0e 0e 0e 0e ff ff 00 ff ff ff ff 0e 0e ff     ................
    5508:	00 ff ff ff 0e 0e ff ff 00 ff ff ff ff 0e 0e ff     ................
    5518:	00 ff 0e 0e 0e 0e ff ff 00 ff ff ff ff ff ff ff     ................
    5528:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5538:	00 ff 0e 0e ff 0e 0e ff 00 ff 0e 0e ff 0e 0e ff     ................
    5548:	00 ff 0e 0e 0e 0e 0e ff 00 ff ff ff ff 0e 0e ff     ................
    5558:	00 ff ff ff ff 0e 0e ff 00 ff ff ff ff ff ff ff     ................
    5568:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5578:	00 ff 0e 0e 0e 0e 0e ff 00 ff 0e 0e ff ff ff ff     ................
    5588:	00 ff 0e 0e 0e 0e ff ff 00 ff ff ff ff 0e 0e ff     ................
    5598:	00 ff 0e 0e 0e 0e ff ff 00 ff ff ff ff ff ff ff     ................
    55a8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    55b8:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff ff ff ff     ................
    55c8:	00 ff 0e 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    55d8:	00 ff ff 0e 0e 0e ff ff 00 ff ff ff ff ff ff ff     ................
    55e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    55f8:	00 ff 0e 0e 0e 0e 0e ff 00 ff 0e 0e ff 0e 0e ff     ................
    5608:	00 ff ff ff 0e 0e ff ff 00 ff ff 0e 0e ff ff ff     ................
    5618:	00 ff ff 0e 0e ff ff ff 00 ff ff ff ff ff ff ff     ................
    5628:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5638:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    5648:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    5658:	00 ff ff 0e 0e 0e ff ff 00 ff ff ff ff ff ff ff     ................
    5668:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5678:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    5688:	00 ff ff 0e 0e 0e 0e ff 00 ff ff ff ff 0e 0e ff     ................
    5698:	00 ff ff 0e 0e 0e ff ff 00 ff ff ff ff ff ff ff     ................
    56a8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    56b8:	00 ff 0e ff 0e 0e 0e ff 00 ff 0e ff 0e ff 0e ff     ................
    56c8:	00 ff 0e ff 0e ff 0e ff 00 ff 0e ff 0e ff 0e ff     ................
    56d8:	00 ff 0e ff 0e 0e 0e ff 00 ff ff ff ff ff ff ff     ................
    56e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    56f8:	00 ff ff ff ff 0e 0e ff 00 ff ff ff ff 0e 0e ff     ................
    5708:	00 ff ff ff ff 0e 0e ff 00 ff 0e 0e ff 0e 0e ff     ................
    5718:	00 ff ff 0e 0e 0e ff ff 00 ff ff ff ff ff ff ff     ................
    5728:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5738:	00 ff ff 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    5748:	00 ff 0e 0e ff 0e 0e ff 00 ff 0e 0e 0e 0e ff ff     ................
    5758:	00 ff ff 0e 0e 0e 0e ff 00 ff ff ff ff ff ff ff     ................
    5768:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    5778:	00 ff 0e 0e ff 0e 0e ff 00 ff 0e 0e ff 0e 0e ff     ................
    5788:	00 ff 0e 0e 0e 0e ff ff 00 ff 0e 0e ff 0e 0e ff     ................
    5798:	00 ff 0e 0e ff 0e 0e ff 00 ff ff ff ff ff ff ff     ................
    57a8:	00 00 ff 00 00 ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    57b8:	00 00 00 00 00 ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    57c8:	ff 00 00 00 ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    57d8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    57e8:	00 00 00 00 00 ff 00 20 ff ff ff 00 00 ff 00 20     ....... ....... 
    57f8:	ff 00 00 00 ff ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    5808:	ff 00 00 00 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5818:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5828:	ff 00 00 00 00 ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    5838:	ff 00 00 ff ff ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    5848:	ff 00 00 00 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5858:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5868:	00 00 ff ff ff ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    5878:	00 00 00 00 00 ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5888:	00 00 ff 00 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5898:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    58a8:	ff 00 00 00 00 ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    58b8:	ff 00 00 00 00 ff 00 20 ff ff ff 00 00 ff 00 20     ....... ....... 
    58c8:	00 00 00 00 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    58d8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    58e8:	ff 00 00 00 ff ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    58f8:	ff 00 00 00 00 ff 00 20 ff ff ff 00 00 ff 00 20     ....... ....... 
    5908:	ff 00 00 00 ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5918:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5928:	ff ff 00 00 ff ff 00 20 ff ff 00 00 ff ff 00 20     ....... ....... 
    5938:	ff 00 00 ff ff ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5948:	00 00 00 00 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5958:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5968:	ff 00 00 00 ff ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5978:	ff 00 00 00 ff ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5988:	ff 00 00 00 ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5998:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    59a8:	ff 00 00 00 ff ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    59b8:	00 00 00 00 ff ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    59c8:	ff 00 00 00 ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    59d8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    59e8:	00 00 00 ff 00 ff 00 20 00 ff 00 ff 00 ff 00 20     ....... ....... 
    59f8:	00 ff 00 ff 00 ff 00 20 00 ff 00 ff 00 ff 00 20     ....... ....... 
    5a08:	00 00 00 ff 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5a18:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5a28:	ff 00 00 00 ff ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5a38:	00 00 ff ff ff ff 00 20 00 00 ff ff ff ff 00 20     ....... ....... 
    5a48:	00 00 ff ff ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5a58:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5a68:	00 00 00 00 ff ff 00 20 ff 00 00 00 00 ff 00 20     ....... ....... 
    5a78:	00 00 ff 00 00 ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5a88:	ff 00 00 00 ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5a98:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5aa8:	00 00 ff 00 00 ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5ab8:	ff 00 00 00 00 ff 00 20 00 00 ff 00 00 ff 00 20     ....... ....... 
    5ac8:	00 00 ff 00 00 ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5ad8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5ae8:	0e 0e ff 0e 0e ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5af8:	0e 0e 0e 0e 0e ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5b08:	ff 0e 0e 0e ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5b18:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5b28:	0e 0e 0e 0e 0e ff 00 20 ff ff ff 0e 0e ff 00 20     ....... ....... 
    5b38:	ff 0e 0e 0e ff ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5b48:	ff 0e 0e 0e 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5b58:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5b68:	ff 0e 0e 0e 0e ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5b78:	ff 0e 0e ff ff ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5b88:	ff 0e 0e 0e 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5b98:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5ba8:	0e 0e ff ff ff ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5bb8:	0e 0e 0e 0e 0e ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5bc8:	0e 0e ff 0e 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5bd8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5be8:	ff 0e 0e 0e 0e ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5bf8:	ff 0e 0e 0e 0e ff 00 20 ff ff ff 0e 0e ff 00 20     ....... ....... 
    5c08:	0e 0e 0e 0e 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5c18:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5c28:	ff 0e 0e 0e ff ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5c38:	ff 0e 0e 0e 0e ff 00 20 ff ff ff 0e 0e ff 00 20     ....... ....... 
    5c48:	ff 0e 0e 0e ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5c58:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5c68:	ff ff 0e 0e ff ff 00 20 ff ff 0e 0e ff ff 00 20     ....... ....... 
    5c78:	ff 0e 0e ff ff ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5c88:	0e 0e 0e 0e 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5c98:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5ca8:	ff 0e 0e 0e ff ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5cb8:	ff 0e 0e 0e ff ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5cc8:	ff 0e 0e 0e ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5cd8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5ce8:	ff 0e 0e 0e ff ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5cf8:	0e 0e 0e 0e ff ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5d08:	ff 0e 0e 0e ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5d18:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5d28:	0e 0e 0e ff 0e ff 00 20 0e ff 0e ff 0e ff 00 20     ....... ....... 
    5d38:	0e ff 0e ff 0e ff 00 20 0e ff 0e ff 0e ff 00 20     ....... ....... 
    5d48:	0e 0e 0e ff 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5d58:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5d68:	ff 0e 0e 0e ff ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5d78:	0e 0e ff ff ff ff 00 20 0e 0e ff ff ff ff 00 20     ....... ....... 
    5d88:	0e 0e ff ff ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5d98:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5da8:	0e 0e 0e 0e ff ff 00 20 ff 0e 0e 0e 0e ff 00 20     ....... ....... 
    5db8:	0e 0e ff 0e 0e ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5dc8:	ff 0e 0e 0e ff ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5dd8:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
    5de8:	0e 0e ff 0e 0e ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5df8:	ff 0e 0e 0e 0e ff 00 20 0e 0e ff 0e 0e ff 00 20     ....... ....... 
    5e08:	0e 0e ff 0e 0e ff 00 20 ff ff ff ff ff 00 00 20     ....... ....... 
    5e18:	00 00 00 00 00 00 20 20 20 20 20 20 20 20 20 20     ......          
	...
    5e30:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5e40:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5e50:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5e60:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 20 20     ..............  
    5e70:	ff ff ff ff ff 00 00 20 ff ff ff ff ff ff 00 20     ....... ....... 
    5e80:	ff ff ff ff ff ff 00 20 ff ff ff ff ff ff 00 20     ....... ....... 
    5e90:	ff ff ff ff ff ff 00 20 ff ff ff ff ff ff 00 20     ....... ....... 
    5ea0:	ff ff ff ff ff ff 00 20 00 ff ff ff ff ff ff ff     ....... ........
    5eb0:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    5ec0:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    5ed0:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    5ee0:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff 00 20     ............... 
    5ef0:	ff ff ff ff ff ff 00 20 ff ff ff ff ff ff 00 20     ....... ....... 
    5f00:	ff ff ff ff ff ff 00 20 ff ff ff ff ff ff 00 20     ....... ....... 
    5f10:	ff ff ff ff ff ff 00 20 ff ff ff ff ff ff 00 20     ....... ....... 
    5f20:	ff ff ff ff ff ff 00 20 00 ff ff ff ff ff ff ff     ....... ........
    5f30:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    5f40:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    5f50:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    5f60:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff ff             ........
    5f70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5f80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5f90:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    5fa0:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff ff             ........
    5fb0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5fc0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5fd0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5fe0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    5ff0:	ff ff ff ff ff ff ff ff ff ff 00 ff ff ff ff ff     ................
    6000:	ff 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff ff     ................
    6010:	00 ff 00 ff 00 ff ff ff ff 00 00 00 ff ff ff ff     ................
    6020:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6030:	ff ff ff ff ff ff ff ff ff 00 00 00 ff ff ff ff     ................
    6040:	00 00 00 00 00 ff ff ff 00 00 00 00 00 ff ff ff     ................
    6050:	ff ff 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff     ................
    6060:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6070:	ff ff ff ff ff ff ff ff ff ff 0e ff ff ff ff ff     ................
    6080:	ff 0e 0e 0e ff ff ff ff 0e 0e 0e 0e 0e ff ff ff     ................
    6090:	ff 0e 0e 0e ff ff ff ff ff ff 0e ff ff ff ff ff     ................
    60a0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    60b0:	ff ff ff ff ff ff ff ff ff 0e ff 0e ff ff ff ff     ................
    60c0:	0e 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e 0e ff ff ff     ................
    60d0:	ff 0e 0e 0e ff ff ff ff ff ff 0e ff ff ff ff ff     ................
    60e0:	ff ff ff ff ff ff ff ff ff 00 00 00 ff ff ff ff     ................
    60f0:	00 ff 00 ff 00 ff ff ff 00 00 00 00 00 ff ff ff     ................
    6100:	ff 00 00 00 ff ff ff ff ff ff 00 ff ff ff ff ff     ................
    6110:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6120:	20 20 20 20 20 20 20 20 ff 00 00 00 ff ff ff ff             ........
    6130:	ff ff 00 ff ff ff ff ff 00 00 00 00 00 ff ff ff     ................
    6140:	00 00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff     ................
    6150:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6160:	20 20 20 20 20 20 20 20 ff ff 0e ff ff ff ff ff             ........
    6170:	ff 0e 0e 0e ff ff ff ff 0e 0e 0e 0e 0e ff ff ff     ................
    6180:	ff 0e 0e 0e ff ff ff ff ff ff 0e ff ff ff ff ff     ................
    6190:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    61a0:	20 20 20 20 20 20 20 20 ff ff 0e ff ff ff ff ff             ........
    61b0:	ff 0e 0e 0e ff ff ff ff 0e 0e 0e 0e 0e ff ff ff     ................
    61c0:	0e 0e 0e 0e 0e ff ff ff ff 0e ff 0e ff ff ff ff     ................
    61d0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    61e0:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff ff             ........
    61f0:	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff 00 00     ................
    6200:	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00     ................
    6210:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    6220:	ff 00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff     ................
    6230:	ff ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    6240:	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff     ................
    6250:	00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff ff     ................
    6260:	00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6288:	ff 00 00 00 00 00 ff 00 ff ff 00 00 00 ff ff 00     ................
    6298:	ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00     ................
    62a8:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    62b8:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    62c8:	ff 00 00 00 00 00 ff ff ff ff 00 00 00 ff ff ff     ................
    62d8:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff ff     ................
    62e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00     ................
    62f8:	ff ff ff ff ff 00 00 00 ff ff ff ff 00 00 00 00     ................
    6308:	ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00 00     ................
    6318:	ff ff ff ff ff 00 00 00 ff ff 00 00 00 ff 00 00     ................
    6328:	ff ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    6338:	00 00 ff ff ff ff ff ff 00 00 00 ff ff ff ff ff     ................
    6348:	00 00 00 ff ff ff ff ff 00 00 00 ff ff ff ff ff     ................
    6358:	00 00 ff ff ff ff ff ff 00 ff 00 00 00 ff ff ff     ................
    6368:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6388:	ff 00 00 00 00 00 ff 00 ff ff 00 00 00 ff ff 00     ................
    6398:	ff ff ff ff ff ff 00 00 ff ff ff ff ff 00 00 00     ................
    63a8:	00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00 ff     ................
    63b8:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    63c8:	ff 00 00 00 00 00 ff ff ff ff 00 00 00 ff ff ff     ................
    63d8:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff ff     ................
    63e8:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 0e     ................
    63f8:	ff ff ff ff ff ff 0e 0e ff ff ff ff ff 0e 0e 0e     ................
    6408:	ff ff ff ff 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e 0e     ................
    6418:	ff ff 0e 0e 0e 0e 0e 0e ff 0e 0e 0e 0e 0e 0e 0e     ................
    6428:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6438:	0e ff ff ff ff ff ff ff 0e 0e ff ff ff ff ff ff     ................
    6448:	0e 0e 0e ff ff ff ff ff 0e 0e 0e 0e ff ff ff ff     ................
    6458:	0e 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e 0e 0e ff ff     ................
    6468:	0e 0e 0e 0e 0e 0e 0e 0e ff 0e 0e 0e 0e 0e 0e 0e     ................
    6478:	ff ff 0e 0e 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e 0e     ................
    6488:	ff ff ff ff 0e 0e 0e 0e ff ff ff ff ff 0e 0e 0e     ................
    6498:	ff ff ff ff ff ff 0e 0e ff ff ff ff ff ff ff 0e     ................
    64a8:	0e 0e 0e 0e 0e 0e 0e ff 0e 0e 0e 0e 0e 0e ff ff     ................
    64b8:	0e 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e ff ff ff ff     ................
    64c8:	0e 0e 0e ff ff ff ff ff 0e 0e ff ff ff ff ff ff     ................
    64d8:	0e ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    64e8:	ff ff ff ff ff ff ff ff ff ff 0e 0e 0e 0e ff ff     ................
    64f8:	ff 0e 0e 0e 0e 0e 0e ff ff 0e 0e 0e 0e 0e 0e 0e     ................
    6508:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    6518:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    6528:	ff ff ff ff ff ff ff ff ff 0e 0e 0e 0e ff ff ff     ................
    6538:	0e 0e 0e 0e 0e 0e ff ff 0e 0e 0e 0e 0e 0e ff ff     ................
    6548:	0e 0e 0e 0e 0e 0e 0e ff 0e 0e 0e 0e 0e 0e 0e ff     ................
    6558:	0e 0e 0e 0e 0e 0e 0e ff 0e 0e 0e 0e 0e 0e 0e ff     ................
    6568:	ff 0e 0e 0e 0e 0e 0e 0e ff 0e 0e 0e 0e 0e 0e 0e     ................
    6578:	ff ff 0e 0e 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e 0e     ................
    6588:	ff ff ff ff 0e 0e 0e 0e ff ff ff ff ff 0e 0e 0e     ................
    6598:	ff ff ff ff ff ff 0e 0e ff ff ff ff ff ff ff 0e     ................
    65a8:	0e 0e 0e 0e 0e 0e ff ff 0e 0e 0e 0e 0e 0e ff ff     ................
    65b8:	0e 0e 0e 0e 0e ff ff ff 0e 0e 0e 0e ff ff ff ff     ................
    65c8:	0e 0e 0e ff ff ff ff ff 0e 0e ff ff ff ff ff ff     ................
    65d8:	0e ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    65e8:	20 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff      ...............
    65f8:	00 ff ff 0e 0e 0e 0e 0e 00 ff 0e 0e ff 0e ff 0e     ................
    6608:	00 ff 0e ff 0e ff 0e ff 00 ff 0e ff 0e ff 0e ff     ................
    6618:	00 ff 0e 0e ff 0e ff 0e 00 ff 0e 0e ff 0e ff 0e     ................
	...
    6630:	ff ff ff ff ff ff ff ff 0e 0e 0e 0e 0e 0e 0e 0e     ................
    6640:	ff 0e ff 0e ff 0e ff 0e 0e ff 0e ff 0e ff 0e ff     ................
    6650:	0e ff 0e ff 0e ff 0e ff ff 0e ff 0e ff 0e ff 0e     ................
    6660:	ff 0e ff 0e ff 0e ff 0e 00 00 00 00 00 00 20 20     ..............  
    6670:	ff ff ff ff ff 00 00 20 0e 0e 0e 0e ff ff 00 20     ....... ....... 
    6680:	ff 0e ff 0e 0e ff 00 20 0e ff 0e ff 0e ff 00 20     ....... ....... 
    6690:	0e ff 0e ff 0e ff 00 20 ff 0e ff 0e 0e ff 00 20     ....... ....... 
    66a0:	ff 0e ff 0e 0e ff 00 20 00 ff 0e ff 0e ff 0e ff     ....... ........
    66b0:	00 ff 0e ff 0e ff 0e ff 00 ff 0e 0e ff 0e ff 0e     ................
    66c0:	00 ff 0e 0e ff 0e ff 0e 00 ff 0e ff 0e ff 0e ff     ................
    66d0:	00 ff 0e ff 0e ff 0e ff 00 ff 0e 0e ff 0e ff 0e     ................
    66e0:	00 ff 0e 0e ff 0e ff 0e 0e ff 0e ff 0e ff 0e ff     ................
    66f0:	0e ff 0e ff 0e ff 0e ff ff 0e ff 0e ff 0e ff 0e     ................
    6700:	ff 0e ff 0e ff 0e ff 0e 0e ff 0e ff 0e ff 0e ff     ................
    6710:	0e ff 0e ff 0e ff 0e ff ff 0e ff 0e ff 0e ff 0e     ................
    6720:	ff 0e ff 0e ff 0e ff 0e 0e ff 0e ff 0e ff 00 20     ............... 
    6730:	0e ff 0e ff 0e ff 00 20 ff 0e ff 0e 0e ff 00 20     ....... ....... 
    6740:	ff 0e ff 0e 0e ff 00 20 0e ff 0e ff 0e ff 00 20     ....... ....... 
    6750:	0e ff 0e ff 0e ff 00 20 ff 0e ff 0e 0e ff 00 20     ....... ....... 
    6760:	ff 0e ff 0e 0e ff 00 20 00 ff 0e ff 0e ff 0e ff     ....... ........
    6770:	00 ff 0e ff 0e ff 0e ff 00 ff 0e 0e ff 0e ff 0e     ................
    6780:	00 ff 0e 0e ff 0e ff 0e 00 ff ff 0e 0e 0e 0e 0e     ................
    6790:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    67a0:	20 20 20 20 20 20 20 20 0e ff 0e ff 0e ff 0e ff             ........
    67b0:	0e ff 0e ff 0e ff 0e ff ff 0e ff 0e ff 0e ff 0e     ................
    67c0:	ff 0e ff 0e ff 0e ff 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    67d0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    67e0:	20 20 20 20 20 20 20 20 0e ff 0e ff 0e ff 00 20             ....... 
    67f0:	0e ff 0e ff 0e ff 00 20 ff 0e ff 0e 0e ff 00 20     ....... ....... 
    6800:	ff 0e ff 0e 0e ff 00 20 0e 0e 0e 0e ff ff 00 20     ....... ....... 
    6810:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    6820:	20 20 20 20 20 20 20 20 20 00 00 00 00 00 00 00              .......
    6830:	00 00 ff ff ff ff ff ff 00 ff ff 69 69 69 69 69     ...........iiiii
    6840:	00 ff 69 69 ff 69 ff 69 00 ff 69 ff 69 ff 69 ff     ..ii.i.i..i.i.i.
    6850:	00 ff 69 ff 69 ff 69 ff 00 ff 69 69 ff 69 ff 69     ..i.i.i...ii.i.i
    6860:	00 ff 69 69 ff 69 ff 69 00 00 00 00 00 00 00 00     ..ii.i.i........
    6870:	ff ff ff ff ff ff ff ff 69 69 69 69 69 69 69 69     ........iiiiiiii
    6880:	ff 69 ff 69 ff 69 ff 69 69 ff 69 ff 69 ff 69 ff     .i.i.i.ii.i.i.i.
    6890:	69 ff 69 ff 69 ff 69 ff ff 69 ff 69 ff 69 ff 69     i.i.i.i..i.i.i.i
    68a0:	ff 69 ff 69 ff 69 ff 69 00 00 00 00 00 00 20 20     .i.i.i.i......  
    68b0:	ff ff ff ff ff 00 00 20 69 69 69 69 ff ff 00 20     ....... iiii... 
    68c0:	ff 69 ff 69 69 ff 00 20 69 ff 69 ff 69 ff 00 20     .i.ii.. i.i.i.. 
    68d0:	69 ff 69 ff 69 ff 00 20 ff 69 ff 69 69 ff 00 20     i.i.i.. .i.ii.. 
    68e0:	ff 69 ff 69 69 ff 00 20 00 ff 69 ff 69 ff 69 ff     .i.ii.. ..i.i.i.
    68f0:	00 ff 69 ff 69 ff 69 ff 00 ff 69 69 ff 69 ff 69     ..i.i.i...ii.i.i
    6900:	00 ff 69 69 ff 69 ff 69 00 ff 69 ff 69 ff 69 ff     ..ii.i.i..i.i.i.
    6910:	00 ff 69 ff 69 ff 69 ff 00 ff 69 69 ff 69 ff 69     ..i.i.i...ii.i.i
    6920:	00 ff 69 69 ff 69 ff 69 69 ff 69 ff 69 ff 69 ff     ..ii.i.ii.i.i.i.
    6930:	69 ff 69 ff 69 ff 69 ff ff 69 ff 69 ff 69 ff 69     i.i.i.i..i.i.i.i
    6940:	ff 69 ff 69 ff 69 ff 69 69 ff 69 ff 69 ff 69 ff     .i.i.i.ii.i.i.i.
    6950:	69 ff 69 ff 69 ff 69 ff ff 69 ff 69 ff 69 ff 69     i.i.i.i..i.i.i.i
    6960:	ff 69 ff 69 ff 69 ff 69 69 ff 69 ff 69 ff 00 20     .i.i.i.ii.i.i.. 
    6970:	69 ff 69 ff 69 ff 00 20 ff 69 ff 69 69 ff 00 20     i.i.i.. .i.ii.. 
    6980:	ff 69 ff 69 69 ff 00 20 69 ff 69 ff 69 ff 00 20     .i.ii.. i.i.i.. 
    6990:	69 ff 69 ff 69 ff 00 20 ff 69 ff 69 69 ff 00 20     i.i.i.. .i.ii.. 
    69a0:	ff 69 ff 69 69 ff 00 20 00 ff 69 ff 69 ff 69 ff     .i.ii.. ..i.i.i.
    69b0:	00 ff 69 ff 69 ff 69 ff 00 ff 69 69 ff 69 ff 69     ..i.i.i...ii.i.i
    69c0:	00 ff 69 69 ff 69 ff 69 00 ff ff 69 69 69 69 69     ..ii.i.i...iiiii
    69d0:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    69e0:	20 20 20 20 20 20 20 20 69 ff 69 ff 69 ff 69 ff             i.i.i.i.
    69f0:	69 ff 69 ff 69 ff 69 ff ff 69 ff 69 ff 69 ff 69     i.i.i.i..i.i.i.i
    6a00:	ff 69 ff 69 ff 69 ff 69 69 69 69 69 69 69 69 69     .i.i.i.iiiiiiiii
    6a10:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6a20:	20 20 20 20 20 20 20 20 69 ff 69 ff 69 ff 00 20             i.i.i.. 
    6a30:	69 ff 69 ff 69 ff 00 20 ff 69 ff 69 69 ff 00 20     i.i.i.. .i.ii.. 
    6a40:	ff 69 ff 69 69 ff 00 20 69 69 69 69 ff ff 00 20     .i.ii.. iiii... 
    6a50:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    6a60:	20 20 20 20 20 20 20 20 20 00 00 00 00 00 00 00              .......
    6a70:	00 00 ff ff ff ff ff ff 00 ff ff d1 d1 d1 d1 d1     ................
    6a80:	00 ff d1 d1 ff d1 ff d1 00 ff d1 ff d1 ff d1 ff     ................
    6a90:	00 ff d1 ff d1 ff d1 ff 00 ff d1 d1 ff d1 ff d1     ................
    6aa0:	00 ff d1 d1 ff d1 ff d1 00 00 00 00 00 00 00 00     ................
    6ab0:	ff ff ff ff ff ff ff ff d1 d1 d1 d1 d1 d1 d1 d1     ................
    6ac0:	ff d1 ff d1 ff d1 ff d1 d1 ff d1 ff d1 ff d1 ff     ................
    6ad0:	d1 ff d1 ff d1 ff d1 ff ff d1 ff d1 ff d1 ff d1     ................
    6ae0:	ff d1 ff d1 ff d1 ff d1 00 00 00 00 00 00 20 20     ..............  
    6af0:	ff ff ff ff ff 00 00 20 d1 d1 d1 d1 ff ff 00 20     ....... ....... 
    6b00:	ff d1 ff d1 d1 ff 00 20 d1 ff d1 ff d1 ff 00 20     ....... ....... 
    6b10:	d1 ff d1 ff d1 ff 00 20 ff d1 ff d1 d1 ff 00 20     ....... ....... 
    6b20:	ff d1 ff d1 d1 ff 00 20 00 ff d1 ff d1 ff d1 ff     ....... ........
    6b30:	00 ff d1 ff d1 ff d1 ff 00 ff d1 d1 ff d1 ff d1     ................
    6b40:	00 ff d1 d1 ff d1 ff d1 00 ff d1 ff d1 ff d1 ff     ................
    6b50:	00 ff d1 ff d1 ff d1 ff 00 ff d1 d1 ff d1 ff d1     ................
    6b60:	00 ff d1 d1 ff d1 ff d1 d1 ff d1 ff d1 ff d1 ff     ................
    6b70:	d1 ff d1 ff d1 ff d1 ff ff d1 ff d1 ff d1 ff d1     ................
    6b80:	ff d1 ff d1 ff d1 ff d1 d1 ff d1 ff d1 ff d1 ff     ................
    6b90:	d1 ff d1 ff d1 ff d1 ff ff d1 ff d1 ff d1 ff d1     ................
    6ba0:	ff d1 ff d1 ff d1 ff d1 d1 ff d1 ff d1 ff 00 20     ............... 
    6bb0:	d1 ff d1 ff d1 ff 00 20 ff d1 ff d1 d1 ff 00 20     ....... ....... 
    6bc0:	ff d1 ff d1 d1 ff 00 20 d1 ff d1 ff d1 ff 00 20     ....... ....... 
    6bd0:	d1 ff d1 ff d1 ff 00 20 ff d1 ff d1 d1 ff 00 20     ....... ....... 
    6be0:	ff d1 ff d1 d1 ff 00 20 00 ff d1 ff d1 ff d1 ff     ....... ........
    6bf0:	00 ff d1 ff d1 ff d1 ff 00 ff d1 d1 ff d1 ff d1     ................
    6c00:	00 ff d1 d1 ff d1 ff d1 00 ff ff d1 d1 d1 d1 d1     ................
    6c10:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    6c20:	20 20 20 20 20 20 20 20 d1 ff d1 ff d1 ff d1 ff             ........
    6c30:	d1 ff d1 ff d1 ff d1 ff ff d1 ff d1 ff d1 ff d1     ................
    6c40:	ff d1 ff d1 ff d1 ff d1 d1 d1 d1 d1 d1 d1 d1 d1     ................
    6c50:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6c60:	20 20 20 20 20 20 20 20 d1 ff d1 ff d1 ff 00 20             ....... 
    6c70:	d1 ff d1 ff d1 ff 00 20 ff d1 ff d1 d1 ff 00 20     ....... ....... 
    6c80:	ff d1 ff d1 d1 ff 00 20 d1 d1 d1 d1 ff ff 00 20     ....... ....... 
    6c90:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    6ca0:	20 20 20 20 20 20 20 20 20 00 00 00 00 00 00 00              .......
    6cb0:	00 00 ff ff ff ff ff ff 00 ff ff 95 95 95 95 95     ................
    6cc0:	00 ff 95 95 ff 95 ff 95 00 ff 95 ff 95 ff 95 ff     ................
    6cd0:	00 ff 95 ff 95 ff 95 ff 00 ff 95 95 ff 95 ff 95     ................
    6ce0:	00 ff 95 95 ff 95 ff 95 00 00 00 00 00 00 00 00     ................
    6cf0:	ff ff ff ff ff ff ff ff 95 95 95 95 95 95 95 95     ................
    6d00:	ff 95 ff 95 ff 95 ff 95 95 ff 95 ff 95 ff 95 ff     ................
    6d10:	95 ff 95 ff 95 ff 95 ff ff 95 ff 95 ff 95 ff 95     ................
    6d20:	ff 95 ff 95 ff 95 ff 95 00 00 00 00 00 00 20 20     ..............  
    6d30:	ff ff ff ff ff 00 00 20 95 95 95 95 ff ff 00 20     ....... ....... 
    6d40:	ff 95 ff 95 95 ff 00 20 95 ff 95 ff 95 ff 00 20     ....... ....... 
    6d50:	95 ff 95 ff 95 ff 00 20 ff 95 ff 95 95 ff 00 20     ....... ....... 
    6d60:	ff 95 ff 95 95 ff 00 20 00 ff 95 ff 95 ff 95 ff     ....... ........
    6d70:	00 ff 95 ff 95 ff 95 ff 00 ff 95 95 ff 95 ff 95     ................
    6d80:	00 ff 95 95 ff 95 ff 95 00 ff 95 ff 95 ff 95 ff     ................
    6d90:	00 ff 95 ff 95 ff 95 ff 00 ff 95 95 ff 95 ff 95     ................
    6da0:	00 ff 95 95 ff 95 ff 95 95 ff 95 ff 95 ff 95 ff     ................
    6db0:	95 ff 95 ff 95 ff 95 ff ff 95 ff 95 ff 95 ff 95     ................
    6dc0:	ff 95 ff 95 ff 95 ff 95 95 ff 95 ff 95 ff 95 ff     ................
    6dd0:	95 ff 95 ff 95 ff 95 ff ff 95 ff 95 ff 95 ff 95     ................
    6de0:	ff 95 ff 95 ff 95 ff 95 95 ff 95 ff 95 ff 00 20     ............... 
    6df0:	95 ff 95 ff 95 ff 00 20 ff 95 ff 95 95 ff 00 20     ....... ....... 
    6e00:	ff 95 ff 95 95 ff 00 20 95 ff 95 ff 95 ff 00 20     ....... ....... 
    6e10:	95 ff 95 ff 95 ff 00 20 ff 95 ff 95 95 ff 00 20     ....... ....... 
    6e20:	ff 95 ff 95 95 ff 00 20 00 ff 95 ff 95 ff 95 ff     ....... ........
    6e30:	00 ff 95 ff 95 ff 95 ff 00 ff 95 95 ff 95 ff 95     ................
    6e40:	00 ff 95 95 ff 95 ff 95 00 ff ff 95 95 95 95 95     ................
    6e50:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    6e60:	20 20 20 20 20 20 20 20 95 ff 95 ff 95 ff 95 ff             ........
    6e70:	95 ff 95 ff 95 ff 95 ff ff 95 ff 95 ff 95 ff 95     ................
    6e80:	ff 95 ff 95 ff 95 ff 95 95 95 95 95 95 95 95 95     ................
    6e90:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    6ea0:	20 20 20 20 20 20 20 20 95 ff 95 ff 95 ff 00 20             ....... 
    6eb0:	95 ff 95 ff 95 ff 00 20 ff 95 ff 95 95 ff 00 20     ....... ....... 
    6ec0:	ff 95 ff 95 95 ff 00 20 95 95 95 95 ff ff 00 20     ....... ....... 
    6ed0:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    6ee0:	20 20 20 20 20 20 20 20 20 00 00 00 00 00 00 00              .......
    6ef0:	00 00 ff ff ff ff ff ff 00 ff ff 3f 3f 3f 3f 3f     ...........?????
    6f00:	00 ff 3f 3f ff 3f ff 3f 00 ff 3f ff 3f ff 3f ff     ..??.?.?..?.?.?.
    6f10:	00 ff 3f ff 3f ff 3f ff 00 ff 3f 3f ff 3f ff 3f     ..?.?.?...??.?.?
    6f20:	00 ff 3f 3f ff 3f ff 3f 00 00 00 00 00 00 00 00     ..??.?.?........
    6f30:	ff ff ff ff ff ff ff ff 3f 3f 3f 3f 3f 3f 3f 3f     ........????????
    6f40:	ff 3f ff 3f ff 3f ff 3f 3f ff 3f ff 3f ff 3f ff     .?.?.?.??.?.?.?.
    6f50:	3f ff 3f ff 3f ff 3f ff ff 3f ff 3f ff 3f ff 3f     ?.?.?.?..?.?.?.?
    6f60:	ff 3f ff 3f ff 3f ff 3f 00 00 00 00 00 00 20 20     .?.?.?.?......  
    6f70:	ff ff ff ff ff 00 00 20 3f 3f 3f 3f ff ff 00 20     ....... ????... 
    6f80:	ff 3f ff 3f 3f ff 00 20 3f ff 3f ff 3f ff 00 20     .?.??.. ?.?.?.. 
    6f90:	3f ff 3f ff 3f ff 00 20 ff 3f ff 3f 3f ff 00 20     ?.?.?.. .?.??.. 
    6fa0:	ff 3f ff 3f 3f ff 00 20 00 ff 3f ff 3f ff 3f ff     .?.??.. ..?.?.?.
    6fb0:	00 ff 3f ff 3f ff 3f ff 00 ff 3f 3f ff 3f ff 3f     ..?.?.?...??.?.?
    6fc0:	00 ff 3f 3f ff 3f ff 3f 00 ff 3f ff 3f ff 3f ff     ..??.?.?..?.?.?.
    6fd0:	00 ff 3f ff 3f ff 3f ff 00 ff 3f 3f ff 3f ff 3f     ..?.?.?...??.?.?
    6fe0:	00 ff 3f 3f ff 3f ff 3f 3f ff 3f ff 3f ff 3f ff     ..??.?.??.?.?.?.
    6ff0:	3f ff 3f ff 3f ff 3f ff ff 3f ff 3f ff 3f ff 3f     ?.?.?.?..?.?.?.?
    7000:	ff 3f ff 3f ff 3f ff 3f 3f ff 3f ff 3f ff 3f ff     .?.?.?.??.?.?.?.
    7010:	3f ff 3f ff 3f ff 3f ff ff 3f ff 3f ff 3f ff 3f     ?.?.?.?..?.?.?.?
    7020:	ff 3f ff 3f ff 3f ff 3f 3f ff 3f ff 3f ff 00 20     .?.?.?.??.?.?.. 
    7030:	3f ff 3f ff 3f ff 00 20 ff 3f ff 3f 3f ff 00 20     ?.?.?.. .?.??.. 
    7040:	ff 3f ff 3f 3f ff 00 20 3f ff 3f ff 3f ff 00 20     .?.??.. ?.?.?.. 
    7050:	3f ff 3f ff 3f ff 00 20 ff 3f ff 3f 3f ff 00 20     ?.?.?.. .?.??.. 
    7060:	ff 3f ff 3f 3f ff 00 20 00 ff 3f ff 3f ff 3f ff     .?.??.. ..?.?.?.
    7070:	00 ff 3f ff 3f ff 3f ff 00 ff 3f 3f ff 3f ff 3f     ..?.?.?...??.?.?
    7080:	00 ff 3f 3f ff 3f ff 3f 00 ff ff 3f 3f 3f 3f 3f     ..??.?.?...?????
    7090:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    70a0:	20 20 20 20 20 20 20 20 3f ff 3f ff 3f ff 3f ff             ?.?.?.?.
    70b0:	3f ff 3f ff 3f ff 3f ff ff 3f ff 3f ff 3f ff 3f     ?.?.?.?..?.?.?.?
    70c0:	ff 3f ff 3f ff 3f ff 3f 3f 3f 3f 3f 3f 3f 3f 3f     .?.?.?.?????????
    70d0:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    70e0:	20 20 20 20 20 20 20 20 3f ff 3f ff 3f ff 00 20             ?.?.?.. 
    70f0:	3f ff 3f ff 3f ff 00 20 ff 3f ff 3f 3f ff 00 20     ?.?.?.. .?.??.. 
    7100:	ff 3f ff 3f 3f ff 00 20 3f 3f 3f 3f ff ff 00 20     .?.??.. ????... 
    7110:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    7120:	20 20 20 20 20 20 20 20 20 00 00 00 00 00 00 00              .......
    7130:	00 00 ff ff ff ff ff ff 00 ff ff 00 00 00 00 00     ................
    7140:	00 ff 00 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff     ................
    7150:	00 ff 00 ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00     ................
    7160:	00 ff 00 00 ff 00 ff 00 00 00 00 00 00 00 00 00     ................
    7170:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    7180:	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff     ................
    7190:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    71a0:	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 20 20     ..............  
    71b0:	ff ff ff ff ff 00 00 20 00 00 00 00 ff ff 00 20     ....... ....... 
    71c0:	ff 00 ff 00 00 ff 00 20 00 ff 00 ff 00 ff 00 20     ....... ....... 
    71d0:	00 ff 00 ff 00 ff 00 20 ff 00 ff 00 00 ff 00 20     ....... ....... 
    71e0:	ff 00 ff 00 00 ff 00 20 00 ff 00 ff 00 ff 00 ff     ....... ........
    71f0:	00 ff 00 ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00     ................
    7200:	00 ff 00 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff     ................
    7210:	00 ff 00 ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00     ................
    7220:	00 ff 00 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff     ................
    7230:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    7240:	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 ff     ................
    7250:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    7260:	ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00 ff 00 20     ............... 
    7270:	00 ff 00 ff 00 ff 00 20 ff 00 ff 00 00 ff 00 20     ....... ....... 
    7280:	ff 00 ff 00 00 ff 00 20 00 ff 00 ff 00 ff 00 20     ....... ....... 
    7290:	00 ff 00 ff 00 ff 00 20 ff 00 ff 00 00 ff 00 20     ....... ....... 
    72a0:	ff 00 ff 00 00 ff 00 20 00 ff 00 ff 00 ff 00 ff     ....... ........
    72b0:	00 ff 00 ff 00 ff 00 ff 00 ff 00 00 ff 00 ff 00     ................
    72c0:	00 ff 00 00 ff 00 ff 00 00 ff ff 00 00 00 00 00     ................
    72d0:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    72e0:	20 20 20 20 20 20 20 20 00 ff 00 ff 00 ff 00 ff             ........
    72f0:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    7300:	ff 00 ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00     ................
    7310:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    7320:	20 20 20 20 20 20 20 20 00 ff 00 ff 00 ff 00 20             ....... 
    7330:	00 ff 00 ff 00 ff 00 20 ff 00 ff 00 00 ff 00 20     ....... ....... 
    7340:	ff 00 ff 00 00 ff 00 20 00 00 00 00 ff ff 00 20     ....... ....... 
    7350:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    7360:	20 20 20 20 20 20 20 20 20 00 00 00 00 00 00 00              .......
    7370:	00 00 ff ff ff ff ff ff 00 ff ff 27 27 27 27 27     ...........'''''
    7380:	00 ff 27 27 ff 27 ff 27 00 ff 27 ff 27 ff 27 ff     ..''.'.'..'.'.'.
    7390:	00 ff 27 ff 27 ff 27 ff 00 ff 27 27 ff 27 ff 27     ..'.'.'...''.'.'
    73a0:	00 ff 27 27 ff 27 ff 27 00 00 00 00 00 00 00 00     ..''.'.'........
    73b0:	ff ff ff ff ff ff ff ff 27 27 27 27 27 27 27 27     ........''''''''
    73c0:	ff 27 ff 27 ff 27 ff 27 27 ff 27 ff 27 ff 27 ff     .'.'.'.''.'.'.'.
    73d0:	27 ff 27 ff 27 ff 27 ff ff 27 ff 27 ff 27 ff 27     '.'.'.'..'.'.'.'
    73e0:	ff 27 ff 27 ff 27 ff 27 00 00 00 00 00 00 20 20     .'.'.'.'......  
    73f0:	ff ff ff ff ff 00 00 20 27 27 27 27 ff ff 00 20     ....... ''''... 
    7400:	ff 27 ff 27 27 ff 00 20 27 ff 27 ff 27 ff 00 20     .'.''.. '.'.'.. 
    7410:	27 ff 27 ff 27 ff 00 20 ff 27 ff 27 27 ff 00 20     '.'.'.. .'.''.. 
    7420:	ff 27 ff 27 27 ff 00 20 00 ff 27 ff 27 ff 27 ff     .'.''.. ..'.'.'.
    7430:	00 ff 27 ff 27 ff 27 ff 00 ff 27 27 ff 27 ff 27     ..'.'.'...''.'.'
    7440:	00 ff 27 27 ff 27 ff 27 00 ff 27 ff 27 ff 27 ff     ..''.'.'..'.'.'.
    7450:	00 ff 27 ff 27 ff 27 ff 00 ff 27 27 ff 27 ff 27     ..'.'.'...''.'.'
    7460:	00 ff 27 27 ff 27 ff 27 27 ff 27 ff 27 ff 27 ff     ..''.'.''.'.'.'.
    7470:	27 ff 27 ff 27 ff 27 ff ff 27 ff 27 ff 27 ff 27     '.'.'.'..'.'.'.'
    7480:	ff 27 ff 27 ff 27 ff 27 27 ff 27 ff 27 ff 27 ff     .'.'.'.''.'.'.'.
    7490:	27 ff 27 ff 27 ff 27 ff ff 27 ff 27 ff 27 ff 27     '.'.'.'..'.'.'.'
    74a0:	ff 27 ff 27 ff 27 ff 27 27 ff 27 ff 27 ff 00 20     .'.'.'.''.'.'.. 
    74b0:	27 ff 27 ff 27 ff 00 20 ff 27 ff 27 27 ff 00 20     '.'.'.. .'.''.. 
    74c0:	ff 27 ff 27 27 ff 00 20 27 ff 27 ff 27 ff 00 20     .'.''.. '.'.'.. 
    74d0:	27 ff 27 ff 27 ff 00 20 ff 27 ff 27 27 ff 00 20     '.'.'.. .'.''.. 
    74e0:	ff 27 ff 27 27 ff 00 20 00 ff 27 ff 27 ff 27 ff     .'.''.. ..'.'.'.
    74f0:	00 ff 27 ff 27 ff 27 ff 00 ff 27 27 ff 27 ff 27     ..'.'.'...''.'.'
    7500:	00 ff 27 27 ff 27 ff 27 00 ff ff 27 27 27 27 27     ..''.'.'...'''''
    7510:	00 00 ff ff ff ff ff ff 20 00 00 00 00 00 00 00     ........ .......
    7520:	20 20 20 20 20 20 20 20 27 ff 27 ff 27 ff 27 ff             '.'.'.'.
    7530:	27 ff 27 ff 27 ff 27 ff ff 27 ff 27 ff 27 ff 27     '.'.'.'..'.'.'.'
    7540:	ff 27 ff 27 ff 27 ff 27 27 27 27 27 27 27 27 27     .'.'.'.'''''''''
    7550:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    7560:	20 20 20 20 20 20 20 20 27 ff 27 ff 27 ff 00 20             '.'.'.. 
    7570:	27 ff 27 ff 27 ff 00 20 ff 27 ff 27 27 ff 00 20     '.'.'.. .'.''.. 
    7580:	ff 27 ff 27 27 ff 00 20 27 27 27 27 ff ff 00 20     .'.''.. ''''... 
    7590:	ff ff ff ff ff 00 00 20 00 00 00 00 00 00 20 20     ....... ......  
    75a0:	20 20 20 20 20 20 20 20                                     

000075a8 <Font>:
    75a8:	20 ff ff ff ff ff 20 20 ff ff ff ff ff ff ff 20      .....  ....... 
    75b8:	ff ff 00 00 ff ff ff 00 ff ff 00 00 00 ff ff 00     ................
    75c8:	ff ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff 00     ................
    75d8:	20 ff ff ff ff ff 00 00 20 20 00 00 00 00 00 20      .......  ..... 
    75e8:	20 20 20 ff ff 20 20 20 20 20 ff ff ff 00 20 20        ..     ....  
    75f8:	20 20 20 ff ff 00 20 20 20 20 20 ff ff 00 20 20        ...     ...  
    7608:	20 20 20 ff ff 00 20 20 20 ff ff ff ff ff ff 20        ...   ...... 
    7618:	20 ff ff ff ff ff ff 00 20 20 00 00 00 00 00 00      .......  ......
    7628:	20 20 ff ff ff ff 20 20 20 ff ff 00 ff ff ff 00       ....   .......
    7638:	20 20 00 20 ff ff ff 00 20 20 20 ff ff ff 00 20       . ....   .... 
    7648:	20 20 ff ff ff 00 20 20 20 ff ff ff ff ff ff 20       ....   ...... 
    7658:	20 ff ff ff ff ff ff 00 20 20 00 00 00 00 00 00      .......  ......
    7668:	20 20 ff ff ff ff 20 20 20 ff ff 00 00 ff ff 00       ....   .......
    7678:	20 20 20 20 ff ff ff 00 20 20 20 20 20 ff ff 00         ....     ...
    7688:	20 20 20 20 20 ff ff 00 20 ff ff ff ff ff ff 00          ... .......
    7698:	20 20 ff ff ff ff 00 00 20 20 20 00 00 00 00 20       ......   .... 
    76a8:	20 20 ff 20 20 20 ff 20 20 ff ff 00 20 ff ff 00       .   .  ... ...
    76b8:	20 ff ff 00 20 ff ff 00 20 ff ff ff ff ff ff 00      ... ... .......
    76c8:	20 20 00 00 ff ff ff 00 20 20 20 20 ff ff ff 00       ......    ....
    76d8:	20 20 20 20 ff ff ff 00 20 20 20 20 20 00 00 00         ....     ...
    76e8:	20 20 ff ff ff ff ff 20 20 ff ff 00 00 00 00 00       .....  .......
    76f8:	20 ff ff ff ff ff 20 20 20 20 00 00 00 ff ff 20      .....    ..... 
    7708:	20 20 20 20 20 ff ff 00 20 ff ff ff ff ff ff 00          ... .......
    7718:	20 20 ff ff ff ff 00 00 20 20 20 00 00 00 00 20       ......   .... 
    7728:	20 20 ff ff ff ff ff 20 20 ff ff 00 00 00 00 00       .....  .......
    7738:	20 ff ff ff ff ff 20 20 20 ff ff 00 00 ff ff 20      .....   ...... 
    7748:	20 ff ff 00 20 ff ff 00 20 ff ff ff ff ff ff 00      ... ... .......
    7758:	20 20 ff ff ff ff 00 00 20 20 20 00 00 00 00 20       ......   .... 
    7768:	20 20 ff ff ff ff ff 20 20 ff ff 00 00 ff ff 00       .....  .......
    7778:	20 20 00 00 20 ff ff 00 20 20 20 20 ff ff 00 00       .. ...    ....
    7788:	20 20 20 ff ff 00 00 20 20 20 ff ff ff 00 20 20        ....   ....  
    7798:	20 20 ff ff ff 00 20 20 20 20 20 00 00 00 20 20       ....     ...  
    77a8:	20 20 ff ff ff ff 20 20 20 ff ff 00 00 ff ff 00       ....   .......
    77b8:	20 20 ff ff ff ff 00 00 20 ff ff 00 00 ff ff 00       ...... .......
    77c8:	20 ff ff 00 20 ff ff 00 20 ff ff ff ff ff ff 00      ... ... .......
    77d8:	20 20 ff ff ff ff 00 00 20 20 20 00 00 00 00 20       ......   .... 
    77e8:	20 20 ff ff ff ff 20 20 20 ff ff 00 00 ff ff 00       ....   .......
    77f8:	20 ff ff 00 20 ff ff 00 20 20 ff ff ff ff ff 00      ... ...  ......
    7808:	20 20 20 00 00 ff ff 00 20 ff ff ff ff ff ff 00        ..... .......
    7818:	20 20 ff ff ff ff 00 00 20 20 20 00 00 00 00 20       ......   .... 
    7828:	20 20 20 20 20 20 20 20 20 ff ff ff ff ff 20 20              .....  
    7838:	ff ff ff 00 ff ff ff 20 ff ff ff ff ff ff ff 00     ....... ........
    7848:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    7858:	20 00 00 00 20 00 00 00 20 20 20 20 20 20 20 20      ... ...        
    7868:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff 20 20             ......  
    7878:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff 00 00     ................
    7888:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff 00 00     ................
    7898:	20 00 00 00 00 00 00 20 20 20 20 20 20 20 20 20      ......         
    78a8:	20 20 20 20 20 20 20 20 20 ff ff ff ff ff 20 20              .....  
    78b8:	ff ff ff 00 ff ff ff 00 ff ff ff 00 00 00 00 00     ................
    78c8:	ff ff ff 00 ff ff ff 00 20 ff ff ff ff ff 00 00     ........ .......
    78d8:	20 20 00 00 00 00 00 20 20 20 20 20 20 20 20 20       .....         
    78e8:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff 20 20             ......  
    78f8:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    7908:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff 00 00     ................
    7918:	20 00 00 00 00 00 00 20 20 20 20 20 20 20 20 20      ......         
    7928:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff 20             ....... 
    7938:	ff ff ff 00 00 00 00 00 ff ff ff ff ff ff 20 20     ..............  
    7948:	ff ff ff 00 00 00 00 20 ff ff ff ff ff ff ff 20     ....... ....... 
    7958:	20 00 00 00 00 00 00 00 20 20 20 20 20 20 20 20      .......        
    7968:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff 20             ....... 
    7978:	ff ff ff 00 00 00 00 00 ff ff ff ff ff ff 20 20     ..............  
    7988:	ff ff ff 00 00 00 00 20 ff ff ff 00 20 20 20 20     ....... ....    
    7998:	20 00 00 00 20 20 20 20 20 20 20 20 20 20 20 20      ...            
    79a8:	20 20 20 20 20 20 20 20 20 ff ff ff ff ff ff 20              ...... 
    79b8:	ff ff ff 00 00 00 00 00 ff ff ff 00 ff ff ff 20     ............... 
    79c8:	ff ff ff 00 00 ff ff 00 20 ff ff ff ff ff 00 00     ........ .......
    79d8:	20 20 00 00 00 00 00 20 20 20 20 20 20 20 20 20       .....         
    79e8:	20 20 20 20 20 20 20 20 ff ff ff 20 ff ff ff 20             ... ... 
    79f8:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff ff 00     ................
    7a08:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    7a18:	20 00 00 00 20 00 00 00 20 20 20 20 20 20 20 20      ... ...        
    7a28:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff 20             ....... 
    7a38:	20 20 ff ff ff 00 00 00 20 20 ff ff ff 00 20 20       ......  ....  
    7a48:	20 20 ff ff ff 00 20 20 ff ff ff ff ff ff ff 00       ....  ........
    7a58:	20 00 00 00 00 00 00 00 20 20 20 20 20 20 20 20      .......        
    7a68:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff 20             ....... 
    7a78:	20 20 ff ff ff 00 00 00 20 20 ff ff ff 00 20 20       ......  ....  
    7a88:	20 20 ff ff ff 00 20 20 ff ff ff ff 00 00 20 20       ....  ......  
    7a98:	20 00 00 00 00 20 20 20 20 20 20 20 20 20 20 20      ....           
    7aa8:	20 20 20 20 20 20 20 20 ff ff ff 20 20 ff ff 20             ...  .. 
    7ab8:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff 00 00     ................
    7ac8:	ff ff ff 00 ff ff ff 00 ff ff ff 00 20 ff ff 00     ............ ...
    7ad8:	20 00 00 00 20 20 00 00 20 20 20 20 20 20 20 20      ...  ..        
    7ae8:	20 20 20 20 20 20 20 20 ff ff ff 20 20 20 20 20             ...     
    7af8:	ff ff ff 00 20 20 20 20 ff ff ff 00 20 20 20 20     ....    ....    
    7b08:	ff ff ff ff ff ff ff 20 ff ff ff ff ff ff ff 00     ....... ........
    7b18:	20 00 00 00 00 00 00 00 20 20 20 20 20 20 20 20      .......        
    7b28:	20 20 20 20 20 20 20 20 ff ff 20 20 20 ff ff 20             ..   .. 
    7b38:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff ff 00     ................
    7b48:	ff ff 00 ff 00 ff ff 00 ff ff 00 20 00 ff ff 00     ........... ....
    7b58:	20 00 00 20 20 20 00 00 20 20 20 20 20 20 20 20      ..   ..        
    7b68:	20 20 20 20 20 20 20 20 ff ff ff 20 20 ff ff 20             ...  .. 
    7b78:	ff ff ff ff 00 ff ff 00 ff ff ff ff ff ff ff 00     ................
    7b88:	ff ff 00 ff ff ff ff 00 ff ff 00 20 ff ff ff 00     ........... ....
    7b98:	20 00 00 20 20 00 00 00 20 20 20 20 20 20 20 20      ..  ...        
    7ba8:	20 20 20 20 20 20 20 20 20 ff ff ff ff ff 20 20              .....  
    7bb8:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    7bc8:	ff ff ff 00 ff ff ff 00 20 ff ff ff ff ff 00 00     ........ .......
    7bd8:	20 20 00 00 00 00 00 20 20 20 20 20 20 20 20 20       .....         
    7be8:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff 20 20             ......  
    7bf8:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff 00 00     ................
    7c08:	ff ff ff 00 00 00 00 20 ff ff ff 00 20 20 20 20     ....... ....    
    7c18:	20 00 00 00 20 20 20 20 20 20 20 20 20 20 20 20      ...            
    7c28:	20 20 20 20 20 20 20 20 20 ff ff ff ff ff 20 20              .....  
    7c38:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff 00 00     ................
    7c48:	ff ff ff 00 ff ff ff 20 20 ff ff ff 00 ff ff 00     .......  .......
    7c58:	20 20 00 00 00 20 00 00 20 20 20 20 20 20 20 20       ... ..        
    7c68:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff 20 20             ......  
    7c78:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff 00 20     ............... 
    7c88:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    7c98:	20 00 00 00 20 00 00 00 20 20 20 20 20 20 20 20      ... ...        
    7ca8:	20 20 20 20 20 20 20 20 20 ff ff ff ff ff ff 20              ...... 
    7cb8:	ff ff ff 00 00 00 00 00 20 ff ff ff ff ff 20 20     ........ .....  
    7cc8:	20 20 00 00 ff ff ff 00 ff ff ff ff ff ff 00 00       ..............
    7cd8:	20 00 00 00 00 00 00 20 20 20 20 20 20 20 20 20      ......         
    7ce8:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff 20             ....... 
    7cf8:	ff ff ff ff ff ff ff 00 20 00 ff ff ff 00 00 00     ........ .......
    7d08:	20 20 ff ff ff 00 20 20 20 20 ff ff ff 00 20 20       ....    ....  
    7d18:	20 20 20 00 00 00 20 20 20 20 20 20 20 20 20 20        ...          
    7d28:	20 20 20 20 20 20 20 20 ff ff ff 20 ff ff ff 20             ... ... 
    7d38:	ff ff ff 00 ff ff ff 00 ff ff ff 00 ff ff ff 00     ................
    7d48:	ff ff ff ff ff ff ff 00 20 ff ff ff ff ff 00 00     ........ .......
    7d58:	20 20 00 00 00 00 00 20 20 20 20 20 20 20 20 20       .....         
    7d68:	20 20 20 20 20 20 20 20 ff ff ff 20 ff ff ff 20             ... ... 
    7d78:	ff ff ff 00 ff ff ff 00 ff ff ff ff ff ff ff 00     ................
    7d88:	20 ff ff ff ff ff 00 00 20 20 ff ff ff 00 00 20      .......  ..... 
    7d98:	20 20 20 00 00 00 20 20 20 20 20 20 20 20 20 20        ...          
    7da8:	20 20 20 20 20 20 20 20 ff ff 20 20 20 ff ff 20             ..   .. 
    7db8:	ff ff 00 ff 20 ff ff 00 ff ff ff ff ff ff ff 00     .... ...........
    7dc8:	ff ff ff 00 ff ff ff 00 ff ff 00 00 20 ff ff 00     ............ ...
    7dd8:	20 00 00 20 20 20 00 00 20 20 20 20 20 20 20 20      ..   ..        
    7de8:	20 20 20 20 20 20 20 20 ff ff 20 20 20 ff ff 20             ..   .. 
    7df8:	ff ff ff 00 ff ff ff 00 20 ff ff ff ff ff 00 20     ........ ...... 
    7e08:	ff ff ff 00 ff ff ff 00 ff ff 00 00 20 ff ff 00     ............ ...
    7e18:	20 00 00 20 20 20 00 00 20 20 20 20 20 20 20 20      ..   ..        
    7e28:	20 20 20 20 20 20 20 20 ff ff 20 20 20 ff ff 20             ..   .. 
    7e38:	ff ff ff 00 ff ff ff 00 20 ff ff ff ff ff 00 20     ........ ...... 
    7e48:	20 20 ff ff ff 00 20 20 20 20 ff ff ff 00 20 20       ....    ....  
    7e58:	20 20 20 00 00 00 20 20 20 20 20 20 20 20 20 20        ...          
    7e68:	20 20 20 20 20 20 20 20 ff ff ff ff ff ff ff 20             ....... 
    7e78:	20 00 00 ff ff ff 00 20 20 20 ff ff ff 00 20 20      ......   ....  
    7e88:	20 ff ff ff 00 20 20 20 ff ff ff ff ff ff ff 20      ....   ....... 
    7e98:	20 00 00 00 00 00 00 00 20 20 20 20 20 20 20 20      .......        
    7ea8:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 07 20                   . 
    7eb8:	20 20 20 20 20 07 07 20 20 20 20 20 20 07 07 20          ..      .. 
    7ec8:	20 07 07 20 07 07 20 20 20 20 07 07 07 20 20 20      .. ..    ...   
    7ed8:	20 20 20 07 20 20 20 20 20 20 20 20 20 20 20 20        .            
    7ee8:	20 20 20 20 20 20 20 20 20 20 20 ff ff 20 20 20                ..   
    7ef8:	20 20 20 ff ff 00 20 20 20 20 20 20 00 00 20 20        ...      ..  
    7f08:	20 20 20 20 20 20 20 20 20 20 20 ff ff 20 20 20                ..   
    7f18:	20 20 20 ff ff 00 20 20 20 20 20 20 00 00 20 20        ...      ..  

00007f28 <Sprites>:
    7f28:	fe fe fe fe fe fe 00 00 fe fe fe fe fe 00 ff ff     ................
    7f38:	fe fe fe fe fe 00 ff ff fe fe fe fe fe 00 ff ff     ................
    7f48:	fe fe fe fe fe 00 ff ff fe fe fe fe fe 00 ff ff     ................
    7f58:	fe fe fe fe fe 00 ff ff fe fe fe fe fe 00 ff ff     ................
    7f68:	00 fe fe fe fe fe fe fe ff 00 fe fe fe fe fe fe     ................
    7f78:	ff 00 fe fe fe fe fe fe ff 00 fe fe fe fe fe fe     ................
    7f88:	ff 00 fe fe fe fe fe fe ff 00 fe fe fe fe fe fe     ................
    7f98:	ff 00 00 00 00 00 00 00 ff 00 00 ff ff ff 00 00     ................
    7fa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7fb8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7fc8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7fd8:	00 fe fe fe fe fe fe fe ff 00 00 fe fe fe fe fe     ................
    7fe8:	fe fe fe fe fe 00 ff ff fe 00 00 00 fe 00 ff ff     ................
    7ff8:	00 ff ff ff 00 00 ff ff 00 ff ff ff 00 00 ff ff     ................
    8008:	00 ff ff ff ff 00 ff ff fe 00 ff ff ff 00 ff ff     ................
    8018:	fe 00 ff ff ff 00 ff ff fe fe 00 ff ff ff ff ff     ................
    8028:	ff 00 00 ff ff ff 00 00 ff 00 00 ff ff ff 00 00     ................
    8038:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8048:	ff ff ff ff ff ff ff ff ff 00 00 ff 00 00 ff ff     ................
    8058:	ff 00 00 ff 00 00 ff ff ff 00 00 ff 00 00 ff ff     ................
    8068:	ff 00 00 00 fe fe fe fe ff 00 00 ff 00 fe fe fe     ................
    8078:	ff ff ff ff 00 fe fe fe ff ff ff ff 00 fe fe fe     ................
    8088:	ff ff ff ff 00 fe fe fe 00 ff ff ff 00 fe fe fe     ................
    8098:	00 ff ff ff 00 fe fe fe 00 ff ff ff 00 fe fe fe     ................
    80a8:	fe fe 00 00 ff ff ff ff fe fe fe 00 ff ff ff ff     ................
    80b8:	fe fe fe fe 00 ff ff ff fe fe fe fe 00 ff ff ff     ................
    80c8:	fe fe fe fe fe 00 ff ff fe fe fe fe fe fe 00 00     ................
    80d8:	fe fe fe fe fe fe 00 00 fe fe fe fe fe fe fe 00     ................
    80e8:	ff 00 00 ff 00 00 ff ff ff 00 00 ff 00 00 ff ff     ................
    80f8:	ff 00 00 ff 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    8108:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00     ................
	...
    8128:	00 ff ff 00 fe fe fe fe 00 ff ff 00 fe fe fe fe     ................
    8138:	00 ff ff 00 fe fe fe fe ff 00 00 fe fe fe fe fe     ................
    8148:	ff 00 00 fe fe fe fe fe ff 00 00 fe fe fe fe fe     ................
    8158:	00 00 00 fe fe fe fe fe 00 00 fe fe fe fe fe fe     ................
    8168:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    8178:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    8188:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    8198:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe 00     ................
    81a8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    81b8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    81c8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    81d8:	fe fe fe fe fe fe fe fe 00 00 00 00 00 00 00 00     ................
    81e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    81f8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    8208:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    8218:	fe fe fe fe fe fe fe fe 00 00 fe fe fe fe fe fe     ................
    8228:	fe fe fe fe fe fe 00 ff fe fe fe fe fe fe 00 ff     ................
    8238:	fe fe fe fe fe 00 00 ff fe fe fe fe 00 ff 00 ff     ................
    8248:	fe fe fe 00 ff ff 00 ff fe fe fe 00 ff ff 00 ff     ................
    8258:	fe fe fe 00 ff ff 00 ff fe fe fe 00 ff ff 00 ff     ................
    8268:	ff ff 00 00 ff ff ff 00 ff ff 00 00 ff ff ff 00     ................
    8278:	ff ff 00 00 ff ff ff 00 ff ff ff ff ff ff ff ff     ................
    8288:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8298:	ff ff 00 00 ff 00 00 ff ff ff 00 00 ff 00 00 ff     ................
    82a8:	00 ff 00 00 fe fe fe fe 00 ff 00 00 00 fe fe fe     ................
    82b8:	00 ff 00 00 ff 00 fe fe ff ff ff ff ff 00 fe fe     ................
    82c8:	ff ff ff ff ff 00 fe fe ff ff ff ff ff 00 fe fe     ................
    82d8:	ff 00 ff ff ff 00 fe fe ff 00 ff ff ff 00 fe fe     ................
    82e8:	fe fe fe fe 00 ff ff ff fe fe fe fe 00 ff ff ff     ................
    82f8:	fe fe fe fe 00 00 ff ff fe fe fe fe fe 00 ff ff     ................
    8308:	fe fe fe fe fe 00 ff ff fe fe fe fe fe fe 00 ff     ................
    8318:	fe fe fe fe fe fe fe 00 fe fe fe fe fe fe fe 00     ................
    8328:	ff ff 00 00 ff 00 00 ff ff ff 00 00 ff 00 00 ff     ................
    8338:	ff ff 00 00 ff 00 00 ff ff ff 00 00 ff 00 00 ff     ................
    8348:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    8358:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    8368:	ff 00 ff ff ff 00 fe fe ff 00 ff ff 00 fe fe fe     ................
    8378:	ff 00 ff ff 00 fe fe fe ff 00 ff ff 00 fe fe fe     ................
    8388:	ff ff 00 00 fe fe fe fe ff ff 00 00 fe fe fe fe     ................
    8398:	00 ff 00 00 fe fe fe fe 00 00 00 00 fe fe fe fe     ................

000083a8 <musicData>:
    83a8:	d0 41 6b 0a 17 14 41 22 88 3c 9e 4c                 .Ak...A".<.L

000083b4 <EEPROMdefault>:
    83b4:	ce 49 43 4b d3 45 4e 20 01 b6 cb 49 56 41 4e 20     .ICK.EN ...IVAN 
    83c4:	20 20 01 a8 c3 4f d3 41 4d 20 20 20 01 a0             ...O.AM   ..

000083d2 <EEPROMError>:
    83d2:	c5 45 50 52 4f 4d 20 20 00 00 c5 52 52 4f 52 20     .EPROM  ...RROR 
    83e2:	20 20 00 00 a0 20 20 20 20 20 20 20 00 00             ...       ..

000083f0 <KonamiCode>:
    83f0:	10 00 10 00 20 00 20 00 40 00 80 00 40 00 80 00     .... . .@...@...
    8400:	01 00 02 01                                         ....

00008404 <BaudLookUpTable>:
    8404:	ba 7c 5c 3d 2e 1e 16 0f                             .|\=....

0000840c <packet_string>:
    840c:	c7 01 00 19 66 0d 0a                                ....f..

00008413 <default_highscore_name>:
    8413:	55 4e 4b 4e 4f 57 4e 20 00                          UNKNOWN .

0000841c <StackSetupTable>:
    841c:	01 00 34 08 06 00 00 02 0d 00 00 08 11 00 00 08     ..4.............
    842c:	15 00 00 08 19 00 00 08 01 06 00 04 05 06 00 04     ................
    843c:	09 06 00 04 0d 06 00 04 11 06 00 04 15 06 00 04     ................
    844c:	19 06 00 04 ff ff 00 04                             ........

00008454 <__c.2821>:
    8454:	51 55 49 54 00                                      QUIT.

00008459 <__c.2819>:
    8459:	4e 45 57 20 48 41 4e 44 00                          NEW HAND.

00008462 <__c.2817>:
    8462:	43 4f 4e 54 49 4e 55 45 00                          CONTINUE.

0000846b <__c.2754>:
    846b:	57 4f 52 4c 44 20 52 45 43 4f 52 44 53 00           WORLD RECORDS.

00008479 <__c.2751>:
    8479:	48 49 47 48 20 53 43 4f 52 45 53 00                 HIGH SCORES.

00008485 <__c.2500>:
    8485:	53 50 41 43 45 00                                   SPACE.

0000848b <__c.2498>:
    848b:	44 45 4c 20 45 4e 44 00                             DEL END.

00008493 <__c.2496>:
    8493:	50 4f 49 4e 54 53 00                                POINTS.

0000849a <__c.2487>:
    849a:	45 4e 54 45 52 20 59 4f 55 52 20 4e 41 4d 45 00     ENTER YOUR NAME.

000084aa <__c.2485>:
    84aa:	54 48 45 20 4c 45 41 44 45 52 20 42 4f 41 52 44     THE LEADER BOARD
	...

000084bb <__c.2483>:
    84bb:	43 4f 4e 47 52 41 54 55 4c 41 54 49 4f 4e 53 20     CONGRATULATIONS 
    84cb:	59 4f 55 20 4d 41 44 45 00                          YOU MADE.

000084d4 <__c.2372>:
    84d4:	47 41 4d 45 20 54 4f 54 41 4c 00                    GAME TOTAL.

000084df <__c.2370>:
    84df:	54 49 4d 45 20 42 4f 4e 55 53 00                    TIME BONUS.

000084ea <__c.2368>:
    84ea:	43 41 52 44 20 53 43 4f 52 45 00                    CARD SCORE.

000084f5 <__c.2282>:
    84f5:	20 43 4c 49 43 4b 20 48 45 52 45 00                  CLICK HERE.

00008501 <__c.2280>:
    8501:	54 4f 20 44 45 41 4c 20 48 41 4e 44 00              TO DEAL HAND.

0000850e <__c.2264>:
    850e:	53 41 56 45 00                                      SAVE.

00008513 <__c.2262>:
    8513:	53 50 45 45 44 00                                   SPEED.

00008519 <__c.2260>:
    8519:	54 49 4d 45 52 20 20 48 49 44 45 20 20 53 48 4f     TIMER  HIDE  SHO
    8529:	57 00                                               W.

0000852b <__c.2258>:
    852b:	4d 55 53 49 43 20 20 20 20 20 20 20 20 4f 46 46     MUSIC        OFF
	...

0000853c <__c.2256>:
    853c:	44 52 41 57 20 20 20 4f 4e 45 20 20 20 54 48 52     DRAW   ONE   THR
    854c:	45 45 00                                            EE.

0000854f <__c.2254>:
    854f:	44 45 43 4b 00                                      DECK.

00008554 <__c.2252>:
    8554:	57 45 4c 43 4f 4d 45 20 54 4f 20 53 4f 4c 49 54     WELCOME TO SOLIT
    8564:	41 49 52 45 00                                      AIRE.

00008569 <__c.2203>:
    8569:	42 4f 58 00                                         BOX.

0000856d <__c.2201>:
    856d:	55 5a 45 00                                         UZE.

00008571 <__c.1923>:
    8571:	0d 0a 00                                            ...

00008574 <__c.1921>:
    8574:	41 54 2b 43 49 50 53 45 4e 44 3d 37 0d 0a 00        AT+CIPSEND=7...

00008583 <__c.1919>:
    8583:	0d 0a 00                                            ...

00008586 <__c.1913>:
    8586:	41 54 2b 43 49 50 53 45 4e 44 3d 30 2c 31 32 0d     AT+CIPSEND=0,12.
    8596:	0a 00                                               ..

00008598 <__c.1911>:
    8598:	0d 0a 00                                            ...

0000859b <__c.1909>:
    859b:	41 54 2b 43 49 50 53 54 41 52 54 3d 30 2c 22 54     AT+CIPSTART=0,"T
    85ab:	43 50 22 2c 22 75 7a 65 62 6f 78 2e 6e 65 74 22     CP","uzebox.net"
    85bb:	2c 35 31 36 39 37 0d 0a 00                          ,51697...

000085c4 <__c.1907>:
    85c4:	41 54 2b 43 49 50 4d 55 58 3d 30 0d 0a 00           AT+CIPMUX=0...

000085d2 <__c.1905>:
    85d2:	41 54 2b 43 57 4a 41 50 0d 0a 00                    AT+CWJAP...

000085dd <__c.1903>:
    85dd:	41 54 2b 43 49 4f 42 41 55 44 3d 35 37 36 30 30     AT+CIOBAUD=57600
    85ed:	0d 0a 00                                            ...

000085f0 <__ctors_end>:
    85f0:	11 24       	eor	r1, r1
    85f2:	1f be       	out	0x3f, r1	; 63
    85f4:	cf ef       	ldi	r28, 0xFF	; 255
    85f6:	d0 e1       	ldi	r29, 0x10	; 16
    85f8:	de bf       	out	0x3e, r29	; 62
    85fa:	cd bf       	out	0x3d, r28	; 61

000085fc <__do_copy_data>:
    85fc:	11 e0       	ldi	r17, 0x01	; 1
    85fe:	a0 e0       	ldi	r26, 0x00	; 0
    8600:	b1 e0       	ldi	r27, 0x01	; 1
    8602:	e4 e8       	ldi	r30, 0x84	; 132
    8604:	fb ee       	ldi	r31, 0xEB	; 235
    8606:	02 c0       	rjmp	.+4      	; 0x860c <.do_copy_data_start>

00008608 <.do_copy_data_loop>:
    8608:	05 90       	lpm	r0, Z+
    860a:	0d 92       	st	X+, r0

0000860c <.do_copy_data_start>:
    860c:	aa 31       	cpi	r26, 0x1A	; 26
    860e:	b1 07       	cpc	r27, r17
    8610:	d9 f7       	brne	.-10     	; 0x8608 <.do_copy_data_loop>

00008612 <__do_clear_bss>:
    8612:	1d e0       	ldi	r17, 0x0D	; 13
    8614:	a0 e2       	ldi	r26, 0x20	; 32
    8616:	b1 e0       	ldi	r27, 0x01	; 1
    8618:	01 c0       	rjmp	.+2      	; 0x861c <.do_clear_bss_start>

0000861a <.do_clear_bss_loop>:
    861a:	1d 92       	st	X+, r1

0000861c <.do_clear_bss_start>:
    861c:	a1 3f       	cpi	r26, 0xF1	; 241
    861e:	b1 07       	cpc	r27, r17
    8620:	e1 f7       	brne	.-8      	; 0x861a <.do_clear_bss_loop>

00008622 <wdt_init>:

void wdt_init(void) __attribute__((naked)) __attribute__((section(".init7")));
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));

void wdt_init(void)
{
    8622:	23 d4       	rcall	.+2118   	; 0x8e6a <wdt_randomize>

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    8624:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    8626:	88 e1       	ldi	r24, 0x18	; 24
    8628:	0f b6       	in	r0, 0x3f	; 63
    862a:	f8 94       	cli
    862c:	80 93 60 00 	sts	0x0060, r24
    8630:	10 92 60 00 	sts	0x0060, r1
    8634:	0f be       	out	0x3f, r0	; 63

00008636 <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    8636:	44 d5       	rcall	.+2696   	; 0x90c0 <isEepromFormatted>
    8638:	88 23       	and	r24, r24
    863a:	09 f4       	brne	.+2      	; 0x863e <Initialize+0x8>
    863c:	95 d5       	rcall	.+2858   	; 0x9168 <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    863e:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8640:	91 e0       	ldi	r25, 0x01	; 1
    8642:	90 93 d5 08 	sts	0x08D5, r25
		tr4_barrel_hi=1;		
    8646:	90 93 d6 08 	sts	0x08D6, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    864a:	90 93 d4 08 	sts	0x08D4, r25
			return -1;	//no data in buffer
		}
	}

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    864e:	10 92 ff 08 	sts	0x08FF, r1
		uart_rx_head=0;
    8652:	10 92 fd 08 	sts	0x08FD, r1
			return -1; //buffer full
		}
	}

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    8656:	10 92 80 09 	sts	0x0980, r1
		uart_tx_head=0;
    865a:	10 92 fe 08 	sts	0x08FE, r1
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    865e:	10 92 c1 08 	sts	0x08C1, r1
    8662:	10 92 c7 08 	sts	0x08C7, r1
    8666:	10 92 cd 08 	sts	0x08CD, r1
    866a:	10 92 d3 08 	sts	0x08D3, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    866e:	10 92 8e 08 	sts	0x088E, r1
	sync_flags=0;
    8672:	10 92 90 08 	sts	0x0890, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    8676:	82 e1       	ldi	r24, 0x12	; 18
    8678:	80 93 8f 08 	sts	0x088F, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    867c:	80 ed       	ldi	r24, 0xD0	; 208
    867e:	80 93 96 08 	sts	0x0896, r24
	first_render_line=FIRST_RENDER_LINE;
    8682:	8c e1       	ldi	r24, 0x1C	; 28
    8684:	80 93 95 08 	sts	0x0895, r24

	joypad1_status_hi=0;
    8688:	10 92 9a 08 	sts	0x089A, r1
    868c:	10 92 99 08 	sts	0x0899, r1
	joypad2_status_hi=0;
    8690:	10 92 9e 08 	sts	0x089E, r1
    8694:	10 92 9d 08 	sts	0x089D, r1
	sound_enabled=1;
    8698:	90 93 c0 08 	sts	0x08C0, r25

	InitializeVideoMode();
    869c:	0e 94 18 52 	call	0xa430	; 0xa430 <InitializeVideoMode>
    86a0:	20 e9       	ldi	r18, 0x90	; 144
    86a2:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    86a4:	f9 01       	movw	r30, r18
    86a6:	85 91       	lpm	r24, Z+
    86a8:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    86aa:	fc 01       	movw	r30, r24
    86ac:	f0 70       	andi	r31, 0x00	; 0
    86ae:	90 83       	st	Z, r25
    86b0:	2e 5f       	subi	r18, 0xFE	; 254
    86b2:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    86b4:	80 e0       	ldi	r24, 0x00	; 0
    86b6:	2e 3b       	cpi	r18, 0xBE	; 190
    86b8:	38 07       	cpc	r19, r24
    86ba:	a1 f7       	brne	.-24     	; 0x86a4 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    86bc:	78 94       	sei
	
	DisplayLogo();
    86be:	0e 94 17 52 	call	0xa42e	; 0xa42e <DisplayLogo>
    86c2:	0e 94 07 75 	call	0xea0e	; 0xea0e <main>
    86c6:	0c 94 c0 75 	jmp	0xeb80	; 0xeb80 <_exit>

000086ca <__bad_interrupt>:
    86ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000086ce <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    86ce:	0c e0       	ldi	r16, 0x0C	; 12
    86d0:	0a 95       	dec	r16
    86d2:	f1 f7       	brne	.-4      	; 0x86d0 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    86d4:	e0 e5       	ldi	r30, 0x50	; 80
		ldi ZH,hi8(ram_tiles_restore);
    86d6:	f8 e0       	ldi	r31, 0x08	; 8

		ldi YL,lo8(vram)
    86d8:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    86da:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    86dc:	20 91 ef 09 	lds	r18, 0x09EF


		clr r16
    86e0:	00 27       	eor	r16, r16

000086e2 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    86e2:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    86e4:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    86e6:	ac 0f       	add	r26, r28
		adc XH,YH
    86e8:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    86ea:	1c 91       	ld	r17, X
		std Z+2,r17
    86ec:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    86ee:	02 17       	cp	r16, r18
		brsh noov
    86f0:	08 f4       	brcc	.+2      	; 0x86f4 <noov>
		mov r17,r16
    86f2:	10 2f       	mov	r17, r16

000086f4 <noov>:
	noov:
		st X,r17
    86f4:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    86f6:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    86f8:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    86fa:	00 31       	cpi	r16, 0x10	; 16
		brlo upd_loop ;23
    86fc:	90 f3       	brcs	.-28     	; 0x86e2 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    86fe:	0d e2       	ldi	r16, 0x2D	; 45

00008700 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    8700:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    8702:	1a 95       	dec	r17
		brne .-4
    8704:	f1 f7       	brne	.-4      	; 0x8702 <wait_loop+0x2>

		dec r16
    8706:	0a 95       	dec	r16
		brne wait_loop
    8708:	d9 f7       	brne	.-10     	; 0x8700 <wait_loop>

		lds r2,overlay_tile_table
    870a:	20 90 8c 08 	lds	r2, 0x088C
		lds r3,overlay_tile_table+1
    870e:	30 90 8d 08 	lds	r3, 0x088D
		lds r16,tile_table_lo 
    8712:	00 91 88 08 	lds	r16, 0x0888
		lds r17,tile_table_hi
    8716:	10 91 89 08 	lds	r17, 0x0889
		movw r12,r16
    871a:	68 01       	movw	r12, r16
		movw r6,r16
    871c:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    871e:	8a e1       	ldi	r24, 0x1A	; 26
		ldi YL,lo8(vram)
    8720:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8722:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    8724:	4e 01       	movw	r8, r28
		clr r0
    8726:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    8728:	30 91 8b 08 	lds	r19, 0x088B
		cpi r19,0
    872c:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    872e:	09 f0       	breq	.+2      	; 0x8732 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    8730:	cc e2       	ldi	r28, 0x2C	; 44
		
		breq .+2
    8732:	09 f0       	breq	.+2      	; 0x8736 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    8734:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    8736:	09 f0       	breq	.+2      	; 0x873a <wait_loop+0x3a>
		mov r24,r19
    8738:	83 2f       	mov	r24, r19

		breq .+2
    873a:	09 f0       	breq	.+2      	; 0x873e <wait_loop+0x3e>
		movw r12,r2
    873c:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    873e:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    8740:	a0 2e       	mov	r10, r16
		clr r22
    8742:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    8744:	78 e0       	ldi	r23, 0x08	; 8

00008746 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    8746:	75 d2       	rcall	.+1258   	; 0x8c32 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    8748:	3c e0       	ldi	r19, 0x0C	; 12
    874a:	3a 95       	dec	r19
    874c:	f1 f7       	brne	.-4      	; 0x874a <next_tile_line+0x4>
    874e:	00 00       	nop

		;***draw line***
		call render_tile_line
    8750:	2f d0       	rcall	.+94     	; 0x87b0 <render_tile_line>
    8752:	3f e0       	ldi	r19, 0x0F	; 15

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    8754:	3a 95       	dec	r19
    8756:	f1 f7       	brne	.-4      	; 0x8754 <next_tile_line+0xe>
    8758:	00 00       	nop
    875a:	00 00       	nop
    875c:	aa 94       	dec	r10

		dec r10
    875e:	a9 f0       	breq	.+42     	; 0x878a <frame_end>
		breq frame_end
    8760:	63 95       	inc	r22
	
		inc r22
    8762:	c8 95       	lpm
		lpm ;3 nop
    8764:	68 30       	cpi	r22, 0x08	; 8

		cpi r22,TILE_HEIGHT ;last char line? 1
    8766:	31 f0       	breq	.+12     	; 0x8774 <next_tile_row>
		breq next_tile_row 
    8768:	33 e0       	ldi	r19, 0x03	; 3
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    876a:	3a 95       	dec	r19
    876c:	f1 f7       	brne	.-4      	; 0x876a <next_tile_line+0x24>
    876e:	00 00       	nop
    8770:	00 00       	nop
    8772:	e9 cf       	rjmp	.-46     	; 0x8746 <next_tile_line>

00008774 <next_tile_row>:
		
		rjmp next_tile_line	
    8774:	66 27       	eor	r22, r22

	next_tile_row:
		clr r22		;current char line			;1	
    8776:	00 24       	eor	r0, r0

		clr r0
    8778:	3e e1       	ldi	r19, 0x1E	; 30
		ldi r19,VRAM_TILES_H
    877a:	c3 0f       	add	r28, r19
		add YL,r19
    877c:	d0 1d       	adc	r29, r0
		adc YH,r0
    877e:	8a 95       	dec	r24

		dec r24		;overlay done?
    8780:	09 f4       	brne	.+2      	; 0x8784 <next_tile_row+0x10>
		brne .+2
    8782:	e4 01       	movw	r28, r8
		movw YL,r8	;main vram
    8784:	09 f4       	brne	.+2      	; 0x8788 <next_tile_row+0x14>
		brne .+2
    8786:	63 01       	movw	r12, r6
		movw r12,r6	;main tile table
    8788:	de cf       	rjmp	.-68     	; 0x8746 <next_tile_line>

0000878a <frame_end>:

	
		rjmp next_tile_line
    878a:	36 e0       	ldi	r19, 0x06	; 6

	frame_end:

		WAIT r19,18
    878c:	3a 95       	dec	r19
    878e:	f1 f7       	brne	.-4      	; 0x878c <frame_end+0x2>
    8790:	50 d2       	rcall	.+1184   	; 0x8c32 <hsync_pulse>

		rcall hsync_pulse ;145
    8792:	11 24       	eor	r1, r1
	
		clr r1
    8794:	0e 94 00 52 	call	0xa400	; 0xa400 <RestoreBackground>
		call RestoreBackground
    8798:	e0 91 90 08 	lds	r30, 0x0890

		;set vsync flag & flip field
		lds ZL,sync_flags
    879c:	42 e0       	ldi	r20, 0x02	; 2
		ldi r20,SYNC_FLAG_FIELD
    879e:	e1 60       	ori	r30, 0x01	; 1
		ori ZL,SYNC_FLAG_VSYNC
    87a0:	e4 27       	eor	r30, r20
		eor ZL,r20
    87a2:	e0 93 90 08 	sts	0x0890, r30
		sts sync_flags,ZL
    87a6:	e2 e0       	ldi	r30, 0x02	; 2

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    87a8:	e0 93 36 00 	sts	0x0036, r30
		sts _SFR_MEM_ADDR(TIFR1),ZL
    87ac:	11 24       	eor	r1, r1



		clr r1
    87ae:	08 95       	ret

000087b0 <render_tile_line>:


		ret
    87b0:	de 01       	movw	r26, r28
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    87b2:	67 9f       	mul	r22, r23

		mul r22,r23
    87b4:	86 01       	movw	r16, r12

		movw r16,r12 ;current tile table (main or overlay)
    87b6:	00 50       	subi	r16, 0x00	; 0
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    87b8:	14 40       	sbci	r17, 0x04	; 4
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    87ba:	00 0d       	add	r16, r0

		add r16,r0
    87bc:	11 1d       	adc	r17, r1
		adc r17,r1
    87be:	18 01       	movw	r2, r16
		movw r2,r16			;rom tiles
    87c0:	00 e5       	ldi	r16, 0x50	; 80

		ldi r16,lo8(ram_tiles)
    87c2:	14 e0       	ldi	r17, 0x04	; 4
		ldi r17,hi8(ram_tiles)
    87c4:	00 0d       	add	r16, r0
		add r16,r0
    87c6:	11 1d       	adc	r17, r1
		adc r17,r1
    87c8:	28 01       	movw	r4, r16
		movw r4,r16			;ram tiles
    87ca:	30 e4       	ldi	r19, 0x40	; 64

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    87cc:	1e e1       	ldi	r17, 0x1E	; 30
		ldi r17,SCREEN_TILES_H
    87ce:	2d 91       	ld	r18, X+

	    ld r18,X+     	;load next tile # from VRAM
    87d0:	23 9f       	mul	r18, r19

		mul r18,r19 	;tile*width*height
    87d2:	a1 01       	movw	r20, r2
		movw r20,r2		;rom tiles
    87d4:	20 31       	cpi	r18, 0x10	; 16
		
		cpi r18,RAM_TILES_COUNT
    87d6:	08 f4       	brcc	.+2      	; 0x87da <render_tile_line+0x2a>
		brcc .+2
    87d8:	a2 01       	movw	r20, r4
		movw r20,r4		;ram tiles
    87da:	04 0e       	add	r0, r20

	    add r0,r20    ;add title table address +row offset
    87dc:	15 1e       	adc	r1, r21
	    adc r1,r21
    87de:	f0 01       	movw	r30, r0

		movw ZL,r0
    87e0:	20 31       	cpi	r18, 0x10	; 16
		
		cpi r18,RAM_TILES_COUNT
    87e2:	f0 f0       	brcs	.+60     	; 0x8820 <ramloop>

000087e4 <romloop>:
		brcs ramloop
    87e4:	05 91       	lpm	r16, Z+
	

	romloop:
	    lpm r16,Z+
    87e6:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    87e8:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    87ea:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    87ec:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    87ee:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    87f0:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    87f2:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    87f4:	20 31       	cpi	r18, 0x10	; 16
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    87f6:	00 00       	nop
		nop
    87f8:	05 91       	lpm	r16, Z+

	    lpm r16,Z+
    87fa:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    87fc:	08 f4       	brcc	.+2      	; 0x8800 <romloop+0x1c>
		brsh .+2		;skip in next tile is in ROM	
    87fe:	a2 01       	movw	r20, r4
		movw r20,r4 	;load RAM title table address +row offset	
    8800:	05 91       	lpm	r16, Z+
   
	    lpm r16,Z+
    8802:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    8804:	04 0e       	add	r0, r20
		add r0,r20		;add title table address +row offset lsb
    8806:	15 1e       	adc	r1, r21
	    adc r1,r21		;add title table address +row offset msb
    8808:	05 91       	lpm	r16, Z+

	    lpm r16,Z+
    880a:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    880c:	20 31       	cpi	r18, 0x10	; 16
		
		cpi r18,RAM_TILES_COUNT	
    880e:	1a 95       	dec	r17
		dec r17			;decrement tiles to draw on line
    8810:	05 91       	lpm	r16, Z+
   
	    lpm r16,Z+
    8812:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    8814:	05 91       	lpm	r16, Z+
	    lpm r16,Z+
    8816:	31 f1       	breq	.+76     	; 0x8864 <end>

		breq end	
    8818:	f0 01       	movw	r30, r0
	    movw ZL,r0   	;copy next tile adress
    881a:	08 b9       	out	0x08, r16	; 8

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    881c:	18 f7       	brcc	.-58     	; 0x87e4 <romloop>
	    brcc romloop
    881e:	00 c0       	rjmp	.+0      	; 0x8820 <ramloop>

00008820 <ramloop>:
	
		rjmp .
    8820:	01 91       	ld	r16, Z+

	ramloop:

	    ld r16,Z+
    8822:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8824:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    8826:	01 91       	ld	r16, Z+

	    ld r16,Z+ 
    8828:	00 00       	nop
		nop   
    882a:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    882c:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    882e:	01 91       	ld	r16, Z+


	    ld r16,Z+
    8830:	00 00       	nop
		nop
    8832:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    8834:	20 31       	cpi	r18, 0x10	; 16
		cpi r18,RAM_TILES_COUNT
    8836:	00 c0       	rjmp	.+0      	; 0x8838 <ramloop+0x18>
   		rjmp .
    8838:	01 91       	ld	r16, Z+

	    ld r16,Z+
    883a:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    883c:	08 f0       	brcs	.+2      	; 0x8840 <ramloop+0x20>
		brcs .+2 
    883e:	a1 01       	movw	r20, r2
		movw r20,r2 	;ROM title table address +row offset	
    8840:	01 91       	ld	r16, Z+
   
   
	    ld r16,Z+
    8842:	04 0e       	add	r0, r20
	    add r0,r20    ;add title table address +row offset
    8844:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8846:	15 1e       	adc	r1, r21
	    adc r1,r21
    8848:	00 c0       	rjmp	.+0      	; 0x884a <ramloop+0x2a>
		rjmp .
    884a:	01 91       	ld	r16, Z+
    
		ld r16,Z+		
    884c:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    884e:	20 31       	cpi	r18, 0x10	; 16
		cpi r18,RAM_TILES_COUNT
    8850:	00 c0       	rjmp	.+0      	; 0x8852 <ramloop+0x32>
		rjmp .  
    8852:	01 91       	ld	r16, Z+

	    ld r16,Z+	
    8854:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8856:	01 91       	ld	r16, Z+
	    ld r16,Z+
    8858:	1a 95       	dec	r17

	    dec r17
    885a:	21 f0       	breq	.+8      	; 0x8864 <end>
	    breq end
    885c:	f0 01       	movw	r30, r0
	
		movw ZL,r0
    885e:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8860:	08 f6       	brcc	.-126    	; 0x87e4 <romloop>
	
	    brcc romloop
    8862:	de cf       	rjmp	.-68     	; 0x8820 <ramloop>

00008864 <end>:
		rjmp ramloop
    8864:	08 b9       	out	0x08, r16	; 8
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8866:	00 27       	eor	r16, r16
		clr r16	
    8868:	c8 95       	lpm
		lpm	
    886a:	00 00       	nop
		nop
    886c:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        
    886e:	08 95       	ret

00008870 <CopyTileToRam>:

		ret
    8870:	20 e4       	ldi	r18, 0x40	; 64
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8872:	e0 91 88 08 	lds	r30, 0x0888

	;compute source adress
	lds ZL,tile_table_lo
    8876:	f0 91 89 08 	lds	r31, 0x0889
	lds ZH,tile_table_hi
    887a:	80 51       	subi	r24, 0x10	; 16
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    887c:	82 9f       	mul	r24, r18
	mul r24,r18
    887e:	e0 0d       	add	r30, r0
	add ZL,r0
    8880:	f1 1d       	adc	r31, r1
	adc ZH,r1
    8882:	a0 e5       	ldi	r26, 0x50	; 80

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8884:	b4 e0       	ldi	r27, 0x04	; 4
	ldi XH,hi8(ram_tiles)
    8886:	62 9f       	mul	r22, r18
	mul r22,r18
    8888:	a0 0d       	add	r26, r0
	add XL,r0
    888a:	b1 1d       	adc	r27, r1
	adc XH,r1
    888c:	00 24       	eor	r0, r0

	clr r0
    888e:	05 90       	lpm	r0, Z+
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    8890:	0d 92       	st	X+, r0
    8892:	05 90       	lpm	r0, Z+
    8894:	0d 92       	st	X+, r0
    8896:	05 90       	lpm	r0, Z+
    8898:	0d 92       	st	X+, r0
    889a:	05 90       	lpm	r0, Z+
    889c:	0d 92       	st	X+, r0
    889e:	05 90       	lpm	r0, Z+
    88a0:	0d 92       	st	X+, r0
    88a2:	05 90       	lpm	r0, Z+
    88a4:	0d 92       	st	X+, r0
    88a6:	05 90       	lpm	r0, Z+
    88a8:	0d 92       	st	X+, r0
    88aa:	05 90       	lpm	r0, Z+
    88ac:	0d 92       	st	X+, r0
    88ae:	05 90       	lpm	r0, Z+
    88b0:	0d 92       	st	X+, r0
    88b2:	05 90       	lpm	r0, Z+
    88b4:	0d 92       	st	X+, r0
    88b6:	05 90       	lpm	r0, Z+
    88b8:	0d 92       	st	X+, r0
    88ba:	05 90       	lpm	r0, Z+
    88bc:	0d 92       	st	X+, r0
    88be:	05 90       	lpm	r0, Z+
    88c0:	0d 92       	st	X+, r0
    88c2:	05 90       	lpm	r0, Z+
    88c4:	0d 92       	st	X+, r0
    88c6:	05 90       	lpm	r0, Z+
    88c8:	0d 92       	st	X+, r0
    88ca:	05 90       	lpm	r0, Z+
    88cc:	0d 92       	st	X+, r0
    88ce:	05 90       	lpm	r0, Z+
    88d0:	0d 92       	st	X+, r0
    88d2:	05 90       	lpm	r0, Z+
    88d4:	0d 92       	st	X+, r0
    88d6:	05 90       	lpm	r0, Z+
    88d8:	0d 92       	st	X+, r0
    88da:	05 90       	lpm	r0, Z+
    88dc:	0d 92       	st	X+, r0
    88de:	05 90       	lpm	r0, Z+
    88e0:	0d 92       	st	X+, r0
    88e2:	05 90       	lpm	r0, Z+
    88e4:	0d 92       	st	X+, r0
    88e6:	05 90       	lpm	r0, Z+
    88e8:	0d 92       	st	X+, r0
    88ea:	05 90       	lpm	r0, Z+
    88ec:	0d 92       	st	X+, r0
    88ee:	05 90       	lpm	r0, Z+
    88f0:	0d 92       	st	X+, r0
    88f2:	05 90       	lpm	r0, Z+
    88f4:	0d 92       	st	X+, r0
    88f6:	05 90       	lpm	r0, Z+
    88f8:	0d 92       	st	X+, r0
    88fa:	05 90       	lpm	r0, Z+
    88fc:	0d 92       	st	X+, r0
    88fe:	05 90       	lpm	r0, Z+
    8900:	0d 92       	st	X+, r0
    8902:	05 90       	lpm	r0, Z+
    8904:	0d 92       	st	X+, r0
    8906:	05 90       	lpm	r0, Z+
    8908:	0d 92       	st	X+, r0
    890a:	05 90       	lpm	r0, Z+
    890c:	0d 92       	st	X+, r0
    890e:	05 90       	lpm	r0, Z+
    8910:	0d 92       	st	X+, r0
    8912:	05 90       	lpm	r0, Z+
    8914:	0d 92       	st	X+, r0
    8916:	05 90       	lpm	r0, Z+
    8918:	0d 92       	st	X+, r0
    891a:	05 90       	lpm	r0, Z+
    891c:	0d 92       	st	X+, r0
    891e:	05 90       	lpm	r0, Z+
    8920:	0d 92       	st	X+, r0
    8922:	05 90       	lpm	r0, Z+
    8924:	0d 92       	st	X+, r0
    8926:	05 90       	lpm	r0, Z+
    8928:	0d 92       	st	X+, r0
    892a:	05 90       	lpm	r0, Z+
    892c:	0d 92       	st	X+, r0
    892e:	05 90       	lpm	r0, Z+
    8930:	0d 92       	st	X+, r0
    8932:	05 90       	lpm	r0, Z+
    8934:	0d 92       	st	X+, r0
    8936:	05 90       	lpm	r0, Z+
    8938:	0d 92       	st	X+, r0
    893a:	05 90       	lpm	r0, Z+
    893c:	0d 92       	st	X+, r0
    893e:	05 90       	lpm	r0, Z+
    8940:	0d 92       	st	X+, r0
    8942:	05 90       	lpm	r0, Z+
    8944:	0d 92       	st	X+, r0
    8946:	05 90       	lpm	r0, Z+
    8948:	0d 92       	st	X+, r0
    894a:	05 90       	lpm	r0, Z+
    894c:	0d 92       	st	X+, r0
    894e:	05 90       	lpm	r0, Z+
    8950:	0d 92       	st	X+, r0
    8952:	05 90       	lpm	r0, Z+
    8954:	0d 92       	st	X+, r0
    8956:	05 90       	lpm	r0, Z+
    8958:	0d 92       	st	X+, r0
    895a:	05 90       	lpm	r0, Z+
    895c:	0d 92       	st	X+, r0
    895e:	05 90       	lpm	r0, Z+
    8960:	0d 92       	st	X+, r0
    8962:	05 90       	lpm	r0, Z+
    8964:	0d 92       	st	X+, r0
    8966:	05 90       	lpm	r0, Z+
    8968:	0d 92       	st	X+, r0
    896a:	05 90       	lpm	r0, Z+
    896c:	0d 92       	st	X+, r0
    896e:	05 90       	lpm	r0, Z+
    8970:	0d 92       	st	X+, r0
    8972:	05 90       	lpm	r0, Z+
    8974:	0d 92       	st	X+, r0
    8976:	05 90       	lpm	r0, Z+
    8978:	0d 92       	st	X+, r0
    897a:	05 90       	lpm	r0, Z+
    897c:	0d 92       	st	X+, r0
    897e:	05 90       	lpm	r0, Z+
    8980:	0d 92       	st	X+, r0
    8982:	05 90       	lpm	r0, Z+
    8984:	0d 92       	st	X+, r0
    8986:	05 90       	lpm	r0, Z+
    8988:	0d 92       	st	X+, r0
    898a:	05 90       	lpm	r0, Z+
    898c:	0d 92       	st	X+, r0
    898e:	11 24       	eor	r1, r1


	clr r1
    8990:	08 95       	ret

00008992 <BlitSprite>:
	ret
    8992:	0f 93       	push	r16
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8994:	1f 93       	push	r17
	push r17
    8996:	cf 93       	push	r28
	push YL
    8998:	df 93       	push	r29
	push YH
    899a:	94 e0       	ldi	r25, 0x04	; 4

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    899c:	89 9f       	mul	r24, r25
	mul r24,r25
    899e:	ec e2       	ldi	r30, 0x2C	; 44

	ldi ZL,lo8(sprites)	
    89a0:	f4 e0       	ldi	r31, 0x04	; 4
	ldi ZH,hi8(sprites)	
    89a2:	e0 0d       	add	r30, r0
	add ZL,r0
    89a4:	f1 1d       	adc	r31, r1
	adc ZH,r1
    89a6:	03 81       	ldd	r16, Z+3	; 0x03

	ldd r16,Z+sprFlags
    89a8:	82 81       	ldd	r24, Z+2	; 0x02

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    89aa:	e0 e4       	ldi	r30, 0x40	; 64
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    89ac:	8e 9f       	mul	r24, r30
	mul r24,r30
    89ae:	d0 01       	movw	r26, r0
	movw r26,r0
    89b0:	98 e0       	ldi	r25, 0x08	; 8
	
	;get tile bank addr
	ldi r25,4*2
    89b2:	09 9f       	mul	r16, r25
	mul r16,r25
    89b4:	c0 e8       	ldi	r28, 0x80	; 128
	ldi YL,lo8(sprites_tile_banks)	
    89b6:	d8 e0       	ldi	r29, 0x08	; 8
	ldi YH,hi8(sprites_tile_banks)	
    89b8:	00 24       	eor	r0, r0
	clr r0
    89ba:	c1 0d       	add	r28, r1
	add YL,r1
    89bc:	d0 1d       	adc	r29, r0
	adc YH,r0		
    89be:	e8 81       	ld	r30, Y
	ldd ZL,Y+0
    89c0:	f9 81       	ldd	r31, Y+1	; 0x01
	ldd ZH,Y+1
    89c2:	ea 0f       	add	r30, r26
	add ZL,r26	;tile data src
    89c4:	fb 1f       	adc	r31, r27
	adc ZH,r27
    89c6:	a0 e5       	ldi	r26, 0x50	; 80
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    89c8:	b4 e0       	ldi	r27, 0x04	; 4
	ldi XH,hi8(ram_tiles)
    89ca:	90 e4       	ldi	r25, 0x40	; 64
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    89cc:	69 9f       	mul	r22, r25
	mul r22,r25
    89ce:	a0 0d       	add	r26, r0
	add XL,r0
    89d0:	b1 1d       	adc	r27, r1
	adc XH,r1
    89d2:	11 24       	eor	r1, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    89d4:	dd 27       	eor	r29, r29
	clr YH		;hi8(srcXdiff)
    89d6:	40 30       	cpi	r20, 0x00	; 0

	cpi r20,0	
    89d8:	51 f4       	brne	.+20     	; 0x89ee <x_2nd_tile>
	brne x_2nd_tile
    89da:	a2 0f       	add	r26, r18
	
	add XL,r18	;dest+=dx
    89dc:	b1 1d       	adc	r27, r1
	adc XH,r1
    89de:	82 2f       	mov	r24, r18
	mov r24,r18	;destXdiff=dx
    89e0:	c2 2f       	mov	r28, r18
	mov YL,r18	;srcXdiff=dx
    89e2:	00 ff       	sbrs	r16, 0

	sbrs r16,SPRITE_FLIP_X_BIT
    89e4:	11 c0       	rjmp	.+34     	; 0x8a08 <x_check_end>
	rjmp x_check_end
    89e6:	37 96       	adiw	r30, 0x07	; 7

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    89e8:	c0 e1       	ldi	r28, 0x10	; 16
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    89ea:	c2 1b       	sub	r28, r18
	sub YL,r18	
    89ec:	0d c0       	rjmp	.+26     	; 0x8a08 <x_check_end>

000089ee <x_2nd_tile>:
	rjmp x_check_end
    89ee:	88 e0       	ldi	r24, 0x08	; 8

x_2nd_tile:
	ldi r24,TILE_WIDTH
    89f0:	82 1b       	sub	r24, r18
	sub r24,r18		;8-DX = xdiff for dest
    89f2:	00 fd       	sbrc	r16, 0

	sbrc r16,SPRITE_FLIP_X_BIT
    89f4:	04 c0       	rjmp	.+8      	; 0x89fe <x2_flip_x>
	rjmp x2_flip_x
    89f6:	c8 2f       	mov	r28, r24

	mov YL,r24		;srcXdiff=destXdiff;
    89f8:	e8 0f       	add	r30, r24
	add ZL,r24		;src+=destXdiff;
    89fa:	f1 1d       	adc	r31, r1
	adc ZH,r1	
    89fc:	05 c0       	rjmp	.+10     	; 0x8a08 <x_check_end>

000089fe <x2_flip_x>:
	rjmp x_check_end
    89fe:	c8 e0       	ldi	r28, 0x08	; 8

x2_flip_x:
	ldi YL,TILE_WIDTH
    8a00:	c2 0f       	add	r28, r18
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    8a02:	e2 0f       	add	r30, r18
	add ZL,r18		;src+=dx;
    8a04:	f1 1d       	adc	r31, r1
	adc ZH,r1
    8a06:	31 97       	sbiw	r30, 0x01	; 1

00008a08 <x_check_end>:
	sbiw ZL,1		;src--;
    8a08:	50 30       	cpi	r21, 0x00	; 0
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    8a0a:	41 f4       	brne	.+16     	; 0x8a1c <y_2nd_tile>
	brne y_2nd_tile
    8a0c:	98 e0       	ldi	r25, 0x08	; 8

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    8a0e:	93 9f       	mul	r25, r19
	mul r25,r19			
    8a10:	a0 0d       	add	r26, r0
	add XL,r0
    8a12:	b1 1d       	adc	r27, r1
	adc XH,r1
    8a14:	93 2f       	mov	r25, r19

	mov r25,r19			;ydiff=dy
    8a16:	01 fd       	sbrc	r16, 1

	sbrc r16,SPRITE_FLIP_Y_BIT
    8a18:	f8 96       	adiw	r30, 0x38	; 56
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    8a1a:	0a c0       	rjmp	.+20     	; 0x8a30 <y_check_end>

00008a1c <y_2nd_tile>:

	rjmp y_check_end
    8a1c:	98 e0       	ldi	r25, 0x08	; 8

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    8a1e:	93 1b       	sub	r25, r19
	sub r25,r19	
    8a20:	63 2f       	mov	r22, r19
	
	mov r22,r19			;temp=dy-1
    8a22:	6a 95       	dec	r22
	dec r22
    8a24:	01 ff       	sbrs	r16, 1
	sbrs r16,SPRITE_FLIP_Y_BIT
    8a26:	69 2f       	mov	r22, r25
	mov r22,r25			;temp=ydiff
    8a28:	58 e0       	ldi	r21, 0x08	; 8

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    8a2a:	56 9f       	mul	r21, r22
	mul r21,r22
    8a2c:	e0 0d       	add	r30, r0
	add ZL,r0
    8a2e:	f1 1d       	adc	r31, r1

00008a30 <y_check_end>:
	adc ZH,r1	
    8a30:	6f ef       	ldi	r22, 0xFF	; 255
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    8a32:	7f ef       	ldi	r23, 0xFF	; 255
	ser r23
    8a34:	00 ff       	sbrs	r16, 0
	sbrs r16,SPRITE_FLIP_X_BIT
    8a36:	61 e0       	ldi	r22, 0x01	; 1
	ldi r22,1	;step=1
    8a38:	00 ff       	sbrs	r16, 0
	sbrs r16,SPRITE_FLIP_X_BIT
    8a3a:	77 27       	eor	r23, r23
	clr r23
    8a3c:	01 fd       	sbrc	r16, 1

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    8a3e:	60 97       	sbiw	r28, 0x10	; 16
	sbiw YL,(TILE_WIDTH*2)
    8a40:	11 24       	eor	r1, r1
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    8a42:	3e ef       	ldi	r19, 0xFE	; 254
	ldi r19,TRANSLUCENT_COLOR
    8a44:	58 e0       	ldi	r21, 0x08	; 8

	ldi r21,TILE_HEIGHT
    8a46:	59 1b       	sub	r21, r25

00008a48 <y_loop>:
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    8a48:	48 e0       	ldi	r20, 0x08	; 8

y_loop:
	ldi r20,TILE_WIDTH
    8a4a:	48 1b       	sub	r20, r24

00008a4c <x_loop>:
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    8a4c:	24 91       	lpm	r18, Z+

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    8a4e:	23 13       	cpse	r18, r19
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    8a50:	2c 93       	st	X, r18
	st X,r18		;*dest=px;
    8a52:	11 96       	adiw	r26, 0x01	; 1
	adiw XL,1
    8a54:	e6 0f       	add	r30, r22
	add ZL,r22		;src+=step;
    8a56:	f7 1f       	adc	r31, r23
	adc ZH,r23
    8a58:	4a 95       	dec	r20
	dec r20
    8a5a:	c1 f7       	brne	.-16     	; 0x8a4c <x_loop>
	brne x_loop
    8a5c:	ec 0f       	add	r30, r28

	add ZL,YL		;src+=srcXdiff
    8a5e:	fd 1f       	adc	r31, r29
	adc ZH,YH
    8a60:	a8 0f       	add	r26, r24
	add XL,r24		;dest+=destXdiff
    8a62:	b1 1d       	adc	r27, r1
	adc XH,r1
    8a64:	5a 95       	dec	r21
	dec r21
    8a66:	81 f7       	brne	.-32     	; 0x8a48 <y_loop>
	brne y_loop
    8a68:	df 91       	pop	r29


	pop YH
    8a6a:	cf 91       	pop	r28
	pop YL
    8a6c:	1f 91       	pop	r17
	pop r17
    8a6e:	0f 91       	pop	r16
	pop r16
    8a70:	08 95       	ret

00008a72 <__vector_13>:
	ret
    8a72:	0f 92       	push	r0

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8a74:	1f 92       	push	r1
	push r1
    8a76:	ef 93       	push	r30
	push ZL;2
    8a78:	ff 93       	push	r31
	push ZH;2
    8a7a:	ef b7       	in	r30, 0x3f	; 63
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8a7c:	ef 93       	push	r30
	push ZL ;2		
    8a7e:	e0 91 84 00 	lds	r30, 0x0084

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8a82:	e2 51       	subi	r30, 0x12	; 18
	subi ZL,0x12 ;MIN_INT_LATENCY
    8a84:	f1 e0       	ldi	r31, 0x01	; 1

00008a86 <latency_loop>:

	ldi ZH,1
    8a86:	ef 17       	cp	r30, r31
latency_loop:
	cp ZL,ZH
    8a88:	00 f0       	brcs	.+0      	; 0x8a8a <latency_loop+0x4>
	brlo .		;advance PC to next instruction	
    8a8a:	f3 95       	inc	r31
	inc ZH
    8a8c:	fa 30       	cpi	r31, 0x0A	; 10
	cpi ZH,10
    8a8e:	d8 f3       	brcs	.-10     	; 0x8a86 <latency_loop>
	brlo latency_loop
    8a90:	00 c0       	rjmp	.+0      	; 0x8a92 <latency_loop+0xc>
	jmp .
    8a92:	e0 91 8f 08 	lds	r30, 0x088F
	
	;decrement sync pulse counter
	lds ZL,sync_pulse
    8a96:	ea 95       	dec	r30
    8a98:	e0 93 8f 08 	sts	0x088F, r30
	dec ZL
	sts sync_pulse,ZL
    8a9c:	f0 91 8e 08 	lds	r31, 0x088E

	;process sync phases
	lds ZH,sync_phase
    8aa0:	f0 fd       	sbrc	r31, 0
    8aa2:	54 c0       	rjmp	.+168    	; 0x8b4c <sync_hsync>
	sbrc ZH,0
    8aa4:	ec 30       	cpi	r30, 0x0C	; 12
	rjmp sync_hsync
    8aa6:	90 f0       	brcs	.+36     	; 0x8acc <sync_eq>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8aa8:	f3 e0       	ldi	r31, 0x03	; 3
	brlo sync_eq
    8aaa:	f0 93 89 00 	sts	0x0089, r31

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8aae:	fd e8       	ldi	r31, 0x8D	; 141
    8ab0:	f0 93 88 00 	sts	0x0088, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8ab4:	e0 fb       	bst	r30, 0
    8ab6:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8ab8:	1e f4       	brtc	.+6      	; 0x8ac0 <sync_pre_eq_no_sound_update>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8aba:	e1 e0       	ldi	r30, 0x01	; 1
	brtc sync_pre_eq_no_sound_update
    8abc:	c9 d0       	rcall	.+402    	; 0x8c50 <update_sound>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8abe:	b2 c0       	rjmp	.+356    	; 0x8c24 <sync_end>

00008ac0 <sync_pre_eq_no_sound_update>:
	call update_sound
    8ac0:	e5 e1       	ldi	r30, 0x15	; 21
    8ac2:	ea 95       	dec	r30
	rjmp sync_end
    8ac4:	f1 f7       	brne	.-4      	; 0x8ac2 <sync_pre_eq_no_sound_update+0x2>

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8ac6:	00 00       	nop
    8ac8:	28 9a       	sbi	0x05, 0	; 5
    8aca:	ac c0       	rjmp	.+344    	; 0x8c24 <sync_end>

00008acc <sync_eq>:
    8acc:	e6 30       	cpi	r30, 0x06	; 6
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8ace:	30 f1       	brcs	.+76     	; 0x8b1c <sync_post_eq>
		
	rjmp sync_end
    8ad0:	00 c0       	rjmp	.+0      	; 0x8ad2 <sync_eq+0x6>
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8ad2:	00 c0       	rjmp	.+0      	; 0x8ad4 <sync_eq+0x8>
	brlo sync_post_eq
    8ad4:	28 98       	cbi	0x05, 0	; 5

	rjmp .
    8ad6:	e0 fb       	bst	r30, 0
	rjmp .
    8ad8:	e4 e0       	ldi	r30, 0x04	; 4

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8ada:	0e f4       	brtc	.+2      	; 0x8ade <sync_eq_skip>

	bst ZL,0
    8adc:	b9 d0       	rcall	.+370    	; 0x8c50 <update_sound>

00008ade <sync_eq_skip>:
	ldi ZL,4
    8ade:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8ae0:	e0 93 36 00 	sts	0x0036, r30
	
	call update_sound
    8ae4:	e6 e0       	ldi	r30, 0x06	; 6
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8ae6:	e0 93 6f 00 	sts	0x006F, r30
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8aea:	9c c0       	rjmp	.+312    	; 0x8c24 <sync_end>

00008aec <__vector_14>:
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8aec:	ef 93       	push	r30
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8aee:	ef b7       	in	r30, 0x3f	; 63
    8af0:	ef 93       	push	r30

	rjmp sync_end
    8af2:	e0 91 84 00 	lds	r30, 0x0084
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8af6:	ed 55       	subi	r30, 0x5D	; 93
	push ZL ;2		
    8af8:	e1 30       	cpi	r30, 0x01	; 1

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8afa:	00 f0       	brcs	.+0      	; 0x8afc <__vector_14+0x10>
    8afc:	e2 30       	cpi	r30, 0x02	; 2
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    8afe:	00 f0       	brcs	.+0      	; 0x8b00 <__vector_14+0x14>

	cpi ZL,1
    8b00:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    8b02:	00 f0       	brcs	.+0      	; 0x8b04 <__vector_14+0x18>

	cpi ZL,2
    8b04:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    8b06:	00 f0       	brcs	.+0      	; 0x8b08 <__vector_14+0x1c>

	cpi ZL,3
    8b08:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    8b0a:	00 f0       	brcs	.+0      	; 0x8b0c <__vector_14+0x20>

	cpi ZL,4
    8b0c:	28 9a       	sbi	0x05, 0	; 5
	brlo .		;advance PC to next instruction
    8b0e:	e2 e0       	ldi	r30, 0x02	; 2

	cpi ZL,5
    8b10:	e0 93 6f 00 	sts	0x006F, r30
	brlo .		;advance PC to next instruction

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8b14:	ef 91       	pop	r30
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8b16:	ef bf       	out	0x3f, r30	; 63
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8b18:	ef 91       	pop	r30
    8b1a:	18 95       	reti

00008b1c <sync_post_eq>:
	
	;restore flags
	pop ZL
    8b1c:	00 c0       	rjmp	.+0      	; 0x8b1e <sync_post_eq+0x2>
	out _SFR_IO_ADDR(SREG),ZL	
    8b1e:	e0 fb       	bst	r30, 0
	pop ZL
    8b20:	28 98       	cbi	0x05, 0	; 5
	reti
    8b22:	1e f4       	brtc	.+6      	; 0x8b2a <sync_post_eq_no_sound_update>
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8b24:	e1 e0       	ldi	r30, 0x01	; 1

	bst ZL,0
    8b26:	94 d0       	rcall	.+296    	; 0x8c50 <update_sound>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8b28:	05 c0       	rjmp	.+10     	; 0x8b34 <sync_pre_eq_cont>

00008b2a <sync_post_eq_no_sound_update>:
	brtc sync_post_eq_no_sound_update
    8b2a:	e5 e1       	ldi	r30, 0x15	; 21
	ldi ZL,1	
    8b2c:	ea 95       	dec	r30
	call update_sound
    8b2e:	f1 f7       	brne	.-4      	; 0x8b2c <sync_post_eq_no_sound_update+0x2>
    8b30:	00 00       	nop
	rjmp sync_pre_eq_cont
    8b32:	28 9a       	sbi	0x05, 0	; 5

00008b34 <sync_pre_eq_cont>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8b34:	e0 91 8f 08 	lds	r30, 0x088F
    8b38:	e0 30       	cpi	r30, 0x00	; 0
    8b3a:	09 f0       	breq	.+2      	; 0x8b3e <sync_pre_eq_cont+0xa>

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8b3c:	73 c0       	rjmp	.+230    	; 0x8c24 <sync_end>

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8b3e:	ed ef       	ldi	r30, 0xFD	; 253
    8b40:	e0 93 8f 08 	sts	0x088F, r30
	cpi ZL,0
	breq .+2 ;skip rjmp
    8b44:	e1 e0       	ldi	r30, 0x01	; 1
	rjmp sync_end
    8b46:	e0 93 8e 08 	sts	0x088E, r30
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
	sts sync_pulse,ZL
    8b4a:	6c c0       	rjmp	.+216    	; 0x8c24 <sync_end>

00008b4c <sync_hsync>:
    8b4c:	e7 e0       	ldi	r30, 0x07	; 7
	ldi ZL,1
    8b4e:	e0 93 89 00 	sts	0x0089, r30
	sts sync_phase,ZL
    8b52:	eb e1       	ldi	r30, 0x1B	; 27
	
	rjmp sync_end
    8b54:	e0 93 88 00 	sts	0x0088, r30
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8b58:	00 c0       	rjmp	.+0      	; 0x8b5a <sync_hsync+0xe>
    8b5a:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,lo8(HDRIVE_CL)
    8b5c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8b5e:	00 c0       	rjmp	.+0      	; 0x8b60 <sync_hsync+0x14>
    8b60:	77 d0       	rcall	.+238    	; 0x8c50 <update_sound>
	rjmp .
    8b62:	fd ef       	ldi	r31, 0xFD	; 253

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8b64:	00 90 95 08 	lds	r0, 0x0895
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
	rjmp .
    8b68:	f0 19       	sub	r31, r0
	call update_sound
    8b6a:	e0 91 8f 08 	lds	r30, 0x088F

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8b6e:	ef 17       	cp	r30, r31
	lds r0,first_render_line
    8b70:	d8 f4       	brcc	.+54     	; 0x8ba8 <no_render>
    8b72:	fd ef       	ldi	r31, 0xFD	; 253
	sub ZH,r0				
    8b74:	00 90 95 08 	lds	r0, 0x0895
	lds ZL,sync_pulse
    8b78:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8b7a:	00 90 96 08 	lds	r0, 0x0896
	brsh no_render

	ldi ZH,SYNC_HSYNC_PULSES
    8b7e:	f0 19       	sub	r31, r0
	lds r0,first_render_line
    8b80:	ef 17       	cp	r30, r31
    8b82:	90 f0       	brcs	.+36     	; 0x8ba8 <no_render>
	sub ZH,r0				
    8b84:	ed e1       	ldi	r30, 0x1D	; 29
	lds r0,render_lines_count
    8b86:	ff 27       	eor	r31, r31

00008b88 <push_loop>:
    8b88:	00 80       	ld	r0, Z
	sub ZH,r0			
    8b8a:	0f 92       	push	r0
	cp ZL,ZH
    8b8c:	ea 95       	dec	r30
	brlo no_render
    8b8e:	e1 f7       	brne	.-8      	; 0x8b88 <push_loop>

	;push r1-r29
	ldi ZL,29
    8b90:	05 e0       	ldi	r16, 0x05	; 5
	clr ZH
    8b92:	0a 95       	dec	r16
push_loop:
	ld r0,Z	;load value from register file
    8b94:	f1 f7       	brne	.-4      	; 0x8b92 <push_loop+0xa>
	push r0
    8b96:	00 00       	nop
	dec ZL
    8b98:	00 00       	nop
	brne push_loop	
    8b9a:	99 dd       	rcall	.-1230   	; 0x86ce <sub_video_mode3>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    8b9c:	e1 e0       	ldi	r30, 0x01	; 1
    8b9e:	ff 27       	eor	r31, r31

00008ba0 <pop_loop>:
    8ba0:	0f 90       	pop	r0
    8ba2:	01 92       	st	Z+, r0
    8ba4:	ee 31       	cpi	r30, 0x1E	; 30

	call VMODE_FUNC		;TCNT1=0x234
    8ba6:	e0 f3       	brcs	.-8      	; 0x8ba0 <pop_loop>

00008ba8 <no_render>:
    8ba8:	e0 91 8f 08 	lds	r30, 0x088F

	;pop r1-r29
	ldi ZL,1
	clr ZH
    8bac:	e0 30       	cpi	r30, 0x00	; 0
pop_loop:
	pop r0
    8bae:	09 f0       	breq	.+2      	; 0x8bb2 <no_render+0xa>
	st Z+,r0 ;store value to register file
    8bb0:	39 c0       	rjmp	.+114    	; 0x8c24 <sync_end>
	cpi ZL,30
    8bb2:	2f 93       	push	r18
	brlo pop_loop	
    8bb4:	3f 93       	push	r19

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8bb6:	4f 93       	push	r20
    8bb8:	5f 93       	push	r21
	cpi ZL,0
    8bba:	6f 93       	push	r22
	breq .+2
    8bbc:	7f 93       	push	r23
	rjmp sync_end
    8bbe:	8f 93       	push	r24
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8bc0:	9f 93       	push	r25
	push r19
    8bc2:	af 93       	push	r26
	push r20
    8bc4:	bf 93       	push	r27
	push r21
    8bc6:	78 94       	sei
	push r22
    8bc8:	11 24       	eor	r1, r1
	push r23
    8bca:	ee 27       	eor	r30, r30
	push r24
    8bcc:	e0 93 8e 08 	sts	0x088E, r30
	push r25
	push r26
    8bd0:	e2 e1       	ldi	r30, 0x12	; 18
	push r27
    8bd2:	e0 93 8f 08 	sts	0x088F, r30

	sei ;must enable ints for re-entrant sync pulses
	clr r1
    8bd6:	80 91 9f 08 	lds	r24, 0x089F

	;set vsync flags
	clr ZL
	sts sync_phase,ZL
    8bda:	90 91 a0 08 	lds	r25, 0x08A0
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8bde:	01 96       	adiw	r24, 0x01	; 1
	sts sync_pulse,ZL
    8be0:	80 93 9f 08 	sts	0x089F, r24



	;increment the vsync counter
	lds r24,vsync_counter
    8be4:	90 93 a0 08 	sts	0x08A0, r25
	lds r25,vsync_counter+1
    8be8:	e0 91 91 08 	lds	r30, 0x0891
	adiw r24,1
    8bec:	f0 91 92 08 	lds	r31, 0x0892
	sts vsync_counter,r24
    8bf0:	e1 15       	cp	r30, r1
	sts vsync_counter+1,r25
    8bf2:	f1 05       	cpc	r31, r1
    8bf4:	09 f0       	breq	.+2      	; 0x8bf8 <no_render+0x50>


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8bf6:	09 95       	icall
    8bf8:	0e 94 42 53 	call	0xa684	; 0xa684 <VideoModeVsync>
	lds ZH,pre_vsync_user_callback+1
    8bfc:	24 d0       	rcall	.+72     	; 0x8c46 <process_music>
	cp  ZL,r1
    8bfe:	11 24       	eor	r1, r1
	cpc ZH,r1
    8c00:	e0 91 93 08 	lds	r30, 0x0893
	breq .+2 
	icall
    8c04:	f0 91 94 08 	lds	r31, 0x0894
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8c08:	e1 15       	cp	r30, r1

	;process music (music, envelopes, etc)
	call process_music
    8c0a:	f1 05       	cpc	r31, r1
    8c0c:	09 f0       	breq	.+2      	; 0x8c10 <no_render+0x68>
	clr r1
    8c0e:	09 95       	icall

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8c10:	bf 91       	pop	r27
    8c12:	af 91       	pop	r26
	lds ZH,post_vsync_user_callback+1
    8c14:	9f 91       	pop	r25
    8c16:	8f 91       	pop	r24
	cp  ZL,r1
    8c18:	7f 91       	pop	r23
	cpc ZH,r1
    8c1a:	6f 91       	pop	r22
	breq .+2 
    8c1c:	5f 91       	pop	r21
	icall
    8c1e:	4f 91       	pop	r20
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8c20:	3f 91       	pop	r19
	pop r26
    8c22:	2f 91       	pop	r18

00008c24 <sync_end>:
	pop r25
    8c24:	ef 91       	pop	r30
	pop r24
    8c26:	ef bf       	out	0x3f, r30	; 63
	pop r23
    8c28:	ff 91       	pop	r31
	pop r22
    8c2a:	ef 91       	pop	r30
	pop r21
    8c2c:	1f 90       	pop	r1
	pop r20
    8c2e:	0f 90       	pop	r0
	pop r19
    8c30:	18 95       	reti

00008c32 <hsync_pulse>:
	pop r18
    8c32:	28 98       	cbi	0x05, 0	; 5
	
sync_end:	
	;restore flags
	pop ZL
    8c34:	e2 e0       	ldi	r30, 0x02	; 2
	out _SFR_IO_ADDR(SREG),ZL
    8c36:	00 c0       	rjmp	.+0      	; 0x8c38 <hsync_pulse+0x6>
	
	pop ZH
    8c38:	0b d0       	rcall	.+22     	; 0x8c50 <update_sound>
	pop ZL
    8c3a:	e0 91 8f 08 	lds	r30, 0x088F
	pop r1
	pop r0
    8c3e:	ea 95       	dec	r30
	reti
    8c40:	e0 93 8f 08 	sts	0x088F, r30
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
	ldi ZL,2
    8c44:	08 95       	ret

00008c46 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8c46:	e0 91 c0 08 	lds	r30, 0x08C0
	sbrc ZL,0
    8c4a:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8c4c:	74 c4       	rjmp	.+2280   	; 0x9536 <ProcessMusic>
    8c4e:	08 95       	ret

00008c50 <update_sound>:
#endif

	ret
    8c50:	0f 93       	push	r16

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8c52:	1f 93       	push	r17
	push r17
    8c54:	2f 93       	push	r18
	push r18
    8c56:	cf 93       	push	r28
	push r28
    8c58:	df 93       	push	r29
	push r29
    8c5a:	2e 2f       	mov	r18, r30

	mov r18,ZL
    8c5c:	00 91 c2 08 	lds	r16, 0x08C2

	;channel 1 
	lds r16,tr1_step_lo
    8c60:	10 91 c4 08 	lds	r17, 0x08C4
	lds r17,tr1_pos_frac
    8c64:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    8c66:	00 91 c3 08 	lds	r16, 0x08C3
	lds r16,tr1_step_hi	
    8c6a:	e0 91 c5 08 	lds	r30, 0x08C5
	lds ZL,tr1_pos_lo
    8c6e:	f0 91 c6 08 	lds	r31, 0x08C6
	lds ZH,tr1_pos_hi 
    8c72:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    8c74:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    8c76:	e0 93 c5 08 	sts	0x08C5, r30
	sts tr1_pos_lo,ZL
    8c7a:	10 93 c4 08 	sts	0x08C4, r17
	sts tr1_pos_frac,r17
    8c7e:	10 91 c1 08 	lds	r17, 0x08C1
	lds r17,tr1_vol
    8c82:	01 03       	mulsu	r16, r17
	mulsu r16,r17;(sample*mixing vol)
    8c84:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend	
    8c86:	c1 2d       	mov	r28, r1
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8c88:	d0 2d       	mov	r29, r0
	mov r29,r0	;set mix buffer msb	
    8c8a:	00 00       	nop
	nop
    8c8c:	00 91 c8 08 	lds	r16, 0x08C8

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8c90:	10 91 ca 08 	lds	r17, 0x08CA
	lds r17,tr2_pos_frac
    8c94:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    8c96:	00 91 c9 08 	lds	r16, 0x08C9
	lds r16,tr2_step_hi	
    8c9a:	e0 91 cb 08 	lds	r30, 0x08CB
	lds ZL,tr2_pos_lo
    8c9e:	f0 91 cc 08 	lds	r31, 0x08CC
	lds ZH,tr2_pos_hi 
    8ca2:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    8ca4:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    8ca6:	e0 93 cb 08 	sts	0x08CB, r30
	sts tr2_pos_lo,ZL
    8caa:	10 93 ca 08 	sts	0x08CA, r17
	sts tr2_pos_frac,r17
    8cae:	10 91 c7 08 	lds	r17, 0x08C7
	lds r17,tr2_vol
    8cb2:	20 fd       	sbrc	r18, 0

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8cb4:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8cb6:	20 ff       	sbrs	r18, 0
	sbrs r18,0								
    8cb8:	00 c0       	rjmp	.+0      	; 0x8cba <update_sound+0x6a>
	rjmp .
    8cba:	01 03       	mulsu	r16, r17
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8cbc:	00 24       	eor	r0, r0
	clr r0
    8cbe:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    8cc0:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8cc2:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb		
    8cc4:	00 91 ce 08 	lds	r16, 0x08CE
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8cc8:	10 91 d0 08 	lds	r17, 0x08D0
	lds r17,tr3_pos_frac
    8ccc:	10 0f       	add	r17, r16
	add	r17,r16				;add step to fractional part of sample pos
    8cce:	00 91 cf 08 	lds	r16, 0x08CF
	lds r16,tr3_step_hi	
    8cd2:	e0 91 d1 08 	lds	r30, 0x08D1
	lds ZL,tr3_pos_lo
    8cd6:	f0 91 d2 08 	lds	r31, 0x08D2
	lds ZH,tr3_pos_hi 
    8cda:	e0 1f       	adc	r30, r16
	adc ZL,r16				;add step to low byte of sample pos
    8cdc:	04 91       	lpm	r16, Z+
	lpm	r16,Z				;load sample
    8cde:	e0 93 d1 08 	sts	0x08D1, r30
	sts tr3_pos_lo,ZL
    8ce2:	10 93 d0 08 	sts	0x08D0, r17
	sts tr3_pos_frac,r17
    8ce6:	10 91 cd 08 	lds	r17, 0x08CD
	lds r17,tr3_vol
    8cea:	01 03       	mulsu	r16, r17
	mulsu r16,r17			;(sample*mixing vol)
    8cec:	00 08       	sbc	r0, r0
	sbc r0,r0				;sign extend
    8cee:	c1 0d       	add	r28, r1
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8cf0:	d0 1d       	adc	r29, r0
	adc r29,r0				;ajust mix buffer msb
    8cf2:	00 91 d5 08 	lds	r16, 0x08D5
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8cf6:	10 91 d6 08 	lds	r17, 0x08D6
	lds r17,tr4_barrel_hi
    8cfa:	e0 91 d7 08 	lds	r30, 0x08D7
	lds ZL,tr4_divider
    8cfe:	ea 95       	dec	r30
	dec ZL	
    8d00:	92 f4       	brpl	.+36     	; 0x8d26 <ch4_no_shift>
	brpl ch4_no_shift	
    8d02:	f0 91 d4 08 	lds	r31, 0x08D4

	lds ZH,tr4_params
    8d06:	ef 2f       	mov	r30, r31
	mov ZL,ZH
    8d08:	e6 95       	lsr	r30
	lsr ZL 			;keep bits7:1
    8d0a:	00 2e       	mov	r0, r16

	mov r0,r16  ;copy barrel shifter
    8d0c:	06 94       	lsr	r0
	lsr r0
    8d0e:	00 26       	eor	r0, r16
	eor r0,r16  ;xor bit0 and bit1
    8d10:	00 fa       	bst	r0, 0
	bst r0,0
    8d12:	16 95       	lsr	r17
	lsr r17
    8d14:	07 95       	ror	r16
	ror r16
    8d16:	16 f9       	bld	r17, 6
	bld r17,6	;15 bits mode
    8d18:	f0 ff       	sbrs	r31, 0
	sbrs ZH,0
    8d1a:	06 f9       	bld	r16, 6
	bld r16,6	;7 bits mode
    8d1c:	00 93 d5 08 	sts	0x08D5, r16

	sts tr4_barrel_lo,r16
    8d20:	10 93 d6 08 	sts	0x08D6, r17
	sts tr4_barrel_hi,r17
    8d24:	03 c0       	rjmp	.+6      	; 0x8d2c <ch4_end>

00008d26 <ch4_no_shift>:

	rjmp ch4_end
    8d26:	16 e0       	ldi	r17, 0x06	; 6
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8d28:	1a 95       	dec	r17
	dec r17
    8d2a:	f1 f7       	brne	.-4      	; 0x8d28 <ch4_no_shift+0x2>

00008d2c <ch4_end>:
	brne .-4
    8d2c:	e0 93 d7 08 	sts	0x08D7, r30
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8d30:	10 e8       	ldi	r17, 0x80	; 128
	ldi r17,0x80 ;-128
    8d32:	21 fd       	sbrc	r18, 1
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8d34:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8d36:	21 ff       	sbrs	r18, 1
	sbrs r18,1								
    8d38:	00 c0       	rjmp	.+0      	; 0x8d3a <ch4_end+0xe>
	rjmp .
    8d3a:	00 fd       	sbrc	r16, 0
	;*************************
	
	sbrc r16,0
    8d3c:	1f e7       	ldi	r17, 0x7F	; 127
	ldi r17,0x7f ;+127
    8d3e:	00 91 d3 08 	lds	r16, 0x08D3
	
	lds r16,tr4_vol
    8d42:	10 03       	mulsu	r17, r16

	mulsu r17,r16;(sample*mixing vol)
    8d44:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    8d46:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8d48:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb
    8d4a:	00 24       	eor	r0, r0
#endif
	
	;final processing

	;clip
	clr r0
    8d4c:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,128	;> 127?
    8d4e:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0	
    8d50:	0c f0       	brlt	.+2      	; 0x8d54 <ch4_end+0x28>
	brlt .+2
    8d52:	cf e7       	ldi	r28, 0x7F	; 127
	ldi r28,127
    8d54:	0a 94       	dec	r0
	
	dec r0
    8d56:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,-128; <-128?
    8d58:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0xff
    8d5a:	0c f4       	brge	.+2      	; 0x8d5e <ch4_end+0x32>
	brge .+2
    8d5c:	c0 e8       	ldi	r28, 0x80	; 128
	ldi r28,-128
    8d5e:	c0 58       	subi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8d60:	c0 93 b3 00 	sts	0x00B3, r28
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    8d64:	e0 e0       	ldi	r30, 0x00	; 0
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    8d66:	f9 e0       	ldi	r31, 0x09	; 9
	ldi ZH,hi8(uart_rx_buf)
    8d68:	00 91 fd 08 	lds	r16, 0x08FD
	lds r16,uart_rx_head
    8d6c:	00 24       	eor	r0, r0

	clr r0
    8d6e:	e0 0f       	add	r30, r16
	add ZL,r16
    8d70:	f0 1d       	adc	r31, r0
	adc ZH,r0
    8d72:	10 91 c0 00 	lds	r17, 0x00C0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    8d76:	17 ff       	sbrs	r17, 7

	sbrs r17,RXC0	;data in?
    8d78:	08 c0       	rjmp	.+16     	; 0x8d8a <ch4_end+0x5e>
	rjmp 1f
    8d7a:	20 91 c6 00 	lds	r18, 0x00C6

	lds r18,_SFR_MEM_ADDR(UDR0)
    8d7e:	20 83       	st	Z, r18
	st Z,r18
    8d80:	03 95       	inc	r16
	inc r16
    8d82:	0f 77       	andi	r16, 0x7F	; 127
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    8d84:	00 93 fd 08 	sts	0x08FD, r16
	sts uart_rx_head,r16
    8d88:	03 c0       	rjmp	.+6      	; 0x8d90 <uart_tx>
	rjmp uart_tx
    8d8a:	c3 e0       	ldi	r28, 0x03	; 3
1:
	WAIT r28,9
    8d8c:	ca 95       	dec	r28
    8d8e:	f1 f7       	brne	.-4      	; 0x8d8c <ch4_end+0x60>

00008d90 <uart_tx>:
    8d90:	ec ed       	ldi	r30, 0xDC	; 220

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    8d92:	f8 e0       	ldi	r31, 0x08	; 8
	ldi ZH,hi8(uart_tx_buf)
    8d94:	00 91 80 09 	lds	r16, 0x0980
	lds r16,uart_tx_tail
    8d98:	d0 91 fe 08 	lds	r29, 0x08FE
	lds r29,uart_tx_head
    8d9c:	e0 0f       	add	r30, r16
	
	add ZL,r16
    8d9e:	f0 1d       	adc	r31, r0
	adc ZH,r0	;r0=0
    8da0:	c0 91 c0 00 	lds	r28, 0x00C0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    8da4:	c0 72       	andi	r28, 0x20	; 32
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    8da6:	d0 1b       	sub	r29, r16

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    8da8:	cd 9f       	mul	r28, r29
	mul r28,r29
    8daa:	41 f0       	breq	.+16     	; 0x8dbc <uart_tx+0x2c>
	breq 1f		
    8dac:	20 81       	ld	r18, Z

	ld r18,Z
    8dae:	20 93 c6 00 	sts	0x00C6, r18
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    8db2:	03 95       	inc	r16
	inc r16
    8db4:	0f 71       	andi	r16, 0x1F	; 31
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    8db6:	00 93 80 09 	sts	0x0980, r16
	sts uart_tx_tail,r16
    8dba:	03 c0       	rjmp	.+6      	; 0x8dc2 <update_sound_end>
	rjmp update_sound_end
    8dbc:	c3 e0       	ldi	r28, 0x03	; 3
1:
	WAIT r28,9
    8dbe:	ca 95       	dec	r28
    8dc0:	f1 f7       	brne	.-4      	; 0x8dbe <uart_tx+0x2e>

00008dc2 <update_sound_end>:
    8dc2:	df 91       	pop	r29
#endif


update_sound_end:

	pop r29
    8dc4:	cf 91       	pop	r28
	pop r28
    8dc6:	2f 91       	pop	r18
	pop r18
    8dc8:	1f 91       	pop	r17
	pop r17
    8dca:	0f 91       	pop	r16
	pop r16
    8dcc:	08 95       	ret

00008dce <SetSpritesTileTable>:
	
	ret
    8dce:	80 93 80 08 	sts	0x0880, r24
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
	sts sprites_tile_banks+1,r25
    8dd2:	90 93 81 08 	sts	0x0881, r25
	ret
    8dd6:	08 95       	ret

00008dd8 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8dd8:	ec e0       	ldi	r30, 0x0C	; 12
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8dda:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    8ddc:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8dde:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8de0:	60 e1       	ldi	r22, 0x10	; 16

00008de2 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8de2:	6d 93       	st	X+, r22
	sbiw r30,1
    8de4:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8de6:	e9 f7       	brne	.-6      	; 0x8de2 <fill_vram_loop>

	clr r1
    8de8:	11 24       	eor	r1, r1

	ret
    8dea:	08 95       	ret

00008dec <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    8dec:	50 91 8a 08 	lds	r21, 0x088A
	add r20,21
    8df0:	45 0f       	add	r20, r21
	rjmp SetTile	
    8df2:	00 c0       	rjmp	.+0      	; 0x8df4 <SetTile>

00008df4 <SetTile>:

	ret

#else

	clr r25
    8df4:	99 27       	eor	r25, r25
	clr r23	
    8df6:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8df8:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8dfa:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    8dfc:	08 0e       	add	r0, r24
	adc r1,r25
    8dfe:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    8e00:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8e02:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8e04:	a0 0d       	add	r26, r0
	adc XH,r1
    8e06:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8e08:	40 5f       	subi	r20, 0xF0	; 240
	st X,r20
    8e0a:	4c 93       	st	X, r20

	clr r1
    8e0c:	11 24       	eor	r1, r1

	ret
    8e0e:	08 95       	ret

00008e10 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8e10:	80 93 88 08 	sts	0x0888, r24
	sts tile_table_hi,r25	
    8e14:	90 93 89 08 	sts	0x0889, r25
	ret
    8e18:	08 95       	ret

00008e1a <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8e1a:	80 91 90 08 	lds	r24, 0x0890
	andi r24,SYNC_FLAG_VSYNC
    8e1e:	81 70       	andi	r24, 0x01	; 1
	ret
    8e20:	08 95       	ret

00008e22 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8e22:	20 91 90 08 	lds	r18, 0x0890
	andi r18,~SYNC_FLAG_VSYNC
    8e26:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    8e28:	20 93 90 08 	sts	0x0890, r18
	ret
    8e2c:	08 95       	ret

00008e2e <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    8e2e:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8e30:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8e32:	f1 f7       	brne	.-4      	; 0x8e30 <WaitUs+0x2>
	nop
    8e34:	00 00       	nop
	sbiw r24,1
    8e36:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8e38:	d1 f7       	brne	.-12     	; 0x8e2e <WaitUs>

	ret
    8e3a:	08 95       	ret

00008e3c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8e3c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    8e3e:	fe cf       	rjmp	.-4      	; 0x8e3c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8e40:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8e42:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8e44:	60 bd       	out	0x20, r22	; 32
   cli
    8e46:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8e48:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8e4a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8e4c:	78 94       	sei
   ret
    8e4e:	08 95       	ret

00008e50 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8e50:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8e52:	fe cf       	rjmp	.-4      	; 0x8e50 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8e54:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8e56:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8e58:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8e5a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8e5c:	80 b5       	in	r24, 0x20	; 32
   sei
    8e5e:	78 94       	sei
   ret
    8e60:	08 95       	ret

00008e62 <SetLedOn>:
; C callable
;****************************
.global SetLedOn
.section .text.SetLedOn
SetLedOn:
	sbi _SFR_IO_ADDR(PORTD),PD4
    8e62:	5c 9a       	sbi	0x0b, 4	; 11
	ret
    8e64:	08 95       	ret

00008e66 <SetLedOff>:
; C callable
;****************************
.global SetLedOff
.section .text.SetLedOff
SetLedOff:
	cbi _SFR_IO_ADDR(PORTD),PD4
    8e66:	5c 98       	cbi	0x0b, 4	; 11
	ret
    8e68:	08 95       	ret

00008e6a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8e6a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8e6c:	80 93 8f 08 	sts	0x088F, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8e70:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8e74:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8e76:	80 93 81 00 	sts	0x0081, r24

		cli
    8e7a:	f8 94       	cli
		wdr
    8e7c:	a8 95       	wdr
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8e7e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8e80:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8e84:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8e86:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8e8a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8e8c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8e90:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8e94:	78 94       	sei

00008e96 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8e96:	80 91 8f 08 	lds	r24, 0x088F
		cpi r24,8
    8e9a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    8e9c:	e0 f3       	brcs	.-8      	; 0x8e96 <wait>

		ret
    8e9e:	08 95       	ret

00008ea0 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8ea0:	80 91 a1 08 	lds	r24, 0x08A1
		lds r25,random_value+1
    8ea4:	90 91 a2 08 	lds	r25, 0x08A2
		ret
    8ea8:	08 95       	ret

00008eaa <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    8eaa:	0f 93       	push	r16
		push r17
    8eac:	1f 93       	push	r17
	
		wdr
    8eae:	a8 95       	wdr

		in r16,_SFR_IO_ADDR(SREG)
    8eb0:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8eb2:	0f 93       	push	r16

		lds r16,sync_pulse
    8eb4:	00 91 8f 08 	lds	r16, 0x088F
		inc r16
    8eb8:	03 95       	inc	r16
		sts sync_pulse,r16
    8eba:	00 93 8f 08 	sts	0x088F, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    8ebe:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8ec0:	08 c0       	rjmp	.+16     	; 0x8ed2 <__vector_8+0x28>
		lds r17,random_value
    8ec2:	10 91 a1 08 	lds	r17, 0x08A1
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8ec6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8eca:	10 27       	eor	r17, r16
		sts random_value,r17
    8ecc:	10 93 a1 08 	sts	0x08A1, r17
		rjmp 2f
    8ed0:	07 c0       	rjmp	.+14     	; 0x8ee0 <__vector_8+0x36>
	1:
		lds r17,random_value+1
    8ed2:	10 91 a2 08 	lds	r17, 0x08A2
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8ed6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8eda:	10 27       	eor	r17, r16
		sts random_value+1,r17
    8edc:	10 93 a2 08 	sts	0x08A2, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8ee0:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8ee2:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8ee6:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8ee8:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    8eea:	1f 91       	pop	r17
		pop r16
    8eec:	0f 91       	pop	r16
		reti
    8eee:	18 95       	reti

00008ef0 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8ef0:	28 e0       	ldi	r18, 0x08	; 8
    8ef2:	88 e1       	ldi	r24, 0x18	; 24
    8ef4:	90 e0       	ldi	r25, 0x00	; 0
    8ef6:	0f b6       	in	r0, 0x3f	; 63
    8ef8:	f8 94       	cli
    8efa:	a8 95       	wdr
    8efc:	80 93 60 00 	sts	0x0060, r24
    8f00:	0f be       	out	0x3f, r0	; 63
    8f02:	20 93 60 00 	sts	0x0060, r18
    8f06:	ff cf       	rjmp	.-2      	; 0x8f06 <SoftReset+0x16>

00008f08 <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    8f08:	80 91 fd 08 	lds	r24, 0x08FD
    8f0c:	90 91 ff 08 	lds	r25, 0x08FF
	}
    8f10:	89 1b       	sub	r24, r25
    8f12:	08 95       	ret

00008f14 <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    8f14:	90 91 fd 08 	lds	r25, 0x08FD
    8f18:	80 91 ff 08 	lds	r24, 0x08FF
    8f1c:	98 17       	cp	r25, r24
    8f1e:	19 f4       	brne	.+6      	; 0x8f26 <UartReadChar+0x12>
    8f20:	2f ef       	ldi	r18, 0xFF	; 255
    8f22:	3f ef       	ldi	r19, 0xFF	; 255
    8f24:	0e c0       	rjmp	.+28     	; 0x8f42 <UartReadChar+0x2e>

			u8 data=uart_rx_buf[uart_rx_tail];
    8f26:	e0 91 ff 08 	lds	r30, 0x08FF
    8f2a:	f0 e0       	ldi	r31, 0x00	; 0
    8f2c:	e0 50       	subi	r30, 0x00	; 0
    8f2e:	f7 4f       	sbci	r31, 0xF7	; 247
    8f30:	90 81       	ld	r25, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    8f32:	80 91 ff 08 	lds	r24, 0x08FF
    8f36:	8f 5f       	subi	r24, 0xFF	; 255
    8f38:	8f 77       	andi	r24, 0x7F	; 127
    8f3a:	80 93 ff 08 	sts	0x08FF, r24
			return (data&0xff);
    8f3e:	29 2f       	mov	r18, r25
    8f40:	30 e0       	ldi	r19, 0x00	; 0

		}else{
			return -1;	//no data in buffer
		}
	}
    8f42:	c9 01       	movw	r24, r18
    8f44:	08 95       	ret

00008f46 <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    8f46:	10 92 ff 08 	sts	0x08FF, r1
		uart_rx_head=0;
    8f4a:	10 92 fd 08 	sts	0x08FD, r1
	}
    8f4e:	08 95       	ret

00008f50 <UartSendChar>:
	bool IsUartTxBufferFull(){
		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){
    8f50:	28 2f       	mov	r18, r24

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    8f52:	90 91 fe 08 	lds	r25, 0x08FE
    8f56:	9f 5f       	subi	r25, 0xFF	; 255
    8f58:	9f 71       	andi	r25, 0x1F	; 31

		if (next_head != uart_tx_tail) {
    8f5a:	80 91 80 09 	lds	r24, 0x0980
    8f5e:	98 17       	cp	r25, r24
    8f60:	11 f4       	brne	.+4      	; 0x8f66 <UartSendChar+0x16>
    8f62:	8f ef       	ldi	r24, 0xFF	; 255
    8f64:	08 95       	ret
			uart_tx_buf[uart_tx_head]=data;
    8f66:	e0 91 fe 08 	lds	r30, 0x08FE
    8f6a:	f0 e0       	ldi	r31, 0x00	; 0
    8f6c:	e4 52       	subi	r30, 0x24	; 36
    8f6e:	f7 4f       	sbci	r31, 0xF7	; 247
    8f70:	20 83       	st	Z, r18
			uart_tx_head=next_head;		
    8f72:	90 93 fe 08 	sts	0x08FE, r25
    8f76:	80 e0       	ldi	r24, 0x00	; 0
			return 0;
		}else{
			return -1; //buffer full
		}
	}
    8f78:	08 95       	ret

00008f7a <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    8f7a:	10 92 80 09 	sts	0x0980, r1
		uart_tx_head=0;
    8f7e:	10 92 fe 08 	sts	0x08FE, r1
	}
    8f82:	08 95       	ret

00008f84 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8f84:	00 97       	sbiw	r24, 0x00	; 0
    8f86:	21 f0       	breq	.+8      	; 0x8f90 <GetPrngNumber+0xc>
    8f88:	90 93 da 08 	sts	0x08DA, r25
    8f8c:	80 93 d9 08 	sts	0x08D9, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8f90:	80 91 d9 08 	lds	r24, 0x08D9
    8f94:	90 91 da 08 	lds	r25, 0x08DA
	prng_state =  (prng_state >> 1) | (bit << 15);
    8f98:	9c 01       	movw	r18, r24
    8f9a:	36 95       	lsr	r19
    8f9c:	27 95       	ror	r18
    8f9e:	36 95       	lsr	r19
    8fa0:	27 95       	ror	r18
    8fa2:	ac 01       	movw	r20, r24
    8fa4:	a3 e0       	ldi	r26, 0x03	; 3
    8fa6:	56 95       	lsr	r21
    8fa8:	47 95       	ror	r20
    8faa:	aa 95       	dec	r26
    8fac:	e1 f7       	brne	.-8      	; 0x8fa6 <GetPrngNumber+0x22>
    8fae:	24 27       	eor	r18, r20
    8fb0:	35 27       	eor	r19, r21
    8fb2:	28 27       	eor	r18, r24
    8fb4:	39 27       	eor	r19, r25
    8fb6:	ac 01       	movw	r20, r24
    8fb8:	f5 e0       	ldi	r31, 0x05	; 5
    8fba:	56 95       	lsr	r21
    8fbc:	47 95       	ror	r20
    8fbe:	fa 95       	dec	r31
    8fc0:	e1 f7       	brne	.-8      	; 0x8fba <GetPrngNumber+0x36>
    8fc2:	24 27       	eor	r18, r20
    8fc4:	35 27       	eor	r19, r21
    8fc6:	33 27       	eor	r19, r19
    8fc8:	26 95       	lsr	r18
    8fca:	37 95       	ror	r19
    8fcc:	22 27       	eor	r18, r18
    8fce:	96 95       	lsr	r25
    8fd0:	87 95       	ror	r24
    8fd2:	28 2b       	or	r18, r24
    8fd4:	39 2b       	or	r19, r25
    8fd6:	30 93 da 08 	sts	0x08DA, r19
    8fda:	20 93 d9 08 	sts	0x08D9, r18
	return prng_state;   
}
    8fde:	c9 01       	movw	r24, r18
    8fe0:	08 95       	ret

00008fe2 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8fe2:	a0 e0       	ldi	r26, 0x00	; 0
    8fe4:	b0 e0       	ldi	r27, 0x00	; 0
    8fe6:	e7 ef       	ldi	r30, 0xF7	; 247
    8fe8:	f7 e4       	ldi	r31, 0x47	; 71
    8fea:	0c 94 8d 75 	jmp	0xeb1a	; 0xeb1a <__prologue_saves__+0x8>
    8fee:	3c 01       	movw	r6, r24
    8ff0:	4b 01       	movw	r8, r22
    8ff2:	5a 01       	movw	r10, r20
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    8ff4:	fb 01       	movw	r30, r22
    8ff6:	11 82       	std	Z+1, r1	; 0x01
    8ff8:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8ffa:	ff ef       	ldi	r31, 0xFF	; 255
    8ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    8ffe:	9f 07       	cpc	r25, r31
    9000:	11 f4       	brne	.+4      	; 0x9006 <EepromBlockExists+0x24>
    9002:	81 e0       	ldi	r24, 0x01	; 1
    9004:	2c c0       	rjmp	.+88     	; 0x905e <EepromBlockExists+0x7c>
    9006:	dd 24       	eor	r13, r13
    9008:	13 e0       	ldi	r17, 0x03	; 3
    900a:	c1 2e       	mov	r12, r17
    900c:	00 e0       	ldi	r16, 0x00	; 0
    900e:	ee 24       	eor	r14, r14
    9010:	ff 24       	eor	r15, r15
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    9012:	c7 01       	movw	r24, r14
    9014:	1d df       	rcall	.-454    	; 0x8e50 <ReadEeprom>
    9016:	18 2f       	mov	r17, r24
    9018:	c7 01       	movw	r24, r14
    901a:	01 96       	adiw	r24, 0x01	; 1
    901c:	19 df       	rcall	.-462    	; 0x8e50 <ReadEeprom>
    901e:	d8 2f       	mov	r29, r24
    9020:	c0 e0       	ldi	r28, 0x00	; 0
    9022:	ce 01       	movw	r24, r28
    9024:	81 0f       	add	r24, r17
    9026:	91 1d       	adc	r25, r1
		
		if(id==blockId){
    9028:	86 15       	cp	r24, r6
    902a:	97 05       	cpc	r25, r7
    902c:	29 f4       	brne	.+10     	; 0x9038 <EepromBlockExists+0x56>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    902e:	f4 01       	movw	r30, r8
    9030:	f1 82       	std	Z+1, r15	; 0x01
    9032:	e0 82       	st	Z, r14
    9034:	cc 24       	eor	r12, r12
    9036:	0b c0       	rjmp	.+22     	; 0x904e <EepromBlockExists+0x6c>
			result=EEPROM_OK;
		}
		
		if(id==0xffff && nextFreeBlock==0){
    9038:	8f 5f       	subi	r24, 0xFF	; 255
    903a:	9f 4f       	sbci	r25, 0xFF	; 255
    903c:	41 f4       	brne	.+16     	; 0x904e <EepromBlockExists+0x6c>
    903e:	dd 20       	and	r13, r13
    9040:	31 f4       	brne	.+12     	; 0x904e <EepromBlockExists+0x6c>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    9042:	a1 14       	cp	r10, r1
    9044:	b1 04       	cpc	r11, r1
    9046:	11 f0       	breq	.+4      	; 0x904c <EepromBlockExists+0x6a>
    9048:	f5 01       	movw	r30, r10
    904a:	00 83       	st	Z, r16
    904c:	d0 2e       	mov	r13, r16
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    904e:	0f 5f       	subi	r16, 0xFF	; 255
    9050:	80 e2       	ldi	r24, 0x20	; 32
    9052:	90 e0       	ldi	r25, 0x00	; 0
    9054:	e8 0e       	add	r14, r24
    9056:	f9 1e       	adc	r15, r25
    9058:	00 34       	cpi	r16, 0x40	; 64
    905a:	d9 f6       	brne	.-74     	; 0x9012 <EepromBlockExists+0x30>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    905c:	8c 2d       	mov	r24, r12
}
    905e:	cd b7       	in	r28, 0x3d	; 61
    9060:	de b7       	in	r29, 0x3e	; 62
    9062:	ee e0       	ldi	r30, 0x0E	; 14
    9064:	0c 94 a9 75 	jmp	0xeb52	; 0xeb52 <__epilogue_restores__+0x8>

00009068 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    9068:	a2 e0       	ldi	r26, 0x02	; 2
    906a:	b0 e0       	ldi	r27, 0x00	; 0
    906c:	ea e3       	ldi	r30, 0x3A	; 58
    906e:	f8 e4       	ldi	r31, 0x48	; 72
    9070:	0c 94 94 75 	jmp	0xeb28	; 0xeb28 <__prologue_saves__+0x16>
    9074:	16 2f       	mov	r17, r22
    9076:	07 2f       	mov	r16, r23
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    9078:	be 01       	movw	r22, r28
    907a:	6f 5f       	subi	r22, 0xFF	; 255
    907c:	7f 4f       	sbci	r23, 0xFF	; 255
    907e:	40 e0       	ldi	r20, 0x00	; 0
    9080:	50 e0       	ldi	r21, 0x00	; 0
    9082:	af df       	rcall	.-162    	; 0x8fe2 <EepromBlockExists>
    9084:	d8 2e       	mov	r13, r24
	if(res!=0) return res;
    9086:	88 23       	and	r24, r24
    9088:	b1 f4       	brne	.+44     	; 0x90b6 <EepromReadBlock+0x4e>
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;
    908a:	81 2f       	mov	r24, r17
    908c:	90 2f       	mov	r25, r16
    908e:	9c 01       	movw	r18, r24
    9090:	89 01       	movw	r16, r18

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    9092:	80 e2       	ldi	r24, 0x20	; 32
    9094:	e8 2e       	mov	r14, r24
    9096:	f1 2c       	mov	r15, r1
    9098:	e2 0e       	add	r14, r18
    909a:	f3 1e       	adc	r15, r19
		*blockPtr=ReadEeprom(eepromAddr++);
    909c:	89 81       	ldd	r24, Y+1	; 0x01
    909e:	9a 81       	ldd	r25, Y+2	; 0x02
    90a0:	01 96       	adiw	r24, 0x01	; 1
    90a2:	9a 83       	std	Y+2, r25	; 0x02
    90a4:	89 83       	std	Y+1, r24	; 0x01
    90a6:	01 97       	sbiw	r24, 0x01	; 1
    90a8:	d3 de       	rcall	.-602    	; 0x8e50 <ReadEeprom>
    90aa:	f8 01       	movw	r30, r16
    90ac:	81 93       	st	Z+, r24
    90ae:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    90b0:	ee 15       	cp	r30, r14
    90b2:	ff 05       	cpc	r31, r15
    90b4:	99 f7       	brne	.-26     	; 0x909c <EepromReadBlock+0x34>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    90b6:	8d 2d       	mov	r24, r13
    90b8:	22 96       	adiw	r28, 0x02	; 2
    90ba:	e7 e0       	ldi	r30, 0x07	; 7
    90bc:	0c 94 b0 75 	jmp	0xeb60	; 0xeb60 <__epilogue_restores__+0x16>

000090c0 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    90c0:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    90c2:	80 e0       	ldi	r24, 0x00	; 0
    90c4:	90 e0       	ldi	r25, 0x00	; 0
    90c6:	c4 de       	rcall	.-632    	; 0x8e50 <ReadEeprom>
    90c8:	18 2f       	mov	r17, r24
    90ca:	81 e0       	ldi	r24, 0x01	; 1
    90cc:	90 e0       	ldi	r25, 0x00	; 0
    90ce:	c0 de       	rcall	.-640    	; 0x8e50 <ReadEeprom>
    90d0:	90 e0       	ldi	r25, 0x00	; 0
    90d2:	38 2f       	mov	r19, r24
    90d4:	20 e0       	ldi	r18, 0x00	; 0
    90d6:	21 0f       	add	r18, r17
    90d8:	31 1d       	adc	r19, r1
    90da:	2a 55       	subi	r18, 0x5A	; 90
    90dc:	35 45       	sbci	r19, 0x55	; 85
    90de:	09 f4       	brne	.+2      	; 0x90e2 <isEepromFormatted+0x22>
    90e0:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    90e2:	89 2f       	mov	r24, r25
    90e4:	1f 91       	pop	r17
    90e6:	08 95       	ret

000090e8 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    90e8:	a3 e0       	ldi	r26, 0x03	; 3
    90ea:	b0 e0       	ldi	r27, 0x00	; 0
    90ec:	ea e7       	ldi	r30, 0x7A	; 122
    90ee:	f8 e4       	ldi	r31, 0x48	; 72
    90f0:	0c 94 95 75 	jmp	0xeb2a	; 0xeb2a <__prologue_saves__+0x18>
    90f4:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    90f6:	1b 82       	std	Y+3, r1	; 0x03
    90f8:	1a 82       	std	Y+2, r1	; 0x02
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    90fa:	19 82       	std	Y+1, r1	; 0x01

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    90fc:	fc 01       	movw	r30, r24
    90fe:	80 81       	ld	r24, Z
    9100:	91 81       	ldd	r25, Z+1	; 0x01
    9102:	be 01       	movw	r22, r28
    9104:	6e 5f       	subi	r22, 0xFE	; 254
    9106:	7f 4f       	sbci	r23, 0xFF	; 255
    9108:	ae 01       	movw	r20, r28
    910a:	4f 5f       	subi	r20, 0xFF	; 255
    910c:	5f 4f       	sbci	r21, 0xFF	; 255
    910e:	69 df       	rcall	.-302    	; 0x8fe2 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    9110:	88 23       	and	r24, r24
    9112:	11 f0       	breq	.+4      	; 0x9118 <EepromWriteBlock+0x30>
    9114:	83 30       	cpi	r24, 0x03	; 3
    9116:	21 f5       	brne	.+72     	; 0x9160 <EepromWriteBlock+0x78>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    9118:	8a 81       	ldd	r24, Y+2	; 0x02
    911a:	9b 81       	ldd	r25, Y+3	; 0x03
    911c:	89 2b       	or	r24, r25
    911e:	69 f4       	brne	.+26     	; 0x913a <EepromWriteBlock+0x52>
    9120:	89 81       	ldd	r24, Y+1	; 0x01
    9122:	88 23       	and	r24, r24
    9124:	11 f4       	brne	.+4      	; 0x912a <EepromWriteBlock+0x42>
    9126:	82 e0       	ldi	r24, 0x02	; 2
    9128:	1b c0       	rjmp	.+54     	; 0x9160 <EepromWriteBlock+0x78>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    912a:	90 e0       	ldi	r25, 0x00	; 0
    912c:	25 e0       	ldi	r18, 0x05	; 5
    912e:	88 0f       	add	r24, r24
    9130:	99 1f       	adc	r25, r25
    9132:	2a 95       	dec	r18
    9134:	e1 f7       	brne	.-8      	; 0x912e <EepromWriteBlock+0x46>
    9136:	9b 83       	std	Y+3, r25	; 0x03
    9138:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    913a:	90 e2       	ldi	r25, 0x20	; 32
    913c:	e9 2e       	mov	r14, r25
    913e:	f1 2c       	mov	r15, r1
    9140:	e0 0e       	add	r14, r16
    9142:	f1 1e       	adc	r15, r17
		WriteEeprom(eepromAddr++,*srcPtr);
    9144:	8a 81       	ldd	r24, Y+2	; 0x02
    9146:	9b 81       	ldd	r25, Y+3	; 0x03
    9148:	01 96       	adiw	r24, 0x01	; 1
    914a:	9b 83       	std	Y+3, r25	; 0x03
    914c:	8a 83       	std	Y+2, r24	; 0x02
    914e:	01 97       	sbiw	r24, 0x01	; 1
    9150:	f8 01       	movw	r30, r16
    9152:	61 91       	ld	r22, Z+
    9154:	8f 01       	movw	r16, r30
    9156:	72 de       	rcall	.-796    	; 0x8e3c <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    9158:	0e 15       	cp	r16, r14
    915a:	1f 05       	cpc	r17, r15
    915c:	99 f7       	brne	.-26     	; 0x9144 <EepromWriteBlock+0x5c>
    915e:	80 e0       	ldi	r24, 0x00	; 0
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    9160:	23 96       	adiw	r28, 0x03	; 3
    9162:	e6 e0       	ldi	r30, 0x06	; 6
    9164:	0c 94 b1 75 	jmp	0xeb62	; 0xeb62 <__epilogue_restores__+0x18>

00009168 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    9168:	cf 93       	push	r28
    916a:	df 93       	push	r29
    916c:	c0 e0       	ldi	r28, 0x00	; 0
    916e:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    9170:	fe 01       	movw	r30, r28
    9172:	e0 59       	subi	r30, 0x90	; 144
    9174:	ff 4f       	sbci	r31, 0xFF	; 255
    9176:	e4 91       	lpm	r30, Z+
    9178:	ce 01       	movw	r24, r28
    917a:	6e 2f       	mov	r22, r30
    917c:	5f de       	rcall	.-834    	; 0x8e3c <WriteEeprom>
    917e:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    9180:	c0 32       	cpi	r28, 0x20	; 32
    9182:	d1 05       	cpc	r29, r1
    9184:	a9 f7       	brne	.-22     	; 0x9170 <FormatEeprom+0x8>
    9186:	c0 e2       	ldi	r28, 0x20	; 32
    9188:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    918a:	ce 01       	movw	r24, r28
    918c:	6f ef       	ldi	r22, 0xFF	; 255
    918e:	56 de       	rcall	.-852    	; 0x8e3c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    9190:	ce 01       	movw	r24, r28
    9192:	01 96       	adiw	r24, 0x01	; 1
    9194:	6f ef       	ldi	r22, 0xFF	; 255
    9196:	52 de       	rcall	.-860    	; 0x8e3c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    9198:	a0 96       	adiw	r28, 0x20	; 32
    919a:	88 e0       	ldi	r24, 0x08	; 8
    919c:	c0 30       	cpi	r28, 0x00	; 0
    919e:	d8 07       	cpc	r29, r24
    91a0:	a1 f7       	brne	.-24     	; 0x918a <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    91a2:	df 91       	pop	r29
    91a4:	cf 91       	pop	r28
    91a6:	08 95       	ret

000091a8 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    91a8:	fc 01       	movw	r30, r24
    91aa:	46 87       	std	Z+14, r20	; 0x0e
}
    91ac:	08 95       	ret

000091ae <PatchCommand01>:
 * Command 01: Set noise channel params 
 * Param:
 */
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    91ae:	81 e0       	ldi	r24, 0x01	; 1
    91b0:	91 e0       	ldi	r25, 0x01	; 1
    91b2:	90 93 d6 08 	sts	0x08D6, r25
    91b6:	80 93 d5 08 	sts	0x08D5, r24
		mixer.channels.type.noise.params=param;
    91ba:	40 93 d4 08 	sts	0x08D4, r20
	#endif
}
    91be:	08 95       	ret

000091c0 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    91c0:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    91c2:	80 81       	ld	r24, Z
    91c4:	8f 75       	andi	r24, 0x5F	; 95
    91c6:	80 83       	st	Z, r24
}
    91c8:	08 95       	ret

000091ca <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    91ca:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    91cc:	80 81       	ld	r24, Z
    91ce:	80 64       	ori	r24, 0x40	; 64
    91d0:	80 83       	st	Z, r24
}
    91d2:	08 95       	ret

000091d4 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    91d4:	fc 01       	movw	r30, r24
    91d6:	45 87       	std	Z+13, r20	; 0x0d
}
    91d8:	08 95       	ret

000091da <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    91da:	fc 01       	movw	r30, r24
    91dc:	41 87       	std	Z+9, r20	; 0x09
}
    91de:	08 95       	ret

000091e0 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    91e0:	fc 01       	movw	r30, r24
    91e2:	42 87       	std	Z+10, r20	; 0x0a
}
    91e4:	08 95       	ret

000091e6 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    91e6:	1f 93       	push	r17
    91e8:	cf 93       	push	r28
    91ea:	df 93       	push	r29
    91ec:	ec 01       	movw	r28, r24
    91ee:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    91f0:	89 81       	ldd	r24, Y+1	; 0x01
    91f2:	90 e0       	ldi	r25, 0x00	; 0
    91f4:	fc 01       	movw	r30, r24
    91f6:	ee 0f       	add	r30, r30
    91f8:	ff 1f       	adc	r31, r31
    91fa:	e8 5f       	subi	r30, 0xF8	; 248
    91fc:	f4 46       	sbci	r31, 0x64	; 100
    91fe:	25 91       	lpm	r18, Z+
    9200:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    9202:	e4 2f       	mov	r30, r20
    9204:	ff 27       	eor	r31, r31
    9206:	e7 fd       	sbrc	r30, 7
    9208:	f0 95       	com	r31
    920a:	e8 0f       	add	r30, r24
    920c:	f9 1f       	adc	r31, r25
    920e:	ee 0f       	add	r30, r30
    9210:	ff 1f       	adc	r31, r31
    9212:	e8 5f       	subi	r30, 0xF8	; 248
    9214:	f4 46       	sbci	r31, 0x64	; 100
    9216:	85 91       	lpm	r24, Z+
    9218:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    921a:	60 91 8a 09 	lds	r22, 0x098A
    921e:	82 1b       	sub	r24, r18
    9220:	93 0b       	sbc	r25, r19
    9222:	70 e0       	ldi	r23, 0x00	; 0
    9224:	0e 94 76 75 	call	0xeaec	; 0xeaec <__divmodhi4>
    9228:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    922a:	61 15       	cp	r22, r1
    922c:	71 05       	cpc	r23, r1
    922e:	11 f4       	brne	.+4      	; 0x9234 <PatchCommand11+0x4e>
    9230:	21 e0       	ldi	r18, 0x01	; 1
    9232:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    9234:	81 2f       	mov	r24, r17
    9236:	90 e0       	ldi	r25, 0x00	; 0
    9238:	fc 01       	movw	r30, r24
    923a:	ee 0f       	add	r30, r30
    923c:	ff 1f       	adc	r31, r31
    923e:	e8 0f       	add	r30, r24
    9240:	f9 1f       	adc	r31, r25
    9242:	ee 0f       	add	r30, r30
    9244:	ff 1f       	adc	r31, r31
    9246:	ef 53       	subi	r30, 0x3F	; 63
    9248:	f7 4f       	sbci	r31, 0xF7	; 247
    924a:	81 81       	ldd	r24, Z+1	; 0x01
    924c:	92 81       	ldd	r25, Z+2	; 0x02
    924e:	82 0f       	add	r24, r18
    9250:	93 1f       	adc	r25, r19
    9252:	92 83       	std	Z+2, r25	; 0x02
    9254:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    9256:	3d 83       	std	Y+5, r19	; 0x05
    9258:	2c 83       	std	Y+4, r18	; 0x04
	track->flags|=TRACK_FLAGS_SLIDING;
    925a:	88 81       	ld	r24, Y
    925c:	88 60       	ori	r24, 0x08	; 8
    925e:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    9260:	89 81       	ldd	r24, Y+1	; 0x01
    9262:	84 0f       	add	r24, r20
    9264:	8e 83       	std	Y+6, r24	; 0x06
}
    9266:	df 91       	pop	r29
    9268:	cf 91       	pop	r28
    926a:	1f 91       	pop	r17
    926c:	08 95       	ret

0000926e <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    926e:	40 93 8a 09 	sts	0x098A, r20
}
    9272:	08 95       	ret

00009274 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(struct TrackStruct* track,unsigned char trackNo, char param){
	track->loopCount=(u8)param;
    9274:	fc 01       	movw	r30, r24
    9276:	43 83       	std	Z+3, r20	; 0x03
}
    9278:	08 95       	ret

0000927a <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(struct TrackStruct* track,unsigned char trackNo, char param){
    927a:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    927c:	13 96       	adiw	r26, 0x03	; 3
    927e:	8c 91       	ld	r24, X
    9280:	13 97       	sbiw	r26, 0x03	; 3
    9282:	88 23       	and	r24, r24
    9284:	31 f1       	breq	.+76     	; 0x92d2 <PatchCommand14+0x58>
    9286:	55 96       	adiw	r26, 0x15	; 21
    9288:	ed 91       	ld	r30, X+
    928a:	fc 91       	ld	r31, X
    928c:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    928e:	44 23       	and	r20, r20
    9290:	71 f0       	breq	.+28     	; 0x92ae <PatchCommand14+0x34>
			track->patchCommandStreamPos-=((param+1)*3);
    9292:	24 2f       	mov	r18, r20
    9294:	33 27       	eor	r19, r19
    9296:	27 fd       	sbrc	r18, 7
    9298:	30 95       	com	r19
    929a:	20 95       	com	r18
    929c:	30 95       	com	r19
    929e:	c9 01       	movw	r24, r18
    92a0:	88 0f       	add	r24, r24
    92a2:	99 1f       	adc	r25, r25
    92a4:	82 0f       	add	r24, r18
    92a6:	93 1f       	adc	r25, r19
    92a8:	e8 0f       	add	r30, r24
    92aa:	f9 1f       	adc	r31, r25
    92ac:	08 c0       	rjmp	.+16     	; 0x92be <PatchCommand14+0x44>
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(struct TrackStruct* track,unsigned char trackNo, char param){
    92ae:	33 97       	sbiw	r30, 0x03	; 3
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    92b0:	32 97       	sbiw	r30, 0x02	; 2
    92b2:	84 91       	lpm	r24, Z+
    92b4:	32 96       	adiw	r30, 0x02	; 2
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    92b6:	8d 30       	cpi	r24, 0x0D	; 13
    92b8:	11 f0       	breq	.+4      	; 0x92be <PatchCommand14+0x44>
    92ba:	8f 3f       	cpi	r24, 0xFF	; 255
    92bc:	c1 f7       	brne	.-16     	; 0x92ae <PatchCommand14+0x34>
    92be:	56 96       	adiw	r26, 0x16	; 22
    92c0:	fc 93       	st	X, r31
    92c2:	ee 93       	st	-X, r30
    92c4:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    92c6:	13 96       	adiw	r26, 0x03	; 3
    92c8:	8c 91       	ld	r24, X
    92ca:	13 97       	sbiw	r26, 0x03	; 3
    92cc:	81 50       	subi	r24, 0x01	; 1
    92ce:	13 96       	adiw	r26, 0x03	; 3
    92d0:	8c 93       	st	X, r24
    92d2:	08 95       	ret

000092d4 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    92d4:	90 93 e2 09 	sts	0x09E2, r25
    92d8:	80 93 e1 09 	sts	0x09E1, r24

	masterVolume=DEFAULT_MASTER_VOL;
    92dc:	8f e6       	ldi	r24, 0x6F	; 111
    92de:	80 93 e4 09 	sts	0x09E4, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    92e2:	10 92 db 08 	sts	0x08DB, r1
    92e6:	e3 e8       	ldi	r30, 0x83	; 131
    92e8:	f9 e0       	ldi	r31, 0x09	; 9

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    92ea:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    92ec:	2f ef       	ldi	r18, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    92ee:	98 e1       	ldi	r25, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    92f0:	80 83       	st	Z, r24
		tracks[t].noteVol=0;
    92f2:	14 86       	std	Z+12, r1	; 0x0c
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    92f4:	23 87       	std	Z+11, r18	; 0x0b
		tracks[t].patchNo=DEFAULT_PATCH;
    92f6:	17 86       	std	Z+15, r1	; 0x0f
		tracks[t].tremoloRate=24; //~6hz
    92f8:	92 87       	std	Z+10, r25	; 0x0a
		tracks[t].slideSpeed=0x10;
    92fa:	87 83       	std	Z+7, r24	; 0x07
    92fc:	77 96       	adiw	r30, 0x17	; 23
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    92fe:	39 e0       	ldi	r19, 0x09	; 9
    9300:	ef 3d       	cpi	r30, 0xDF	; 223
    9302:	f3 07       	cpc	r31, r19
    9304:	a9 f7       	brne	.-22     	; 0x92f0 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    9306:	08 95       	ret

00009308 <StartSong>:

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9308:	20 91 83 09 	lds	r18, 0x0983
    930c:	2f 77       	andi	r18, 0x7F	; 127
    930e:	20 93 83 09 	sts	0x0983, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9312:	3f ef       	ldi	r19, 0xFF	; 255
    9314:	30 93 85 09 	sts	0x0985, r19

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9318:	20 91 9a 09 	lds	r18, 0x099A
    931c:	2f 77       	andi	r18, 0x7F	; 127
    931e:	20 93 9a 09 	sts	0x099A, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9322:	30 93 9c 09 	sts	0x099C, r19

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9326:	20 91 b1 09 	lds	r18, 0x09B1
    932a:	2f 77       	andi	r18, 0x7F	; 127
    932c:	20 93 b1 09 	sts	0x09B1, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9330:	30 93 b3 09 	sts	0x09B3, r19

#if MUSIC_ENGINE == MIDI

	void StartSong(const char *song){
		for(unsigned char t=0;t<CHANNELS;t++){
			tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9334:	20 91 c8 09 	lds	r18, 0x09C8
    9338:	2f 77       	andi	r18, 0x7F	; 127
    933a:	20 93 c8 09 	sts	0x09C8, r18
			tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    933e:	30 93 ca 09 	sts	0x09CA, r19
		}

		songPos=song+1; //skip first delta-time
    9342:	01 96       	adiw	r24, 0x01	; 1
    9344:	90 93 e9 09 	sts	0x09E9, r25
    9348:	80 93 e8 09 	sts	0x09E8, r24
		songStart=song+1;//skip first delta-time
    934c:	90 93 82 09 	sts	0x0982, r25
    9350:	80 93 81 09 	sts	0x0981, r24
		loopStart=song+1;
    9354:	90 93 eb 09 	sts	0x09EB, r25
    9358:	80 93 ea 09 	sts	0x09EA, r24
		nextDeltaTime=0;
    935c:	10 92 e6 09 	sts	0x09E6, r1
    9360:	10 92 e5 09 	sts	0x09E5, r1
		currDeltaTime=0;
    9364:	10 92 e0 09 	sts	0x09E0, r1
    9368:	10 92 df 09 	sts	0x09DF, r1
		songSpeed=0;
    936c:	10 92 e7 09 	sts	0x09E7, r1

		lastStatus=0;
    9370:	10 92 e3 09 	sts	0x09E3, r1
		playSong=true;
    9374:	81 e0       	ldi	r24, 0x01	; 1
    9376:	80 93 db 08 	sts	0x08DB, r24
	}
    937a:	08 95       	ret

0000937c <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    937c:	8a ef       	ldi	r24, 0xFA	; 250
    937e:	80 93 91 09 	sts	0x0991, r24
    9382:	80 93 a8 09 	sts	0x09A8, r24
    9386:	80 93 bf 09 	sts	0x09BF, r24
    938a:	80 93 d6 09 	sts	0x09D6, r24
	}

	playSong=false;
    938e:	10 92 db 08 	sts	0x08DB, r1
}
    9392:	08 95       	ret

00009394 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    9394:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    9396:	ed 91       	ld	r30, X+
    9398:	fc 91       	ld	r31, X
    939a:	11 97       	sbiw	r26, 0x01	; 1
    939c:	af 01       	movw	r20, r30
    939e:	4f 5f       	subi	r20, 0xFF	; 255
    93a0:	5f 4f       	sbci	r21, 0xFF	; 255
    93a2:	11 96       	adiw	r26, 0x01	; 1
    93a4:	5c 93       	st	X, r21
    93a6:	4e 93       	st	-X, r20
    93a8:	e4 91       	lpm	r30, Z+
    93aa:	2e 2f       	mov	r18, r30
    93ac:	30 e0       	ldi	r19, 0x00	; 0
    93ae:	e7 ff       	sbrs	r30, 7
    93b0:	13 c0       	rjmp	.+38     	; 0x93d8 <ReadVarLen+0x44>
    {
       value &= 0x7F;
    93b2:	2f 77       	andi	r18, 0x7F	; 127
    93b4:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    93b6:	36 95       	lsr	r19
    93b8:	32 2f       	mov	r19, r18
    93ba:	22 27       	eor	r18, r18
    93bc:	37 95       	ror	r19
    93be:	27 95       	ror	r18
    93c0:	fa 01       	movw	r30, r20
    93c2:	4f 5f       	subi	r20, 0xFF	; 255
    93c4:	5f 4f       	sbci	r21, 0xFF	; 255
    93c6:	e4 91       	lpm	r30, Z+
    93c8:	8e 2f       	mov	r24, r30
    93ca:	8f 77       	andi	r24, 0x7F	; 127
    93cc:	28 0f       	add	r18, r24
    93ce:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    93d0:	e7 fd       	sbrc	r30, 7
    93d2:	f1 cf       	rjmp	.-30     	; 0x93b6 <ReadVarLen+0x22>
    93d4:	4d 93       	st	X+, r20
    93d6:	5c 93       	st	X, r21
    }


    return value;
}
    93d8:	c9 01       	movw	r24, r18
    93da:	08 95       	ret

000093dc <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    93dc:	80 93 e4 09 	sts	0x09E4, r24
}
    93e0:	08 95       	ret

000093e2 <PatchCommand02>:
}
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    93e2:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    93e4:	64 2f       	mov	r22, r20
}
    93e6:	fe c2       	rjmp	.+1532   	; 0x99e4 <SetMixerWave>

000093e8 <TriggerCommon>:
}




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    93e8:	ef 92       	push	r14
    93ea:	ff 92       	push	r15
    93ec:	0f 93       	push	r16
    93ee:	1f 93       	push	r17
    93f0:	cf 93       	push	r28
    93f2:	df 93       	push	r29
    93f4:	18 2f       	mov	r17, r24
    93f6:	e6 2e       	mov	r14, r22
    93f8:	02 2f       	mov	r16, r18
	struct TrackStruct* track=&tracks[channel];
    93fa:	87 e1       	ldi	r24, 0x17	; 23
    93fc:	18 9f       	mul	r17, r24
    93fe:	e0 01       	movw	r28, r0
    9400:	11 24       	eor	r1, r1
    9402:	cd 57       	subi	r28, 0x7D	; 125
    9404:	d6 4f       	sbci	r29, 0xF6	; 246
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    9406:	ff 24       	eor	r15, r15
    9408:	88 81       	ld	r24, Y
    940a:	87 ff       	sbrs	r24, 7
    940c:	02 c0       	rjmp	.+4      	; 0x9412 <TriggerCommon+0x2a>
    940e:	ff 24       	eor	r15, r15
    9410:	f3 94       	inc	r15

	track->patchCurrDeltaTime=0;
    9412:	1b 8a       	std	Y+19, r1	; 0x13
	track->envelopeStep=0; 
    9414:	1e 86       	std	Y+14, r1	; 0x0e
	track->envelopeVol=0xff; 
    9416:	9f ef       	ldi	r25, 0xFF	; 255
    9418:	9d 87       	std	Y+13, r25	; 0x0d
	track->noteVol=volume;
    941a:	4c 87       	std	Y+12, r20	; 0x0c
	track->patchPlayingTime=0;
    941c:	1c 8a       	std	Y+20, r1	; 0x14
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    941e:	88 81       	ld	r24, Y
    9420:	80 62       	ori	r24, 0x20	; 32
    9422:	87 7b       	andi	r24, 0xB7	; 183
    9424:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    9426:	19 86       	std	Y+9, r1	; 0x09
	track->tremoloPos=0;
    9428:	18 86       	std	Y+8, r1	; 0x08
	track->note=note;
    942a:	09 83       	std	Y+1, r16	; 0x01
	track->loopCount=0;
    942c:	1b 82       	std	Y+3, r1	; 0x03

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    942e:	9a 83       	std	Y+2, r25	; 0x02
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    9430:	13 30       	cpi	r17, 0x03	; 3
    9432:	69 f4       	brne	.+26     	; 0x944e <TriggerCommon+0x66>
			//noise channel		
			if(!isFx) patch=note;			
    9434:	ff 20       	and	r15, r15
    9436:	09 f4       	brne	.+2      	; 0x943a <TriggerCommon+0x52>
    9438:	e0 2e       	mov	r14, r16
			mixer.channels.type.noise.barrel=0x0101;				
    943a:	81 e0       	ldi	r24, 0x01	; 1
    943c:	91 e0       	ldi	r25, 0x01	; 1
    943e:	90 93 d6 08 	sts	0x08D6, r25
    9442:	80 93 d5 08 	sts	0x08D5, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    9446:	81 e0       	ldi	r24, 0x01	; 1
    9448:	80 93 d4 08 	sts	0x08D4, r24
    944c:	06 c0       	rjmp	.+12     	; 0x945a <TriggerCommon+0x72>
				SetMixerNote(channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    944e:	81 2f       	mov	r24, r17
    9450:	60 e0       	ldi	r22, 0x00	; 0
    9452:	c8 d2       	rcall	.+1424   	; 0x99e4 <SetMixerWave>
			SetMixerNote(channel,note);
    9454:	81 2f       	mov	r24, r17
    9456:	60 2f       	mov	r22, r16
    9458:	ae d2       	rcall	.+1372   	; 0x99b6 <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    945a:	ff 20       	and	r15, r15
    945c:	11 f0       	breq	.+4      	; 0x9462 <TriggerCommon+0x7a>
		track->fxPatchNo=patch;
    945e:	e8 8a       	std	Y+16, r14	; 0x10
    9460:	01 c0       	rjmp	.+2      	; 0x9464 <TriggerCommon+0x7c>
	}else{
		track->patchNo=patch;	
    9462:	ef 86       	std	Y+15, r14	; 0x0f
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    9464:	89 e0       	ldi	r24, 0x09	; 9
    9466:	e8 9e       	mul	r14, r24
    9468:	c0 01       	movw	r24, r0
    946a:	11 24       	eor	r1, r1
    946c:	e0 91 e1 09 	lds	r30, 0x09E1
    9470:	f0 91 e2 09 	lds	r31, 0x09E2
    9474:	e8 0f       	add	r30, r24
    9476:	f9 1f       	adc	r31, r25
    9478:	33 96       	adiw	r30, 0x03	; 3
    947a:	25 91       	lpm	r18, Z+
    947c:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    947e:	21 15       	cp	r18, r1
    9480:	31 05       	cpc	r19, r1
    9482:	19 f4       	brne	.+6      	; 0x948a <TriggerCommon+0xa2>
		track->patchCommandStreamPos=NULL;
    9484:	1e 8a       	std	Y+22, r1	; 0x16
    9486:	1d 8a       	std	Y+21, r1	; 0x15
    9488:	07 c0       	rjmp	.+14     	; 0x9498 <TriggerCommon+0xb0>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    948a:	f9 01       	movw	r30, r18
    948c:	84 91       	lpm	r24, Z+
    948e:	8a 8b       	std	Y+18, r24	; 0x12
		track->patchCommandStreamPos=pos;
    9490:	2f 5f       	subi	r18, 0xFF	; 255
    9492:	3f 4f       	sbci	r19, 0xFF	; 255
    9494:	3e 8b       	std	Y+22, r19	; 0x16
    9496:	2d 8b       	std	Y+21, r18	; 0x15
	}

}
    9498:	cd b7       	in	r28, 0x3d	; 61
    949a:	de b7       	in	r29, 0x3e	; 62
    949c:	e6 e0       	ldi	r30, 0x06	; 6
    949e:	0c 94 b1 75 	jmp	0xeb62	; 0xeb62 <__epilogue_restores__+0x18>

000094a2 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    94a2:	1f 93       	push	r17
    94a4:	78 2f       	mov	r23, r24
    94a6:	14 2f       	mov	r17, r20

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    94a8:	a8 2f       	mov	r26, r24
    94aa:	b0 e0       	ldi	r27, 0x00	; 0
    94ac:	87 e1       	ldi	r24, 0x17	; 23
    94ae:	90 e0       	ldi	r25, 0x00	; 0
    94b0:	a8 9f       	mul	r26, r24
    94b2:	f0 01       	movw	r30, r0
    94b4:	a9 9f       	mul	r26, r25
    94b6:	f0 0d       	add	r31, r0
    94b8:	b8 9f       	mul	r27, r24
    94ba:	f0 0d       	add	r31, r0
    94bc:	11 24       	eor	r1, r1
    94be:	ed 57       	subi	r30, 0x7D	; 125
    94c0:	f6 4f       	sbci	r31, 0xF6	; 246
    94c2:	30 81       	ld	r19, Z
    94c4:	53 2f       	mov	r21, r19
    94c6:	35 ff       	sbrs	r19, 5
    94c8:	02 c0       	rjmp	.+4      	; 0x94ce <TriggerNote+0x2c>
    94ca:	37 fd       	sbrc	r19, 7
    94cc:	32 c0       	rjmp	.+100    	; 0x9532 <TriggerNote+0x90>
			
		if(volume==0){ //note-off received
    94ce:	22 23       	and	r18, r18
    94d0:	f9 f4       	brne	.+62     	; 0x9510 <TriggerNote+0x6e>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    94d2:	87 e1       	ldi	r24, 0x17	; 23
    94d4:	90 e0       	ldi	r25, 0x00	; 0
    94d6:	a8 9f       	mul	r26, r24
    94d8:	f0 01       	movw	r30, r0
    94da:	a9 9f       	mul	r26, r25
    94dc:	f0 0d       	add	r31, r0
    94de:	b8 9f       	mul	r27, r24
    94e0:	f0 0d       	add	r31, r0
    94e2:	11 24       	eor	r1, r1
    94e4:	ed 57       	subi	r30, 0x7D	; 125
    94e6:	f6 4f       	sbci	r31, 0xF6	; 246
    94e8:	86 85       	ldd	r24, Z+14	; 0x0e
    94ea:	88 23       	and	r24, r24
    94ec:	11 f4       	brne	.+4      	; 0x94f2 <TriggerNote+0x50>
    94ee:	56 ff       	sbrs	r21, 6
				tracks[channel].noteVol=0;	
    94f0:	14 86       	std	Z+12, r1	; 0x0c
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    94f2:	87 e1       	ldi	r24, 0x17	; 23
    94f4:	90 e0       	ldi	r25, 0x00	; 0
    94f6:	a8 9f       	mul	r26, r24
    94f8:	f0 01       	movw	r30, r0
    94fa:	a9 9f       	mul	r26, r25
    94fc:	f0 0d       	add	r31, r0
    94fe:	b8 9f       	mul	r27, r24
    9500:	f0 0d       	add	r31, r0
    9502:	11 24       	eor	r1, r1
    9504:	ed 57       	subi	r30, 0x7D	; 125
    9506:	f6 4f       	sbci	r31, 0xF6	; 246
    9508:	80 81       	ld	r24, Z
    950a:	8f 7b       	andi	r24, 0xBF	; 191
    950c:	80 83       	st	Z, r24
    950e:	11 c0       	rjmp	.+34     	; 0x9532 <TriggerNote+0x90>
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9510:	87 e1       	ldi	r24, 0x17	; 23
    9512:	90 e0       	ldi	r25, 0x00	; 0
    9514:	a8 9f       	mul	r26, r24
    9516:	f0 01       	movw	r30, r0
    9518:	a9 9f       	mul	r26, r25
    951a:	f0 0d       	add	r31, r0
    951c:	b8 9f       	mul	r27, r24
    951e:	f0 0d       	add	r31, r0
    9520:	11 24       	eor	r1, r1
    9522:	ed 57       	subi	r30, 0x7D	; 125
    9524:	f6 4f       	sbci	r31, 0xF6	; 246
    9526:	3f 77       	andi	r19, 0x7F	; 127
    9528:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    952a:	87 2f       	mov	r24, r23
    952c:	42 2f       	mov	r20, r18
    952e:	21 2f       	mov	r18, r17
    9530:	5b df       	rcall	.-330    	; 0x93e8 <TriggerCommon>
		}

	}
}
    9532:	1f 91       	pop	r17
    9534:	08 95       	ret

00009536 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    9536:	af 92       	push	r10
    9538:	bf 92       	push	r11
    953a:	df 92       	push	r13
    953c:	ef 92       	push	r14
    953e:	ff 92       	push	r15
    9540:	0f 93       	push	r16
    9542:	1f 93       	push	r17
    9544:	cf 93       	push	r28
    9546:	df 93       	push	r29
    9548:	a3 e8       	ldi	r26, 0x83	; 131
    954a:	b9 e0       	ldi	r27, 0x09	; 9
    954c:	c2 ec       	ldi	r28, 0xC2	; 194
    954e:	d8 e0       	ldi	r29, 0x08	; 8
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    9550:	1e 96       	adiw	r26, 0x0e	; 14
    9552:	8c 91       	ld	r24, X
    9554:	1e 97       	sbiw	r26, 0x0e	; 14
    9556:	88 23       	and	r24, r24
    9558:	b9 f0       	breq	.+46     	; 0x9588 <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;		
    955a:	28 2f       	mov	r18, r24
    955c:	33 27       	eor	r19, r19
    955e:	27 fd       	sbrc	r18, 7
    9560:	30 95       	com	r19
    9562:	1d 96       	adiw	r26, 0x0d	; 13
    9564:	8c 91       	ld	r24, X
    9566:	1d 97       	sbiw	r26, 0x0d	; 13
    9568:	28 0f       	add	r18, r24
    956a:	31 1d       	adc	r19, r1
    956c:	2f 3f       	cpi	r18, 0xFF	; 255
    956e:	31 05       	cpc	r19, r1
    9570:	19 f0       	breq	.+6      	; 0x9578 <ProcessMusic+0x42>
    9572:	14 f0       	brlt	.+4      	; 0x9578 <ProcessMusic+0x42>
    9574:	2f ef       	ldi	r18, 0xFF	; 255
    9576:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9578:	c9 01       	movw	r24, r18
    957a:	37 ff       	sbrs	r19, 7
    957c:	02 c0       	rjmp	.+4      	; 0x9582 <ProcessMusic+0x4c>
    957e:	80 e0       	ldi	r24, 0x00	; 0
    9580:	90 e0       	ldi	r25, 0x00	; 0
    9582:	1d 96       	adiw	r26, 0x0d	; 13
    9584:	8c 93       	st	X, r24
    9586:	1d 97       	sbiw	r26, 0x0d	; 13
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    9588:	8c 91       	ld	r24, X
    958a:	83 ff       	sbrs	r24, 3
    958c:	26 c0       	rjmp	.+76     	; 0x95da <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    958e:	14 96       	adiw	r26, 0x04	; 4
    9590:	4d 91       	ld	r20, X+
    9592:	5c 91       	ld	r21, X
    9594:	15 97       	sbiw	r26, 0x05	; 5
    9596:	28 81       	ld	r18, Y
    9598:	39 81       	ldd	r19, Y+1	; 0x01
    959a:	24 0f       	add	r18, r20
    959c:	35 1f       	adc	r19, r21
    959e:	39 83       	std	Y+1, r19	; 0x01
    95a0:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    95a2:	16 96       	adiw	r26, 0x06	; 6
    95a4:	8c 91       	ld	r24, X
    95a6:	16 97       	sbiw	r26, 0x06	; 6
    95a8:	e8 2f       	mov	r30, r24
    95aa:	f0 e0       	ldi	r31, 0x00	; 0
    95ac:	ee 0f       	add	r30, r30
    95ae:	ff 1f       	adc	r31, r31
    95b0:	e8 5f       	subi	r30, 0xF8	; 248
    95b2:	f4 46       	sbci	r31, 0x64	; 100
    95b4:	85 91       	lpm	r24, Z+
    95b6:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    95b8:	14 16       	cp	r1, r20
    95ba:	15 06       	cpc	r1, r21
    95bc:	24 f4       	brge	.+8      	; 0x95c6 <ProcessMusic+0x90>
    95be:	28 17       	cp	r18, r24
    95c0:	39 07       	cpc	r19, r25
    95c2:	30 f4       	brcc	.+12     	; 0x95d0 <ProcessMusic+0x9a>
    95c4:	0a c0       	rjmp	.+20     	; 0x95da <ProcessMusic+0xa4>
    95c6:	45 2b       	or	r20, r21
    95c8:	41 f0       	breq	.+16     	; 0x95da <ProcessMusic+0xa4>
    95ca:	82 17       	cp	r24, r18
    95cc:	93 07       	cpc	r25, r19
    95ce:	28 f0       	brcs	.+10     	; 0x95da <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    95d0:	99 83       	std	Y+1, r25	; 0x01
    95d2:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    95d4:	8c 91       	ld	r24, X
    95d6:	87 7f       	andi	r24, 0xF7	; 247
    95d8:	8c 93       	st	X, r24
    95da:	57 96       	adiw	r26, 0x17	; 23
    95dc:	26 96       	adiw	r28, 0x06	; 6
	u8 channel;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    95de:	49 e0       	ldi	r20, 0x09	; 9
    95e0:	af 3d       	cpi	r26, 0xDF	; 223
    95e2:	b4 07       	cpc	r27, r20
    95e4:	09 f0       	breq	.+2      	; 0x95e8 <ProcessMusic+0xb2>
    95e6:	b4 cf       	rjmp	.-152    	; 0x9550 <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    95e8:	80 91 db 08 	lds	r24, 0x08DB
    95ec:	88 23       	and	r24, r24
    95ee:	09 f0       	breq	.+2      	; 0x95f2 <ProcessMusic+0xbc>
    95f0:	dc c0       	rjmp	.+440    	; 0x97aa <ProcessMusic+0x274>
    95f2:	ef c0       	rjmp	.+478    	; 0x97d2 <ProcessMusic+0x29c>
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){

				c1=pgm_read_byte(songPos++);
    95f4:	e0 91 e8 09 	lds	r30, 0x09E8
    95f8:	f0 91 e9 09 	lds	r31, 0x09E9
    95fc:	cf 01       	movw	r24, r30
    95fe:	01 96       	adiw	r24, 0x01	; 1
    9600:	90 93 e9 09 	sts	0x09E9, r25
    9604:	80 93 e8 09 	sts	0x09E8, r24
    9608:	44 91       	lpm	r20, Z+
			
				if(c1==0xff){
    960a:	4f 3f       	cpi	r20, 0xFF	; 255
    960c:	69 f5       	brne	.+90     	; 0x9668 <ProcessMusic+0x132>
					//META data type event
					c1=pgm_read_byte(songPos++);
    960e:	ac 01       	movw	r20, r24
    9610:	4f 5f       	subi	r20, 0xFF	; 255
    9612:	5f 4f       	sbci	r21, 0xFF	; 255
    9614:	50 93 e9 09 	sts	0x09E9, r21
    9618:	40 93 e8 09 	sts	0x09E8, r20
    961c:	fc 01       	movw	r30, r24
    961e:	84 91       	lpm	r24, Z+

				
					if(c1==0x2f){ //end of song
    9620:	8f 32       	cpi	r24, 0x2F	; 47
    9622:	19 f4       	brne	.+6      	; 0x962a <ProcessMusic+0xf4>
						playSong=false;
    9624:	10 92 db 08 	sts	0x08DB, r1
    9628:	ce c0       	rjmp	.+412    	; 0x97c6 <ProcessMusic+0x290>
						break;	
					}else if(c1==0x6){ //marker
    962a:	86 30       	cpi	r24, 0x06	; 6
    962c:	09 f0       	breq	.+2      	; 0x9630 <ProcessMusic+0xfa>
    962e:	b1 c0       	rjmp	.+354    	; 0x9792 <ProcessMusic+0x25c>
						c1=pgm_read_byte(songPos++); //read len
    9630:	fa 01       	movw	r30, r20
    9632:	31 96       	adiw	r30, 0x01	; 1
						c2=pgm_read_byte(songPos++); //read data
    9634:	cf 01       	movw	r24, r30
    9636:	01 96       	adiw	r24, 0x01	; 1
    9638:	90 93 e9 09 	sts	0x09E9, r25
    963c:	80 93 e8 09 	sts	0x09E8, r24
    9640:	e4 91       	lpm	r30, Z+
						if(c2=='S'){ //loop start
    9642:	e3 35       	cpi	r30, 0x53	; 83
    9644:	29 f4       	brne	.+10     	; 0x9650 <ProcessMusic+0x11a>
							loopStart=songPos;
    9646:	90 93 eb 09 	sts	0x09EB, r25
    964a:	80 93 ea 09 	sts	0x09EA, r24
    964e:	a1 c0       	rjmp	.+322    	; 0x9792 <ProcessMusic+0x25c>
						}else if(c2=='E'){//loop end
    9650:	e5 34       	cpi	r30, 0x45	; 69
    9652:	09 f0       	breq	.+2      	; 0x9656 <ProcessMusic+0x120>
    9654:	9e c0       	rjmp	.+316    	; 0x9792 <ProcessMusic+0x25c>
							songPos=loopStart;
    9656:	80 91 ea 09 	lds	r24, 0x09EA
    965a:	90 91 eb 09 	lds	r25, 0x09EB
    965e:	90 93 e9 09 	sts	0x09E9, r25
    9662:	80 93 e8 09 	sts	0x09E8, r24
    9666:	95 c0       	rjmp	.+298    	; 0x9792 <ProcessMusic+0x25c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    9668:	47 ff       	sbrs	r20, 7
    966a:	02 c0       	rjmp	.+4      	; 0x9670 <ProcessMusic+0x13a>
    966c:	40 93 e3 09 	sts	0x09E3, r20
					channel=lastStatus&0x0f;
    9670:	20 91 e3 09 	lds	r18, 0x09E3
    9674:	32 2f       	mov	r19, r18
    9676:	3f 70       	andi	r19, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    9678:	47 ff       	sbrs	r20, 7
    967a:	08 c0       	rjmp	.+16     	; 0x968c <ProcessMusic+0x156>
    967c:	01 96       	adiw	r24, 0x01	; 1
    967e:	90 93 e9 09 	sts	0x09E9, r25
    9682:	80 93 e8 09 	sts	0x09E8, r24
    9686:	01 97       	sbiw	r24, 0x01	; 1
    9688:	fc 01       	movw	r30, r24
    968a:	44 91       	lpm	r20, Z+

					switch(lastStatus&0xf0){
    968c:	82 2f       	mov	r24, r18
    968e:	90 e0       	ldi	r25, 0x00	; 0
    9690:	80 7f       	andi	r24, 0xF0	; 240
    9692:	90 70       	andi	r25, 0x00	; 0
    9694:	80 3b       	cpi	r24, 0xB0	; 176
    9696:	91 05       	cpc	r25, r1
    9698:	29 f1       	breq	.+74     	; 0x96e4 <ProcessMusic+0x1ae>
    969a:	80 3c       	cpi	r24, 0xC0	; 192
    969c:	91 05       	cpc	r25, r1
    969e:	09 f4       	brne	.+2      	; 0x96a2 <ProcessMusic+0x16c>
    96a0:	6c c0       	rjmp	.+216    	; 0x977a <ProcessMusic+0x244>
    96a2:	80 39       	cpi	r24, 0x90	; 144
    96a4:	91 05       	cpc	r25, r1
    96a6:	09 f0       	breq	.+2      	; 0x96aa <ProcessMusic+0x174>
    96a8:	74 c0       	rjmp	.+232    	; 0x9792 <ProcessMusic+0x25c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    96aa:	e0 91 e8 09 	lds	r30, 0x09E8
    96ae:	f0 91 e9 09 	lds	r31, 0x09E9
    96b2:	31 96       	adiw	r30, 0x01	; 1
    96b4:	f0 93 e9 09 	sts	0x09E9, r31
    96b8:	e0 93 e8 09 	sts	0x09E8, r30
    96bc:	31 97       	sbiw	r30, 0x01	; 1
    96be:	e4 91       	lpm	r30, Z+
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    96c0:	83 2f       	mov	r24, r19
    96c2:	90 e0       	ldi	r25, 0x00	; 0
    96c4:	8c 9f       	mul	r24, r28
    96c6:	d0 01       	movw	r26, r0
    96c8:	8d 9f       	mul	r24, r29
    96ca:	b0 0d       	add	r27, r0
    96cc:	9c 9f       	mul	r25, r28
    96ce:	b0 0d       	add	r27, r0
    96d0:	11 24       	eor	r1, r1
    96d2:	ad 57       	subi	r26, 0x7D	; 125
    96d4:	b6 4f       	sbci	r27, 0xF6	; 246
    96d6:	ee 0f       	add	r30, r30
    96d8:	83 2f       	mov	r24, r19
    96da:	1f 96       	adiw	r26, 0x0f	; 15
    96dc:	6c 91       	ld	r22, X
    96de:	2e 2f       	mov	r18, r30
    96e0:	e0 de       	rcall	.-576    	; 0x94a2 <TriggerNote>
    96e2:	57 c0       	rjmp	.+174    	; 0x9792 <ProcessMusic+0x25c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    96e4:	e0 91 e8 09 	lds	r30, 0x09E8
    96e8:	f0 91 e9 09 	lds	r31, 0x09E9
    96ec:	31 96       	adiw	r30, 0x01	; 1
    96ee:	f0 93 e9 09 	sts	0x09E9, r31
    96f2:	e0 93 e8 09 	sts	0x09E8, r30
    96f6:	31 97       	sbiw	r30, 0x01	; 1
    96f8:	24 91       	lpm	r18, Z+
						
							if(c1==CONTROLER_VOL){
    96fa:	47 30       	cpi	r20, 0x07	; 7
    96fc:	71 f4       	brne	.+28     	; 0x971a <ProcessMusic+0x1e4>
								tracks[channel].trackVol=c2<<1;
    96fe:	83 2f       	mov	r24, r19
    9700:	90 e0       	ldi	r25, 0x00	; 0
    9702:	8c 9f       	mul	r24, r28
    9704:	f0 01       	movw	r30, r0
    9706:	8d 9f       	mul	r24, r29
    9708:	f0 0d       	add	r31, r0
    970a:	9c 9f       	mul	r25, r28
    970c:	f0 0d       	add	r31, r0
    970e:	11 24       	eor	r1, r1
    9710:	ed 57       	subi	r30, 0x7D	; 125
    9712:	f6 4f       	sbci	r31, 0xF6	; 246
    9714:	22 0f       	add	r18, r18
    9716:	23 87       	std	Z+11, r18	; 0x0b
    9718:	3c c0       	rjmp	.+120    	; 0x9792 <ProcessMusic+0x25c>
							}else if(c1==CONTROLER_EXPRESSION){
    971a:	4b 30       	cpi	r20, 0x0B	; 11
    971c:	71 f4       	brne	.+28     	; 0x973a <ProcessMusic+0x204>
								tracks[channel].expressionVol=c2<<1;
    971e:	83 2f       	mov	r24, r19
    9720:	90 e0       	ldi	r25, 0x00	; 0
    9722:	8c 9f       	mul	r24, r28
    9724:	f0 01       	movw	r30, r0
    9726:	8d 9f       	mul	r24, r29
    9728:	f0 0d       	add	r31, r0
    972a:	9c 9f       	mul	r25, r28
    972c:	f0 0d       	add	r31, r0
    972e:	11 24       	eor	r1, r1
    9730:	ed 57       	subi	r30, 0x7D	; 125
    9732:	f6 4f       	sbci	r31, 0xF6	; 246
    9734:	22 0f       	add	r18, r18
    9736:	22 83       	std	Z+2, r18	; 0x02
    9738:	2c c0       	rjmp	.+88     	; 0x9792 <ProcessMusic+0x25c>
							}else if(c1==CONTROLER_TREMOLO){
    973a:	4c 35       	cpi	r20, 0x5C	; 92
    973c:	71 f4       	brne	.+28     	; 0x975a <ProcessMusic+0x224>
								tracks[channel].tremoloLevel=c2<<1;
    973e:	83 2f       	mov	r24, r19
    9740:	90 e0       	ldi	r25, 0x00	; 0
    9742:	8c 9f       	mul	r24, r28
    9744:	f0 01       	movw	r30, r0
    9746:	8d 9f       	mul	r24, r29
    9748:	f0 0d       	add	r31, r0
    974a:	9c 9f       	mul	r25, r28
    974c:	f0 0d       	add	r31, r0
    974e:	11 24       	eor	r1, r1
    9750:	ed 57       	subi	r30, 0x7D	; 125
    9752:	f6 4f       	sbci	r31, 0xF6	; 246
    9754:	22 0f       	add	r18, r18
    9756:	21 87       	std	Z+9, r18	; 0x09
    9758:	1c c0       	rjmp	.+56     	; 0x9792 <ProcessMusic+0x25c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    975a:	44 36       	cpi	r20, 0x64	; 100
    975c:	d1 f4       	brne	.+52     	; 0x9792 <ProcessMusic+0x25c>
								tracks[channel].tremoloRate=c2<<1;
    975e:	83 2f       	mov	r24, r19
    9760:	90 e0       	ldi	r25, 0x00	; 0
    9762:	8c 9f       	mul	r24, r28
    9764:	f0 01       	movw	r30, r0
    9766:	8d 9f       	mul	r24, r29
    9768:	f0 0d       	add	r31, r0
    976a:	9c 9f       	mul	r25, r28
    976c:	f0 0d       	add	r31, r0
    976e:	11 24       	eor	r1, r1
    9770:	ed 57       	subi	r30, 0x7D	; 125
    9772:	f6 4f       	sbci	r31, 0xF6	; 246
    9774:	22 0f       	add	r18, r18
    9776:	22 87       	std	Z+10, r18	; 0x0a
    9778:	0c c0       	rjmp	.+24     	; 0x9792 <ProcessMusic+0x25c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    977a:	83 2f       	mov	r24, r19
    977c:	90 e0       	ldi	r25, 0x00	; 0
    977e:	8c 9f       	mul	r24, r28
    9780:	f0 01       	movw	r30, r0
    9782:	8d 9f       	mul	r24, r29
    9784:	f0 0d       	add	r31, r0
    9786:	9c 9f       	mul	r25, r28
    9788:	f0 0d       	add	r31, r0
    978a:	11 24       	eor	r1, r1
    978c:	ed 57       	subi	r30, 0x7D	; 125
    978e:	f6 4f       	sbci	r31, 0xF6	; 246
    9790:	47 87       	std	Z+15, r20	; 0x0f


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    9792:	88 ee       	ldi	r24, 0xE8	; 232
    9794:	99 e0       	ldi	r25, 0x09	; 9
    9796:	fe dd       	rcall	.-1028   	; 0x9394 <ReadVarLen>
    9798:	90 93 e6 09 	sts	0x09E6, r25
    979c:	80 93 e5 09 	sts	0x09E5, r24
				currDeltaTime=0;
    97a0:	10 92 e0 09 	sts	0x09E0, r1
    97a4:	10 92 df 09 	sts	0x09DF, r1
    97a8:	02 c0       	rjmp	.+4      	; 0x97ae <ProcessMusic+0x278>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    97aa:	c7 e1       	ldi	r28, 0x17	; 23
    97ac:	d0 e0       	ldi	r29, 0x00	; 0
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    97ae:	20 91 df 09 	lds	r18, 0x09DF
    97b2:	30 91 e0 09 	lds	r19, 0x09E0
    97b6:	80 91 e5 09 	lds	r24, 0x09E5
    97ba:	90 91 e6 09 	lds	r25, 0x09E6
    97be:	28 17       	cp	r18, r24
    97c0:	39 07       	cpc	r19, r25
    97c2:	09 f4       	brne	.+2      	; 0x97c6 <ProcessMusic+0x290>
    97c4:	17 cf       	rjmp	.-466    	; 0x95f4 <ProcessMusic+0xbe>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    97c6:	2f 5f       	subi	r18, 0xFF	; 255
    97c8:	3f 4f       	sbci	r19, 0xFF	; 255
    97ca:	30 93 e0 09 	sts	0x09E0, r19
    97ce:	20 93 df 09 	sts	0x09DF, r18
    97d2:	c3 e8       	ldi	r28, 0x83	; 131
    97d4:	d9 e0       	ldi	r29, 0x09	; 9
    97d6:	01 ec       	ldi	r16, 0xC1	; 193
    97d8:	18 e0       	ldi	r17, 0x08	; 8
    97da:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    97dc:	6f ef       	ldi	r22, 0xFF	; 255
    97de:	a6 2e       	mov	r10, r22
    97e0:	b1 2c       	mov	r11, r1
					}
				#endif

			}//end while
		
			currDeltaTime++;
    97e2:	dc 2e       	mov	r13, r28
    97e4:	ed 2e       	mov	r14, r29
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    97e6:	88 81       	ld	r24, Y
    97e8:	86 fd       	sbrc	r24, 6
    97ea:	3d c0       	rjmp	.+122    	; 0x9866 <ProcessMusic+0x330>

			if(track->patchCommandStreamPos!=NULL && 
    97ec:	8d 89       	ldd	r24, Y+21	; 0x15
    97ee:	9e 89       	ldd	r25, Y+22	; 0x16
    97f0:	89 2b       	or	r24, r25
    97f2:	09 f4       	brne	.+2      	; 0x97f6 <ProcessMusic+0x2c0>
    97f4:	35 c0       	rjmp	.+106    	; 0x9860 <ProcessMusic+0x32a>
    97f6:	9b 89       	ldd	r25, Y+19	; 0x13
    97f8:	8a 89       	ldd	r24, Y+18	; 0x12
    97fa:	98 17       	cp	r25, r24
    97fc:	68 f5       	brcc	.+90     	; 0x9858 <ProcessMusic+0x322>
    97fe:	30 c0       	rjmp	.+96     	; 0x9860 <ProcessMusic+0x32a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    9800:	ed 89       	ldd	r30, Y+21	; 0x15
    9802:	fe 89       	ldd	r31, Y+22	; 0x16
    9804:	cf 01       	movw	r24, r30
    9806:	01 96       	adiw	r24, 0x01	; 1
    9808:	9e 8b       	std	Y+22, r25	; 0x16
    980a:	8d 8b       	std	Y+21, r24	; 0x15
    980c:	24 91       	lpm	r18, Z+
					if(c1==0xff){					
    980e:	2f 3f       	cpi	r18, 0xFF	; 255
    9810:	31 f4       	brne	.+12     	; 0x981e <ProcessMusic+0x2e8>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9812:	88 81       	ld	r24, Y
    9814:	8f 77       	andi	r24, 0x7F	; 127
    9816:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    9818:	1e 8a       	std	Y+22, r1	; 0x16
    981a:	1d 8a       	std	Y+21, r1	; 0x15
    981c:	21 c0       	rjmp	.+66     	; 0x9860 <ProcessMusic+0x32a>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    981e:	01 96       	adiw	r24, 0x01	; 1
    9820:	9e 8b       	std	Y+22, r25	; 0x16
    9822:	8d 8b       	std	Y+21, r24	; 0x15
    9824:	01 97       	sbiw	r24, 0x01	; 1
    9826:	fc 01       	movw	r30, r24
    9828:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    982a:	82 2f       	mov	r24, r18
    982c:	90 e0       	ldi	r25, 0x00	; 0
    982e:	88 0f       	add	r24, r24
    9830:	99 1f       	adc	r25, r25
    9832:	82 54       	subi	r24, 0x42	; 66
    9834:	9f 4f       	sbci	r25, 0xFF	; 255
    9836:	fc 01       	movw	r30, r24
    9838:	25 91       	lpm	r18, Z+
    983a:	34 91       	lpm	r19, Z+
    983c:	8d 2d       	mov	r24, r13
    983e:	9e 2d       	mov	r25, r14
    9840:	6f 2d       	mov	r22, r15
    9842:	f9 01       	movw	r30, r18
    9844:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9846:	ed 89       	ldd	r30, Y+21	; 0x15
    9848:	fe 89       	ldd	r31, Y+22	; 0x16
    984a:	31 96       	adiw	r30, 0x01	; 1
    984c:	fe 8b       	std	Y+22, r31	; 0x16
    984e:	ed 8b       	std	Y+21, r30	; 0x15
    9850:	31 97       	sbiw	r30, 0x01	; 1
    9852:	e4 91       	lpm	r30, Z+
    9854:	ea 8b       	std	Y+18, r30	; 0x12
					
					track->patchCurrDeltaTime=0;	
    9856:	1b 8a       	std	Y+19, r1	; 0x13

			if(track->patchCommandStreamPos!=NULL && 
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    9858:	9b 89       	ldd	r25, Y+19	; 0x13
    985a:	8a 89       	ldd	r24, Y+18	; 0x12
    985c:	98 17       	cp	r25, r24
    985e:	81 f2       	breq	.-96     	; 0x9800 <ProcessMusic+0x2ca>
					track->patchCurrDeltaTime=0;	

				}		
			}				
			
			track->patchCurrDeltaTime++;
    9860:	8b 89       	ldd	r24, Y+19	; 0x13
    9862:	8f 5f       	subi	r24, 0xFF	; 255
    9864:	8b 8b       	std	Y+19, r24	; 0x13
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9866:	88 81       	ld	r24, Y
    9868:	85 fd       	sbrc	r24, 5
    986a:	03 c0       	rjmp	.+6      	; 0x9872 <ProcessMusic+0x33c>
    986c:	20 e0       	ldi	r18, 0x00	; 0
    986e:	30 e0       	ldi	r19, 0x00	; 0
    9870:	70 c0       	rjmp	.+224    	; 0x9952 <ProcessMusic+0x41c>
		
			if(track->patchPlayingTime<0xff){
    9872:	8c 89       	ldd	r24, Y+20	; 0x14
    9874:	8f 3f       	cpi	r24, 0xFF	; 255
    9876:	11 f0       	breq	.+4      	; 0x987c <ProcessMusic+0x346>
				track->patchPlayingTime++;
    9878:	8f 5f       	subi	r24, 0xFF	; 255
    987a:	8c 8b       	std	Y+20, r24	; 0x14
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    987c:	88 81       	ld	r24, Y
    987e:	87 ff       	sbrs	r24, 7
    9880:	02 c0       	rjmp	.+4      	; 0x9886 <ProcessMusic+0x350>
    9882:	8f ef       	ldi	r24, 0xFF	; 255
    9884:	01 c0       	rjmp	.+2      	; 0x9888 <ProcessMusic+0x352>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    9886:	8b 85       	ldd	r24, Y+11	; 0x0b
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    9888:	9c 85       	ldd	r25, Y+12	; 0x0c
    988a:	99 23       	and	r25, r25
    988c:	09 f4       	brne	.+2      	; 0x9890 <ProcessMusic+0x35a>
    988e:	5b c0       	rjmp	.+182    	; 0x9946 <ProcessMusic+0x410>
    9890:	2d 85       	ldd	r18, Y+13	; 0x0d
    9892:	22 23       	and	r18, r18
    9894:	09 f4       	brne	.+2      	; 0x9898 <ProcessMusic+0x362>
    9896:	57 c0       	rjmp	.+174    	; 0x9946 <ProcessMusic+0x410>
    9898:	88 23       	and	r24, r24
    989a:	09 f4       	brne	.+2      	; 0x989e <ProcessMusic+0x368>
    989c:	54 c0       	rjmp	.+168    	; 0x9946 <ProcessMusic+0x410>
    989e:	40 91 e4 09 	lds	r20, 0x09E4
    98a2:	44 23       	and	r20, r20
    98a4:	09 f4       	brne	.+2      	; 0x98a8 <ProcessMusic+0x372>
    98a6:	4f c0       	rjmp	.+158    	; 0x9946 <ProcessMusic+0x410>

				uVol=(track->noteVol*trackVol)+0x100;
    98a8:	89 9f       	mul	r24, r25
    98aa:	c0 01       	movw	r24, r0
    98ac:	11 24       	eor	r1, r1
    98ae:	80 50       	subi	r24, 0x00	; 0
    98b0:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				
				uVol=(uVol*track->envelopeVol)+0x100;
    98b2:	89 2f       	mov	r24, r25
    98b4:	99 27       	eor	r25, r25
    98b6:	30 e0       	ldi	r19, 0x00	; 0
    98b8:	b9 01       	movw	r22, r18
    98ba:	86 9f       	mul	r24, r22
    98bc:	90 01       	movw	r18, r0
    98be:	87 9f       	mul	r24, r23
    98c0:	30 0d       	add	r19, r0
    98c2:	96 9f       	mul	r25, r22
    98c4:	30 0d       	add	r19, r0
    98c6:	11 24       	eor	r1, r1
    98c8:	20 50       	subi	r18, 0x00	; 0
    98ca:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    98cc:	23 2f       	mov	r18, r19
    98ce:	33 27       	eor	r19, r19
    98d0:	8a 81       	ldd	r24, Y+2	; 0x02
    98d2:	90 e0       	ldi	r25, 0x00	; 0
    98d4:	fc 01       	movw	r30, r24
    98d6:	2e 9f       	mul	r18, r30
    98d8:	c0 01       	movw	r24, r0
    98da:	2f 9f       	mul	r18, r31
    98dc:	90 0d       	add	r25, r0
    98de:	3e 9f       	mul	r19, r30
    98e0:	90 0d       	add	r25, r0
    98e2:	11 24       	eor	r1, r1
    98e4:	80 50       	subi	r24, 0x00	; 0
    98e6:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    98e8:	89 2f       	mov	r24, r25
    98ea:	99 27       	eor	r25, r25
    98ec:	24 2f       	mov	r18, r20
    98ee:	30 e0       	ldi	r19, 0x00	; 0
    98f0:	ac 01       	movw	r20, r24
    98f2:	42 9f       	mul	r20, r18
    98f4:	c0 01       	movw	r24, r0
    98f6:	43 9f       	mul	r20, r19
    98f8:	90 0d       	add	r25, r0
    98fa:	52 9f       	mul	r21, r18
    98fc:	90 0d       	add	r25, r0
    98fe:	11 24       	eor	r1, r1
    9900:	80 50       	subi	r24, 0x00	; 0
    9902:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    9904:	29 2f       	mov	r18, r25
    9906:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    9908:	89 85       	ldd	r24, Y+9	; 0x09
    990a:	88 23       	and	r24, r24
    990c:	f1 f0       	breq	.+60     	; 0x994a <ProcessMusic+0x414>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    990e:	e8 85       	ldd	r30, Y+8	; 0x08
    9910:	f0 e0       	ldi	r31, 0x00	; 0
    9912:	e0 50       	subi	r30, 0x00	; 0
    9914:	f3 46       	sbci	r31, 0x63	; 99
    9916:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    9918:	e0 58       	subi	r30, 0x80	; 128
    991a:	e8 9f       	mul	r30, r24
    991c:	c0 01       	movw	r24, r0
    991e:	11 24       	eor	r1, r1
    9920:	80 50       	subi	r24, 0x00	; 0
    9922:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9924:	89 2f       	mov	r24, r25
    9926:	99 27       	eor	r25, r25
    9928:	b5 01       	movw	r22, r10
    992a:	68 1b       	sub	r22, r24
    992c:	79 0b       	sbc	r23, r25
    992e:	62 9f       	mul	r22, r18
    9930:	c0 01       	movw	r24, r0
    9932:	63 9f       	mul	r22, r19
    9934:	90 0d       	add	r25, r0
    9936:	72 9f       	mul	r23, r18
    9938:	90 0d       	add	r25, r0
    993a:	11 24       	eor	r1, r1
    993c:	80 50       	subi	r24, 0x00	; 0
    993e:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    9940:	29 2f       	mov	r18, r25
    9942:	33 27       	eor	r19, r19
    9944:	02 c0       	rjmp	.+4      	; 0x994a <ProcessMusic+0x414>
    9946:	20 e0       	ldi	r18, 0x00	; 0
    9948:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    994a:	88 85       	ldd	r24, Y+8	; 0x08
    994c:	9a 85       	ldd	r25, Y+10	; 0x0a
    994e:	89 0f       	add	r24, r25
    9950:	88 87       	std	Y+8, r24	; 0x08

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9952:	f8 01       	movw	r30, r16
    9954:	20 83       	st	Z, r18


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9956:	f3 94       	inc	r15
    9958:	67 96       	adiw	r28, 0x17	; 23
    995a:	0a 5f       	subi	r16, 0xFA	; 250
    995c:	1f 4f       	sbci	r17, 0xFF	; 255
    995e:	f4 e0       	ldi	r31, 0x04	; 4
    9960:	ff 16       	cp	r15, r31
    9962:	09 f0       	breq	.+2      	; 0x9966 <ProcessMusic+0x430>
    9964:	3e cf       	rjmp	.-388    	; 0x97e2 <ProcessMusic+0x2ac>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9966:	df 91       	pop	r29
    9968:	cf 91       	pop	r28
    996a:	1f 91       	pop	r17
    996c:	0f 91       	pop	r16
    996e:	ff 90       	pop	r15
    9970:	ef 90       	pop	r14
    9972:	df 90       	pop	r13
    9974:	bf 90       	pop	r11
    9976:	af 90       	pop	r10
    9978:	08 95       	ret

0000997a <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    997a:	ff 92       	push	r15
    997c:	0f 93       	push	r16
    997e:	1f 93       	push	r17
    9980:	8c 01       	movw	r16, r24
    9982:	86 2f       	mov	r24, r22
    9984:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    9986:	64 2f       	mov	r22, r20
    9988:	16 d0       	rcall	.+44     	; 0x99b6 <SetMixerNote>
	track->note=param;
    998a:	f8 01       	movw	r30, r16
    998c:	f1 82       	std	Z+1, r15	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    998e:	80 81       	ld	r24, Z
    9990:	87 7f       	andi	r24, 0xF7	; 247
    9992:	80 83       	st	Z, r24
}
    9994:	1f 91       	pop	r17
    9996:	0f 91       	pop	r16
    9998:	ff 90       	pop	r15
    999a:	08 95       	ret

0000999c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    999c:	fc 01       	movw	r30, r24
    999e:	86 2f       	mov	r24, r22
	track->note-=param;
    99a0:	61 81       	ldd	r22, Z+1	; 0x01
    99a2:	64 1b       	sub	r22, r20
    99a4:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
}
    99a6:	07 c0       	rjmp	.+14     	; 0x99b6 <SetMixerNote>

000099a8 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    99a8:	fc 01       	movw	r30, r24
    99aa:	86 2f       	mov	r24, r22
	track->note+=param;
    99ac:	91 81       	ldd	r25, Z+1	; 0x01
    99ae:	49 0f       	add	r20, r25
    99b0:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    99b2:	64 2f       	mov	r22, r20
}
    99b4:	00 c0       	rjmp	.+0      	; 0x99b6 <SetMixerNote>

000099b6 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    99b6:	99 27       	eor	r25, r25
	clr r23
    99b8:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    99ba:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    99bc:	09 f4       	brne	.+2      	; 0x99c0 <set_note_waves>
		ret
    99be:	08 95       	ret

000099c0 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    99c0:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    99c2:	fb e9       	ldi	r31, 0x9B	; 155
	lsl r22
    99c4:	66 0f       	add	r22, r22
	rol r23
    99c6:	77 1f       	adc	r23, r23
	add ZL,r22
    99c8:	e6 0f       	add	r30, r22
	adc ZH,r23	
    99ca:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    99cc:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    99ce:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    99d0:	e1 ec       	ldi	r30, 0xC1	; 193
	ldi ZH,hi8(mixerStruct)
    99d2:	f8 e0       	ldi	r31, 0x08	; 8
	ldi r18,CHANNEL_STRUCT_SIZE
    99d4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    99d6:	28 9f       	mul	r18, r24
	add ZL,r0
    99d8:	e0 0d       	add	r30, r0
	adc ZH,r1
    99da:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    99dc:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    99de:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    99e0:	11 24       	eor	r1, r1
	

	ret
    99e2:	08 95       	ret

000099e4 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    99e4:	99 27       	eor	r25, r25
	clr r23
    99e6:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    99e8:	e1 ec       	ldi	r30, 0xC1	; 193
	ldi ZH,hi8(mixerStruct)
    99ea:	f8 e0       	ldi	r31, 0x08	; 8
	ldi r18,CHANNEL_STRUCT_SIZE
    99ec:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    99ee:	28 9f       	mul	r18, r24
	add ZL,r0
    99f0:	e0 0d       	add	r30, r0
	adc ZH,r1
    99f2:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    99f4:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    99f6:	31 f4       	brne	.+12     	; 0x9a04 <smw1>
	lds r22,tr4_params
    99f8:	60 91 d4 08 	lds	r22, 0x08D4
	andi r22,0xfe;
    99fc:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    99fe:	60 93 d4 08 	sts	0x08D4, r22
	rjmp esmw	
    9a02:	0b c0       	rjmp	.+22     	; 0x9a1a <esmw>

00009a04 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9a04:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9a06:	31 f4       	brne	.+12     	; 0x9a14 <smw2>
	lds r22,tr4_params
    9a08:	60 91 d4 08 	lds	r22, 0x08D4
	ori r22,0xfe;
    9a0c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    9a0e:	60 93 d4 08 	sts	0x08D4, r22
	rjmp esmw
    9a12:	03 c0       	rjmp	.+6      	; 0x9a1a <esmw>

00009a14 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9a14:	7d e9       	ldi	r23, 0x9D	; 157
	add r23,r22
    9a16:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9a18:	75 83       	std	Z+5, r23	; 0x05

00009a1a <esmw>:

esmw:
	clr r1	
    9a1a:	11 24       	eor	r1, r1
	ret
    9a1c:	08 95       	ret
	...

00009b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9b02:	80 93 c0 08 	sts	0x08C0, r24
	ret
    9b06:	08 95       	ret

00009b08 <steptable>:
    9b08:	22 00       	.word	0x0022	; ????
    9b0a:	24 00       	.word	0x0024	; ????
    9b0c:	26 00       	.word	0x0026	; ????
    9b0e:	28 00       	.word	0x0028	; ????
    9b10:	2b 00       	.word	0x002b	; ????
    9b12:	2d 00       	.word	0x002d	; ????
    9b14:	30 00       	.word	0x0030	; ????
    9b16:	33 00       	.word	0x0033	; ????
    9b18:	36 00       	.word	0x0036	; ????
    9b1a:	39 00       	.word	0x0039	; ????
    9b1c:	3d 00       	.word	0x003d	; ????
    9b1e:	40 00       	.word	0x0040	; ????
    9b20:	44 00       	.word	0x0044	; ????
    9b22:	48 00       	.word	0x0048	; ????
    9b24:	4c 00       	.word	0x004c	; ????
    9b26:	51 00       	.word	0x0051	; ????
    9b28:	56 00       	.word	0x0056	; ????
    9b2a:	5b 00       	.word	0x005b	; ????
    9b2c:	60 00       	.word	0x0060	; ????
    9b2e:	66 00       	.word	0x0066	; ????
    9b30:	6c 00       	.word	0x006c	; ????
    9b32:	73 00       	.word	0x0073	; ????
    9b34:	79 00       	.word	0x0079	; ????
    9b36:	81 00       	.word	0x0081	; ????
    9b38:	88 00       	.word	0x0088	; ????
    9b3a:	90 00       	.word	0x0090	; ????
    9b3c:	99 00       	.word	0x0099	; ????
    9b3e:	a2 00       	.word	0x00a2	; ????
    9b40:	ac 00       	.word	0x00ac	; ????
    9b42:	b6 00       	.word	0x00b6	; ????
    9b44:	c1 00       	.word	0x00c1	; ????
    9b46:	cc 00       	.word	0x00cc	; ????
    9b48:	d8 00       	.word	0x00d8	; ????
    9b4a:	e5 00       	.word	0x00e5	; ????
    9b4c:	f3 00       	.word	0x00f3	; ????
    9b4e:	01 01       	movw	r0, r2
    9b50:	10 01       	movw	r2, r0
    9b52:	21 01       	movw	r4, r2
    9b54:	32 01       	movw	r6, r4
    9b56:	44 01       	movw	r8, r8
    9b58:	57 01       	movw	r10, r14
    9b5a:	6c 01       	movw	r12, r24
    9b5c:	81 01       	movw	r16, r2
    9b5e:	98 01       	movw	r18, r16
    9b60:	b0 01       	movw	r22, r0
    9b62:	ca 01       	movw	r24, r20
    9b64:	e5 01       	movw	r28, r10
    9b66:	02 02       	muls	r16, r18
    9b68:	21 02       	muls	r18, r17
    9b6a:	41 02       	muls	r20, r17
    9b6c:	64 02       	muls	r22, r20
    9b6e:	88 02       	muls	r24, r24
    9b70:	ae 02       	muls	r26, r30
    9b72:	d7 02       	muls	r29, r23
    9b74:	03 03       	mulsu	r16, r19
    9b76:	30 03       	mulsu	r19, r16
    9b78:	61 03       	mulsu	r22, r17
    9b7a:	94 03       	fmuls	r17, r20
    9b7c:	cb 03       	fmulsu	r20, r19
    9b7e:	05 04       	cpc	r0, r5
    9b80:	42 04       	cpc	r4, r2
    9b82:	83 04       	cpc	r8, r3
    9b84:	c7 04       	cpc	r12, r7
    9b86:	10 05       	cpc	r17, r0
    9b88:	5d 05       	cpc	r21, r13
    9b8a:	af 05       	cpc	r26, r15
    9b8c:	05 06       	cpc	r0, r21
    9b8e:	61 06       	cpc	r6, r17
    9b90:	c2 06       	cpc	r12, r18
    9b92:	29 07       	cpc	r18, r25
    9b94:	96 07       	cpc	r25, r22
    9b96:	09 08       	sbc	r0, r9
    9b98:	83 08       	sbc	r8, r3
    9b9a:	05 09       	sbc	r16, r5
    9b9c:	8e 09       	sbc	r24, r14
    9b9e:	20 0a       	sbc	r2, r16
    9ba0:	ba 0a       	sbc	r11, r26
    9ba2:	5d 0b       	sbc	r21, r29
    9ba4:	0a 0c       	add	r0, r10
    9ba6:	c1 0c       	add	r12, r1
    9ba8:	84 0d       	add	r24, r4
    9baa:	51 0e       	add	r5, r17
    9bac:	2b 0f       	add	r18, r27
    9bae:	12 10       	cpse	r1, r2
    9bb0:	07 11       	cpse	r16, r7
    9bb2:	0a 12       	cpse	r0, r26
    9bb4:	1d 13       	cpse	r17, r29
    9bb6:	40 14       	cp	r4, r0
    9bb8:	74 15       	cp	r23, r4
    9bba:	ba 16       	cp	r11, r26
    9bbc:	14 18       	sub	r1, r4
    9bbe:	83 19       	sub	r24, r3
    9bc0:	07 1b       	sub	r16, r23
    9bc2:	a3 1c       	adc	r10, r3
    9bc4:	57 1e       	adc	r5, r23
    9bc6:	24 20       	and	r2, r4
    9bc8:	0e 22       	and	r0, r30
    9bca:	14 24       	eor	r1, r4
    9bcc:	39 26       	eor	r3, r25
    9bce:	7f 28       	or	r7, r15
    9bd0:	e8 2a       	or	r14, r24
    9bd2:	75 2d       	mov	r23, r5
    9bd4:	29 30       	cpi	r18, 0x09	; 9
    9bd6:	06 33       	cpi	r16, 0x36	; 54
    9bd8:	0f 36       	cpi	r16, 0x6F	; 111
    9bda:	45 39       	cpi	r20, 0x95	; 149
    9bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    9bde:	49 40       	sbci	r20, 0x09	; 9
    9be0:	1b 44       	sbci	r17, 0x4B	; 75
    9be2:	28 48       	sbci	r18, 0x88	; 136
    9be4:	73 4c       	sbci	r23, 0xC3	; 195
    9be6:	fe 50       	subi	r31, 0x0E	; 14
    9be8:	cf 55       	subi	r28, 0x5F	; 95
    9bea:	ea 5a       	subi	r30, 0xAA	; 170
    9bec:	51 60       	ori	r21, 0x01	; 1
    9bee:	0c 66       	ori	r16, 0x6C	; 108
    9bf0:	1d 6c       	ori	r17, 0xCD	; 205
    9bf2:	8b 72       	andi	r24, 0x2B	; 43
    9bf4:	5a 79       	andi	r21, 0x9A	; 154
    9bf6:	92 80       	ldd	r9, Z+2	; 0x02
    9bf8:	37 88       	ldd	r3, Z+23	; 0x17
    9bfa:	50 90 e5 98 	lds	r5, 0x98E5
    9bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    9c00:	9f ab       	std	Y+55, r25	; 0x37
    9c02:	d3 b5       	in	r29, 0x23	; 35
    9c04:	a3 c0       	rjmp	.+326    	; 0x9d4c <waves+0x4c>
	...

00009d00 <waves>:
    9d00:	00 03       	mulsu	r16, r16
    9d02:	06 09       	sbc	r16, r6
    9d04:	0c 10       	cpse	r0, r12
    9d06:	13 16       	cp	r1, r19
    9d08:	19 1c       	adc	r1, r9
    9d0a:	1f 22       	and	r1, r31
    9d0c:	25 28       	or	r2, r5
    9d0e:	2b 2e       	mov	r2, r27
    9d10:	31 33       	cpi	r19, 0x31	; 49
    9d12:	36 39       	cpi	r19, 0x96	; 150
    9d14:	3c 3f       	cpi	r19, 0xFC	; 252
    9d16:	41 44       	sbci	r20, 0x41	; 65
    9d18:	47 49       	sbci	r20, 0x97	; 151
    9d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9d1c:	51 53       	subi	r21, 0x31	; 49
    9d1e:	55 58       	subi	r21, 0x85	; 133
    9d20:	5a 5c       	subi	r21, 0xCA	; 202
    9d22:	5e 60       	ori	r21, 0x0E	; 14
    9d24:	62 64       	ori	r22, 0x42	; 66
    9d26:	66 68       	ori	r22, 0x86	; 134
    9d28:	6a 6b       	ori	r22, 0xBA	; 186
    9d2a:	6d 6f       	ori	r22, 0xFD	; 253
    9d2c:	70 71       	andi	r23, 0x10	; 16
    9d2e:	73 74       	andi	r23, 0x43	; 67
    9d30:	75 76       	andi	r23, 0x65	; 101
    9d32:	78 79       	andi	r23, 0x98	; 152
    9d34:	7a 7a       	andi	r23, 0xAA	; 170
    9d36:	7b 7c       	andi	r23, 0xCB	; 203
    9d38:	7d 7d       	andi	r23, 0xDD	; 221
    9d3a:	7e 7e       	andi	r23, 0xEE	; 238
    9d3c:	7e 7f       	andi	r23, 0xFE	; 254
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7e 7e       	andi	r23, 0xEE	; 238
    9d46:	7e 7d       	andi	r23, 0xDE	; 222
    9d48:	7d 7c       	andi	r23, 0xCD	; 205
    9d4a:	7b 7a       	andi	r23, 0xAB	; 171
    9d4c:	7a 79       	andi	r23, 0x9A	; 154
    9d4e:	78 76       	andi	r23, 0x68	; 104
    9d50:	75 74       	andi	r23, 0x45	; 69
    9d52:	73 71       	andi	r23, 0x13	; 19
    9d54:	70 6f       	ori	r23, 0xF0	; 240
    9d56:	6d 6b       	ori	r22, 0xBD	; 189
    9d58:	6a 68       	ori	r22, 0x8A	; 138
    9d5a:	66 64       	ori	r22, 0x46	; 70
    9d5c:	62 60       	ori	r22, 0x02	; 2
    9d5e:	5e 5c       	subi	r21, 0xCE	; 206
    9d60:	5a 58       	subi	r21, 0x8A	; 138
    9d62:	55 53       	subi	r21, 0x35	; 53
    9d64:	51 4e       	sbci	r21, 0xE1	; 225
    9d66:	4c 49       	sbci	r20, 0x9C	; 156
    9d68:	47 44       	sbci	r20, 0x47	; 71
    9d6a:	41 3f       	cpi	r20, 0xF1	; 241
    9d6c:	3c 39       	cpi	r19, 0x9C	; 156
    9d6e:	36 33       	cpi	r19, 0x36	; 54
    9d70:	31 2e       	mov	r3, r17
    9d72:	2b 28       	or	r2, r11
    9d74:	25 22       	and	r2, r21
    9d76:	1f 1c       	adc	r1, r15
    9d78:	19 16       	cp	r1, r25
    9d7a:	13 10       	cpse	r1, r3
    9d7c:	0c 09       	sbc	r16, r12
    9d7e:	06 03       	mulsu	r16, r22
    9d80:	00 fd       	sbrc	r16, 0
    9d82:	fa f7       	brpl	.-2      	; 0x9d82 <waves+0x82>
    9d84:	f4 f0       	brlt	.+60     	; 0x9dc2 <waves+0xc2>
    9d86:	ed ea       	ldi	r30, 0xAD	; 173
    9d88:	e7 e4       	ldi	r30, 0x47	; 71
    9d8a:	e1 de       	rcall	.-574    	; 0x9b4e <steptable+0x46>
    9d8c:	db d8       	rcall	.-3658   	; 0x8f44 <UartReadChar+0x30>
    9d8e:	d5 d2       	rcall	.+1450   	; 0xa33a <waves+0x63a>
    9d90:	cf cd       	rjmp	.-1122   	; 0x9930 <ProcessMusic+0x3fa>
    9d92:	ca c7       	rjmp	.+3988   	; 0xad28 <DrawCard+0x26a>
    9d94:	c4 c1       	rjmp	.+904    	; 0xa11e <waves+0x41e>
    9d96:	bf bc       	out	0x2f, r11	; 47
    9d98:	b9 b7       	in	r27, 0x39	; 57
    9d9a:	b4 b2       	in	r11, 0x14	; 20
    9d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    9d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    9da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    9da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    9da4:	9e 9c       	mul	r9, r14
    9da6:	9a 98       	cbi	0x13, 2	; 19
    9da8:	96 95       	lsr	r25
    9daa:	93 91       	.word	0x9193	; ????
    9dac:	90 8f       	std	Z+24, r25	; 0x18
    9dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9db0:	8b 8a       	std	Y+19, r8	; 0x13
    9db2:	88 87       	std	Y+8, r24	; 0x08
    9db4:	86 86       	std	Z+14, r8	; 0x0e
    9db6:	85 84       	ldd	r8, Z+13	; 0x0d
    9db8:	83 83       	std	Z+3, r24	; 0x03
    9dba:	82 82       	std	Z+2, r8	; 0x02
    9dbc:	82 81       	ldd	r24, Z+2	; 0x02
    9dbe:	81 81       	ldd	r24, Z+1	; 0x01
    9dc0:	81 81       	ldd	r24, Z+1	; 0x01
    9dc2:	81 81       	ldd	r24, Z+1	; 0x01
    9dc4:	82 82       	std	Z+2, r8	; 0x02
    9dc6:	82 83       	std	Z+2, r24	; 0x02
    9dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    9dca:	85 86       	std	Z+13, r8	; 0x0d
    9dcc:	86 87       	std	Z+14, r24	; 0x0e
    9dce:	88 8a       	std	Y+16, r8	; 0x10
    9dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    9dd4:	90 91 93 95 	lds	r25, 0x9593
    9dd8:	96 98       	cbi	0x12, 6	; 18
    9dda:	9a 9c       	mul	r9, r10
    9ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    9dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    9de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    9de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    9de4:	af b2       	in	r10, 0x1f	; 31
    9de6:	b4 b7       	in	r27, 0x34	; 52
    9de8:	b9 bc       	out	0x29, r11	; 41
    9dea:	bf c1       	rjmp	.+894    	; 0xa16a <waves+0x46a>
    9dec:	c4 c7       	rjmp	.+3976   	; 0xad76 <DrawCard+0x2b8>
    9dee:	ca cd       	rjmp	.-1132   	; 0x9984 <PatchCommand08+0xa>
    9df0:	cf d2       	rcall	.+1438   	; 0xa390 <waves+0x690>
    9df2:	d5 d8       	rcall	.-3670   	; 0x8f9e <GetPrngNumber+0x1a>
    9df4:	db de       	rcall	.-586    	; 0x9bac <steptable+0xa4>
    9df6:	e1 e4       	ldi	r30, 0x41	; 65
    9df8:	e7 ea       	ldi	r30, 0xA7	; 167
    9dfa:	ed f0       	brhs	.+58     	; 0x9e36 <waves+0x136>
    9dfc:	f4 f7       	brge	.-4      	; 0x9dfa <waves+0xfa>
    9dfe:	fa fd       	.word	0xfdfa	; ????
    9e00:	80 81       	ld	r24, Z
    9e02:	82 83       	std	Z+2, r24	; 0x02
    9e04:	84 85       	ldd	r24, Z+12	; 0x0c
    9e06:	86 87       	std	Z+14, r24	; 0x0e
    9e08:	88 89       	ldd	r24, Y+16	; 0x10
    9e0a:	8a 8b       	std	Y+18, r24	; 0x12
    9e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    9e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    9e10:	90 91 92 93 	lds	r25, 0x9392
    9e14:	94 95       	.word	0x9594	; ????
    9e16:	96 97       	sbiw	r26, 0x26	; 38
    9e18:	98 99       	sbic	0x13, 0	; 19
    9e1a:	9a 9b       	sbis	0x13, 2	; 19
    9e1c:	9c 9d       	mul	r25, r12
    9e1e:	9e 9f       	mul	r25, r30
    9e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    9e22:	a2 a3       	std	Z+34, r26	; 0x22
    9e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9e26:	a6 a7       	std	Z+46, r26	; 0x2e
    9e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    9e2a:	aa ab       	std	Y+50, r26	; 0x32
    9e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    9e2e:	ae af       	std	Y+62, r26	; 0x3e
    9e30:	b0 b1       	in	r27, 0x00	; 0
    9e32:	b2 b3       	in	r27, 0x12	; 18
    9e34:	b4 b5       	in	r27, 0x24	; 36
    9e36:	b6 b7       	in	r27, 0x36	; 54
    9e38:	b8 b9       	out	0x08, r27	; 8
    9e3a:	ba bb       	out	0x1a, r27	; 26
    9e3c:	bc bd       	out	0x2c, r27	; 44
    9e3e:	be bf       	out	0x3e, r27	; 62
    9e40:	c0 c1       	rjmp	.+896    	; 0xa1c2 <waves+0x4c2>
    9e42:	c2 c3       	rjmp	.+1924   	; 0xa5c8 <ProcessSprites+0xac>
    9e44:	c4 c5       	rjmp	.+2952   	; 0xa9ce <SetEEPromFlags+0x74>
    9e46:	c6 c7       	rjmp	.+3980   	; 0xadd4 <DrawCard+0x316>
    9e48:	c8 c9       	rjmp	.-3184   	; 0x91da <PatchCommand09>
    9e4a:	ca cb       	rjmp	.-2156   	; 0x95e0 <ProcessMusic+0xaa>
    9e4c:	cc cd       	rjmp	.-1128   	; 0x99e6 <SetMixerWave+0x2>
    9e4e:	ce cf       	rjmp	.-100    	; 0x9dec <waves+0xec>
    9e50:	d0 d1       	rcall	.+928    	; 0xa1f2 <waves+0x4f2>
    9e52:	d2 d3       	rcall	.+1956   	; 0xa5f8 <ProcessSprites+0xdc>
    9e54:	d4 d5       	rcall	.+2984   	; 0xa9fe <SetEEPromFlags+0xa4>
    9e56:	d6 d7       	rcall	.+4012   	; 0xae04 <DrawCard+0x346>
    9e58:	d8 d9       	rcall	.-3152   	; 0x920a <PatchCommand11+0x24>
    9e5a:	da db       	rcall	.-2124   	; 0x9610 <ProcessMusic+0xda>
    9e5c:	dc dd       	rcall	.-1096   	; 0x9a16 <smw2+0x2>
    9e5e:	de df       	rcall	.-68     	; 0x9e1c <waves+0x11c>
    9e60:	e0 e1       	ldi	r30, 0x10	; 16
    9e62:	e2 e3       	ldi	r30, 0x32	; 50
    9e64:	e4 e5       	ldi	r30, 0x54	; 84
    9e66:	e6 e7       	ldi	r30, 0x76	; 118
    9e68:	e8 e9       	ldi	r30, 0x98	; 152
    9e6a:	ea eb       	ldi	r30, 0xBA	; 186
    9e6c:	ec ed       	ldi	r30, 0xDC	; 220
    9e6e:	ee ef       	ldi	r30, 0xFE	; 254
    9e70:	f0 f1       	brcs	.+124    	; 0x9eee <waves+0x1ee>
    9e72:	f2 f3       	brmi	.-4      	; 0x9e70 <waves+0x170>
    9e74:	f4 f5       	brge	.+124    	; 0x9ef2 <waves+0x1f2>
    9e76:	f6 f7       	brtc	.-4      	; 0x9e74 <waves+0x174>
    9e78:	f8 f9       	.word	0xf9f8	; ????
    9e7a:	fa fb       	.word	0xfbfa	; ????
    9e7c:	fc fd       	.word	0xfdfc	; ????
    9e7e:	fe ff       	.word	0xfffe	; ????
    9e80:	00 01       	movw	r0, r0
    9e82:	02 03       	mulsu	r16, r18
    9e84:	04 05       	cpc	r16, r4
    9e86:	06 07       	cpc	r16, r22
    9e88:	08 09       	sbc	r16, r8
    9e8a:	0a 0b       	sbc	r16, r26
    9e8c:	0c 0d       	add	r16, r12
    9e8e:	0e 0f       	add	r16, r30
    9e90:	10 11       	cpse	r17, r0
    9e92:	12 13       	cpse	r17, r18
    9e94:	14 15       	cp	r17, r4
    9e96:	16 17       	cp	r17, r22
    9e98:	18 19       	sub	r17, r8
    9e9a:	1a 1b       	sub	r17, r26
    9e9c:	1c 1d       	adc	r17, r12
    9e9e:	1e 1f       	adc	r17, r30
    9ea0:	20 21       	and	r18, r0
    9ea2:	22 23       	and	r18, r18
    9ea4:	24 25       	eor	r18, r4
    9ea6:	26 27       	eor	r18, r22
    9ea8:	28 29       	or	r18, r8
    9eaa:	2a 2b       	or	r18, r26
    9eac:	2c 2d       	mov	r18, r12
    9eae:	2e 2f       	mov	r18, r30
    9eb0:	30 31       	cpi	r19, 0x10	; 16
    9eb2:	32 33       	cpi	r19, 0x32	; 50
    9eb4:	34 35       	cpi	r19, 0x54	; 84
    9eb6:	36 37       	cpi	r19, 0x76	; 118
    9eb8:	38 39       	cpi	r19, 0x98	; 152
    9eba:	3a 3b       	cpi	r19, 0xBA	; 186
    9ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    9ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    9ec0:	40 41       	sbci	r20, 0x10	; 16
    9ec2:	42 43       	sbci	r20, 0x32	; 50
    9ec4:	44 45       	sbci	r20, 0x54	; 84
    9ec6:	46 47       	sbci	r20, 0x76	; 118
    9ec8:	48 49       	sbci	r20, 0x98	; 152
    9eca:	4a 4b       	sbci	r20, 0xBA	; 186
    9ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    9ece:	4e 4f       	sbci	r20, 0xFE	; 254
    9ed0:	50 51       	subi	r21, 0x10	; 16
    9ed2:	52 53       	subi	r21, 0x32	; 50
    9ed4:	54 55       	subi	r21, 0x54	; 84
    9ed6:	56 57       	subi	r21, 0x76	; 118
    9ed8:	58 59       	subi	r21, 0x98	; 152
    9eda:	5a 5b       	subi	r21, 0xBA	; 186
    9edc:	5c 5d       	subi	r21, 0xDC	; 220
    9ede:	5e 5f       	subi	r21, 0xFE	; 254
    9ee0:	60 61       	ori	r22, 0x10	; 16
    9ee2:	62 63       	ori	r22, 0x32	; 50
    9ee4:	64 65       	ori	r22, 0x54	; 84
    9ee6:	66 67       	ori	r22, 0x76	; 118
    9ee8:	68 69       	ori	r22, 0x98	; 152
    9eea:	6a 6b       	ori	r22, 0xBA	; 186
    9eec:	6c 6d       	ori	r22, 0xDC	; 220
    9eee:	6e 6f       	ori	r22, 0xFE	; 254
    9ef0:	70 71       	andi	r23, 0x10	; 16
    9ef2:	72 73       	andi	r23, 0x32	; 50
    9ef4:	74 75       	andi	r23, 0x54	; 84
    9ef6:	76 77       	andi	r23, 0x76	; 118
    9ef8:	78 79       	andi	r23, 0x98	; 152
    9efa:	7a 7b       	andi	r23, 0xBA	; 186
    9efc:	7c 7d       	andi	r23, 0xDC	; 220
    9efe:	7e 7f       	andi	r23, 0xFE	; 254
    9f00:	00 02       	muls	r16, r16
    9f02:	04 06       	cpc	r0, r20
    9f04:	08 0a       	sbc	r0, r24
    9f06:	0c 0e       	add	r0, r28
    9f08:	10 12       	cpse	r1, r16
    9f0a:	14 16       	cp	r1, r20
    9f0c:	18 1a       	sub	r1, r24
    9f0e:	1c 1e       	adc	r1, r28
    9f10:	20 22       	and	r2, r16
    9f12:	24 26       	eor	r2, r20
    9f14:	28 2a       	or	r2, r24
    9f16:	2c 2e       	mov	r2, r28
    9f18:	30 32       	cpi	r19, 0x20	; 32
    9f1a:	34 36       	cpi	r19, 0x64	; 100
    9f1c:	38 3a       	cpi	r19, 0xA8	; 168
    9f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    9f20:	40 42       	sbci	r20, 0x20	; 32
    9f22:	44 46       	sbci	r20, 0x64	; 100
    9f24:	48 4a       	sbci	r20, 0xA8	; 168
    9f26:	4c 4e       	sbci	r20, 0xEC	; 236
    9f28:	50 52       	subi	r21, 0x20	; 32
    9f2a:	54 56       	subi	r21, 0x64	; 100
    9f2c:	58 5a       	subi	r21, 0xA8	; 168
    9f2e:	5c 5e       	subi	r21, 0xEC	; 236
    9f30:	60 62       	ori	r22, 0x20	; 32
    9f32:	64 66       	ori	r22, 0x64	; 100
    9f34:	68 6a       	ori	r22, 0xA8	; 168
    9f36:	6c 6e       	ori	r22, 0xEC	; 236
    9f38:	70 72       	andi	r23, 0x20	; 32
    9f3a:	74 76       	andi	r23, 0x64	; 100
    9f3c:	78 7a       	andi	r23, 0xA8	; 168
    9f3e:	7c 7e       	andi	r23, 0xEC	; 236
    9f40:	7f 7d       	andi	r23, 0xDF	; 223
    9f42:	7b 79       	andi	r23, 0x9B	; 155
    9f44:	77 75       	andi	r23, 0x57	; 87
    9f46:	73 71       	andi	r23, 0x13	; 19
    9f48:	6f 6d       	ori	r22, 0xDF	; 223
    9f4a:	6b 69       	ori	r22, 0x9B	; 155
    9f4c:	67 65       	ori	r22, 0x57	; 87
    9f4e:	63 61       	ori	r22, 0x13	; 19
    9f50:	5f 5d       	subi	r21, 0xDF	; 223
    9f52:	5b 59       	subi	r21, 0x9B	; 155
    9f54:	57 55       	subi	r21, 0x57	; 87
    9f56:	53 51       	subi	r21, 0x13	; 19
    9f58:	4f 4d       	sbci	r20, 0xDF	; 223
    9f5a:	4b 49       	sbci	r20, 0x9B	; 155
    9f5c:	47 45       	sbci	r20, 0x57	; 87
    9f5e:	43 41       	sbci	r20, 0x13	; 19
    9f60:	3f 3d       	cpi	r19, 0xDF	; 223
    9f62:	3b 39       	cpi	r19, 0x9B	; 155
    9f64:	37 35       	cpi	r19, 0x57	; 87
    9f66:	33 31       	cpi	r19, 0x13	; 19
    9f68:	2f 2d       	mov	r18, r15
    9f6a:	2b 29       	or	r18, r11
    9f6c:	27 25       	eor	r18, r7
    9f6e:	23 21       	and	r18, r3
    9f70:	1f 1d       	adc	r17, r15
    9f72:	1b 19       	sub	r17, r11
    9f74:	17 15       	cp	r17, r7
    9f76:	13 11       	cpse	r17, r3
    9f78:	0f 0d       	add	r16, r15
    9f7a:	0b 09       	sbc	r16, r11
    9f7c:	07 05       	cpc	r16, r7
    9f7e:	03 01       	movw	r0, r6
    9f80:	ff fd       	.word	0xfdff	; ????
    9f82:	fb f9       	.word	0xf9fb	; ????
    9f84:	f7 f5       	brid	.+124    	; 0xa002 <waves+0x302>
    9f86:	f3 f1       	brvs	.+124    	; 0xa004 <waves+0x304>
    9f88:	ef ed       	ldi	r30, 0xDF	; 223
    9f8a:	eb e9       	ldi	r30, 0x9B	; 155
    9f8c:	e7 e5       	ldi	r30, 0x57	; 87
    9f8e:	e3 e1       	ldi	r30, 0x13	; 19
    9f90:	df dd       	rcall	.-1090   	; 0x9b50 <steptable+0x48>
    9f92:	db d9       	rcall	.-3146   	; 0x934a <StartSong+0x42>
    9f94:	d7 d5       	rcall	.+2990   	; 0xab44 <DrawCard+0x86>
    9f96:	d3 d1       	rcall	.+934    	; 0xa33e <waves+0x63e>
    9f98:	cf cd       	rjmp	.-1122   	; 0x9b38 <steptable+0x30>
    9f9a:	cb c9       	rjmp	.-3178   	; 0x9332 <StartSong+0x2a>
    9f9c:	c7 c5       	rjmp	.+2958   	; 0xab2c <DrawCard+0x6e>
    9f9e:	c3 c1       	rjmp	.+902    	; 0xa326 <waves+0x626>
    9fa0:	bf bd       	out	0x2f, r27	; 47
    9fa2:	bb b9       	out	0x0b, r27	; 11
    9fa4:	b7 b5       	in	r27, 0x27	; 39
    9fa6:	b3 b1       	in	r27, 0x03	; 3
    9fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    9faa:	ab a9       	ldd	r26, Y+51	; 0x33
    9fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    9fb0:	9f 9d       	mul	r25, r15
    9fb2:	9b 99       	sbic	0x13, 3	; 19
    9fb4:	97 95       	ror	r25
    9fb6:	93 91       	.word	0x9193	; ????
    9fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    9fba:	8b 89       	ldd	r24, Y+19	; 0x13
    9fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    9fbe:	83 81       	ldd	r24, Z+3	; 0x03
    9fc0:	80 82       	st	Z, r8
    9fc2:	84 86       	std	Z+12, r8	; 0x0c
    9fc4:	88 8a       	std	Y+16, r8	; 0x10
    9fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    9fc8:	90 92 94 96 	sts	0x9694, r9
    9fcc:	98 9a       	sbi	0x13, 0	; 19
    9fce:	9c 9e       	mul	r9, r28
    9fd0:	a0 a2       	std	Z+32, r10	; 0x20
    9fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    9fd4:	a8 aa       	std	Y+48, r10	; 0x30
    9fd6:	ac ae       	std	Y+60, r10	; 0x3c
    9fd8:	b0 b2       	in	r11, 0x10	; 16
    9fda:	b4 b6       	in	r11, 0x34	; 52
    9fdc:	b8 ba       	out	0x18, r11	; 24
    9fde:	bc be       	out	0x3c, r11	; 60
    9fe0:	c0 c2       	rjmp	.+1408   	; 0xa562 <ProcessSprites+0x46>
    9fe2:	c4 c6       	rjmp	.+3464   	; 0xad6c <DrawCard+0x2ae>
    9fe4:	c8 ca       	rjmp	.-2672   	; 0x9576 <ProcessMusic+0x40>
    9fe6:	cc ce       	rjmp	.-616    	; 0x9d80 <waves+0x80>
    9fe8:	d0 d2       	rcall	.+1440   	; 0xa58a <ProcessSprites+0x6e>
    9fea:	d4 d6       	rcall	.+3496   	; 0xad94 <DrawCard+0x2d6>
    9fec:	d8 da       	rcall	.-2640   	; 0x959e <ProcessMusic+0x68>
    9fee:	dc de       	rcall	.-584    	; 0x9da8 <waves+0xa8>
    9ff0:	e0 e2       	ldi	r30, 0x20	; 32
    9ff2:	e4 e6       	ldi	r30, 0x64	; 100
    9ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    9ff6:	ec ee       	ldi	r30, 0xEC	; 236
    9ff8:	f0 f2       	brcs	.-68     	; 0x9fb6 <waves+0x2b6>
    9ffa:	f4 f6       	brge	.-68     	; 0x9fb8 <waves+0x2b8>
    9ffc:	f8 fa       	.word	0xfaf8	; ????
    9ffe:	fc fe       	.word	0xfefc	; ????
    a000:	7f 7f       	andi	r23, 0xFF	; 255
    a002:	7f 7f       	andi	r23, 0xFF	; 255
    a004:	7f 7f       	andi	r23, 0xFF	; 255
    a006:	7f 7f       	andi	r23, 0xFF	; 255
    a008:	7f 7f       	andi	r23, 0xFF	; 255
    a00a:	7f 7f       	andi	r23, 0xFF	; 255
    a00c:	7f 7f       	andi	r23, 0xFF	; 255
    a00e:	7f 7f       	andi	r23, 0xFF	; 255
    a010:	7f 7f       	andi	r23, 0xFF	; 255
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	80 80       	ld	r8, Z
    a042:	80 80       	ld	r8, Z
    a044:	80 80       	ld	r8, Z
    a046:	80 80       	ld	r8, Z
    a048:	80 80       	ld	r8, Z
    a04a:	80 80       	ld	r8, Z
    a04c:	80 80       	ld	r8, Z
    a04e:	80 80       	ld	r8, Z
    a050:	80 80       	ld	r8, Z
    a052:	80 80       	ld	r8, Z
    a054:	80 80       	ld	r8, Z
    a056:	80 80       	ld	r8, Z
    a058:	80 80       	ld	r8, Z
    a05a:	80 80       	ld	r8, Z
    a05c:	80 80       	ld	r8, Z
    a05e:	80 80       	ld	r8, Z
    a060:	80 80       	ld	r8, Z
    a062:	80 80       	ld	r8, Z
    a064:	80 80       	ld	r8, Z
    a066:	80 80       	ld	r8, Z
    a068:	80 80       	ld	r8, Z
    a06a:	80 80       	ld	r8, Z
    a06c:	80 80       	ld	r8, Z
    a06e:	80 80       	ld	r8, Z
    a070:	80 80       	ld	r8, Z
    a072:	80 80       	ld	r8, Z
    a074:	80 80       	ld	r8, Z
    a076:	80 80       	ld	r8, Z
    a078:	80 80       	ld	r8, Z
    a07a:	80 80       	ld	r8, Z
    a07c:	80 80       	ld	r8, Z
    a07e:	80 80       	ld	r8, Z
    a080:	80 80       	ld	r8, Z
    a082:	80 80       	ld	r8, Z
    a084:	80 80       	ld	r8, Z
    a086:	80 80       	ld	r8, Z
    a088:	80 80       	ld	r8, Z
    a08a:	80 80       	ld	r8, Z
    a08c:	80 80       	ld	r8, Z
    a08e:	80 80       	ld	r8, Z
    a090:	80 80       	ld	r8, Z
    a092:	80 80       	ld	r8, Z
    a094:	80 80       	ld	r8, Z
    a096:	80 80       	ld	r8, Z
    a098:	80 80       	ld	r8, Z
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 80       	ld	r8, Z
    a0f6:	80 80       	ld	r8, Z
    a0f8:	80 80       	ld	r8, Z
    a0fa:	80 80       	ld	r8, Z
    a0fc:	80 80       	ld	r8, Z
    a0fe:	80 80       	ld	r8, Z
    a100:	7f 7f       	andi	r23, 0xFF	; 255
    a102:	7f 7f       	andi	r23, 0xFF	; 255
    a104:	7f 7f       	andi	r23, 0xFF	; 255
    a106:	7f 7f       	andi	r23, 0xFF	; 255
    a108:	7f 7f       	andi	r23, 0xFF	; 255
    a10a:	7f 7f       	andi	r23, 0xFF	; 255
    a10c:	7f 7f       	andi	r23, 0xFF	; 255
    a10e:	7f 7f       	andi	r23, 0xFF	; 255
    a110:	7f 7f       	andi	r23, 0xFF	; 255
    a112:	7f 7f       	andi	r23, 0xFF	; 255
    a114:	7f 7f       	andi	r23, 0xFF	; 255
    a116:	7f 7f       	andi	r23, 0xFF	; 255
    a118:	7f 7f       	andi	r23, 0xFF	; 255
    a11a:	7f 7f       	andi	r23, 0xFF	; 255
    a11c:	7f 7f       	andi	r23, 0xFF	; 255
    a11e:	7f 7f       	andi	r23, 0xFF	; 255
    a120:	7f 7f       	andi	r23, 0xFF	; 255
    a122:	7f 7f       	andi	r23, 0xFF	; 255
    a124:	7f 7f       	andi	r23, 0xFF	; 255
    a126:	7f 7f       	andi	r23, 0xFF	; 255
    a128:	7f 7f       	andi	r23, 0xFF	; 255
    a12a:	7f 7f       	andi	r23, 0xFF	; 255
    a12c:	7f 7f       	andi	r23, 0xFF	; 255
    a12e:	7f 7f       	andi	r23, 0xFF	; 255
    a130:	7f 7f       	andi	r23, 0xFF	; 255
    a132:	7f 7f       	andi	r23, 0xFF	; 255
    a134:	7f 7f       	andi	r23, 0xFF	; 255
    a136:	7f 7f       	andi	r23, 0xFF	; 255
    a138:	7f 7f       	andi	r23, 0xFF	; 255
    a13a:	7f 7f       	andi	r23, 0xFF	; 255
    a13c:	7f 7f       	andi	r23, 0xFF	; 255
    a13e:	7f 7f       	andi	r23, 0xFF	; 255
    a140:	7f 7f       	andi	r23, 0xFF	; 255
    a142:	7f 7f       	andi	r23, 0xFF	; 255
    a144:	7f 7f       	andi	r23, 0xFF	; 255
    a146:	7f 7f       	andi	r23, 0xFF	; 255
    a148:	7f 7f       	andi	r23, 0xFF	; 255
    a14a:	7f 7f       	andi	r23, 0xFF	; 255
    a14c:	7f 7f       	andi	r23, 0xFF	; 255
    a14e:	7f 7f       	andi	r23, 0xFF	; 255
    a150:	7f 7f       	andi	r23, 0xFF	; 255
    a152:	7f 7f       	andi	r23, 0xFF	; 255
    a154:	7f 7f       	andi	r23, 0xFF	; 255
    a156:	7f 7f       	andi	r23, 0xFF	; 255
    a158:	7f 7f       	andi	r23, 0xFF	; 255
    a15a:	7f 7f       	andi	r23, 0xFF	; 255
    a15c:	7f 7f       	andi	r23, 0xFF	; 255
    a15e:	7f 7f       	andi	r23, 0xFF	; 255
    a160:	7f 7f       	andi	r23, 0xFF	; 255
    a162:	7f 7f       	andi	r23, 0xFF	; 255
    a164:	7f 7f       	andi	r23, 0xFF	; 255
    a166:	7f 7f       	andi	r23, 0xFF	; 255
    a168:	7f 7f       	andi	r23, 0xFF	; 255
    a16a:	7f 7f       	andi	r23, 0xFF	; 255
    a16c:	7f 7f       	andi	r23, 0xFF	; 255
    a16e:	7f 7f       	andi	r23, 0xFF	; 255
    a170:	7f 7f       	andi	r23, 0xFF	; 255
    a172:	7f 7f       	andi	r23, 0xFF	; 255
    a174:	7f 7f       	andi	r23, 0xFF	; 255
    a176:	7f 7f       	andi	r23, 0xFF	; 255
    a178:	7f 7f       	andi	r23, 0xFF	; 255
    a17a:	7f 7f       	andi	r23, 0xFF	; 255
    a17c:	7f 7f       	andi	r23, 0xFF	; 255
    a17e:	7f 7f       	andi	r23, 0xFF	; 255
    a180:	80 80       	ld	r8, Z
    a182:	80 80       	ld	r8, Z
    a184:	80 80       	ld	r8, Z
    a186:	80 80       	ld	r8, Z
    a188:	80 80       	ld	r8, Z
    a18a:	80 80       	ld	r8, Z
    a18c:	80 80       	ld	r8, Z
    a18e:	80 80       	ld	r8, Z
    a190:	80 80       	ld	r8, Z
    a192:	80 80       	ld	r8, Z
    a194:	80 80       	ld	r8, Z
    a196:	80 80       	ld	r8, Z
    a198:	80 80       	ld	r8, Z
    a19a:	80 80       	ld	r8, Z
    a19c:	80 80       	ld	r8, Z
    a19e:	80 80       	ld	r8, Z
    a1a0:	80 80       	ld	r8, Z
    a1a2:	80 80       	ld	r8, Z
    a1a4:	80 80       	ld	r8, Z
    a1a6:	80 80       	ld	r8, Z
    a1a8:	80 80       	ld	r8, Z
    a1aa:	80 80       	ld	r8, Z
    a1ac:	80 80       	ld	r8, Z
    a1ae:	80 80       	ld	r8, Z
    a1b0:	80 80       	ld	r8, Z
    a1b2:	80 80       	ld	r8, Z
    a1b4:	80 80       	ld	r8, Z
    a1b6:	80 80       	ld	r8, Z
    a1b8:	80 80       	ld	r8, Z
    a1ba:	80 80       	ld	r8, Z
    a1bc:	80 80       	ld	r8, Z
    a1be:	80 80       	ld	r8, Z
    a1c0:	80 80       	ld	r8, Z
    a1c2:	80 80       	ld	r8, Z
    a1c4:	80 80       	ld	r8, Z
    a1c6:	80 80       	ld	r8, Z
    a1c8:	80 80       	ld	r8, Z
    a1ca:	80 80       	ld	r8, Z
    a1cc:	80 80       	ld	r8, Z
    a1ce:	80 80       	ld	r8, Z
    a1d0:	80 80       	ld	r8, Z
    a1d2:	80 80       	ld	r8, Z
    a1d4:	80 80       	ld	r8, Z
    a1d6:	80 80       	ld	r8, Z
    a1d8:	80 80       	ld	r8, Z
    a1da:	80 80       	ld	r8, Z
    a1dc:	80 80       	ld	r8, Z
    a1de:	80 80       	ld	r8, Z
    a1e0:	80 80       	ld	r8, Z
    a1e2:	80 80       	ld	r8, Z
    a1e4:	80 80       	ld	r8, Z
    a1e6:	80 80       	ld	r8, Z
    a1e8:	80 80       	ld	r8, Z
    a1ea:	80 80       	ld	r8, Z
    a1ec:	80 80       	ld	r8, Z
    a1ee:	80 80       	ld	r8, Z
    a1f0:	80 80       	ld	r8, Z
    a1f2:	80 80       	ld	r8, Z
    a1f4:	80 80       	ld	r8, Z
    a1f6:	80 80       	ld	r8, Z
    a1f8:	80 80       	ld	r8, Z
    a1fa:	80 80       	ld	r8, Z
    a1fc:	80 80       	ld	r8, Z
    a1fe:	80 80       	ld	r8, Z
    a200:	7f 7f       	andi	r23, 0xFF	; 255
    a202:	7f 7f       	andi	r23, 0xFF	; 255
    a204:	7f 7f       	andi	r23, 0xFF	; 255
    a206:	7f 7f       	andi	r23, 0xFF	; 255
    a208:	7f 7f       	andi	r23, 0xFF	; 255
    a20a:	7f 7f       	andi	r23, 0xFF	; 255
    a20c:	7f 7f       	andi	r23, 0xFF	; 255
    a20e:	7f 7f       	andi	r23, 0xFF	; 255
    a210:	7f 7f       	andi	r23, 0xFF	; 255
    a212:	7f 7f       	andi	r23, 0xFF	; 255
    a214:	7f 7f       	andi	r23, 0xFF	; 255
    a216:	7f 7f       	andi	r23, 0xFF	; 255
    a218:	7f 7f       	andi	r23, 0xFF	; 255
    a21a:	7f 7f       	andi	r23, 0xFF	; 255
    a21c:	7f 7f       	andi	r23, 0xFF	; 255
    a21e:	7f 7f       	andi	r23, 0xFF	; 255
    a220:	7f 7f       	andi	r23, 0xFF	; 255
    a222:	7f 7f       	andi	r23, 0xFF	; 255
    a224:	7f 7f       	andi	r23, 0xFF	; 255
    a226:	7f 7f       	andi	r23, 0xFF	; 255
    a228:	7f 7f       	andi	r23, 0xFF	; 255
    a22a:	7f 7f       	andi	r23, 0xFF	; 255
    a22c:	7f 7f       	andi	r23, 0xFF	; 255
    a22e:	7f 7f       	andi	r23, 0xFF	; 255
    a230:	7f 7f       	andi	r23, 0xFF	; 255
    a232:	7f 7f       	andi	r23, 0xFF	; 255
    a234:	7f 7f       	andi	r23, 0xFF	; 255
    a236:	7f 7f       	andi	r23, 0xFF	; 255
    a238:	7f 7f       	andi	r23, 0xFF	; 255
    a23a:	7f 7f       	andi	r23, 0xFF	; 255
    a23c:	7f 7f       	andi	r23, 0xFF	; 255
    a23e:	7f 7f       	andi	r23, 0xFF	; 255
    a240:	7f 7f       	andi	r23, 0xFF	; 255
    a242:	7f 7f       	andi	r23, 0xFF	; 255
    a244:	7f 7f       	andi	r23, 0xFF	; 255
    a246:	7f 7f       	andi	r23, 0xFF	; 255
    a248:	7f 7f       	andi	r23, 0xFF	; 255
    a24a:	7f 7f       	andi	r23, 0xFF	; 255
    a24c:	7f 7f       	andi	r23, 0xFF	; 255
    a24e:	7f 7f       	andi	r23, 0xFF	; 255
    a250:	7f 7f       	andi	r23, 0xFF	; 255
    a252:	7f 7f       	andi	r23, 0xFF	; 255
    a254:	7f 7f       	andi	r23, 0xFF	; 255
    a256:	7f 7f       	andi	r23, 0xFF	; 255
    a258:	7f 7f       	andi	r23, 0xFF	; 255
    a25a:	7f 7f       	andi	r23, 0xFF	; 255
    a25c:	7f 7f       	andi	r23, 0xFF	; 255
    a25e:	7f 7f       	andi	r23, 0xFF	; 255
    a260:	7f 7f       	andi	r23, 0xFF	; 255
    a262:	7f 7f       	andi	r23, 0xFF	; 255
    a264:	7f 7f       	andi	r23, 0xFF	; 255
    a266:	7f 7f       	andi	r23, 0xFF	; 255
    a268:	7f 7f       	andi	r23, 0xFF	; 255
    a26a:	7f 7f       	andi	r23, 0xFF	; 255
    a26c:	7f 7f       	andi	r23, 0xFF	; 255
    a26e:	7f 7f       	andi	r23, 0xFF	; 255
    a270:	7f 7f       	andi	r23, 0xFF	; 255
    a272:	7f 7f       	andi	r23, 0xFF	; 255
    a274:	7f 7f       	andi	r23, 0xFF	; 255
    a276:	7f 7f       	andi	r23, 0xFF	; 255
    a278:	7f 7f       	andi	r23, 0xFF	; 255
    a27a:	7f 7f       	andi	r23, 0xFF	; 255
    a27c:	7f 7f       	andi	r23, 0xFF	; 255
    a27e:	7f 7f       	andi	r23, 0xFF	; 255
    a280:	7f 7f       	andi	r23, 0xFF	; 255
    a282:	7f 7f       	andi	r23, 0xFF	; 255
    a284:	7f 7f       	andi	r23, 0xFF	; 255
    a286:	7f 7f       	andi	r23, 0xFF	; 255
    a288:	7f 7f       	andi	r23, 0xFF	; 255
    a28a:	7f 7f       	andi	r23, 0xFF	; 255
    a28c:	7f 7f       	andi	r23, 0xFF	; 255
    a28e:	7f 7f       	andi	r23, 0xFF	; 255
    a290:	7f 7f       	andi	r23, 0xFF	; 255
    a292:	7f 7f       	andi	r23, 0xFF	; 255
    a294:	7f 7f       	andi	r23, 0xFF	; 255
    a296:	7f 7f       	andi	r23, 0xFF	; 255
    a298:	7f 7f       	andi	r23, 0xFF	; 255
    a29a:	7f 7f       	andi	r23, 0xFF	; 255
    a29c:	7f 7f       	andi	r23, 0xFF	; 255
    a29e:	7f 7f       	andi	r23, 0xFF	; 255
    a2a0:	7f 7f       	andi	r23, 0xFF	; 255
    a2a2:	7f 7f       	andi	r23, 0xFF	; 255
    a2a4:	7f 7f       	andi	r23, 0xFF	; 255
    a2a6:	7f 7f       	andi	r23, 0xFF	; 255
    a2a8:	7f 7f       	andi	r23, 0xFF	; 255
    a2aa:	7f 7f       	andi	r23, 0xFF	; 255
    a2ac:	7f 7f       	andi	r23, 0xFF	; 255
    a2ae:	7f 7f       	andi	r23, 0xFF	; 255
    a2b0:	7f 7f       	andi	r23, 0xFF	; 255
    a2b2:	7f 7f       	andi	r23, 0xFF	; 255
    a2b4:	7f 7f       	andi	r23, 0xFF	; 255
    a2b6:	7f 7f       	andi	r23, 0xFF	; 255
    a2b8:	7f 7f       	andi	r23, 0xFF	; 255
    a2ba:	7f 7f       	andi	r23, 0xFF	; 255
    a2bc:	7f 7f       	andi	r23, 0xFF	; 255
    a2be:	7f 7f       	andi	r23, 0xFF	; 255
    a2c0:	80 80       	ld	r8, Z
    a2c2:	80 80       	ld	r8, Z
    a2c4:	80 80       	ld	r8, Z
    a2c6:	80 80       	ld	r8, Z
    a2c8:	80 80       	ld	r8, Z
    a2ca:	80 80       	ld	r8, Z
    a2cc:	80 80       	ld	r8, Z
    a2ce:	80 80       	ld	r8, Z
    a2d0:	80 80       	ld	r8, Z
    a2d2:	80 80       	ld	r8, Z
    a2d4:	80 80       	ld	r8, Z
    a2d6:	80 80       	ld	r8, Z
    a2d8:	80 80       	ld	r8, Z
    a2da:	80 80       	ld	r8, Z
    a2dc:	80 80       	ld	r8, Z
    a2de:	80 80       	ld	r8, Z
    a2e0:	80 80       	ld	r8, Z
    a2e2:	80 80       	ld	r8, Z
    a2e4:	80 80       	ld	r8, Z
    a2e6:	80 80       	ld	r8, Z
    a2e8:	80 80       	ld	r8, Z
    a2ea:	80 80       	ld	r8, Z
    a2ec:	80 80       	ld	r8, Z
    a2ee:	80 80       	ld	r8, Z
    a2f0:	80 80       	ld	r8, Z
    a2f2:	80 80       	ld	r8, Z
    a2f4:	80 80       	ld	r8, Z
    a2f6:	80 80       	ld	r8, Z
    a2f8:	80 80       	ld	r8, Z
    a2fa:	80 80       	ld	r8, Z
    a2fc:	80 80       	ld	r8, Z
    a2fe:	80 80       	ld	r8, Z
    a300:	03 09       	sbc	r16, r3
    a302:	13 1e       	adc	r1, r19
    a304:	28 31       	cpi	r18, 0x18	; 24
    a306:	3a 40       	sbci	r19, 0x0A	; 10
    a308:	46 4c       	sbci	r20, 0xC6	; 198
    a30a:	50 54       	subi	r21, 0x40	; 64
    a30c:	58 5b       	subi	r21, 0xB8	; 184
    a30e:	5e 61       	ori	r21, 0x1E	; 30
    a310:	63 65       	ori	r22, 0x53	; 83
    a312:	67 69       	ori	r22, 0x97	; 151
    a314:	6b 6c       	ori	r22, 0xCB	; 203
    a316:	6e 6f       	ori	r22, 0xFE	; 254
    a318:	70 71       	andi	r23, 0x10	; 16
    a31a:	72 73       	andi	r23, 0x32	; 50
    a31c:	74 75       	andi	r23, 0x54	; 84
    a31e:	76 77       	andi	r23, 0x76	; 118
    a320:	77 78       	andi	r23, 0x87	; 135
    a322:	79 79       	andi	r23, 0x99	; 153
    a324:	7a 7a       	andi	r23, 0xAA	; 170
    a326:	7b 7b       	andi	r23, 0xBB	; 187
    a328:	7c 7c       	andi	r23, 0xCC	; 204
    a32a:	7c 7d       	andi	r23, 0xDC	; 220
    a32c:	7d 7d       	andi	r23, 0xDD	; 221
    a32e:	7e 7e       	andi	r23, 0xEE	; 238
    a330:	7e 7e       	andi	r23, 0xEE	; 238
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	7f 7f       	andi	r23, 0xFF	; 255
    a342:	7f 7f       	andi	r23, 0xFF	; 255
    a344:	7f 7f       	andi	r23, 0xFF	; 255
    a346:	7f 7f       	andi	r23, 0xFF	; 255
    a348:	7f 7f       	andi	r23, 0xFF	; 255
    a34a:	7f 7f       	andi	r23, 0xFF	; 255
    a34c:	7f 7e       	andi	r23, 0xEF	; 239
    a34e:	7e 7e       	andi	r23, 0xEE	; 238
    a350:	7e 7d       	andi	r23, 0xDE	; 222
    a352:	7d 7d       	andi	r23, 0xDD	; 221
    a354:	7c 7c       	andi	r23, 0xCC	; 204
    a356:	7c 7b       	andi	r23, 0xBC	; 188
    a358:	7b 7a       	andi	r23, 0xAB	; 171
    a35a:	7a 79       	andi	r23, 0x9A	; 154
    a35c:	79 78       	andi	r23, 0x89	; 137
    a35e:	77 77       	andi	r23, 0x77	; 119
    a360:	76 75       	andi	r23, 0x56	; 86
    a362:	74 73       	andi	r23, 0x34	; 52
    a364:	72 71       	andi	r23, 0x12	; 18
    a366:	70 6f       	ori	r23, 0xF0	; 240
    a368:	6e 6c       	ori	r22, 0xCE	; 206
    a36a:	6b 69       	ori	r22, 0x9B	; 155
    a36c:	67 65       	ori	r22, 0x57	; 87
    a36e:	63 61       	ori	r22, 0x13	; 19
    a370:	5e 5b       	subi	r21, 0xBE	; 190
    a372:	58 54       	subi	r21, 0x48	; 72
    a374:	50 4c       	sbci	r21, 0xC0	; 192
    a376:	46 40       	sbci	r20, 0x06	; 6
    a378:	3a 31       	cpi	r19, 0x1A	; 26
    a37a:	28 1e       	adc	r2, r24
    a37c:	13 09       	sbc	r17, r3
    a37e:	03 00       	.word	0x0003	; ????
    a380:	c6 cc       	rjmp	.-1652   	; 0x9d0e <waves+0xe>
    a382:	d5 db       	rcall	.-2134   	; 0x9b2e <steptable+0x26>
    a384:	df e3       	ldi	r29, 0x3F	; 63
    a386:	e5 e7       	ldi	r30, 0x75	; 117
    a388:	e9 ea       	ldi	r30, 0xA9	; 169
    a38a:	eb ec       	ldi	r30, 0xCB	; 203
    a38c:	ed ee       	ldi	r30, 0xED	; 237
    a38e:	ef ef       	ldi	r30, 0xFF	; 255
    a390:	f0 f0       	brcs	.+60     	; 0xa3ce <waves+0x6ce>
    a392:	f0 f1       	brcs	.+124    	; 0xa410 <RestoreBackground+0x10>
    a394:	f1 f1       	breq	.+124    	; 0xa412 <RestoreBackground+0x12>
    a396:	f1 f2       	breq	.-68     	; 0xa354 <waves+0x654>
    a398:	f2 f2       	brmi	.-68     	; 0xa356 <waves+0x656>
    a39a:	f2 f2       	brmi	.-68     	; 0xa358 <waves+0x658>
    a39c:	f2 f2       	brmi	.-68     	; 0xa35a <waves+0x65a>
    a39e:	f2 f3       	brmi	.-4      	; 0xa39c <waves+0x69c>
    a3a0:	f3 f3       	brvs	.-4      	; 0xa39e <waves+0x69e>
    a3a2:	f3 f3       	brvs	.-4      	; 0xa3a0 <waves+0x6a0>
    a3a4:	f3 f3       	brvs	.-4      	; 0xa3a2 <waves+0x6a2>
    a3a6:	f3 f3       	brvs	.-4      	; 0xa3a4 <waves+0x6a4>
    a3a8:	f3 f3       	brvs	.-4      	; 0xa3a6 <waves+0x6a6>
    a3aa:	f3 f3       	brvs	.-4      	; 0xa3a8 <waves+0x6a8>
    a3ac:	f3 f3       	brvs	.-4      	; 0xa3aa <waves+0x6aa>
    a3ae:	f3 f3       	brvs	.-4      	; 0xa3ac <waves+0x6ac>
    a3b0:	f3 f3       	brvs	.-4      	; 0xa3ae <waves+0x6ae>
    a3b2:	f3 f3       	brvs	.-4      	; 0xa3b0 <waves+0x6b0>
    a3b4:	f3 f3       	brvs	.-4      	; 0xa3b2 <waves+0x6b2>
    a3b6:	f3 f3       	brvs	.-4      	; 0xa3b4 <waves+0x6b4>
    a3b8:	f3 f3       	brvs	.-4      	; 0xa3b6 <waves+0x6b6>
    a3ba:	f3 f3       	brvs	.-4      	; 0xa3b8 <waves+0x6b8>
    a3bc:	f3 f3       	brvs	.-4      	; 0xa3ba <waves+0x6ba>
    a3be:	f3 f3       	brvs	.-4      	; 0xa3bc <waves+0x6bc>
    a3c0:	f3 f3       	brvs	.-4      	; 0xa3be <waves+0x6be>
    a3c2:	f3 f3       	brvs	.-4      	; 0xa3c0 <waves+0x6c0>
    a3c4:	f3 f3       	brvs	.-4      	; 0xa3c2 <waves+0x6c2>
    a3c6:	f3 f3       	brvs	.-4      	; 0xa3c4 <waves+0x6c4>
    a3c8:	f3 f3       	brvs	.-4      	; 0xa3c6 <waves+0x6c6>
    a3ca:	f3 f3       	brvs	.-4      	; 0xa3c8 <waves+0x6c8>
    a3cc:	f3 f3       	brvs	.-4      	; 0xa3ca <waves+0x6ca>
    a3ce:	f3 f3       	brvs	.-4      	; 0xa3cc <waves+0x6cc>
    a3d0:	f3 f3       	brvs	.-4      	; 0xa3ce <waves+0x6ce>
    a3d2:	f3 f3       	brvs	.-4      	; 0xa3d0 <waves+0x6d0>
    a3d4:	f3 f3       	brvs	.-4      	; 0xa3d2 <waves+0x6d2>
    a3d6:	f3 f3       	brvs	.-4      	; 0xa3d4 <waves+0x6d4>
    a3d8:	f3 f3       	brvs	.-4      	; 0xa3d6 <waves+0x6d6>
    a3da:	f3 f3       	brvs	.-4      	; 0xa3d8 <waves+0x6d8>
    a3dc:	f3 f3       	brvs	.-4      	; 0xa3da <waves+0x6da>
    a3de:	f3 f3       	brvs	.-4      	; 0xa3dc <waves+0x6dc>
    a3e0:	f2 f2       	brmi	.-68     	; 0xa39e <waves+0x69e>
    a3e2:	f2 f2       	brmi	.-68     	; 0xa3a0 <waves+0x6a0>
    a3e4:	f2 f2       	brmi	.-68     	; 0xa3a2 <waves+0x6a2>
    a3e6:	f2 f2       	brmi	.-68     	; 0xa3a4 <waves+0x6a4>
    a3e8:	f1 f1       	breq	.+124    	; 0xa466 <FadeIn+0x22>
    a3ea:	f1 f1       	breq	.+124    	; 0xa468 <FadeIn+0x24>
    a3ec:	f0 f0       	brcs	.+60     	; 0xa42a <RestoreBackground+0x2a>
    a3ee:	f0 ef       	ldi	r31, 0xF0	; 240
    a3f0:	ef ee       	ldi	r30, 0xEF	; 239
    a3f2:	ed ec       	ldi	r30, 0xCD	; 205
    a3f4:	eb ea       	ldi	r30, 0xAB	; 171
    a3f6:	e9 e7       	ldi	r30, 0x79	; 121
    a3f8:	e5 e3       	ldi	r30, 0x35	; 53
    a3fa:	df db       	rcall	.-2114   	; 0x9bba <steptable+0xb2>
    a3fc:	d5 cc       	rjmp	.-1622   	; 0x9da8 <waves+0xa8>
    a3fe:	c6 00       	.word	0x00c6	; ????

0000a400 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a400:	30 91 ef 09 	lds	r19, 0x09EF
    a404:	20 e0       	ldi	r18, 0x00	; 0
    a406:	10 c0       	rjmp	.+32     	; 0xa428 <RestoreBackground+0x28>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a408:	82 2f       	mov	r24, r18
    a40a:	90 e0       	ldi	r25, 0x00	; 0
    a40c:	fc 01       	movw	r30, r24
    a40e:	ee 0f       	add	r30, r30
    a410:	ff 1f       	adc	r31, r31
    a412:	e8 0f       	add	r30, r24
    a414:	f9 1f       	adc	r31, r25
    a416:	e0 5b       	subi	r30, 0xB0	; 176
    a418:	f7 4f       	sbci	r31, 0xF7	; 247
    a41a:	a0 81       	ld	r26, Z
    a41c:	b1 81       	ldd	r27, Z+1	; 0x01
    a41e:	a0 5e       	subi	r26, 0xE0	; 224
    a420:	be 4f       	sbci	r27, 0xFE	; 254
    a422:	82 81       	ldd	r24, Z+2	; 0x02
    a424:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a426:	2f 5f       	subi	r18, 0xFF	; 255
    a428:	23 17       	cp	r18, r19
    a42a:	70 f3       	brcs	.-36     	; 0xa408 <RestoreBackground+0x8>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    a42c:	08 95       	ret

0000a42e <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    a42e:	08 95       	ret

0000a430 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a430:	ec e2       	ldi	r30, 0x2C	; 44
    a432:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a434:	80 ef       	ldi	r24, 0xF0	; 240
    a436:	80 83       	st	Z, r24
    a438:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    a43a:	94 e0       	ldi	r25, 0x04	; 4
    a43c:	e0 35       	cpi	r30, 0x50	; 80
    a43e:	f9 07       	cpc	r31, r25
    a440:	d1 f7       	brne	.-12     	; 0xa436 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    a442:	08 95       	ret

0000a444 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    a444:	98 2f       	mov	r25, r24
	if(speed==0){
    a446:	88 23       	and	r24, r24
    a448:	19 f4       	brne	.+6      	; 0xa450 <FadeIn+0xc>
		DDRC=0xff;
    a44a:	8f ef       	ldi	r24, 0xFF	; 255
    a44c:	87 b9       	out	0x07, r24	; 7
    a44e:	08 95       	ret
		return;
	}
	fadeStep=1;
    a450:	81 e0       	ldi	r24, 0x01	; 1
    a452:	80 93 f2 09 	sts	0x09F2, r24
	fadeDir=1;
    a456:	80 93 ee 09 	sts	0x09EE, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a45a:	90 93 ed 09 	sts	0x09ED, r25
	currFadeFrame=0;
    a45e:	10 92 f1 09 	sts	0x09F1, r1
	fadeActive=true;
    a462:	80 93 f0 09 	sts	0x09F0, r24
		
	if(blocking){
    a466:	66 23       	and	r22, r22
    a468:	21 f0       	breq	.+8      	; 0xa472 <FadeIn+0x2e>
		while(fadeActive==true);
    a46a:	80 91 f0 09 	lds	r24, 0x09F0
    a46e:	88 23       	and	r24, r24
    a470:	e1 f7       	brne	.-8      	; 0xa46a <FadeIn+0x26>
    a472:	08 95       	ret

0000a474 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    a474:	98 2f       	mov	r25, r24
	if(speed==0){
    a476:	88 23       	and	r24, r24
    a478:	11 f4       	brne	.+4      	; 0xa47e <FadeOut+0xa>
		DDRC=0;
    a47a:	17 b8       	out	0x07, r1	; 7
    a47c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    a47e:	8c e0       	ldi	r24, 0x0C	; 12
    a480:	80 93 f2 09 	sts	0x09F2, r24
	fadeDir=-1;
    a484:	8f ef       	ldi	r24, 0xFF	; 255
    a486:	80 93 ee 09 	sts	0x09EE, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a48a:	90 93 ed 09 	sts	0x09ED, r25
	currFadeFrame=0;
    a48e:	10 92 f1 09 	sts	0x09F1, r1
	fadeActive=true;
    a492:	81 e0       	ldi	r24, 0x01	; 1
    a494:	80 93 f0 09 	sts	0x09F0, r24
		
	if(blocking){
    a498:	66 23       	and	r22, r22
    a49a:	21 f0       	breq	.+8      	; 0xa4a4 <FadeOut+0x30>
		while(fadeActive==true);
    a49c:	80 91 f0 09 	lds	r24, 0x09F0
    a4a0:	88 23       	and	r24, r24
    a4a2:	e1 f7       	brne	.-8      	; 0xa49c <FadeOut+0x28>
    a4a4:	08 95       	ret

0000a4a6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a4a6:	80 91 f0 09 	lds	r24, 0x09F0
    a4aa:	88 23       	and	r24, r24
    a4ac:	f9 f0       	breq	.+62     	; 0xa4ec <ProcessFading+0x46>
		if(currFadeFrame==0){
    a4ae:	80 91 f1 09 	lds	r24, 0x09F1
    a4b2:	88 23       	and	r24, r24
    a4b4:	c1 f4       	brne	.+48     	; 0xa4e6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    a4b6:	80 91 ed 09 	lds	r24, 0x09ED
    a4ba:	80 93 f1 09 	sts	0x09F1, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a4be:	80 91 f2 09 	lds	r24, 0x09F2
    a4c2:	e8 2f       	mov	r30, r24
    a4c4:	f0 e0       	ldi	r31, 0x00	; 0
    a4c6:	e5 52       	subi	r30, 0x25	; 37
    a4c8:	ff 4f       	sbci	r31, 0xFF	; 255
    a4ca:	e4 91       	lpm	r30, Z+
    a4cc:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a4ce:	90 91 ee 09 	lds	r25, 0x09EE
    a4d2:	98 0f       	add	r25, r24
    a4d4:	90 93 f2 09 	sts	0x09F2, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a4d8:	99 23       	and	r25, r25
    a4da:	11 f0       	breq	.+4      	; 0xa4e0 <ProcessFading+0x3a>
    a4dc:	9d 30       	cpi	r25, 0x0D	; 13
    a4de:	31 f4       	brne	.+12     	; 0xa4ec <ProcessFading+0x46>
				fadeActive=false;
    a4e0:	10 92 f0 09 	sts	0x09F0, r1
    a4e4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a4e6:	81 50       	subi	r24, 0x01	; 1
    a4e8:	80 93 f1 09 	sts	0x09F1, r24
    a4ec:	08 95       	ret

0000a4ee <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a4ee:	0f 93       	push	r16
    a4f0:	1f 93       	push	r17
    a4f2:	cf 93       	push	r28
    a4f4:	df 93       	push	r29
    a4f6:	8c 01       	movw	r16, r24
    a4f8:	c0 e0       	ldi	r28, 0x00	; 0
    a4fa:	d0 e0       	ldi	r29, 0x00	; 0
    a4fc:	07 c0       	rjmp	.+14     	; 0xa50c <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    a4fe:	0e 94 0d 47 	call	0x8e1a	; 0x8e1a <GetVsyncFlag>
    a502:	88 23       	and	r24, r24
    a504:	e1 f3       	breq	.-8      	; 0xa4fe <WaitVsync+0x10>
		ClearVsyncFlag();		
    a506:	0e 94 11 47 	call	0x8e22	; 0x8e22 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a50a:	21 96       	adiw	r28, 0x01	; 1
    a50c:	c0 17       	cp	r28, r16
    a50e:	d1 07       	cpc	r29, r17
    a510:	b4 f3       	brlt	.-20     	; 0xa4fe <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a512:	df 91       	pop	r29
    a514:	cf 91       	pop	r28
    a516:	1f 91       	pop	r17
    a518:	0f 91       	pop	r16
    a51a:	08 95       	ret

0000a51c <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a51c:	a3 e0       	ldi	r26, 0x03	; 3
    a51e:	b0 e0       	ldi	r27, 0x00	; 0
    a520:	e4 e9       	ldi	r30, 0x94	; 148
    a522:	f2 e5       	ldi	r31, 0x52	; 82
    a524:	0c 94 89 75 	jmp	0xeb12	; 0xeb12 <__prologue_saves__>
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    a528:	10 92 ef 09 	sts	0x09EF, r1
		if(!spritesOn) return;
    a52c:	80 91 19 01 	lds	r24, 0x0119
    a530:	88 23       	and	r24, r24
    a532:	09 f4       	brne	.+2      	; 0xa536 <ProcessSprites+0x1a>
    a534:	a3 c0       	rjmp	.+326    	; 0xa67c <ProcessSprites+0x160>
    a536:	ec e2       	ldi	r30, 0x2C	; 44
    a538:	8e 2e       	mov	r8, r30
    a53a:	e4 e0       	ldi	r30, 0x04	; 4
    a53c:	9e 2e       	mov	r9, r30
    a53e:	77 24       	eor	r7, r7
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    a540:	f4 01       	movw	r30, r8
    a542:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a544:	80 3f       	cpi	r24, 0xF0	; 240
    a546:	09 f4       	brne	.+2      	; 0xa54a <ProcessSprites+0x2e>
    a548:	7a c0       	rjmp	.+244    	; 0xa63e <ProcessSprites+0x122>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a54a:	91 81       	ldd	r25, Z+1	; 0x01

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a54c:	f8 2f       	mov	r31, r24
    a54e:	f6 95       	lsr	r31
    a550:	f6 95       	lsr	r31
    a552:	f6 95       	lsr	r31
    a554:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    a556:	28 2f       	mov	r18, r24
    a558:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    a55a:	19 f0       	breq	.+6      	; 0xa562 <ProcessSprites+0x46>
    a55c:	72 e0       	ldi	r23, 0x02	; 2
    a55e:	27 2e       	mov	r2, r23
    a560:	02 c0       	rjmp	.+4      	; 0xa566 <ProcessSprites+0x4a>
    a562:	22 24       	eor	r2, r2
    a564:	23 94       	inc	r2

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a566:	39 2f       	mov	r19, r25
    a568:	36 95       	lsr	r19
    a56a:	36 95       	lsr	r19
    a56c:	36 95       	lsr	r19
				dy=ssy%TILE_HEIGHT;
    a56e:	89 2f       	mov	r24, r25
    a570:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    a572:	19 f0       	breq	.+6      	; 0xa57a <ProcessSprites+0x5e>
    a574:	62 e0       	ldi	r22, 0x02	; 2
    a576:	66 2e       	mov	r6, r22
    a578:	02 c0       	rjmp	.+4      	; 0xa57e <ProcessSprites+0x62>
    a57a:	66 24       	eor	r6, r6
    a57c:	63 94       	inc	r6
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a57e:	b8 2e       	mov	r11, r24
    a580:	aa 24       	eor	r10, r10
    a582:	25 01       	movw	r4, r10
    a584:	42 0e       	add	r4, r18
    a586:	51 1c       	adc	r5, r1
    a588:	c3 2e       	mov	r12, r19
    a58a:	ee 24       	eor	r14, r14
    a58c:	ff 24       	eor	r15, r15
    a58e:	4d c0       	rjmp	.+154    	; 0xa62a <ProcessSprites+0x10e>

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    a590:	29 e1       	ldi	r18, 0x19	; 25
    a592:	2c 15       	cp	r18, r12
    a594:	10 f0       	brcs	.+4      	; 0xa59a <ProcessSprites+0x7e>
    a596:	9c 2d       	mov	r25, r12
    a598:	01 c0       	rjmp	.+2      	; 0xa59c <ProcessSprites+0x80>
    a59a:	93 2d       	mov	r25, r3
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a59c:	4d e1       	ldi	r20, 0x1D	; 29
    a59e:	4d 15       	cp	r20, r13
    a5a0:	10 f0       	brcs	.+4      	; 0xa5a6 <ProcessSprites+0x8a>
    a5a2:	8d 2d       	mov	r24, r13
    a5a4:	02 c0       	rjmp	.+4      	; 0xa5aa <ProcessSprites+0x8e>
    a5a6:	8d 2d       	mov	r24, r13
    a5a8:	8e 51       	subi	r24, 0x1E	; 30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a5aa:	ee e1       	ldi	r30, 0x1E	; 30
    a5ac:	9e 9f       	mul	r25, r30
    a5ae:	90 01       	movw	r18, r0
    a5b0:	11 24       	eor	r1, r1
    a5b2:	28 0f       	add	r18, r24
    a5b4:	31 1d       	adc	r19, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    a5b6:	89 01       	movw	r16, r18
    a5b8:	00 5e       	subi	r16, 0xE0	; 224
    a5ba:	1e 4f       	sbci	r17, 0xFE	; 254
    a5bc:	f8 01       	movw	r30, r16
    a5be:	60 81       	ld	r22, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    a5c0:	60 31       	cpi	r22, 0x10	; 16
    a5c2:	f0 f0       	brcs	.+60     	; 0xa600 <ProcessSprites+0xe4>
    a5c4:	40 91 ef 09 	lds	r20, 0x09EF
    a5c8:	40 31       	cpi	r20, 0x10	; 16
    a5ca:	00 f5       	brcc	.+64     	; 0xa60c <ProcessSprites+0xf0>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    a5cc:	84 2f       	mov	r24, r20
    a5ce:	90 e0       	ldi	r25, 0x00	; 0
    a5d0:	fc 01       	movw	r30, r24
    a5d2:	ee 0f       	add	r30, r30
    a5d4:	ff 1f       	adc	r31, r31
    a5d6:	e8 0f       	add	r30, r24
    a5d8:	f9 1f       	adc	r31, r25
    a5da:	e0 5b       	subi	r30, 0xB0	; 176
    a5dc:	f7 4f       	sbci	r31, 0xF7	; 247
    a5de:	31 83       	std	Z+1, r19	; 0x01
    a5e0:	20 83       	st	Z, r18
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    a5e2:	62 83       	std	Z+2, r22	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    a5e4:	86 2f       	mov	r24, r22
    a5e6:	64 2f       	mov	r22, r20
    a5e8:	0e 94 38 44 	call	0x8870	; 0x8870 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    a5ec:	60 91 ef 09 	lds	r22, 0x09EF
    a5f0:	f8 01       	movw	r30, r16
    a5f2:	60 83       	st	Z, r22
								bt=free_tile_index;
								free_tile_index++;										
    a5f4:	6f 5f       	subi	r22, 0xFF	; 255
    a5f6:	60 93 ef 09 	sts	0x09EF, r22
    a5fa:	61 50       	subi	r22, 0x01	; 1
							}
				
							if(bt<RAM_TILES_COUNT){				
    a5fc:	60 31       	cpi	r22, 0x10	; 16
    a5fe:	30 f4       	brcc	.+12     	; 0xa60c <ProcessSprites+0xf0>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a600:	87 2d       	mov	r24, r7
    a602:	4a 81       	ldd	r20, Y+2	; 0x02
    a604:	5b 81       	ldd	r21, Y+3	; 0x03
    a606:	92 01       	movw	r18, r4
    a608:	0e 94 c9 44 	call	0x8992	; 0x8992 <BlitSprite>
    a60c:	8a 81       	ldd	r24, Y+2	; 0x02
    a60e:	9b 81       	ldd	r25, Y+3	; 0x03
    a610:	01 96       	adiw	r24, 0x01	; 1
    a612:	9b 83       	std	Y+3, r25	; 0x03
    a614:	8a 83       	std	Y+2, r24	; 0x02
    a616:	d3 94       	inc	r13
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    a618:	82 15       	cp	r24, r2
    a61a:	08 f4       	brcc	.+2      	; 0xa61e <ProcessSprites+0x102>
    a61c:	b9 cf       	rjmp	.-142    	; 0xa590 <ProcessSprites+0x74>
    a61e:	08 94       	sec
    a620:	e1 1c       	adc	r14, r1
    a622:	f1 1c       	adc	r15, r1
    a624:	c3 94       	inc	r12
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    a626:	e6 14       	cp	r14, r6
    a628:	50 f4       	brcc	.+20     	; 0xa63e <ProcessSprites+0x122>
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a62a:	80 e0       	ldi	r24, 0x00	; 0
    a62c:	9e 2d       	mov	r25, r14
    a62e:	9c 01       	movw	r18, r24
    a630:	3b 83       	std	Y+3, r19	; 0x03
    a632:	2a 83       	std	Y+2, r18	; 0x02
    a634:	d9 80       	ldd	r13, Y+1	; 0x01

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    a636:	b6 ee       	ldi	r27, 0xE6	; 230
    a638:	3b 2e       	mov	r3, r27
    a63a:	3c 0c       	add	r3, r12
    a63c:	a9 cf       	rjmp	.-174    	; 0xa590 <ProcessSprites+0x74>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    a63e:	73 94       	inc	r7
    a640:	e4 e0       	ldi	r30, 0x04	; 4
    a642:	f0 e0       	ldi	r31, 0x00	; 0
    a644:	8e 0e       	add	r8, r30
    a646:	9f 1e       	adc	r9, r31
    a648:	f9 e0       	ldi	r31, 0x09	; 9
    a64a:	7f 16       	cp	r7, r31
    a64c:	09 f0       	breq	.+2      	; 0xa650 <ProcessSprites+0x134>
    a64e:	78 cf       	rjmp	.-272    	; 0xa540 <ProcessSprites+0x24>
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a650:	30 91 ef 09 	lds	r19, 0x09EF
    a654:	20 e0       	ldi	r18, 0x00	; 0
    a656:	10 c0       	rjmp	.+32     	; 0xa678 <ProcessSprites+0x15c>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a658:	82 2f       	mov	r24, r18
    a65a:	90 e0       	ldi	r25, 0x00	; 0
    a65c:	fc 01       	movw	r30, r24
    a65e:	ee 0f       	add	r30, r30
    a660:	ff 1f       	adc	r31, r31
    a662:	e8 0f       	add	r30, r24
    a664:	f9 1f       	adc	r31, r25
    a666:	e0 5b       	subi	r30, 0xB0	; 176
    a668:	f7 4f       	sbci	r31, 0xF7	; 247
    a66a:	a0 81       	ld	r26, Z
    a66c:	b1 81       	ldd	r27, Z+1	; 0x01
    a66e:	a0 5e       	subi	r26, 0xE0	; 224
    a670:	be 4f       	sbci	r27, 0xFE	; 254
    a672:	82 81       	ldd	r24, Z+2	; 0x02
    a674:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a676:	2f 5f       	subi	r18, 0xFF	; 255
    a678:	23 17       	cp	r18, r19
    a67a:	70 f3       	brcs	.-36     	; 0xa658 <ProcessSprites+0x13c>


		//restore BG tiles
		RestoreBackground();

	}
    a67c:	23 96       	adiw	r28, 0x03	; 3
    a67e:	e2 e1       	ldi	r30, 0x12	; 18
    a680:	0c 94 a5 75 	jmp	0xeb4a	; 0xeb4a <__epilogue_restores__>

0000a684 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    a684:	10 df       	rcall	.-480    	; 0xa4a6 <ProcessFading>
		ProcessSprites();

	}
    a686:	4a cf       	rjmp	.-364    	; 0xa51c <ProcessSprites>

0000a688 <SPrint>:
#define NUM_START_TILE		91+(9*GFX_NUM_CARD_SETS)
#define FONT_START_TILE		NUM_START_TILE+10
#define CHECK_MARK_TILE		FONT_START_TILE+26
#define COLON_TILE			CHECK_MARK_TILE+1

void SPrint(int x,int y,const char *string){
    a688:	1f 93       	push	r17
    a68a:	16 2f       	mov	r17, r22
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    a68c:	2e e1       	ldi	r18, 0x1E	; 30
    a68e:	62 9f       	mul	r22, r18
    a690:	b0 01       	movw	r22, r0
    a692:	11 24       	eor	r1, r1
    a694:	da 01       	movw	r26, r20
    a696:	ac 01       	movw	r20, r24
    a698:	60 5e       	subi	r22, 0xE0	; 224
    a69a:	7e 4f       	sbci	r23, 0xFE	; 254
    a69c:	03 c0       	rjmp	.+6      	; 0xa6a4 <SPrint+0x1c>
    a69e:	11 96       	adiw	r26, 0x01	; 1
    a6a0:	4f 5f       	subi	r20, 0xFF	; 255
    a6a2:	5f 4f       	sbci	r21, 0xFF	; 255

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    a6a4:	fd 01       	movw	r30, r26
    a6a6:	24 91       	lpm	r18, Z+
		if(c!=0){
    a6a8:	22 23       	and	r18, r18
    a6aa:	79 f0       	breq	.+30     	; 0xa6ca <SPrint+0x42>
			if((c&127) == ' '){
    a6ac:	82 2f       	mov	r24, r18
    a6ae:	8f 77       	andi	r24, 0x7F	; 127
    a6b0:	80 32       	cpi	r24, 0x20	; 32
    a6b2:	a9 f3       	breq	.-22     	; 0xa69e <SPrint+0x16>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    a6b4:	4e 31       	cpi	r20, 0x1E	; 30
    a6b6:	98 f7       	brcc	.-26     	; 0xa69e <SPrint+0x16>
    a6b8:	1a 31       	cpi	r17, 0x1A	; 26
    a6ba:	88 f7       	brcc	.-30     	; 0xa69e <SPrint+0x16>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    a6bc:	fb 01       	movw	r30, r22
    a6be:	e4 0f       	add	r30, r20
    a6c0:	f1 1d       	adc	r31, r1
    a6c2:	2f 77       	andi	r18, 0x7F	; 127
    a6c4:	2d 58       	subi	r18, 0x8D	; 141
    a6c6:	20 83       	st	Z, r18
    a6c8:	ea cf       	rjmp	.-44     	; 0xa69e <SPrint+0x16>
		}else{
			break;
		}
	}
	
}
    a6ca:	1f 91       	pop	r17
    a6cc:	08 95       	ret

0000a6ce <SPrintRam>:

void SPrintRam(int x,int y,unsigned char *string){
    a6ce:	1f 93       	push	r17
    a6d0:	cf 93       	push	r28
    a6d2:	df 93       	push	r29
    a6d4:	16 2f       	mov	r17, r22
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    a6d6:	2e e1       	ldi	r18, 0x1E	; 30
    a6d8:	62 9f       	mul	r22, r18
    a6da:	e0 01       	movw	r28, r0
    a6dc:	11 24       	eor	r1, r1
    a6de:	da 01       	movw	r26, r20
    a6e0:	ac 01       	movw	r20, r24
    a6e2:	c0 5e       	subi	r28, 0xE0	; 224
    a6e4:	de 4f       	sbci	r29, 0xFE	; 254
    a6e6:	03 c0       	rjmp	.+6      	; 0xa6ee <SPrintRam+0x20>
    a6e8:	11 96       	adiw	r26, 0x01	; 1
    a6ea:	4f 5f       	subi	r20, 0xFF	; 255
    a6ec:	5f 4f       	sbci	r21, 0xFF	; 255
void SPrintRam(int x,int y,unsigned char *string){
	int i=0;
	char c;

	while(1){
		c=string[i++];		
    a6ee:	2c 91       	ld	r18, X
		if(c!=0){
    a6f0:	22 23       	and	r18, r18
    a6f2:	79 f0       	breq	.+30     	; 0xa712 <SPrintRam+0x44>
			if((c&127) == ' '){
    a6f4:	82 2f       	mov	r24, r18
    a6f6:	8f 77       	andi	r24, 0x7F	; 127
    a6f8:	80 32       	cpi	r24, 0x20	; 32
    a6fa:	b1 f3       	breq	.-20     	; 0xa6e8 <SPrintRam+0x1a>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    a6fc:	4e 31       	cpi	r20, 0x1E	; 30
    a6fe:	a0 f7       	brcc	.-24     	; 0xa6e8 <SPrintRam+0x1a>
    a700:	1a 31       	cpi	r17, 0x1A	; 26
    a702:	90 f7       	brcc	.-28     	; 0xa6e8 <SPrintRam+0x1a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    a704:	fe 01       	movw	r30, r28
    a706:	e4 0f       	add	r30, r20
    a708:	f1 1d       	adc	r31, r1
    a70a:	2f 77       	andi	r18, 0x7F	; 127
    a70c:	2d 58       	subi	r18, 0x8D	; 141
    a70e:	20 83       	st	Z, r18
    a710:	eb cf       	rjmp	.-42     	; 0xa6e8 <SPrintRam+0x1a>
			SetTileClipped(x++,y,c);
		}else{
			break;
		}
	}
}
    a712:	df 91       	pop	r29
    a714:	cf 91       	pop	r28
    a716:	1f 91       	pop	r17
    a718:	08 95       	ret

0000a71a <AIMoveToCard>:

}

uint8_t AIMoveToCard(uint8_t holdcard){
		uint8_t ret = 0;
		if(ai_targetx > cursorx){
    a71a:	80 91 70 0a 	lds	r24, 0x0A70
    a71e:	20 91 ff 09 	lds	r18, 0x09FF
    a722:	28 17       	cp	r18, r24
    a724:	30 f4       	brcc	.+12     	; 0xa732 <AIMoveToCard+0x18>
			padstate |= BTN_RIGHT;
    a726:	80 91 fc 09 	lds	r24, 0x09FC
    a72a:	90 91 fd 09 	lds	r25, 0x09FD
    a72e:	80 68       	ori	r24, 0x80	; 128
    a730:	0d c0       	rjmp	.+26     	; 0xa74c <AIMoveToCard+0x32>
			ret = 1;;
		}else if(ai_targetx+4 < cursorx){
    a732:	90 e0       	ldi	r25, 0x00	; 0
    a734:	04 96       	adiw	r24, 0x04	; 4
    a736:	30 e0       	ldi	r19, 0x00	; 0
    a738:	82 17       	cp	r24, r18
    a73a:	93 07       	cpc	r25, r19
    a73c:	14 f0       	brlt	.+4      	; 0xa742 <AIMoveToCard+0x28>
    a73e:	40 e0       	ldi	r20, 0x00	; 0
    a740:	0a c0       	rjmp	.+20     	; 0xa756 <AIMoveToCard+0x3c>
			padstate |= BTN_LEFT;
    a742:	80 91 fc 09 	lds	r24, 0x09FC
    a746:	90 91 fd 09 	lds	r25, 0x09FD
    a74a:	80 64       	ori	r24, 0x40	; 64
    a74c:	90 93 fd 09 	sts	0x09FD, r25
    a750:	80 93 fc 09 	sts	0x09FC, r24
    a754:	41 e0       	ldi	r20, 0x01	; 1
			ret = 1;
		}

		if(ai_targety > cursory){
    a756:	80 91 ed 0d 	lds	r24, 0x0DED
    a75a:	20 91 07 0a 	lds	r18, 0x0A07
    a75e:	28 17       	cp	r18, r24
    a760:	30 f4       	brcc	.+12     	; 0xa76e <AIMoveToCard+0x54>
			padstate |= BTN_DOWN;
    a762:	80 91 fc 09 	lds	r24, 0x09FC
    a766:	90 91 fd 09 	lds	r25, 0x09FD
    a76a:	80 62       	ori	r24, 0x20	; 32
    a76c:	0b c0       	rjmp	.+22     	; 0xa784 <AIMoveToCard+0x6a>
			ret = 1;
		}else if(ai_targety+4 < cursory){
    a76e:	90 e0       	ldi	r25, 0x00	; 0
    a770:	04 96       	adiw	r24, 0x04	; 4
    a772:	30 e0       	ldi	r19, 0x00	; 0
    a774:	82 17       	cp	r24, r18
    a776:	93 07       	cpc	r25, r19
    a778:	54 f4       	brge	.+20     	; 0xa78e <AIMoveToCard+0x74>
			padstate |= BTN_UP;
    a77a:	80 91 fc 09 	lds	r24, 0x09FC
    a77e:	90 91 fd 09 	lds	r25, 0x09FD
    a782:	80 61       	ori	r24, 0x10	; 16
    a784:	90 93 fd 09 	sts	0x09FD, r25
    a788:	80 93 fc 09 	sts	0x09FC, r24
    a78c:	41 e0       	ldi	r20, 0x01	; 1
			ret = 1;
		}
		return ret;
}
    a78e:	84 2f       	mov	r24, r20
    a790:	08 95       	ret

0000a792 <PauseSaveScreen>:
		FadeIn(1,false);

}


void PauseSaveScreen(){
    a792:	20 e0       	ldi	r18, 0x00	; 0
    a794:	30 e0       	ldi	r19, 0x00	; 0
    a796:	46 e3       	ldi	r20, 0x36	; 54
    a798:	51 e0       	ldi	r21, 0x01	; 1
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
		for(uint8_t x=0+((SCREEN_TILES_H/2)-5);x<((SCREEN_TILES_H/2)-5)+10;x++){
			table_restore[off++] = vram[x+(y*VRAM_TILES_H)];
			vram[x+(y*VRAM_TILES_H)] = RAM_TILES_COUNT;//make green
    a79a:	60 e1       	ldi	r22, 0x10	; 16
    a79c:	0d c0       	rjmp	.+26     	; 0xa7b8 <PauseSaveScreen+0x26>

void PauseSaveScreen(){
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
		for(uint8_t x=0+((SCREEN_TILES_H/2)-5);x<((SCREEN_TILES_H/2)-5)+10;x++){
			table_restore[off++] = vram[x+(y*VRAM_TILES_H)];
    a79e:	80 81       	ld	r24, Z
    a7a0:	8d 93       	st	X+, r24
			vram[x+(y*VRAM_TILES_H)] = RAM_TILES_COUNT;//make green
    a7a2:	61 93       	st	Z+, r22


void PauseSaveScreen(){
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
		for(uint8_t x=0+((SCREEN_TILES_H/2)-5);x<((SCREEN_TILES_H/2)-5)+10;x++){
    a7a4:	9f 5f       	subi	r25, 0xFF	; 255
    a7a6:	94 31       	cpi	r25, 0x14	; 20
    a7a8:	d1 f7       	brne	.-12     	; 0xa79e <PauseSaveScreen+0xc>
    a7aa:	26 5f       	subi	r18, 0xF6	; 246
    a7ac:	3f 4f       	sbci	r19, 0xFF	; 255
    a7ae:	42 5e       	subi	r20, 0xE2	; 226
    a7b0:	5f 4f       	sbci	r21, 0xFF	; 255
}


void PauseSaveScreen(){
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
    a7b2:	26 34       	cpi	r18, 0x46	; 70
    a7b4:	31 05       	cpc	r19, r1
    a7b6:	41 f0       	breq	.+16     	; 0xa7c8 <PauseSaveScreen+0x36>
    a7b8:	fa 01       	movw	r30, r20
    a7ba:	e0 5e       	subi	r30, 0xE0	; 224
    a7bc:	fe 4f       	sbci	r31, 0xFE	; 254
    a7be:	d9 01       	movw	r26, r18
    a7c0:	af 57       	subi	r26, 0x7F	; 127
    a7c2:	b2 4f       	sbci	r27, 0xF2	; 242
    a7c4:	9a e0       	ldi	r25, 0x0A	; 10
    a7c6:	eb cf       	rjmp	.-42     	; 0xa79e <PauseSaveScreen+0xc>
    a7c8:	08 95       	ret

0000a7ca <PauseRestoreScreen>:
			table_restore[off++] = vram[x+(y*VRAM_TILES_H)];
			vram[x+(y*VRAM_TILES_H)] = RAM_TILES_COUNT;//make green
		}
}

void PauseRestoreScreen(){
    a7ca:	20 e0       	ldi	r18, 0x00	; 0
    a7cc:	30 e0       	ldi	r19, 0x00	; 0
    a7ce:	46 e3       	ldi	r20, 0x36	; 54
    a7d0:	51 e0       	ldi	r21, 0x01	; 1
    a7d2:	0c c0       	rjmp	.+24     	; 0xa7ec <PauseRestoreScreen+0x22>
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
		for(uint8_t x=0+((SCREEN_TILES_H/2)-5);x<((SCREEN_TILES_H/2)-5)+10;x++)
			vram[x+(y*VRAM_TILES_H)] = table_restore[off++];
    a7d4:	8d 91       	ld	r24, X+
    a7d6:	81 93       	st	Z+, r24
}

void PauseRestoreScreen(){
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
		for(uint8_t x=0+((SCREEN_TILES_H/2)-5);x<((SCREEN_TILES_H/2)-5)+10;x++)
    a7d8:	9f 5f       	subi	r25, 0xFF	; 255
    a7da:	94 31       	cpi	r25, 0x14	; 20
    a7dc:	d9 f7       	brne	.-10     	; 0xa7d4 <PauseRestoreScreen+0xa>
    a7de:	26 5f       	subi	r18, 0xF6	; 246
    a7e0:	3f 4f       	sbci	r19, 0xFF	; 255
    a7e2:	42 5e       	subi	r20, 0xE2	; 226
    a7e4:	5f 4f       	sbci	r21, 0xFF	; 255
		}
}

void PauseRestoreScreen(){
	uint16_t off = 0;
	for(uint8_t y=10+0;y<10+7;y++)
    a7e6:	26 34       	cpi	r18, 0x46	; 70
    a7e8:	31 05       	cpc	r19, r1
    a7ea:	41 f0       	breq	.+16     	; 0xa7fc <PauseRestoreScreen+0x32>
    a7ec:	d9 01       	movw	r26, r18
    a7ee:	af 57       	subi	r26, 0x7F	; 127
    a7f0:	b2 4f       	sbci	r27, 0xF2	; 242
    a7f2:	fa 01       	movw	r30, r20
    a7f4:	e0 5e       	subi	r30, 0xE0	; 224
    a7f6:	fe 4f       	sbci	r31, 0xFE	; 254
    a7f8:	9a e0       	ldi	r25, 0x0A	; 10
    a7fa:	ec cf       	rjmp	.-40     	; 0xa7d4 <PauseRestoreScreen+0xa>
    a7fc:	08 95       	ret

0000a7fe <GetEEPromFlags>:
#include "ai.h"
#include "s_gui.h"


void GetEEPromFlags(){
	if(eeprom_data[2] & 128){game_state |= DRAW_THREE;}
    a7fe:	80 91 13 0a 	lds	r24, 0x0A13
    a802:	87 ff       	sbrs	r24, 7
    a804:	05 c0       	rjmp	.+10     	; 0xa810 <GetEEPromFlags+0x12>
    a806:	80 91 06 0a 	lds	r24, 0x0A06
    a80a:	81 60       	ori	r24, 0x01	; 1
    a80c:	80 93 06 0a 	sts	0x0A06, r24

	//load card preference
	if(eeprom_data[3] & 128){card_set |= 1;}
    a810:	80 91 14 0a 	lds	r24, 0x0A14
    a814:	87 ff       	sbrs	r24, 7
    a816:	05 c0       	rjmp	.+10     	; 0xa822 <GetEEPromFlags+0x24>
    a818:	80 91 f6 09 	lds	r24, 0x09F6
    a81c:	81 60       	ori	r24, 0x01	; 1
    a81e:	80 93 f6 09 	sts	0x09F6, r24
	if(eeprom_data[4] & 128){card_set |= 2;}
    a822:	80 91 15 0a 	lds	r24, 0x0A15
    a826:	87 ff       	sbrs	r24, 7
    a828:	05 c0       	rjmp	.+10     	; 0xa834 <GetEEPromFlags+0x36>
    a82a:	80 91 f6 09 	lds	r24, 0x09F6
    a82e:	82 60       	ori	r24, 0x02	; 2
    a830:	80 93 f6 09 	sts	0x09F6, r24
	if(eeprom_data[5] & 128){card_set |= 4;}
    a834:	80 91 16 0a 	lds	r24, 0x0A16
    a838:	87 ff       	sbrs	r24, 7
    a83a:	05 c0       	rjmp	.+10     	; 0xa846 <GetEEPromFlags+0x48>
    a83c:	80 91 f6 09 	lds	r24, 0x09F6
    a840:	84 60       	ori	r24, 0x04	; 4
    a842:	80 93 f6 09 	sts	0x09F6, r24
	if(eeprom_data[6] & 128){card_set |= 8;}
    a846:	80 91 17 0a 	lds	r24, 0x0A17
    a84a:	87 ff       	sbrs	r24, 7
    a84c:	05 c0       	rjmp	.+10     	; 0xa858 <GetEEPromFlags+0x5a>
    a84e:	80 91 f6 09 	lds	r24, 0x09F6
    a852:	88 60       	ori	r24, 0x08	; 8
    a854:	80 93 f6 09 	sts	0x09F6, r24
	if(card_set > 6)//corrupted eeprom?
    a858:	80 91 f6 09 	lds	r24, 0x09F6
    a85c:	87 30       	cpi	r24, 0x07	; 7
    a85e:	10 f0       	brcs	.+4      	; 0xa864 <GetEEPromFlags+0x66>
		card_set = 0;
    a860:	10 92 f6 09 	sts	0x09F6, r1
	old_card_set = card_set;
    a864:	90 91 f6 09 	lds	r25, 0x09F6

	//load music preference
	if(eeprom_data[11] & 128){music_track |= 1;}
    a868:	80 91 1c 0a 	lds	r24, 0x0A1C
    a86c:	87 ff       	sbrs	r24, 7
    a86e:	05 c0       	rjmp	.+10     	; 0xa87a <GetEEPromFlags+0x7c>
    a870:	80 91 00 0a 	lds	r24, 0x0A00
    a874:	81 60       	ori	r24, 0x01	; 1
    a876:	80 93 00 0a 	sts	0x0A00, r24
	if(eeprom_data[12] & 128){music_track |= 2;}
    a87a:	80 91 1d 0a 	lds	r24, 0x0A1D
    a87e:	87 ff       	sbrs	r24, 7
    a880:	05 c0       	rjmp	.+10     	; 0xa88c <GetEEPromFlags+0x8e>
    a882:	80 91 00 0a 	lds	r24, 0x0A00
    a886:	82 60       	ori	r24, 0x02	; 2
    a888:	80 93 00 0a 	sts	0x0A00, r24
	if(eeprom_data[13] & 128){music_track |= 4;}
    a88c:	80 91 1e 0a 	lds	r24, 0x0A1E
    a890:	87 ff       	sbrs	r24, 7
    a892:	05 c0       	rjmp	.+10     	; 0xa89e <GetEEPromFlags+0xa0>
    a894:	80 91 00 0a 	lds	r24, 0x0A00
    a898:	84 60       	ori	r24, 0x04	; 4
    a89a:	80 93 00 0a 	sts	0x0A00, r24
	if(eeprom_data[14] & 128){music_track |= 8;}
    a89e:	80 91 1f 0a 	lds	r24, 0x0A1F
    a8a2:	87 ff       	sbrs	r24, 7
    a8a4:	05 c0       	rjmp	.+10     	; 0xa8b0 <GetEEPromFlags+0xb2>
    a8a6:	80 91 00 0a 	lds	r24, 0x0A00
    a8aa:	88 60       	ori	r24, 0x08	; 8
    a8ac:	80 93 00 0a 	sts	0x0A00, r24
	if(music_track >= NUM_MUSIC_TRACKS)//corrupted eeprom?
    a8b0:	80 91 00 0a 	lds	r24, 0x0A00
    a8b4:	86 30       	cpi	r24, 0x06	; 6
    a8b6:	10 f0       	brcs	.+4      	; 0xa8bc <GetEEPromFlags+0xbe>
		music_track = 0;
    a8b8:	10 92 00 0a 	sts	0x0A00, r1

	//load speed preference
	if(eeprom_data[21] & 128){cursorspeed |= 1;}
    a8bc:	80 91 26 0a 	lds	r24, 0x0A26
    a8c0:	87 ff       	sbrs	r24, 7
    a8c2:	05 c0       	rjmp	.+10     	; 0xa8ce <GetEEPromFlags+0xd0>
    a8c4:	80 91 6d 0a 	lds	r24, 0x0A6D
    a8c8:	81 60       	ori	r24, 0x01	; 1
    a8ca:	80 93 6d 0a 	sts	0x0A6D, r24
	if(eeprom_data[22] & 128){cursorspeed |= 2;}
    a8ce:	80 91 27 0a 	lds	r24, 0x0A27
    a8d2:	87 ff       	sbrs	r24, 7
    a8d4:	05 c0       	rjmp	.+10     	; 0xa8e0 <GetEEPromFlags+0xe2>
    a8d6:	80 91 6d 0a 	lds	r24, 0x0A6D
    a8da:	82 60       	ori	r24, 0x02	; 2
    a8dc:	80 93 6d 0a 	sts	0x0A6D, r24
	if(eeprom_data[23] & 128){cursorspeed |= 4;}
    a8e0:	80 91 28 0a 	lds	r24, 0x0A28
    a8e4:	87 ff       	sbrs	r24, 7
    a8e6:	05 c0       	rjmp	.+10     	; 0xa8f2 <GetEEPromFlags+0xf4>
    a8e8:	80 91 6d 0a 	lds	r24, 0x0A6D
    a8ec:	84 60       	ori	r24, 0x04	; 4
    a8ee:	80 93 6d 0a 	sts	0x0A6D, r24
	if(eeprom_data[24] & 128){cursorspeed |= 8;}
    a8f2:	80 91 29 0a 	lds	r24, 0x0A29
    a8f6:	87 ff       	sbrs	r24, 7
    a8f8:	05 c0       	rjmp	.+10     	; 0xa904 <GetEEPromFlags+0x106>
    a8fa:	80 91 6d 0a 	lds	r24, 0x0A6D
    a8fe:	88 60       	ori	r24, 0x08	; 8
    a900:	80 93 6d 0a 	sts	0x0A6D, r24
	if(cursorspeed > MAX_CURSOR_SPEED)//corrupted eeprom?
    a904:	80 91 6d 0a 	lds	r24, 0x0A6D
    a908:	86 30       	cpi	r24, 0x06	; 6
    a90a:	18 f0       	brcs	.+6      	; 0xa912 <GetEEPromFlags+0x114>
		cursorspeed = 2;
    a90c:	82 e0       	ldi	r24, 0x02	; 2
    a90e:	80 93 6d 0a 	sts	0x0A6D, r24

	if(eeprom_data[15] & 128){game_state |= NO_MUSIC;}
    a912:	80 91 20 0a 	lds	r24, 0x0A20
    a916:	87 ff       	sbrs	r24, 7
    a918:	05 c0       	rjmp	.+10     	; 0xa924 <GetEEPromFlags+0x126>
    a91a:	80 91 06 0a 	lds	r24, 0x0A06
    a91e:	80 61       	ori	r24, 0x10	; 16
    a920:	80 93 06 0a 	sts	0x0A06, r24
	if(eeprom_data[7] & 128){game_state |= SHOW_TIMER;}
    a924:	80 91 18 0a 	lds	r24, 0x0A18
    a928:	87 ff       	sbrs	r24, 7
    a92a:	05 c0       	rjmp	.+10     	; 0xa936 <GetEEPromFlags+0x138>
    a92c:	80 91 06 0a 	lds	r24, 0x0A06
    a930:	80 68       	ori	r24, 0x80	; 128
    a932:	80 93 06 0a 	sts	0x0A06, r24

	if(!cursorspeed)
    a936:	80 91 6d 0a 	lds	r24, 0x0A6D
    a93a:	88 23       	and	r24, r24
    a93c:	19 f4       	brne	.+6      	; 0xa944 <GetEEPromFlags+0x146>
		cursorspeed = 2;
    a93e:	82 e0       	ldi	r24, 0x02	; 2
    a940:	80 93 6d 0a 	sts	0x0A6D, r24
	oldcursorspeed = cursorspeed;
    a944:	80 91 6d 0a 	lds	r24, 0x0A6D
    a948:	80 93 64 0a 	sts	0x0A64, r24
	old_game_options = game_state;
    a94c:	80 91 06 0a 	lds	r24, 0x0A06
    a950:	80 93 ee 0d 	sts	0x0DEE, r24
	old_card_set = card_set;
    a954:	90 93 04 0a 	sts	0x0A04, r25
}
    a958:	08 95       	ret

0000a95a <SetEEPromFlags>:

void SetEEPromFlags(){
	if(game_state & DRAW_THREE){eeprom_data[2] |= 128;}else{eeprom_data[2] &= ~128;}
    a95a:	30 91 06 0a 	lds	r19, 0x0A06
    a95e:	23 2f       	mov	r18, r19
    a960:	30 ff       	sbrs	r19, 0
    a962:	04 c0       	rjmp	.+8      	; 0xa96c <SetEEPromFlags+0x12>
    a964:	80 91 13 0a 	lds	r24, 0x0A13
    a968:	80 68       	ori	r24, 0x80	; 128
    a96a:	03 c0       	rjmp	.+6      	; 0xa972 <SetEEPromFlags+0x18>
    a96c:	80 91 13 0a 	lds	r24, 0x0A13
    a970:	8f 77       	andi	r24, 0x7F	; 127
    a972:	80 93 13 0a 	sts	0x0A13, r24
	
	//store card preference
	if(card_set & 1){eeprom_data[3] |= 128;}else{eeprom_data[3] &= ~128;}
    a976:	80 91 f6 09 	lds	r24, 0x09F6
    a97a:	98 2f       	mov	r25, r24
    a97c:	80 ff       	sbrs	r24, 0
    a97e:	04 c0       	rjmp	.+8      	; 0xa988 <SetEEPromFlags+0x2e>
    a980:	80 91 14 0a 	lds	r24, 0x0A14
    a984:	80 68       	ori	r24, 0x80	; 128
    a986:	03 c0       	rjmp	.+6      	; 0xa98e <SetEEPromFlags+0x34>
    a988:	80 91 14 0a 	lds	r24, 0x0A14
    a98c:	8f 77       	andi	r24, 0x7F	; 127
    a98e:	80 93 14 0a 	sts	0x0A14, r24
	if(card_set & 2){eeprom_data[4] |= 128;}else{eeprom_data[4] &= ~128;}
    a992:	91 ff       	sbrs	r25, 1
    a994:	04 c0       	rjmp	.+8      	; 0xa99e <SetEEPromFlags+0x44>
    a996:	80 91 15 0a 	lds	r24, 0x0A15
    a99a:	80 68       	ori	r24, 0x80	; 128
    a99c:	03 c0       	rjmp	.+6      	; 0xa9a4 <SetEEPromFlags+0x4a>
    a99e:	80 91 15 0a 	lds	r24, 0x0A15
    a9a2:	8f 77       	andi	r24, 0x7F	; 127
    a9a4:	80 93 15 0a 	sts	0x0A15, r24
	if(card_set & 4){eeprom_data[5] |= 128;}else{eeprom_data[5] &= ~128;}
    a9a8:	92 ff       	sbrs	r25, 2
    a9aa:	04 c0       	rjmp	.+8      	; 0xa9b4 <SetEEPromFlags+0x5a>
    a9ac:	80 91 16 0a 	lds	r24, 0x0A16
    a9b0:	80 68       	ori	r24, 0x80	; 128
    a9b2:	03 c0       	rjmp	.+6      	; 0xa9ba <SetEEPromFlags+0x60>
    a9b4:	80 91 16 0a 	lds	r24, 0x0A16
    a9b8:	8f 77       	andi	r24, 0x7F	; 127
    a9ba:	80 93 16 0a 	sts	0x0A16, r24
	if(card_set & 8){eeprom_data[6] |= 128;}else{eeprom_data[6] &= ~128;}
    a9be:	93 ff       	sbrs	r25, 3
    a9c0:	04 c0       	rjmp	.+8      	; 0xa9ca <SetEEPromFlags+0x70>
    a9c2:	80 91 17 0a 	lds	r24, 0x0A17
    a9c6:	80 68       	ori	r24, 0x80	; 128
    a9c8:	03 c0       	rjmp	.+6      	; 0xa9d0 <SetEEPromFlags+0x76>
    a9ca:	80 91 17 0a 	lds	r24, 0x0A17
    a9ce:	8f 77       	andi	r24, 0x7F	; 127
    a9d0:	80 93 17 0a 	sts	0x0A17, r24
	
	//store music preference
	if(music_track & 1){eeprom_data[11] |= 128;}else{eeprom_data[11] &= ~128;}
    a9d4:	80 91 00 0a 	lds	r24, 0x0A00
    a9d8:	98 2f       	mov	r25, r24
    a9da:	80 ff       	sbrs	r24, 0
    a9dc:	04 c0       	rjmp	.+8      	; 0xa9e6 <SetEEPromFlags+0x8c>
    a9de:	80 91 1c 0a 	lds	r24, 0x0A1C
    a9e2:	80 68       	ori	r24, 0x80	; 128
    a9e4:	03 c0       	rjmp	.+6      	; 0xa9ec <SetEEPromFlags+0x92>
    a9e6:	80 91 1c 0a 	lds	r24, 0x0A1C
    a9ea:	8f 77       	andi	r24, 0x7F	; 127
    a9ec:	80 93 1c 0a 	sts	0x0A1C, r24
	if(music_track & 2){eeprom_data[12] |= 128;}else{eeprom_data[12] &= ~128;}
    a9f0:	91 ff       	sbrs	r25, 1
    a9f2:	04 c0       	rjmp	.+8      	; 0xa9fc <SetEEPromFlags+0xa2>
    a9f4:	80 91 1d 0a 	lds	r24, 0x0A1D
    a9f8:	80 68       	ori	r24, 0x80	; 128
    a9fa:	03 c0       	rjmp	.+6      	; 0xaa02 <SetEEPromFlags+0xa8>
    a9fc:	80 91 1d 0a 	lds	r24, 0x0A1D
    aa00:	8f 77       	andi	r24, 0x7F	; 127
    aa02:	80 93 1d 0a 	sts	0x0A1D, r24
	if(music_track & 4){eeprom_data[13] |= 128;}else{eeprom_data[13] &= ~128;}
    aa06:	92 ff       	sbrs	r25, 2
    aa08:	04 c0       	rjmp	.+8      	; 0xaa12 <SetEEPromFlags+0xb8>
    aa0a:	80 91 1e 0a 	lds	r24, 0x0A1E
    aa0e:	80 68       	ori	r24, 0x80	; 128
    aa10:	03 c0       	rjmp	.+6      	; 0xaa18 <SetEEPromFlags+0xbe>
    aa12:	80 91 1e 0a 	lds	r24, 0x0A1E
    aa16:	8f 77       	andi	r24, 0x7F	; 127
    aa18:	80 93 1e 0a 	sts	0x0A1E, r24
	if(music_track & 8){eeprom_data[14] |= 128;}else{eeprom_data[14] &= ~128;}
    aa1c:	93 ff       	sbrs	r25, 3
    aa1e:	04 c0       	rjmp	.+8      	; 0xaa28 <SetEEPromFlags+0xce>
    aa20:	80 91 1f 0a 	lds	r24, 0x0A1F
    aa24:	80 68       	ori	r24, 0x80	; 128
    aa26:	03 c0       	rjmp	.+6      	; 0xaa2e <SetEEPromFlags+0xd4>
    aa28:	80 91 1f 0a 	lds	r24, 0x0A1F
    aa2c:	8f 77       	andi	r24, 0x7F	; 127
    aa2e:	80 93 1f 0a 	sts	0x0A1F, r24

	//store speed preference
	if(cursorspeed & 1){eeprom_data[21] |= 128;}else{eeprom_data[21] &= ~128;}
    aa32:	80 91 6d 0a 	lds	r24, 0x0A6D
    aa36:	98 2f       	mov	r25, r24
    aa38:	80 ff       	sbrs	r24, 0
    aa3a:	04 c0       	rjmp	.+8      	; 0xaa44 <SetEEPromFlags+0xea>
    aa3c:	80 91 26 0a 	lds	r24, 0x0A26
    aa40:	80 68       	ori	r24, 0x80	; 128
    aa42:	03 c0       	rjmp	.+6      	; 0xaa4a <SetEEPromFlags+0xf0>
    aa44:	80 91 26 0a 	lds	r24, 0x0A26
    aa48:	8f 77       	andi	r24, 0x7F	; 127
    aa4a:	80 93 26 0a 	sts	0x0A26, r24
	if(cursorspeed & 2){eeprom_data[22] |= 128;}else{eeprom_data[22] &= ~128;}
    aa4e:	91 ff       	sbrs	r25, 1
    aa50:	04 c0       	rjmp	.+8      	; 0xaa5a <SetEEPromFlags+0x100>
    aa52:	80 91 27 0a 	lds	r24, 0x0A27
    aa56:	80 68       	ori	r24, 0x80	; 128
    aa58:	03 c0       	rjmp	.+6      	; 0xaa60 <SetEEPromFlags+0x106>
    aa5a:	80 91 27 0a 	lds	r24, 0x0A27
    aa5e:	8f 77       	andi	r24, 0x7F	; 127
    aa60:	80 93 27 0a 	sts	0x0A27, r24
	if(cursorspeed & 4){eeprom_data[23] |= 128;}else{eeprom_data[23] &= ~128;}
    aa64:	92 ff       	sbrs	r25, 2
    aa66:	04 c0       	rjmp	.+8      	; 0xaa70 <SetEEPromFlags+0x116>
    aa68:	80 91 28 0a 	lds	r24, 0x0A28
    aa6c:	80 68       	ori	r24, 0x80	; 128
    aa6e:	03 c0       	rjmp	.+6      	; 0xaa76 <SetEEPromFlags+0x11c>
    aa70:	80 91 28 0a 	lds	r24, 0x0A28
    aa74:	8f 77       	andi	r24, 0x7F	; 127
    aa76:	80 93 28 0a 	sts	0x0A28, r24
	if(cursorspeed & 8){eeprom_data[24] |= 128;}else{eeprom_data[24] &= ~128;}
    aa7a:	93 ff       	sbrs	r25, 3
    aa7c:	04 c0       	rjmp	.+8      	; 0xaa86 <SetEEPromFlags+0x12c>
    aa7e:	80 91 29 0a 	lds	r24, 0x0A29
    aa82:	80 68       	ori	r24, 0x80	; 128
    aa84:	03 c0       	rjmp	.+6      	; 0xaa8c <SetEEPromFlags+0x132>
    aa86:	80 91 29 0a 	lds	r24, 0x0A29
    aa8a:	8f 77       	andi	r24, 0x7F	; 127
    aa8c:	80 93 29 0a 	sts	0x0A29, r24
	
	if(game_state & NO_MUSIC){eeprom_data[15] |= 128;}else{eeprom_data[15] &= ~128;}
    aa90:	24 ff       	sbrs	r18, 4
    aa92:	04 c0       	rjmp	.+8      	; 0xaa9c <SetEEPromFlags+0x142>
    aa94:	80 91 20 0a 	lds	r24, 0x0A20
    aa98:	80 68       	ori	r24, 0x80	; 128
    aa9a:	03 c0       	rjmp	.+6      	; 0xaaa2 <SetEEPromFlags+0x148>
    aa9c:	80 91 20 0a 	lds	r24, 0x0A20
    aaa0:	8f 77       	andi	r24, 0x7F	; 127
    aaa2:	80 93 20 0a 	sts	0x0A20, r24
	if(game_state & SHOW_TIMER){eeprom_data[7] |= 128;}else{eeprom_data[7] &= ~128;}
    aaa6:	37 ff       	sbrs	r19, 7
    aaa8:	04 c0       	rjmp	.+8      	; 0xaab2 <SetEEPromFlags+0x158>
    aaaa:	80 91 18 0a 	lds	r24, 0x0A18
    aaae:	80 68       	ori	r24, 0x80	; 128
    aab0:	03 c0       	rjmp	.+6      	; 0xaab8 <SetEEPromFlags+0x15e>
    aab2:	80 91 18 0a 	lds	r24, 0x0A18
    aab6:	8f 77       	andi	r24, 0x7F	; 127
    aab8:	80 93 18 0a 	sts	0x0A18, r24
    aabc:	08 95       	ret

0000aabe <DrawCard>:
inline uint8_t RemoveCard(uint8_t s, uint8_t c){
	stacks[s].numcards--;
	return stacks[s].cards[c];
}

inline void DrawCard(uint8_t x, uint8_t y, uint8_t c){
    aabe:	a0 e0       	ldi	r26, 0x00	; 0
    aac0:	b0 e0       	ldi	r27, 0x00	; 0
    aac2:	e5 e6       	ldi	r30, 0x65	; 101
    aac4:	f5 e5       	ldi	r31, 0x55	; 85
    aac6:	0c 94 8e 75 	jmp	0xeb1c	; 0xeb1c <__prologue_saves__+0xa>
    aaca:	08 2f       	mov	r16, r24
    aacc:	16 2f       	mov	r17, r22
    aace:	d4 2e       	mov	r13, r20
	uint8_t suitoff = (c&63)/13;
    aad0:	24 2f       	mov	r18, r20
    aad2:	30 e0       	ldi	r19, 0x00	; 0
    aad4:	2f 73       	andi	r18, 0x3F	; 63
    aad6:	30 70       	andi	r19, 0x00	; 0
	uint8_t rankoff = 0;
	uint8_t cardoff = (c&63)%13;
	if((c & 63) > CLUB_KING)
    aad8:	2a 31       	cpi	r18, 0x1A	; 26
    aada:	31 05       	cpc	r19, r1
    aadc:	14 f4       	brge	.+4      	; 0xaae2 <DrawCard+0x24>
    aade:	e0 e0       	ldi	r30, 0x00	; 0
    aae0:	01 c0       	rjmp	.+2      	; 0xaae4 <DrawCard+0x26>
    aae2:	ed e0       	ldi	r30, 0x0D	; 13
		rankoff = 13;
//		suitoff = c/13;
//		rankoff = 13;
//	}

	if(c == MAX_CARDS){//blank it out with the holder card
    aae4:	84 e3       	ldi	r24, 0x34	; 52
    aae6:	d8 16       	cp	r13, r24
    aae8:	09 f0       	breq	.+2      	; 0xaaec <DrawCard+0x2e>
    aaea:	01 c1       	rjmp	.+514    	; 0xacee <DrawCard+0x230>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    aaec:	0e 31       	cpi	r16, 0x1E	; 30
    aaee:	a0 f4       	brcc	.+40     	; 0xab18 <DrawCard+0x5a>
    aaf0:	1a 31       	cpi	r17, 0x1A	; 26
    aaf2:	90 f4       	brcc	.+36     	; 0xab18 <DrawCard+0x5a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    aaf4:	81 2f       	mov	r24, r17
    aaf6:	90 e0       	ldi	r25, 0x00	; 0
    aaf8:	fc 01       	movw	r30, r24
    aafa:	a5 e0       	ldi	r26, 0x05	; 5
    aafc:	ee 0f       	add	r30, r30
    aafe:	ff 1f       	adc	r31, r31
    ab00:	aa 95       	dec	r26
    ab02:	e1 f7       	brne	.-8      	; 0xaafc <DrawCard+0x3e>
    ab04:	88 0f       	add	r24, r24
    ab06:	99 1f       	adc	r25, r25
    ab08:	e8 1b       	sub	r30, r24
    ab0a:	f9 0b       	sbc	r31, r25
    ab0c:	e0 0f       	add	r30, r16
    ab0e:	f1 1d       	adc	r31, r1
    ab10:	e0 5e       	subi	r30, 0xE0	; 224
    ab12:	fe 4f       	sbci	r31, 0xFE	; 254
    ab14:	81 e1       	ldi	r24, 0x11	; 17
    ab16:	80 83       	st	Z, r24
		SetTileClipped(x+0,y+0,1);
		SetTileClipped(x+1,y+0,2);
    ab18:	c0 2e       	mov	r12, r16
    ab1a:	c3 94       	inc	r12
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ab1c:	8d e1       	ldi	r24, 0x1D	; 29
    ab1e:	8c 15       	cp	r24, r12
    ab20:	a0 f0       	brcs	.+40     	; 0xab4a <DrawCard+0x8c>
    ab22:	1a 31       	cpi	r17, 0x1A	; 26
    ab24:	90 f4       	brcc	.+36     	; 0xab4a <DrawCard+0x8c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ab26:	81 2f       	mov	r24, r17
    ab28:	90 e0       	ldi	r25, 0x00	; 0
    ab2a:	fc 01       	movw	r30, r24
    ab2c:	65 e0       	ldi	r22, 0x05	; 5
    ab2e:	ee 0f       	add	r30, r30
    ab30:	ff 1f       	adc	r31, r31
    ab32:	6a 95       	dec	r22
    ab34:	e1 f7       	brne	.-8      	; 0xab2e <DrawCard+0x70>
    ab36:	88 0f       	add	r24, r24
    ab38:	99 1f       	adc	r25, r25
    ab3a:	e8 1b       	sub	r30, r24
    ab3c:	f9 0b       	sbc	r31, r25
    ab3e:	ec 0d       	add	r30, r12
    ab40:	f1 1d       	adc	r31, r1
    ab42:	e0 5e       	subi	r30, 0xE0	; 224
    ab44:	fe 4f       	sbci	r31, 0xFE	; 254
    ab46:	82 e1       	ldi	r24, 0x12	; 18
    ab48:	80 83       	st	Z, r24
		SetTileClipped(x+2,y+0,2);
    ab4a:	42 e0       	ldi	r20, 0x02	; 2
    ab4c:	d4 2e       	mov	r13, r20
    ab4e:	d0 0e       	add	r13, r16
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ab50:	8d e1       	ldi	r24, 0x1D	; 29
    ab52:	8d 15       	cp	r24, r13
    ab54:	a0 f0       	brcs	.+40     	; 0xab7e <DrawCard+0xc0>
    ab56:	1a 31       	cpi	r17, 0x1A	; 26
    ab58:	90 f4       	brcc	.+36     	; 0xab7e <DrawCard+0xc0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ab5a:	81 2f       	mov	r24, r17
    ab5c:	90 e0       	ldi	r25, 0x00	; 0
    ab5e:	fc 01       	movw	r30, r24
    ab60:	35 e0       	ldi	r19, 0x05	; 5
    ab62:	ee 0f       	add	r30, r30
    ab64:	ff 1f       	adc	r31, r31
    ab66:	3a 95       	dec	r19
    ab68:	e1 f7       	brne	.-8      	; 0xab62 <DrawCard+0xa4>
    ab6a:	88 0f       	add	r24, r24
    ab6c:	99 1f       	adc	r25, r25
    ab6e:	e8 1b       	sub	r30, r24
    ab70:	f9 0b       	sbc	r31, r25
    ab72:	ed 0d       	add	r30, r13
    ab74:	f1 1d       	adc	r31, r1
    ab76:	e0 5e       	subi	r30, 0xE0	; 224
    ab78:	fe 4f       	sbci	r31, 0xFE	; 254
    ab7a:	82 e1       	ldi	r24, 0x12	; 18
    ab7c:	80 83       	st	Z, r24
		SetTileClipped(x+3,y+0,3);
    ab7e:	70 2f       	mov	r23, r16
    ab80:	7d 5f       	subi	r23, 0xFD	; 253
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ab82:	7e 31       	cpi	r23, 0x1E	; 30
    ab84:	a0 f4       	brcc	.+40     	; 0xabae <DrawCard+0xf0>
    ab86:	1a 31       	cpi	r17, 0x1A	; 26
    ab88:	90 f4       	brcc	.+36     	; 0xabae <DrawCard+0xf0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ab8a:	81 2f       	mov	r24, r17
    ab8c:	90 e0       	ldi	r25, 0x00	; 0
    ab8e:	fc 01       	movw	r30, r24
    ab90:	b5 e0       	ldi	r27, 0x05	; 5
    ab92:	ee 0f       	add	r30, r30
    ab94:	ff 1f       	adc	r31, r31
    ab96:	ba 95       	dec	r27
    ab98:	e1 f7       	brne	.-8      	; 0xab92 <DrawCard+0xd4>
    ab9a:	88 0f       	add	r24, r24
    ab9c:	99 1f       	adc	r25, r25
    ab9e:	e8 1b       	sub	r30, r24
    aba0:	f9 0b       	sbc	r31, r25
    aba2:	e7 0f       	add	r30, r23
    aba4:	f1 1d       	adc	r31, r1
    aba6:	e0 5e       	subi	r30, 0xE0	; 224
    aba8:	fe 4f       	sbci	r31, 0xFE	; 254
    abaa:	83 e1       	ldi	r24, 0x13	; 19
    abac:	80 83       	st	Z, r24
    abae:	41 2f       	mov	r20, r17
    abb0:	4f 5f       	subi	r20, 0xFF	; 255
    abb2:	51 e0       	ldi	r21, 0x01	; 1

		for(uint8_t yo=1;yo<CARD_TILES_V;yo++)
			for(uint8_t xo=0;xo<CARD_TILES_H;xo++){
				if(xo == 0)
    abb4:	e0 2e       	mov	r14, r16
    abb6:	ff 24       	eor	r15, r15
    abb8:	fe e1       	ldi	r31, 0x1E	; 30
    abba:	7f 2e       	mov	r7, r31
    abbc:	a7 2e       	mov	r10, r23
    abbe:	bb 24       	eor	r11, r11
    abc0:	e0 e1       	ldi	r30, 0x10	; 16
    abc2:	8e 2e       	mov	r8, r30
    abc4:	65 e1       	ldi	r22, 0x15	; 21
    abc6:	96 2e       	mov	r9, r22
    abc8:	64 e1       	ldi	r22, 0x14	; 20
    abca:	20 c0       	rjmp	.+64     	; 0xac0c <DrawCard+0x14e>
    abcc:	22 23       	and	r18, r18
    abce:	31 f4       	brne	.+12     	; 0xabdc <DrawCard+0x11e>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    abd0:	0e 31       	cpi	r16, 0x1E	; 30
    abd2:	a0 f4       	brcc	.+40     	; 0xabfc <DrawCard+0x13e>
    abd4:	4a 31       	cpi	r20, 0x1A	; 26
    abd6:	90 f4       	brcc	.+36     	; 0xabfc <DrawCard+0x13e>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    abd8:	68 83       	st	Y, r22
    abda:	10 c0       	rjmp	.+32     	; 0xabfc <DrawCard+0x13e>
					SetTileClipped(x+xo,y+yo,4);//TODO MAKE THIS SMALLER
				else if(xo == CARD_TILES_H-1)
    abdc:	23 30       	cpi	r18, 0x03	; 3
    abde:	31 f4       	brne	.+12     	; 0xabec <DrawCard+0x12e>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    abe0:	7e 31       	cpi	r23, 0x1E	; 30
    abe2:	60 f4       	brcc	.+24     	; 0xabfc <DrawCard+0x13e>
    abe4:	4a 31       	cpi	r20, 0x1A	; 26
    abe6:	50 f4       	brcc	.+20     	; 0xabfc <DrawCard+0x13e>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    abe8:	9c 92       	st	X, r9
    abea:	08 c0       	rjmp	.+16     	; 0xabfc <DrawCard+0x13e>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    abec:	3e 31       	cpi	r19, 0x1E	; 30
    abee:	30 f4       	brcc	.+12     	; 0xabfc <DrawCard+0x13e>
    abf0:	4a 31       	cpi	r20, 0x1A	; 26
    abf2:	20 f4       	brcc	.+8      	; 0xabfc <DrawCard+0x13e>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    abf4:	fc 01       	movw	r30, r24
    abf6:	e3 0f       	add	r30, r19
    abf8:	f1 1d       	adc	r31, r1
    abfa:	80 82       	st	Z, r8
		SetTileClipped(x+1,y+0,2);
		SetTileClipped(x+2,y+0,2);
		SetTileClipped(x+3,y+0,3);

		for(uint8_t yo=1;yo<CARD_TILES_V;yo++)
			for(uint8_t xo=0;xo<CARD_TILES_H;xo++){
    abfc:	2f 5f       	subi	r18, 0xFF	; 255
    abfe:	3f 5f       	subi	r19, 0xFF	; 255
    ac00:	24 30       	cpi	r18, 0x04	; 4
    ac02:	21 f7       	brne	.-56     	; 0xabcc <DrawCard+0x10e>
		SetTileClipped(x+0,y+0,1);
		SetTileClipped(x+1,y+0,2);
		SetTileClipped(x+2,y+0,2);
		SetTileClipped(x+3,y+0,3);

		for(uint8_t yo=1;yo<CARD_TILES_V;yo++)
    ac04:	5f 5f       	subi	r21, 0xFF	; 255
    ac06:	4f 5f       	subi	r20, 0xFF	; 255
    ac08:	56 30       	cpi	r21, 0x06	; 6
    ac0a:	91 f0       	breq	.+36     	; 0xac30 <DrawCard+0x172>
    ac0c:	47 9d       	mul	r20, r7
    ac0e:	c0 01       	movw	r24, r0
    ac10:	11 24       	eor	r1, r1
    ac12:	ec 01       	movw	r28, r24
    ac14:	ce 0d       	add	r28, r14
    ac16:	df 1d       	adc	r29, r15
    ac18:	dc 01       	movw	r26, r24
    ac1a:	aa 0d       	add	r26, r10
    ac1c:	bb 1d       	adc	r27, r11
    ac1e:	30 2f       	mov	r19, r16
    ac20:	20 e0       	ldi	r18, 0x00	; 0
    ac22:	80 5e       	subi	r24, 0xE0	; 224
    ac24:	9e 4f       	sbci	r25, 0xFE	; 254
    ac26:	a0 5e       	subi	r26, 0xE0	; 224
    ac28:	be 4f       	sbci	r27, 0xFE	; 254
    ac2a:	c0 5e       	subi	r28, 0xE0	; 224
    ac2c:	de 4f       	sbci	r29, 0xFE	; 254
    ac2e:	ce cf       	rjmp	.-100    	; 0xabcc <DrawCard+0x10e>
					SetTileClipped(x+xo,y+yo,5);
				else
					SetTileClipped(x+xo,y+yo,0);
			}
		
		SetTileClipped(x+0,y+5,6);
    ac30:	61 2f       	mov	r22, r17
    ac32:	6b 5f       	subi	r22, 0xFB	; 251
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ac34:	0e 31       	cpi	r16, 0x1E	; 30
    ac36:	a0 f4       	brcc	.+40     	; 0xac60 <DrawCard+0x1a2>
    ac38:	6a 31       	cpi	r22, 0x1A	; 26
    ac3a:	90 f4       	brcc	.+36     	; 0xac60 <DrawCard+0x1a2>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ac3c:	86 2f       	mov	r24, r22
    ac3e:	90 e0       	ldi	r25, 0x00	; 0
    ac40:	fc 01       	movw	r30, r24
    ac42:	55 e0       	ldi	r21, 0x05	; 5
    ac44:	ee 0f       	add	r30, r30
    ac46:	ff 1f       	adc	r31, r31
    ac48:	5a 95       	dec	r21
    ac4a:	e1 f7       	brne	.-8      	; 0xac44 <DrawCard+0x186>
    ac4c:	88 0f       	add	r24, r24
    ac4e:	99 1f       	adc	r25, r25
    ac50:	e8 1b       	sub	r30, r24
    ac52:	f9 0b       	sbc	r31, r25
    ac54:	ee 0d       	add	r30, r14
    ac56:	ff 1d       	adc	r31, r15
    ac58:	e0 5e       	subi	r30, 0xE0	; 224
    ac5a:	fe 4f       	sbci	r31, 0xFE	; 254
    ac5c:	86 e1       	ldi	r24, 0x16	; 22
    ac5e:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ac60:	8d e1       	ldi	r24, 0x1D	; 29
    ac62:	8c 15       	cp	r24, r12
    ac64:	a0 f0       	brcs	.+40     	; 0xac8e <DrawCard+0x1d0>
    ac66:	6a 31       	cpi	r22, 0x1A	; 26
    ac68:	90 f4       	brcc	.+36     	; 0xac8e <DrawCard+0x1d0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ac6a:	86 2f       	mov	r24, r22
    ac6c:	90 e0       	ldi	r25, 0x00	; 0
    ac6e:	fc 01       	movw	r30, r24
    ac70:	35 e0       	ldi	r19, 0x05	; 5
    ac72:	ee 0f       	add	r30, r30
    ac74:	ff 1f       	adc	r31, r31
    ac76:	3a 95       	dec	r19
    ac78:	e1 f7       	brne	.-8      	; 0xac72 <DrawCard+0x1b4>
    ac7a:	88 0f       	add	r24, r24
    ac7c:	99 1f       	adc	r25, r25
    ac7e:	e8 1b       	sub	r30, r24
    ac80:	f9 0b       	sbc	r31, r25
    ac82:	ec 0d       	add	r30, r12
    ac84:	f1 1d       	adc	r31, r1
    ac86:	e0 5e       	subi	r30, 0xE0	; 224
    ac88:	fe 4f       	sbci	r31, 0xFE	; 254
    ac8a:	82 e1       	ldi	r24, 0x12	; 18
    ac8c:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ac8e:	8d e1       	ldi	r24, 0x1D	; 29
    ac90:	8d 15       	cp	r24, r13
    ac92:	a0 f0       	brcs	.+40     	; 0xacbc <DrawCard+0x1fe>
    ac94:	6a 31       	cpi	r22, 0x1A	; 26
    ac96:	90 f4       	brcc	.+36     	; 0xacbc <DrawCard+0x1fe>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ac98:	86 2f       	mov	r24, r22
    ac9a:	90 e0       	ldi	r25, 0x00	; 0
    ac9c:	fc 01       	movw	r30, r24
    ac9e:	b5 e0       	ldi	r27, 0x05	; 5
    aca0:	ee 0f       	add	r30, r30
    aca2:	ff 1f       	adc	r31, r31
    aca4:	ba 95       	dec	r27
    aca6:	e1 f7       	brne	.-8      	; 0xaca0 <DrawCard+0x1e2>
    aca8:	88 0f       	add	r24, r24
    acaa:	99 1f       	adc	r25, r25
    acac:	e8 1b       	sub	r30, r24
    acae:	f9 0b       	sbc	r31, r25
    acb0:	ed 0d       	add	r30, r13
    acb2:	f1 1d       	adc	r31, r1
    acb4:	e0 5e       	subi	r30, 0xE0	; 224
    acb6:	fe 4f       	sbci	r31, 0xFE	; 254
    acb8:	82 e1       	ldi	r24, 0x12	; 18
    acba:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    acbc:	7e 31       	cpi	r23, 0x1E	; 30
    acbe:	08 f0       	brcs	.+2      	; 0xacc2 <DrawCard+0x204>
    acc0:	13 c3       	rjmp	.+1574   	; 0xb2e8 <DrawCard+0x82a>
    acc2:	6a 31       	cpi	r22, 0x1A	; 26
    acc4:	08 f0       	brcs	.+2      	; 0xacc8 <DrawCard+0x20a>
    acc6:	10 c3       	rjmp	.+1568   	; 0xb2e8 <DrawCard+0x82a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    acc8:	86 2f       	mov	r24, r22
    acca:	90 e0       	ldi	r25, 0x00	; 0
    accc:	fc 01       	movw	r30, r24
    acce:	75 e0       	ldi	r23, 0x05	; 5
    acd0:	ee 0f       	add	r30, r30
    acd2:	ff 1f       	adc	r31, r31
    acd4:	7a 95       	dec	r23
    acd6:	e1 f7       	brne	.-8      	; 0xacd0 <DrawCard+0x212>
    acd8:	88 0f       	add	r24, r24
    acda:	99 1f       	adc	r25, r25
    acdc:	e8 1b       	sub	r30, r24
    acde:	f9 0b       	sbc	r31, r25
    ace0:	ea 0d       	add	r30, r10
    ace2:	fb 1d       	adc	r31, r11
    ace4:	e0 5e       	subi	r30, 0xE0	; 224
    ace6:	fe 4f       	sbci	r31, 0xFE	; 254
    ace8:	87 e1       	ldi	r24, 0x17	; 23
    acea:	80 83       	st	Z, r24
    acec:	fd c2       	rjmp	.+1530   	; 0xb2e8 <DrawCard+0x82a>
		SetTileClipped(x+3,y+5,7);

		return;
	}

	if(c & FACEUP){
    acee:	d7 fe       	sbrs	r13, 7
    acf0:	c3 c1       	rjmp	.+902    	; 0xb078 <DrawCard+0x5ba>
		c &= 63;
		//top
		SetTileClipped(x+0,y+0,GFX_RANK_SMALL_TOP_START+rankoff+cardoff);
    acf2:	c9 01       	movw	r24, r18
    acf4:	6d e0       	ldi	r22, 0x0D	; 13
    acf6:	70 e0       	ldi	r23, 0x00	; 0
    acf8:	0e 94 76 75 	call	0xeaec	; 0xeaec <__divmodhi4>
    acfc:	4e 2f       	mov	r20, r30
    acfe:	48 0f       	add	r20, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ad00:	0e 31       	cpi	r16, 0x1E	; 30
    ad02:	a8 f4       	brcc	.+42     	; 0xad2e <DrawCard+0x270>
    ad04:	1a 31       	cpi	r17, 0x1A	; 26
    ad06:	98 f4       	brcc	.+38     	; 0xad2e <DrawCard+0x270>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ad08:	81 2f       	mov	r24, r17
    ad0a:	90 e0       	ldi	r25, 0x00	; 0
    ad0c:	fc 01       	movw	r30, r24
    ad0e:	55 e0       	ldi	r21, 0x05	; 5
    ad10:	ee 0f       	add	r30, r30
    ad12:	ff 1f       	adc	r31, r31
    ad14:	5a 95       	dec	r21
    ad16:	e1 f7       	brne	.-8      	; 0xad10 <DrawCard+0x252>
    ad18:	88 0f       	add	r24, r24
    ad1a:	99 1f       	adc	r25, r25
    ad1c:	e8 1b       	sub	r30, r24
    ad1e:	f9 0b       	sbc	r31, r25
    ad20:	e0 0f       	add	r30, r16
    ad22:	f1 1d       	adc	r31, r1
    ad24:	e0 5e       	subi	r30, 0xE0	; 224
    ad26:	fe 4f       	sbci	r31, 0xFE	; 254
    ad28:	48 5e       	subi	r20, 0xE8	; 232
    ad2a:	40 83       	st	Z, r20
    ad2c:	48 51       	subi	r20, 0x18	; 24
	stacks[s].numcards--;
	return stacks[s].cards[c];
}

inline void DrawCard(uint8_t x, uint8_t y, uint8_t c){
	uint8_t suitoff = (c&63)/13;
    ad2e:	c9 01       	movw	r24, r18
    ad30:	6d e0       	ldi	r22, 0x0D	; 13
    ad32:	70 e0       	ldi	r23, 0x00	; 0
    ad34:	0e 94 76 75 	call	0xeaec	; 0xeaec <__divmodhi4>

	if(c & FACEUP){
		c &= 63;
		//top
		SetTileClipped(x+0,y+0,GFX_RANK_SMALL_TOP_START+rankoff+cardoff);
		SetTileClipped(x+1,y+0,GFX_SUIT_SMALL_TOP_START+suitoff);
    ad38:	b0 2f       	mov	r27, r16
    ad3a:	bf 5f       	subi	r27, 0xFF	; 255
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ad3c:	be 31       	cpi	r27, 0x1E	; 30
    ad3e:	a8 f4       	brcc	.+42     	; 0xad6a <DrawCard+0x2ac>
    ad40:	1a 31       	cpi	r17, 0x1A	; 26
    ad42:	98 f4       	brcc	.+38     	; 0xad6a <DrawCard+0x2ac>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ad44:	81 2f       	mov	r24, r17
    ad46:	90 e0       	ldi	r25, 0x00	; 0
    ad48:	fc 01       	movw	r30, r24
    ad4a:	a5 e0       	ldi	r26, 0x05	; 5
    ad4c:	ee 0f       	add	r30, r30
    ad4e:	ff 1f       	adc	r31, r31
    ad50:	aa 95       	dec	r26
    ad52:	e1 f7       	brne	.-8      	; 0xad4c <DrawCard+0x28e>
    ad54:	88 0f       	add	r24, r24
    ad56:	99 1f       	adc	r25, r25
    ad58:	e8 1b       	sub	r30, r24
    ad5a:	f9 0b       	sbc	r31, r25
    ad5c:	eb 0f       	add	r30, r27
    ad5e:	f1 1d       	adc	r31, r1
    ad60:	e0 5e       	subi	r30, 0xE0	; 224
    ad62:	fe 4f       	sbci	r31, 0xFE	; 254
    ad64:	6d 5a       	subi	r22, 0xAD	; 173
    ad66:	60 83       	st	Z, r22
    ad68:	63 55       	subi	r22, 0x53	; 83
		SetTileClipped(x+2,y+0,GFX_BLNK_SMALL_TOP_START+0);
    ad6a:	a0 2f       	mov	r26, r16
    ad6c:	ae 5f       	subi	r26, 0xFE	; 254
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ad6e:	ae 31       	cpi	r26, 0x1E	; 30
    ad70:	a0 f4       	brcc	.+40     	; 0xad9a <DrawCard+0x2dc>
    ad72:	1a 31       	cpi	r17, 0x1A	; 26
    ad74:	90 f4       	brcc	.+36     	; 0xad9a <DrawCard+0x2dc>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ad76:	81 2f       	mov	r24, r17
    ad78:	90 e0       	ldi	r25, 0x00	; 0
    ad7a:	fc 01       	movw	r30, r24
    ad7c:	55 e0       	ldi	r21, 0x05	; 5
    ad7e:	ee 0f       	add	r30, r30
    ad80:	ff 1f       	adc	r31, r31
    ad82:	5a 95       	dec	r21
    ad84:	e1 f7       	brne	.-8      	; 0xad7e <DrawCard+0x2c0>
    ad86:	88 0f       	add	r24, r24
    ad88:	99 1f       	adc	r25, r25
    ad8a:	e8 1b       	sub	r30, r24
    ad8c:	f9 0b       	sbc	r31, r25
    ad8e:	ea 0f       	add	r30, r26
    ad90:	f1 1d       	adc	r31, r1
    ad92:	e0 5e       	subi	r30, 0xE0	; 224
    ad94:	fe 4f       	sbci	r31, 0xFE	; 254
    ad96:	8c e4       	ldi	r24, 0x4C	; 76
    ad98:	80 83       	st	Z, r24
		SetTileClipped(x+3,y+0,GFX_CRNR_SMALL_TOP_START+0);
    ad9a:	70 2f       	mov	r23, r16
    ad9c:	7d 5f       	subi	r23, 0xFD	; 253
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ad9e:	7e 31       	cpi	r23, 0x1E	; 30
    ada0:	a0 f4       	brcc	.+40     	; 0xadca <DrawCard+0x30c>
    ada2:	1a 31       	cpi	r17, 0x1A	; 26
    ada4:	90 f4       	brcc	.+36     	; 0xadca <DrawCard+0x30c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ada6:	81 2f       	mov	r24, r17
    ada8:	90 e0       	ldi	r25, 0x00	; 0
    adaa:	fc 01       	movw	r30, r24
    adac:	25 e0       	ldi	r18, 0x05	; 5
    adae:	ee 0f       	add	r30, r30
    adb0:	ff 1f       	adc	r31, r31
    adb2:	2a 95       	dec	r18
    adb4:	e1 f7       	brne	.-8      	; 0xadae <DrawCard+0x2f0>
    adb6:	88 0f       	add	r24, r24
    adb8:	99 1f       	adc	r25, r25
    adba:	e8 1b       	sub	r30, r24
    adbc:	f9 0b       	sbc	r31, r25
    adbe:	e7 0f       	add	r30, r23
    adc0:	f1 1d       	adc	r31, r1
    adc2:	e0 5e       	subi	r30, 0xE0	; 224
    adc4:	fe 4f       	sbci	r31, 0xFE	; 254
    adc6:	8d e4       	ldi	r24, 0x4D	; 77
    adc8:	80 83       	st	Z, r24

		//bottom
		SetTileClipped(x+0,y+5,GFX_CRNR_SMALL_BOT_START+0);
    adca:	21 2f       	mov	r18, r17
    adcc:	2b 5f       	subi	r18, 0xFB	; 251
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    adce:	0e 31       	cpi	r16, 0x1E	; 30
    add0:	a0 f4       	brcc	.+40     	; 0xadfa <DrawCard+0x33c>
    add2:	2a 31       	cpi	r18, 0x1A	; 26
    add4:	90 f4       	brcc	.+36     	; 0xadfa <DrawCard+0x33c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    add6:	82 2f       	mov	r24, r18
    add8:	90 e0       	ldi	r25, 0x00	; 0
    adda:	fc 01       	movw	r30, r24
    addc:	35 e0       	ldi	r19, 0x05	; 5
    adde:	ee 0f       	add	r30, r30
    ade0:	ff 1f       	adc	r31, r31
    ade2:	3a 95       	dec	r19
    ade4:	e1 f7       	brne	.-8      	; 0xadde <DrawCard+0x320>
    ade6:	88 0f       	add	r24, r24
    ade8:	99 1f       	adc	r25, r25
    adea:	e8 1b       	sub	r30, r24
    adec:	f9 0b       	sbc	r31, r25
    adee:	e0 0f       	add	r30, r16
    adf0:	f1 1d       	adc	r31, r1
    adf2:	e0 5e       	subi	r30, 0xE0	; 224
    adf4:	fe 4f       	sbci	r31, 0xFE	; 254
    adf6:	80 e5       	ldi	r24, 0x50	; 80
    adf8:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    adfa:	be 31       	cpi	r27, 0x1E	; 30
    adfc:	a0 f4       	brcc	.+40     	; 0xae26 <DrawCard+0x368>
    adfe:	2a 31       	cpi	r18, 0x1A	; 26
    ae00:	90 f4       	brcc	.+36     	; 0xae26 <DrawCard+0x368>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ae02:	82 2f       	mov	r24, r18
    ae04:	90 e0       	ldi	r25, 0x00	; 0
    ae06:	fc 01       	movw	r30, r24
    ae08:	35 e0       	ldi	r19, 0x05	; 5
    ae0a:	ee 0f       	add	r30, r30
    ae0c:	ff 1f       	adc	r31, r31
    ae0e:	3a 95       	dec	r19
    ae10:	e1 f7       	brne	.-8      	; 0xae0a <DrawCard+0x34c>
    ae12:	88 0f       	add	r24, r24
    ae14:	99 1f       	adc	r25, r25
    ae16:	e8 1b       	sub	r30, r24
    ae18:	f9 0b       	sbc	r31, r25
    ae1a:	eb 0f       	add	r30, r27
    ae1c:	f1 1d       	adc	r31, r1
    ae1e:	e0 5e       	subi	r30, 0xE0	; 224
    ae20:	fe 4f       	sbci	r31, 0xFE	; 254
    ae22:	81 e5       	ldi	r24, 0x51	; 81
    ae24:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ae26:	ae 31       	cpi	r26, 0x1E	; 30
    ae28:	a0 f4       	brcc	.+40     	; 0xae52 <DrawCard+0x394>
    ae2a:	2a 31       	cpi	r18, 0x1A	; 26
    ae2c:	90 f4       	brcc	.+36     	; 0xae52 <DrawCard+0x394>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ae2e:	82 2f       	mov	r24, r18
    ae30:	90 e0       	ldi	r25, 0x00	; 0
    ae32:	fc 01       	movw	r30, r24
    ae34:	35 e0       	ldi	r19, 0x05	; 5
    ae36:	ee 0f       	add	r30, r30
    ae38:	ff 1f       	adc	r31, r31
    ae3a:	3a 95       	dec	r19
    ae3c:	e1 f7       	brne	.-8      	; 0xae36 <DrawCard+0x378>
    ae3e:	88 0f       	add	r24, r24
    ae40:	99 1f       	adc	r25, r25
    ae42:	e8 1b       	sub	r30, r24
    ae44:	f9 0b       	sbc	r31, r25
    ae46:	ea 0f       	add	r30, r26
    ae48:	f1 1d       	adc	r31, r1
    ae4a:	e0 5e       	subi	r30, 0xE0	; 224
    ae4c:	fe 4f       	sbci	r31, 0xFE	; 254
    ae4e:	69 5a       	subi	r22, 0xA9	; 169
    ae50:	60 83       	st	Z, r22
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ae52:	7e 31       	cpi	r23, 0x1E	; 30
    ae54:	a0 f4       	brcc	.+40     	; 0xae7e <DrawCard+0x3c0>
    ae56:	2a 31       	cpi	r18, 0x1A	; 26
    ae58:	90 f4       	brcc	.+36     	; 0xae7e <DrawCard+0x3c0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ae5a:	82 2f       	mov	r24, r18
    ae5c:	90 e0       	ldi	r25, 0x00	; 0
    ae5e:	fc 01       	movw	r30, r24
    ae60:	35 e0       	ldi	r19, 0x05	; 5
    ae62:	ee 0f       	add	r30, r30
    ae64:	ff 1f       	adc	r31, r31
    ae66:	3a 95       	dec	r19
    ae68:	e1 f7       	brne	.-8      	; 0xae62 <DrawCard+0x3a4>
    ae6a:	88 0f       	add	r24, r24
    ae6c:	99 1f       	adc	r25, r25
    ae6e:	e8 1b       	sub	r30, r24
    ae70:	f9 0b       	sbc	r31, r25
    ae72:	e7 0f       	add	r30, r23
    ae74:	f1 1d       	adc	r31, r1
    ae76:	e0 5e       	subi	r30, 0xE0	; 224
    ae78:	fe 4f       	sbci	r31, 0xFE	; 254
    ae7a:	4e 5c       	subi	r20, 0xCE	; 206
    ae7c:	40 83       	st	Z, r20
    ae7e:	51 2f       	mov	r21, r17
    ae80:	5f 5f       	subi	r21, 0xFF	; 255
    ae82:	25 2f       	mov	r18, r21
    ae84:	31 e0       	ldi	r19, 0x01	; 1
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    ae86:	e0 2e       	mov	r14, r16
    ae88:	ff 24       	eor	r15, r15
    ae8a:	6e e4       	ldi	r22, 0x4E	; 78
    ae8c:	c7 2f       	mov	r28, r23
    ae8e:	d0 e0       	ldi	r29, 0x00	; 0
    ae90:	4f e4       	ldi	r20, 0x4F	; 79
    ae92:	0e 31       	cpi	r16, 0x1E	; 30
    ae94:	a0 f4       	brcc	.+40     	; 0xaebe <DrawCard+0x400>
    ae96:	2a 31       	cpi	r18, 0x1A	; 26
    ae98:	90 f4       	brcc	.+36     	; 0xaebe <DrawCard+0x400>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    ae9a:	82 2f       	mov	r24, r18
    ae9c:	90 e0       	ldi	r25, 0x00	; 0
    ae9e:	fc 01       	movw	r30, r24
    aea0:	68 94       	set
    aea2:	14 f8       	bld	r1, 4
    aea4:	ee 0f       	add	r30, r30
    aea6:	ff 1f       	adc	r31, r31
    aea8:	16 94       	lsr	r1
    aeaa:	e1 f7       	brne	.-8      	; 0xaea4 <DrawCard+0x3e6>
    aeac:	88 0f       	add	r24, r24
    aeae:	99 1f       	adc	r25, r25
    aeb0:	e8 1b       	sub	r30, r24
    aeb2:	f9 0b       	sbc	r31, r25
    aeb4:	ee 0d       	add	r30, r14
    aeb6:	ff 1d       	adc	r31, r15
    aeb8:	e0 5e       	subi	r30, 0xE0	; 224
    aeba:	fe 4f       	sbci	r31, 0xFE	; 254
    aebc:	60 83       	st	Z, r22
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    aebe:	7e 31       	cpi	r23, 0x1E	; 30
    aec0:	a0 f4       	brcc	.+40     	; 0xaeea <DrawCard+0x42c>
    aec2:	2a 31       	cpi	r18, 0x1A	; 26
    aec4:	90 f4       	brcc	.+36     	; 0xaeea <DrawCard+0x42c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    aec6:	82 2f       	mov	r24, r18
    aec8:	90 e0       	ldi	r25, 0x00	; 0
    aeca:	fc 01       	movw	r30, r24
    aecc:	68 94       	set
    aece:	14 f8       	bld	r1, 4
    aed0:	ee 0f       	add	r30, r30
    aed2:	ff 1f       	adc	r31, r31
    aed4:	16 94       	lsr	r1
    aed6:	e1 f7       	brne	.-8      	; 0xaed0 <DrawCard+0x412>
    aed8:	88 0f       	add	r24, r24
    aeda:	99 1f       	adc	r25, r25
    aedc:	e8 1b       	sub	r30, r24
    aede:	f9 0b       	sbc	r31, r25
    aee0:	ec 0f       	add	r30, r28
    aee2:	fd 1f       	adc	r31, r29
    aee4:	e0 5e       	subi	r30, 0xE0	; 224
    aee6:	fe 4f       	sbci	r31, 0xFE	; 254
    aee8:	40 83       	st	Z, r20
		SetTileClipped(x+1,y+5,GFX_BLNK_SMALL_BOT_START+0);
		SetTileClipped(x+2,y+5,GFX_SUIT_SMALL_BOT_START+suitoff);
		SetTileClipped(x+3,y+5,GFX_RANK_SMALL_BOT_START+rankoff+cardoff);
	
		for(uint8_t i=1;i<5;i++){//sides
    aeea:	3f 5f       	subi	r19, 0xFF	; 255
    aeec:	2f 5f       	subi	r18, 0xFF	; 255
    aeee:	35 30       	cpi	r19, 0x05	; 5
    aef0:	81 f6       	brne	.-96     	; 0xae92 <DrawCard+0x3d4>
		}

		if(false){//royal card

		}else{//normal
			suitoff = (c/13)*4;
    aef2:	8d 2d       	mov	r24, r13
    aef4:	8f 73       	andi	r24, 0x3F	; 63
    aef6:	6d e0       	ldi	r22, 0x0D	; 13
    aef8:	0e 94 56 75 	call	0xeaac	; 0xeaac <__udivmodqi4>
    aefc:	28 2f       	mov	r18, r24
    aefe:	22 0f       	add	r18, r18
    af00:	22 0f       	add	r18, r18
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    af02:	be 31       	cpi	r27, 0x1E	; 30
    af04:	a0 f4       	brcc	.+40     	; 0xaf2e <DrawCard+0x470>
    af06:	5a 31       	cpi	r21, 0x1A	; 26
    af08:	90 f4       	brcc	.+36     	; 0xaf2e <DrawCard+0x470>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    af0a:	85 2f       	mov	r24, r21
    af0c:	90 e0       	ldi	r25, 0x00	; 0
    af0e:	fc 01       	movw	r30, r24
    af10:	65 e0       	ldi	r22, 0x05	; 5
    af12:	ee 0f       	add	r30, r30
    af14:	ff 1f       	adc	r31, r31
    af16:	6a 95       	dec	r22
    af18:	e1 f7       	brne	.-8      	; 0xaf12 <DrawCard+0x454>
    af1a:	88 0f       	add	r24, r24
    af1c:	99 1f       	adc	r25, r25
    af1e:	e8 1b       	sub	r30, r24
    af20:	f9 0b       	sbc	r31, r25
    af22:	eb 0f       	add	r30, r27
    af24:	f1 1d       	adc	r31, r1
    af26:	e0 5e       	subi	r30, 0xE0	; 224
    af28:	fe 4f       	sbci	r31, 0xFE	; 254
    af2a:	82 e5       	ldi	r24, 0x52	; 82
    af2c:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    af2e:	ae 31       	cpi	r26, 0x1E	; 30
    af30:	a0 f4       	brcc	.+40     	; 0xaf5a <DrawCard+0x49c>
    af32:	5a 31       	cpi	r21, 0x1A	; 26
    af34:	90 f4       	brcc	.+36     	; 0xaf5a <DrawCard+0x49c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    af36:	85 2f       	mov	r24, r21
    af38:	90 e0       	ldi	r25, 0x00	; 0
    af3a:	fc 01       	movw	r30, r24
    af3c:	35 e0       	ldi	r19, 0x05	; 5
    af3e:	ee 0f       	add	r30, r30
    af40:	ff 1f       	adc	r31, r31
    af42:	3a 95       	dec	r19
    af44:	e1 f7       	brne	.-8      	; 0xaf3e <DrawCard+0x480>
    af46:	88 0f       	add	r24, r24
    af48:	99 1f       	adc	r25, r25
    af4a:	e8 1b       	sub	r30, r24
    af4c:	f9 0b       	sbc	r31, r25
    af4e:	ea 0f       	add	r30, r26
    af50:	f1 1d       	adc	r31, r1
    af52:	e0 5e       	subi	r30, 0xE0	; 224
    af54:	fe 4f       	sbci	r31, 0xFE	; 254
    af56:	82 e5       	ldi	r24, 0x52	; 82
    af58:	80 83       	st	Z, r24
			SetTileClipped(x+1,y+1,GFX_CARD_BLNK);
			SetTileClipped(x+2,y+1,GFX_CARD_BLNK);
			SetTileClipped(x+1,y+4,GFX_CARD_BLNK);
    af5a:	31 2f       	mov	r19, r17
    af5c:	3c 5f       	subi	r19, 0xFC	; 252
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    af5e:	be 31       	cpi	r27, 0x1E	; 30
    af60:	a0 f4       	brcc	.+40     	; 0xaf8a <DrawCard+0x4cc>
    af62:	3a 31       	cpi	r19, 0x1A	; 26
    af64:	90 f4       	brcc	.+36     	; 0xaf8a <DrawCard+0x4cc>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    af66:	83 2f       	mov	r24, r19
    af68:	90 e0       	ldi	r25, 0x00	; 0
    af6a:	fc 01       	movw	r30, r24
    af6c:	65 e0       	ldi	r22, 0x05	; 5
    af6e:	ee 0f       	add	r30, r30
    af70:	ff 1f       	adc	r31, r31
    af72:	6a 95       	dec	r22
    af74:	e1 f7       	brne	.-8      	; 0xaf6e <DrawCard+0x4b0>
    af76:	88 0f       	add	r24, r24
    af78:	99 1f       	adc	r25, r25
    af7a:	e8 1b       	sub	r30, r24
    af7c:	f9 0b       	sbc	r31, r25
    af7e:	eb 0f       	add	r30, r27
    af80:	f1 1d       	adc	r31, r1
    af82:	e0 5e       	subi	r30, 0xE0	; 224
    af84:	fe 4f       	sbci	r31, 0xFE	; 254
    af86:	82 e5       	ldi	r24, 0x52	; 82
    af88:	80 83       	st	Z, r24
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    af8a:	ae 31       	cpi	r26, 0x1E	; 30
    af8c:	a0 f4       	brcc	.+40     	; 0xafb6 <DrawCard+0x4f8>
    af8e:	3a 31       	cpi	r19, 0x1A	; 26
    af90:	90 f4       	brcc	.+36     	; 0xafb6 <DrawCard+0x4f8>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    af92:	83 2f       	mov	r24, r19
    af94:	90 e0       	ldi	r25, 0x00	; 0
    af96:	fc 01       	movw	r30, r24
    af98:	45 e0       	ldi	r20, 0x05	; 5
    af9a:	ee 0f       	add	r30, r30
    af9c:	ff 1f       	adc	r31, r31
    af9e:	4a 95       	dec	r20
    afa0:	e1 f7       	brne	.-8      	; 0xaf9a <DrawCard+0x4dc>
    afa2:	88 0f       	add	r24, r24
    afa4:	99 1f       	adc	r25, r25
    afa6:	e8 1b       	sub	r30, r24
    afa8:	f9 0b       	sbc	r31, r25
    afaa:	ea 0f       	add	r30, r26
    afac:	f1 1d       	adc	r31, r1
    afae:	e0 5e       	subi	r30, 0xE0	; 224
    afb0:	fe 4f       	sbci	r31, 0xFE	; 254
    afb2:	82 e5       	ldi	r24, 0x52	; 82
    afb4:	80 83       	st	Z, r24
			SetTileClipped(x+2,y+4,GFX_CARD_BLNK);

			SetTileClipped(x+1,y+2,GFX_SUIT_BIG_START+0+suitoff);
    afb6:	31 2f       	mov	r19, r17
    afb8:	3e 5f       	subi	r19, 0xFE	; 254
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    afba:	be 31       	cpi	r27, 0x1E	; 30
    afbc:	a8 f4       	brcc	.+42     	; 0xafe8 <DrawCard+0x52a>
    afbe:	3a 31       	cpi	r19, 0x1A	; 26
    afc0:	98 f4       	brcc	.+38     	; 0xafe8 <DrawCard+0x52a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    afc2:	83 2f       	mov	r24, r19
    afc4:	90 e0       	ldi	r25, 0x00	; 0
    afc6:	fc 01       	movw	r30, r24
    afc8:	75 e0       	ldi	r23, 0x05	; 5
    afca:	ee 0f       	add	r30, r30
    afcc:	ff 1f       	adc	r31, r31
    afce:	7a 95       	dec	r23
    afd0:	e1 f7       	brne	.-8      	; 0xafca <DrawCard+0x50c>
    afd2:	88 0f       	add	r24, r24
    afd4:	99 1f       	adc	r25, r25
    afd6:	e8 1b       	sub	r30, r24
    afd8:	f9 0b       	sbc	r31, r25
    afda:	eb 0f       	add	r30, r27
    afdc:	f1 1d       	adc	r31, r1
    afde:	e0 5e       	subi	r30, 0xE0	; 224
    afe0:	fe 4f       	sbci	r31, 0xFE	; 254
    afe2:	25 5a       	subi	r18, 0xA5	; 165
    afe4:	20 83       	st	Z, r18
    afe6:	2b 55       	subi	r18, 0x5B	; 91
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    afe8:	ae 31       	cpi	r26, 0x1E	; 30
    afea:	a8 f4       	brcc	.+42     	; 0xb016 <DrawCard+0x558>
    afec:	3a 31       	cpi	r19, 0x1A	; 26
    afee:	98 f4       	brcc	.+38     	; 0xb016 <DrawCard+0x558>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    aff0:	83 2f       	mov	r24, r19
    aff2:	90 e0       	ldi	r25, 0x00	; 0
    aff4:	fc 01       	movw	r30, r24
    aff6:	55 e0       	ldi	r21, 0x05	; 5
    aff8:	ee 0f       	add	r30, r30
    affa:	ff 1f       	adc	r31, r31
    affc:	5a 95       	dec	r21
    affe:	e1 f7       	brne	.-8      	; 0xaff8 <DrawCard+0x53a>
    b000:	88 0f       	add	r24, r24
    b002:	99 1f       	adc	r25, r25
    b004:	e8 1b       	sub	r30, r24
    b006:	f9 0b       	sbc	r31, r25
    b008:	ea 0f       	add	r30, r26
    b00a:	f1 1d       	adc	r31, r1
    b00c:	e0 5e       	subi	r30, 0xE0	; 224
    b00e:	fe 4f       	sbci	r31, 0xFE	; 254
    b010:	24 5a       	subi	r18, 0xA4	; 164
    b012:	20 83       	st	Z, r18
    b014:	2c 55       	subi	r18, 0x5C	; 92
			SetTileClipped(x+2,y+2,GFX_SUIT_BIG_START+1+suitoff);
			SetTileClipped(x+1,y+3,GFX_SUIT_BIG_START+2+suitoff);
    b016:	61 2f       	mov	r22, r17
    b018:	6d 5f       	subi	r22, 0xFD	; 253
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b01a:	be 31       	cpi	r27, 0x1E	; 30
    b01c:	a8 f4       	brcc	.+42     	; 0xb048 <DrawCard+0x58a>
    b01e:	6a 31       	cpi	r22, 0x1A	; 26
    b020:	98 f4       	brcc	.+38     	; 0xb048 <DrawCard+0x58a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b022:	86 2f       	mov	r24, r22
    b024:	90 e0       	ldi	r25, 0x00	; 0
    b026:	fc 01       	movw	r30, r24
    b028:	35 e0       	ldi	r19, 0x05	; 5
    b02a:	ee 0f       	add	r30, r30
    b02c:	ff 1f       	adc	r31, r31
    b02e:	3a 95       	dec	r19
    b030:	e1 f7       	brne	.-8      	; 0xb02a <DrawCard+0x56c>
    b032:	88 0f       	add	r24, r24
    b034:	99 1f       	adc	r25, r25
    b036:	e8 1b       	sub	r30, r24
    b038:	f9 0b       	sbc	r31, r25
    b03a:	eb 0f       	add	r30, r27
    b03c:	f1 1d       	adc	r31, r1
    b03e:	e0 5e       	subi	r30, 0xE0	; 224
    b040:	fe 4f       	sbci	r31, 0xFE	; 254
    b042:	23 5a       	subi	r18, 0xA3	; 163
    b044:	20 83       	st	Z, r18
    b046:	2d 55       	subi	r18, 0x5D	; 93
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b048:	ae 31       	cpi	r26, 0x1E	; 30
    b04a:	08 f0       	brcs	.+2      	; 0xb04e <DrawCard+0x590>
    b04c:	4d c1       	rjmp	.+666    	; 0xb2e8 <DrawCard+0x82a>
    b04e:	6a 31       	cpi	r22, 0x1A	; 26
    b050:	08 f0       	brcs	.+2      	; 0xb054 <DrawCard+0x596>
    b052:	4a c1       	rjmp	.+660    	; 0xb2e8 <DrawCard+0x82a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b054:	86 2f       	mov	r24, r22
    b056:	90 e0       	ldi	r25, 0x00	; 0
    b058:	fc 01       	movw	r30, r24
    b05a:	65 e0       	ldi	r22, 0x05	; 5
    b05c:	ee 0f       	add	r30, r30
    b05e:	ff 1f       	adc	r31, r31
    b060:	6a 95       	dec	r22
    b062:	e1 f7       	brne	.-8      	; 0xb05c <DrawCard+0x59e>
    b064:	88 0f       	add	r24, r24
    b066:	99 1f       	adc	r25, r25
    b068:	e8 1b       	sub	r30, r24
    b06a:	f9 0b       	sbc	r31, r25
    b06c:	ea 0f       	add	r30, r26
    b06e:	f1 1d       	adc	r31, r1
    b070:	e0 5e       	subi	r30, 0xE0	; 224
    b072:	fe 4f       	sbci	r31, 0xFE	; 254
    b074:	22 5a       	subi	r18, 0xA2	; 162
    b076:	37 c1       	rjmp	.+622    	; 0xb2e6 <DrawCard+0x828>
			SetTileClipped(x+2,y+3,GFX_SUIT_BIG_START+3+suitoff);
		}
	}else{//facedown
		uint8_t fdt = (card_set*9);
    b078:	90 91 f6 09 	lds	r25, 0x09F6
    b07c:	89 e0       	ldi	r24, 0x09	; 9
    b07e:	98 9f       	mul	r25, r24
    b080:	20 2d       	mov	r18, r0
    b082:	11 24       	eor	r1, r1
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b084:	0e 31       	cpi	r16, 0x1E	; 30
    b086:	a8 f4       	brcc	.+42     	; 0xb0b2 <DrawCard+0x5f4>
    b088:	1a 31       	cpi	r17, 0x1A	; 26
    b08a:	98 f4       	brcc	.+38     	; 0xb0b2 <DrawCard+0x5f4>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b08c:	81 2f       	mov	r24, r17
    b08e:	90 e0       	ldi	r25, 0x00	; 0
    b090:	fc 01       	movw	r30, r24
    b092:	45 e0       	ldi	r20, 0x05	; 5
    b094:	ee 0f       	add	r30, r30
    b096:	ff 1f       	adc	r31, r31
    b098:	4a 95       	dec	r20
    b09a:	e1 f7       	brne	.-8      	; 0xb094 <DrawCard+0x5d6>
    b09c:	88 0f       	add	r24, r24
    b09e:	99 1f       	adc	r25, r25
    b0a0:	e8 1b       	sub	r30, r24
    b0a2:	f9 0b       	sbc	r31, r25
    b0a4:	e0 0f       	add	r30, r16
    b0a6:	f1 1d       	adc	r31, r1
    b0a8:	e0 5e       	subi	r30, 0xE0	; 224
    b0aa:	fe 4f       	sbci	r31, 0xFE	; 254
    b0ac:	25 59       	subi	r18, 0x95	; 149
    b0ae:	20 83       	st	Z, r18
    b0b0:	2b 56       	subi	r18, 0x6B	; 107
		SetTileClipped(x+0,y+0,GFX_CARD_FACEDOWN_START+0+fdt);
		SetTileClipped(x+1,y+0,GFX_CARD_FACEDOWN_START+1+fdt);	
    b0b2:	a0 2f       	mov	r26, r16
    b0b4:	af 5f       	subi	r26, 0xFF	; 255
    b0b6:	32 2f       	mov	r19, r18
    b0b8:	34 5a       	subi	r19, 0xA4	; 164
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b0ba:	ae 31       	cpi	r26, 0x1E	; 30
    b0bc:	a8 f4       	brcc	.+42     	; 0xb0e8 <DrawCard+0x62a>
    b0be:	1a 31       	cpi	r17, 0x1A	; 26
    b0c0:	98 f4       	brcc	.+38     	; 0xb0e8 <DrawCard+0x62a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b0c2:	81 2f       	mov	r24, r17
    b0c4:	90 e0       	ldi	r25, 0x00	; 0
    b0c6:	fc 01       	movw	r30, r24
    b0c8:	b5 e0       	ldi	r27, 0x05	; 5
    b0ca:	ee 0f       	add	r30, r30
    b0cc:	ff 1f       	adc	r31, r31
    b0ce:	ba 95       	dec	r27
    b0d0:	e1 f7       	brne	.-8      	; 0xb0ca <DrawCard+0x60c>
    b0d2:	88 0f       	add	r24, r24
    b0d4:	99 1f       	adc	r25, r25
    b0d6:	e8 1b       	sub	r30, r24
    b0d8:	f9 0b       	sbc	r31, r25
    b0da:	ea 0f       	add	r30, r26
    b0dc:	f1 1d       	adc	r31, r1
    b0de:	e0 5e       	subi	r30, 0xE0	; 224
    b0e0:	fe 4f       	sbci	r31, 0xFE	; 254
    b0e2:	24 59       	subi	r18, 0x94	; 148
    b0e4:	20 83       	st	Z, r18
    b0e6:	2c 56       	subi	r18, 0x6C	; 108
		SetTileClipped(x+2,y+0,GFX_CARD_FACEDOWN_START+1+fdt);	
    b0e8:	70 2f       	mov	r23, r16
    b0ea:	7e 5f       	subi	r23, 0xFE	; 254
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b0ec:	7e 31       	cpi	r23, 0x1E	; 30
    b0ee:	a0 f4       	brcc	.+40     	; 0xb118 <DrawCard+0x65a>
    b0f0:	1a 31       	cpi	r17, 0x1A	; 26
    b0f2:	90 f4       	brcc	.+36     	; 0xb118 <DrawCard+0x65a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b0f4:	81 2f       	mov	r24, r17
    b0f6:	90 e0       	ldi	r25, 0x00	; 0
    b0f8:	fc 01       	movw	r30, r24
    b0fa:	65 e0       	ldi	r22, 0x05	; 5
    b0fc:	ee 0f       	add	r30, r30
    b0fe:	ff 1f       	adc	r31, r31
    b100:	6a 95       	dec	r22
    b102:	e1 f7       	brne	.-8      	; 0xb0fc <DrawCard+0x63e>
    b104:	88 0f       	add	r24, r24
    b106:	99 1f       	adc	r25, r25
    b108:	e8 1b       	sub	r30, r24
    b10a:	f9 0b       	sbc	r31, r25
    b10c:	e7 0f       	add	r30, r23
    b10e:	f1 1d       	adc	r31, r1
    b110:	e0 5e       	subi	r30, 0xE0	; 224
    b112:	fe 4f       	sbci	r31, 0xFE	; 254
    b114:	30 5f       	subi	r19, 0xF0	; 240
    b116:	30 83       	st	Z, r19
		SetTileClipped(x+3,y+0,GFX_CARD_FACEDOWN_START+2+fdt);	
    b118:	50 2f       	mov	r21, r16
    b11a:	5d 5f       	subi	r21, 0xFD	; 253
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b11c:	5e 31       	cpi	r21, 0x1E	; 30
    b11e:	a8 f4       	brcc	.+42     	; 0xb14a <DrawCard+0x68c>
    b120:	1a 31       	cpi	r17, 0x1A	; 26
    b122:	98 f4       	brcc	.+38     	; 0xb14a <DrawCard+0x68c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b124:	81 2f       	mov	r24, r17
    b126:	90 e0       	ldi	r25, 0x00	; 0
    b128:	fc 01       	movw	r30, r24
    b12a:	45 e0       	ldi	r20, 0x05	; 5
    b12c:	ee 0f       	add	r30, r30
    b12e:	ff 1f       	adc	r31, r31
    b130:	4a 95       	dec	r20
    b132:	e1 f7       	brne	.-8      	; 0xb12c <DrawCard+0x66e>
    b134:	88 0f       	add	r24, r24
    b136:	99 1f       	adc	r25, r25
    b138:	e8 1b       	sub	r30, r24
    b13a:	f9 0b       	sbc	r31, r25
    b13c:	e5 0f       	add	r30, r21
    b13e:	f1 1d       	adc	r31, r1
    b140:	e0 5e       	subi	r30, 0xE0	; 224
    b142:	fe 4f       	sbci	r31, 0xFE	; 254
    b144:	23 59       	subi	r18, 0x93	; 147
    b146:	20 83       	st	Z, r18
    b148:	2d 56       	subi	r18, 0x6D	; 109
    b14a:	31 2f       	mov	r19, r17
    b14c:	3f 5f       	subi	r19, 0xFF	; 255
    b14e:	41 e0       	ldi	r20, 0x01	; 1
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b150:	a0 2e       	mov	r10, r16
    b152:	bb 24       	eor	r11, r11
    b154:	9e e6       	ldi	r25, 0x6E	; 110
    b156:	89 2e       	mov	r8, r25
    b158:	82 0e       	add	r8, r18
    b15a:	ca 2e       	mov	r12, r26
    b15c:	dd 24       	eor	r13, r13
    b15e:	8f e6       	ldi	r24, 0x6F	; 111
    b160:	98 2e       	mov	r9, r24
    b162:	92 0e       	add	r9, r18
    b164:	e7 2e       	mov	r14, r23
    b166:	ff 24       	eor	r15, r15
    b168:	b9 2d       	mov	r27, r9
    b16a:	c5 2f       	mov	r28, r21
    b16c:	d0 e0       	ldi	r29, 0x00	; 0
    b16e:	62 2f       	mov	r22, r18
    b170:	60 59       	subi	r22, 0x90	; 144
    b172:	0e 31       	cpi	r16, 0x1E	; 30
    b174:	a0 f4       	brcc	.+40     	; 0xb19e <DrawCard+0x6e0>
    b176:	3a 31       	cpi	r19, 0x1A	; 26
    b178:	90 f4       	brcc	.+36     	; 0xb19e <DrawCard+0x6e0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b17a:	83 2f       	mov	r24, r19
    b17c:	90 e0       	ldi	r25, 0x00	; 0
    b17e:	fc 01       	movw	r30, r24
    b180:	68 94       	set
    b182:	14 f8       	bld	r1, 4
    b184:	ee 0f       	add	r30, r30
    b186:	ff 1f       	adc	r31, r31
    b188:	16 94       	lsr	r1
    b18a:	e1 f7       	brne	.-8      	; 0xb184 <DrawCard+0x6c6>
    b18c:	88 0f       	add	r24, r24
    b18e:	99 1f       	adc	r25, r25
    b190:	e8 1b       	sub	r30, r24
    b192:	f9 0b       	sbc	r31, r25
    b194:	ea 0d       	add	r30, r10
    b196:	fb 1d       	adc	r31, r11
    b198:	e0 5e       	subi	r30, 0xE0	; 224
    b19a:	fe 4f       	sbci	r31, 0xFE	; 254
    b19c:	80 82       	st	Z, r8
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b19e:	ae 31       	cpi	r26, 0x1E	; 30
    b1a0:	a0 f4       	brcc	.+40     	; 0xb1ca <DrawCard+0x70c>
    b1a2:	3a 31       	cpi	r19, 0x1A	; 26
    b1a4:	90 f4       	brcc	.+36     	; 0xb1ca <DrawCard+0x70c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b1a6:	83 2f       	mov	r24, r19
    b1a8:	90 e0       	ldi	r25, 0x00	; 0
    b1aa:	fc 01       	movw	r30, r24
    b1ac:	68 94       	set
    b1ae:	14 f8       	bld	r1, 4
    b1b0:	ee 0f       	add	r30, r30
    b1b2:	ff 1f       	adc	r31, r31
    b1b4:	16 94       	lsr	r1
    b1b6:	e1 f7       	brne	.-8      	; 0xb1b0 <DrawCard+0x6f2>
    b1b8:	88 0f       	add	r24, r24
    b1ba:	99 1f       	adc	r25, r25
    b1bc:	e8 1b       	sub	r30, r24
    b1be:	f9 0b       	sbc	r31, r25
    b1c0:	ec 0d       	add	r30, r12
    b1c2:	fd 1d       	adc	r31, r13
    b1c4:	e0 5e       	subi	r30, 0xE0	; 224
    b1c6:	fe 4f       	sbci	r31, 0xFE	; 254
    b1c8:	90 82       	st	Z, r9
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b1ca:	7e 31       	cpi	r23, 0x1E	; 30
    b1cc:	a0 f4       	brcc	.+40     	; 0xb1f6 <DrawCard+0x738>
    b1ce:	3a 31       	cpi	r19, 0x1A	; 26
    b1d0:	90 f4       	brcc	.+36     	; 0xb1f6 <DrawCard+0x738>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b1d2:	83 2f       	mov	r24, r19
    b1d4:	90 e0       	ldi	r25, 0x00	; 0
    b1d6:	fc 01       	movw	r30, r24
    b1d8:	68 94       	set
    b1da:	14 f8       	bld	r1, 4
    b1dc:	ee 0f       	add	r30, r30
    b1de:	ff 1f       	adc	r31, r31
    b1e0:	16 94       	lsr	r1
    b1e2:	e1 f7       	brne	.-8      	; 0xb1dc <DrawCard+0x71e>
    b1e4:	88 0f       	add	r24, r24
    b1e6:	99 1f       	adc	r25, r25
    b1e8:	e8 1b       	sub	r30, r24
    b1ea:	f9 0b       	sbc	r31, r25
    b1ec:	ee 0d       	add	r30, r14
    b1ee:	ff 1d       	adc	r31, r15
    b1f0:	e0 5e       	subi	r30, 0xE0	; 224
    b1f2:	fe 4f       	sbci	r31, 0xFE	; 254
    b1f4:	b0 83       	st	Z, r27
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b1f6:	5e 31       	cpi	r21, 0x1E	; 30
    b1f8:	a0 f4       	brcc	.+40     	; 0xb222 <DrawCard+0x764>
    b1fa:	3a 31       	cpi	r19, 0x1A	; 26
    b1fc:	90 f4       	brcc	.+36     	; 0xb222 <DrawCard+0x764>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b1fe:	83 2f       	mov	r24, r19
    b200:	90 e0       	ldi	r25, 0x00	; 0
    b202:	fc 01       	movw	r30, r24
    b204:	68 94       	set
    b206:	14 f8       	bld	r1, 4
    b208:	ee 0f       	add	r30, r30
    b20a:	ff 1f       	adc	r31, r31
    b20c:	16 94       	lsr	r1
    b20e:	e1 f7       	brne	.-8      	; 0xb208 <DrawCard+0x74a>
    b210:	88 0f       	add	r24, r24
    b212:	99 1f       	adc	r25, r25
    b214:	e8 1b       	sub	r30, r24
    b216:	f9 0b       	sbc	r31, r25
    b218:	ec 0f       	add	r30, r28
    b21a:	fd 1f       	adc	r31, r29
    b21c:	e0 5e       	subi	r30, 0xE0	; 224
    b21e:	fe 4f       	sbci	r31, 0xFE	; 254
    b220:	60 83       	st	Z, r22

		for(uint8_t i=1;i<5;i++){
    b222:	4f 5f       	subi	r20, 0xFF	; 255
    b224:	3f 5f       	subi	r19, 0xFF	; 255
    b226:	45 30       	cpi	r20, 0x05	; 5
    b228:	09 f0       	breq	.+2      	; 0xb22c <DrawCard+0x76e>
    b22a:	a3 cf       	rjmp	.-186    	; 0xb172 <DrawCard+0x6b4>
			SetTileClipped(x+1,y+i,GFX_CARD_FACEDOWN_START+4+fdt);	
			SetTileClipped(x+2,y+i,GFX_CARD_FACEDOWN_START+4+fdt);	
			SetTileClipped(x+3,y+i,GFX_CARD_FACEDOWN_START+5+fdt);	
		}

		SetTileClipped(x+0,y+5,GFX_CARD_FACEDOWN_START+6+fdt);
    b22c:	61 2f       	mov	r22, r17
    b22e:	6b 5f       	subi	r22, 0xFB	; 251
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b230:	0e 31       	cpi	r16, 0x1E	; 30
    b232:	a8 f4       	brcc	.+42     	; 0xb25e <DrawCard+0x7a0>
    b234:	6a 31       	cpi	r22, 0x1A	; 26
    b236:	98 f4       	brcc	.+38     	; 0xb25e <DrawCard+0x7a0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b238:	86 2f       	mov	r24, r22
    b23a:	90 e0       	ldi	r25, 0x00	; 0
    b23c:	fc 01       	movw	r30, r24
    b23e:	45 e0       	ldi	r20, 0x05	; 5
    b240:	ee 0f       	add	r30, r30
    b242:	ff 1f       	adc	r31, r31
    b244:	4a 95       	dec	r20
    b246:	e1 f7       	brne	.-8      	; 0xb240 <DrawCard+0x782>
    b248:	88 0f       	add	r24, r24
    b24a:	99 1f       	adc	r25, r25
    b24c:	e8 1b       	sub	r30, r24
    b24e:	f9 0b       	sbc	r31, r25
    b250:	e0 0f       	add	r30, r16
    b252:	f1 1d       	adc	r31, r1
    b254:	e0 5e       	subi	r30, 0xE0	; 224
    b256:	fe 4f       	sbci	r31, 0xFE	; 254
    b258:	2f 58       	subi	r18, 0x8F	; 143
    b25a:	20 83       	st	Z, r18
    b25c:	21 57       	subi	r18, 0x71	; 113
		SetTileClipped(x+1,y+5,GFX_CARD_FACEDOWN_START+7+fdt);	
    b25e:	32 2f       	mov	r19, r18
    b260:	3e 59       	subi	r19, 0x9E	; 158
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b262:	ae 31       	cpi	r26, 0x1E	; 30
    b264:	a8 f4       	brcc	.+42     	; 0xb290 <DrawCard+0x7d2>
    b266:	6a 31       	cpi	r22, 0x1A	; 26
    b268:	98 f4       	brcc	.+38     	; 0xb290 <DrawCard+0x7d2>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b26a:	86 2f       	mov	r24, r22
    b26c:	90 e0       	ldi	r25, 0x00	; 0
    b26e:	fc 01       	movw	r30, r24
    b270:	b5 e0       	ldi	r27, 0x05	; 5
    b272:	ee 0f       	add	r30, r30
    b274:	ff 1f       	adc	r31, r31
    b276:	ba 95       	dec	r27
    b278:	e1 f7       	brne	.-8      	; 0xb272 <DrawCard+0x7b4>
    b27a:	88 0f       	add	r24, r24
    b27c:	99 1f       	adc	r25, r25
    b27e:	e8 1b       	sub	r30, r24
    b280:	f9 0b       	sbc	r31, r25
    b282:	ea 0f       	add	r30, r26
    b284:	f1 1d       	adc	r31, r1
    b286:	e0 5e       	subi	r30, 0xE0	; 224
    b288:	fe 4f       	sbci	r31, 0xFE	; 254
    b28a:	2e 58       	subi	r18, 0x8E	; 142
    b28c:	20 83       	st	Z, r18
    b28e:	22 57       	subi	r18, 0x72	; 114
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b290:	7e 31       	cpi	r23, 0x1E	; 30
    b292:	a0 f4       	brcc	.+40     	; 0xb2bc <DrawCard+0x7fe>
    b294:	6a 31       	cpi	r22, 0x1A	; 26
    b296:	90 f4       	brcc	.+36     	; 0xb2bc <DrawCard+0x7fe>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b298:	86 2f       	mov	r24, r22
    b29a:	90 e0       	ldi	r25, 0x00	; 0
    b29c:	fc 01       	movw	r30, r24
    b29e:	b5 e0       	ldi	r27, 0x05	; 5
    b2a0:	ee 0f       	add	r30, r30
    b2a2:	ff 1f       	adc	r31, r31
    b2a4:	ba 95       	dec	r27
    b2a6:	e1 f7       	brne	.-8      	; 0xb2a0 <DrawCard+0x7e2>
    b2a8:	88 0f       	add	r24, r24
    b2aa:	99 1f       	adc	r25, r25
    b2ac:	e8 1b       	sub	r30, r24
    b2ae:	f9 0b       	sbc	r31, r25
    b2b0:	e7 0f       	add	r30, r23
    b2b2:	f1 1d       	adc	r31, r1
    b2b4:	e0 5e       	subi	r30, 0xE0	; 224
    b2b6:	fe 4f       	sbci	r31, 0xFE	; 254
    b2b8:	30 5f       	subi	r19, 0xF0	; 240
    b2ba:	30 83       	st	Z, r19
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    b2bc:	5e 31       	cpi	r21, 0x1E	; 30
    b2be:	a0 f4       	brcc	.+40     	; 0xb2e8 <DrawCard+0x82a>
    b2c0:	6a 31       	cpi	r22, 0x1A	; 26
    b2c2:	90 f4       	brcc	.+36     	; 0xb2e8 <DrawCard+0x82a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    b2c4:	86 2f       	mov	r24, r22
    b2c6:	90 e0       	ldi	r25, 0x00	; 0
    b2c8:	fc 01       	movw	r30, r24
    b2ca:	75 e0       	ldi	r23, 0x05	; 5
    b2cc:	ee 0f       	add	r30, r30
    b2ce:	ff 1f       	adc	r31, r31
    b2d0:	7a 95       	dec	r23
    b2d2:	e1 f7       	brne	.-8      	; 0xb2cc <DrawCard+0x80e>
    b2d4:	88 0f       	add	r24, r24
    b2d6:	99 1f       	adc	r25, r25
    b2d8:	e8 1b       	sub	r30, r24
    b2da:	f9 0b       	sbc	r31, r25
    b2dc:	e5 0f       	add	r30, r21
    b2de:	f1 1d       	adc	r31, r1
    b2e0:	e0 5e       	subi	r30, 0xE0	; 224
    b2e2:	fe 4f       	sbci	r31, 0xFE	; 254
    b2e4:	2d 58       	subi	r18, 0x8D	; 141
    b2e6:	20 83       	st	Z, r18
		SetTileClipped(x+2,y+5,GFX_CARD_FACEDOWN_START+7+fdt);	
		SetTileClipped(x+3,y+5,GFX_CARD_FACEDOWN_START+8+fdt);

	}
}
    b2e8:	cd b7       	in	r28, 0x3d	; 61
    b2ea:	de b7       	in	r29, 0x3e	; 62
    b2ec:	ed e0       	ldi	r30, 0x0D	; 13
    b2ee:	0c 94 aa 75 	jmp	0xeb54	; 0xeb54 <__epilogue_restores__+0xa>

0000b2f2 <DrawCursor>:
		}else{//a stack that is totally vertical. only the top card is shown, an no partial cards
			DrawCard(stacks[s].x,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
		}
}

void DrawCursor(){
    b2f2:	ff 92       	push	r15
    b2f4:	0f 93       	push	r16
    b2f6:	1f 93       	push	r17
    b2f8:	cf 93       	push	r28
    b2fa:	df 93       	push	r29
    b2fc:	ec e2       	ldi	r30, 0x2C	; 44
    b2fe:	f4 e0       	ldi	r31, 0x04	; 4
//return;
	uint8_t soff = 0;
	for(uint8_t i=0;i<9;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    b300:	80 ef       	ldi	r24, 0xF0	; 240
    b302:	80 83       	st	Z, r24
    b304:	34 96       	adiw	r30, 0x04	; 4
}

void DrawCursor(){
//return;
	uint8_t soff = 0;
	for(uint8_t i=0;i<9;i++)
    b306:	94 e0       	ldi	r25, 0x04	; 4
    b308:	e0 35       	cpi	r30, 0x50	; 80
    b30a:	f9 07       	cpc	r31, r25
    b30c:	d1 f7       	brne	.-12     	; 0xb302 <DrawCursor+0x10>
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;

	if(cursorx == SCREEN_TILES_H*TILE_WIDTH)
    b30e:	00 91 ff 09 	lds	r16, 0x09FF
    b312:	00 3f       	cpi	r16, 0xF0	; 240
    b314:	a9 f1       	breq	.+106    	; 0xb380 <DrawCursor+0x8e>
		return;
	for(uint8_t y=0;y<3;y++){
		if(cursory+(y*8) < (SCREEN_TILES_V*TILE_HEIGHT)-1){
    b316:	10 91 07 0a 	lds	r17, 0x0A07
		for(uint8_t x=0;x<3;x++){
			sprites[soff].x = cursorx+(x*8);
			sprites[soff].y = cursory+(y*8);
			sprites[soff].tileIndex = (cursorframe*9)+soff;
    b31a:	90 91 08 0a 	lds	r25, 0x0A08
    b31e:	89 e0       	ldi	r24, 0x09	; 9
    b320:	98 9f       	mul	r25, r24
    b322:	f0 2c       	mov	r15, r0
    b324:	11 24       	eor	r1, r1
    b326:	60 e0       	ldi	r22, 0x00	; 0
    b328:	20 e0       	ldi	r18, 0x00	; 0
    b32a:	30 e0       	ldi	r19, 0x00	; 0
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;

	if(cursorx == SCREEN_TILES_H*TILE_WIDTH)
		return;
	for(uint8_t y=0;y<3;y++){
		if(cursory+(y*8) < (SCREEN_TILES_V*TILE_HEIGHT)-1){
    b32c:	c1 2f       	mov	r28, r17
    b32e:	d0 e0       	ldi	r29, 0x00	; 0
    b330:	c9 01       	movw	r24, r18
    b332:	8c 0f       	add	r24, r28
    b334:	9d 1f       	adc	r25, r29
    b336:	8f 3c       	cpi	r24, 0xCF	; 207
    b338:	91 05       	cpc	r25, r1
    b33a:	ec f4       	brge	.+58     	; 0xb376 <DrawCursor+0x84>
    b33c:	56 2f       	mov	r21, r22
    b33e:	5f 0d       	add	r21, r15
    b340:	46 2f       	mov	r20, r22
    b342:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x=0;x<3;x++){
			sprites[soff].x = cursorx+(x*8);
			sprites[soff].y = cursory+(y*8);
    b344:	71 2f       	mov	r23, r17
    b346:	72 0f       	add	r23, r18
	if(cursorx == SCREEN_TILES_H*TILE_WIDTH)
		return;
	for(uint8_t y=0;y<3;y++){
		if(cursory+(y*8) < (SCREEN_TILES_V*TILE_HEIGHT)-1){
		for(uint8_t x=0;x<3;x++){
			sprites[soff].x = cursorx+(x*8);
    b348:	e4 2f       	mov	r30, r20
    b34a:	f0 e0       	ldi	r31, 0x00	; 0
    b34c:	ee 0f       	add	r30, r30
    b34e:	ff 1f       	adc	r31, r31
    b350:	ee 0f       	add	r30, r30
    b352:	ff 1f       	adc	r31, r31
    b354:	df 01       	movw	r26, r30
    b356:	a4 5d       	subi	r26, 0xD4	; 212
    b358:	bb 4f       	sbci	r27, 0xFB	; 251
    b35a:	89 2f       	mov	r24, r25
    b35c:	80 0f       	add	r24, r16
    b35e:	8c 93       	st	X, r24
			sprites[soff].y = cursory+(y*8);
    b360:	11 96       	adiw	r26, 0x01	; 1
    b362:	7c 93       	st	X, r23
			sprites[soff].tileIndex = (cursorframe*9)+soff;
    b364:	e2 5d       	subi	r30, 0xD2	; 210
    b366:	fb 4f       	sbci	r31, 0xFB	; 251
    b368:	50 83       	st	Z, r21
			soff++;
    b36a:	4f 5f       	subi	r20, 0xFF	; 255
    b36c:	98 5f       	subi	r25, 0xF8	; 248
    b36e:	5f 5f       	subi	r21, 0xFF	; 255

	if(cursorx == SCREEN_TILES_H*TILE_WIDTH)
		return;
	for(uint8_t y=0;y<3;y++){
		if(cursory+(y*8) < (SCREEN_TILES_V*TILE_HEIGHT)-1){
		for(uint8_t x=0;x<3;x++){
    b370:	98 31       	cpi	r25, 0x18	; 24
    b372:	51 f7       	brne	.-44     	; 0xb348 <DrawCursor+0x56>
    b374:	6d 5f       	subi	r22, 0xFD	; 253
    b376:	28 5f       	subi	r18, 0xF8	; 248
    b378:	3f 4f       	sbci	r19, 0xFF	; 255
	for(uint8_t i=0;i<9;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;

	if(cursorx == SCREEN_TILES_H*TILE_WIDTH)
		return;
	for(uint8_t y=0;y<3;y++){
    b37a:	28 31       	cpi	r18, 0x18	; 24
    b37c:	31 05       	cpc	r19, r1
    b37e:	c1 f6       	brne	.-80     	; 0xb330 <DrawCursor+0x3e>
			sprites[soff].tileIndex = (cursorframe*9)+soff;
			soff++;
		}
		}
	}
}
    b380:	cd b7       	in	r28, 0x3d	; 61
    b382:	de b7       	in	r29, 0x3e	; 62
    b384:	e5 e0       	ldi	r30, 0x05	; 5
    b386:	0c 94 b2 75 	jmp	0xeb64	; 0xeb64 <__epilogue_restores__+0x1a>

0000b38a <TransferStack>:



void TransferStack(uint8_t src_stack, uint8_t src_start, uint8_t dst_stack, uint8_t dst_start){
    b38a:	a0 e0       	ldi	r26, 0x00	; 0
    b38c:	b0 e0       	ldi	r27, 0x00	; 0
    b38e:	eb ec       	ldi	r30, 0xCB	; 203
    b390:	f9 e5       	ldi	r31, 0x59	; 89
    b392:	0c 94 92 75 	jmp	0xeb24	; 0xeb24 <__prologue_saves__+0x12>
    b396:	d6 2e       	mov	r13, r22
    b398:	c2 2e       	mov	r12, r18
	uint8_t transferlimit = stacks[src_stack].numcards;
    b39a:	90 e0       	ldi	r25, 0x00	; 0
    b39c:	6c e1       	ldi	r22, 0x1C	; 28
    b39e:	70 e0       	ldi	r23, 0x00	; 0
    b3a0:	86 9f       	mul	r24, r22
    b3a2:	f0 01       	movw	r30, r0
    b3a4:	87 9f       	mul	r24, r23
    b3a6:	f0 0d       	add	r31, r0
    b3a8:	96 9f       	mul	r25, r22
    b3aa:	f0 0d       	add	r31, r0
    b3ac:	11 24       	eor	r1, r1
    b3ae:	ee 0f       	add	r30, r30
    b3b0:	ff 1f       	adc	r31, r31
    b3b2:	ed 58       	subi	r30, 0x8D	; 141
    b3b4:	f5 4f       	sbci	r31, 0xF5	; 245
    b3b6:	b0 80       	ld	r11, Z
	for(uint8_t i=src_start;i<transferlimit;i++){
		stacks[dst_stack].cards[dst_start++] = stacks[src_stack].cards[src_start++];
    b3b8:	50 e0       	ldi	r21, 0x00	; 0
    b3ba:	28 e3       	ldi	r18, 0x38	; 56
    b3bc:	30 e0       	ldi	r19, 0x00	; 0
    b3be:	42 9f       	mul	r20, r18
    b3c0:	70 01       	movw	r14, r0
    b3c2:	43 9f       	mul	r20, r19
    b3c4:	f0 0c       	add	r15, r0
    b3c6:	52 9f       	mul	r21, r18
    b3c8:	f0 0c       	add	r15, r0
    b3ca:	11 24       	eor	r1, r1
    b3cc:	a1 e7       	ldi	r26, 0x71	; 113
    b3ce:	ba e0       	ldi	r27, 0x0A	; 10
    b3d0:	ea 0e       	add	r14, r26
    b3d2:	fb 1e       	adc	r15, r27
    b3d4:	82 9f       	mul	r24, r18
    b3d6:	80 01       	movw	r16, r0
    b3d8:	83 9f       	mul	r24, r19
    b3da:	10 0d       	add	r17, r0
    b3dc:	92 9f       	mul	r25, r18
    b3de:	10 0d       	add	r17, r0
    b3e0:	11 24       	eor	r1, r1
    b3e2:	0a 0f       	add	r16, r26
    b3e4:	1b 1f       	adc	r17, r27
		stacks[src_stack].numcards--;
    b3e6:	9f 01       	movw	r18, r30
		stacks[dst_stack].numcards++;
    b3e8:	46 9f       	mul	r20, r22
    b3ea:	e0 01       	movw	r28, r0
    b3ec:	47 9f       	mul	r20, r23
    b3ee:	d0 0d       	add	r29, r0
    b3f0:	56 9f       	mul	r21, r22
    b3f2:	d0 0d       	add	r29, r0
    b3f4:	11 24       	eor	r1, r1
    b3f6:	cc 0f       	add	r28, r28
    b3f8:	dd 1f       	adc	r29, r29
    b3fa:	cd 58       	subi	r28, 0x8D	; 141
    b3fc:	d5 4f       	sbci	r29, 0xF5	; 245
    b3fe:	12 c0       	rjmp	.+36     	; 0xb424 <TransferStack+0x9a>


void TransferStack(uint8_t src_stack, uint8_t src_start, uint8_t dst_stack, uint8_t dst_start){
	uint8_t transferlimit = stacks[src_stack].numcards;
	for(uint8_t i=src_start;i<transferlimit;i++){
		stacks[dst_stack].cards[dst_start++] = stacks[src_stack].cards[src_start++];
    b400:	d7 01       	movw	r26, r14
    b402:	ac 0d       	add	r26, r12
    b404:	b1 1d       	adc	r27, r1
    b406:	f8 01       	movw	r30, r16
    b408:	ed 0d       	add	r30, r13
    b40a:	f1 1d       	adc	r31, r1
    b40c:	84 81       	ldd	r24, Z+4	; 0x04
    b40e:	14 96       	adiw	r26, 0x04	; 4
    b410:	8c 93       	st	X, r24
    b412:	c3 94       	inc	r12
    b414:	d3 94       	inc	r13
		stacks[src_stack].numcards--;
    b416:	f9 01       	movw	r30, r18
    b418:	80 81       	ld	r24, Z
    b41a:	81 50       	subi	r24, 0x01	; 1
    b41c:	80 83       	st	Z, r24
		stacks[dst_stack].numcards++;
    b41e:	88 81       	ld	r24, Y
    b420:	8f 5f       	subi	r24, 0xFF	; 255
    b422:	88 83       	st	Y, r24



void TransferStack(uint8_t src_stack, uint8_t src_start, uint8_t dst_stack, uint8_t dst_start){
	uint8_t transferlimit = stacks[src_stack].numcards;
	for(uint8_t i=src_start;i<transferlimit;i++){
    b424:	db 14       	cp	r13, r11
    b426:	60 f3       	brcs	.-40     	; 0xb400 <TransferStack+0x76>
		stacks[dst_stack].cards[dst_start++] = stacks[src_stack].cards[src_start++];
		stacks[src_stack].numcards--;
		stacks[dst_stack].numcards++;
	}

}
    b428:	cd b7       	in	r28, 0x3d	; 61
    b42a:	de b7       	in	r29, 0x3e	; 62
    b42c:	e9 e0       	ldi	r30, 0x09	; 9
    b42e:	0c 94 ae 75 	jmp	0xeb5c	; 0xeb5c <__epilogue_restores__+0x12>

0000b432 <CursorIntersects>:
		stacks[0].cards[td] = tt;
	}
}

uint8_t CursorIntersects(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
	if(cursorx+10 < x || cursorx+6 > x+w || cursory+6 < y || cursory > y+h)
    b432:	90 91 ff 09 	lds	r25, 0x09FF
    b436:	a9 2f       	mov	r26, r25
    b438:	b0 e0       	ldi	r27, 0x00	; 0
    b43a:	e8 2f       	mov	r30, r24
    b43c:	f0 e0       	ldi	r31, 0x00	; 0
    b43e:	cd 01       	movw	r24, r26
    b440:	0a 96       	adiw	r24, 0x0a	; 10
    b442:	8e 17       	cp	r24, r30
    b444:	9f 07       	cpc	r25, r31
    b446:	c4 f0       	brlt	.+48     	; 0xb478 <CursorIntersects+0x46>
    b448:	15 96       	adiw	r26, 0x05	; 5
    b44a:	e4 0f       	add	r30, r20
    b44c:	f1 1d       	adc	r31, r1
    b44e:	ae 17       	cp	r26, r30
    b450:	bf 07       	cpc	r27, r31
    b452:	94 f4       	brge	.+36     	; 0xb478 <CursorIntersects+0x46>
    b454:	80 91 07 0a 	lds	r24, 0x0A07
    b458:	48 2f       	mov	r20, r24
    b45a:	50 e0       	ldi	r21, 0x00	; 0
    b45c:	70 e0       	ldi	r23, 0x00	; 0
    b45e:	ca 01       	movw	r24, r20
    b460:	06 96       	adiw	r24, 0x06	; 6
    b462:	86 17       	cp	r24, r22
    b464:	97 07       	cpc	r25, r23
    b466:	44 f0       	brlt	.+16     	; 0xb478 <CursorIntersects+0x46>
    b468:	80 e0       	ldi	r24, 0x00	; 0
    b46a:	62 0f       	add	r22, r18
    b46c:	71 1d       	adc	r23, r1
    b46e:	64 17       	cp	r22, r20
    b470:	75 07       	cpc	r23, r21
    b472:	1c f0       	brlt	.+6      	; 0xb47a <CursorIntersects+0x48>
    b474:	81 e0       	ldi	r24, 0x01	; 1
    b476:	08 95       	ret
    b478:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	return 1;
}
    b47a:	08 95       	ret

0000b47c <GrabStack>:
	}
	game_state ^= CARD_FLOATING;
}


uint8_t GrabStack(bool selectempty){
    b47c:	0f 93       	push	r16
    b47e:	1f 93       	push	r17
    b480:	cf 93       	push	r28
    b482:	df 93       	push	r29
    b484:	08 2f       	mov	r16, r24
    b486:	c1 e7       	ldi	r28, 0x71	; 113
    b488:	da e0       	ldi	r29, 0x0A	; 10
    b48a:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t grabbed_stack=255, grabbed_offset=0;
	bool grabbed = false;;
	for(uint8_t i=STACK_DECK;i<=STACK_BASE6;i++){//check cursor position against all stacks(except deck which we cant grab and held stack which is right now NULL)
		uint8_t stack_width, stack_height;
		if(!selectempty && !stacks[i].numcards)//we can't grab a stack with no cards, unless overriden
    b48c:	00 23       	and	r16, r16
    b48e:	19 f4       	brne	.+6      	; 0xb496 <GrabStack+0x1a>
    b490:	8a 81       	ldd	r24, Y+2	; 0x02
    b492:	88 23       	and	r24, r24
    b494:	c1 f1       	breq	.+112    	; 0xb506 <GrabStack+0x8a>
			continue;
		if(stacks[i].display & HORIZONTAL){//we are pulling from the draw stack next to the deck. we can only grab the right most card
    b496:	8b 81       	ldd	r24, Y+3	; 0x03
    b498:	81 ff       	sbrs	r24, 1
    b49a:	16 c0       	rjmp	.+44     	; 0xb4c8 <GrabStack+0x4c>
			stack_width = CARD_WIDTH+(stacks[i].numcards>1?1:0)+(stacks[i].numcards>2?1:0);
    b49c:	2a 81       	ldd	r18, Y+2	; 0x02
    b49e:	22 30       	cpi	r18, 0x02	; 2
    b4a0:	10 f4       	brcc	.+4      	; 0xb4a6 <GrabStack+0x2a>
    b4a2:	40 e2       	ldi	r20, 0x20	; 32
    b4a4:	01 c0       	rjmp	.+2      	; 0xb4a8 <GrabStack+0x2c>
    b4a6:	41 e2       	ldi	r20, 0x21	; 33
			stack_height = CARD_HEIGHT;

			if(CursorIntersects(stacks[i].x<<3,stacks[i].y<<3,stack_width,stack_height)){
    b4a8:	88 81       	ld	r24, Y
    b4aa:	88 0f       	add	r24, r24
    b4ac:	88 0f       	add	r24, r24
    b4ae:	88 0f       	add	r24, r24
    b4b0:	69 81       	ldd	r22, Y+1	; 0x01
    b4b2:	66 0f       	add	r22, r22
    b4b4:	66 0f       	add	r22, r22
    b4b6:	66 0f       	add	r22, r22
    b4b8:	90 e0       	ldi	r25, 0x00	; 0
    b4ba:	23 30       	cpi	r18, 0x03	; 3
    b4bc:	08 f0       	brcs	.+2      	; 0xb4c0 <GrabStack+0x44>
    b4be:	91 e0       	ldi	r25, 0x01	; 1
    b4c0:	49 0f       	add	r20, r25
    b4c2:	20 e3       	ldi	r18, 0x30	; 48
    b4c4:	b6 df       	rcall	.-148    	; 0xb432 <CursorIntersects>
    b4c6:	1d c0       	rjmp	.+58     	; 0xb502 <GrabStack+0x86>
    b4c8:	98 81       	ld	r25, Y
    b4ca:	69 81       	ldd	r22, Y+1	; 0x01
				grabbed_stack = i;
				grabbed_offset = stacks[i].numcards-1;
				break;
			}

		}else if(stacks[i].display & STACKED){//we are pulling from 1 of the 4 home stacks
    b4cc:	83 ff       	sbrs	r24, 3
    b4ce:	0b c0       	rjmp	.+22     	; 0xb4e6 <GrabStack+0x6a>
			stack_width = CARD_WIDTH;
			stack_height = CARD_HEIGHT;

			if(CursorIntersects(stacks[i].x<<3,stacks[i].y<<3,stack_width,stack_height)){
    b4d0:	66 0f       	add	r22, r22
    b4d2:	66 0f       	add	r22, r22
    b4d4:	66 0f       	add	r22, r22
    b4d6:	89 2f       	mov	r24, r25
    b4d8:	88 0f       	add	r24, r24
    b4da:	88 0f       	add	r24, r24
    b4dc:	88 0f       	add	r24, r24
    b4de:	40 e2       	ldi	r20, 0x20	; 32
    b4e0:	20 e3       	ldi	r18, 0x30	; 48
    b4e2:	a7 df       	rcall	.-178    	; 0xb432 <CursorIntersects>
    b4e4:	0e c0       	rjmp	.+28     	; 0xb502 <GrabStack+0x86>
			}
		}else{//we are pulling from one of the 7 foundation stacks
			stack_width = CARD_WIDTH;
			stack_height = ((stacks[i].numcards-2)<<3)+CARD_HEIGHT;

			if(CursorIntersects(stacks[i].x<<3,stacks[i].y<<3,stack_width,stack_height)){
    b4e6:	66 0f       	add	r22, r22
    b4e8:	66 0f       	add	r22, r22
    b4ea:	66 0f       	add	r22, r22
    b4ec:	2a 81       	ldd	r18, Y+2	; 0x02
    b4ee:	22 0f       	add	r18, r18
    b4f0:	22 0f       	add	r18, r18
    b4f2:	22 0f       	add	r18, r18
    b4f4:	20 5e       	subi	r18, 0xE0	; 224
    b4f6:	89 2f       	mov	r24, r25
    b4f8:	88 0f       	add	r24, r24
    b4fa:	88 0f       	add	r24, r24
    b4fc:	88 0f       	add	r24, r24
    b4fe:	40 e2       	ldi	r20, 0x20	; 32
    b500:	98 df       	rcall	.-208    	; 0xb432 <CursorIntersects>
    b502:	88 23       	and	r24, r24
    b504:	39 f4       	brne	.+14     	; 0xb514 <GrabStack+0x98>


uint8_t GrabStack(bool selectempty){
	uint8_t grabbed_stack=255, grabbed_offset=0;
	bool grabbed = false;;
	for(uint8_t i=STACK_DECK;i<=STACK_BASE6;i++){//check cursor position against all stacks(except deck which we cant grab and held stack which is right now NULL)
    b506:	1f 5f       	subi	r17, 0xFF	; 255
    b508:	e8 96       	adiw	r28, 0x38	; 56
    b50a:	1d 30       	cpi	r17, 0x0D	; 13
    b50c:	09 f0       	breq	.+2      	; 0xb510 <GrabStack+0x94>
    b50e:	be cf       	rjmp	.-132    	; 0xb48c <GrabStack+0x10>
    b510:	8f ef       	ldi	r24, 0xFF	; 255
    b512:	01 c0       	rjmp	.+2      	; 0xb516 <GrabStack+0x9a>
    b514:	81 2f       	mov	r24, r17
//SPrintNum(5,SCREEN_TILES_V-1,grabbed_stack,1);
	if(!grabbed)
		return 255;

	return grabbed_stack;
}
    b516:	df 91       	pop	r29
    b518:	cf 91       	pop	r28
    b51a:	1f 91       	pop	r17
    b51c:	0f 91       	pop	r16
    b51e:	08 95       	ret

0000b520 <CanGoOnStack>:


uint8_t CanGoOnStack(uint8_t s){//the source is implied to be STACK_HELD
    b520:	48 2f       	mov	r20, r24
//SPrintNum(24,23,s,1);
//SPrintNum(24,24,stacks[STACK_HELD].cards[0],1);
	
	if(s == STACK_DECK || s == STACK_DRAW)//can't place it on the deck or draw pile...
    b522:	82 30       	cpi	r24, 0x02	; 2
    b524:	08 f4       	brcc	.+2      	; 0xb528 <CanGoOnStack+0x8>
    b526:	72 c0       	rjmp	.+228    	; 0xb60c <CanGoOnStack+0xec>
		return 0;

	uint8_t cs,cd;
	cs = stacks[STACK_HELD].cards[0] & 63;//eliminate FACEUP
    b528:	50 91 4d 0d 	lds	r21, 0x0D4D
    b52c:	5f 73       	andi	r21, 0x3F	; 63
	cd = stacks[s].cards[stacks[s].numcards-1] & 63;
    b52e:	28 2f       	mov	r18, r24
    b530:	30 e0       	ldi	r19, 0x00	; 0
    b532:	8c e1       	ldi	r24, 0x1C	; 28
    b534:	90 e0       	ldi	r25, 0x00	; 0
    b536:	28 9f       	mul	r18, r24
    b538:	f0 01       	movw	r30, r0
    b53a:	29 9f       	mul	r18, r25
    b53c:	f0 0d       	add	r31, r0
    b53e:	38 9f       	mul	r19, r24
    b540:	f0 0d       	add	r31, r0
    b542:	11 24       	eor	r1, r1
    b544:	ee 0f       	add	r30, r30
    b546:	ff 1f       	adc	r31, r31
    b548:	ed 58       	subi	r30, 0x8D	; 141
    b54a:	f5 4f       	sbci	r31, 0xF5	; 245
    b54c:	60 81       	ld	r22, Z
    b54e:	88 e3       	ldi	r24, 0x38	; 56
    b550:	90 e0       	ldi	r25, 0x00	; 0
    b552:	28 9f       	mul	r18, r24
    b554:	f0 01       	movw	r30, r0
    b556:	29 9f       	mul	r18, r25
    b558:	f0 0d       	add	r31, r0
    b55a:	38 9f       	mul	r19, r24
    b55c:	f0 0d       	add	r31, r0
    b55e:	11 24       	eor	r1, r1
    b560:	ef 58       	subi	r30, 0x8F	; 143
    b562:	f5 4f       	sbci	r31, 0xF5	; 245
    b564:	e6 0f       	add	r30, r22
    b566:	f1 1d       	adc	r31, r1
    b568:	e3 81       	ldd	r30, Z+3	; 0x03
    b56a:	ef 73       	andi	r30, 0x3F	; 63

	if(s >= STACK_HOME0 && s <= STACK_HOME3){//one of the home stacks, must be in the right order
    b56c:	42 50       	subi	r20, 0x02	; 2
    b56e:	44 30       	cpi	r20, 0x04	; 4
    b570:	30 f5       	brcc	.+76     	; 0xb5be <CanGoOnStack+0x9e>
		if(stacks[STACK_HELD].numcards > 1)//only 1 card at a time can be transferred
    b572:	80 91 4b 0d 	lds	r24, 0x0D4B
    b576:	82 30       	cpi	r24, 0x02	; 2
    b578:	08 f0       	brcs	.+2      	; 0xb57c <CanGoOnStack+0x5c>
    b57a:	48 c0       	rjmp	.+144    	; 0xb60c <CanGoOnStack+0xec>
			return 0;
		if(!stacks[s].numcards){//nothing here yet, must be an Ace
    b57c:	66 23       	and	r22, r22
    b57e:	69 f4       	brne	.+26     	; 0xb59a <CanGoOnStack+0x7a>
			if(cs == 0 || cs == 13 || cs == 26 || cs == 39)
    b580:	55 23       	and	r21, r21
    b582:	09 f4       	brne	.+2      	; 0xb586 <CanGoOnStack+0x66>
    b584:	45 c0       	rjmp	.+138    	; 0xb610 <CanGoOnStack+0xf0>
    b586:	5d 30       	cpi	r21, 0x0D	; 13
    b588:	09 f4       	brne	.+2      	; 0xb58c <CanGoOnStack+0x6c>
    b58a:	42 c0       	rjmp	.+132    	; 0xb610 <CanGoOnStack+0xf0>
    b58c:	5a 31       	cpi	r21, 0x1A	; 26
    b58e:	09 f4       	brne	.+2      	; 0xb592 <CanGoOnStack+0x72>
    b590:	3f c0       	rjmp	.+126    	; 0xb610 <CanGoOnStack+0xf0>
    b592:	40 e0       	ldi	r20, 0x00	; 0
    b594:	57 32       	cpi	r21, 0x27	; 39
    b596:	e9 f5       	brne	.+122    	; 0xb612 <CanGoOnStack+0xf2>
    b598:	3b c0       	rjmp	.+118    	; 0xb610 <CanGoOnStack+0xf0>
				return 1;
			return 0;
		}
		if(	cs < cd ||//card must be greater
    b59a:	5e 17       	cp	r21, r30
    b59c:	b8 f1       	brcs	.+110    	; 0xb60c <CanGoOnStack+0xec>
    b59e:	25 2f       	mov	r18, r21
    b5a0:	30 e0       	ldi	r19, 0x00	; 0
    b5a2:	8e 2f       	mov	r24, r30
    b5a4:	90 e0       	ldi	r25, 0x00	; 0
    b5a6:	01 96       	adiw	r24, 0x01	; 1
    b5a8:	82 17       	cp	r24, r18
    b5aa:	93 07       	cpc	r25, r19
    b5ac:	7c f1       	brlt	.+94     	; 0xb60c <CanGoOnStack+0xec>
    b5ae:	40 e0       	ldi	r20, 0x00	; 0
    b5b0:	8e 2f       	mov	r24, r30
    b5b2:	6d e0       	ldi	r22, 0x0D	; 13
    b5b4:	0e 94 56 75 	call	0xeaac	; 0xeaac <__udivmodqi4>
    b5b8:	9c 30       	cpi	r25, 0x0C	; 12
    b5ba:	51 f5       	brne	.+84     	; 0xb610 <CanGoOnStack+0xf0>
    b5bc:	2a c0       	rjmp	.+84     	; 0xb612 <CanGoOnStack+0xf2>
			cd % 13 == 12)//can't stack on the last card in suit, the King
			return 0;
		return 1;
	}
	//else it is one of the base stacks
	if(!stacks[s].numcards){//empty stack, first card must be a king
    b5be:	66 23       	and	r22, r22
    b5c0:	51 f4       	brne	.+20     	; 0xb5d6 <CanGoOnStack+0xb6>
		if(cs == 12 || cs == 25 || cs == 38 || cs == 51)
    b5c2:	5c 30       	cpi	r21, 0x0C	; 12
    b5c4:	29 f1       	breq	.+74     	; 0xb610 <CanGoOnStack+0xf0>
    b5c6:	59 31       	cpi	r21, 0x19	; 25
    b5c8:	19 f1       	breq	.+70     	; 0xb610 <CanGoOnStack+0xf0>
    b5ca:	56 32       	cpi	r21, 0x26	; 38
    b5cc:	09 f1       	breq	.+66     	; 0xb610 <CanGoOnStack+0xf0>
    b5ce:	40 e0       	ldi	r20, 0x00	; 0
    b5d0:	53 33       	cpi	r21, 0x33	; 51
    b5d2:	f9 f4       	brne	.+62     	; 0xb612 <CanGoOnStack+0xf2>
    b5d4:	1d c0       	rjmp	.+58     	; 0xb610 <CanGoOnStack+0xf0>
			return 1;//it's a king
		return 0;
	}
	if((cs / 26) == (cd / 26)){//can't be same color
    b5d6:	85 2f       	mov	r24, r21
    b5d8:	6a e1       	ldi	r22, 0x1A	; 26
    b5da:	0e 94 56 75 	call	0xeaac	; 0xeaac <__udivmodqi4>
    b5de:	28 2f       	mov	r18, r24
    b5e0:	8e 2f       	mov	r24, r30
    b5e2:	0e 94 56 75 	call	0xeaac	; 0xeaac <__udivmodqi4>
    b5e6:	28 17       	cp	r18, r24
    b5e8:	89 f0       	breq	.+34     	; 0xb60c <CanGoOnStack+0xec>
    b5ea:	40 e0       	ldi	r20, 0x00	; 0
    b5ec:	85 2f       	mov	r24, r21
    b5ee:	6d e0       	ldi	r22, 0x0D	; 13
    b5f0:	0e 94 56 75 	call	0xeaac	; 0xeaac <__udivmodqi4>
    b5f4:	29 2f       	mov	r18, r25
    b5f6:	30 e0       	ldi	r19, 0x00	; 0
    b5f8:	8e 2f       	mov	r24, r30
    b5fa:	0e 94 56 75 	call	0xeaac	; 0xeaac <__udivmodqi4>
    b5fe:	89 2f       	mov	r24, r25
    b600:	90 e0       	ldi	r25, 0x00	; 0
    b602:	01 97       	sbiw	r24, 0x01	; 1
    b604:	28 17       	cp	r18, r24
    b606:	39 07       	cpc	r19, r25
    b608:	21 f4       	brne	.+8      	; 0xb612 <CanGoOnStack+0xf2>
    b60a:	02 c0       	rjmp	.+4      	; 0xb610 <CanGoOnStack+0xf0>
    b60c:	40 e0       	ldi	r20, 0x00	; 0
    b60e:	01 c0       	rjmp	.+2      	; 0xb612 <CanGoOnStack+0xf2>
    b610:	41 e0       	ldi	r20, 0x01	; 1
	if((cs % 13) != ((cd % 13)-1)){//must stack a lower card here
		//SPrint(15,2,PSTR("WRONG NUMBR"));
		return 0;}

	return 1;//if none of that is wrong, we can stack it!
}
    b612:	84 2f       	mov	r24, r20
    b614:	08 95       	ret

0000b616 <AIPickMove>:
#define AI_SHORTCUT	4
#define AI_DRAW		8
#define AI_WAIT		16
#define AI_HOLD		32

void AIPickMove(){
    b616:	a0 e0       	ldi	r26, 0x00	; 0
    b618:	b0 e0       	ldi	r27, 0x00	; 0
    b61a:	e1 e1       	ldi	r30, 0x11	; 17
    b61c:	fb e5       	ldi	r31, 0x5B	; 91
    b61e:	0c 94 8f 75 	jmp	0xeb1e	; 0xeb1e <__prologue_saves__+0xc>
    b622:	c3 ec       	ldi	r28, 0xC3	; 195
    b624:	db e0       	ldi	r29, 0x0B	; 11
    b626:	46 e0       	ldi	r20, 0x06	; 6
    b628:	50 e0       	ldi	r21, 0x00	; 0
//return;


	//first check all decks on the table, see if there is a facedown one available. flip it if so
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
		if(stacks[i].numcards && !(stacks[i].cards[stacks[i].numcards-1] & FACEUP)){
    b62a:	68 e3       	ldi	r22, 0x38	; 56
    b62c:	70 e0       	ldi	r23, 0x00	; 0
    b62e:	88 81       	ld	r24, Y
    b630:	88 23       	and	r24, r24
    b632:	81 f1       	breq	.+96     	; 0xb694 <AIPickMove+0x7e>
    b634:	28 2f       	mov	r18, r24
    b636:	30 e0       	ldi	r19, 0x00	; 0
    b638:	21 50       	subi	r18, 0x01	; 1
    b63a:	30 40       	sbci	r19, 0x00	; 0
    b63c:	46 9f       	mul	r20, r22
    b63e:	d0 01       	movw	r26, r0
    b640:	47 9f       	mul	r20, r23
    b642:	b0 0d       	add	r27, r0
    b644:	56 9f       	mul	r21, r22
    b646:	b0 0d       	add	r27, r0
    b648:	11 24       	eor	r1, r1
    b64a:	af 58       	subi	r26, 0x8F	; 143
    b64c:	b5 4f       	sbci	r27, 0xF5	; 245
    b64e:	fd 01       	movw	r30, r26
    b650:	e2 0f       	add	r30, r18
    b652:	f3 1f       	adc	r31, r19
    b654:	84 81       	ldd	r24, Z+4	; 0x04
    b656:	87 fd       	sbrc	r24, 7
    b658:	1d c0       	rjmp	.+58     	; 0xb694 <AIPickMove+0x7e>
			ai_state = AI_CLICK;
    b65a:	82 e0       	ldi	r24, 0x02	; 2
    b65c:	80 93 03 0a 	sts	0x0A03, r24
			ai_targetx = (stacks[i].x*8)+8;
    b660:	8c 91       	ld	r24, X
    b662:	90 e0       	ldi	r25, 0x00	; 0
    b664:	01 96       	adiw	r24, 0x01	; 1
    b666:	53 e0       	ldi	r21, 0x03	; 3
    b668:	88 0f       	add	r24, r24
    b66a:	99 1f       	adc	r25, r25
    b66c:	5a 95       	dec	r21
    b66e:	e1 f7       	brne	.-8      	; 0xb668 <AIPickMove+0x52>
    b670:	80 93 70 0a 	sts	0x0A70, r24
			ai_targety = (stacks[i].y*8)+((stacks[i].numcards-1)*8)+8;
    b674:	11 96       	adiw	r26, 0x01	; 1
    b676:	8c 91       	ld	r24, X
    b678:	90 e0       	ldi	r25, 0x00	; 0
    b67a:	01 96       	adiw	r24, 0x01	; 1
    b67c:	82 0f       	add	r24, r18
    b67e:	93 1f       	adc	r25, r19
    b680:	23 e0       	ldi	r18, 0x03	; 3
    b682:	88 0f       	add	r24, r24
    b684:	99 1f       	adc	r25, r25
    b686:	2a 95       	dec	r18
    b688:	e1 f7       	brne	.-8      	; 0xb682 <AIPickMove+0x6c>
    b68a:	80 93 ed 0d 	sts	0x0DED, r24
			ai_target_stack = i;
    b68e:	40 93 ea 0d 	sts	0x0DEA, r20
    b692:	8a c1       	rjmp	.+788    	; 0xb9a8 <AIPickMove+0x392>
			return;
    b694:	e8 96       	adiw	r28, 0x38	; 56
    b696:	4f 5f       	subi	r20, 0xFF	; 255
    b698:	5f 4f       	sbci	r21, 0xFF	; 255
//ai_targety = (stacks[STACK_BASE1].y*8)+((stacks[STACK_BASE1].numcards-1)*8);
//return;


	//first check all decks on the table, see if there is a facedown one available. flip it if so
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    b69a:	8d e0       	ldi	r24, 0x0D	; 13
    b69c:	cb 34       	cpi	r28, 0x4B	; 75
    b69e:	d8 07       	cpc	r29, r24
    b6a0:	31 f6       	brne	.-116    	; 0xb62e <AIPickMove+0x18>
    b6a2:	93 ec       	ldi	r25, 0xC3	; 195
    b6a4:	e9 2e       	mov	r14, r25
    b6a6:	9b e0       	ldi	r25, 0x0B	; 11
    b6a8:	f9 2e       	mov	r15, r25
    b6aa:	c6 e0       	ldi	r28, 0x06	; 6
    b6ac:	d0 e0       	ldi	r29, 0x00	; 0

	//see if we can send some cards up to the home stacks
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
		if(!stacks[i].numcards)
			continue;
		stack_held = true;//need this for the overlap function to work right
    b6ae:	01 e0       	ldi	r16, 0x01	; 1
		stacks[STACK_HELD].numcards = 1;
		stacks[STACK_HELD].cards[0] = stacks[i].cards[stacks[i].numcards-1];
    b6b0:	88 e3       	ldi	r24, 0x38	; 56
    b6b2:	c8 2e       	mov	r12, r24
    b6b4:	d1 2c       	mov	r13, r1
//ai_targety = (stacks[STACK_BASE1].y*8)+((stacks[STACK_BASE1].numcards-1)*8);
//return;


	//first check all decks on the table, see if there is a facedown one available. flip it if so
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    b6b6:	bc 2e       	mov	r11, r28



	//see if we can send some cards up to the home stacks
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
		if(!stacks[i].numcards)
    b6b8:	f7 01       	movw	r30, r14
    b6ba:	80 81       	ld	r24, Z
    b6bc:	88 23       	and	r24, r24
    b6be:	09 f4       	brne	.+2      	; 0xb6c2 <AIPickMove+0xac>
    b6c0:	5b c0       	rjmp	.+182    	; 0xb778 <AIPickMove+0x162>
			continue;
		stack_held = true;//need this for the overlap function to work right
    b6c2:	00 93 69 0a 	sts	0x0A69, r16
		stacks[STACK_HELD].numcards = 1;
    b6c6:	00 93 4b 0d 	sts	0x0D4B, r16
		stacks[STACK_HELD].cards[0] = stacks[i].cards[stacks[i].numcards-1];
    b6ca:	80 81       	ld	r24, Z
    b6cc:	cc 9d       	mul	r28, r12
    b6ce:	f0 01       	movw	r30, r0
    b6d0:	cd 9d       	mul	r28, r13
    b6d2:	f0 0d       	add	r31, r0
    b6d4:	dc 9d       	mul	r29, r12
    b6d6:	f0 0d       	add	r31, r0
    b6d8:	11 24       	eor	r1, r1
    b6da:	ef 58       	subi	r30, 0x8F	; 143
    b6dc:	f5 4f       	sbci	r31, 0xF5	; 245
    b6de:	e8 0f       	add	r30, r24
    b6e0:	f1 1d       	adc	r31, r1
    b6e2:	83 81       	ldd	r24, Z+3	; 0x03
    b6e4:	80 93 4d 0d 	sts	0x0D4D, r24
		stack_held_src = i;
    b6e8:	c0 93 fe 09 	sts	0x09FE, r28
    b6ec:	12 e0       	ldi	r17, 0x02	; 2

		for(uint8_t j=STACK_HOME0;j<=STACK_HOME3;j++){
			if(CanGoOnStack(j)){
    b6ee:	81 2f       	mov	r24, r17
    b6f0:	17 df       	rcall	.-466    	; 0xb520 <CanGoOnStack>
    b6f2:	88 23       	and	r24, r24
    b6f4:	c9 f1       	breq	.+114    	; 0xb768 <AIPickMove+0x152>
//while(1){}
				stack_held = 0;
    b6f6:	10 92 69 0a 	sts	0x0A69, r1
				stacks[STACK_HELD].numcards = 0;
    b6fa:	10 92 4b 0d 	sts	0x0D4B, r1
				ai_state = AI_SHORTCUT;
    b6fe:	84 e0       	ldi	r24, 0x04	; 4
    b700:	80 93 03 0a 	sts	0x0A03, r24
				ai_targetx = (stacks[i].x*8)+8;
    b704:	88 e3       	ldi	r24, 0x38	; 56
    b706:	90 e0       	ldi	r25, 0x00	; 0
    b708:	c8 9f       	mul	r28, r24
    b70a:	f0 01       	movw	r30, r0
    b70c:	c9 9f       	mul	r28, r25
    b70e:	f0 0d       	add	r31, r0
    b710:	d8 9f       	mul	r29, r24
    b712:	f0 0d       	add	r31, r0
    b714:	11 24       	eor	r1, r1
    b716:	ef 58       	subi	r30, 0x8F	; 143
    b718:	f5 4f       	sbci	r31, 0xF5	; 245
    b71a:	80 81       	ld	r24, Z
    b71c:	90 e0       	ldi	r25, 0x00	; 0
    b71e:	01 96       	adiw	r24, 0x01	; 1
    b720:	b3 e0       	ldi	r27, 0x03	; 3
    b722:	88 0f       	add	r24, r24
    b724:	99 1f       	adc	r25, r25
    b726:	ba 95       	dec	r27
    b728:	e1 f7       	brne	.-8      	; 0xb722 <AIPickMove+0x10c>
    b72a:	80 93 70 0a 	sts	0x0A70, r24
				ai_targety = (stacks[i].y*8)+((stacks[i].numcards-1)*8);
    b72e:	21 81       	ldd	r18, Z+1	; 0x01
    b730:	8c e1       	ldi	r24, 0x1C	; 28
    b732:	90 e0       	ldi	r25, 0x00	; 0
    b734:	c8 9f       	mul	r28, r24
    b736:	f0 01       	movw	r30, r0
    b738:	c9 9f       	mul	r28, r25
    b73a:	f0 0d       	add	r31, r0
    b73c:	d8 9f       	mul	r29, r24
    b73e:	f0 0d       	add	r31, r0
    b740:	11 24       	eor	r1, r1
    b742:	ee 0f       	add	r30, r30
    b744:	ff 1f       	adc	r31, r31
    b746:	ed 58       	subi	r30, 0x8D	; 141
    b748:	f5 4f       	sbci	r31, 0xF5	; 245
    b74a:	80 81       	ld	r24, Z
    b74c:	90 e0       	ldi	r25, 0x00	; 0
    b74e:	82 0f       	add	r24, r18
    b750:	91 1d       	adc	r25, r1
    b752:	01 97       	sbiw	r24, 0x01	; 1
    b754:	73 e0       	ldi	r23, 0x03	; 3
    b756:	88 0f       	add	r24, r24
    b758:	99 1f       	adc	r25, r25
    b75a:	7a 95       	dec	r23
    b75c:	e1 f7       	brne	.-8      	; 0xb756 <AIPickMove+0x140>
    b75e:	80 93 ed 0d 	sts	0x0DED, r24
				ai_target_stack = i;
    b762:	b0 92 ea 0d 	sts	0x0DEA, r11
    b766:	20 c1       	rjmp	.+576    	; 0xb9a8 <AIPickMove+0x392>
		stack_held = true;//need this for the overlap function to work right
		stacks[STACK_HELD].numcards = 1;
		stacks[STACK_HELD].cards[0] = stacks[i].cards[stacks[i].numcards-1];
		stack_held_src = i;

		for(uint8_t j=STACK_HOME0;j<=STACK_HOME3;j++){
    b768:	1f 5f       	subi	r17, 0xFF	; 255
    b76a:	16 30       	cpi	r17, 0x06	; 6
    b76c:	09 f0       	breq	.+2      	; 0xb770 <AIPickMove+0x15a>
    b76e:	bf cf       	rjmp	.-130    	; 0xb6ee <AIPickMove+0xd8>
				ai_targety = (stacks[i].y*8)+((stacks[i].numcards-1)*8);
				ai_target_stack = i;
				return;
			}
		}
		stack_held = 0;
    b770:	10 92 69 0a 	sts	0x0A69, r1
		stacks[STACK_HELD].numcards = 0;
    b774:	10 92 4b 0d 	sts	0x0D4B, r1
    b778:	88 e3       	ldi	r24, 0x38	; 56
    b77a:	90 e0       	ldi	r25, 0x00	; 0
    b77c:	e8 0e       	add	r14, r24
    b77e:	f9 1e       	adc	r15, r25
    b780:	21 96       	adiw	r28, 0x01	; 1
	}



	//see if we can send some cards up to the home stacks
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    b782:	9b e4       	ldi	r25, 0x4B	; 75
    b784:	e9 16       	cp	r14, r25
    b786:	9d e0       	ldi	r25, 0x0D	; 13
    b788:	f9 06       	cpc	r15, r25
    b78a:	09 f0       	breq	.+2      	; 0xb78e <AIPickMove+0x178>
    b78c:	94 cf       	rjmp	.-216    	; 0xb6b6 <AIPickMove+0xa0>
	}


	//check if we can move a faceup stack somewhere, that has a facedown card underneath
	//this automatically avoids moving stacks back and forth in a looping manner, since the facedown card is higher priority
	stack_held = true;
    b78e:	81 e0       	ldi	r24, 0x01	; 1
    b790:	80 93 69 0a 	sts	0x0A69, r24
    b794:	63 ec       	ldi	r22, 0xC3	; 195
    b796:	e6 2e       	mov	r14, r22
    b798:	6b e0       	ldi	r22, 0x0B	; 11
    b79a:	f6 2e       	mov	r15, r22
    b79c:	56 e0       	ldi	r21, 0x06	; 6
    b79e:	c5 2e       	mov	r12, r21
    b7a0:	d1 2c       	mov	r13, r1
			continue;
		
		stack_held = false;
		for(j=0;j<stacks[i].numcards;j++){//look for the first FACEUP card, there is one if we got this far.
			if(stacks[i].cards[j] & FACEUP){
				stack_held = true;
    b7a2:	aa 24       	eor	r10, r10
    b7a4:	a3 94       	inc	r10
				stack_held_src = i;
				stacks[STACK_HELD].numcards = 1;
				stacks[STACK_HELD].cards[0] = stacks[i].cards[j];
    b7a6:	48 e3       	ldi	r20, 0x38	; 56
    b7a8:	84 2e       	mov	r8, r20
    b7aa:	91 2c       	mov	r9, r1
	}


	//check if we can move a faceup stack somewhere, that has a facedown card underneath
	//this automatically avoids moving stacks back and forth in a looping manner, since the facedown card is higher priority
	stack_held = true;
    b7ac:	0c 2d       	mov	r16, r12
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
		if(!stacks[i].numcards)
    b7ae:	f7 01       	movw	r30, r14
    b7b0:	60 81       	ld	r22, Z
    b7b2:	66 23       	and	r22, r22
    b7b4:	09 f4       	brne	.+2      	; 0xb7b8 <AIPickMove+0x1a2>
    b7b6:	7d c0       	rjmp	.+250    	; 0xb8b2 <AIPickMove+0x29c>
			continue;
		uint8_t j=0;
		if((stacks[i].cards[0] & FACEUP) && stacks[i].numcards > 1)//no face down card in this stack, so don't bother moving it...unless it's the only card
    b7b8:	82 81       	ldd	r24, Z+2	; 0x02
    b7ba:	87 ff       	sbrs	r24, 7
    b7bc:	03 c0       	rjmp	.+6      	; 0xb7c4 <AIPickMove+0x1ae>
    b7be:	62 30       	cpi	r22, 0x02	; 2
    b7c0:	08 f0       	brcs	.+2      	; 0xb7c4 <AIPickMove+0x1ae>
    b7c2:	77 c0       	rjmp	.+238    	; 0xb8b2 <AIPickMove+0x29c>
			continue;
		
		stack_held = false;
    b7c4:	10 92 69 0a 	sts	0x0A69, r1
    b7c8:	c6 01       	movw	r24, r12
    b7ca:	88 0f       	add	r24, r24
    b7cc:	99 1f       	adc	r25, r25
    b7ce:	fc 01       	movw	r30, r24
    b7d0:	23 e0       	ldi	r18, 0x03	; 3
    b7d2:	ee 0f       	add	r30, r30
    b7d4:	ff 1f       	adc	r31, r31
    b7d6:	2a 95       	dec	r18
    b7d8:	e1 f7       	brne	.-8      	; 0xb7d2 <AIPickMove+0x1bc>
    b7da:	e8 1b       	sub	r30, r24
    b7dc:	f9 0b       	sbc	r31, r25
    b7de:	ee 0f       	add	r30, r30
    b7e0:	ff 1f       	adc	r31, r31
    b7e2:	ee 0f       	add	r30, r30
    b7e4:	ff 1f       	adc	r31, r31
    b7e6:	eb 58       	subi	r30, 0x8B	; 139
    b7e8:	f5 4f       	sbci	r31, 0xF5	; 245
    b7ea:	20 e0       	ldi	r18, 0x00	; 0
    b7ec:	30 e0       	ldi	r19, 0x00	; 0
    b7ee:	1b c0       	rjmp	.+54     	; 0xb826 <AIPickMove+0x210>
		for(j=0;j<stacks[i].numcards;j++){//look for the first FACEUP card, there is one if we got this far.
    b7f0:	a9 01       	movw	r20, r18
			if(stacks[i].cards[j] & FACEUP){
    b7f2:	81 91       	ld	r24, Z+
    b7f4:	2f 5f       	subi	r18, 0xFF	; 255
    b7f6:	3f 4f       	sbci	r19, 0xFF	; 255
    b7f8:	87 ff       	sbrs	r24, 7
    b7fa:	15 c0       	rjmp	.+42     	; 0xb826 <AIPickMove+0x210>
				stack_held = true;
    b7fc:	a0 92 69 0a 	sts	0x0A69, r10
				stack_held_src = i;
    b800:	00 93 fe 09 	sts	0x09FE, r16
				stacks[STACK_HELD].numcards = 1;
    b804:	a0 92 4b 0d 	sts	0x0D4B, r10
				stacks[STACK_HELD].cards[0] = stacks[i].cards[j];
    b808:	c8 9c       	mul	r12, r8
    b80a:	f0 01       	movw	r30, r0
    b80c:	c9 9c       	mul	r12, r9
    b80e:	f0 0d       	add	r31, r0
    b810:	d8 9c       	mul	r13, r8
    b812:	f0 0d       	add	r31, r0
    b814:	11 24       	eor	r1, r1
    b816:	ef 58       	subi	r30, 0x8F	; 143
    b818:	f5 4f       	sbci	r31, 0xF5	; 245
    b81a:	e4 0f       	add	r30, r20
    b81c:	f5 1f       	adc	r31, r21
    b81e:	84 81       	ldd	r24, Z+4	; 0x04
    b820:	80 93 4d 0d 	sts	0x0D4D, r24
    b824:	03 c0       	rjmp	.+6      	; 0xb82c <AIPickMove+0x216>
				break;
    b826:	b2 2e       	mov	r11, r18
		uint8_t j=0;
		if((stacks[i].cards[0] & FACEUP) && stacks[i].numcards > 1)//no face down card in this stack, so don't bother moving it...unless it's the only card
			continue;
		
		stack_held = false;
		for(j=0;j<stacks[i].numcards;j++){//look for the first FACEUP card, there is one if we got this far.
    b828:	26 17       	cp	r18, r22
    b82a:	10 f3       	brcs	.-60     	; 0xb7f0 <AIPickMove+0x1da>
				stacks[STACK_HELD].numcards = 1;
				stacks[STACK_HELD].cards[0] = stacks[i].cards[j];
				break;
			}
		}
		if(!stack_held)
    b82c:	80 91 69 0a 	lds	r24, 0x0A69
    b830:	88 23       	and	r24, r24
    b832:	09 f4       	brne	.+2      	; 0xb836 <AIPickMove+0x220>
    b834:	3e c0       	rjmp	.+124    	; 0xb8b2 <AIPickMove+0x29c>
			continue;
    b836:	c3 ec       	ldi	r28, 0xC3	; 195
    b838:	db e0       	ldi	r29, 0x0B	; 11
    b83a:	16 e0       	ldi	r17, 0x06	; 6
		for(uint8_t k=STACK_BASE0;k<=STACK_BASE6;k++){
			if(k == i)//if(/*!stacks[k].numcards || */k == i || k == ai_last_source)
    b83c:	10 17       	cp	r17, r16
    b83e:	a9 f1       	breq	.+106    	; 0xb8aa <AIPickMove+0x294>
				continue;
			if(stacks[i].numcards == 1 && stacks[k].numcards == 0){//don't get stuck in a loop
    b840:	f7 01       	movw	r30, r14
    b842:	80 81       	ld	r24, Z
    b844:	81 30       	cpi	r24, 0x01	; 1
    b846:	19 f4       	brne	.+6      	; 0xb84e <AIPickMove+0x238>
    b848:	88 81       	ld	r24, Y
    b84a:	88 23       	and	r24, r24
    b84c:	71 f1       	breq	.+92     	; 0xb8aa <AIPickMove+0x294>
				continue;
			}
			if(CanGoOnStack(k)){
    b84e:	81 2f       	mov	r24, r17
    b850:	67 de       	rcall	.-818    	; 0xb520 <CanGoOnStack>
    b852:	88 23       	and	r24, r24
    b854:	51 f1       	breq	.+84     	; 0xb8aa <AIPickMove+0x294>
				stack_held = 0;
    b856:	10 92 69 0a 	sts	0x0A69, r1
				stacks[STACK_HELD].numcards = 0;
    b85a:	10 92 4b 0d 	sts	0x0D4B, r1
				ai_state = AI_SHORTCUT;
    b85e:	84 e0       	ldi	r24, 0x04	; 4
    b860:	80 93 03 0a 	sts	0x0A03, r24
				ai_targetx = (stacks[i].x*8)+8;
    b864:	88 e3       	ldi	r24, 0x38	; 56
    b866:	90 e0       	ldi	r25, 0x00	; 0
    b868:	c8 9e       	mul	r12, r24
    b86a:	f0 01       	movw	r30, r0
    b86c:	c9 9e       	mul	r12, r25
    b86e:	f0 0d       	add	r31, r0
    b870:	d8 9e       	mul	r13, r24
    b872:	f0 0d       	add	r31, r0
    b874:	11 24       	eor	r1, r1
    b876:	ef 58       	subi	r30, 0x8F	; 143
    b878:	f5 4f       	sbci	r31, 0xF5	; 245
    b87a:	80 81       	ld	r24, Z
    b87c:	90 e0       	ldi	r25, 0x00	; 0
    b87e:	01 96       	adiw	r24, 0x01	; 1
    b880:	a3 e0       	ldi	r26, 0x03	; 3
    b882:	88 0f       	add	r24, r24
    b884:	99 1f       	adc	r25, r25
    b886:	aa 95       	dec	r26
    b888:	e1 f7       	brne	.-8      	; 0xb882 <AIPickMove+0x26c>
    b88a:	80 93 70 0a 	sts	0x0A70, r24
				ai_targety = (stacks[i].y*8)+((j)*8);
    b88e:	81 81       	ldd	r24, Z+1	; 0x01
    b890:	90 e0       	ldi	r25, 0x00	; 0
    b892:	8b 0d       	add	r24, r11
    b894:	91 1d       	adc	r25, r1
    b896:	f3 e0       	ldi	r31, 0x03	; 3
    b898:	88 0f       	add	r24, r24
    b89a:	99 1f       	adc	r25, r25
    b89c:	fa 95       	dec	r31
    b89e:	e1 f7       	brne	.-8      	; 0xb898 <AIPickMove+0x282>
    b8a0:	80 93 ed 0d 	sts	0x0DED, r24
				ai_target_stack = i;
    b8a4:	00 93 ea 0d 	sts	0x0DEA, r16
    b8a8:	7f c0       	rjmp	.+254    	; 0xb9a8 <AIPickMove+0x392>
				break;
			}
		}
		if(!stack_held)
			continue;
		for(uint8_t k=STACK_BASE0;k<=STACK_BASE6;k++){
    b8aa:	1f 5f       	subi	r17, 0xFF	; 255
    b8ac:	e8 96       	adiw	r28, 0x38	; 56
    b8ae:	1d 30       	cpi	r17, 0x0D	; 13
    b8b0:	29 f6       	brne	.-118    	; 0xb83c <AIPickMove+0x226>
    b8b2:	88 e3       	ldi	r24, 0x38	; 56
    b8b4:	90 e0       	ldi	r25, 0x00	; 0
    b8b6:	e8 0e       	add	r14, r24
    b8b8:	f9 1e       	adc	r15, r25
    b8ba:	08 94       	sec
    b8bc:	c1 1c       	adc	r12, r1
    b8be:	d1 1c       	adc	r13, r1


	//check if we can move a faceup stack somewhere, that has a facedown card underneath
	//this automatically avoids moving stacks back and forth in a looping manner, since the facedown card is higher priority
	stack_held = true;
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    b8c0:	9b e4       	ldi	r25, 0x4B	; 75
    b8c2:	e9 16       	cp	r14, r25
    b8c4:	9d e0       	ldi	r25, 0x0D	; 13
    b8c6:	f9 06       	cpc	r15, r25
    b8c8:	09 f0       	breq	.+2      	; 0xb8cc <AIPickMove+0x2b6>
    b8ca:	70 cf       	rjmp	.-288    	; 0xb7ac <AIPickMove+0x196>
	}



	//check if we can send a card right from the draw pile to the home stacks
	if(stacks[STACK_DRAW].numcards){
    b8cc:	e0 91 ab 0a 	lds	r30, 0x0AAB
    b8d0:	ee 23       	and	r30, r30
    b8d2:	f9 f0       	breq	.+62     	; 0xb912 <AIPickMove+0x2fc>
	
	stack_held = true;//need this for the overlap function to work right
    b8d4:	81 e0       	ldi	r24, 0x01	; 1
    b8d6:	80 93 69 0a 	sts	0x0A69, r24
	stacks[STACK_HELD].numcards = 1;
    b8da:	80 93 4b 0d 	sts	0x0D4B, r24
	stacks[STACK_HELD].cards[0] = stacks[STACK_DRAW].cards[stacks[STACK_DRAW].numcards-1];
    b8de:	f0 e0       	ldi	r31, 0x00	; 0
    b8e0:	ef 58       	subi	r30, 0x8F	; 143
    b8e2:	f5 4f       	sbci	r31, 0xF5	; 245
    b8e4:	83 ad       	ldd	r24, Z+59	; 0x3b
    b8e6:	80 93 4d 0d 	sts	0x0D4D, r24
    b8ea:	12 e0       	ldi	r17, 0x02	; 2
	for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
		stacks[STACK_HELD].cards[0] = stacks[STACK_DRAW].cards[stacks[STACK_DRAW].numcards-1];
    b8ec:	e0 91 ab 0a 	lds	r30, 0x0AAB
    b8f0:	f0 e0       	ldi	r31, 0x00	; 0
    b8f2:	ef 58       	subi	r30, 0x8F	; 143
    b8f4:	f5 4f       	sbci	r31, 0xF5	; 245
    b8f6:	83 ad       	ldd	r24, Z+59	; 0x3b
    b8f8:	80 93 4d 0d 	sts	0x0D4D, r24
		if(CanGoOnStack(i)){
    b8fc:	81 2f       	mov	r24, r17
    b8fe:	10 de       	rcall	.-992    	; 0xb520 <CanGoOnStack>
    b900:	88 23       	and	r24, r24
    b902:	d9 f4       	brne	.+54     	; 0xb93a <AIPickMove+0x324>
	if(stacks[STACK_DRAW].numcards){
	
	stack_held = true;//need this for the overlap function to work right
	stacks[STACK_HELD].numcards = 1;
	stacks[STACK_HELD].cards[0] = stacks[STACK_DRAW].cards[stacks[STACK_DRAW].numcards-1];
	for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
    b904:	1f 5f       	subi	r17, 0xFF	; 255
    b906:	16 30       	cpi	r17, 0x06	; 6
    b908:	89 f7       	brne	.-30     	; 0xb8ec <AIPickMove+0x2d6>
			ai_targetx = (stacks[STACK_DRAW].x*8)+(0)+8;//draw 3 is horizontal...TODO
			ai_targety = (stacks[STACK_DRAW].y*8)+16;
			return;
		}
	}
	stack_held = 0;
    b90a:	10 92 69 0a 	sts	0x0A69, r1
	stacks[STACK_HELD].numcards = 0;
    b90e:	10 92 4b 0d 	sts	0x0D4B, r1
	}


	//see if we can send a card from the draw stack to a base pile
	if(stacks[STACK_DRAW].numcards){
    b912:	e0 91 ab 0a 	lds	r30, 0x0AAB
    b916:	ee 23       	and	r30, r30
    b918:	e9 f0       	breq	.+58     	; 0xb954 <AIPickMove+0x33e>
	stack_held = true;
    b91a:	81 e0       	ldi	r24, 0x01	; 1
    b91c:	80 93 69 0a 	sts	0x0A69, r24
	stack_held_src = STACK_DRAW;
    b920:	80 93 fe 09 	sts	0x09FE, r24
	stacks[STACK_HELD].cards[0] = stacks[STACK_DRAW].cards[stacks[STACK_DRAW].numcards-1];
    b924:	f0 e0       	ldi	r31, 0x00	; 0
    b926:	ef 58       	subi	r30, 0x8F	; 143
    b928:	f5 4f       	sbci	r31, 0xF5	; 245
    b92a:	83 ad       	ldd	r24, Z+59	; 0x3b
    b92c:	80 93 4d 0d 	sts	0x0D4D, r24
    b930:	16 e0       	ldi	r17, 0x06	; 6
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
		if(CanGoOnStack(i)){
    b932:	81 2f       	mov	r24, r17
    b934:	f5 dd       	rcall	.-1046   	; 0xb520 <CanGoOnStack>
    b936:	88 23       	and	r24, r24
    b938:	31 f0       	breq	.+12     	; 0xb946 <AIPickMove+0x330>
			stack_held = false;
    b93a:	10 92 69 0a 	sts	0x0A69, r1
			stacks[STACK_HELD].numcards = 0;
    b93e:	10 92 4b 0d 	sts	0x0D4B, r1
			ai_state = AI_SHORTCUT;
    b942:	84 e0       	ldi	r24, 0x04	; 4
    b944:	19 c0       	rjmp	.+50     	; 0xb978 <AIPickMove+0x362>
	//see if we can send a card from the draw stack to a base pile
	if(stacks[STACK_DRAW].numcards){
	stack_held = true;
	stack_held_src = STACK_DRAW;
	stacks[STACK_HELD].cards[0] = stacks[STACK_DRAW].cards[stacks[STACK_DRAW].numcards-1];
	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    b946:	1f 5f       	subi	r17, 0xFF	; 255
    b948:	1d 30       	cpi	r17, 0x0D	; 13
    b94a:	99 f7       	brne	.-26     	; 0xb932 <AIPickMove+0x31c>
			ai_targetx = (stacks[STACK_DRAW].x*8)+(0)+8;//draw 3 is horizontal...TODO
			ai_targety = (stacks[STACK_DRAW].y*8)+16;
			return;
		}
	}
	stack_held = false;
    b94c:	10 92 69 0a 	sts	0x0A69, r1
	stacks[STACK_HELD].numcards = 0;
    b950:	10 92 4b 0d 	sts	0x0D4B, r1
	}

	//if nothing else, draw a card. if there is no card left on the deck, see if we have entirely ran through the deck trying
	//if so, then there is nothing else to do, since we would have tried every possibility before resorting to draws
	//the AI is not smart enough to take stuff back off the home piles, but this simple strategy works a good amount of the time(for single draw)
	if(!stacks[STACK_DECK].numcards){//set the flag, so we know we have attempted this through the entire deck without finding a move
    b954:	80 91 73 0a 	lds	r24, 0x0A73
    b958:	88 23       	and	r24, r24
    b95a:	69 f4       	brne	.+26     	; 0xb976 <AIPickMove+0x360>
		if(!ai_freshdeck)
    b95c:	80 91 6f 0a 	lds	r24, 0x0A6F
    b960:	88 23       	and	r24, r24
    b962:	21 f4       	brne	.+8      	; 0xb96c <AIPickMove+0x356>
			ai_freshdeck = 1;
    b964:	81 e0       	ldi	r24, 0x01	; 1
    b966:	80 93 6f 0a 	sts	0x0A6F, r24
    b96a:	05 c0       	rjmp	.+10     	; 0xb976 <AIPickMove+0x360>
		else{//we can't find any moves, give up
			ai_state = 0;
    b96c:	10 92 03 0a 	sts	0x0A03, r1
			ai_freshdeck = 0;
    b970:	10 92 6f 0a 	sts	0x0A6F, r1
    b974:	19 c0       	rjmp	.+50     	; 0xb9a8 <AIPickMove+0x392>
			return;
		}
	}
	ai_state = AI_DRAW;
    b976:	88 e0       	ldi	r24, 0x08	; 8
    b978:	80 93 03 0a 	sts	0x0A03, r24
	ai_targetx = (stacks[STACK_DRAW].x*8)+(0)+8;//draw 3 is horizontal...TODO
    b97c:	80 91 a9 0a 	lds	r24, 0x0AA9
    b980:	90 e0       	ldi	r25, 0x00	; 0
    b982:	01 96       	adiw	r24, 0x01	; 1
    b984:	e3 e0       	ldi	r30, 0x03	; 3
    b986:	88 0f       	add	r24, r24
    b988:	99 1f       	adc	r25, r25
    b98a:	ea 95       	dec	r30
    b98c:	e1 f7       	brne	.-8      	; 0xb986 <AIPickMove+0x370>
    b98e:	80 93 70 0a 	sts	0x0A70, r24
	ai_targety = (stacks[STACK_DRAW].y*8)+16;
    b992:	80 91 aa 0a 	lds	r24, 0x0AAA
    b996:	90 e0       	ldi	r25, 0x00	; 0
    b998:	02 96       	adiw	r24, 0x02	; 2
    b99a:	73 e0       	ldi	r23, 0x03	; 3
    b99c:	88 0f       	add	r24, r24
    b99e:	99 1f       	adc	r25, r25
    b9a0:	7a 95       	dec	r23
    b9a2:	e1 f7       	brne	.-8      	; 0xb99c <AIPickMove+0x386>
    b9a4:	80 93 ed 0d 	sts	0x0DED, r24

}
    b9a8:	cd b7       	in	r28, 0x3d	; 61
    b9aa:	de b7       	in	r29, 0x3e	; 62
    b9ac:	ec e0       	ldi	r30, 0x0C	; 12
    b9ae:	0c 94 ab 75 	jmp	0xeb56	; 0xeb56 <__epilogue_restores__+0xc>

0000b9b2 <CheckVictory>:




uint8_t CheckVictory(){
	if(stacks[STACK_DECK].numcards == 0 && stacks[STACK_DRAW].numcards == 0 && stacks[STACK_HELD].numcards == 0){
    b9b2:	80 91 73 0a 	lds	r24, 0x0A73
    b9b6:	88 23       	and	r24, r24
    b9b8:	c1 f4       	brne	.+48     	; 0xb9ea <CheckVictory+0x38>
    b9ba:	80 91 ab 0a 	lds	r24, 0x0AAB
    b9be:	88 23       	and	r24, r24
    b9c0:	a1 f4       	brne	.+40     	; 0xb9ea <CheckVictory+0x38>
    b9c2:	80 91 4b 0d 	lds	r24, 0x0D4B
    b9c6:	88 23       	and	r24, r24
    b9c8:	81 f4       	brne	.+32     	; 0xb9ea <CheckVictory+0x38>
    b9ca:	e3 ec       	ldi	r30, 0xC3	; 195
    b9cc:	fb e0       	ldi	r31, 0x0B	; 11
			//	break;
			//if there are no face down cards left and nothing in the deck or draw stacks, then it is impossible to lose
			//even if the player hasn't manually put each one to the home piles. skip to the victory function which will
			//automatically do that for the player.
			//CHANGE OF PLAN, PLAYER MUST MANUALLY FINISH UP, GAME IS GETTING TOO SHORTCUT AUTOMATED
			if(stacks[i].numcards)
    b9ce:	80 81       	ld	r24, Z
    b9d0:	88 23       	and	r24, r24
    b9d2:	59 f4       	brne	.+22     	; 0xb9ea <CheckVictory+0x38>
				break;
			if(i == STACK_BASE6){//victory
    b9d4:	8d e0       	ldi	r24, 0x0D	; 13
    b9d6:	e3 31       	cpi	r30, 0x13	; 19
    b9d8:	f8 07       	cpc	r31, r24
    b9da:	11 f4       	brne	.+4      	; 0xb9e0 <CheckVictory+0x2e>
    b9dc:	81 e0       	ldi	r24, 0x01	; 1
    b9de:	08 95       	ret
    b9e0:	f8 96       	adiw	r30, 0x38	; 56



uint8_t CheckVictory(){
	if(stacks[STACK_DECK].numcards == 0 && stacks[STACK_DRAW].numcards == 0 && stacks[STACK_HELD].numcards == 0){
		for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    b9e2:	8d e0       	ldi	r24, 0x0D	; 13
    b9e4:	eb 34       	cpi	r30, 0x4B	; 75
    b9e6:	f8 07       	cpc	r31, r24
    b9e8:	91 f7       	brne	.-28     	; 0xb9ce <CheckVictory+0x1c>
    b9ea:	80 e0       	ldi	r24, 0x00	; 0
//if(!ai_state && !demo_playing && stacks[STACK_BASE1].numcards < 2){//victory debugging
//game_score = 2799;
//return 1;
//}
	return 0;
}
    b9ec:	08 95       	ret

0000b9ee <SetInitialStacksState>:
/*STACK_BASE5,*/21,6,0,VERTICAL,
/*STACK_BASE6,*/25,6,0,VERTICAL,
/*STACK_HELD, */ 255,255,0,VERTICAL,
};

void SetInitialStacksState(){
    b9ee:	ec e1       	ldi	r30, 0x1C	; 28
    b9f0:	f4 e8       	ldi	r31, 0x84	; 132
    b9f2:	a1 e7       	ldi	r26, 0x71	; 113
    b9f4:	ba e0       	ldi	r27, 0x0A	; 10

	uint8_t soff = 0;
	for(uint8_t i=STACK_DECK;i<=STACK_HELD;i++){
		stacks[i].x = pgm_read_byte(&StackSetupTable[soff++]);
    b9f6:	84 91       	lpm	r24, Z+
    b9f8:	8c 93       	st	X, r24
		stacks[i].y = pgm_read_byte(&StackSetupTable[soff++]);
    b9fa:	31 96       	adiw	r30, 0x01	; 1
    b9fc:	84 91       	lpm	r24, Z+
    b9fe:	11 96       	adiw	r26, 0x01	; 1
    ba00:	8c 93       	st	X, r24
    ba02:	11 97       	sbiw	r26, 0x01	; 1
		stacks[i].numcards = pgm_read_byte(&StackSetupTable[soff++]);
    ba04:	31 96       	adiw	r30, 0x01	; 1
    ba06:	84 91       	lpm	r24, Z+
    ba08:	12 96       	adiw	r26, 0x02	; 2
    ba0a:	8c 93       	st	X, r24
    ba0c:	12 97       	sbiw	r26, 0x02	; 2
		stacks[i].display = pgm_read_byte(&StackSetupTable[soff++]);
    ba0e:	31 96       	adiw	r30, 0x01	; 1
    ba10:	84 91       	lpm	r24, Z+
    ba12:	13 96       	adiw	r26, 0x03	; 3
    ba14:	8c 93       	st	X, r24
    ba16:	13 97       	sbiw	r26, 0x03	; 3
    ba18:	31 96       	adiw	r30, 0x01	; 1
    ba1a:	d8 96       	adiw	r26, 0x38	; 56
};

void SetInitialStacksState(){

	uint8_t soff = 0;
	for(uint8_t i=STACK_DECK;i<=STACK_HELD;i++){
    ba1c:	84 e8       	ldi	r24, 0x84	; 132
    ba1e:	e4 35       	cpi	r30, 0x54	; 84
    ba20:	f8 07       	cpc	r31, r24
    ba22:	49 f7       	brne	.-46     	; 0xb9f6 <SetInitialStacksState+0x8>
    ba24:	e5 e7       	ldi	r30, 0x75	; 117
    ba26:	fa e0       	ldi	r31, 0x0A	; 10
    ba28:	80 e0       	ldi	r24, 0x00	; 0
		stacks[i].numcards = pgm_read_byte(&StackSetupTable[soff++]);
		stacks[i].display = pgm_read_byte(&StackSetupTable[soff++]);
	}

	for(uint8_t i=0;i<MAX_CARDS;i++)
		stacks[STACK_DECK].cards[i] = i;
    ba2a:	81 93       	st	Z+, r24
		stacks[i].y = pgm_read_byte(&StackSetupTable[soff++]);
		stacks[i].numcards = pgm_read_byte(&StackSetupTable[soff++]);
		stacks[i].display = pgm_read_byte(&StackSetupTable[soff++]);
	}

	for(uint8_t i=0;i<MAX_CARDS;i++)
    ba2c:	8f 5f       	subi	r24, 0xFF	; 255
    ba2e:	84 33       	cpi	r24, 0x34	; 52
    ba30:	e1 f7       	brne	.-8      	; 0xba2a <SetInitialStacksState+0x3c>
		stacks[STACK_DECK].cards[i] = i;
	stacks[STACK_DECK].numcards = 52;
    ba32:	80 93 73 0a 	sts	0x0A73, r24
}
    ba36:	08 95       	ret

0000ba38 <MoveAllToDeck>:

void MoveAllToDeck(){
    ba38:	cf 93       	push	r28
    ba3a:	df 93       	push	r29
    ba3c:	cb ea       	ldi	r28, 0xAB	; 171
    ba3e:	da e0       	ldi	r29, 0x0A	; 10
    ba40:	21 e0       	ldi	r18, 0x01	; 1
    ba42:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=STACK_DECK+1;i<=STACK_HELD;i++){
		while(stacks[i].numcards){
			stacks[STACK_DECK].cards[stacks[STACK_DECK].numcards-1] = stacks[i].cards[stacks[i].numcards-1];
    ba44:	48 e3       	ldi	r20, 0x38	; 56
    ba46:	50 e0       	ldi	r21, 0x00	; 0
    ba48:	1a c0       	rjmp	.+52     	; 0xba7e <MoveAllToDeck+0x46>
    ba4a:	a0 91 73 0a 	lds	r26, 0x0A73
    ba4e:	b0 e0       	ldi	r27, 0x00	; 0
    ba50:	af 58       	subi	r26, 0x8F	; 143
    ba52:	b5 4f       	sbci	r27, 0xF5	; 245
    ba54:	24 9f       	mul	r18, r20
    ba56:	f0 01       	movw	r30, r0
    ba58:	25 9f       	mul	r18, r21
    ba5a:	f0 0d       	add	r31, r0
    ba5c:	34 9f       	mul	r19, r20
    ba5e:	f0 0d       	add	r31, r0
    ba60:	11 24       	eor	r1, r1
    ba62:	ef 58       	subi	r30, 0x8F	; 143
    ba64:	f5 4f       	sbci	r31, 0xF5	; 245
    ba66:	e9 0f       	add	r30, r25
    ba68:	f1 1d       	adc	r31, r1
    ba6a:	83 81       	ldd	r24, Z+3	; 0x03
    ba6c:	13 96       	adiw	r26, 0x03	; 3
    ba6e:	8c 93       	st	X, r24
			stacks[i].numcards--;
    ba70:	91 50       	subi	r25, 0x01	; 1
    ba72:	98 83       	st	Y, r25
			stacks[STACK_DECK].numcards++;
    ba74:	80 91 73 0a 	lds	r24, 0x0A73
    ba78:	8f 5f       	subi	r24, 0xFF	; 255
    ba7a:	80 93 73 0a 	sts	0x0A73, r24
	stacks[STACK_DECK].numcards = 52;
}

void MoveAllToDeck(){
	for(uint8_t i=STACK_DECK+1;i<=STACK_HELD;i++){
		while(stacks[i].numcards){
    ba7e:	98 81       	ld	r25, Y
    ba80:	99 23       	and	r25, r25
    ba82:	19 f7       	brne	.-58     	; 0xba4a <MoveAllToDeck+0x12>
    ba84:	e8 96       	adiw	r28, 0x38	; 56
    ba86:	2f 5f       	subi	r18, 0xFF	; 255
    ba88:	3f 4f       	sbci	r19, 0xFF	; 255
		stacks[STACK_DECK].cards[i] = i;
	stacks[STACK_DECK].numcards = 52;
}

void MoveAllToDeck(){
	for(uint8_t i=STACK_DECK+1;i<=STACK_HELD;i++){
    ba8a:	8d e0       	ldi	r24, 0x0D	; 13
    ba8c:	c3 38       	cpi	r28, 0x83	; 131
    ba8e:	d8 07       	cpc	r29, r24
    ba90:	b1 f7       	brne	.-20     	; 0xba7e <MoveAllToDeck+0x46>
    ba92:	20 e0       	ldi	r18, 0x00	; 0
    ba94:	0a c0       	rjmp	.+20     	; 0xbaaa <MoveAllToDeck+0x72>
	}

	for(uint8_t i=0;i<52;i++){
		bool found_it = false;
		for(uint8_t j=0;j<stacks[STACK_DECK].numcards;j++){
			if(stacks[STACK_DECK].cards[j] == i){
    ba96:	8d 91       	ld	r24, X+
    ba98:	82 17       	cp	r24, r18
    ba9a:	21 f0       	breq	.+8      	; 0xbaa4 <MoveAllToDeck+0x6c>
		
	}

	for(uint8_t i=0;i<52;i++){
		bool found_it = false;
		for(uint8_t j=0;j<stacks[STACK_DECK].numcards;j++){
    ba9c:	9f 5f       	subi	r25, 0xFF	; 255
    ba9e:	9e 17       	cp	r25, r30
    baa0:	d0 f3       	brcs	.-12     	; 0xba96 <MoveAllToDeck+0x5e>
    baa2:	09 c0       	rjmp	.+18     	; 0xbab6 <MoveAllToDeck+0x7e>
			stacks[STACK_DECK].numcards++;
		}
		
	}

	for(uint8_t i=0;i<52;i++){
    baa4:	2f 5f       	subi	r18, 0xFF	; 255
    baa6:	24 33       	cpi	r18, 0x34	; 52
    baa8:	81 f0       	breq	.+32     	; 0xbaca <MoveAllToDeck+0x92>
		bool found_it = false;
		for(uint8_t j=0;j<stacks[STACK_DECK].numcards;j++){
    baaa:	e0 91 73 0a 	lds	r30, 0x0A73
    baae:	a5 e7       	ldi	r26, 0x75	; 117
    bab0:	ba e0       	ldi	r27, 0x0A	; 10
    bab2:	90 e0       	ldi	r25, 0x00	; 0
    bab4:	f4 cf       	rjmp	.-24     	; 0xba9e <MoveAllToDeck+0x66>
				found_it = true;
				break;
			}
		}
		if(!found_it){
			stacks[STACK_DECK].cards[stacks[STACK_DECK].numcards-1] = i;
    bab6:	f0 e0       	ldi	r31, 0x00	; 0
    bab8:	ef 58       	subi	r30, 0x8F	; 143
    baba:	f5 4f       	sbci	r31, 0xF5	; 245
    babc:	23 83       	std	Z+3, r18	; 0x03
			stacks[STACK_DECK].numcards++;
    babe:	80 91 73 0a 	lds	r24, 0x0A73
    bac2:	8f 5f       	subi	r24, 0xFF	; 255
    bac4:	80 93 73 0a 	sts	0x0A73, r24
    bac8:	ed cf       	rjmp	.-38     	; 0xbaa4 <MoveAllToDeck+0x6c>
		}
	}
}
    baca:	df 91       	pop	r29
    bacc:	cf 91       	pop	r28
    bace:	08 95       	ret

0000bad0 <Shuffle>:

}



void Shuffle(uint16_t reps){//swaps 2 random cards in the deck per iteration
    bad0:	cf 92       	push	r12
    bad2:	df 92       	push	r13
    bad4:	ff 92       	push	r15
    bad6:	0f 93       	push	r16
    bad8:	1f 93       	push	r17
    bada:	cf 93       	push	r28
    badc:	df 93       	push	r29
    bade:	6c 01       	movw	r12, r24
    bae0:	00 e0       	ldi	r16, 0x00	; 0
    bae2:	10 e0       	ldi	r17, 0x00	; 0
    bae4:	21 c0       	rjmp	.+66     	; 0xbb28 <Shuffle+0x58>
	for(uint16_t i=0;i<reps;i++){
		uint8_t ts = GetPrngNumber(0)%stacks[0].numcards;
    bae6:	80 e0       	ldi	r24, 0x00	; 0
    bae8:	90 e0       	ldi	r25, 0x00	; 0
    baea:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    baee:	60 91 73 0a 	lds	r22, 0x0A73
    baf2:	70 e0       	ldi	r23, 0x00	; 0
    baf4:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    baf8:	f8 2e       	mov	r15, r24
		uint8_t td = GetPrngNumber(0)%stacks[0].numcards;
    bafa:	80 e0       	ldi	r24, 0x00	; 0
    bafc:	90 e0       	ldi	r25, 0x00	; 0
    bafe:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
		uint8_t tt = stacks[0].cards[ts];
    bb02:	cf 2d       	mov	r28, r15
    bb04:	d0 e0       	ldi	r29, 0x00	; 0
    bb06:	cf 58       	subi	r28, 0x8F	; 143
    bb08:	d5 4f       	sbci	r29, 0xF5	; 245
    bb0a:	2c 81       	ldd	r18, Y+4	; 0x04

		stacks[0].cards[ts] = stacks[0].cards[td];
    bb0c:	60 91 73 0a 	lds	r22, 0x0A73
    bb10:	70 e0       	ldi	r23, 0x00	; 0
    bb12:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    bb16:	e8 2f       	mov	r30, r24
    bb18:	f0 e0       	ldi	r31, 0x00	; 0
    bb1a:	ef 58       	subi	r30, 0x8F	; 143
    bb1c:	f5 4f       	sbci	r31, 0xF5	; 245
    bb1e:	84 81       	ldd	r24, Z+4	; 0x04
    bb20:	8c 83       	std	Y+4, r24	; 0x04
		stacks[0].cards[td] = tt;
    bb22:	24 83       	std	Z+4, r18	; 0x04
}



void Shuffle(uint16_t reps){//swaps 2 random cards in the deck per iteration
	for(uint16_t i=0;i<reps;i++){
    bb24:	0f 5f       	subi	r16, 0xFF	; 255
    bb26:	1f 4f       	sbci	r17, 0xFF	; 255
    bb28:	0c 15       	cp	r16, r12
    bb2a:	1d 05       	cpc	r17, r13
    bb2c:	e0 f2       	brcs	.-72     	; 0xbae6 <Shuffle+0x16>
		uint8_t tt = stacks[0].cards[ts];

		stacks[0].cards[ts] = stacks[0].cards[td];
		stacks[0].cards[td] = tt;
	}
}
    bb2e:	df 91       	pop	r29
    bb30:	cf 91       	pop	r28
    bb32:	1f 91       	pop	r17
    bb34:	0f 91       	pop	r16
    bb36:	ff 90       	pop	r15
    bb38:	df 90       	pop	r13
    bb3a:	cf 90       	pop	r12
    bb3c:	08 95       	ret

0000bb3e <AIUpdate>:
		}
		return ret;
}

void AIUpdate(){
	if(game_state & CARD_FLOATING || !(game_state & CARDS_DEALT)){
    bb3e:	80 91 06 0a 	lds	r24, 0x0A06
    bb42:	81 fd       	sbrc	r24, 1
    bb44:	02 c0       	rjmp	.+4      	; 0xbb4a <AIUpdate+0xc>
    bb46:	85 fd       	sbrc	r24, 5
    bb48:	05 c0       	rjmp	.+10     	; 0xbb54 <AIUpdate+0x16>
		padstate = 0;
    bb4a:	10 92 fd 09 	sts	0x09FD, r1
    bb4e:	10 92 fc 09 	sts	0x09FC, r1
    bb52:	08 95       	ret
		return;
	}
	if(ai_skip_tick){
    bb54:	80 91 68 0a 	lds	r24, 0x0A68
    bb58:	88 23       	and	r24, r24
    bb5a:	19 f0       	breq	.+6      	; 0xbb62 <AIUpdate+0x24>
		ai_skip_tick = 0;
    bb5c:	10 92 68 0a 	sts	0x0A68, r1
    bb60:	08 95       	ret
//SPrintNum(20,0,ai_state,1);
//SPrintNum(20,1,ai_targetx,1);
//SPrintNum(20,2,ai_targety,1);
//SPrintNum(20,4,ai_last_state,1);
//SPrintNum(20,5,ai_target_stack,1);
	if(ai_state == AI_DISABLED)
    bb62:	80 91 03 0a 	lds	r24, 0x0A03
    bb66:	88 23       	and	r24, r24
    bb68:	09 f4       	brne	.+2      	; 0xbb6c <AIUpdate+0x2e>
    bb6a:	b4 c0       	rjmp	.+360    	; 0xbcd4 <AIUpdate+0x196>
		return;
//	uint8_t tx,ty;
	if(ai_state == AI_HOLD){
    bb6c:	80 32       	cpi	r24, 0x20	; 32
    bb6e:	71 f4       	brne	.+28     	; 0xbb8c <AIUpdate+0x4e>
			padstate |= BTN_A;
    bb70:	80 91 fc 09 	lds	r24, 0x09FC
    bb74:	90 91 fd 09 	lds	r25, 0x09FD
    bb78:	91 60       	ori	r25, 0x01	; 1
    bb7a:	90 93 fd 09 	sts	0x09FD, r25
    bb7e:	80 93 fc 09 	sts	0x09FC, r24
			if(ai_targetx){
    bb82:	80 91 70 0a 	lds	r24, 0x0A70
    bb86:	88 23       	and	r24, r24
    bb88:	59 f4       	brne	.+22     	; 0xbba0 <AIUpdate+0x62>
    bb8a:	4e c0       	rjmp	.+156    	; 0xbc28 <AIUpdate+0xea>
			//ai_state = AI_CHOOSING;//find the next thing to do
			ai_state = AI_WAIT;
			ai_targetx = (GetPrngNumber(0)%30)+15;
			return;
	}else
		padstate = 0;
    bb8c:	10 92 fd 09 	sts	0x09FD, r1
    bb90:	10 92 fc 09 	sts	0x09FC, r1

//if(ai_state == AI_WAIT)
//	ai_state = AI_CHOOSING;


	if(ai_state == AI_WAIT){
    bb94:	80 31       	cpi	r24, 0x10	; 16
    bb96:	51 f4       	brne	.+20     	; 0xbbac <AIUpdate+0x6e>
		if(ai_targetx)
    bb98:	80 91 70 0a 	lds	r24, 0x0A70
    bb9c:	88 23       	and	r24, r24
    bb9e:	11 f0       	breq	.+4      	; 0xbba4 <AIUpdate+0x66>
			ai_targetx--;
    bba0:	81 50       	subi	r24, 0x01	; 1
    bba2:	70 c0       	rjmp	.+224    	; 0xbc84 <AIUpdate+0x146>
		else
			ai_state = AI_CHOOSING;
    bba4:	81 e0       	ldi	r24, 0x01	; 1
    bba6:	80 93 03 0a 	sts	0x0A03, r24
    bbaa:	08 95       	ret

	}else if(ai_state == AI_CHOOSING){
    bbac:	81 30       	cpi	r24, 0x01	; 1
    bbae:	11 f5       	brne	.+68     	; 0xbbf4 <AIUpdate+0xb6>

		AIPickMove();
    bbb0:	32 dd       	rcall	.-1436   	; 0xb616 <AIPickMove>
		if(ai_state == AI_CLICK || ai_state == AI_SHORTCUT){
    bbb2:	80 91 03 0a 	lds	r24, 0x0A03
    bbb6:	82 30       	cpi	r24, 0x02	; 2
    bbb8:	19 f0       	breq	.+6      	; 0xbbc0 <AIUpdate+0x82>
    bbba:	84 30       	cpi	r24, 0x04	; 4
    bbbc:	09 f0       	breq	.+2      	; 0xbbc0 <AIUpdate+0x82>
    bbbe:	8a c0       	rjmp	.+276    	; 0xbcd4 <AIUpdate+0x196>
			if(stacks[ai_target_stack].numcards == 1)//KLUDGE for different alignment between single card stacks and multi card stacks
    bbc0:	80 91 ea 0d 	lds	r24, 0x0DEA
    bbc4:	90 e0       	ldi	r25, 0x00	; 0
    bbc6:	2c e1       	ldi	r18, 0x1C	; 28
    bbc8:	30 e0       	ldi	r19, 0x00	; 0
    bbca:	82 9f       	mul	r24, r18
    bbcc:	f0 01       	movw	r30, r0
    bbce:	83 9f       	mul	r24, r19
    bbd0:	f0 0d       	add	r31, r0
    bbd2:	92 9f       	mul	r25, r18
    bbd4:	f0 0d       	add	r31, r0
    bbd6:	11 24       	eor	r1, r1
    bbd8:	ee 0f       	add	r30, r30
    bbda:	ff 1f       	adc	r31, r31
    bbdc:	ed 58       	subi	r30, 0x8D	; 141
    bbde:	f5 4f       	sbci	r31, 0xF5	; 245
    bbe0:	80 81       	ld	r24, Z
    bbe2:	81 30       	cpi	r24, 0x01	; 1
    bbe4:	09 f0       	breq	.+2      	; 0xbbe8 <AIUpdate+0xaa>
    bbe6:	76 c0       	rjmp	.+236    	; 0xbcd4 <AIUpdate+0x196>
				ai_targety += 8;
    bbe8:	80 91 ed 0d 	lds	r24, 0x0DED
    bbec:	88 5f       	subi	r24, 0xF8	; 248
    bbee:	80 93 ed 0d 	sts	0x0DED, r24
    bbf2:	08 95       	ret
		}


	}else if(ai_state == AI_CLICK){//if we are not at the source card, move to it. else flip it
    bbf4:	82 30       	cpi	r24, 0x02	; 2
    bbf6:	29 f5       	brne	.+74     	; 0xbc42 <AIUpdate+0x104>
		ai_freshdeck = 0;
    bbf8:	10 92 6f 0a 	sts	0x0A6F, r1
padstate = BTN_SR;
    bbfc:	80 e0       	ldi	r24, 0x00	; 0
    bbfe:	98 e0       	ldi	r25, 0x08	; 8
    bc00:	90 93 fd 09 	sts	0x09FD, r25
    bc04:	80 93 fc 09 	sts	0x09FC, r24
		if(!AIMoveToCard(0)){//got to target
    bc08:	80 e0       	ldi	r24, 0x00	; 0
    bc0a:	0e 94 8d 53 	call	0xa71a	; 0xa71a <AIMoveToCard>
    bc0e:	88 23       	and	r24, r24
    bc10:	09 f0       	breq	.+2      	; 0xbc14 <AIUpdate+0xd6>
    bc12:	60 c0       	rjmp	.+192    	; 0xbcd4 <AIUpdate+0x196>
			padstate = BTN_B;//flip it
    bc14:	81 e0       	ldi	r24, 0x01	; 1
    bc16:	90 e0       	ldi	r25, 0x00	; 0
    bc18:	90 93 fd 09 	sts	0x09FD, r25
    bc1c:	80 93 fc 09 	sts	0x09FC, r24
			//ai_state = AI_CHOOSING;//find the next thing to do
			ai_last_state = ai_state;
    bc20:	80 91 03 0a 	lds	r24, 0x0A03
    bc24:	80 93 0c 0a 	sts	0x0A0C, r24
			ai_state = AI_WAIT;
    bc28:	80 e1       	ldi	r24, 0x10	; 16
    bc2a:	80 93 03 0a 	sts	0x0A03, r24
			ai_targetx = (GetPrngNumber(0)%30)+15;
    bc2e:	80 e0       	ldi	r24, 0x00	; 0
    bc30:	90 e0       	ldi	r25, 0x00	; 0
    bc32:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    bc36:	6e e1       	ldi	r22, 0x1E	; 30
    bc38:	70 e0       	ldi	r23, 0x00	; 0
    bc3a:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    bc3e:	81 5f       	subi	r24, 0xF1	; 241
    bc40:	21 c0       	rjmp	.+66     	; 0xbc84 <AIUpdate+0x146>
		}
	}else if(ai_state == AI_SHORTCUT){//send a card somewhere
    bc42:	84 30       	cpi	r24, 0x04	; 4
    bc44:	11 f5       	brne	.+68     	; 0xbc8a <AIUpdate+0x14c>
		ai_freshdeck = 0;
    bc46:	10 92 6f 0a 	sts	0x0A6F, r1
padstate = BTN_SR;
    bc4a:	80 e0       	ldi	r24, 0x00	; 0
    bc4c:	98 e0       	ldi	r25, 0x08	; 8
    bc4e:	90 93 fd 09 	sts	0x09FD, r25
    bc52:	80 93 fc 09 	sts	0x09FC, r24
		if(!AIMoveToCard(0)){
    bc56:	80 e0       	ldi	r24, 0x00	; 0
    bc58:	0e 94 8d 53 	call	0xa71a	; 0xa71a <AIMoveToCard>
    bc5c:	88 23       	and	r24, r24
    bc5e:	d1 f5       	brne	.+116    	; 0xbcd4 <AIUpdate+0x196>
			padstate = (BTN_B);//shortcut it to the base stack
    bc60:	81 e0       	ldi	r24, 0x01	; 1
    bc62:	90 e0       	ldi	r25, 0x00	; 0
    bc64:	90 93 fd 09 	sts	0x09FD, r25
    bc68:	80 93 fc 09 	sts	0x09FC, r24
			//ai_state = AI_CHOOSING;//find the next thing to do
			ai_last_source = ai_target_stack;
    bc6c:	80 91 ea 0d 	lds	r24, 0x0DEA
    bc70:	80 93 6c 0a 	sts	0x0A6C, r24
				ai_last_state = ai_state;
    bc74:	80 91 03 0a 	lds	r24, 0x0A03
    bc78:	80 93 0c 0a 	sts	0x0A0C, r24
			ai_state = AI_HOLD;//have to hold B for 1 frame before pushing A for shortcut to work...
    bc7c:	80 e2       	ldi	r24, 0x20	; 32
    bc7e:	80 93 03 0a 	sts	0x0A03, r24
			ai_targetx = 8;
    bc82:	88 e0       	ldi	r24, 0x08	; 8
    bc84:	80 93 70 0a 	sts	0x0A70, r24
    bc88:	08 95       	ret
		}
	}else if(ai_state == AI_DRAW){//draw a card/cards
    bc8a:	88 30       	cpi	r24, 0x08	; 8
    bc8c:	19 f5       	brne	.+70     	; 0xbcd4 <AIUpdate+0x196>
//TriggerFx(1,255,true);
padstate = BTN_SR;
    bc8e:	80 e0       	ldi	r24, 0x00	; 0
    bc90:	98 e0       	ldi	r25, 0x08	; 8
    bc92:	90 93 fd 09 	sts	0x09FD, r25
    bc96:	80 93 fc 09 	sts	0x09FC, r24
			if(!AIMoveToCard(0)){
    bc9a:	80 e0       	ldi	r24, 0x00	; 0
    bc9c:	0e 94 8d 53 	call	0xa71a	; 0xa71a <AIMoveToCard>
    bca0:	88 23       	and	r24, r24
    bca2:	c1 f4       	brne	.+48     	; 0xbcd4 <AIUpdate+0x196>
				padstate = BTN_Y;
    bca4:	82 e0       	ldi	r24, 0x02	; 2
    bca6:	90 e0       	ldi	r25, 0x00	; 0
    bca8:	90 93 fd 09 	sts	0x09FD, r25
    bcac:	80 93 fc 09 	sts	0x09FC, r24
				//ai_state = AI_CHOOSING;//find the next thing to do
				ai_last_state = ai_state;
    bcb0:	80 91 03 0a 	lds	r24, 0x0A03
    bcb4:	80 93 0c 0a 	sts	0x0A0C, r24
				ai_state = AI_WAIT;
    bcb8:	80 e1       	ldi	r24, 0x10	; 16
    bcba:	80 93 03 0a 	sts	0x0A03, r24
				ai_targetx = (GetPrngNumber(0)%30)+15;
    bcbe:	80 e0       	ldi	r24, 0x00	; 0
    bcc0:	90 e0       	ldi	r25, 0x00	; 0
    bcc2:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    bcc6:	6e e1       	ldi	r22, 0x1E	; 30
    bcc8:	70 e0       	ldi	r23, 0x00	; 0
    bcca:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    bcce:	81 5f       	subi	r24, 0xF1	; 241
    bcd0:	80 93 70 0a 	sts	0x0A70, r24
    bcd4:	08 95       	ret

0000bcd6 <DrawStack>:
		SetTileClipped(x+3,y+5,GFX_CARD_FACEDOWN_START+8+fdt);

	}
}

inline void DrawStack(uint8_t s){
    bcd6:	a0 e0       	ldi	r26, 0x00	; 0
    bcd8:	b0 e0       	ldi	r27, 0x00	; 0
    bcda:	e1 e7       	ldi	r30, 0x71	; 113
    bcdc:	fe e5       	ldi	r31, 0x5E	; 94
    bcde:	0c 94 8b 75 	jmp	0xeb16	; 0xeb16 <__prologue_saves__+0x4>
	if(!stacks[s].numcards){//no cards, draw a placeholder card
    bce2:	c8 2e       	mov	r12, r24
    bce4:	dd 24       	eor	r13, r13
    bce6:	8c e1       	ldi	r24, 0x1C	; 28
    bce8:	90 e0       	ldi	r25, 0x00	; 0
    bcea:	c8 9e       	mul	r12, r24
    bcec:	80 01       	movw	r16, r0
    bcee:	c9 9e       	mul	r12, r25
    bcf0:	10 0d       	add	r17, r0
    bcf2:	d8 9e       	mul	r13, r24
    bcf4:	10 0d       	add	r17, r0
    bcf6:	11 24       	eor	r1, r1
    bcf8:	00 0f       	add	r16, r16
    bcfa:	11 1f       	adc	r17, r17
    bcfc:	0d 58       	subi	r16, 0x8D	; 141
    bcfe:	15 4f       	sbci	r17, 0xF5	; 245
    bd00:	d8 01       	movw	r26, r16
    bd02:	2c 91       	ld	r18, X
    bd04:	22 23       	and	r18, r18
    bd06:	79 f4       	brne	.+30     	; 0xbd26 <DrawStack+0x50>
		DrawCard(stacks[s].x,stacks[s].y,MAX_CARDS);
    bd08:	88 e3       	ldi	r24, 0x38	; 56
    bd0a:	90 e0       	ldi	r25, 0x00	; 0
    bd0c:	c8 9e       	mul	r12, r24
    bd0e:	f0 01       	movw	r30, r0
    bd10:	c9 9e       	mul	r12, r25
    bd12:	f0 0d       	add	r31, r0
    bd14:	d8 9e       	mul	r13, r24
    bd16:	f0 0d       	add	r31, r0
    bd18:	11 24       	eor	r1, r1
    bd1a:	ef 58       	subi	r30, 0x8F	; 143
    bd1c:	f5 4f       	sbci	r31, 0xF5	; 245
    bd1e:	80 81       	ld	r24, Z
    bd20:	61 81       	ldd	r22, Z+1	; 0x01
    bd22:	44 e3       	ldi	r20, 0x34	; 52
    bd24:	2d c2       	rjmp	.+1114   	; 0xc180 <DrawStack+0x4aa>
		return;
	}
//stacks[s].display = VERTICAL;
		if(stacks[s].display & VERTICAL){//1 of 7 stacks
    bd26:	88 e3       	ldi	r24, 0x38	; 56
    bd28:	90 e0       	ldi	r25, 0x00	; 0
    bd2a:	c8 9e       	mul	r12, r24
    bd2c:	e0 01       	movw	r28, r0
    bd2e:	c9 9e       	mul	r12, r25
    bd30:	d0 0d       	add	r29, r0
    bd32:	d8 9e       	mul	r13, r24
    bd34:	d0 0d       	add	r29, r0
    bd36:	11 24       	eor	r1, r1
    bd38:	cf 58       	subi	r28, 0x8F	; 143
    bd3a:	d5 4f       	sbci	r29, 0xF5	; 245
    bd3c:	8b 81       	ldd	r24, Y+3	; 0x03
    bd3e:	82 ff       	sbrs	r24, 2
    bd40:	0b c1       	rjmp	.+534    	; 0xbf58 <DrawStack+0x282>
    bd42:	ff 24       	eor	r15, r15
			for(uint8_t i=0;i<stacks[s].numcards;i++){
    bd44:	58 01       	movw	r10, r16
				if(i == stacks[s].numcards-1){//last card, draw it fully
					DrawCard(stacks[s].x,stacks[s].y+i,stacks[s].cards[i]);
				}else{//a card that will have another card on top, just draw the top part
					DrawCardTop(stacks[s].x,stacks[s].y+i,stacks[s].cards[i]);
    bd46:	8e 01       	movw	r16, r28
    bd48:	6e 01       	movw	r12, r28
    bd4a:	08 94       	sec
    bd4c:	c1 1c       	adc	r12, r1
    bd4e:	d1 1c       	adc	r13, r1
		SetTileClipped(x+0,y+0,GFX_RANK_SMALL_TOP_START+rankoff+cardoff);
		SetTileClipped(x+1,y+0,GFX_SUIT_SMALL_TOP_START+suitoff);
		SetTileClipped(x+2,y+0,GFX_BLNK_SMALL_TOP_START+0);
		SetTileClipped(x+3,y+0,GFX_CRNR_SMALL_TOP_START+0);
	}else{//face down
		SetTileClipped(x+0,y+0,GFX_CARD_FACEDOWN_START+0+(card_set*9));
    bd50:	e9 e0       	ldi	r30, 0x09	; 9
    bd52:	9e 2e       	mov	r9, r30
    bd54:	7d e4       	ldi	r23, 0x4D	; 77
    bd56:	87 2e       	mov	r8, r23
		return;
	}
//stacks[s].display = VERTICAL;
		if(stacks[s].display & VERTICAL){//1 of 7 stacks
			for(uint8_t i=0;i<stacks[s].numcards;i++){
				if(i == stacks[s].numcards-1){//last card, draw it fully
    bd58:	6c e4       	ldi	r22, 0x4C	; 76
    bd5a:	e6 2e       	mov	r14, r22
    bd5c:	f7 c0       	rjmp	.+494    	; 0xbf4c <DrawStack+0x276>
    bd5e:	ef 2d       	mov	r30, r15
    bd60:	f0 e0       	ldi	r31, 0x00	; 0
    bd62:	90 e0       	ldi	r25, 0x00	; 0
    bd64:	01 97       	sbiw	r24, 0x01	; 1
    bd66:	e8 17       	cp	r30, r24
    bd68:	f9 07       	cpc	r31, r25
    bd6a:	59 f4       	brne	.+22     	; 0xbd82 <DrawStack+0xac>
					DrawCard(stacks[s].x,stacks[s].y+i,stacks[s].cards[i]);
    bd6c:	d6 01       	movw	r26, r12
    bd6e:	6c 91       	ld	r22, X
    bd70:	6f 0d       	add	r22, r15
    bd72:	e0 0f       	add	r30, r16
    bd74:	f1 1f       	adc	r31, r17
    bd76:	d8 01       	movw	r26, r16
    bd78:	8c 91       	ld	r24, X
    bd7a:	44 81       	ldd	r20, Z+4	; 0x04
    bd7c:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
    bd80:	e4 c0       	rjmp	.+456    	; 0xbf4a <DrawStack+0x274>
				}else{//a card that will have another card on top, just draw the top part
					DrawCardTop(stacks[s].x,stacks[s].y+i,stacks[s].cards[i]);
    bd82:	d8 01       	movw	r26, r16
    bd84:	4c 91       	ld	r20, X
    bd86:	d6 01       	movw	r26, r12
    bd88:	3c 91       	ld	r19, X
    bd8a:	3f 0d       	add	r19, r15
    bd8c:	e0 0f       	add	r30, r16
    bd8e:	f1 1f       	adc	r31, r17
    bd90:	84 81       	ldd	r24, Z+4	; 0x04
	}
	return 0;
}

inline void DrawCardTop(uint8_t x, uint8_t y, uint8_t c){
	uint8_t suitoff = (c&63)/13;
    bd92:	c8 2f       	mov	r28, r24
    bd94:	d0 e0       	ldi	r29, 0x00	; 0
    bd96:	cf 73       	andi	r28, 0x3F	; 63
    bd98:	d0 70       	andi	r29, 0x00	; 0
	uint8_t rankoff = 0;
	uint8_t cardoff = (c&63)%13;
	if((c & 63) > CLUB_KING)
    bd9a:	ca 31       	cpi	r28, 0x1A	; 26
    bd9c:	d1 05       	cpc	r29, r1
    bd9e:	14 f4       	brge	.+4      	; 0xbda4 <DrawStack+0xce>
    bda0:	20 e0       	ldi	r18, 0x00	; 0
    bda2:	01 c0       	rjmp	.+2      	; 0xbda6 <DrawStack+0xd0>
    bda4:	2d e0       	ldi	r18, 0x0D	; 13
		rankoff = 13;
//		suitoff = c/13;
//		rankoff = 13;
//	}
	if(c & FACEUP){
    bda6:	87 ff       	sbrs	r24, 7
    bda8:	6a c0       	rjmp	.+212    	; 0xbe7e <DrawStack+0x1a8>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    bdaa:	4e 31       	cpi	r20, 0x1E	; 30
    bdac:	d0 f4       	brcc	.+52     	; 0xbde2 <DrawStack+0x10c>
    bdae:	3a 31       	cpi	r19, 0x1A	; 26
    bdb0:	c0 f4       	brcc	.+48     	; 0xbde2 <DrawStack+0x10c>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    bdb2:	83 2f       	mov	r24, r19
    bdb4:	90 e0       	ldi	r25, 0x00	; 0
    bdb6:	fc 01       	movw	r30, r24
    bdb8:	55 e0       	ldi	r21, 0x05	; 5
    bdba:	ee 0f       	add	r30, r30
    bdbc:	ff 1f       	adc	r31, r31
    bdbe:	5a 95       	dec	r21
    bdc0:	e1 f7       	brne	.-8      	; 0xbdba <DrawStack+0xe4>
    bdc2:	88 0f       	add	r24, r24
    bdc4:	99 1f       	adc	r25, r25
    bdc6:	e8 1b       	sub	r30, r24
    bdc8:	f9 0b       	sbc	r31, r25
    bdca:	e4 0f       	add	r30, r20
    bdcc:	f1 1d       	adc	r31, r1
    bdce:	e0 5e       	subi	r30, 0xE0	; 224
    bdd0:	fe 4f       	sbci	r31, 0xFE	; 254
    bdd2:	ce 01       	movw	r24, r28
    bdd4:	6d e0       	ldi	r22, 0x0D	; 13
    bdd6:	70 e0       	ldi	r23, 0x00	; 0
    bdd8:	0e 94 76 75 	call	0xeaec	; 0xeaec <__divmodhi4>
    bddc:	88 5e       	subi	r24, 0xE8	; 232
    bdde:	82 0f       	add	r24, r18
    bde0:	80 83       	st	Z, r24
		c &= 63;
		//top
		SetTileClipped(x+0,y+0,GFX_RANK_SMALL_TOP_START+rankoff+cardoff);
		SetTileClipped(x+1,y+0,GFX_SUIT_SMALL_TOP_START+suitoff);
    bde2:	24 2f       	mov	r18, r20
    bde4:	2f 5f       	subi	r18, 0xFF	; 255
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    bde6:	2e 31       	cpi	r18, 0x1E	; 30
    bde8:	c8 f4       	brcc	.+50     	; 0xbe1c <DrawStack+0x146>
    bdea:	3a 31       	cpi	r19, 0x1A	; 26
    bdec:	b8 f4       	brcc	.+46     	; 0xbe1c <DrawStack+0x146>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    bdee:	83 2f       	mov	r24, r19
    bdf0:	90 e0       	ldi	r25, 0x00	; 0
    bdf2:	fc 01       	movw	r30, r24
    bdf4:	a5 e0       	ldi	r26, 0x05	; 5
    bdf6:	ee 0f       	add	r30, r30
    bdf8:	ff 1f       	adc	r31, r31
    bdfa:	aa 95       	dec	r26
    bdfc:	e1 f7       	brne	.-8      	; 0xbdf6 <DrawStack+0x120>
    bdfe:	88 0f       	add	r24, r24
    be00:	99 1f       	adc	r25, r25
    be02:	e8 1b       	sub	r30, r24
    be04:	f9 0b       	sbc	r31, r25
    be06:	e2 0f       	add	r30, r18
    be08:	f1 1d       	adc	r31, r1
    be0a:	e0 5e       	subi	r30, 0xE0	; 224
    be0c:	fe 4f       	sbci	r31, 0xFE	; 254
    be0e:	ce 01       	movw	r24, r28
    be10:	6d e0       	ldi	r22, 0x0D	; 13
    be12:	70 e0       	ldi	r23, 0x00	; 0
    be14:	0e 94 76 75 	call	0xeaec	; 0xeaec <__divmodhi4>
    be18:	6d 5a       	subi	r22, 0xAD	; 173
    be1a:	60 83       	st	Z, r22
		SetTileClipped(x+2,y+0,GFX_BLNK_SMALL_TOP_START+0);
    be1c:	24 2f       	mov	r18, r20
    be1e:	2e 5f       	subi	r18, 0xFE	; 254
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    be20:	2e 31       	cpi	r18, 0x1E	; 30
    be22:	98 f4       	brcc	.+38     	; 0xbe4a <DrawStack+0x174>
    be24:	3a 31       	cpi	r19, 0x1A	; 26
    be26:	88 f4       	brcc	.+34     	; 0xbe4a <DrawStack+0x174>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    be28:	83 2f       	mov	r24, r19
    be2a:	90 e0       	ldi	r25, 0x00	; 0
    be2c:	fc 01       	movw	r30, r24
    be2e:	65 e0       	ldi	r22, 0x05	; 5
    be30:	ee 0f       	add	r30, r30
    be32:	ff 1f       	adc	r31, r31
    be34:	6a 95       	dec	r22
    be36:	e1 f7       	brne	.-8      	; 0xbe30 <DrawStack+0x15a>
    be38:	88 0f       	add	r24, r24
    be3a:	99 1f       	adc	r25, r25
    be3c:	e8 1b       	sub	r30, r24
    be3e:	f9 0b       	sbc	r31, r25
    be40:	e2 0f       	add	r30, r18
    be42:	f1 1d       	adc	r31, r1
    be44:	e0 5e       	subi	r30, 0xE0	; 224
    be46:	fe 4f       	sbci	r31, 0xFE	; 254
    be48:	e0 82       	st	Z, r14
		SetTileClipped(x+3,y+0,GFX_CRNR_SMALL_TOP_START+0);
    be4a:	24 2f       	mov	r18, r20
    be4c:	2d 5f       	subi	r18, 0xFD	; 253
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    be4e:	2e 31       	cpi	r18, 0x1E	; 30
    be50:	08 f0       	brcs	.+2      	; 0xbe54 <DrawStack+0x17e>
    be52:	7b c0       	rjmp	.+246    	; 0xbf4a <DrawStack+0x274>
    be54:	3a 31       	cpi	r19, 0x1A	; 26
    be56:	08 f0       	brcs	.+2      	; 0xbe5a <DrawStack+0x184>
    be58:	78 c0       	rjmp	.+240    	; 0xbf4a <DrawStack+0x274>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    be5a:	83 2f       	mov	r24, r19
    be5c:	90 e0       	ldi	r25, 0x00	; 0
    be5e:	fc 01       	movw	r30, r24
    be60:	45 e0       	ldi	r20, 0x05	; 5
    be62:	ee 0f       	add	r30, r30
    be64:	ff 1f       	adc	r31, r31
    be66:	4a 95       	dec	r20
    be68:	e1 f7       	brne	.-8      	; 0xbe62 <DrawStack+0x18c>
    be6a:	88 0f       	add	r24, r24
    be6c:	99 1f       	adc	r25, r25
    be6e:	e8 1b       	sub	r30, r24
    be70:	f9 0b       	sbc	r31, r25
    be72:	e2 0f       	add	r30, r18
    be74:	f1 1d       	adc	r31, r1
    be76:	e0 5e       	subi	r30, 0xE0	; 224
    be78:	fe 4f       	sbci	r31, 0xFE	; 254
    be7a:	80 82       	st	Z, r8
    be7c:	66 c0       	rjmp	.+204    	; 0xbf4a <DrawStack+0x274>
	}else{//face down
		SetTileClipped(x+0,y+0,GFX_CARD_FACEDOWN_START+0+(card_set*9));
    be7e:	80 91 f6 09 	lds	r24, 0x09F6
    be82:	89 9d       	mul	r24, r9
    be84:	20 2d       	mov	r18, r0
    be86:	11 24       	eor	r1, r1
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    be88:	4e 31       	cpi	r20, 0x1E	; 30
    be8a:	a8 f4       	brcc	.+42     	; 0xbeb6 <DrawStack+0x1e0>
    be8c:	3a 31       	cpi	r19, 0x1A	; 26
    be8e:	98 f4       	brcc	.+38     	; 0xbeb6 <DrawStack+0x1e0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    be90:	83 2f       	mov	r24, r19
    be92:	90 e0       	ldi	r25, 0x00	; 0
    be94:	fc 01       	movw	r30, r24
    be96:	b5 e0       	ldi	r27, 0x05	; 5
    be98:	ee 0f       	add	r30, r30
    be9a:	ff 1f       	adc	r31, r31
    be9c:	ba 95       	dec	r27
    be9e:	e1 f7       	brne	.-8      	; 0xbe98 <DrawStack+0x1c2>
    bea0:	88 0f       	add	r24, r24
    bea2:	99 1f       	adc	r25, r25
    bea4:	e8 1b       	sub	r30, r24
    bea6:	f9 0b       	sbc	r31, r25
    bea8:	e4 0f       	add	r30, r20
    beaa:	f1 1d       	adc	r31, r1
    beac:	e0 5e       	subi	r30, 0xE0	; 224
    beae:	fe 4f       	sbci	r31, 0xFE	; 254
    beb0:	25 59       	subi	r18, 0x95	; 149
    beb2:	20 83       	st	Z, r18
    beb4:	2b 56       	subi	r18, 0x6B	; 107
		SetTileClipped(x+1,y+0,GFX_CARD_FACEDOWN_START+1+(card_set*9));
    beb6:	54 2f       	mov	r21, r20
    beb8:	5f 5f       	subi	r21, 0xFF	; 255
    beba:	62 2f       	mov	r22, r18
    bebc:	64 5a       	subi	r22, 0xA4	; 164
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    bebe:	5e 31       	cpi	r21, 0x1E	; 30
    bec0:	a8 f4       	brcc	.+42     	; 0xbeec <DrawStack+0x216>
    bec2:	3a 31       	cpi	r19, 0x1A	; 26
    bec4:	98 f4       	brcc	.+38     	; 0xbeec <DrawStack+0x216>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    bec6:	83 2f       	mov	r24, r19
    bec8:	90 e0       	ldi	r25, 0x00	; 0
    beca:	fc 01       	movw	r30, r24
    becc:	75 e0       	ldi	r23, 0x05	; 5
    bece:	ee 0f       	add	r30, r30
    bed0:	ff 1f       	adc	r31, r31
    bed2:	7a 95       	dec	r23
    bed4:	e1 f7       	brne	.-8      	; 0xbece <DrawStack+0x1f8>
    bed6:	88 0f       	add	r24, r24
    bed8:	99 1f       	adc	r25, r25
    beda:	e8 1b       	sub	r30, r24
    bedc:	f9 0b       	sbc	r31, r25
    bede:	e5 0f       	add	r30, r21
    bee0:	f1 1d       	adc	r31, r1
    bee2:	e0 5e       	subi	r30, 0xE0	; 224
    bee4:	fe 4f       	sbci	r31, 0xFE	; 254
    bee6:	24 59       	subi	r18, 0x94	; 148
    bee8:	20 83       	st	Z, r18
    beea:	2c 56       	subi	r18, 0x6C	; 108
		SetTileClipped(x+2,y+0,GFX_CARD_FACEDOWN_START+1+(card_set*9));
    beec:	54 2f       	mov	r21, r20
    beee:	5e 5f       	subi	r21, 0xFE	; 254
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    bef0:	5e 31       	cpi	r21, 0x1E	; 30
    bef2:	a0 f4       	brcc	.+40     	; 0xbf1c <DrawStack+0x246>
    bef4:	3a 31       	cpi	r19, 0x1A	; 26
    bef6:	90 f4       	brcc	.+36     	; 0xbf1c <DrawStack+0x246>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    bef8:	83 2f       	mov	r24, r19
    befa:	90 e0       	ldi	r25, 0x00	; 0
    befc:	fc 01       	movw	r30, r24
    befe:	a5 e0       	ldi	r26, 0x05	; 5
    bf00:	ee 0f       	add	r30, r30
    bf02:	ff 1f       	adc	r31, r31
    bf04:	aa 95       	dec	r26
    bf06:	e1 f7       	brne	.-8      	; 0xbf00 <DrawStack+0x22a>
    bf08:	88 0f       	add	r24, r24
    bf0a:	99 1f       	adc	r25, r25
    bf0c:	e8 1b       	sub	r30, r24
    bf0e:	f9 0b       	sbc	r31, r25
    bf10:	e5 0f       	add	r30, r21
    bf12:	f1 1d       	adc	r31, r1
    bf14:	e0 5e       	subi	r30, 0xE0	; 224
    bf16:	fe 4f       	sbci	r31, 0xFE	; 254
    bf18:	60 5f       	subi	r22, 0xF0	; 240
    bf1a:	60 83       	st	Z, r22
		SetTileClipped(x+3,y+0,GFX_CARD_FACEDOWN_START+2+(card_set*9));
    bf1c:	4d 5f       	subi	r20, 0xFD	; 253
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    bf1e:	4e 31       	cpi	r20, 0x1E	; 30
    bf20:	a0 f4       	brcc	.+40     	; 0xbf4a <DrawStack+0x274>
    bf22:	3a 31       	cpi	r19, 0x1A	; 26
    bf24:	90 f4       	brcc	.+36     	; 0xbf4a <DrawStack+0x274>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    bf26:	83 2f       	mov	r24, r19
    bf28:	90 e0       	ldi	r25, 0x00	; 0
    bf2a:	fc 01       	movw	r30, r24
    bf2c:	35 e0       	ldi	r19, 0x05	; 5
    bf2e:	ee 0f       	add	r30, r30
    bf30:	ff 1f       	adc	r31, r31
    bf32:	3a 95       	dec	r19
    bf34:	e1 f7       	brne	.-8      	; 0xbf2e <DrawStack+0x258>
    bf36:	88 0f       	add	r24, r24
    bf38:	99 1f       	adc	r25, r25
    bf3a:	e8 1b       	sub	r30, r24
    bf3c:	f9 0b       	sbc	r31, r25
    bf3e:	e4 0f       	add	r30, r20
    bf40:	f1 1d       	adc	r31, r1
    bf42:	e0 5e       	subi	r30, 0xE0	; 224
    bf44:	fe 4f       	sbci	r31, 0xFE	; 254
    bf46:	23 59       	subi	r18, 0x93	; 147
    bf48:	20 83       	st	Z, r18
		DrawCard(stacks[s].x,stacks[s].y,MAX_CARDS);
		return;
	}
//stacks[s].display = VERTICAL;
		if(stacks[s].display & VERTICAL){//1 of 7 stacks
			for(uint8_t i=0;i<stacks[s].numcards;i++){
    bf4a:	f3 94       	inc	r15
    bf4c:	f5 01       	movw	r30, r10
    bf4e:	80 81       	ld	r24, Z
    bf50:	f8 16       	cp	r15, r24
    bf52:	08 f4       	brcc	.+2      	; 0xbf56 <DrawStack+0x280>
    bf54:	04 cf       	rjmp	.-504    	; 0xbd5e <DrawStack+0x88>
    bf56:	30 c1       	rjmp	.+608    	; 0xc1b8 <DrawStack+0x4e2>
    bf58:	7e 01       	movw	r14, r28
    bf5a:	08 94       	sec
    bf5c:	e1 1c       	adc	r14, r1
    bf5e:	f1 1c       	adc	r15, r1
					DrawCard(stacks[s].x,stacks[s].y+i,stacks[s].cards[i]);
				}else{//a card that will have another card on top, just draw the top part
					DrawCardTop(stacks[s].x,stacks[s].y+i,stacks[s].cards[i]);
				}
			}
		}else if(stacks[s].display & HORIZONTAL){//the horizontal draw stack next to deck the player picks a card from
    bf60:	81 ff       	sbrs	r24, 1
    bf62:	08 c1       	rjmp	.+528    	; 0xc174 <DrawStack+0x49e>
			uint8_t xo = 0;

			DrawCard(stacks[s].x,stacks[s].y,CARD_PLACEHOLDER);
    bf64:	88 81       	ld	r24, Y
    bf66:	69 81       	ldd	r22, Y+1	; 0x01
    bf68:	44 e3       	ldi	r20, 0x34	; 52
    bf6a:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>

			if(game_state & DRAW_THREE){//draw 3 cards at a time
    bf6e:	80 91 06 0a 	lds	r24, 0x0A06
    bf72:	80 ff       	sbrs	r24, 0
    bf74:	f9 c0       	rjmp	.+498    	; 0xc168 <DrawStack+0x492>
    bf76:	10 e0       	ldi	r17, 0x00	; 0
				for(uint8_t i=0;i<CARD_TILES_V;i++){
					SetTile(stacks[s].x+CARD_TILES_H+0,stacks[s].y+i,0);//blank out right edges
    bf78:	5e 01       	movw	r10, r28
    bf7a:	e7 01       	movw	r28, r14
    bf7c:	d5 01       	movw	r26, r10
    bf7e:	8c 91       	ld	r24, X
    bf80:	68 81       	ld	r22, Y
    bf82:	61 0f       	add	r22, r17
    bf84:	8c 5f       	subi	r24, 0xFC	; 252
    bf86:	40 e0       	ldi	r20, 0x00	; 0
    bf88:	50 e0       	ldi	r21, 0x00	; 0
    bf8a:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
					SetTile(stacks[s].x+CARD_TILES_H+1,stacks[s].y+i,0);
    bf8e:	f5 01       	movw	r30, r10
    bf90:	80 81       	ld	r24, Z
    bf92:	68 81       	ld	r22, Y
    bf94:	61 0f       	add	r22, r17
    bf96:	8b 5f       	subi	r24, 0xFB	; 251
    bf98:	40 e0       	ldi	r20, 0x00	; 0
    bf9a:	50 e0       	ldi	r21, 0x00	; 0
    bf9c:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			uint8_t xo = 0;

			DrawCard(stacks[s].x,stacks[s].y,CARD_PLACEHOLDER);

			if(game_state & DRAW_THREE){//draw 3 cards at a time
				for(uint8_t i=0;i<CARD_TILES_V;i++){
    bfa0:	1f 5f       	subi	r17, 0xFF	; 255
    bfa2:	16 30       	cpi	r17, 0x06	; 6
    bfa4:	59 f7       	brne	.-42     	; 0xbf7c <DrawStack+0x2a6>
					SetTile(stacks[s].x+CARD_TILES_H+0,stacks[s].y+i,0);//blank out right edges
					SetTile(stacks[s].x+CARD_TILES_H+1,stacks[s].y+i,0);
				}
				if(stacks[s].numcards > 1)
    bfa6:	8c e1       	ldi	r24, 0x1C	; 28
    bfa8:	90 e0       	ldi	r25, 0x00	; 0
    bfaa:	c8 9e       	mul	r12, r24
    bfac:	f0 01       	movw	r30, r0
    bfae:	c9 9e       	mul	r12, r25
    bfb0:	f0 0d       	add	r31, r0
    bfb2:	d8 9e       	mul	r13, r24
    bfb4:	f0 0d       	add	r31, r0
    bfb6:	11 24       	eor	r1, r1
    bfb8:	ee 0f       	add	r30, r30
    bfba:	ff 1f       	adc	r31, r31
    bfbc:	ed 58       	subi	r30, 0x8D	; 141
    bfbe:	f5 4f       	sbci	r31, 0xF5	; 245
    bfc0:	e0 81       	ld	r30, Z
    bfc2:	bb 24       	eor	r11, r11
    bfc4:	e2 30       	cpi	r30, 0x02	; 2
    bfc6:	10 f0       	brcs	.+4      	; 0xbfcc <DrawStack+0x2f6>
    bfc8:	bb 24       	eor	r11, r11
    bfca:	b3 94       	inc	r11
					xo++;	
				if(stacks[s].numcards > 2)
    bfcc:	e3 30       	cpi	r30, 0x03	; 3
    bfce:	08 f0       	brcs	.+2      	; 0xbfd2 <DrawStack+0x2fc>
					xo++;
    bfd0:	b3 94       	inc	r11

				DrawCard(stacks[s].x+xo,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
    bfd2:	88 e3       	ldi	r24, 0x38	; 56
    bfd4:	90 e0       	ldi	r25, 0x00	; 0
    bfd6:	c8 9e       	mul	r12, r24
    bfd8:	80 01       	movw	r16, r0
    bfda:	c9 9e       	mul	r12, r25
    bfdc:	10 0d       	add	r17, r0
    bfde:	d8 9e       	mul	r13, r24
    bfe0:	10 0d       	add	r17, r0
    bfe2:	11 24       	eor	r1, r1
    bfe4:	0f 58       	subi	r16, 0x8F	; 143
    bfe6:	15 4f       	sbci	r17, 0xF5	; 245
    bfe8:	d8 01       	movw	r26, r16
    bfea:	8d 91       	ld	r24, X+
    bfec:	7d 01       	movw	r14, r26
    bfee:	98 01       	movw	r18, r16
    bff0:	2e 0f       	add	r18, r30
    bff2:	31 1d       	adc	r19, r1
    bff4:	f9 01       	movw	r30, r18
    bff6:	8b 0d       	add	r24, r11
    bff8:	d8 01       	movw	r26, r16
    bffa:	11 96       	adiw	r26, 0x01	; 1
    bffc:	6c 91       	ld	r22, X
    bffe:	43 81       	ldd	r20, Z+3	; 0x03
    c000:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
    c004:	88 24       	eor	r8, r8
    c006:	99 24       	eor	r9, r9
				for(uint8_t i=0;i<2;i++){
					if(xo){
						DrawCardLeftSlice(stacks[s].x+(xo-1),stacks[s].y,stacks[s].cards[stacks[s].numcards-(2+i)]);
    c008:	38 01       	movw	r6, r16
    c00a:	27 01       	movw	r4, r14
	}
}

inline void DrawCardLeftSlice(uint8_t x, uint8_t y, uint8_t c){
	uint8_t rankoff = 0;
	uint8_t cardoff = (c&63)%13;
    c00c:	8c e1       	ldi	r24, 0x1C	; 28
    c00e:	90 e0       	ldi	r25, 0x00	; 0
    c010:	c8 9e       	mul	r12, r24
    c012:	e0 01       	movw	r28, r0
    c014:	c9 9e       	mul	r12, r25
    c016:	d0 0d       	add	r29, r0
    c018:	d8 9e       	mul	r13, r24
    c01a:	d0 0d       	add	r29, r0
    c01c:	11 24       	eor	r1, r1
    c01e:	cc 0f       	add	r28, r28
    c020:	dd 1f       	adc	r29, r29
    c022:	cd 58       	subi	r28, 0x8D	; 141
    c024:	d5 4f       	sbci	r29, 0xF5	; 245
    c026:	e0 e5       	ldi	r30, 0x50	; 80
    c028:	ee 2e       	mov	r14, r30
				if(stacks[s].numcards > 2)
					xo++;

				DrawCard(stacks[s].x+xo,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
				for(uint8_t i=0;i<2;i++){
					if(xo){
    c02a:	7e e4       	ldi	r23, 0x4E	; 78
    c02c:	f7 2e       	mov	r15, r23
    c02e:	bb 20       	and	r11, r11
    c030:	09 f4       	brne	.+2      	; 0xc034 <DrawStack+0x35e>
    c032:	91 c0       	rjmp	.+290    	; 0xc156 <DrawStack+0x480>
						DrawCardLeftSlice(stacks[s].x+(xo-1),stacks[s].y,stacks[s].cards[stacks[s].numcards-(2+i)]);
    c034:	f3 01       	movw	r30, r6
    c036:	40 81       	ld	r20, Z
    c038:	41 50       	subi	r20, 0x01	; 1
    c03a:	4b 0d       	add	r20, r11
    c03c:	d2 01       	movw	r26, r4
    c03e:	1c 91       	ld	r17, X
	}
}

inline void DrawCardLeftSlice(uint8_t x, uint8_t y, uint8_t c){
	uint8_t rankoff = 0;
	uint8_t cardoff = (c&63)%13;
    c040:	e8 81       	ld	r30, Y
    c042:	f0 e0       	ldi	r31, 0x00	; 0
    c044:	32 97       	sbiw	r30, 0x02	; 2
    c046:	e8 19       	sub	r30, r8
    c048:	f9 09       	sbc	r31, r9
    c04a:	e6 0d       	add	r30, r6
    c04c:	f7 1d       	adc	r31, r7
    c04e:	84 81       	ldd	r24, Z+4	; 0x04
    c050:	28 2f       	mov	r18, r24
    c052:	30 e0       	ldi	r19, 0x00	; 0
    c054:	2f 73       	andi	r18, 0x3F	; 63
    c056:	30 70       	andi	r19, 0x00	; 0
	if((c & 63) > CLUB_KING)
    c058:	2a 31       	cpi	r18, 0x1A	; 26
    c05a:	31 05       	cpc	r19, r1
    c05c:	14 f4       	brge	.+4      	; 0xc062 <DrawStack+0x38c>
    c05e:	00 e0       	ldi	r16, 0x00	; 0
    c060:	01 c0       	rjmp	.+2      	; 0xc064 <DrawStack+0x38e>
    c062:	0d e0       	ldi	r16, 0x0D	; 13
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    c064:	4e 31       	cpi	r20, 0x1E	; 30
    c066:	08 f0       	brcs	.+2      	; 0xc06a <DrawStack+0x394>
    c068:	75 c0       	rjmp	.+234    	; 0xc154 <DrawStack+0x47e>
    c06a:	1a 31       	cpi	r17, 0x1A	; 26
    c06c:	08 f0       	brcs	.+2      	; 0xc070 <DrawStack+0x39a>
    c06e:	8b c0       	rjmp	.+278    	; 0xc186 <DrawStack+0x4b0>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    c070:	81 2f       	mov	r24, r17
    c072:	90 e0       	ldi	r25, 0x00	; 0
    c074:	fc 01       	movw	r30, r24
    c076:	65 e0       	ldi	r22, 0x05	; 5
    c078:	ee 0f       	add	r30, r30
    c07a:	ff 1f       	adc	r31, r31
    c07c:	6a 95       	dec	r22
    c07e:	e1 f7       	brne	.-8      	; 0xc078 <DrawStack+0x3a2>
    c080:	88 0f       	add	r24, r24
    c082:	99 1f       	adc	r25, r25
    c084:	e8 1b       	sub	r30, r24
    c086:	f9 0b       	sbc	r31, r25
    c088:	e4 0f       	add	r30, r20
    c08a:	f1 1d       	adc	r31, r1
    c08c:	e0 5e       	subi	r30, 0xE0	; 224
    c08e:	fe 4f       	sbci	r31, 0xFE	; 254
    c090:	c9 01       	movw	r24, r18
    c092:	6d e0       	ldi	r22, 0x0D	; 13
    c094:	70 e0       	ldi	r23, 0x00	; 0
    c096:	0e 94 76 75 	call	0xeaec	; 0xeaec <__divmodhi4>
    c09a:	88 5e       	subi	r24, 0xE8	; 232
    c09c:	80 0f       	add	r24, r16
    c09e:	80 83       	st	Z, r24
    c0a0:	72 c0       	rjmp	.+228    	; 0xc186 <DrawStack+0x4b0>

				DrawCard(stacks[s].x+xo,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
				for(uint8_t i=0;i<2;i++){
					if(xo){
						DrawCardLeftSlice(stacks[s].x+(xo-1),stacks[s].y,stacks[s].cards[stacks[s].numcards-(2+i)]);
						xo--;
    c0a2:	82 2f       	mov	r24, r18
    c0a4:	90 e0       	ldi	r25, 0x00	; 0
    c0a6:	fc 01       	movw	r30, r24
    c0a8:	b5 e0       	ldi	r27, 0x05	; 5
    c0aa:	ee 0f       	add	r30, r30
    c0ac:	ff 1f       	adc	r31, r31
    c0ae:	ba 95       	dec	r27
    c0b0:	e1 f7       	brne	.-8      	; 0xc0aa <DrawStack+0x3d4>
    c0b2:	88 0f       	add	r24, r24
    c0b4:	99 1f       	adc	r25, r25
    c0b6:	e8 1b       	sub	r30, r24
    c0b8:	f9 0b       	sbc	r31, r25
    c0ba:	e4 0f       	add	r30, r20
    c0bc:	f1 1d       	adc	r31, r1
    c0be:	e0 5e       	subi	r30, 0xE0	; 224
    c0c0:	fe 4f       	sbci	r31, 0xFE	; 254
    c0c2:	f0 82       	st	Z, r15
    c0c4:	65 c0       	rjmp	.+202    	; 0xc190 <DrawStack+0x4ba>
    c0c6:	82 2f       	mov	r24, r18
    c0c8:	90 e0       	ldi	r25, 0x00	; 0
    c0ca:	fc 01       	movw	r30, r24
    c0cc:	75 e0       	ldi	r23, 0x05	; 5
    c0ce:	ee 0f       	add	r30, r30
    c0d0:	ff 1f       	adc	r31, r31
    c0d2:	7a 95       	dec	r23
    c0d4:	e1 f7       	brne	.-8      	; 0xc0ce <DrawStack+0x3f8>
    c0d6:	88 0f       	add	r24, r24
    c0d8:	99 1f       	adc	r25, r25
    c0da:	e8 1b       	sub	r30, r24
    c0dc:	f9 0b       	sbc	r31, r25
    c0de:	e4 0f       	add	r30, r20
    c0e0:	f1 1d       	adc	r31, r1
    c0e2:	e0 5e       	subi	r30, 0xE0	; 224
    c0e4:	fe 4f       	sbci	r31, 0xFE	; 254
    c0e6:	f0 82       	st	Z, r15
    c0e8:	58 c0       	rjmp	.+176    	; 0xc19a <DrawStack+0x4c4>
    c0ea:	82 2f       	mov	r24, r18
    c0ec:	90 e0       	ldi	r25, 0x00	; 0
    c0ee:	fc 01       	movw	r30, r24
    c0f0:	55 e0       	ldi	r21, 0x05	; 5
    c0f2:	ee 0f       	add	r30, r30
    c0f4:	ff 1f       	adc	r31, r31
    c0f6:	5a 95       	dec	r21
    c0f8:	e1 f7       	brne	.-8      	; 0xc0f2 <DrawStack+0x41c>
    c0fa:	88 0f       	add	r24, r24
    c0fc:	99 1f       	adc	r25, r25
    c0fe:	e8 1b       	sub	r30, r24
    c100:	f9 0b       	sbc	r31, r25
    c102:	e4 0f       	add	r30, r20
    c104:	f1 1d       	adc	r31, r1
    c106:	e0 5e       	subi	r30, 0xE0	; 224
    c108:	fe 4f       	sbci	r31, 0xFE	; 254
    c10a:	f0 82       	st	Z, r15
    c10c:	4b c0       	rjmp	.+150    	; 0xc1a4 <DrawStack+0x4ce>
    c10e:	82 2f       	mov	r24, r18
    c110:	90 e0       	ldi	r25, 0x00	; 0
    c112:	fc 01       	movw	r30, r24
    c114:	25 e0       	ldi	r18, 0x05	; 5
    c116:	ee 0f       	add	r30, r30
    c118:	ff 1f       	adc	r31, r31
    c11a:	2a 95       	dec	r18
    c11c:	e1 f7       	brne	.-8      	; 0xc116 <DrawStack+0x440>
    c11e:	88 0f       	add	r24, r24
    c120:	99 1f       	adc	r25, r25
    c122:	e8 1b       	sub	r30, r24
    c124:	f9 0b       	sbc	r31, r25
    c126:	e4 0f       	add	r30, r20
    c128:	f1 1d       	adc	r31, r1
    c12a:	e0 5e       	subi	r30, 0xE0	; 224
    c12c:	fe 4f       	sbci	r31, 0xFE	; 254
    c12e:	f0 82       	st	Z, r15
    c130:	3e c0       	rjmp	.+124    	; 0xc1ae <DrawStack+0x4d8>
    c132:	82 2f       	mov	r24, r18
    c134:	90 e0       	ldi	r25, 0x00	; 0
    c136:	fc 01       	movw	r30, r24
    c138:	a5 e0       	ldi	r26, 0x05	; 5
    c13a:	ee 0f       	add	r30, r30
    c13c:	ff 1f       	adc	r31, r31
    c13e:	aa 95       	dec	r26
    c140:	e1 f7       	brne	.-8      	; 0xc13a <DrawStack+0x464>
    c142:	88 0f       	add	r24, r24
    c144:	99 1f       	adc	r25, r25
    c146:	e8 1b       	sub	r30, r24
    c148:	f9 0b       	sbc	r31, r25
    c14a:	e4 0f       	add	r30, r20
    c14c:	f1 1d       	adc	r31, r1
    c14e:	e0 5e       	subi	r30, 0xE0	; 224
    c150:	fe 4f       	sbci	r31, 0xFE	; 254
    c152:	e0 82       	st	Z, r14
    c154:	ba 94       	dec	r11
    c156:	08 94       	sec
    c158:	81 1c       	adc	r8, r1
    c15a:	91 1c       	adc	r9, r1
					xo++;	
				if(stacks[s].numcards > 2)
					xo++;

				DrawCard(stacks[s].x+xo,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
				for(uint8_t i=0;i<2;i++){
    c15c:	b2 e0       	ldi	r27, 0x02	; 2
    c15e:	8b 16       	cp	r8, r27
    c160:	91 04       	cpc	r9, r1
    c162:	09 f0       	breq	.+2      	; 0xc166 <DrawStack+0x490>
    c164:	64 cf       	rjmp	.-312    	; 0xc02e <DrawStack+0x358>
    c166:	28 c0       	rjmp	.+80     	; 0xc1b8 <DrawStack+0x4e2>
						DrawCardLeftSlice(stacks[s].x+(xo-1),stacks[s].y,stacks[s].cards[stacks[s].numcards-(2+i)]);
						xo--;
					}
				}
			}else{//single card draw
				DrawCard(stacks[s].x,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
    c168:	f8 01       	movw	r30, r16
    c16a:	80 81       	ld	r24, Z
    c16c:	fe 01       	movw	r30, r28
    c16e:	e8 0f       	add	r30, r24
    c170:	f1 1d       	adc	r31, r1
    c172:	03 c0       	rjmp	.+6      	; 0xc17a <DrawStack+0x4a4>
			}
		}else{//a stack that is totally vertical. only the top card is shown, an no partial cards
			DrawCard(stacks[s].x,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
    c174:	fe 01       	movw	r30, r28
    c176:	e2 0f       	add	r30, r18
    c178:	f1 1d       	adc	r31, r1
    c17a:	88 81       	ld	r24, Y
    c17c:	69 81       	ldd	r22, Y+1	; 0x01
    c17e:	43 81       	ldd	r20, Z+3	; 0x03
    c180:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
    c184:	19 c0       	rjmp	.+50     	; 0xc1b8 <DrawStack+0x4e2>
	uint8_t rankoff = 0;
	uint8_t cardoff = (c&63)%13;
	if((c & 63) > CLUB_KING)
		rankoff = 13;
	SetTileClipped(x+0,y+0,GFX_RANK_SMALL_TOP_START+rankoff+cardoff);
	SetTileClipped(x+0,y+1,GFX_BLNK_LEFT_SIDE_START);
    c186:	21 2f       	mov	r18, r17
    c188:	2f 5f       	subi	r18, 0xFF	; 255
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    c18a:	2a 31       	cpi	r18, 0x1A	; 26
    c18c:	08 f4       	brcc	.+2      	; 0xc190 <DrawStack+0x4ba>
    c18e:	89 cf       	rjmp	.-238    	; 0xc0a2 <DrawStack+0x3cc>
	SetTileClipped(x+0,y+2,GFX_BLNK_LEFT_SIDE_START);
    c190:	21 2f       	mov	r18, r17
    c192:	2e 5f       	subi	r18, 0xFE	; 254
    c194:	2a 31       	cpi	r18, 0x1A	; 26
    c196:	08 f4       	brcc	.+2      	; 0xc19a <DrawStack+0x4c4>
    c198:	96 cf       	rjmp	.-212    	; 0xc0c6 <DrawStack+0x3f0>
	SetTileClipped(x+0,y+3,GFX_BLNK_LEFT_SIDE_START);
    c19a:	21 2f       	mov	r18, r17
    c19c:	2d 5f       	subi	r18, 0xFD	; 253
    c19e:	2a 31       	cpi	r18, 0x1A	; 26
    c1a0:	08 f4       	brcc	.+2      	; 0xc1a4 <DrawStack+0x4ce>
    c1a2:	a3 cf       	rjmp	.-186    	; 0xc0ea <DrawStack+0x414>
	SetTileClipped(x+0,y+4,GFX_BLNK_LEFT_SIDE_START);
    c1a4:	21 2f       	mov	r18, r17
    c1a6:	2c 5f       	subi	r18, 0xFC	; 252
    c1a8:	2a 31       	cpi	r18, 0x1A	; 26
    c1aa:	08 f4       	brcc	.+2      	; 0xc1ae <DrawStack+0x4d8>
    c1ac:	b0 cf       	rjmp	.-160    	; 0xc10e <DrawStack+0x438>
	SetTileClipped(x+0,y+5,GFX_CRNR_SMALL_BOT_START+0);
    c1ae:	21 2f       	mov	r18, r17
    c1b0:	2b 5f       	subi	r18, 0xFB	; 251
    c1b2:	2a 31       	cpi	r18, 0x1A	; 26
    c1b4:	78 f6       	brcc	.-98     	; 0xc154 <DrawStack+0x47e>
    c1b6:	bd cf       	rjmp	.-134    	; 0xc132 <DrawStack+0x45c>
				DrawCard(stacks[s].x,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
			}
		}else{//a stack that is totally vertical. only the top card is shown, an no partial cards
			DrawCard(stacks[s].x,stacks[s].y,stacks[s].cards[stacks[s].numcards-1]);
		}
}
    c1b8:	cd b7       	in	r28, 0x3d	; 61
    c1ba:	de b7       	in	r29, 0x3e	; 62
    c1bc:	e0 e1       	ldi	r30, 0x10	; 16
    c1be:	0c 94 a7 75 	jmp	0xeb4e	; 0xeb4e <__epilogue_restores__+0x4>

0000c1c2 <SPrintNumV>:
		}
		val<<=1;
	}
}

void SPrintNumV(int x,int y, uint16_t val){
    c1c2:	ff 92       	push	r15
    c1c4:	0f 93       	push	r16
    c1c6:	1f 93       	push	r17
    c1c8:	cf 93       	push	r28
    c1ca:	df 93       	push	r29
    c1cc:	f8 2e       	mov	r15, r24
    c1ce:	8b 01       	movw	r16, r22
    c1d0:	ea 01       	movw	r28, r20
//	unsigned char c,i;
	
	if(val > 9999UL)
    c1d2:	87 e2       	ldi	r24, 0x27	; 39
    c1d4:	40 31       	cpi	r20, 0x10	; 16
    c1d6:	58 07       	cpc	r21, r24
    c1d8:	18 f0       	brcs	.+6      	; 0xc1e0 <SPrintNumV+0x1e>
    c1da:	cf e0       	ldi	r28, 0x0F	; 15
    c1dc:	d7 e2       	ldi	r29, 0x27	; 39
    c1de:	04 c0       	rjmp	.+8      	; 0xc1e8 <SPrintNumV+0x26>
		val = 9999UL;

	if(val > 999)
    c1e0:	83 e0       	ldi	r24, 0x03	; 3
    c1e2:	48 3e       	cpi	r20, 0xE8	; 232
    c1e4:	58 07       	cpc	r21, r24
    c1e6:	80 f0       	brcs	.+32     	; 0xc208 <SPrintNumV+0x46>
		SetTile(x,y++,(val/1000)+NUM_START_TILE);
    c1e8:	20 2f       	mov	r18, r16
    c1ea:	0f 5f       	subi	r16, 0xFF	; 255
    c1ec:	1f 4f       	sbci	r17, 0xFF	; 255
    c1ee:	ce 01       	movw	r24, r28
    c1f0:	68 ee       	ldi	r22, 0xE8	; 232
    c1f2:	73 e0       	ldi	r23, 0x03	; 3
    c1f4:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    c1f8:	ab 01       	movw	r20, r22
    c1fa:	46 56       	subi	r20, 0x66	; 102
    c1fc:	5f 4f       	sbci	r21, 0xFF	; 255
    c1fe:	8f 2d       	mov	r24, r15
    c200:	62 2f       	mov	r22, r18
    c202:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
    c206:	03 c0       	rjmp	.+6      	; 0xc20e <SPrintNumV+0x4c>
	if(val > 99)
    c208:	44 36       	cpi	r20, 0x64	; 100
    c20a:	51 05       	cpc	r21, r1
    c20c:	a0 f0       	brcs	.+40     	; 0xc236 <SPrintNumV+0x74>
		SetTile(x,y++,((val%1000)/100)+NUM_START_TILE);
    c20e:	20 2f       	mov	r18, r16
    c210:	0f 5f       	subi	r16, 0xFF	; 255
    c212:	1f 4f       	sbci	r17, 0xFF	; 255
    c214:	ce 01       	movw	r24, r28
    c216:	68 ee       	ldi	r22, 0xE8	; 232
    c218:	73 e0       	ldi	r23, 0x03	; 3
    c21a:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    c21e:	64 e6       	ldi	r22, 0x64	; 100
    c220:	70 e0       	ldi	r23, 0x00	; 0
    c222:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    c226:	ab 01       	movw	r20, r22
    c228:	46 56       	subi	r20, 0x66	; 102
    c22a:	5f 4f       	sbci	r21, 0xFF	; 255
    c22c:	8f 2d       	mov	r24, r15
    c22e:	62 2f       	mov	r22, r18
    c230:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
    c234:	03 c0       	rjmp	.+6      	; 0xc23c <SPrintNumV+0x7a>
	if(val > 9)
    c236:	4a 30       	cpi	r20, 0x0A	; 10
    c238:	51 05       	cpc	r21, r1
    c23a:	98 f0       	brcs	.+38     	; 0xc262 <SPrintNumV+0xa0>
		SetTile(x,y++,((val%100)/10)+NUM_START_TILE);
    c23c:	20 2f       	mov	r18, r16
    c23e:	0f 5f       	subi	r16, 0xFF	; 255
    c240:	1f 4f       	sbci	r17, 0xFF	; 255
    c242:	ce 01       	movw	r24, r28
    c244:	64 e6       	ldi	r22, 0x64	; 100
    c246:	70 e0       	ldi	r23, 0x00	; 0
    c248:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    c24c:	6a e0       	ldi	r22, 0x0A	; 10
    c24e:	70 e0       	ldi	r23, 0x00	; 0
    c250:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    c254:	ab 01       	movw	r20, r22
    c256:	46 56       	subi	r20, 0x66	; 102
    c258:	5f 4f       	sbci	r21, 0xFF	; 255
    c25a:	8f 2d       	mov	r24, r15
    c25c:	62 2f       	mov	r22, r18
    c25e:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
//	if(val)
		SetTile(x,y,(val%10)+NUM_START_TILE);
    c262:	ce 01       	movw	r24, r28
    c264:	6a e0       	ldi	r22, 0x0A	; 10
    c266:	70 e0       	ldi	r23, 0x00	; 0
    c268:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    c26c:	ac 01       	movw	r20, r24
    c26e:	46 56       	subi	r20, 0x66	; 102
    c270:	5f 4f       	sbci	r21, 0xFF	; 255
    c272:	8f 2d       	mov	r24, r15
    c274:	60 2f       	mov	r22, r16
    c276:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			}
		}
		val=val/10;
	}
		*/
}
    c27a:	cd b7       	in	r28, 0x3d	; 61
    c27c:	de b7       	in	r29, 0x3e	; 62
    c27e:	e5 e0       	ldi	r30, 0x05	; 5
    c280:	0c 94 b2 75 	jmp	0xeb64	; 0xeb64 <__epilogue_restores__+0x1a>

0000c284 <EEPromScore>:
	if(game_state & NO_MUSIC){eeprom_data[15] |= 128;}else{eeprom_data[15] &= ~128;}
	if(game_state & SHOW_TIMER){eeprom_data[7] |= 128;}else{eeprom_data[7] &= ~128;}
}


uint8_t EEPromScore(uint8_t direction){//whole entry is stored in ram, either fill that ram or update eeprom with it
    c284:	a0 e2       	ldi	r26, 0x20	; 32
    c286:	b0 e0       	ldi	r27, 0x00	; 0
    c288:	e8 e4       	ldi	r30, 0x48	; 72
    c28a:	f1 e6       	ldi	r31, 0x61	; 97
    c28c:	0c 94 98 75 	jmp	0xeb30	; 0xeb30 <__prologue_saves__+0x1e>
    c290:	18 2f       	mov	r17, r24

	struct EepromBlockStruct ebs;
	ebs.id = SOLITAIRE_EEPROM_ID;
    c292:	88 e5       	ldi	r24, 0x58	; 88
    c294:	90 e0       	ldi	r25, 0x00	; 0
    c296:	9a 83       	std	Y+2, r25	; 0x02
    c298:	89 83       	std	Y+1, r24	; 0x01

	if(EepromReadBlock(ebs.id, &ebs)){//doesn't exist, try to make it
    c29a:	be 01       	movw	r22, r28
    c29c:	6f 5f       	subi	r22, 0xFF	; 255
    c29e:	7f 4f       	sbci	r23, 0xFF	; 255
    c2a0:	0e 94 34 48 	call	0x9068	; 0x9068 <EepromReadBlock>
    c2a4:	88 23       	and	r24, r24
    c2a6:	79 f0       	breq	.+30     	; 0xc2c6 <EEPromScore+0x42>
    c2a8:	e4 eb       	ldi	r30, 0xB4	; 180
    c2aa:	f3 e8       	ldi	r31, 0x83	; 131
    c2ac:	de 01       	movw	r26, r28
    c2ae:	13 96       	adiw	r26, 0x03	; 3
		for(uint8_t i=0;i<30;i++)
				ebs.data[i] = pgm_read_byte(&EEPROMdefault[i]);
    c2b0:	84 91       	lpm	r24, Z+
    c2b2:	8d 93       	st	X+, r24
    c2b4:	31 96       	adiw	r30, 0x01	; 1

	struct EepromBlockStruct ebs;
	ebs.id = SOLITAIRE_EEPROM_ID;

	if(EepromReadBlock(ebs.id, &ebs)){//doesn't exist, try to make it
		for(uint8_t i=0;i<30;i++)
    c2b6:	83 e8       	ldi	r24, 0x83	; 131
    c2b8:	e2 3d       	cpi	r30, 0xD2	; 210
    c2ba:	f8 07       	cpc	r31, r24
    c2bc:	c9 f7       	brne	.-14     	; 0xc2b0 <EEPromScore+0x2c>
				ebs.data[i] = pgm_read_byte(&EEPROMdefault[i]);

		EepromWriteBlock(&ebs);
    c2be:	ce 01       	movw	r24, r28
    c2c0:	01 96       	adiw	r24, 0x01	; 1
    c2c2:	0e 94 74 48 	call	0x90e8	; 0x90e8 <EepromWriteBlock>
	}

	if(EepromReadBlock(ebs.id, &ebs) == 0){//it exists
    c2c6:	89 81       	ldd	r24, Y+1	; 0x01
    c2c8:	9a 81       	ldd	r25, Y+2	; 0x02
    c2ca:	be 01       	movw	r22, r28
    c2cc:	6f 5f       	subi	r22, 0xFF	; 255
    c2ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c2d0:	0e 94 34 48 	call	0x9068	; 0x9068 <EepromReadBlock>
    c2d4:	88 23       	and	r24, r24
    c2d6:	f1 f4       	brne	.+60     	; 0xc314 <EEPromScore+0x90>
    c2d8:	ce 01       	movw	r24, r28
    c2da:	03 96       	adiw	r24, 0x03	; 3
		if(!direction){//read
    c2dc:	11 23       	and	r17, r17
    c2de:	61 f4       	brne	.+24     	; 0xc2f8 <EEPromScore+0x74>
    c2e0:	fc 01       	movw	r30, r24
    c2e2:	a1 e1       	ldi	r26, 0x11	; 17
    c2e4:	ba e0       	ldi	r27, 0x0A	; 10
			for(uint8_t i=0;i<30;i++)
    c2e6:	9e 01       	movw	r18, r28
    c2e8:	2f 5d       	subi	r18, 0xDF	; 223
    c2ea:	3f 4f       	sbci	r19, 0xFF	; 255
				eeprom_data[i] = ebs.data[i];
    c2ec:	81 91       	ld	r24, Z+
    c2ee:	8d 93       	st	X+, r24
		EepromWriteBlock(&ebs);
	}

	if(EepromReadBlock(ebs.id, &ebs) == 0){//it exists
		if(!direction){//read
			for(uint8_t i=0;i<30;i++)
    c2f0:	e2 17       	cp	r30, r18
    c2f2:	f3 07       	cpc	r31, r19
    c2f4:	d9 f7       	brne	.-10     	; 0xc2ec <EEPromScore+0x68>
    c2f6:	20 c0       	rjmp	.+64     	; 0xc338 <EEPromScore+0xb4>
    c2f8:	e1 e1       	ldi	r30, 0x11	; 17
    c2fa:	fa e0       	ldi	r31, 0x0A	; 10
    c2fc:	dc 01       	movw	r26, r24
				eeprom_data[i] = ebs.data[i];
		}else{//write
			for(uint8_t i=0;i<30;i++)
				ebs.data[i] = eeprom_data[i];
    c2fe:	81 91       	ld	r24, Z+
    c300:	8d 93       	st	X+, r24
	if(EepromReadBlock(ebs.id, &ebs) == 0){//it exists
		if(!direction){//read
			for(uint8_t i=0;i<30;i++)
				eeprom_data[i] = ebs.data[i];
		}else{//write
			for(uint8_t i=0;i<30;i++)
    c302:	8a e0       	ldi	r24, 0x0A	; 10
    c304:	ef 32       	cpi	r30, 0x2F	; 47
    c306:	f8 07       	cpc	r31, r24
    c308:	d1 f7       	brne	.-12     	; 0xc2fe <EEPromScore+0x7a>
				ebs.data[i] = eeprom_data[i];

			EepromWriteBlock(&ebs);
    c30a:	ce 01       	movw	r24, r28
    c30c:	01 96       	adiw	r24, 0x01	; 1
    c30e:	0e 94 74 48 	call	0x90e8	; 0x90e8 <EepromWriteBlock>
    c312:	12 c0       	rjmp	.+36     	; 0xc338 <EEPromScore+0xb4>
		}
	}else if(!direction){//we can't access the block, it's full or there is a problem with the eeprom
    c314:	11 23       	and	r17, r17
    c316:	81 f4       	brne	.+32     	; 0xc338 <EEPromScore+0xb4>
    c318:	80 e0       	ldi	r24, 0x00	; 0
    c31a:	90 e0       	ldi	r25, 0x00	; 0
			for(uint8_t i=0;i<30;i++)
				eeprom_data[i] = pgm_read_byte(&EEPROMError[i]);
    c31c:	fc 01       	movw	r30, r24
    c31e:	ee 52       	subi	r30, 0x2E	; 46
    c320:	fc 47       	sbci	r31, 0x7C	; 124
    c322:	e4 91       	lpm	r30, Z+
    c324:	dc 01       	movw	r26, r24
    c326:	af 5e       	subi	r26, 0xEF	; 239
    c328:	b5 4f       	sbci	r27, 0xF5	; 245
    c32a:	ec 93       	st	X, r30
    c32c:	01 96       	adiw	r24, 0x01	; 1
				ebs.data[i] = eeprom_data[i];

			EepromWriteBlock(&ebs);
		}
	}else if(!direction){//we can't access the block, it's full or there is a problem with the eeprom
			for(uint8_t i=0;i<30;i++)
    c32e:	8e 31       	cpi	r24, 0x1E	; 30
    c330:	91 05       	cpc	r25, r1
    c332:	a1 f7       	brne	.-24     	; 0xc31c <EEPromScore+0x98>
    c334:	81 e0       	ldi	r24, 0x01	; 1
    c336:	01 c0       	rjmp	.+2      	; 0xc33a <EEPromScore+0xb6>
    c338:	80 e0       	ldi	r24, 0x00	; 0
				eeprom_data[i] = pgm_read_byte(&EEPROMError[i]);
			return 1;
	}
	return 0;
}
    c33a:	a0 96       	adiw	r28, 0x20	; 32
    c33c:	e3 e0       	ldi	r30, 0x03	; 3
    c33e:	0c 94 b4 75 	jmp	0xeb68	; 0xeb68 <__epilogue_restores__+0x1e>

0000c342 <Uzenet_SendStringP>:
	InitUartRxBuffer();

}


void Uzenet_SendStringP(const char* str){
    c342:	1f 93       	push	r17
    c344:	cf 93       	push	r28
    c346:	df 93       	push	r29
    c348:	ec 01       	movw	r28, r24
    c34a:	0a c0       	rjmp	.+20     	; 0xc360 <Uzenet_SendStringP+0x1e>
//return;


	char c;
	while(str!=NULL){
		c=pgm_read_byte(str);
    c34c:	fe 01       	movw	r30, r28
    c34e:	14 91       	lpm	r17, Z+
		if(c==0)break;				
    c350:	11 23       	and	r17, r17
    c352:	41 f0       	breq	.+16     	; 0xc364 <Uzenet_SendStringP+0x22>
		while(UartSendChar(c)==-1); //block if buffer full	
    c354:	81 2f       	mov	r24, r17
    c356:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c35a:	8f 3f       	cpi	r24, 0xFF	; 255
    c35c:	d9 f3       	breq	.-10     	; 0xc354 <Uzenet_SendStringP+0x12>
		str++;
    c35e:	21 96       	adiw	r28, 0x01	; 1
void Uzenet_SendStringP(const char* str){
//return;


	char c;
	while(str!=NULL){
    c360:	20 97       	sbiw	r28, 0x00	; 0
    c362:	a1 f7       	brne	.-24     	; 0xc34c <Uzenet_SendStringP+0xa>
		c=pgm_read_byte(str);
		if(c==0)break;				
		while(UartSendChar(c)==-1); //block if buffer full	
		str++;
	};	
}
    c364:	df 91       	pop	r29
    c366:	cf 91       	pop	r28
    c368:	1f 91       	pop	r17
    c36a:	08 95       	ret

0000c36c <UpdateUzenet>:
0x00,
SOLITAIRE_UZENET_ID>>8,SOLITAIRE_UZENET_ID&0xFF,
'\r','\n'
};

void UpdateUzenet(){
    c36c:	cf 93       	push	r28
    c36e:	df 93       	push	r29
//return;
//SPrintNum(3,0,uzenet_step,1);
//SPrintNum(3,1,uzenet_wait_ticks,1);
//SPrintNum(6,3,TCNT1,1);
	if(uzenet_wait_ticks)
    c370:	80 91 f0 0d 	lds	r24, 0x0DF0
    c374:	88 23       	and	r24, r24
    c376:	31 f0       	breq	.+12     	; 0xc384 <UpdateUzenet+0x18>
		if(--uzenet_wait_ticks)
    c378:	81 50       	subi	r24, 0x01	; 1
    c37a:	80 93 f0 0d 	sts	0x0DF0, r24
    c37e:	88 23       	and	r24, r24
    c380:	09 f0       	breq	.+2      	; 0xc384 <UpdateUzenet+0x18>
    c382:	e7 c1       	rjmp	.+974    	; 0xc752 <UpdateUzenet+0x3e6>
			return;//still waiting for something, try again next tick

//SPrintNum(5,20,uzenet_step,0);
//SPrintNum(5,21,uzenet_wait_ticks,1);

	if(uzenet_step == 0){//RESET MODULE//////////////////////////////////////////////////////////////////////////////////////////////
    c384:	80 91 6e 0a 	lds	r24, 0x0A6E
    c388:	88 23       	and	r24, r24
    c38a:	d9 f4       	brne	.+54     	; 0xc3c2 <UpdateUzenet+0x56>

		UBRR0H=0;
    c38c:	10 92 c5 00 	sts	0x00C5, r1
		UCSR0A=(1<<U2X0); // double speed mode
    c390:	82 e0       	ldi	r24, 0x02	; 2
    c392:	80 93 c0 00 	sts	0x00C0, r24
		UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    c396:	86 e0       	ldi	r24, 0x06	; 6
    c398:	80 93 c2 00 	sts	0x00C2, r24
		UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    c39c:	88 e1       	ldi	r24, 0x18	; 24
    c39e:	80 93 c1 00 	sts	0x00C1, r24

		DDRD|=(1<<PD3);
    c3a2:	53 9a       	sbi	0x0a, 3	; 10
		PORTD&=~(1<<PD3);//need to turn this pin back on next frame
    c3a4:	5b 98       	cbi	0x0b, 3	; 11

		InitUartTxBuffer();
    c3a6:	0e 94 bd 47 	call	0x8f7a	; 0x8f7a <InitUartTxBuffer>
		InitUartRxBuffer();
    c3aa:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <InitUartRxBuffer>

		uzenet_substate = 0;
    c3ae:	10 92 0a 0a 	sts	0x0A0A, r1
		uzenet_wait_ticks = 1;
    c3b2:	81 e0       	ldi	r24, 0x01	; 1
    c3b4:	80 93 f0 0d 	sts	0x0DF0, r24
		uzenet_wait2 = 0;
    c3b8:	10 92 f5 09 	sts	0x09F5, r1
		uzenet_iteration = 0;
    c3bc:	10 92 f4 09 	sts	0x09F4, r1
    c3c0:	19 c0       	rjmp	.+50     	; 0xc3f4 <UpdateUzenet+0x88>
		uzenet_step++;

	}else if(uzenet_step == 1){//TURN MODULE BACK ON(RESET PIN)//////////////////////////////////////////////////////////////////////
    c3c2:	81 30       	cpi	r24, 0x01	; 1
    c3c4:	49 f4       	brne	.+18     	; 0xc3d8 <UpdateUzenet+0x6c>
	
		PORTD |= (1<<PD3);
    c3c6:	5b 9a       	sbi	0x0b, 3	; 11
		uzenet_wait_ticks = 180;//give it a chance to spit out its bootup stuff
    c3c8:	84 eb       	ldi	r24, 0xB4	; 180
    c3ca:	80 93 f0 0d 	sts	0x0DF0, r24
		uzenet_step++;
    c3ce:	82 e0       	ldi	r24, 0x02	; 2
    c3d0:	80 93 6e 0a 	sts	0x0A6E, r24
		uzenet_iteration = sizeof(BaudLookUpTable)+1;//counter for number of attempts(each at different baud)
    c3d4:	89 e0       	ldi	r24, 0x09	; 9
    c3d6:	a4 c1       	rjmp	.+840    	; 0xc720 <UpdateUzenet+0x3b4>
	
	}else if(uzenet_step == 2){//FIND THE BAUD RATE//////////////////////////////////////////////////////////////////////////////////
    c3d8:	82 30       	cpi	r24, 0x02	; 2
    c3da:	21 f4       	brne	.+8      	; 0xc3e4 <UpdateUzenet+0x78>

uzenet_step++;return;//EMULATOR HACK////////////////////////////////////	
    c3dc:	83 e0       	ldi	r24, 0x03	; 3
    c3de:	80 93 6e 0a 	sts	0x0A6E, r24
    c3e2:	b7 c1       	rjmp	.+878    	; 0xc752 <UpdateUzenet+0x3e6>
				uzenet_iteration = 0;
			}
		}


	}else if(uzenet_step == 3){//turn off echo
    c3e4:	83 30       	cpi	r24, 0x03	; 3
    c3e6:	51 f4       	brne	.+20     	; 0xc3fc <UpdateUzenet+0x90>

		Uzenet_SendStringP("ATE0\r\n");
    c3e8:	80 e0       	ldi	r24, 0x00	; 0
    c3ea:	91 e0       	ldi	r25, 0x01	; 1
    c3ec:	aa df       	rcall	.-172    	; 0xc342 <Uzenet_SendStringP>
		uzenet_wait_ticks = 1;
    c3ee:	81 e0       	ldi	r24, 0x01	; 1
    c3f0:	80 93 f0 0d 	sts	0x0DF0, r24
		uzenet_step++;
    c3f4:	80 91 6e 0a 	lds	r24, 0x0A6E
    c3f8:	8f 5f       	subi	r24, 0xFF	; 255
    c3fa:	f1 cf       	rjmp	.-30     	; 0xc3de <UpdateUzenet+0x72>
	
	}else if(uzenet_step == 4){//CHANGE 8266 BAUD RATE TO THE ONE WE WANT////////////////////////////////////////////////////////////
    c3fc:	84 30       	cpi	r24, 0x04	; 4
    c3fe:	39 f4       	brne	.+14     	; 0xc40e <UpdateUzenet+0xa2>
		
		Uzenet_SendStringP(PSTR("AT+CIOBAUD=57600\r\n"));
    c400:	8d ed       	ldi	r24, 0xDD	; 221
    c402:	95 e8       	ldi	r25, 0x85	; 133
    c404:	9e df       	rcall	.-196    	; 0xc342 <Uzenet_SendStringP>
		UBRR0L = 30;	//57600 bauds	5760 bytes/s	96 bytes/field
    c406:	8e e1       	ldi	r24, 0x1E	; 30
    c408:	80 93 c4 00 	sts	0x00C4, r24
    c40c:	f3 cf       	rjmp	.-26     	; 0xc3f4 <UpdateUzenet+0x88>
		uzenet_step++;//uzenet_wait_ticks is 0 so will automatically run next step on the next frame

	}else if(uzenet_step == 5){//VERIFY WIFI CONNECTION//////////////////////////////////////////////////////////////////////////////
    c40e:	85 30       	cpi	r24, 0x05	; 5
    c410:	31 f4       	brne	.+12     	; 0xc41e <UpdateUzenet+0xb2>
		
			//the response from baud rate change should already be in Rx buffer
			InitUartRxBuffer();//we will ignore it and check errors later(should have worked though)
    c412:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <InitUartRxBuffer>
			Uzenet_SendStringP(PSTR("AT+CWJAP\r\n"));
    c416:	82 ed       	ldi	r24, 0xD2	; 210
    c418:	95 e8       	ldi	r25, 0x85	; 133
    c41a:	93 df       	rcall	.-218    	; 0xc342 <Uzenet_SendStringP>
    c41c:	36 c0       	rjmp	.+108    	; 0xc48a <UpdateUzenet+0x11e>
			uzenet_wait2 = 255;
			uzenet_step++;
	
	}else if(uzenet_step == 6){//WAIT FOR WIFI CONNECTION OK MESSAGE/////////////////////////////////////////////////////////////////
    c41e:	86 30       	cpi	r24, 0x06	; 6
    c420:	c1 f4       	brne	.+48     	; 0xc452 <UpdateUzenet+0xe6>
		
		if(UartUnreadCount() > 1 && UartReadChar() == 'O' && UartReadChar() == 'K'){//connected
    c422:	0e 94 84 47 	call	0x8f08	; 0x8f08 <UartUnreadCount>
    c426:	82 30       	cpi	r24, 0x02	; 2
    c428:	50 f0       	brcs	.+20     	; 0xc43e <UpdateUzenet+0xd2>
    c42a:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c42e:	8f 34       	cpi	r24, 0x4F	; 79
    c430:	91 05       	cpc	r25, r1
    c432:	29 f4       	brne	.+10     	; 0xc43e <UpdateUzenet+0xd2>
    c434:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c438:	8b 34       	cpi	r24, 0x4B	; 75
    c43a:	91 05       	cpc	r25, r1
    c43c:	d9 f2       	breq	.-74     	; 0xc3f4 <UpdateUzenet+0x88>
			uzenet_step++;
	//		uzenet_iteration = 0;	
		}else if(--uzenet_wait2 == 0)//timed out, reset and try from the top
    c43e:	80 91 f5 09 	lds	r24, 0x09F5
    c442:	81 50       	subi	r24, 0x01	; 1
    c444:	80 93 f5 09 	sts	0x09F5, r24
    c448:	88 23       	and	r24, r24
    c44a:	09 f4       	brne	.+2      	; 0xc44e <UpdateUzenet+0xe2>
    c44c:	73 c1       	rjmp	.+742    	; 0xc734 <UpdateUzenet+0x3c8>
			uzenet_step = 0;
		else
			uzenet_wait_ticks = 1;
    c44e:	81 e0       	ldi	r24, 0x01	; 1
    c450:	59 c0       	rjmp	.+178    	; 0xc504 <UpdateUzenet+0x198>
	
	}else if(uzenet_step == 7){//SET SINGLE CONNECTION MODE//////////////////////////////////////////////////////////////////////////
    c452:	87 30       	cpi	r24, 0x07	; 7
    c454:	81 f4       	brne	.+32     	; 0xc476 <UpdateUzenet+0x10a>
		
		InitUartRxBuffer();//burn any bytes left from connecting to wifi
    c456:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <InitUartRxBuffer>
		Uzenet_SendStringP(PSTR("AT+CIPMUX=0\r\n"));//this should always work if we got this far
    c45a:	84 ec       	ldi	r24, 0xC4	; 196
    c45c:	95 e8       	ldi	r25, 0x85	; 133
    c45e:	71 df       	rcall	.-286    	; 0xc342 <Uzenet_SendStringP>
		uzenet_wait_ticks = 1;
    c460:	81 e0       	ldi	r24, 0x01	; 1
    c462:	80 93 f0 0d 	sts	0x0DF0, r24
		uzenet_step++;
    c466:	80 91 6e 0a 	lds	r24, 0x0A6E
    c46a:	8f 5f       	subi	r24, 0xFF	; 255
    c46c:	80 93 6e 0a 	sts	0x0A6E, r24
		uzenet_iteration = 0;	
    c470:	10 92 f4 09 	sts	0x09F4, r1
    c474:	6e c1       	rjmp	.+732    	; 0xc752 <UpdateUzenet+0x3e6>

	}else if(uzenet_step == 8){//CONNECT TO UZENET///////////////////////////////////////////////////////////////////////////////////
    c476:	88 30       	cpi	r24, 0x08	; 8
    c478:	61 f4       	brne	.+24     	; 0xc492 <UpdateUzenet+0x126>

		InitUartRxBuffer();//burn response from previous command(which should always work)	
    c47a:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <InitUartRxBuffer>
		//Uzenet_SendStringP(PSTR("AT+CIPSTART=\"TCP\",\"uzebox.net\""));//we need to split this message to support Tx buffer sized as low as 8
		Uzenet_SendStringP(PSTR("AT+CIPSTART=0,\"TCP\",\"uzebox.net\",51697\r\n"));//EMULATOR HACK////////////////////////////////////	
    c47e:	8b e9       	ldi	r24, 0x9B	; 155
    c480:	95 e8       	ldi	r25, 0x85	; 133
    c482:	5f df       	rcall	.-322    	; 0xc342 <Uzenet_SendStringP>
		uzenet_wait_ticks = 2;//wait for '>'
    c484:	82 e0       	ldi	r24, 0x02	; 2
    c486:	80 93 f0 0d 	sts	0x0DF0, r24
		uzenet_wait2 = 255;//wait for response in next step
    c48a:	8f ef       	ldi	r24, 0xFF	; 255
    c48c:	80 93 f5 09 	sts	0x09F5, r24
    c490:	b1 cf       	rjmp	.-158    	; 0xc3f4 <UpdateUzenet+0x88>
		uzenet_step++;

	}else if(uzenet_step == 9){//VERIFY CONNECTION IS GOOD(check response)///////////////////////////////////////////////////////////
    c492:	89 30       	cpi	r24, 0x09	; 9
    c494:	91 f4       	brne	.+36     	; 0xc4ba <UpdateUzenet+0x14e>
		
		if(UartUnreadCount() > 1 && UartReadChar() == 'O' && UartReadChar() == 'K')//connection good, ready to send packets
    c496:	0e 94 84 47 	call	0x8f08	; 0x8f08 <UartUnreadCount>
    c49a:	82 30       	cpi	r24, 0x02	; 2
    c49c:	08 f4       	brcc	.+2      	; 0xc4a0 <UpdateUzenet+0x134>
    c49e:	43 c1       	rjmp	.+646    	; 0xc726 <UpdateUzenet+0x3ba>
    c4a0:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c4a4:	8f 34       	cpi	r24, 0x4F	; 79
    c4a6:	91 05       	cpc	r25, r1
    c4a8:	09 f0       	breq	.+2      	; 0xc4ac <UpdateUzenet+0x140>
    c4aa:	3d c1       	rjmp	.+634    	; 0xc726 <UpdateUzenet+0x3ba>
    c4ac:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c4b0:	8b 34       	cpi	r24, 0x4B	; 75
    c4b2:	91 05       	cpc	r25, r1
    c4b4:	09 f0       	breq	.+2      	; 0xc4b8 <UpdateUzenet+0x14c>
    c4b6:	37 c1       	rjmp	.+622    	; 0xc726 <UpdateUzenet+0x3ba>
    c4b8:	9d cf       	rjmp	.-198    	; 0xc3f4 <UpdateUzenet+0x88>
			uzenet_step++;
		else if(--uzenet_wait2 == 0)//count down to try again
				uzenet_step = 0;//something went wrong, try again from the start

	}else if(uzenet_step == 10){//PREPARE PACKET SEND///////////////////////////////////////////////////////////////////////////////
    c4ba:	8a 30       	cpi	r24, 0x0A	; 10
    c4bc:	71 f4       	brne	.+28     	; 0xc4da <UpdateUzenet+0x16e>

			Uzenet_SendStringP("AT+CIPSEND=0,7,\r\n");//EMULATOR HACK////////////////////////////////////	
    c4be:	87 e0       	ldi	r24, 0x07	; 7
    c4c0:	91 e0       	ldi	r25, 0x01	; 1
    c4c2:	3f df       	rcall	.-386    	; 0xc342 <Uzenet_SendStringP>
			uzenet_iteration = 0;
    c4c4:	10 92 f4 09 	sts	0x09F4, r1
			uzenet_wait_ticks = 2;//give time to receive '>'
    c4c8:	82 e0       	ldi	r24, 0x02	; 2
    c4ca:	80 93 f0 0d 	sts	0x0DF0, r24
			uzenet_wait2 = 4;
    c4ce:	84 e0       	ldi	r24, 0x04	; 4
    c4d0:	80 93 f5 09 	sts	0x09F5, r24
			uzenet_substate = 0;
    c4d4:	10 92 0a 0a 	sts	0x0A0A, r1
    c4d8:	8d cf       	rjmp	.-230    	; 0xc3f4 <UpdateUzenet+0x88>
			uzenet_step++;

	}else if(uzenet_step == 11){//BUILD A REQUEST PACKET///////////////////////////////////////////////////////////////////////////
    c4da:	8b 30       	cpi	r24, 0x0B	; 11
    c4dc:	b1 f4       	brne	.+44     	; 0xc50a <UpdateUzenet+0x19e>

uint8_t uzenet_substate,uzenet_iteration,uzenet_step,uzenet_stall_ticks,uzenet_wait_ticks, uzenet_wait2;
uint8_t uzenet_got_records;
inline void Uzenet_SendByte(uint8_t b){

	UartSendChar(b);
    c4de:	87 ec       	ldi	r24, 0xC7	; 199
    c4e0:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
		Uzenet_SendByte(0xC7);//magic number
		Uzenet_SendByte(1);//set request params(so we can ask for things later with less bytes)
		Uzenet_SendByte(0x00);//flow control flags
		Uzenet_SendByte(SOLITAIRE_UZENET_ID>>8);//rom ID
		Uzenet_SendByte(SOLITAIRE_UZENET_ID&0xFF);
		Uzenet_SendStringP(PSTR("\r\n"));
    c4e4:	81 e0       	ldi	r24, 0x01	; 1
    c4e6:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c4ea:	80 e0       	ldi	r24, 0x00	; 0
    c4ec:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c4f0:	89 e1       	ldi	r24, 0x19	; 25
    c4f2:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c4f6:	86 e6       	ldi	r24, 0x66	; 102
    c4f8:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c4fc:	88 e9       	ldi	r24, 0x98	; 152
    c4fe:	95 e8       	ldi	r25, 0x85	; 133
    c500:	20 df       	rcall	.-448    	; 0xc342 <Uzenet_SendStringP>
		uzenet_wait_ticks = 2;
    c502:	82 e0       	ldi	r24, 0x02	; 2
    c504:	80 93 f0 0d 	sts	0x0DF0, r24
    c508:	24 c1       	rjmp	.+584    	; 0xc752 <UpdateUzenet+0x3e6>


	}else if(uzenet_step == 12){
    c50a:	8c 30       	cpi	r24, 0x0C	; 12
    c50c:	09 f0       	breq	.+2      	; 0xc510 <UpdateUzenet+0x1a4>
    c50e:	a5 c0       	rjmp	.+330    	; 0xc65a <UpdateUzenet+0x2ee>
		
		//should already have got '>', otherwise we will detect problems later anyway(would be hardware problem)
		if(uzenet_substate == 0){//check if this score should be sent using wait2 as sub-state to save ram
    c510:	80 91 0a 0a 	lds	r24, 0x0A0A
    c514:	88 23       	and	r24, r24
    c516:	29 f5       	brne	.+74     	; 0xc562 <UpdateUzenet+0x1f6>
		
			if(eeprom_data[uzenet_iteration*10] & 128){//already sent this score before
    c518:	20 91 f4 09 	lds	r18, 0x09F4
    c51c:	82 2f       	mov	r24, r18
    c51e:	90 e0       	ldi	r25, 0x00	; 0
    c520:	fc 01       	movw	r30, r24
    c522:	a3 e0       	ldi	r26, 0x03	; 3
    c524:	ee 0f       	add	r30, r30
    c526:	ff 1f       	adc	r31, r31
    c528:	aa 95       	dec	r26
    c52a:	e1 f7       	brne	.-8      	; 0xc524 <UpdateUzenet+0x1b8>
    c52c:	88 0f       	add	r24, r24
    c52e:	99 1f       	adc	r25, r25
    c530:	e8 0f       	add	r30, r24
    c532:	f9 1f       	adc	r31, r25
    c534:	ef 5e       	subi	r30, 0xEF	; 239
    c536:	f5 4f       	sbci	r31, 0xF5	; 245
    c538:	80 81       	ld	r24, Z
    c53a:	87 ff       	sbrs	r24, 7
    c53c:	10 c0       	rjmp	.+32     	; 0xc55e <UpdateUzenet+0x1f2>
			
				if(++uzenet_iteration > 2){//we have cycled through all the entries
    c53e:	82 2f       	mov	r24, r18
    c540:	8f 5f       	subi	r24, 0xFF	; 255
    c542:	80 93 f4 09 	sts	0x09F4, r24
    c546:	83 30       	cpi	r24, 0x03	; 3
    c548:	08 f4       	brcc	.+2      	; 0xc54c <UpdateUzenet+0x1e0>
    c54a:	03 c1       	rjmp	.+518    	; 0xc752 <UpdateUzenet+0x3e6>
		
					uzenet_iteration = 0;
    c54c:	10 92 f4 09 	sts	0x09F4, r1
					uzenet_step++;//now retrieve updated high scores from the server
    c550:	8d e0       	ldi	r24, 0x0D	; 13
    c552:	80 93 6e 0a 	sts	0x0A6E, r24
					uzenet_substate = 1;
    c556:	81 e0       	ldi	r24, 0x01	; 1
    c558:	80 93 0a 0a 	sts	0x0A0A, r24
    c55c:	d2 cf       	rjmp	.-92     	; 0xc502 <UpdateUzenet+0x196>
					uzenet_wait_ticks = 2;
		
				}

			}else//move on to next sub-step
				uzenet_substate++;
    c55e:	81 e0       	ldi	r24, 0x01	; 1
    c560:	8b c0       	rjmp	.+278    	; 0xc678 <UpdateUzenet+0x30c>

		}else if(uzenet_substate == 1){
    c562:	81 30       	cpi	r24, 0x01	; 1
    c564:	19 f4       	brne	.+6      	; 0xc56c <UpdateUzenet+0x200>

			Uzenet_SendStringP(PSTR("AT+CIPSEND=0,12\r\n"));//EMULATOR HACK////////////////////////////////////	
    c566:	86 e8       	ldi	r24, 0x86	; 134
    c568:	95 e8       	ldi	r25, 0x85	; 133
    c56a:	7f c0       	rjmp	.+254    	; 0xc66a <UpdateUzenet+0x2fe>
			uzenet_wait_ticks = 2;//wait for '>'
			uzenet_substate++;

		}else if(uzenet_substate == 2){//BUILD A REQUEST PACKET
    c56c:	82 30       	cpi	r24, 0x02	; 2
    c56e:	59 f5       	brne	.+86     	; 0xc5c6 <UpdateUzenet+0x25a>

uint8_t uzenet_substate,uzenet_iteration,uzenet_step,uzenet_stall_ticks,uzenet_wait_ticks, uzenet_wait2;
uint8_t uzenet_got_records;
inline void Uzenet_SendByte(uint8_t b){

	UartSendChar(b);
    c570:	87 ec       	ldi	r24, 0xC7	; 199
    c572:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
			
			Uzenet_SendByte(eeprom_data[(uzenet_iteration*10)+0]);//send score part including MSB
			Uzenet_SendByte(eeprom_data[(uzenet_iteration*10)+1]);//server sorts everything by MSB so names are irrelevent(older score precedence)
			uzenet_substate++;

		}else if(uzenet_substate == 3){
    c576:	82 e0       	ldi	r24, 0x02	; 2
    c578:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c57c:	80 91 f4 09 	lds	r24, 0x09F4
    c580:	90 e0       	ldi	r25, 0x00	; 0
    c582:	fc 01       	movw	r30, r24
    c584:	63 e0       	ldi	r22, 0x03	; 3
    c586:	ee 0f       	add	r30, r30
    c588:	ff 1f       	adc	r31, r31
    c58a:	6a 95       	dec	r22
    c58c:	e1 f7       	brne	.-8      	; 0xc586 <UpdateUzenet+0x21a>
    c58e:	88 0f       	add	r24, r24
    c590:	99 1f       	adc	r25, r25
    c592:	e8 0f       	add	r30, r24
    c594:	f9 1f       	adc	r31, r25
    c596:	ef 5e       	subi	r30, 0xEF	; 239
    c598:	f5 4f       	sbci	r31, 0xF5	; 245
    c59a:	80 81       	ld	r24, Z
    c59c:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c5a0:	80 91 f4 09 	lds	r24, 0x09F4
    c5a4:	90 e0       	ldi	r25, 0x00	; 0
    c5a6:	fc 01       	movw	r30, r24
    c5a8:	43 e0       	ldi	r20, 0x03	; 3
    c5aa:	ee 0f       	add	r30, r30
    c5ac:	ff 1f       	adc	r31, r31
    c5ae:	4a 95       	dec	r20
    c5b0:	e1 f7       	brne	.-8      	; 0xc5aa <UpdateUzenet+0x23e>
    c5b2:	88 0f       	add	r24, r24
    c5b4:	99 1f       	adc	r25, r25
    c5b6:	e8 0f       	add	r30, r24
    c5b8:	f9 1f       	adc	r31, r25
    c5ba:	ef 5e       	subi	r30, 0xEF	; 239
    c5bc:	f5 4f       	sbci	r31, 0xF5	; 245
    c5be:	81 81       	ldd	r24, Z+1	; 0x01
    c5c0:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c5c4:	56 c0       	rjmp	.+172    	; 0xc672 <UpdateUzenet+0x306>
    c5c6:	83 30       	cpi	r24, 0x03	; 3
    c5c8:	29 f5       	brne	.+74     	; 0xc614 <UpdateUzenet+0x2a8>
    c5ca:	c2 e0       	ldi	r28, 0x02	; 2
    c5cc:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t uzenet_substate,uzenet_iteration,uzenet_step,uzenet_stall_ticks,uzenet_wait_ticks, uzenet_wait2;
uint8_t uzenet_got_records;
inline void Uzenet_SendByte(uint8_t b){

	UartSendChar(b);
    c5ce:	80 91 f4 09 	lds	r24, 0x09F4
    c5d2:	90 e0       	ldi	r25, 0x00	; 0
    c5d4:	fc 01       	movw	r30, r24
    c5d6:	23 e0       	ldi	r18, 0x03	; 3
    c5d8:	ee 0f       	add	r30, r30
    c5da:	ff 1f       	adc	r31, r31
    c5dc:	2a 95       	dec	r18
    c5de:	e1 f7       	brne	.-8      	; 0xc5d8 <UpdateUzenet+0x26c>
    c5e0:	88 0f       	add	r24, r24
    c5e2:	99 1f       	adc	r25, r25
    c5e4:	e8 0f       	add	r30, r24
    c5e6:	f9 1f       	adc	r31, r25
    c5e8:	ec 0f       	add	r30, r28
    c5ea:	fd 1f       	adc	r31, r29
    c5ec:	ef 5e       	subi	r30, 0xEF	; 239
    c5ee:	f5 4f       	sbci	r31, 0xF5	; 245
    c5f0:	80 81       	ld	r24, Z
    c5f2:	8f 77       	andi	r24, 0x7F	; 127
    c5f4:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c5f8:	21 96       	adiw	r28, 0x01	; 1
			Uzenet_SendByte(eeprom_data[(uzenet_iteration*10)+1]);//server sorts everything by MSB so names are irrelevent(older score precedence)
			uzenet_substate++;

		}else if(uzenet_substate == 3){

			for(uint8_t i=2;i<10;i++)//send name bytes(after score because server sorts everything by MSB)
    c5fa:	ca 30       	cpi	r28, 0x0A	; 10
    c5fc:	d1 05       	cpc	r29, r1
    c5fe:	39 f7       	brne	.-50     	; 0xc5ce <UpdateUzenet+0x262>
				Uzenet_SendByte(eeprom_data[(uzenet_iteration*10)+i]&127);//don't send the MSB which is used as a flag for different things
			
			Uzenet_SendStringP(PSTR("\r\n"));
    c600:	83 e8       	ldi	r24, 0x83	; 131
    c602:	95 e8       	ldi	r25, 0x85	; 133
    c604:	9e de       	rcall	.-708    	; 0xc342 <Uzenet_SendStringP>
			uzenet_wait_ticks = 2;
    c606:	82 e0       	ldi	r24, 0x02	; 2
    c608:	80 93 f0 0d 	sts	0x0DF0, r24
			uzenet_wait2 = 250;
    c60c:	8a ef       	ldi	r24, 0xFA	; 250
    c60e:	80 93 f5 09 	sts	0x09F5, r24
    c612:	2f c0       	rjmp	.+94     	; 0xc672 <UpdateUzenet+0x306>
			uzenet_substate++;

		}else{//make sure the send worked
			if(UartUnreadCount() > 1 && UartReadChar() == 'O' && UartReadChar() == 'K'){//it worked
    c614:	0e 94 84 47 	call	0x8f08	; 0x8f08 <UartUnreadCount>
    c618:	82 30       	cpi	r24, 0x02	; 2
    c61a:	c8 f0       	brcs	.+50     	; 0xc64e <UpdateUzenet+0x2e2>
    c61c:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c620:	8f 34       	cpi	r24, 0x4F	; 79
    c622:	91 05       	cpc	r25, r1
    c624:	a1 f4       	brne	.+40     	; 0xc64e <UpdateUzenet+0x2e2>
    c626:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c62a:	8b 34       	cpi	r24, 0x4B	; 75
    c62c:	91 05       	cpc	r25, r1
    c62e:	79 f4       	brne	.+30     	; 0xc64e <UpdateUzenet+0x2e2>

				uzenet_step++;
    c630:	80 91 6e 0a 	lds	r24, 0x0A6E
    c634:	8f 5f       	subi	r24, 0xFF	; 255
    c636:	80 93 6e 0a 	sts	0x0A6E, r24
				uzenet_wait2 = 0;
    c63a:	10 92 f5 09 	sts	0x09F5, r1
				uzenet_iteration = 0;
    c63e:	10 92 f4 09 	sts	0x09F4, r1
				eeprom_data[uzenet_iteration*10] |= 128;//make sure we don't try to send this again
    c642:	80 91 11 0a 	lds	r24, 0x0A11
    c646:	80 68       	ori	r24, 0x80	; 128
    c648:	80 93 11 0a 	sts	0x0A11, r24
    c64c:	82 c0       	rjmp	.+260    	; 0xc752 <UpdateUzenet+0x3e6>

			}else if(--uzenet_wait2 == 0){//timed out start from the top
    c64e:	80 91 f5 09 	lds	r24, 0x09F5
    c652:	81 50       	subi	r24, 0x01	; 1
    c654:	80 93 f5 09 	sts	0x09F5, r24
    c658:	7c c0       	rjmp	.+248    	; 0xc752 <UpdateUzenet+0x3e6>

			}

		}

	}else if(uzenet_step == 13){//REQUEST UPDATED LIST
    c65a:	8d 30       	cpi	r24, 0x0D	; 13
    c65c:	49 f5       	brne	.+82     	; 0xc6b0 <UpdateUzenet+0x344>
		
		if(uzenet_substate == 1){
    c65e:	80 91 0a 0a 	lds	r24, 0x0A0A
    c662:	81 30       	cpi	r24, 0x01	; 1
    c664:	61 f4       	brne	.+24     	; 0xc67e <UpdateUzenet+0x312>

			Uzenet_SendStringP(PSTR("AT+CIPSEND=7\r\n"));//EMULATOR HACK////////////////////////////////////	
    c666:	84 e7       	ldi	r24, 0x74	; 116
    c668:	95 e8       	ldi	r25, 0x85	; 133
    c66a:	6b de       	rcall	.-810    	; 0xc342 <Uzenet_SendStringP>
			uzenet_wait_ticks = 2;//wait for '>'
    c66c:	82 e0       	ldi	r24, 0x02	; 2
    c66e:	80 93 f0 0d 	sts	0x0DF0, r24
			uzenet_substate++;			
    c672:	80 91 0a 0a 	lds	r24, 0x0A0A
    c676:	8f 5f       	subi	r24, 0xFF	; 255
    c678:	80 93 0a 0a 	sts	0x0A0A, r24
    c67c:	6a c0       	rjmp	.+212    	; 0xc752 <UpdateUzenet+0x3e6>

uint8_t uzenet_substate,uzenet_iteration,uzenet_step,uzenet_stall_ticks,uzenet_wait_ticks, uzenet_wait2;
uint8_t uzenet_got_records;
inline void Uzenet_SendByte(uint8_t b){

	UartSendChar(b);
    c67e:	87 ec       	ldi	r24, 0xC7	; 199
    c680:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
			Uzenet_SendByte(0xC7);//magic number
			Uzenet_SendByte(0x03);//read command
			Uzenet_SendByte(0);//start at top of list
			Uzenet_SendByte(10);//number of bytes we will be reading 2 score bytes + 8 name bytes
			Uzenet_SendByte(5);//5 entries total = 50 bytes
			Uzenet_SendStringP(PSTR("\r\n"));
    c684:	83 e0       	ldi	r24, 0x03	; 3
    c686:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c68a:	80 e0       	ldi	r24, 0x00	; 0
    c68c:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c690:	8a e0       	ldi	r24, 0x0A	; 10
    c692:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c696:	85 e0       	ldi	r24, 0x05	; 5
    c698:	0e 94 a8 47 	call	0x8f50	; 0x8f50 <UartSendChar>
    c69c:	81 e7       	ldi	r24, 0x71	; 113
    c69e:	95 e8       	ldi	r25, 0x85	; 133
    c6a0:	50 de       	rcall	.-864    	; 0xc342 <Uzenet_SendStringP>
			uzenet_wait2 = 255;
    c6a2:	8f ef       	ldi	r24, 0xFF	; 255
    c6a4:	80 93 f5 09 	sts	0x09F5, r24
			uzenet_substate = 1;
    c6a8:	81 e0       	ldi	r24, 0x01	; 1
    c6aa:	80 93 0a 0a 	sts	0x0A0A, r24
    c6ae:	a2 ce       	rjmp	.-700    	; 0xc3f4 <UpdateUzenet+0x88>
			uzenet_step++;
		}

	}else if(uzenet_step == 14){//GET UPDATED LIST
    c6b0:	8e 30       	cpi	r24, 0x0E	; 14
    c6b2:	09 f0       	breq	.+2      	; 0xc6b6 <UpdateUzenet+0x34a>
    c6b4:	4e c0       	rjmp	.+156    	; 0xc752 <UpdateUzenet+0x3e6>
		if(uzenet_iteration == 1){//eat "+IPD,X:"
    c6b6:	80 91 f4 09 	lds	r24, 0x09F4
    c6ba:	81 30       	cpi	r24, 0x01	; 1
    c6bc:	49 f4       	brne	.+18     	; 0xc6d0 <UpdateUzenet+0x364>
			if(UartUnreadCount() && UartReadChar() == ':')
    c6be:	0e 94 84 47 	call	0x8f08	; 0x8f08 <UartUnreadCount>
    c6c2:	88 23       	and	r24, r24
    c6c4:	81 f1       	breq	.+96     	; 0xc726 <UpdateUzenet+0x3ba>
    c6c6:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c6ca:	ca 97       	sbiw	r24, 0x3a	; 58
    c6cc:	61 f5       	brne	.+88     	; 0xc726 <UpdateUzenet+0x3ba>
    c6ce:	25 c0       	rjmp	.+74     	; 0xc71a <UpdateUzenet+0x3ae>
				uzenet_iteration++;
			else if(--uzenet_wait2 == 0)//timed out, try it all again from the top
				uzenet_step = 0;		
			
		}else if(uzenet_iteration == 2){
    c6d0:	82 30       	cpi	r24, 0x02	; 2
    c6d2:	89 f4       	brne	.+34     	; 0xc6f6 <UpdateUzenet+0x38a>
			if(UartUnreadCount() >= 25){
    c6d4:	0e 94 84 47 	call	0x8f08	; 0x8f08 <UartUnreadCount>
    c6d8:	89 31       	cpi	r24, 0x19	; 25
    c6da:	28 f1       	brcs	.+74     	; 0xc726 <UpdateUzenet+0x3ba>
				uzenet_wait2 = 255;
    c6dc:	8f ef       	ldi	r24, 0xFF	; 255
    c6de:	80 93 f5 09 	sts	0x09F5, r24
    c6e2:	cf e2       	ldi	r28, 0x2F	; 47
    c6e4:	da e0       	ldi	r29, 0x0A	; 10
				for(uint8_t i=(3*10);i<(3*10)+25;i++){
					eeprom_data[i] = UartReadChar();
    c6e6:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c6ea:	89 93       	st	Y+, r24
				uzenet_step = 0;		
			
		}else if(uzenet_iteration == 2){
			if(UartUnreadCount() >= 25){
				uzenet_wait2 = 255;
				for(uint8_t i=(3*10);i<(3*10)+25;i++){
    c6ec:	8a e0       	ldi	r24, 0x0A	; 10
    c6ee:	c8 34       	cpi	r28, 0x48	; 72
    c6f0:	d8 07       	cpc	r29, r24
    c6f2:	c9 f7       	brne	.-14     	; 0xc6e6 <UpdateUzenet+0x37a>
    c6f4:	12 c0       	rjmp	.+36     	; 0xc71a <UpdateUzenet+0x3ae>
				}
				uzenet_iteration++;
			}else if(--uzenet_wait2 == 0)//timed out
				uzenet_step = 0;

		}else if(uzenet_iteration == 3){
    c6f6:	83 30       	cpi	r24, 0x03	; 3
    c6f8:	01 f5       	brne	.+64     	; 0xc73a <UpdateUzenet+0x3ce>

			if(UartUnreadCount() >= 25){
    c6fa:	0e 94 84 47 	call	0x8f08	; 0x8f08 <UartUnreadCount>
    c6fe:	89 31       	cpi	r24, 0x19	; 25
    c700:	90 f0       	brcs	.+36     	; 0xc726 <UpdateUzenet+0x3ba>
				uzenet_wait2 = 255;
    c702:	8f ef       	ldi	r24, 0xFF	; 255
    c704:	80 93 f5 09 	sts	0x09F5, r24
    c708:	c8 e4       	ldi	r28, 0x48	; 72
    c70a:	da e0       	ldi	r29, 0x0A	; 10
				for(uint8_t i=(3*10)+25;i<(3*10)+25+25;i++)
					eeprom_data[i] = UartReadChar();
    c70c:	0e 94 8a 47 	call	0x8f14	; 0x8f14 <UartReadChar>
    c710:	89 93       	st	Y+, r24

		}else if(uzenet_iteration == 3){

			if(UartUnreadCount() >= 25){
				uzenet_wait2 = 255;
				for(uint8_t i=(3*10)+25;i<(3*10)+25+25;i++)
    c712:	8a e0       	ldi	r24, 0x0A	; 10
    c714:	c1 36       	cpi	r28, 0x61	; 97
    c716:	d8 07       	cpc	r29, r24
    c718:	c9 f7       	brne	.-14     	; 0xc70c <UpdateUzenet+0x3a0>
					eeprom_data[i] = UartReadChar();
				uzenet_iteration++;
    c71a:	80 91 f4 09 	lds	r24, 0x09F4
    c71e:	8f 5f       	subi	r24, 0xFF	; 255
    c720:	80 93 f4 09 	sts	0x09F4, r24
    c724:	16 c0       	rjmp	.+44     	; 0xc752 <UpdateUzenet+0x3e6>
			}else if(--uzenet_wait2 == 0)//timed out
    c726:	80 91 f5 09 	lds	r24, 0x09F5
    c72a:	81 50       	subi	r24, 0x01	; 1
    c72c:	80 93 f5 09 	sts	0x09F5, r24
    c730:	88 23       	and	r24, r24
    c732:	79 f4       	brne	.+30     	; 0xc752 <UpdateUzenet+0x3e6>
				uzenet_step = 0;
    c734:	10 92 6e 0a 	sts	0x0A6E, r1
    c738:	0c c0       	rjmp	.+24     	; 0xc752 <UpdateUzenet+0x3e6>

		}else{//got the full update, repeatedly attempt to send our scores and get updated list
			uzenet_got_records = 1;//make sure high screen shows this now
    c73a:	91 e0       	ldi	r25, 0x01	; 1
    c73c:	90 93 ef 0d 	sts	0x0DEF, r25
			uzenet_step = 12;//go back to send any updated data
    c740:	8c e0       	ldi	r24, 0x0C	; 12
    c742:	80 93 6e 0a 	sts	0x0A6E, r24
			uzenet_iteration = 0;
    c746:	10 92 f4 09 	sts	0x09F4, r1
			uzenet_wait_ticks = 1;
    c74a:	90 93 f0 0d 	sts	0x0DF0, r25
			uzenet_wait2 = 0;
    c74e:	10 92 f5 09 	sts	0x09F5, r1
		}

	}

}
    c752:	df 91       	pop	r29
    c754:	cf 91       	pop	r28
    c756:	08 95       	ret

0000c758 <SolitaireInputDeviceHandler>:
			
		}
		WaitVsync(1);
}

void SolitaireInputDeviceHandler(){//requires the kernel to NOT read controllers during VSYNC
    c758:	1f 93       	push	r17
    c75a:	cf 93       	push	r28
    c75c:	df 93       	push	r29
	//always assume a controller is attached, also assume there is always mouse data available on eithe rport
	uint16_t Buttons = 0;
	uint8_t i;

	//latch controllers
	JOYPAD_OUT_PORT |= _BV(JOYPAD_LATCH_PIN);
    c75e:	12 9a       	sbi	0x02, 2	; 2
	WaitUs(1);//longer delay incase of mouse
    c760:	81 e0       	ldi	r24, 0x01	; 1
    c762:	90 e0       	ldi	r25, 0x00	; 0
    c764:	0e 94 17 47 	call	0x8e2e	; 0x8e2e <WaitUs>
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    c768:	12 98       	cbi	0x02, 2	; 2
    c76a:	c0 e0       	ldi	r28, 0x00	; 0
    c76c:	d0 e0       	ldi	r29, 0x00	; 0
    c76e:	10 e0       	ldi	r17, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		Buttons >>= 1;
    c770:	d6 95       	lsr	r29
    c772:	c7 95       	ror	r28
		WaitUs(5);
    c774:	85 e0       	ldi	r24, 0x05	; 5
    c776:	90 e0       	ldi	r25, 0x00	; 0
    c778:	0e 94 17 47 	call	0x8e2e	; 0x8e2e <WaitUs>

		//pulse clock pin		
		JOYPAD_OUT_PORT &= ~(_BV(JOYPAD_CLOCK_PIN));
    c77c:	13 98       	cbi	0x02, 3	; 2
		//SWait200ns();//necessary????!
		//SWait200ns();//necessary????!
		
		if(((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN)) == 0) || ((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN)) == 0))
    c77e:	00 9b       	sbis	0x00, 0	; 0
    c780:	01 c0       	rjmp	.+2      	; 0xc784 <SolitaireInputDeviceHandler+0x2c>
    c782:	01 9b       	sbis	0x00, 1	; 0
			Buttons |= (1<<15);
    c784:	d0 68       	ori	r29, 0x80	; 128
		
		JOYPAD_OUT_PORT |= _BV(JOYPAD_CLOCK_PIN);
    c786:	13 9a       	sbi	0x02, 3	; 2
		WaitUs(5);
    c788:	85 e0       	ldi	r24, 0x05	; 5
    c78a:	90 e0       	ldi	r25, 0x00	; 0
    c78c:	0e 94 17 47 	call	0x8e2e	; 0x8e2e <WaitUs>
	WaitUs(1);//longer delay incase of mouse
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    c790:	1f 5f       	subi	r17, 0xFF	; 255
    c792:	10 31       	cpi	r17, 0x10	; 16
    c794:	69 f7       	brne	.-38     	; 0xc770 <SolitaireInputDeviceHandler+0x18>
		JOYPAD_OUT_PORT |= _BV(JOYPAD_CLOCK_PIN);
		WaitUs(5);
	}

	//joypad1_status_lo = Buttons;
	temppadstate = Buttons;
    c796:	d0 93 6b 0a 	sts	0x0A6B, r29
    c79a:	c0 93 6a 0a 	sts	0x0A6A, r28
	Buttons = 0;

	if(temppadstate == (BTN_START+BTN_SELECT+BTN_Y+BTN_B))
    c79e:	2f 97       	sbiw	r28, 0x0f	; 15
    c7a0:	11 f4       	brne	.+4      	; 0xc7a6 <SolitaireInputDeviceHandler+0x4e>
		SoftReset();
    c7a2:	0e 94 78 47 	call	0x8ef0	; 0x8ef0 <SoftReset>
    c7a6:	c0 e0       	ldi	r28, 0x00	; 0
    c7a8:	d0 e0       	ldi	r29, 0x00	; 0
    c7aa:	10 e0       	ldi	r17, 0x00	; 0


	//	WaitUs(5);//necessary???
//Read extended mouse data on both ports(it's fine if there is no mouse there?)
	for(i=0;i<16;i++){
		Buttons <<= 1;
    c7ac:	cc 0f       	add	r28, r28
    c7ae:	dd 1f       	adc	r29, r29
		//pulse clock pin		
		JOYPAD_OUT_PORT &= ~(_BV(JOYPAD_CLOCK_PIN));
    c7b0:	13 98       	cbi	0x02, 3	; 2
		SWait200ns();
    c7b2:	c8 95       	lpm
    c7b4:	c8 95       	lpm
		SWait200ns();
    c7b6:	c8 95       	lpm
    c7b8:	c8 95       	lpm
	
		if(((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN)) == 0) || ((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN)) == 0))
    c7ba:	00 9b       	sbis	0x00, 0	; 0
    c7bc:	01 c0       	rjmp	.+2      	; 0xc7c0 <SolitaireInputDeviceHandler+0x68>
    c7be:	01 9b       	sbis	0x00, 1	; 0
			Buttons |= 1;
    c7c0:	c1 60       	ori	r28, 0x01	; 1

		JOYPAD_OUT_PORT |= _BV(JOYPAD_CLOCK_PIN);
    c7c2:	13 9a       	sbi	0x02, 3	; 2
		WaitUs(5);
    c7c4:	85 e0       	ldi	r24, 0x05	; 5
    c7c6:	90 e0       	ldi	r25, 0x00	; 0
    c7c8:	0e 94 17 47 	call	0x8e2e	; 0x8e2e <WaitUs>
		SoftReset();


	//	WaitUs(5);//necessary???
//Read extended mouse data on both ports(it's fine if there is no mouse there?)
	for(i=0;i<16;i++){
    c7cc:	1f 5f       	subi	r17, 0xFF	; 255
    c7ce:	10 31       	cpi	r17, 0x10	; 16
    c7d0:	69 f7       	brne	.-38     	; 0xc7ac <SolitaireInputDeviceHandler+0x54>
		JOYPAD_OUT_PORT |= _BV(JOYPAD_CLOCK_PIN);
		WaitUs(5);

	}

	mousestate = Buttons;
    c7d2:	d0 93 f9 09 	sts	0x09F9, r29
    c7d6:	c0 93 f8 09 	sts	0x09F8, r28
}
    c7da:	df 91       	pop	r29
    c7dc:	cf 91       	pop	r28
    c7de:	1f 91       	pop	r17
    c7e0:	08 95       	ret

0000c7e2 <UpdatePads>:



void UpdatePads(){

	oldpadstate = padstate;
    c7e2:	80 91 fc 09 	lds	r24, 0x09FC
    c7e6:	90 91 fd 09 	lds	r25, 0x09FD
    c7ea:	90 93 fb 09 	sts	0x09FB, r25
    c7ee:	80 93 fa 09 	sts	0x09FA, r24
	oldmousestate = mousestate;
    c7f2:	80 91 f8 09 	lds	r24, 0x09F8
    c7f6:	90 91 f9 09 	lds	r25, 0x09F9
    c7fa:	90 93 63 0a 	sts	0x0A63, r25
    c7fe:	80 93 62 0a 	sts	0x0A62, r24

	SolitaireInputDeviceHandler();//read pads and extended mouse data on both ports and compile it to 1 padstate
    c802:	aa df       	rcall	.-172    	; 0xc758 <SolitaireInputDeviceHandler>
	if(ai_state){
    c804:	80 91 03 0a 	lds	r24, 0x0A03
    c808:	20 91 6a 0a 	lds	r18, 0x0A6A
    c80c:	30 91 6b 0a 	lds	r19, 0x0A6B
    c810:	88 23       	and	r24, r24
    c812:	39 f0       	breq	.+14     	; 0xc822 <UpdatePads+0x40>
		if(temppadstate & (BTN_A|BTN_B|BTN_X|BTN_Y|BTN_SL|BTN_SR|BTN_SELECT|BTN_START))
    c814:	2f 70       	andi	r18, 0x0F	; 15
    c816:	3f 70       	andi	r19, 0x0F	; 15
    c818:	23 2b       	or	r18, r19
    c81a:	11 f0       	breq	.+4      	; 0xc820 <UpdatePads+0x3e>
			ai_state = 0;//main loop will check if(demo_playing && !ai_state)
    c81c:	10 92 03 0a 	sts	0x0A03, r1

		AIUpdate();
    c820:	8e c9       	rjmp	.-3300   	; 0xbb3e <AIUpdate>
		}
		SWaitVsync(8);
		return;
	}

	if(temppadstate & 0x8000){//at least one mouse attached, convert LB and RB into Y and B buttons
    c822:	37 ff       	sbrs	r19, 7
    c824:	2c c0       	rjmp	.+88     	; 0xc87e <UpdatePads+0x9c>
	//	if(temppadstate & BTN_MOUSE_RIGHT)
	//	TriggerFx(1,255,1);
//HACK WHY??!?!?!?!
if(temppadstate & BTN_SL)
    c826:	32 ff       	sbrs	r19, 2
    c828:	05 c0       	rjmp	.+10     	; 0xc834 <UpdatePads+0x52>
temppadstate |= BTN_MOUSE_RIGHT;
    c82a:	31 60       	ori	r19, 0x01	; 1
    c82c:	30 93 6b 0a 	sts	0x0A6B, r19
    c830:	20 93 6a 0a 	sts	0x0A6A, r18
//HUGE HACK!!!!!!!!!!!!!


		temppadstate &= (BTN_MOUSE_LEFT|BTN_MOUSE_RIGHT);//eliminate bits that are always high for the mouse that correspond to d-pad etc
    c834:	20 91 6a 0a 	lds	r18, 0x0A6A
    c838:	30 91 6b 0a 	lds	r19, 0x0A6B
    c83c:	a9 01       	movw	r20, r18
    c83e:	40 70       	andi	r20, 0x00	; 0
    c840:	53 70       	andi	r21, 0x03	; 3
    c842:	50 93 6b 0a 	sts	0x0A6B, r21
    c846:	40 93 6a 0a 	sts	0x0A6A, r20
		padstate = 0x8000;//keep id bit so we can tell when a mouse is plugged/unplugged
    c84a:	80 e0       	ldi	r24, 0x00	; 0
    c84c:	90 e8       	ldi	r25, 0x80	; 128
    c84e:	90 93 fd 09 	sts	0x09FD, r25
    c852:	80 93 fc 09 	sts	0x09FC, r24
		if(!(oldpadstate & 0x8000)){//a mouse was newly attached this frame(wait a bit?)
	//		SolitaireSetMouseSensitivity();
		}

		//certain glitches are possible if controlling both a pad and mouse at the same time, oh well.
		if(temppadstate & BTN_MOUSE_LEFT)
    c856:	31 ff       	sbrs	r19, 1
    c858:	06 c0       	rjmp	.+12     	; 0xc866 <UpdatePads+0x84>
			padstate |= BTN_B;
    c85a:	81 e0       	ldi	r24, 0x01	; 1
    c85c:	90 e8       	ldi	r25, 0x80	; 128
    c85e:	90 93 fd 09 	sts	0x09FD, r25
    c862:	80 93 fc 09 	sts	0x09FC, r24
		if(temppadstate & BTN_MOUSE_RIGHT)
    c866:	50 ff       	sbrs	r21, 0
    c868:	0e c0       	rjmp	.+28     	; 0xc886 <UpdatePads+0xa4>
			padstate |= BTN_Y;
    c86a:	80 91 fc 09 	lds	r24, 0x09FC
    c86e:	90 91 fd 09 	lds	r25, 0x09FD
    c872:	82 60       	ori	r24, 0x02	; 2
    c874:	90 93 fd 09 	sts	0x09FD, r25
    c878:	80 93 fc 09 	sts	0x09FC, r24
    c87c:	04 c0       	rjmp	.+8      	; 0xc886 <UpdatePads+0xa4>

	}else{//regular pads
		padstate = temppadstate;
    c87e:	30 93 fd 09 	sts	0x09FD, r19
    c882:	20 93 fc 09 	sts	0x09FC, r18
	}


//	padstate = ReadJoypad(0);//controller in 1st port can always control the cursor

	if(awaiting_key){
    c886:	80 91 0f 0a 	lds	r24, 0x0A0F
    c88a:	88 23       	and	r24, r24
    c88c:	91 f0       	breq	.+36     	; 0xc8b2 <UpdatePads+0xd0>
		if((padstate&(BTN_A|BTN_B|BTN_X|BTN_Y|BTN_SELECT|BTN_START)) && !(oldpadstate&(BTN_A|BTN_B|BTN_X|BTN_Y|BTN_SELECT|BTN_START)))
    c88e:	80 91 fc 09 	lds	r24, 0x09FC
    c892:	90 91 fd 09 	lds	r25, 0x09FD
    c896:	8f 70       	andi	r24, 0x0F	; 15
    c898:	93 70       	andi	r25, 0x03	; 3
    c89a:	89 2b       	or	r24, r25
    c89c:	51 f0       	breq	.+20     	; 0xc8b2 <UpdatePads+0xd0>
    c89e:	80 91 fa 09 	lds	r24, 0x09FA
    c8a2:	90 91 fb 09 	lds	r25, 0x09FB
    c8a6:	8f 70       	andi	r24, 0x0F	; 15
    c8a8:	93 70       	andi	r25, 0x03	; 3
    c8aa:	89 2b       	or	r24, r25
    c8ac:	11 f4       	brne	.+4      	; 0xc8b2 <UpdatePads+0xd0>
			awaiting_key = 0;
    c8ae:	10 92 0f 0a 	sts	0x0A0F, r1
	}


	if(padstate & BTN_SELECT && !(oldpadstate & BTN_SELECT)){//user wants to change the cursor speed
    c8b2:	80 91 fc 09 	lds	r24, 0x09FC
    c8b6:	82 ff       	sbrs	r24, 2
    c8b8:	12 c0       	rjmp	.+36     	; 0xc8de <UpdatePads+0xfc>
    c8ba:	80 91 fa 09 	lds	r24, 0x09FA
    c8be:	82 fd       	sbrc	r24, 2
    c8c0:	0e c0       	rjmp	.+28     	; 0xc8de <UpdatePads+0xfc>
		if(demo_playing){//ai is playing, don't change the speed since it will mess it up. instead change oldcursorspeed because it will be restored into cursorspeed when the demo is over...
    c8c2:	80 91 f7 09 	lds	r24, 0x09F7
    c8c6:	88 23       	and	r24, r24
    c8c8:	51 f4       	brne	.+20     	; 0xc8de <UpdatePads+0xfc>

				//if(++oldcursorspeed > 5)
				//	oldcursorspeed = 1;
		}else{
			if(++cursorspeed > 5)
    c8ca:	80 91 6d 0a 	lds	r24, 0x0A6D
    c8ce:	8f 5f       	subi	r24, 0xFF	; 255
    c8d0:	80 93 6d 0a 	sts	0x0A6D, r24
    c8d4:	86 30       	cpi	r24, 0x06	; 6
    c8d6:	18 f0       	brcs	.+6      	; 0xc8de <UpdatePads+0xfc>
				cursorspeed = 1;//title screen will detect (cursorspeed != oldcursorspeed) to know the user has changed speed in this function
    c8d8:	81 e0       	ldi	r24, 0x01	; 1
    c8da:	80 93 6d 0a 	sts	0x0A6D, r24

//if(mousestate){
//SPrintBinary(5,5,mousestate);
//WaitVsync(10);
//}
			if(mousestate&0x80){//left movement
    c8de:	a0 91 f8 09 	lds	r26, 0x09F8
    c8e2:	b0 91 f9 09 	lds	r27, 0x09F9
    c8e6:	80 91 6d 0a 	lds	r24, 0x0A6D
    c8ea:	40 91 ff 09 	lds	r20, 0x09FF
    c8ee:	fd 01       	movw	r30, r26
    c8f0:	ef 77       	andi	r30, 0x7F	; 127
    c8f2:	f0 70       	andi	r31, 0x00	; 0
    c8f4:	a7 ff       	sbrs	r26, 7
    c8f6:	12 c0       	rjmp	.+36     	; 0xc91c <UpdatePads+0x13a>

				if(cursorx > ((mousestate&0x7F)*cursorspeed))
    c8f8:	90 e0       	ldi	r25, 0x00	; 0
    c8fa:	8e 9f       	mul	r24, r30
    c8fc:	90 01       	movw	r18, r0
    c8fe:	8f 9f       	mul	r24, r31
    c900:	30 0d       	add	r19, r0
    c902:	9e 9f       	mul	r25, r30
    c904:	30 0d       	add	r19, r0
    c906:	11 24       	eor	r1, r1
    c908:	84 2f       	mov	r24, r20
    c90a:	90 e0       	ldi	r25, 0x00	; 0
    c90c:	28 17       	cp	r18, r24
    c90e:	39 07       	cpc	r19, r25
    c910:	10 f4       	brcc	.+4      	; 0xc916 <UpdatePads+0x134>
					cursorx -= ((mousestate&0x7f)*cursorspeed);
    c912:	42 1b       	sub	r20, r18
    c914:	15 c0       	rjmp	.+42     	; 0xc940 <UpdatePads+0x15e>
				else
					cursorx = 0;
    c916:	10 92 ff 09 	sts	0x09FF, r1
    c91a:	18 c0       	rjmp	.+48     	; 0xc94c <UpdatePads+0x16a>
			}else{//right movement
				if(cursorx < ((((SCREEN_TILES_H*TILE_WIDTH)-1)-(CURSOR_TILES_H*8))-((mousestate&0x7f)*cursorspeed))+3)
    c91c:	90 e0       	ldi	r25, 0x00	; 0
    c91e:	8e 9f       	mul	r24, r30
    c920:	b0 01       	movw	r22, r0
    c922:	8f 9f       	mul	r24, r31
    c924:	70 0d       	add	r23, r0
    c926:	9e 9f       	mul	r25, r30
    c928:	70 0d       	add	r23, r0
    c92a:	11 24       	eor	r1, r1
    c92c:	24 2f       	mov	r18, r20
    c92e:	30 e0       	ldi	r19, 0x00	; 0
    c930:	8a ed       	ldi	r24, 0xDA	; 218
    c932:	90 e0       	ldi	r25, 0x00	; 0
    c934:	86 1b       	sub	r24, r22
    c936:	97 0b       	sbc	r25, r23
    c938:	28 17       	cp	r18, r24
    c93a:	39 07       	cpc	r19, r25
    c93c:	20 f4       	brcc	.+8      	; 0xc946 <UpdatePads+0x164>
					cursorx += (mousestate&0x7f)*cursorspeed;
    c93e:	46 0f       	add	r20, r22
    c940:	40 93 ff 09 	sts	0x09FF, r20
    c944:	03 c0       	rjmp	.+6      	; 0xc94c <UpdatePads+0x16a>
				else
					cursorx = (( ( (SCREEN_TILES_H*TILE_WIDTH)-1)-(CURSOR_TILES_H*8))+3);
    c946:	8a ed       	ldi	r24, 0xDA	; 218
    c948:	80 93 ff 09 	sts	0x09FF, r24
    c94c:	80 91 6d 0a 	lds	r24, 0x0A6D
    c950:	60 91 07 0a 	lds	r22, 0x0A07
    c954:	2b 2f       	mov	r18, r27
    c956:	33 27       	eor	r19, r19
			}
	
			if(mousestate&0x8000){//up movement
    c958:	b7 ff       	sbrs	r27, 7
    c95a:	14 c0       	rjmp	.+40     	; 0xc984 <UpdatePads+0x1a2>
				if(cursory > ((mousestate>>8)&0x7f)*cursorspeed)
    c95c:	2f 77       	andi	r18, 0x7F	; 127
    c95e:	30 70       	andi	r19, 0x00	; 0
    c960:	90 e0       	ldi	r25, 0x00	; 0
    c962:	28 9f       	mul	r18, r24
    c964:	a0 01       	movw	r20, r0
    c966:	29 9f       	mul	r18, r25
    c968:	50 0d       	add	r21, r0
    c96a:	38 9f       	mul	r19, r24
    c96c:	50 0d       	add	r21, r0
    c96e:	11 24       	eor	r1, r1
    c970:	86 2f       	mov	r24, r22
    c972:	90 e0       	ldi	r25, 0x00	; 0
    c974:	48 17       	cp	r20, r24
    c976:	59 07       	cpc	r21, r25
    c978:	10 f4       	brcc	.+4      	; 0xc97e <UpdatePads+0x19c>
					cursory -= ((mousestate>>8)&0x7f)*cursorspeed;
    c97a:	64 1b       	sub	r22, r20
    c97c:	17 c0       	rjmp	.+46     	; 0xc9ac <UpdatePads+0x1ca>
				else
					cursory = 0;
    c97e:	10 92 07 0a 	sts	0x0A07, r1
    c982:	08 95       	ret
			}else{//down movement
				if(cursory < ((((SCREEN_TILES_V*TILE_HEIGHT)-1)+18)-(CURSOR_TILES_H*8))-(cursorspeed*((mousestate>>8)&0x7f)))
    c984:	2f 77       	andi	r18, 0x7F	; 127
    c986:	30 70       	andi	r19, 0x00	; 0
    c988:	90 e0       	ldi	r25, 0x00	; 0
    c98a:	28 9f       	mul	r18, r24
    c98c:	a0 01       	movw	r20, r0
    c98e:	29 9f       	mul	r18, r25
    c990:	50 0d       	add	r21, r0
    c992:	38 9f       	mul	r19, r24
    c994:	50 0d       	add	r21, r0
    c996:	11 24       	eor	r1, r1
    c998:	26 2f       	mov	r18, r22
    c99a:	30 e0       	ldi	r19, 0x00	; 0
    c99c:	89 ec       	ldi	r24, 0xC9	; 201
    c99e:	90 e0       	ldi	r25, 0x00	; 0
    c9a0:	84 1b       	sub	r24, r20
    c9a2:	95 0b       	sbc	r25, r21
    c9a4:	28 17       	cp	r18, r24
    c9a6:	39 07       	cpc	r19, r25
    c9a8:	20 f4       	brcc	.+8      	; 0xc9b2 <UpdatePads+0x1d0>
					cursory += ((mousestate>>8)&0x7f)*cursorspeed;
    c9aa:	64 0f       	add	r22, r20
    c9ac:	60 93 07 0a 	sts	0x0A07, r22
    c9b0:	08 95       	ret
				else
					cursory = ((((SCREEN_TILES_V*TILE_HEIGHT)-1)+18)-(CURSOR_TILES_H*8))-(cursorspeed*((mousestate>>8)&0x7f));
    c9b2:	89 ec       	ldi	r24, 0xC9	; 201
    c9b4:	84 1b       	sub	r24, r20
    c9b6:	80 93 07 0a 	sts	0x0A07, r24
    c9ba:	08 95       	ret

0000c9bc <FloatCard>:
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
	}
}

 void FloatCard(uint8_t sx, uint8_t sy, uint8_t dx, uint8_t dy, uint8_t c, uint8_t skip_restore, uint8_t ticks_per_frame){
    c9bc:	a0 e0       	ldi	r26, 0x00	; 0
    c9be:	b0 e0       	ldi	r27, 0x00	; 0
    c9c0:	e4 ee       	ldi	r30, 0xE4	; 228
    c9c2:	f4 e6       	ldi	r31, 0x64	; 100
    c9c4:	0c 94 8f 75 	jmp	0xeb1e	; 0xeb1e <__prologue_saves__+0xc>
    c9c8:	18 2f       	mov	r17, r24
    c9ca:	f6 2e       	mov	r15, r22
    c9cc:	a4 2e       	mov	r10, r20
    c9ce:	b2 2e       	mov	r11, r18
    c9d0:	80 2e       	mov	r8, r16
    c9d2:	9e 2c       	mov	r9, r14
	if(!skip_restore)
    c9d4:	ee 20       	and	r14, r14
    c9d6:	e1 f4       	brne	.+56     	; 0xca10 <FloatCard+0x54>
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    c9d8:	80 93 e9 0d 	sts	0x0DE9, r24
    c9dc:	a8 2f       	mov	r26, r24
    c9de:	b0 e0       	ldi	r27, 0x00	; 0
    c9e0:	a0 5e       	subi	r26, 0xE0	; 224
    c9e2:	be 4f       	sbci	r27, 0xFE	; 254
    c9e4:	e1 e8       	ldi	r30, 0x81	; 129
    c9e6:	fd e0       	ldi	r31, 0x0D	; 13
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    c9e8:	8c 91       	ld	r24, X
    c9ea:	80 83       	st	Z, r24
    c9ec:	11 96       	adiw	r26, 0x01	; 1
    c9ee:	8c 91       	ld	r24, X
    c9f0:	11 97       	sbiw	r26, 0x01	; 1
    c9f2:	81 83       	std	Z+1, r24	; 0x01
    c9f4:	12 96       	adiw	r26, 0x02	; 2
    c9f6:	8c 91       	ld	r24, X
    c9f8:	12 97       	sbiw	r26, 0x02	; 2
    c9fa:	82 83       	std	Z+2, r24	; 0x02
    c9fc:	13 96       	adiw	r26, 0x03	; 3
    c9fe:	8c 91       	ld	r24, X
    ca00:	13 97       	sbiw	r26, 0x03	; 3
    ca02:	83 83       	std	Z+3, r24	; 0x03
    ca04:	5e 96       	adiw	r26, 0x1e	; 30
    ca06:	34 96       	adiw	r30, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    ca08:	8d e0       	ldi	r24, 0x0D	; 13
    ca0a:	e9 3e       	cpi	r30, 0xE9	; 233
    ca0c:	f8 07       	cpc	r31, r24
    ca0e:	61 f7       	brne	.-40     	; 0xc9e8 <FloatCard+0x2c>
}

 void FloatCard(uint8_t sx, uint8_t sy, uint8_t dx, uint8_t dy, uint8_t c, uint8_t skip_restore, uint8_t ticks_per_frame){
	if(!skip_restore)
		SaveBuffer(sx);
	game_state |= CARD_FLOATING;
    ca10:	80 91 06 0a 	lds	r24, 0x0A06
    ca14:	82 60       	ori	r24, 0x02	; 2
    ca16:	80 93 06 0a 	sts	0x0A06, r24
    ca1a:	0c 2d       	mov	r16, r12
    ca1c:	dd 24       	eor	r13, r13
    ca1e:	d3 94       	inc	r13
    ca20:	ee 24       	eor	r14, r14
    ca22:	62 c0       	rjmp	.+196    	; 0xcae8 <FloatCard+0x12c>


//ticks_per_frame = 0;
	uint8_t ticks = ticks_per_frame;
	while(sx != dx || sy != dy){
		DrawCard(sx,sy,c);
    ca24:	81 2f       	mov	r24, r17
    ca26:	6f 2d       	mov	r22, r15
    ca28:	48 2d       	mov	r20, r8
    ca2a:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
//		UpdatePad();//done in wait vsync routine
		if(!did_update_cursor){
    ca2e:	ee 20       	and	r14, r14
    ca30:	21 f4       	brne	.+8      	; 0xca3a <FloatCard+0x7e>
			UpdateCursor(1);
    ca32:	81 e0       	ldi	r24, 0x01	; 1
    ca34:	b3 d1       	rcall	.+870    	; 0xcd9c <UpdateCursor>
			DrawCursor();
    ca36:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
			did_update_cursor = 1;
		}
		if(ticks_per_frame)
    ca3a:	00 23       	and	r16, r16
    ca3c:	21 f0       	breq	.+8      	; 0xca46 <FloatCard+0x8a>
			ticks_per_frame--;
    ca3e:	01 50       	subi	r16, 0x01	; 1
    ca40:	ee 24       	eor	r14, r14
    ca42:	e3 94       	inc	r14
    ca44:	08 c0       	rjmp	.+16     	; 0xca56 <FloatCard+0x9a>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    ca46:	cd de       	rcall	.-614    	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    ca48:	91 dc       	rcall	.-1758   	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    ca4a:	81 e0       	ldi	r24, 0x01	; 1
    ca4c:	90 e0       	ldi	r25, 0x00	; 0
    ca4e:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
    ca52:	0c 2d       	mov	r16, r12
    ca54:	ee 24       	eor	r14, r14
			SWaitVsync(1);
//SWaitVsync(100);
			did_update_cursor = 0;
		}
//		SWaitVsync(1);//////////////////////////////////////////////////
		flipflop = !flipflop;
    ca56:	81 e0       	ldi	r24, 0x01	; 1
    ca58:	d8 26       	eor	r13, r24
    ca5a:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_t i=0;i<2;i++){
			if(flipflop)
    ca5c:	d1 10       	cpse	r13, r1
				i++;
    ca5e:	8f 5f       	subi	r24, 0xFF	; 255
			if(sx < dx)
    ca60:	1a 15       	cp	r17, r10
    ca62:	10 f4       	brcc	.+4      	; 0xca68 <FloatCard+0xac>
				sx++;
    ca64:	1f 5f       	subi	r17, 0xFF	; 255
    ca66:	03 c0       	rjmp	.+6      	; 0xca6e <FloatCard+0xb2>
			else if(sx > dx)
    ca68:	a1 16       	cp	r10, r17
    ca6a:	08 f4       	brcc	.+2      	; 0xca6e <FloatCard+0xb2>
				sx--;
    ca6c:	11 50       	subi	r17, 0x01	; 1
			if(sy < dy)
    ca6e:	fb 14       	cp	r15, r11
    ca70:	10 f4       	brcc	.+4      	; 0xca76 <FloatCard+0xba>
				sy++;
    ca72:	f3 94       	inc	r15
    ca74:	03 c0       	rjmp	.+6      	; 0xca7c <FloatCard+0xc0>
			else if(sy > dy)
    ca76:	bf 14       	cp	r11, r15
    ca78:	08 f4       	brcc	.+2      	; 0xca7c <FloatCard+0xc0>
				sy--;
    ca7a:	fa 94       	dec	r15
//SWaitVsync(100);
			did_update_cursor = 0;
		}
//		SWaitVsync(1);//////////////////////////////////////////////////
		flipflop = !flipflop;
		for(uint8_t i=0;i<2;i++){
    ca7c:	8f 5f       	subi	r24, 0xFF	; 255
    ca7e:	82 30       	cpi	r24, 0x02	; 2
    ca80:	68 f3       	brcs	.-38     	; 0xca5c <FloatCard+0xa0>
			if(sy < dy)
				sy++;
			else if(sy > dy)
				sy--;
		}
		if(!skip_restore){
    ca82:	99 20       	and	r9, r9
    ca84:	89 f5       	brne	.+98     	; 0xcae8 <FloatCard+0x12c>
    ca86:	c1 e8       	ldi	r28, 0x81	; 129
    ca88:	dd e0       	ldi	r29, 0x0D	; 13
    ca8a:	80 91 e9 0d 	lds	r24, 0x0DE9
    ca8e:	a8 2f       	mov	r26, r24
    ca90:	b0 e0       	ldi	r27, 0x00	; 0
    ca92:	a0 5e       	subi	r26, 0xE0	; 224
    ca94:	be 4f       	sbci	r27, 0xFE	; 254
    ca96:	fe 01       	movw	r30, r28
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
    ca98:	80 81       	ld	r24, Z
    ca9a:	8c 93       	st	X, r24
    ca9c:	81 81       	ldd	r24, Z+1	; 0x01
    ca9e:	11 96       	adiw	r26, 0x01	; 1
    caa0:	8c 93       	st	X, r24
    caa2:	11 97       	sbiw	r26, 0x01	; 1
    caa4:	82 81       	ldd	r24, Z+2	; 0x02
    caa6:	12 96       	adiw	r26, 0x02	; 2
    caa8:	8c 93       	st	X, r24
    caaa:	12 97       	sbiw	r26, 0x02	; 2
    caac:	83 81       	ldd	r24, Z+3	; 0x03
    caae:	13 96       	adiw	r26, 0x03	; 3
    cab0:	8c 93       	st	X, r24
    cab2:	13 97       	sbiw	r26, 0x03	; 3
    cab4:	34 96       	adiw	r30, 0x04	; 4
    cab6:	5e 96       	adiw	r26, 0x1e	; 30

inline void RestoreBuffer(){
//running out of cyles and its bordering on the edge with this function
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
    cab8:	8d e0       	ldi	r24, 0x0D	; 13
    caba:	e9 3e       	cpi	r30, 0xE9	; 233
    cabc:	f8 07       	cpc	r31, r24
    cabe:	61 f7       	brne	.-40     	; 0xca98 <FloatCard+0xdc>
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    cac0:	10 93 e9 0d 	sts	0x0DE9, r17
    cac4:	e1 2f       	mov	r30, r17
    cac6:	f0 e0       	ldi	r31, 0x00	; 0
    cac8:	e0 5e       	subi	r30, 0xE0	; 224
    caca:	fe 4f       	sbci	r31, 0xFE	; 254
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    cacc:	80 81       	ld	r24, Z
    cace:	88 83       	st	Y, r24
    cad0:	81 81       	ldd	r24, Z+1	; 0x01
    cad2:	89 83       	std	Y+1, r24	; 0x01
    cad4:	82 81       	ldd	r24, Z+2	; 0x02
    cad6:	8a 83       	std	Y+2, r24	; 0x02
    cad8:	83 81       	ldd	r24, Z+3	; 0x03
    cada:	8b 83       	std	Y+3, r24	; 0x03
    cadc:	7e 96       	adiw	r30, 0x1e	; 30
    cade:	24 96       	adiw	r28, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    cae0:	8d e0       	ldi	r24, 0x0D	; 13
    cae2:	c9 3e       	cpi	r28, 0xE9	; 233
    cae4:	d8 07       	cpc	r29, r24
    cae6:	91 f7       	brne	.-28     	; 0xcacc <FloatCard+0x110>
	uint8_t did_update_cursor = 0;


//ticks_per_frame = 0;
	uint8_t ticks = ticks_per_frame;
	while(sx != dx || sy != dy){
    cae8:	1a 15       	cp	r17, r10
    caea:	09 f0       	breq	.+2      	; 0xcaee <FloatCard+0x132>
    caec:	9b cf       	rjmp	.-202    	; 0xca24 <FloatCard+0x68>
    caee:	fb 14       	cp	r15, r11
    caf0:	09 f0       	breq	.+2      	; 0xcaf4 <FloatCard+0x138>
    caf2:	98 cf       	rjmp	.-208    	; 0xca24 <FloatCard+0x68>
		if(!skip_restore){
			RestoreBuffer();
			SaveBuffer(sx);
		}
	}
	game_state ^= CARD_FLOATING;
    caf4:	80 91 06 0a 	lds	r24, 0x0A06
    caf8:	92 e0       	ldi	r25, 0x02	; 2
    cafa:	89 27       	eor	r24, r25
    cafc:	80 93 06 0a 	sts	0x0A06, r24
}
    cb00:	cd b7       	in	r28, 0x3d	; 61
    cb02:	de b7       	in	r29, 0x3e	; 62
    cb04:	ec e0       	ldi	r30, 0x0C	; 12
    cb06:	0c 94 ab 75 	jmp	0xeb56	; 0xeb56 <__epilogue_restores__+0xc>

0000cb0a <DealHand>:
	for(uint8_t i=0;i<NUM_STACKS-1;i++)
		DrawStack(i);

}

void DealHand(){
    cb0a:	a0 e0       	ldi	r26, 0x00	; 0
    cb0c:	b0 e0       	ldi	r27, 0x00	; 0
    cb0e:	eb e8       	ldi	r30, 0x8B	; 139
    cb10:	f5 e6       	ldi	r31, 0x65	; 101
    cb12:	0c 94 8a 75 	jmp	0xeb14	; 0xeb14 <__prologue_saves__+0x2>
//prng_state = 0x34aa;
	round_seconds = round_ticks = game_score = 0;
    cb16:	10 92 02 0a 	sts	0x0A02, r1
    cb1a:	10 92 01 0a 	sts	0x0A01, r1
    cb1e:	10 92 10 0a 	sts	0x0A10, r1
    cb22:	10 92 66 0a 	sts	0x0A66, r1
    cb26:	10 92 65 0a 	sts	0x0A65, r1
	DrawCursor();
    cb2a:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
	uint8_t ct;
	uint8_t xoff = 5;
	if(game_state & CHEAT_ACTIVE){
    cb2e:	80 91 06 0a 	lds	r24, 0x0A06
    cb32:	86 fd       	sbrc	r24, 6
    cb34:	09 c0       	rjmp	.+18     	; 0xcb48 <DealHand+0x3e>
    cb36:	5b ef       	ldi	r21, 0xFB	; 251
    cb38:	a5 2e       	mov	r10, r21
    cb3a:	5b e0       	ldi	r21, 0x0B	; 11
    cb3c:	b5 2e       	mov	r11, r21
    cb3e:	45 e0       	ldi	r20, 0x05	; 5
    cb40:	f4 2e       	mov	r15, r20
    cb42:	80 e0       	ldi	r24, 0x00	; 0
    cb44:	90 e0       	ldi	r25, 0x00	; 0
    cb46:	47 c0       	rjmp	.+142    	; 0xcbd6 <DealHand+0xcc>
    cb48:	e5 e7       	ldi	r30, 0x75	; 117
    cb4a:	fa e0       	ldi	r31, 0x0A	; 10
		for(uint8_t i=0;i<52;i++)
			stacks[STACK_DECK].cards[i] |= FACEUP;
    cb4c:	80 81       	ld	r24, Z
    cb4e:	80 68       	ori	r24, 0x80	; 128
    cb50:	81 93       	st	Z+, r24
	round_seconds = round_ticks = game_score = 0;
	DrawCursor();
	uint8_t ct;
	uint8_t xoff = 5;
	if(game_state & CHEAT_ACTIVE){
		for(uint8_t i=0;i<52;i++)
    cb52:	2a e0       	ldi	r18, 0x0A	; 10
    cb54:	e9 3a       	cpi	r30, 0xA9	; 169
    cb56:	f2 07       	cpc	r31, r18
    cb58:	c9 f7       	brne	.-14     	; 0xcb4c <DealHand+0x42>
    cb5a:	ed cf       	rjmp	.-38     	; 0xcb36 <DealHand+0x2c>
			stacks[STACK_DECK].cards[i] |= FACEUP;
	}

	for(uint8_t i=7;i<NUM_STACKS-1;i++){
		for(uint8_t j=0;j<i-5;j++){
			ct = RemoveCard(STACK_DECK,stacks[STACK_DECK].numcards-1);
    cb5c:	e0 91 73 0a 	lds	r30, 0x0A73
inline void AddCard(uint8_t s, uint8_t c){
	stacks[s].cards[stacks[s].numcards++] = c;
}

inline uint8_t RemoveCard(uint8_t s, uint8_t c){
	stacks[s].numcards--;
    cb60:	e1 50       	subi	r30, 0x01	; 1
    cb62:	e0 93 73 0a 	sts	0x0A73, r30
	return stacks[s].cards[c];
    cb66:	f0 e0       	ldi	r31, 0x00	; 0
    cb68:	ef 58       	subi	r30, 0x8F	; 143
    cb6a:	f5 4f       	sbci	r31, 0xF5	; 245
    cb6c:	14 81       	ldd	r17, Z+4	; 0x04
	}

	for(uint8_t i=7;i<NUM_STACKS-1;i++){
		for(uint8_t j=0;j<i-5;j++){
			ct = RemoveCard(STACK_DECK,stacks[STACK_DECK].numcards-1);
			DrawStack(STACK_DECK);
    cb6e:	80 e0       	ldi	r24, 0x00	; 0
    cb70:	b2 d8       	rcall	.-3740   	; 0xbcd6 <DrawStack>
			if(j == i-6)
    cb72:	c6 15       	cp	r28, r6
    cb74:	d7 05       	cpc	r29, r7
    cb76:	09 f4       	brne	.+2      	; 0xcb7a <DealHand+0x70>
				ct |= FACEUP;
    cb78:	10 68       	ori	r17, 0x80	; 128
			FloatCard(1,0,xoff,6+stacks[i].numcards,ct,0,1);
    cb7a:	f5 01       	movw	r30, r10
    cb7c:	20 81       	ld	r18, Z
    cb7e:	2a 5f       	subi	r18, 0xFA	; 250
    cb80:	81 e0       	ldi	r24, 0x01	; 1
    cb82:	60 e0       	ldi	r22, 0x00	; 0
    cb84:	4f 2d       	mov	r20, r15
    cb86:	01 2f       	mov	r16, r17
    cb88:	ee 24       	eor	r14, r14
    cb8a:	cc 24       	eor	r12, r12
    cb8c:	c3 94       	inc	r12
    cb8e:	16 df       	rcall	.-468    	; 0xc9bc <FloatCard>
	SetTileClipped(x+0,y+4,GFX_BLNK_LEFT_SIDE_START);
	SetTileClipped(x+0,y+5,GFX_CRNR_SMALL_BOT_START+0);
}

inline void AddCard(uint8_t s, uint8_t c){
	stacks[s].cards[stacks[s].numcards++] = c;
    cb90:	f5 01       	movw	r30, r10
    cb92:	80 81       	ld	r24, Z
    cb94:	f4 01       	movw	r30, r8
    cb96:	e8 0f       	add	r30, r24
    cb98:	f1 1d       	adc	r31, r1
    cb9a:	14 83       	std	Z+4, r17	; 0x04
    cb9c:	8f 5f       	subi	r24, 0xFF	; 255
    cb9e:	f5 01       	movw	r30, r10
    cba0:	80 83       	st	Z, r24
			DrawStack(STACK_DECK);
			if(j == i-6)
				ct |= FACEUP;
			FloatCard(1,0,xoff,6+stacks[i].numcards,ct,0,1);
			AddCard(i,ct);
			DrawStack(i);
    cba2:	83 2d       	mov	r24, r3
    cba4:	98 d8       	rcall	.-3792   	; 0xbcd6 <DrawStack>
			if(!ai_state && demo_playing){//ai demo started, but was interrupted by the user. let the main loop handle this
    cba6:	80 91 03 0a 	lds	r24, 0x0A03
    cbaa:	88 23       	and	r24, r24
    cbac:	21 f4       	brne	.+8      	; 0xcbb6 <DealHand+0xac>
    cbae:	80 91 f7 09 	lds	r24, 0x09F7
    cbb2:	88 23       	and	r24, r24
    cbb4:	89 f5       	brne	.+98     	; 0xcc18 <DealHand+0x10e>
		for(uint8_t i=0;i<52;i++)
			stacks[STACK_DECK].cards[i] |= FACEUP;
	}

	for(uint8_t i=7;i<NUM_STACKS-1;i++){
		for(uint8_t j=0;j<i-5;j++){
    cbb6:	d3 94       	inc	r13
    cbb8:	cd 2d       	mov	r28, r13
    cbba:	d0 e0       	ldi	r29, 0x00	; 0
    cbbc:	c4 15       	cp	r28, r4
    cbbe:	d5 05       	cpc	r29, r5
    cbc0:	6c f2       	brlt	.-102    	; 0xcb5c <DealHand+0x52>
    cbc2:	c3 01       	movw	r24, r6
    cbc4:	28 e3       	ldi	r18, 0x38	; 56
    cbc6:	30 e0       	ldi	r19, 0x00	; 0
    cbc8:	a2 0e       	add	r10, r18
    cbca:	b3 1e       	adc	r11, r19
	if(game_state & CHEAT_ACTIVE){
		for(uint8_t i=0;i<52;i++)
			stacks[STACK_DECK].cards[i] |= FACEUP;
	}

	for(uint8_t i=7;i<NUM_STACKS-1;i++){
    cbcc:	39 e1       	ldi	r19, 0x19	; 25
    cbce:	f3 16       	cp	r15, r19
    cbd0:	f1 f0       	breq	.+60     	; 0xcc0e <DealHand+0x104>
			DrawStack(i);
			if(!ai_state && demo_playing){//ai demo started, but was interrupted by the user. let the main loop handle this
				return;
			}
		}
			xoff += 4;
    cbd2:	e4 e0       	ldi	r30, 0x04	; 4
    cbd4:	fe 0e       	add	r15, r30
    cbd6:	37 e0       	ldi	r19, 0x07	; 7
    cbd8:	33 2e       	mov	r3, r19
    cbda:	38 0e       	add	r3, r24
    cbdc:	dd 24       	eor	r13, r13
		for(uint8_t i=0;i<52;i++)
			stacks[STACK_DECK].cards[i] |= FACEUP;
	}

	for(uint8_t i=7;i<NUM_STACKS-1;i++){
		for(uint8_t j=0;j<i-5;j++){
    cbde:	22 e0       	ldi	r18, 0x02	; 2
    cbe0:	42 2e       	mov	r4, r18
    cbe2:	51 2c       	mov	r5, r1
    cbe4:	48 0e       	add	r4, r24
    cbe6:	59 1e       	adc	r5, r25
    cbe8:	3c 01       	movw	r6, r24
    cbea:	08 94       	sec
    cbec:	61 1c       	adc	r6, r1
    cbee:	71 1c       	adc	r7, r1
    cbf0:	07 96       	adiw	r24, 0x07	; 7
	SetTileClipped(x+0,y+4,GFX_BLNK_LEFT_SIDE_START);
	SetTileClipped(x+0,y+5,GFX_CRNR_SMALL_BOT_START+0);
}

inline void AddCard(uint8_t s, uint8_t c){
	stacks[s].cards[stacks[s].numcards++] = c;
    cbf2:	28 e3       	ldi	r18, 0x38	; 56
    cbf4:	30 e0       	ldi	r19, 0x00	; 0
    cbf6:	82 9f       	mul	r24, r18
    cbf8:	40 01       	movw	r8, r0
    cbfa:	83 9f       	mul	r24, r19
    cbfc:	90 0c       	add	r9, r0
    cbfe:	92 9f       	mul	r25, r18
    cc00:	90 0c       	add	r9, r0
    cc02:	11 24       	eor	r1, r1
    cc04:	81 e7       	ldi	r24, 0x71	; 113
    cc06:	9a e0       	ldi	r25, 0x0A	; 10
    cc08:	88 0e       	add	r8, r24
    cc0a:	99 1e       	adc	r9, r25
    cc0c:	d5 cf       	rjmp	.-86     	; 0xcbb8 <DealHand+0xae>
				return;
			}
		}
			xoff += 4;
	}
	game_state |= CARDS_DEALT;
    cc0e:	80 91 06 0a 	lds	r24, 0x0A06
    cc12:	80 62       	ori	r24, 0x20	; 32
    cc14:	80 93 06 0a 	sts	0x0A06, r24

}
    cc18:	cd b7       	in	r28, 0x3d	; 61
    cc1a:	de b7       	in	r29, 0x3e	; 62
    cc1c:	e1 e1       	ldi	r30, 0x11	; 17
    cc1e:	0c 94 a6 75 	jmp	0xeb4c	; 0xeb4c <__epilogue_restores__+0x2>

0000cc22 <HandleDeckClick>:
		return 0;}

	return 1;//if none of that is wrong, we can stack it!
}

void HandleDeckClick(uint8_t gt){
    cc22:	cf 92       	push	r12
    cc24:	ef 92       	push	r14
    cc26:	ff 92       	push	r15
    cc28:	0f 93       	push	r16
    cc2a:	1f 93       	push	r17
	if(!stacks[STACK_DECK].numcards && stacks[STACK_DRAW].numcards > 1){//blank out the draw pile, put the deck back
    cc2c:	80 91 73 0a 	lds	r24, 0x0A73
    cc30:	88 23       	and	r24, r24
    cc32:	11 f0       	breq	.+4      	; 0xcc38 <HandleDeckClick+0x16>
    cc34:	ff 24       	eor	r15, r15
    cc36:	9d c0       	rjmp	.+314    	; 0xcd72 <HandleDeckClick+0x150>
    cc38:	80 91 ab 0a 	lds	r24, 0x0AAB
    cc3c:	82 30       	cpi	r24, 0x02	; 2
    cc3e:	08 f4       	brcc	.+2      	; 0xcc42 <HandleDeckClick+0x20>
    cc40:	a7 c0       	rjmp	.+334    	; 0xcd90 <HandleDeckClick+0x16e>
		DrawCard(stacks[STACK_DRAW].x,stacks[STACK_DRAW].y,MAX_CARDS);
    cc42:	80 91 a9 0a 	lds	r24, 0x0AA9
    cc46:	60 91 aa 0a 	lds	r22, 0x0AAA
    cc4a:	44 e3       	ldi	r20, 0x34	; 52
    cc4c:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
		
		for(uint8_t ty=stacks[STACK_DRAW].y;ty<stacks[STACK_DRAW].y+CARD_TILES_V;ty++)
			for(uint8_t tx=stacks[STACK_DRAW].x+CARD_TILES_H;tx<stacks[STACK_DRAW].x+(CARD_TILES_H*2)-2;tx++)
    cc50:	80 91 a9 0a 	lds	r24, 0x0AA9
    cc54:	18 2f       	mov	r17, r24
    cc56:	1c 5f       	subi	r17, 0xFC	; 252
    cc58:	00 91 aa 0a 	lds	r16, 0x0AAA

void HandleDeckClick(uint8_t gt){
	if(!stacks[STACK_DECK].numcards && stacks[STACK_DRAW].numcards > 1){//blank out the draw pile, put the deck back
		DrawCard(stacks[STACK_DRAW].x,stacks[STACK_DRAW].y,MAX_CARDS);
		
		for(uint8_t ty=stacks[STACK_DRAW].y;ty<stacks[STACK_DRAW].y+CARD_TILES_V;ty++)
    cc5c:	a0 2f       	mov	r26, r16
    cc5e:	b0 e0       	ldi	r27, 0x00	; 0
    cc60:	15 96       	adiw	r26, 0x05	; 5
			for(uint8_t tx=stacks[STACK_DRAW].x+CARD_TILES_H;tx<stacks[STACK_DRAW].x+(CARD_TILES_H*2)-2;tx++)
    cc62:	68 2f       	mov	r22, r24
    cc64:	70 e0       	ldi	r23, 0x00	; 0
    cc66:	6b 5f       	subi	r22, 0xFB	; 251
    cc68:	7f 4f       	sbci	r23, 0xFF	; 255
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    cc6a:	80 e1       	ldi	r24, 0x10	; 16
    cc6c:	1c c0       	rjmp	.+56     	; 0xcca6 <HandleDeckClick+0x84>
    cc6e:	a9 01       	movw	r20, r18
    cc70:	f5 e0       	ldi	r31, 0x05	; 5
    cc72:	44 0f       	add	r20, r20
    cc74:	55 1f       	adc	r21, r21
    cc76:	fa 95       	dec	r31
    cc78:	e1 f7       	brne	.-8      	; 0xcc72 <HandleDeckClick+0x50>
    cc7a:	22 0f       	add	r18, r18
    cc7c:	33 1f       	adc	r19, r19
    cc7e:	42 1b       	sub	r20, r18
    cc80:	53 0b       	sbc	r21, r19
    cc82:	91 2f       	mov	r25, r17
    cc84:	40 5e       	subi	r20, 0xE0	; 224
    cc86:	5e 4f       	sbci	r21, 0xFE	; 254
    cc88:	08 c0       	rjmp	.+16     	; 0xcc9a <HandleDeckClick+0x78>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    cc8a:	9e 31       	cpi	r25, 0x1E	; 30
    cc8c:	28 f4       	brcc	.+10     	; 0xcc98 <HandleDeckClick+0x76>
    cc8e:	0a 31       	cpi	r16, 0x1A	; 26
    cc90:	18 f4       	brcc	.+6      	; 0xcc98 <HandleDeckClick+0x76>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    cc92:	e4 0f       	add	r30, r20
    cc94:	f5 1f       	adc	r31, r21
    cc96:	80 83       	st	Z, r24
    cc98:	9f 5f       	subi	r25, 0xFF	; 255
    cc9a:	e9 2f       	mov	r30, r25
    cc9c:	f0 e0       	ldi	r31, 0x00	; 0
    cc9e:	6e 17       	cp	r22, r30
    cca0:	7f 07       	cpc	r23, r31
    cca2:	9c f7       	brge	.-26     	; 0xcc8a <HandleDeckClick+0x68>

void HandleDeckClick(uint8_t gt){
	if(!stacks[STACK_DECK].numcards && stacks[STACK_DRAW].numcards > 1){//blank out the draw pile, put the deck back
		DrawCard(stacks[STACK_DRAW].x,stacks[STACK_DRAW].y,MAX_CARDS);
		
		for(uint8_t ty=stacks[STACK_DRAW].y;ty<stacks[STACK_DRAW].y+CARD_TILES_V;ty++)
    cca4:	0f 5f       	subi	r16, 0xFF	; 255
    cca6:	20 2f       	mov	r18, r16
    cca8:	30 e0       	ldi	r19, 0x00	; 0
    ccaa:	a2 17       	cp	r26, r18
    ccac:	b3 07       	cpc	r27, r19
    ccae:	fc f6       	brge	.-66     	; 0xcc6e <HandleDeckClick+0x4c>
			for(uint8_t tx=stacks[STACK_DRAW].x+CARD_TILES_H;tx<stacks[STACK_DRAW].x+(CARD_TILES_H*2)-2;tx++)
				SetTileClipped(tx,ty,0);
		
		if(!(game_state & CHEAT_ACTIVE))
    ccb0:	80 91 06 0a 	lds	r24, 0x0A06
    ccb4:	86 fd       	sbrc	r24, 6
    ccb6:	0e c0       	rjmp	.+28     	; 0xccd4 <HandleDeckClick+0xb2>
    ccb8:	90 e0       	ldi	r25, 0x00	; 0
    ccba:	08 c0       	rjmp	.+16     	; 0xcccc <HandleDeckClick+0xaa>
			for(uint8_t co=0;co<stacks[STACK_DRAW].numcards;co++)
				stacks[STACK_DRAW].cards[co] ^= FACEUP;
    ccbc:	e9 2f       	mov	r30, r25
    ccbe:	f0 e0       	ldi	r31, 0x00	; 0
    ccc0:	ef 58       	subi	r30, 0x8F	; 143
    ccc2:	f5 4f       	sbci	r31, 0xF5	; 245
    ccc4:	84 ad       	ldd	r24, Z+60	; 0x3c
    ccc6:	80 58       	subi	r24, 0x80	; 128
    ccc8:	84 af       	std	Z+60, r24	; 0x3c
		for(uint8_t ty=stacks[STACK_DRAW].y;ty<stacks[STACK_DRAW].y+CARD_TILES_V;ty++)
			for(uint8_t tx=stacks[STACK_DRAW].x+CARD_TILES_H;tx<stacks[STACK_DRAW].x+(CARD_TILES_H*2)-2;tx++)
				SetTileClipped(tx,ty,0);
		
		if(!(game_state & CHEAT_ACTIVE))
			for(uint8_t co=0;co<stacks[STACK_DRAW].numcards;co++)
    ccca:	9f 5f       	subi	r25, 0xFF	; 255
    cccc:	80 91 ab 0a 	lds	r24, 0x0AAB
    ccd0:	98 17       	cp	r25, r24
    ccd2:	a0 f3       	brcs	.-24     	; 0xccbc <HandleDeckClick+0x9a>
				stacks[STACK_DRAW].cards[co] ^= FACEUP;
		
		TransferStack(STACK_DRAW,0,STACK_DECK,0);
    ccd4:	81 e0       	ldi	r24, 0x01	; 1
    ccd6:	60 e0       	ldi	r22, 0x00	; 0
    ccd8:	40 e0       	ldi	r20, 0x00	; 0
    ccda:	20 e0       	ldi	r18, 0x00	; 0
    ccdc:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
		DrawStack(STACK_DECK);
    cce0:	80 e0       	ldi	r24, 0x00	; 0
    cce2:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
		if(game_score > SCORE_RECYCLE_DECK_PENALTY)
    cce6:	80 91 01 0a 	lds	r24, 0x0A01
    ccea:	90 91 02 0a 	lds	r25, 0x0A02
    ccee:	85 36       	cpi	r24, 0x65	; 101
    ccf0:	91 05       	cpc	r25, r1
    ccf2:	38 f0       	brcs	.+14     	; 0xcd02 <HandleDeckClick+0xe0>
			game_score -= SCORE_RECYCLE_DECK_PENALTY;
    ccf4:	84 56       	subi	r24, 0x64	; 100
    ccf6:	90 40       	sbci	r25, 0x00	; 0
    ccf8:	90 93 02 0a 	sts	0x0A02, r25
    ccfc:	80 93 01 0a 	sts	0x0A01, r24
    cd00:	47 c0       	rjmp	.+142    	; 0xcd90 <HandleDeckClick+0x16e>
		else
			game_score = 0;
    cd02:	10 92 02 0a 	sts	0x0A02, r1
    cd06:	10 92 01 0a 	sts	0x0A01, r1
    cd0a:	42 c0       	rjmp	.+132    	; 0xcd90 <HandleDeckClick+0x16e>
	}else if(stacks[STACK_DECK].numcards){//put a new card on the draw pile
		for(uint8_t i=0;i<1+((game_state & DRAW_THREE)?2:0);i++){
			gt = RemoveCard(STACK_DECK,stacks[STACK_DECK].numcards-1);
    cd0c:	80 91 73 0a 	lds	r24, 0x0A73
inline void AddCard(uint8_t s, uint8_t c){
	stacks[s].cards[stacks[s].numcards++] = c;
}

inline uint8_t RemoveCard(uint8_t s, uint8_t c){
	stacks[s].numcards--;
    cd10:	81 50       	subi	r24, 0x01	; 1
    cd12:	80 93 73 0a 	sts	0x0A73, r24
	return stacks[s].cards[c];
    cd16:	e8 2f       	mov	r30, r24
    cd18:	f0 e0       	ldi	r31, 0x00	; 0
    cd1a:	ef 58       	subi	r30, 0x8F	; 143
    cd1c:	f5 4f       	sbci	r31, 0xF5	; 245
    cd1e:	14 81       	ldd	r17, Z+4	; 0x04
		else
			game_score = 0;
	}else if(stacks[STACK_DECK].numcards){//put a new card on the draw pile
		for(uint8_t i=0;i<1+((game_state & DRAW_THREE)?2:0);i++){
			gt = RemoveCard(STACK_DECK,stacks[STACK_DECK].numcards-1);
			gt |= FACEUP;
    cd20:	10 68       	ori	r17, 0x80	; 128
			if(!stacks[STACK_DECK].numcards){
    cd22:	88 23       	and	r24, r24
    cd24:	59 f4       	brne	.+22     	; 0xcd3c <HandleDeckClick+0x11a>
				if(!i)
    cd26:	ff 20       	and	r15, r15
    cd28:	39 f4       	brne	.+14     	; 0xcd38 <HandleDeckClick+0x116>
					DrawCard(stacks[STACK_DECK].x,stacks[STACK_DECK].y,MAX_CARDS);//blank over it
    cd2a:	80 91 71 0a 	lds	r24, 0x0A71
    cd2e:	60 91 72 0a 	lds	r22, 0x0A72
    cd32:	44 e3       	ldi	r20, 0x34	; 52
    cd34:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
    cd38:	68 ec       	ldi	r22, 0xC8	; 200
    cd3a:	f6 2e       	mov	r15, r22
				i = 200;
			}
			FloatCard(stacks[STACK_DECK].x,stacks[STACK_DECK].y,stacks[STACK_DECK].x,stacks[STACK_DECK].y,gt,0,0);
    cd3c:	40 91 71 0a 	lds	r20, 0x0A71
    cd40:	20 91 72 0a 	lds	r18, 0x0A72
    cd44:	84 2f       	mov	r24, r20
    cd46:	62 2f       	mov	r22, r18
    cd48:	01 2f       	mov	r16, r17
    cd4a:	ee 24       	eor	r14, r14
    cd4c:	cc 24       	eor	r12, r12
    cd4e:	36 de       	rcall	.-916    	; 0xc9bc <FloatCard>
	SetTileClipped(x+0,y+4,GFX_BLNK_LEFT_SIDE_START);
	SetTileClipped(x+0,y+5,GFX_CRNR_SMALL_BOT_START+0);
}

inline void AddCard(uint8_t s, uint8_t c){
	stacks[s].cards[stacks[s].numcards++] = c;
    cd50:	80 91 ab 0a 	lds	r24, 0x0AAB
    cd54:	e8 2f       	mov	r30, r24
    cd56:	f0 e0       	ldi	r31, 0x00	; 0
    cd58:	ef 58       	subi	r30, 0x8F	; 143
    cd5a:	f5 4f       	sbci	r31, 0xF5	; 245
    cd5c:	14 af       	std	Z+60, r17	; 0x3c
    cd5e:	8f 5f       	subi	r24, 0xFF	; 255
    cd60:	80 93 ab 0a 	sts	0x0AAB, r24
					DrawCard(stacks[STACK_DECK].x,stacks[STACK_DECK].y,MAX_CARDS);//blank over it
				i = 200;
			}
			FloatCard(stacks[STACK_DECK].x,stacks[STACK_DECK].y,stacks[STACK_DECK].x,stacks[STACK_DECK].y,gt,0,0);
			AddCard(STACK_DRAW,gt);
			DrawStack(STACK_DECK);
    cd64:	80 e0       	ldi	r24, 0x00	; 0
    cd66:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
			DrawStack(STACK_DRAW);
    cd6a:	81 e0       	ldi	r24, 0x01	; 1
    cd6c:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
		if(game_score > SCORE_RECYCLE_DECK_PENALTY)
			game_score -= SCORE_RECYCLE_DECK_PENALTY;
		else
			game_score = 0;
	}else if(stacks[STACK_DECK].numcards){//put a new card on the draw pile
		for(uint8_t i=0;i<1+((game_state & DRAW_THREE)?2:0);i++){
    cd70:	f3 94       	inc	r15
    cd72:	80 91 06 0a 	lds	r24, 0x0A06
    cd76:	80 fd       	sbrc	r24, 0
    cd78:	03 c0       	rjmp	.+6      	; 0xcd80 <HandleDeckClick+0x15e>
    cd7a:	21 e0       	ldi	r18, 0x01	; 1
    cd7c:	30 e0       	ldi	r19, 0x00	; 0
    cd7e:	02 c0       	rjmp	.+4      	; 0xcd84 <HandleDeckClick+0x162>
    cd80:	23 e0       	ldi	r18, 0x03	; 3
    cd82:	30 e0       	ldi	r19, 0x00	; 0
    cd84:	8f 2d       	mov	r24, r15
    cd86:	90 e0       	ldi	r25, 0x00	; 0
    cd88:	82 17       	cp	r24, r18
    cd8a:	93 07       	cpc	r25, r19
    cd8c:	0c f4       	brge	.+2      	; 0xcd90 <HandleDeckClick+0x16e>
    cd8e:	be cf       	rjmp	.-132    	; 0xcd0c <HandleDeckClick+0xea>
			AddCard(STACK_DRAW,gt);
			DrawStack(STACK_DECK);
			DrawStack(STACK_DRAW);
		}
	}
}
    cd90:	1f 91       	pop	r17
    cd92:	0f 91       	pop	r16
    cd94:	ff 90       	pop	r15
    cd96:	ef 90       	pop	r14
    cd98:	cf 90       	pop	r12
    cd9a:	08 95       	ret

0000cd9c <UpdateCursor>:

void UpdateCursor(uint8_t skiplogic){
    cd9c:	ef 92       	push	r14
    cd9e:	ff 92       	push	r15
    cda0:	0f 93       	push	r16
    cda2:	1f 93       	push	r17
    cda4:	cf 93       	push	r28
    cda6:	df 93       	push	r29
    cda8:	f8 2f       	mov	r31, r24

	oldcursorspeed = cursorspeed;
    cdaa:	e0 91 6d 0a 	lds	r30, 0x0A6D
    cdae:	e0 93 64 0a 	sts	0x0A64, r30
	if(ai_state)
    cdb2:	80 91 03 0a 	lds	r24, 0x0A03
    cdb6:	88 23       	and	r24, r24
    cdb8:	19 f0       	breq	.+6      	; 0xcdc0 <UpdateCursor+0x24>
		cursorspeed = 2;
    cdba:	82 e0       	ldi	r24, 0x02	; 2
    cdbc:	80 93 6d 0a 	sts	0x0A6D, r24
	if(padstate & BTN_SR)
    cdc0:	60 91 fc 09 	lds	r22, 0x09FC
    cdc4:	70 91 fd 09 	lds	r23, 0x09FD
    cdc8:	73 ff       	sbrs	r23, 3
    cdca:	05 c0       	rjmp	.+10     	; 0xcdd6 <UpdateCursor+0x3a>
		cursorspeed <<= 1;
    cdcc:	80 91 6d 0a 	lds	r24, 0x0A6D
    cdd0:	88 0f       	add	r24, r24
    cdd2:	80 93 6d 0a 	sts	0x0A6D, r24
	if(padstate & BTN_SL && cursorspeed > 1)
    cdd6:	72 ff       	sbrs	r23, 2
    cdd8:	07 c0       	rjmp	.+14     	; 0xcde8 <UpdateCursor+0x4c>
    cdda:	80 91 6d 0a 	lds	r24, 0x0A6D
    cdde:	82 30       	cpi	r24, 0x02	; 2
    cde0:	18 f0       	brcs	.+6      	; 0xcde8 <UpdateCursor+0x4c>
		cursorspeed >>= 1;
    cde2:	86 95       	lsr	r24
    cde4:	80 93 6d 0a 	sts	0x0A6D, r24

	if(padstate & BTN_LEFT){
    cde8:	66 ff       	sbrs	r22, 6
    cdea:	0b c0       	rjmp	.+22     	; 0xce02 <UpdateCursor+0x66>
		if(cursorx > cursorspeed)
    cdec:	80 91 ff 09 	lds	r24, 0x09FF
    cdf0:	90 91 6d 0a 	lds	r25, 0x0A6D
    cdf4:	98 17       	cp	r25, r24
    cdf6:	10 f4       	brcc	.+4      	; 0xcdfc <UpdateCursor+0x60>
			cursorx -= cursorspeed;
    cdf8:	89 1b       	sub	r24, r25
    cdfa:	17 c0       	rjmp	.+46     	; 0xce2a <UpdateCursor+0x8e>
		else
			cursorx = 0;
    cdfc:	10 92 ff 09 	sts	0x09FF, r1
    ce00:	16 c0       	rjmp	.+44     	; 0xce2e <UpdateCursor+0x92>
	}else if(padstate & BTN_RIGHT){
    ce02:	67 ff       	sbrs	r22, 7
    ce04:	14 c0       	rjmp	.+40     	; 0xce2e <UpdateCursor+0x92>
		if(cursorx < ((((SCREEN_TILES_H*TILE_WIDTH)-1)-(CURSOR_TILES_H*8))-cursorspeed)+3)
    ce06:	50 91 ff 09 	lds	r21, 0x09FF
    ce0a:	40 91 6d 0a 	lds	r20, 0x0A6D
    ce0e:	25 2f       	mov	r18, r21
    ce10:	30 e0       	ldi	r19, 0x00	; 0
    ce12:	8a ed       	ldi	r24, 0xDA	; 218
    ce14:	90 e0       	ldi	r25, 0x00	; 0
    ce16:	84 1b       	sub	r24, r20
    ce18:	91 09       	sbc	r25, r1
    ce1a:	28 17       	cp	r18, r24
    ce1c:	39 07       	cpc	r19, r25
    ce1e:	24 f4       	brge	.+8      	; 0xce28 <UpdateCursor+0x8c>
			cursorx += cursorspeed;
    ce20:	45 0f       	add	r20, r21
    ce22:	40 93 ff 09 	sts	0x09FF, r20
    ce26:	03 c0       	rjmp	.+6      	; 0xce2e <UpdateCursor+0x92>
		else
			cursorx = (((SCREEN_TILES_H*TILE_WIDTH)-1)-(CURSOR_TILES_H*8))+3;
    ce28:	8a ed       	ldi	r24, 0xDA	; 218
    ce2a:	80 93 ff 09 	sts	0x09FF, r24
	}

	if(padstate & BTN_UP){
    ce2e:	64 ff       	sbrs	r22, 4
    ce30:	0b c0       	rjmp	.+22     	; 0xce48 <UpdateCursor+0xac>
		if(cursory > cursorspeed)
    ce32:	80 91 07 0a 	lds	r24, 0x0A07
    ce36:	90 91 6d 0a 	lds	r25, 0x0A6D
    ce3a:	98 17       	cp	r25, r24
    ce3c:	10 f4       	brcc	.+4      	; 0xce42 <UpdateCursor+0xa6>
			cursory -= cursorspeed;
    ce3e:	89 1b       	sub	r24, r25
    ce40:	17 c0       	rjmp	.+46     	; 0xce70 <UpdateCursor+0xd4>
		else
			cursory = 0;
    ce42:	10 92 07 0a 	sts	0x0A07, r1
    ce46:	16 c0       	rjmp	.+44     	; 0xce74 <UpdateCursor+0xd8>
	}else if(padstate & BTN_DOWN){
    ce48:	65 ff       	sbrs	r22, 5
    ce4a:	14 c0       	rjmp	.+40     	; 0xce74 <UpdateCursor+0xd8>
		if(cursory < ((((SCREEN_TILES_V*TILE_HEIGHT)-1)+18)-(CURSOR_TILES_H*8))-cursorspeed)
    ce4c:	50 91 07 0a 	lds	r21, 0x0A07
    ce50:	40 91 6d 0a 	lds	r20, 0x0A6D
    ce54:	25 2f       	mov	r18, r21
    ce56:	30 e0       	ldi	r19, 0x00	; 0
    ce58:	89 ec       	ldi	r24, 0xC9	; 201
    ce5a:	90 e0       	ldi	r25, 0x00	; 0
    ce5c:	84 1b       	sub	r24, r20
    ce5e:	91 09       	sbc	r25, r1
    ce60:	28 17       	cp	r18, r24
    ce62:	39 07       	cpc	r19, r25
    ce64:	24 f4       	brge	.+8      	; 0xce6e <UpdateCursor+0xd2>
			cursory += cursorspeed;
    ce66:	45 0f       	add	r20, r21
    ce68:	40 93 07 0a 	sts	0x0A07, r20
    ce6c:	03 c0       	rjmp	.+6      	; 0xce74 <UpdateCursor+0xd8>
		else
			cursory = ((((SCREEN_TILES_V*TILE_HEIGHT)-1)+18)-(CURSOR_TILES_H*8));
    ce6e:	89 ec       	ldi	r24, 0xC9	; 201
    ce70:	80 93 07 0a 	sts	0x0A07, r24
	}

	cursorspeed = oldcursorspeed;
    ce74:	e0 93 6d 0a 	sts	0x0A6D, r30
	cursorframe = (padstate & BTN_B)?1:0;
    ce78:	86 2f       	mov	r24, r22
    ce7a:	81 70       	andi	r24, 0x01	; 1
    ce7c:	80 93 08 0a 	sts	0x0A08, r24
	if(skiplogic){
    ce80:	ff 23       	and	r31, r31
    ce82:	09 f0       	breq	.+2      	; 0xce86 <UpdateCursor+0xea>
    ce84:	6b c3       	rjmp	.+1750   	; 0xd55c <UpdateCursor+0x7c0>
		return;
	}
	uint8_t gt = 0;

	if(padstate & BTN_B/* && !(oldpadstate & BTN_B)*/){
    ce86:	60 ff       	sbrs	r22, 0
    ce88:	5e c2       	rjmp	.+1212   	; 0xd346 <UpdateCursor+0x5aa>
		if(!(game_state & CARD_FLOATING) && !(oldpadstate & BTN_B)){//can't grab something while a card is floating
    ce8a:	80 91 06 0a 	lds	r24, 0x0A06
    ce8e:	81 fd       	sbrc	r24, 1
    ce90:	0e c3       	rjmp	.+1564   	; 0xd4ae <UpdateCursor+0x712>
    ce92:	80 91 fa 09 	lds	r24, 0x09FA
    ce96:	90 91 fb 09 	lds	r25, 0x09FB
    ce9a:	80 fd       	sbrc	r24, 0
    ce9c:	57 c1       	rjmp	.+686    	; 0xd14c <UpdateCursor+0x3b0>
			gt = GrabStack(true);
    ce9e:	81 e0       	ldi	r24, 0x01	; 1
    cea0:	0e 94 3e 5a 	call	0xb47c	; 0xb47c <GrabStack>
    cea4:	08 2f       	mov	r16, r24
			if(gt != 255){//we grabbed something, see what it is
    cea6:	8f 3f       	cpi	r24, 0xFF	; 255
    cea8:	09 f4       	brne	.+2      	; 0xceac <UpdateCursor+0x110>
    ceaa:	02 c3       	rjmp	.+1540   	; 0xd4b0 <UpdateCursor+0x714>
					if(true){//!(oldpadstate & BTN_B)){//check for double click
						last_click_time = 0;
    ceac:	10 92 09 0a 	sts	0x0A09, r1
						if(last_click_stack == gt){
    ceb0:	80 91 0e 0a 	lds	r24, 0x0A0E
    ceb4:	80 17       	cp	r24, r16
    ceb6:	31 f4       	brne	.+12     	; 0xcec4 <UpdateCursor+0x128>
							last_click_num++;
    ceb8:	80 91 67 0a 	lds	r24, 0x0A67
    cebc:	8f 5f       	subi	r24, 0xFF	; 255
    cebe:	80 93 67 0a 	sts	0x0A67, r24
    cec2:	04 c0       	rjmp	.+8      	; 0xcecc <UpdateCursor+0x130>
						}else{
							last_click_num = 0;
    cec4:	10 92 67 0a 	sts	0x0A67, r1
							last_click_stack = gt;
    cec8:	00 93 0e 0a 	sts	0x0A0E, r16
						}
					}
					game_state |= HAVE_MOVED;
    cecc:	80 91 06 0a 	lds	r24, 0x0A06
    ced0:	84 60       	ori	r24, 0x04	; 4
    ced2:	80 93 06 0a 	sts	0x0A06, r24
					if(gt == STACK_DECK){//we hit the deck, if there is a card then move it to the draw pile. otherwise bring the draw pile back to the deck
    ced6:	00 23       	and	r16, r16
    ced8:	19 f4       	brne	.+6      	; 0xcee0 <UpdateCursor+0x144>
						HandleDeckClick(gt);
    ceda:	80 e0       	ldi	r24, 0x00	; 0
    cedc:	a2 de       	rcall	.-700    	; 0xcc22 <HandleDeckClick>
    cede:	e8 c2       	rjmp	.+1488   	; 0xd4b0 <UpdateCursor+0x714>
					}else if(!stacks[gt].numcards){//we selected an empty stack that wasn't the deck
    cee0:	e0 2e       	mov	r14, r16
    cee2:	ff 24       	eor	r15, r15
    cee4:	8c e1       	ldi	r24, 0x1C	; 28
    cee6:	90 e0       	ldi	r25, 0x00	; 0
    cee8:	e8 9e       	mul	r14, r24
    ceea:	f0 01       	movw	r30, r0
    ceec:	e9 9e       	mul	r14, r25
    ceee:	f0 0d       	add	r31, r0
    cef0:	f8 9e       	mul	r15, r24
    cef2:	f0 0d       	add	r31, r0
    cef4:	11 24       	eor	r1, r1
    cef6:	ee 0f       	add	r30, r30
    cef8:	ff 1f       	adc	r31, r31
    cefa:	ed 58       	subi	r30, 0x8D	; 141
    cefc:	f5 4f       	sbci	r31, 0xF5	; 245
    cefe:	60 81       	ld	r22, Z
    cf00:	66 23       	and	r22, r22
    cf02:	09 f4       	brne	.+2      	; 0xcf06 <UpdateCursor+0x16a>
    cf04:	d5 c2       	rjmp	.+1450   	; 0xd4b0 <UpdateCursor+0x714>
					
					}else if(gt == STACK_DRAW){//we grabbed a card from the draw pile
    cf06:	01 30       	cpi	r16, 0x01	; 1
    cf08:	d1 f5       	brne	.+116    	; 0xcf7e <UpdateCursor+0x1e2>
//STriggerFx(1,100,true);
						TransferStack(STACK_DRAW,stacks[STACK_DRAW].numcards-1,STACK_HELD,0);
    cf0a:	60 91 ab 0a 	lds	r22, 0x0AAB
    cf0e:	61 50       	subi	r22, 0x01	; 1
    cf10:	81 e0       	ldi	r24, 0x01	; 1
    cf12:	4d e0       	ldi	r20, 0x0D	; 13
    cf14:	20 e0       	ldi	r18, 0x00	; 0
    cf16:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
					//	stacks[STACK_HELD].numcards = 1
						DrawStack(STACK_DRAW);//redraw the card underneath the one we took
    cf1a:	81 e0       	ldi	r24, 0x01	; 1
    cf1c:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
						SaveBuffer(stacks[stack_held_src].x);//TODO IS THIS NECESSARY??
    cf20:	80 91 fe 09 	lds	r24, 0x09FE
    cf24:	90 e0       	ldi	r25, 0x00	; 0
    cf26:	28 e3       	ldi	r18, 0x38	; 56
    cf28:	30 e0       	ldi	r19, 0x00	; 0
    cf2a:	82 9f       	mul	r24, r18
    cf2c:	f0 01       	movw	r30, r0
    cf2e:	83 9f       	mul	r24, r19
    cf30:	f0 0d       	add	r31, r0
    cf32:	92 9f       	mul	r25, r18
    cf34:	f0 0d       	add	r31, r0
    cf36:	11 24       	eor	r1, r1
    cf38:	ef 58       	subi	r30, 0x8F	; 143
    cf3a:	f5 4f       	sbci	r31, 0xF5	; 245
    cf3c:	80 81       	ld	r24, Z
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    cf3e:	80 93 e9 0d 	sts	0x0DE9, r24
    cf42:	a8 2f       	mov	r26, r24
    cf44:	b0 e0       	ldi	r27, 0x00	; 0
    cf46:	a0 5e       	subi	r26, 0xE0	; 224
    cf48:	be 4f       	sbci	r27, 0xFE	; 254
    cf4a:	e1 e8       	ldi	r30, 0x81	; 129
    cf4c:	fd e0       	ldi	r31, 0x0D	; 13
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    cf4e:	8c 91       	ld	r24, X
    cf50:	80 83       	st	Z, r24
    cf52:	11 96       	adiw	r26, 0x01	; 1
    cf54:	8c 91       	ld	r24, X
    cf56:	11 97       	sbiw	r26, 0x01	; 1
    cf58:	81 83       	std	Z+1, r24	; 0x01
    cf5a:	12 96       	adiw	r26, 0x02	; 2
    cf5c:	8c 91       	ld	r24, X
    cf5e:	12 97       	sbiw	r26, 0x02	; 2
    cf60:	82 83       	std	Z+2, r24	; 0x02
    cf62:	13 96       	adiw	r26, 0x03	; 3
    cf64:	8c 91       	ld	r24, X
    cf66:	13 97       	sbiw	r26, 0x03	; 3
    cf68:	83 83       	std	Z+3, r24	; 0x03
    cf6a:	5e 96       	adiw	r26, 0x1e	; 30
    cf6c:	34 96       	adiw	r30, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    cf6e:	8d e0       	ldi	r24, 0x0D	; 13
    cf70:	e9 3e       	cpi	r30, 0xE9	; 233
    cf72:	f8 07       	cpc	r31, r24
    cf74:	61 f7       	brne	.-40     	; 0xcf4e <UpdateCursor+0x1b2>
					//	stacks[STACK_HELD].numcards = 1
						DrawStack(STACK_DRAW);//redraw the card underneath the one we took
						SaveBuffer(stacks[stack_held_src].x);//TODO IS THIS NECESSARY??
//ai_skip_tick = 1;
//SWaitVsync(1);
						stack_held_src = STACK_DRAW;
    cf76:	81 e0       	ldi	r24, 0x01	; 1
    cf78:	80 93 fe 09 	sts	0x09FE, r24
    cf7c:	e4 c0       	rjmp	.+456    	; 0xd146 <UpdateCursor+0x3aa>
						stack_held = 1;
					}else if(stacks[gt].display == STACKED){//we grabbed a card from a home pile
    cf7e:	c8 e3       	ldi	r28, 0x38	; 56
    cf80:	d0 e0       	ldi	r29, 0x00	; 0
    cf82:	ec 9e       	mul	r14, r28
    cf84:	d0 01       	movw	r26, r0
    cf86:	ed 9e       	mul	r14, r29
    cf88:	b0 0d       	add	r27, r0
    cf8a:	fc 9e       	mul	r15, r28
    cf8c:	b0 0d       	add	r27, r0
    cf8e:	11 24       	eor	r1, r1
    cf90:	af 58       	subi	r26, 0x8F	; 143
    cf92:	b5 4f       	sbci	r27, 0xF5	; 245
    cf94:	13 96       	adiw	r26, 0x03	; 3
    cf96:	8c 91       	ld	r24, X
    cf98:	13 97       	sbiw	r26, 0x03	; 3
    cf9a:	88 30       	cpi	r24, 0x08	; 8
    cf9c:	a9 f5       	brne	.+106    	; 0xd008 <UpdateCursor+0x26c>
						TransferStack(gt,stacks[gt].numcards-1,STACK_HELD,0);
    cf9e:	61 50       	subi	r22, 0x01	; 1
    cfa0:	80 2f       	mov	r24, r16
    cfa2:	4d e0       	ldi	r20, 0x0D	; 13
    cfa4:	20 e0       	ldi	r18, 0x00	; 0
    cfa6:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
						DrawStack(gt);//redraw the card underneath the one we took
    cfaa:	80 2f       	mov	r24, r16
    cfac:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
						SaveBuffer(stacks[stack_held_src].x);//TODO IS THIS NECESSARY???
    cfb0:	80 91 fe 09 	lds	r24, 0x09FE
    cfb4:	90 e0       	ldi	r25, 0x00	; 0
    cfb6:	8c 9f       	mul	r24, r28
    cfb8:	f0 01       	movw	r30, r0
    cfba:	8d 9f       	mul	r24, r29
    cfbc:	f0 0d       	add	r31, r0
    cfbe:	9c 9f       	mul	r25, r28
    cfc0:	f0 0d       	add	r31, r0
    cfc2:	11 24       	eor	r1, r1
    cfc4:	ef 58       	subi	r30, 0x8F	; 143
    cfc6:	f5 4f       	sbci	r31, 0xF5	; 245
    cfc8:	80 81       	ld	r24, Z
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    cfca:	80 93 e9 0d 	sts	0x0DE9, r24
    cfce:	a8 2f       	mov	r26, r24
    cfd0:	b0 e0       	ldi	r27, 0x00	; 0
    cfd2:	a0 5e       	subi	r26, 0xE0	; 224
    cfd4:	be 4f       	sbci	r27, 0xFE	; 254
    cfd6:	e1 e8       	ldi	r30, 0x81	; 129
    cfd8:	fd e0       	ldi	r31, 0x0D	; 13
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    cfda:	8c 91       	ld	r24, X
    cfdc:	80 83       	st	Z, r24
    cfde:	11 96       	adiw	r26, 0x01	; 1
    cfe0:	8c 91       	ld	r24, X
    cfe2:	11 97       	sbiw	r26, 0x01	; 1
    cfe4:	81 83       	std	Z+1, r24	; 0x01
    cfe6:	12 96       	adiw	r26, 0x02	; 2
    cfe8:	8c 91       	ld	r24, X
    cfea:	12 97       	sbiw	r26, 0x02	; 2
    cfec:	82 83       	std	Z+2, r24	; 0x02
    cfee:	13 96       	adiw	r26, 0x03	; 3
    cff0:	8c 91       	ld	r24, X
    cff2:	13 97       	sbiw	r26, 0x03	; 3
    cff4:	83 83       	std	Z+3, r24	; 0x03
    cff6:	5e 96       	adiw	r26, 0x1e	; 30
    cff8:	34 96       	adiw	r30, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    cffa:	9d e0       	ldi	r25, 0x0D	; 13
    cffc:	e9 3e       	cpi	r30, 0xE9	; 233
    cffe:	f9 07       	cpc	r31, r25
    d000:	61 f7       	brne	.-40     	; 0xcfda <UpdateCursor+0x23e>
						TransferStack(gt,stacks[gt].numcards-1,STACK_HELD,0);
						DrawStack(gt);//redraw the card underneath the one we took
						SaveBuffer(stacks[stack_held_src].x);//TODO IS THIS NECESSARY???
//ai_skip_tick = 1;
//SWaitVsync(1);
						stack_held_src = gt;
    d002:	00 93 fe 09 	sts	0x09FE, r16
    d006:	9e c0       	rjmp	.+316    	; 0xd144 <UpdateCursor+0x3a8>
						stack_held = 1;
					}else{//we grabbed a card from one of the base stacks
						uint8_t poff = (cursory>>3)-stacks[gt].y;
    d008:	10 91 07 0a 	lds	r17, 0x0A07
    d00c:	16 95       	lsr	r17
    d00e:	16 95       	lsr	r17
    d010:	16 95       	lsr	r17
    d012:	11 96       	adiw	r26, 0x01	; 1
    d014:	8c 91       	ld	r24, X
    d016:	18 1b       	sub	r17, r24
						if(poff >= stacks[gt].numcards){
    d018:	16 17       	cp	r17, r22
    d01a:	10 f0       	brcs	.+4      	; 0xd020 <UpdateCursor+0x284>
							poff = stacks[gt].numcards-1;
    d01c:	16 2f       	mov	r17, r22
    d01e:	11 50       	subi	r17, 0x01	; 1
						//	stacks[gt].cards[poff] |= FACEUP;
						}
						if(stacks[gt].numcards && !(stacks[gt].cards[stacks[gt].numcards-1] & FACEUP)){//we flipped a card up
    d020:	88 e3       	ldi	r24, 0x38	; 56
    d022:	90 e0       	ldi	r25, 0x00	; 0
    d024:	e8 9e       	mul	r14, r24
    d026:	d0 01       	movw	r26, r0
    d028:	e9 9e       	mul	r14, r25
    d02a:	b0 0d       	add	r27, r0
    d02c:	f8 9e       	mul	r15, r24
    d02e:	b0 0d       	add	r27, r0
    d030:	11 24       	eor	r1, r1
    d032:	a6 0f       	add	r26, r22
    d034:	b1 1d       	adc	r27, r1
    d036:	a0 59       	subi	r26, 0x90	; 144
    d038:	b5 4f       	sbci	r27, 0xF5	; 245
    d03a:	14 96       	adiw	r26, 0x04	; 4
    d03c:	8c 91       	ld	r24, X
    d03e:	14 97       	sbiw	r26, 0x04	; 4
    d040:	87 fd       	sbrc	r24, 7
    d042:	0f c0       	rjmp	.+30     	; 0xd062 <UpdateCursor+0x2c6>
							stacks[gt].cards[stacks[gt].numcards-1] |= FACEUP;
    d044:	80 68       	ori	r24, 0x80	; 128
    d046:	14 96       	adiw	r26, 0x04	; 4
    d048:	8c 93       	st	X, r24
							game_score += SCORE_TURN_OVER_CARD;
    d04a:	80 91 01 0a 	lds	r24, 0x0A01
    d04e:	90 91 02 0a 	lds	r25, 0x0A02
    d052:	05 96       	adiw	r24, 0x05	; 5
    d054:	90 93 02 0a 	sts	0x0A02, r25
    d058:	80 93 01 0a 	sts	0x0A01, r24
							DrawStack(gt);
    d05c:	80 2f       	mov	r24, r16
    d05e:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
						}
						if(stacks[gt].cards[poff] & FACEUP){//////////////////////////////////////
    d062:	88 e3       	ldi	r24, 0x38	; 56
    d064:	90 e0       	ldi	r25, 0x00	; 0
    d066:	e8 9e       	mul	r14, r24
    d068:	e0 01       	movw	r28, r0
    d06a:	e9 9e       	mul	r14, r25
    d06c:	d0 0d       	add	r29, r0
    d06e:	f8 9e       	mul	r15, r24
    d070:	d0 0d       	add	r29, r0
    d072:	11 24       	eor	r1, r1
    d074:	cf 58       	subi	r28, 0x8F	; 143
    d076:	d5 4f       	sbci	r29, 0xF5	; 245
    d078:	fe 01       	movw	r30, r28
    d07a:	e1 0f       	add	r30, r17
    d07c:	f1 1d       	adc	r31, r1
    d07e:	84 81       	ldd	r24, Z+4	; 0x04
    d080:	87 ff       	sbrs	r24, 7
    d082:	16 c2       	rjmp	.+1068   	; 0xd4b0 <UpdateCursor+0x714>
							DrawStack(gt);//TODO IS THIS NECESSARY?????IF CARD WASN'T FACE UP, THEN WE SELECT NEW STACK??
    d084:	80 2f       	mov	r24, r16
    d086:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
//SaveBuffer(stacks[stack_held_src].x);//DID THIS FIX IT????
							TransferStack(gt,poff,STACK_HELD,0);
    d08a:	80 2f       	mov	r24, r16
    d08c:	61 2f       	mov	r22, r17
    d08e:	4d e0       	ldi	r20, 0x0D	; 13
    d090:	20 e0       	ldi	r18, 0x00	; 0
    d092:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
							stacks[STACK_HELD].cards[stacks[STACK_HELD].numcards-1] |= FACEUP;//at least the last card should always be face up if we click it
    d096:	e0 91 4b 0d 	lds	r30, 0x0D4B
    d09a:	f0 e0       	ldi	r31, 0x00	; 0
    d09c:	e4 5b       	subi	r30, 0xB4	; 180
    d09e:	f2 4f       	sbci	r31, 0xF2	; 242
    d0a0:	80 81       	ld	r24, Z
    d0a2:	80 68       	ori	r24, 0x80	; 128
    d0a4:	80 83       	st	Z, r24
							stack_held_src = gt;
    d0a6:	00 93 fe 09 	sts	0x09FE, r16
						//	stack_held_off = 0;/////
							for(uint8_t yo=stacks[gt].y;yo<SCREEN_TILES_H;yo++)
    d0aa:	59 81       	ldd	r21, Y+1	; 0x01
								for(uint8_t xo=stacks[gt].x;xo<stacks[gt].x+CARD_TILES_H;xo++)
    d0ac:	de 01       	movw	r26, r28
    d0ae:	7e e1       	ldi	r23, 0x1E	; 30
    d0b0:	60 e1       	ldi	r22, 0x10	; 16
    d0b2:	18 c0       	rjmp	.+48     	; 0xd0e4 <UpdateCursor+0x348>
    d0b4:	57 9f       	mul	r21, r23
    d0b6:	90 01       	movw	r18, r0
    d0b8:	11 24       	eor	r1, r1
    d0ba:	4c 91       	ld	r20, X
    d0bc:	84 2f       	mov	r24, r20
    d0be:	90 e0       	ldi	r25, 0x00	; 0
    d0c0:	03 96       	adiw	r24, 0x03	; 3
    d0c2:	20 5e       	subi	r18, 0xE0	; 224
    d0c4:	3e 4f       	sbci	r19, 0xFE	; 254
    d0c6:	08 c0       	rjmp	.+16     	; 0xd0d8 <UpdateCursor+0x33c>
extern uint8_t playDevice,playPort;
extern int mx,my;
uint8_t last_click_stack,last_click_time, last_click_num;//for double clicking shortcut

void SetTileClipped(uint8_t x, uint8_t y, uint8_t t){
	if(x > SCREEN_TILES_H-1 || y > SCREEN_TILES_V-1)
    d0c8:	4e 31       	cpi	r20, 0x1E	; 30
    d0ca:	28 f4       	brcc	.+10     	; 0xd0d6 <UpdateCursor+0x33a>
    d0cc:	5a 31       	cpi	r21, 0x1A	; 26
    d0ce:	18 f4       	brcc	.+6      	; 0xd0d6 <UpdateCursor+0x33a>
		return;
	vram[x+(y*SCREEN_TILES_H)] = t+RAM_TILES_COUNT;
    d0d0:	e2 0f       	add	r30, r18
    d0d2:	f3 1f       	adc	r31, r19
    d0d4:	60 83       	st	Z, r22
    d0d6:	4f 5f       	subi	r20, 0xFF	; 255
    d0d8:	e4 2f       	mov	r30, r20
    d0da:	f0 e0       	ldi	r31, 0x00	; 0
    d0dc:	8e 17       	cp	r24, r30
    d0de:	9f 07       	cpc	r25, r31
    d0e0:	9c f7       	brge	.-26     	; 0xd0c8 <UpdateCursor+0x32c>
//SaveBuffer(stacks[stack_held_src].x);//DID THIS FIX IT????
							TransferStack(gt,poff,STACK_HELD,0);
							stacks[STACK_HELD].cards[stacks[STACK_HELD].numcards-1] |= FACEUP;//at least the last card should always be face up if we click it
							stack_held_src = gt;
						//	stack_held_off = 0;/////
							for(uint8_t yo=stacks[gt].y;yo<SCREEN_TILES_H;yo++)
    d0e2:	5f 5f       	subi	r21, 0xFF	; 255
    d0e4:	5e 31       	cpi	r21, 0x1E	; 30
    d0e6:	30 f3       	brcs	.-52     	; 0xd0b4 <UpdateCursor+0x318>
								for(uint8_t xo=stacks[gt].x;xo<stacks[gt].x+CARD_TILES_H;xo++)
									SetTileClipped(xo,yo,0);
							DrawStack(stack_held_src);//draw over the cards we took
    d0e8:	80 2f       	mov	r24, r16
    d0ea:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
SaveBuffer(stacks[stack_held_src].x);
    d0ee:	80 91 fe 09 	lds	r24, 0x09FE
    d0f2:	90 e0       	ldi	r25, 0x00	; 0
    d0f4:	28 e3       	ldi	r18, 0x38	; 56
    d0f6:	30 e0       	ldi	r19, 0x00	; 0
    d0f8:	82 9f       	mul	r24, r18
    d0fa:	f0 01       	movw	r30, r0
    d0fc:	83 9f       	mul	r24, r19
    d0fe:	f0 0d       	add	r31, r0
    d100:	92 9f       	mul	r25, r18
    d102:	f0 0d       	add	r31, r0
    d104:	11 24       	eor	r1, r1
    d106:	ef 58       	subi	r30, 0x8F	; 143
    d108:	f5 4f       	sbci	r31, 0xF5	; 245
    d10a:	80 81       	ld	r24, Z
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    d10c:	80 93 e9 0d 	sts	0x0DE9, r24
    d110:	a8 2f       	mov	r26, r24
    d112:	b0 e0       	ldi	r27, 0x00	; 0
    d114:	a0 5e       	subi	r26, 0xE0	; 224
    d116:	be 4f       	sbci	r27, 0xFE	; 254
    d118:	e1 e8       	ldi	r30, 0x81	; 129
    d11a:	fd e0       	ldi	r31, 0x0D	; 13
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    d11c:	8c 91       	ld	r24, X
    d11e:	80 83       	st	Z, r24
    d120:	11 96       	adiw	r26, 0x01	; 1
    d122:	8c 91       	ld	r24, X
    d124:	11 97       	sbiw	r26, 0x01	; 1
    d126:	81 83       	std	Z+1, r24	; 0x01
    d128:	12 96       	adiw	r26, 0x02	; 2
    d12a:	8c 91       	ld	r24, X
    d12c:	12 97       	sbiw	r26, 0x02	; 2
    d12e:	82 83       	std	Z+2, r24	; 0x02
    d130:	13 96       	adiw	r26, 0x03	; 3
    d132:	8c 91       	ld	r24, X
    d134:	13 97       	sbiw	r26, 0x03	; 3
    d136:	83 83       	std	Z+3, r24	; 0x03
    d138:	5e 96       	adiw	r26, 0x1e	; 30
    d13a:	34 96       	adiw	r30, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    d13c:	8d e0       	ldi	r24, 0x0D	; 13
    d13e:	e9 3e       	cpi	r30, 0xE9	; 233
    d140:	f8 07       	cpc	r31, r24
    d142:	61 f7       	brne	.-40     	; 0xd11c <UpdateCursor+0x380>
									SetTileClipped(xo,yo,0);
							DrawStack(stack_held_src);//draw over the cards we took
SaveBuffer(stacks[stack_held_src].x);
//ai_skip_tick = 1;
//SWaitVsync(1);
							stack_held = true;
    d144:	81 e0       	ldi	r24, 0x01	; 1
    d146:	80 93 69 0a 	sts	0x0A69, r24
    d14a:	b2 c1       	rjmp	.+868    	; 0xd4b0 <UpdateCursor+0x714>
					}
			}else{//we grabbed something invalid

			}
		}else if(!(game_state & CARD_FLOATING)){//holding card, check if user wants to use a shortcut
				if(((padstate & BTN_A) && !(oldpadstate & BTN_A)) || (last_click_num > 0 && last_click_stack != 255)){
    d14c:	70 ff       	sbrs	r23, 0
    d14e:	02 c0       	rjmp	.+4      	; 0xd154 <UpdateCursor+0x3b8>
    d150:	90 ff       	sbrs	r25, 0
    d152:	0a c0       	rjmp	.+20     	; 0xd168 <UpdateCursor+0x3cc>
    d154:	80 91 67 0a 	lds	r24, 0x0A67
    d158:	88 23       	and	r24, r24
    d15a:	09 f4       	brne	.+2      	; 0xd15e <UpdateCursor+0x3c2>
    d15c:	a8 c1       	rjmp	.+848    	; 0xd4ae <UpdateCursor+0x712>
    d15e:	80 91 0e 0a 	lds	r24, 0x0A0E
    d162:	8f 3f       	cpi	r24, 0xFF	; 255
    d164:	09 f4       	brne	.+2      	; 0xd168 <UpdateCursor+0x3cc>
    d166:	a3 c1       	rjmp	.+838    	; 0xd4ae <UpdateCursor+0x712>
					if(last_click_num){
    d168:	80 91 67 0a 	lds	r24, 0x0A67
    d16c:	88 23       	and	r24, r24
    d16e:	41 f0       	breq	.+16     	; 0xd180 <UpdateCursor+0x3e4>
						last_click_num = 0;
    d170:	10 92 67 0a 	sts	0x0A67, r1
						last_click_time = DOUBLE_CLICK_TIME+1;
    d174:	84 e2       	ldi	r24, 0x24	; 36
    d176:	80 93 09 0a 	sts	0x0A09, r24
						last_click_stack = 255;
    d17a:	8f ef       	ldi	r24, 0xFF	; 255
    d17c:	80 93 0e 0a 	sts	0x0A0E, r24
					}

					if(stack_held){
    d180:	80 91 69 0a 	lds	r24, 0x0A69
    d184:	88 23       	and	r24, r24
    d186:	09 f4       	brne	.+2      	; 0xd18a <UpdateCursor+0x3ee>
    d188:	92 c1       	rjmp	.+804    	; 0xd4ae <UpdateCursor+0x712>
						if(stacks[STACK_HELD].numcards == 1 && (stack_held_src < STACK_HOME0 || stack_held_src > STACK_HOME3)){//we might be able to put this on a home stack(user should know he would make more points manually putting it to the table, then to home...)
    d18a:	80 91 4b 0d 	lds	r24, 0x0D4B
    d18e:	81 30       	cpi	r24, 0x01	; 1
    d190:	09 f0       	breq	.+2      	; 0xd194 <UpdateCursor+0x3f8>
    d192:	5c c0       	rjmp	.+184    	; 0xd24c <UpdateCursor+0x4b0>
    d194:	00 91 fe 09 	lds	r16, 0x09FE
    d198:	80 2f       	mov	r24, r16
    d19a:	82 50       	subi	r24, 0x02	; 2
    d19c:	84 30       	cpi	r24, 0x04	; 4
    d19e:	08 f4       	brcc	.+2      	; 0xd1a2 <UpdateCursor+0x406>
    d1a0:	55 c0       	rjmp	.+170    	; 0xd24c <UpdateCursor+0x4b0>
    d1a2:	12 e0       	ldi	r17, 0x02	; 2
							for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
								if(stack_held_src != i && CanGoOnStack(i)){//shortcutting to same stack is useless and would complicate restore code, simply drop it back
    d1a4:	01 17       	cp	r16, r17
    d1a6:	09 f4       	brne	.+2      	; 0xd1aa <UpdateCursor+0x40e>
    d1a8:	4d c0       	rjmp	.+154    	; 0xd244 <UpdateCursor+0x4a8>
    d1aa:	81 2f       	mov	r24, r17
    d1ac:	0e 94 90 5a 	call	0xb520	; 0xb520 <CanGoOnStack>
    d1b0:	88 23       	and	r24, r24
    d1b2:	09 f4       	brne	.+2      	; 0xd1b6 <UpdateCursor+0x41a>
    d1b4:	47 c0       	rjmp	.+142    	; 0xd244 <UpdateCursor+0x4a8>
    d1b6:	a1 e8       	ldi	r26, 0x81	; 129
    d1b8:	bd e0       	ldi	r27, 0x0D	; 13
    d1ba:	80 91 e9 0d 	lds	r24, 0x0DE9
    d1be:	e8 2f       	mov	r30, r24
    d1c0:	f0 e0       	ldi	r31, 0x00	; 0
    d1c2:	e0 5e       	subi	r30, 0xE0	; 224
    d1c4:	fe 4f       	sbci	r31, 0xFE	; 254
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
    d1c6:	8c 91       	ld	r24, X
    d1c8:	80 83       	st	Z, r24
    d1ca:	11 96       	adiw	r26, 0x01	; 1
    d1cc:	8c 91       	ld	r24, X
    d1ce:	11 97       	sbiw	r26, 0x01	; 1
    d1d0:	81 83       	std	Z+1, r24	; 0x01
    d1d2:	12 96       	adiw	r26, 0x02	; 2
    d1d4:	8c 91       	ld	r24, X
    d1d6:	12 97       	sbiw	r26, 0x02	; 2
    d1d8:	82 83       	std	Z+2, r24	; 0x02
    d1da:	13 96       	adiw	r26, 0x03	; 3
    d1dc:	8c 91       	ld	r24, X
    d1de:	13 97       	sbiw	r26, 0x03	; 3
    d1e0:	83 83       	std	Z+3, r24	; 0x03
    d1e2:	14 96       	adiw	r26, 0x04	; 4
    d1e4:	7e 96       	adiw	r30, 0x1e	; 30

inline void RestoreBuffer(){
//running out of cyles and its bordering on the edge with this function
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
    d1e6:	9d e0       	ldi	r25, 0x0D	; 13
    d1e8:	a9 3e       	cpi	r26, 0xE9	; 233
    d1ea:	b9 07       	cpc	r27, r25
    d1ec:	61 f7       	brne	.-40     	; 0xd1c6 <UpdateCursor+0x42a>
					if(stack_held){
						if(stacks[STACK_HELD].numcards == 1 && (stack_held_src < STACK_HOME0 || stack_held_src > STACK_HOME3)){//we might be able to put this on a home stack(user should know he would make more points manually putting it to the table, then to home...)
							for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
								if(stack_held_src != i && CanGoOnStack(i)){//shortcutting to same stack is useless and would complicate restore code, simply drop it back
									RestoreBuffer();
									TransferStack(STACK_HELD,0,i,stacks[i].numcards);
    d1ee:	81 2f       	mov	r24, r17
    d1f0:	90 e0       	ldi	r25, 0x00	; 0
    d1f2:	2c e1       	ldi	r18, 0x1C	; 28
    d1f4:	30 e0       	ldi	r19, 0x00	; 0
    d1f6:	82 9f       	mul	r24, r18
    d1f8:	f0 01       	movw	r30, r0
    d1fa:	83 9f       	mul	r24, r19
    d1fc:	f0 0d       	add	r31, r0
    d1fe:	92 9f       	mul	r25, r18
    d200:	f0 0d       	add	r31, r0
    d202:	11 24       	eor	r1, r1
    d204:	ee 0f       	add	r30, r30
    d206:	ff 1f       	adc	r31, r31
    d208:	ed 58       	subi	r30, 0x8D	; 141
    d20a:	f5 4f       	sbci	r31, 0xF5	; 245
    d20c:	8d e0       	ldi	r24, 0x0D	; 13
    d20e:	60 e0       	ldi	r22, 0x00	; 0
    d210:	41 2f       	mov	r20, r17
    d212:	20 81       	ld	r18, Z
    d214:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
									DrawStack(i);
    d218:	81 2f       	mov	r24, r17
    d21a:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
//SaveBuffer(stacks[i].x);//HACK TO PREVENT CORRUPTION???
//^REMOVED THIS, ADDED BREAK FOR THIS FOR LOOP TO FIX SCORING ISSUE, EVERYTHING SHOULD BE RIGHT NOW...ANYTHING BROKEN????

									stack_held = 0;
    d21e:	10 92 69 0a 	sts	0x0A69, r1
									gt = 255;
									if(stack_held_src == STACK_DRAW){//draw stack to home stack, add score
    d222:	80 91 fe 09 	lds	r24, 0x09FE
    d226:	81 30       	cpi	r24, 0x01	; 1
    d228:	11 f0       	breq	.+4      	; 0xd22e <UpdateCursor+0x492>
										game_score += SCORE_DRAW_TO_HOME;
									}else if(stack_held_src >= STACK_BASE0){
    d22a:	86 30       	cpi	r24, 0x06	; 6
    d22c:	48 f0       	brcs	.+18     	; 0xd240 <UpdateCursor+0x4a4>
										game_score += SCORE_TABLE_TO_HOME;
    d22e:	80 91 01 0a 	lds	r24, 0x0A01
    d232:	90 91 02 0a 	lds	r25, 0x0A02
    d236:	0a 96       	adiw	r24, 0x0a	; 10
    d238:	90 93 02 0a 	sts	0x0A02, r25
    d23c:	80 93 01 0a 	sts	0x0A01, r24
    d240:	0f ef       	ldi	r16, 0xFF	; 255
    d242:	05 c0       	rjmp	.+10     	; 0xd24e <UpdateCursor+0x4b2>
						last_click_stack = 255;
					}

					if(stack_held){
						if(stacks[STACK_HELD].numcards == 1 && (stack_held_src < STACK_HOME0 || stack_held_src > STACK_HOME3)){//we might be able to put this on a home stack(user should know he would make more points manually putting it to the table, then to home...)
							for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
    d244:	1f 5f       	subi	r17, 0xFF	; 255
    d246:	16 30       	cpi	r17, 0x06	; 6
    d248:	09 f0       	breq	.+2      	; 0xd24c <UpdateCursor+0x4b0>
    d24a:	ac cf       	rjmp	.-168    	; 0xd1a4 <UpdateCursor+0x408>
    d24c:	00 e0       	ldi	r16, 0x00	; 0
									break;
								}//if(stack_held_src != i && CanGoOnStack(i))
							}//for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++)
						}//if(stacks[STACK_HELD].numcards == 1 && (stack_held_src < STACK_HOME0 || stack_held_src > STACK_HOME3))
						
						if(stack_held){//didn't go to a home stack, check the base stacks
    d24e:	80 91 69 0a 	lds	r24, 0x0A69
    d252:	88 23       	and	r24, r24
    d254:	09 f4       	brne	.+2      	; 0xd258 <UpdateCursor+0x4bc>
    d256:	2c c1       	rjmp	.+600    	; 0xd4b0 <UpdateCursor+0x714>
    d258:	11 ec       	ldi	r17, 0xC1	; 193
    d25a:	e1 2e       	mov	r14, r17
    d25c:	1b e0       	ldi	r17, 0x0B	; 11
    d25e:	f1 2e       	mov	r15, r17
    d260:	16 e0       	ldi	r17, 0x06	; 6
							for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
								if(stack_held_src != i && CanGoOnStack(i)){//never shortcut the held stack back to its source, can corrupt screen due to how restore buffer works
    d262:	80 91 fe 09 	lds	r24, 0x09FE
    d266:	81 17       	cp	r24, r17
    d268:	09 f4       	brne	.+2      	; 0xd26c <UpdateCursor+0x4d0>
    d26a:	64 c0       	rjmp	.+200    	; 0xd334 <UpdateCursor+0x598>
    d26c:	81 2f       	mov	r24, r17
    d26e:	0e 94 90 5a 	call	0xb520	; 0xb520 <CanGoOnStack>
    d272:	88 23       	and	r24, r24
    d274:	09 f4       	brne	.+2      	; 0xd278 <UpdateCursor+0x4dc>
    d276:	5e c0       	rjmp	.+188    	; 0xd334 <UpdateCursor+0x598>
    d278:	c1 e8       	ldi	r28, 0x81	; 129
    d27a:	dd e0       	ldi	r29, 0x0D	; 13
    d27c:	80 91 e9 0d 	lds	r24, 0x0DE9
    d280:	a8 2f       	mov	r26, r24
    d282:	b0 e0       	ldi	r27, 0x00	; 0
    d284:	a0 5e       	subi	r26, 0xE0	; 224
    d286:	be 4f       	sbci	r27, 0xFE	; 254
    d288:	fe 01       	movw	r30, r28
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
    d28a:	80 81       	ld	r24, Z
    d28c:	8c 93       	st	X, r24
    d28e:	81 81       	ldd	r24, Z+1	; 0x01
    d290:	11 96       	adiw	r26, 0x01	; 1
    d292:	8c 93       	st	X, r24
    d294:	11 97       	sbiw	r26, 0x01	; 1
    d296:	82 81       	ldd	r24, Z+2	; 0x02
    d298:	12 96       	adiw	r26, 0x02	; 2
    d29a:	8c 93       	st	X, r24
    d29c:	12 97       	sbiw	r26, 0x02	; 2
    d29e:	83 81       	ldd	r24, Z+3	; 0x03
    d2a0:	13 96       	adiw	r26, 0x03	; 3
    d2a2:	8c 93       	st	X, r24
    d2a4:	13 97       	sbiw	r26, 0x03	; 3
    d2a6:	34 96       	adiw	r30, 0x04	; 4
    d2a8:	5e 96       	adiw	r26, 0x1e	; 30

inline void RestoreBuffer(){
//running out of cyles and its bordering on the edge with this function
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
    d2aa:	8d e0       	ldi	r24, 0x0D	; 13
    d2ac:	e9 3e       	cpi	r30, 0xE9	; 233
    d2ae:	f8 07       	cpc	r31, r24
    d2b0:	61 f7       	brne	.-40     	; 0xd28a <UpdateCursor+0x4ee>
						if(stack_held){//didn't go to a home stack, check the base stacks
							for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
								if(stack_held_src != i && CanGoOnStack(i)){//never shortcut the held stack back to its source, can corrupt screen due to how restore buffer works
//SPrint(15,2,PSTR("GOTO BASE"));
									RestoreBuffer();
									TransferStack(STACK_HELD,0,i,stacks[i].numcards);
    d2b2:	8d e0       	ldi	r24, 0x0D	; 13
    d2b4:	60 e0       	ldi	r22, 0x00	; 0
    d2b6:	41 2f       	mov	r20, r17
    d2b8:	f7 01       	movw	r30, r14
    d2ba:	22 81       	ldd	r18, Z+2	; 0x02
    d2bc:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
									DrawStack(i);
    d2c0:	81 2f       	mov	r24, r17
    d2c2:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
SaveBuffer(stacks[i].x);//HACK TO PREVENT CORRUPTION???
    d2c6:	f7 01       	movw	r30, r14
    d2c8:	80 81       	ld	r24, Z
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    d2ca:	80 93 e9 0d 	sts	0x0DE9, r24
    d2ce:	e8 2f       	mov	r30, r24
    d2d0:	f0 e0       	ldi	r31, 0x00	; 0
    d2d2:	e0 5e       	subi	r30, 0xE0	; 224
    d2d4:	fe 4f       	sbci	r31, 0xFE	; 254
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    d2d6:	80 81       	ld	r24, Z
    d2d8:	88 83       	st	Y, r24
    d2da:	81 81       	ldd	r24, Z+1	; 0x01
    d2dc:	89 83       	std	Y+1, r24	; 0x01
    d2de:	82 81       	ldd	r24, Z+2	; 0x02
    d2e0:	8a 83       	std	Y+2, r24	; 0x02
    d2e2:	83 81       	ldd	r24, Z+3	; 0x03
    d2e4:	8b 83       	std	Y+3, r24	; 0x03
    d2e6:	7e 96       	adiw	r30, 0x1e	; 30
    d2e8:	24 96       	adiw	r28, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    d2ea:	8d e0       	ldi	r24, 0x0D	; 13
    d2ec:	c9 3e       	cpi	r28, 0xE9	; 233
    d2ee:	d8 07       	cpc	r29, r24
    d2f0:	91 f7       	brne	.-28     	; 0xd2d6 <UpdateCursor+0x53a>
									TransferStack(STACK_HELD,0,i,stacks[i].numcards);
									DrawStack(i);
SaveBuffer(stacks[i].x);//HACK TO PREVENT CORRUPTION???
//ai_skip_tick = 1;
//SWaitVsync(1);
									stack_held = 0;
    d2f2:	10 92 69 0a 	sts	0x0A69, r1
									gt = 255;
									if(stack_held_src == STACK_DRAW)
    d2f6:	80 91 fe 09 	lds	r24, 0x09FE
    d2fa:	81 30       	cpi	r24, 0x01	; 1
    d2fc:	31 f4       	brne	.+12     	; 0xd30a <UpdateCursor+0x56e>
										game_score += SCORE_DRAW_TO_TABLE;
    d2fe:	80 91 01 0a 	lds	r24, 0x0A01
    d302:	90 91 02 0a 	lds	r25, 0x0A02
    d306:	05 96       	adiw	r24, 0x05	; 5
    d308:	10 c0       	rjmp	.+32     	; 0xd32a <UpdateCursor+0x58e>
									else if(stack_held_src >= STACK_HOME0 && stack_held_src <= STACK_HOME3){//recycling a card from home stack, add penalty
    d30a:	82 50       	subi	r24, 0x02	; 2
    d30c:	84 30       	cpi	r24, 0x04	; 4
    d30e:	88 f4       	brcc	.+34     	; 0xd332 <UpdateCursor+0x596>
										if(game_score < SCORE_RECYCLE_HOME_PENALTY)
    d310:	80 91 01 0a 	lds	r24, 0x0A01
    d314:	90 91 02 0a 	lds	r25, 0x0A02
    d318:	8f 30       	cpi	r24, 0x0F	; 15
    d31a:	91 05       	cpc	r25, r1
    d31c:	28 f4       	brcc	.+10     	; 0xd328 <UpdateCursor+0x58c>
											game_score = 0;
    d31e:	10 92 02 0a 	sts	0x0A02, r1
    d322:	10 92 01 0a 	sts	0x0A01, r1
    d326:	05 c0       	rjmp	.+10     	; 0xd332 <UpdateCursor+0x596>
										else
											game_score -= SCORE_RECYCLE_HOME_PENALTY;
    d328:	0f 97       	sbiw	r24, 0x0f	; 15
    d32a:	90 93 02 0a 	sts	0x0A02, r25
    d32e:	80 93 01 0a 	sts	0x0A01, r24
    d332:	0f ef       	ldi	r16, 0xFF	; 255
								}//if(stack_held_src != i && CanGoOnStack(i))
							}//for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++)
						}//if(stacks[STACK_HELD].numcards == 1 && (stack_held_src < STACK_HOME0 || stack_held_src > STACK_HOME3))
						
						if(stack_held){//didn't go to a home stack, check the base stacks
							for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++){
    d334:	1f 5f       	subi	r17, 0xFF	; 255
    d336:	e8 e3       	ldi	r30, 0x38	; 56
    d338:	f0 e0       	ldi	r31, 0x00	; 0
    d33a:	ee 0e       	add	r14, r30
    d33c:	ff 1e       	adc	r15, r31
    d33e:	1d 30       	cpi	r17, 0x0D	; 13
    d340:	09 f0       	breq	.+2      	; 0xd344 <UpdateCursor+0x5a8>
    d342:	8f cf       	rjmp	.-226    	; 0xd262 <UpdateCursor+0x4c6>
    d344:	b5 c0       	rjmp	.+362    	; 0xd4b0 <UpdateCursor+0x714>
						//..TODO
		//			}
		//		}
		//	}
		}else{
			stack_held = false;
    d346:	10 92 69 0a 	sts	0x0A69, r1
			//cursorframe = 0;
			if((oldpadstate & BTN_B) && stacks[STACK_HELD].numcards){//we just let go and we were holding onto something so try to put it down
    d34a:	80 91 fa 09 	lds	r24, 0x09FA
    d34e:	80 ff       	sbrs	r24, 0
    d350:	ae c0       	rjmp	.+348    	; 0xd4ae <UpdateCursor+0x712>
    d352:	80 91 4b 0d 	lds	r24, 0x0D4B
    d356:	88 23       	and	r24, r24
    d358:	09 f4       	brne	.+2      	; 0xd35c <UpdateCursor+0x5c0>
    d35a:	a9 c0       	rjmp	.+338    	; 0xd4ae <UpdateCursor+0x712>
				gt = GrabStack(true);
    d35c:	81 e0       	ldi	r24, 0x01	; 1
    d35e:	0e 94 3e 5a 	call	0xb47c	; 0xb47c <GrabStack>
    d362:	08 2f       	mov	r16, r24
				if(gt != 255){//see if we dropped it somewhere legitimate
    d364:	8f 3f       	cpi	r24, 0xFF	; 255
    d366:	09 f4       	brne	.+2      	; 0xd36a <UpdateCursor+0x5ce>
    d368:	6b c0       	rjmp	.+214    	; 0xd440 <UpdateCursor+0x6a4>
					if(CanGoOnStack(gt)){
    d36a:	0e 94 90 5a 	call	0xb520	; 0xb520 <CanGoOnStack>
    d36e:	88 23       	and	r24, r24
    d370:	09 f4       	brne	.+2      	; 0xd374 <UpdateCursor+0x5d8>
    d372:	65 c0       	rjmp	.+202    	; 0xd43e <UpdateCursor+0x6a2>
    d374:	a1 e8       	ldi	r26, 0x81	; 129
    d376:	bd e0       	ldi	r27, 0x0D	; 13
    d378:	80 91 e9 0d 	lds	r24, 0x0DE9
    d37c:	e8 2f       	mov	r30, r24
    d37e:	f0 e0       	ldi	r31, 0x00	; 0
    d380:	e0 5e       	subi	r30, 0xE0	; 224
    d382:	fe 4f       	sbci	r31, 0xFE	; 254
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
    d384:	8c 91       	ld	r24, X
    d386:	80 83       	st	Z, r24
    d388:	11 96       	adiw	r26, 0x01	; 1
    d38a:	8c 91       	ld	r24, X
    d38c:	11 97       	sbiw	r26, 0x01	; 1
    d38e:	81 83       	std	Z+1, r24	; 0x01
    d390:	12 96       	adiw	r26, 0x02	; 2
    d392:	8c 91       	ld	r24, X
    d394:	12 97       	sbiw	r26, 0x02	; 2
    d396:	82 83       	std	Z+2, r24	; 0x02
    d398:	13 96       	adiw	r26, 0x03	; 3
    d39a:	8c 91       	ld	r24, X
    d39c:	13 97       	sbiw	r26, 0x03	; 3
    d39e:	83 83       	std	Z+3, r24	; 0x03
    d3a0:	14 96       	adiw	r26, 0x04	; 4
    d3a2:	7e 96       	adiw	r30, 0x1e	; 30

inline void RestoreBuffer(){
//running out of cyles and its bordering on the edge with this function
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
    d3a4:	8d e0       	ldi	r24, 0x0D	; 13
    d3a6:	a9 3e       	cpi	r26, 0xE9	; 233
    d3a8:	b8 07       	cpc	r27, r24
    d3aa:	61 f7       	brne	.-40     	; 0xd384 <UpdateCursor+0x5e8>
			if((oldpadstate & BTN_B) && stacks[STACK_HELD].numcards){//we just let go and we were holding onto something so try to put it down
				gt = GrabStack(true);
				if(gt != 255){//see if we dropped it somewhere legitimate
					if(CanGoOnStack(gt)){
						RestoreBuffer();
						TransferStack(STACK_HELD,0,gt,stacks[gt].numcards);
    d3ac:	20 2f       	mov	r18, r16
    d3ae:	30 e0       	ldi	r19, 0x00	; 0
    d3b0:	8c e1       	ldi	r24, 0x1C	; 28
    d3b2:	90 e0       	ldi	r25, 0x00	; 0
    d3b4:	28 9f       	mul	r18, r24
    d3b6:	f0 01       	movw	r30, r0
    d3b8:	29 9f       	mul	r18, r25
    d3ba:	f0 0d       	add	r31, r0
    d3bc:	38 9f       	mul	r19, r24
    d3be:	f0 0d       	add	r31, r0
    d3c0:	11 24       	eor	r1, r1
    d3c2:	ee 0f       	add	r30, r30
    d3c4:	ff 1f       	adc	r31, r31
    d3c6:	ed 58       	subi	r30, 0x8D	; 141
    d3c8:	f5 4f       	sbci	r31, 0xF5	; 245
    d3ca:	8d e0       	ldi	r24, 0x0D	; 13
    d3cc:	60 e0       	ldi	r22, 0x00	; 0
    d3ce:	40 2f       	mov	r20, r16
    d3d0:	20 81       	ld	r18, Z
    d3d2:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
						DrawStack(gt);
    d3d6:	80 2f       	mov	r24, r16
    d3d8:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
						if(gt >= STACK_HOME0 && gt <= STACK_HOME3){//check what score we should give
    d3dc:	80 2f       	mov	r24, r16
    d3de:	82 50       	subi	r24, 0x02	; 2
    d3e0:	90 91 fe 09 	lds	r25, 0x09FE
    d3e4:	84 30       	cpi	r24, 0x04	; 4
    d3e6:	60 f4       	brcc	.+24     	; 0xd400 <UpdateCursor+0x664>
							//destination is a home stack
							if(stack_held_src == STACK_DRAW)//draw stack straight to a home stack
    d3e8:	91 30       	cpi	r25, 0x01	; 1
    d3ea:	21 f0       	breq	.+8      	; 0xd3f4 <UpdateCursor+0x658>
								game_score += SCORE_DRAW_TO_HOME;
							else if(stack_held_src >= STACK_HOME0 && stack_held_src <= STACK_HOME3){//HOME TO HOME NO SCORE
    d3ec:	92 50       	subi	r25, 0x02	; 2
    d3ee:	94 30       	cpi	r25, 0x04	; 4
    d3f0:	08 f4       	brcc	.+2      	; 0xd3f4 <UpdateCursor+0x658>
    d3f2:	5e c0       	rjmp	.+188    	; 0xd4b0 <UpdateCursor+0x714>
								
							}else//it's coming from one of the base stacks
								game_score += SCORE_TABLE_TO_HOME;
    d3f4:	80 91 01 0a 	lds	r24, 0x0A01
    d3f8:	90 91 02 0a 	lds	r25, 0x0A02
    d3fc:	0a 96       	adiw	r24, 0x0a	; 10
    d3fe:	1a c0       	rjmp	.+52     	; 0xd434 <UpdateCursor+0x698>
						}else{//destination is one of the table base stacks
							if(stack_held_src >= STACK_HOME0 && stack_held_src <= STACK_HOME3){//coming from one of the home stacks, score penalty
    d400:	89 2f       	mov	r24, r25
    d402:	82 50       	subi	r24, 0x02	; 2
    d404:	84 30       	cpi	r24, 0x04	; 4
    d406:	70 f4       	brcc	.+28     	; 0xd424 <UpdateCursor+0x688>
								if(game_score < SCORE_RECYCLE_HOME_PENALTY)
    d408:	80 91 01 0a 	lds	r24, 0x0A01
    d40c:	90 91 02 0a 	lds	r25, 0x0A02
    d410:	8f 30       	cpi	r24, 0x0F	; 15
    d412:	91 05       	cpc	r25, r1
    d414:	28 f4       	brcc	.+10     	; 0xd420 <UpdateCursor+0x684>
									game_score = 0;
    d416:	10 92 02 0a 	sts	0x0A02, r1
    d41a:	10 92 01 0a 	sts	0x0A01, r1
    d41e:	48 c0       	rjmp	.+144    	; 0xd4b0 <UpdateCursor+0x714>
								else
									game_score -= SCORE_RECYCLE_HOME_PENALTY;
    d420:	0f 97       	sbiw	r24, 0x0f	; 15
    d422:	08 c0       	rjmp	.+16     	; 0xd434 <UpdateCursor+0x698>
							}else if(stack_held_src == STACK_DRAW){//from the draw stack to a table base stack, add score
    d424:	91 30       	cpi	r25, 0x01	; 1
    d426:	09 f0       	breq	.+2      	; 0xd42a <UpdateCursor+0x68e>
    d428:	43 c0       	rjmp	.+134    	; 0xd4b0 <UpdateCursor+0x714>
								game_score += SCORE_DRAW_TO_TABLE;
    d42a:	80 91 01 0a 	lds	r24, 0x0A01
    d42e:	90 91 02 0a 	lds	r25, 0x0A02
    d432:	05 96       	adiw	r24, 0x05	; 5
    d434:	90 93 02 0a 	sts	0x0A02, r25
    d438:	80 93 01 0a 	sts	0x0A01, r24
    d43c:	39 c0       	rjmp	.+114    	; 0xd4b0 <UpdateCursor+0x714>
    d43e:	0f ef       	ldi	r16, 0xFF	; 255
    d440:	a1 e8       	ldi	r26, 0x81	; 129
    d442:	bd e0       	ldi	r27, 0x0D	; 13
    d444:	80 91 e9 0d 	lds	r24, 0x0DE9
    d448:	e8 2f       	mov	r30, r24
    d44a:	f0 e0       	ldi	r31, 0x00	; 0
    d44c:	e0 5e       	subi	r30, 0xE0	; 224
    d44e:	fe 4f       	sbci	r31, 0xFE	; 254
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
    d450:	8c 91       	ld	r24, X
    d452:	80 83       	st	Z, r24
    d454:	11 96       	adiw	r26, 0x01	; 1
    d456:	8c 91       	ld	r24, X
    d458:	11 97       	sbiw	r26, 0x01	; 1
    d45a:	81 83       	std	Z+1, r24	; 0x01
    d45c:	12 96       	adiw	r26, 0x02	; 2
    d45e:	8c 91       	ld	r24, X
    d460:	12 97       	sbiw	r26, 0x02	; 2
    d462:	82 83       	std	Z+2, r24	; 0x02
    d464:	13 96       	adiw	r26, 0x03	; 3
    d466:	8c 91       	ld	r24, X
    d468:	13 97       	sbiw	r26, 0x03	; 3
    d46a:	83 83       	std	Z+3, r24	; 0x03
    d46c:	14 96       	adiw	r26, 0x04	; 4
    d46e:	7e 96       	adiw	r30, 0x1e	; 30

inline void RestoreBuffer(){
//running out of cyles and its bordering on the edge with this function
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
    d470:	9d e0       	ldi	r25, 0x0D	; 13
    d472:	a9 3e       	cpi	r26, 0xE9	; 233
    d474:	b9 07       	cpc	r27, r25
    d476:	61 f7       	brne	.-40     	; 0xd450 <UpdateCursor+0x6b4>
						gt = 255;
				}

				if(gt == 255){//invalid destination, put it back where it came from
					RestoreBuffer();
					TransferStack(STACK_HELD,0,stack_held_src,stacks[stack_held_src].numcards);
    d478:	40 91 fe 09 	lds	r20, 0x09FE
    d47c:	24 2f       	mov	r18, r20
    d47e:	30 e0       	ldi	r19, 0x00	; 0
    d480:	8c e1       	ldi	r24, 0x1C	; 28
    d482:	90 e0       	ldi	r25, 0x00	; 0
    d484:	28 9f       	mul	r18, r24
    d486:	f0 01       	movw	r30, r0
    d488:	29 9f       	mul	r18, r25
    d48a:	f0 0d       	add	r31, r0
    d48c:	38 9f       	mul	r19, r24
    d48e:	f0 0d       	add	r31, r0
    d490:	11 24       	eor	r1, r1
    d492:	ee 0f       	add	r30, r30
    d494:	ff 1f       	adc	r31, r31
    d496:	ed 58       	subi	r30, 0x8D	; 141
    d498:	f5 4f       	sbci	r31, 0xF5	; 245
    d49a:	8d e0       	ldi	r24, 0x0D	; 13
    d49c:	60 e0       	ldi	r22, 0x00	; 0
    d49e:	20 81       	ld	r18, Z
    d4a0:	0e 94 c5 59 	call	0xb38a	; 0xb38a <TransferStack>
					DrawStack(stack_held_src);
    d4a4:	80 91 fe 09 	lds	r24, 0x09FE
    d4a8:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
    d4ac:	01 c0       	rjmp	.+2      	; 0xd4b0 <UpdateCursor+0x714>
    d4ae:	00 e0       	ldi	r16, 0x00	; 0
			}
		}	
	}
	
	
	if(stack_held){//restore tiles at old position, save tiles at new position, make stack follow cursor
    d4b0:	80 91 69 0a 	lds	r24, 0x0A69
    d4b4:	88 23       	and	r24, r24
    d4b6:	09 f4       	brne	.+2      	; 0xd4ba <UpdateCursor+0x71e>
    d4b8:	43 c0       	rjmp	.+134    	; 0xd540 <UpdateCursor+0x7a4>
    d4ba:	c1 e8       	ldi	r28, 0x81	; 129
    d4bc:	dd e0       	ldi	r29, 0x0D	; 13
    d4be:	80 91 e9 0d 	lds	r24, 0x0DE9
    d4c2:	a8 2f       	mov	r26, r24
    d4c4:	b0 e0       	ldi	r27, 0x00	; 0
    d4c6:	a0 5e       	subi	r26, 0xE0	; 224
    d4c8:	be 4f       	sbci	r27, 0xFE	; 254
    d4ca:	fe 01       	movw	r30, r28
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			vram[voff++] = table_restore[troff++];//vram[table_restore_x+x+(y*SCREEN_TILES_H)] = table_restore[troff++];
    d4cc:	80 81       	ld	r24, Z
    d4ce:	8c 93       	st	X, r24
    d4d0:	81 81       	ldd	r24, Z+1	; 0x01
    d4d2:	11 96       	adiw	r26, 0x01	; 1
    d4d4:	8c 93       	st	X, r24
    d4d6:	11 97       	sbiw	r26, 0x01	; 1
    d4d8:	82 81       	ldd	r24, Z+2	; 0x02
    d4da:	12 96       	adiw	r26, 0x02	; 2
    d4dc:	8c 93       	st	X, r24
    d4de:	12 97       	sbiw	r26, 0x02	; 2
    d4e0:	83 81       	ldd	r24, Z+3	; 0x03
    d4e2:	13 96       	adiw	r26, 0x03	; 3
    d4e4:	8c 93       	st	X, r24
    d4e6:	13 97       	sbiw	r26, 0x03	; 3
    d4e8:	34 96       	adiw	r30, 0x04	; 4
    d4ea:	5e 96       	adiw	r26, 0x1e	; 30

inline void RestoreBuffer(){
//running out of cyles and its bordering on the edge with this function
	uint8_t troff = 0;
	uint16_t voff;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){
    d4ec:	8d e0       	ldi	r24, 0x0D	; 13
    d4ee:	e9 3e       	cpi	r30, 0xE9	; 233
    d4f0:	f8 07       	cpc	r31, r24
    d4f2:	61 f7       	brne	.-40     	; 0xd4cc <UpdateCursor+0x730>
	
	
	if(stack_held){//restore tiles at old position, save tiles at new position, make stack follow cursor
//TODO THIS IS WHAT IS KILLING THE CYCLES!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		RestoreBuffer();
		stacks[STACK_HELD].x = cursorx>>3;
    d4f4:	90 91 ff 09 	lds	r25, 0x09FF
    d4f8:	96 95       	lsr	r25
    d4fa:	96 95       	lsr	r25
    d4fc:	96 95       	lsr	r25
    d4fe:	90 93 49 0d 	sts	0x0D49, r25
		stacks[STACK_HELD].y = cursory>>3;
    d502:	80 91 07 0a 	lds	r24, 0x0A07
    d506:	86 95       	lsr	r24
    d508:	86 95       	lsr	r24
    d50a:	86 95       	lsr	r24
    d50c:	80 93 4a 0d 	sts	0x0D4A, r24
inline void SaveBuffer(uint8_t sx){
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
    d510:	90 93 e9 0d 	sts	0x0DE9, r25
    d514:	e9 2f       	mov	r30, r25
    d516:	f0 e0       	ldi	r31, 0x00	; 0
    d518:	e0 5e       	subi	r30, 0xE0	; 224
    d51a:	fe 4f       	sbci	r31, 0xFE	; 254
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
		voff = table_restore_x+(y*SCREEN_TILES_H);
		for(uint8_t x=0;x<CARD_TILES_H;x++)//for(uint8_t x=0;(x<CARD_TILES_H+0)&&(table_restore_x+x<SCREEN_TILES_H);x++)
			table_restore[troff++] = vram[voff++];//table_restore[troff++] = vram[table_restore_x+x+(y*SCREEN_TILES_H)];
    d51c:	80 81       	ld	r24, Z
    d51e:	88 83       	st	Y, r24
    d520:	81 81       	ldd	r24, Z+1	; 0x01
    d522:	89 83       	std	Y+1, r24	; 0x01
    d524:	82 81       	ldd	r24, Z+2	; 0x02
    d526:	8a 83       	std	Y+2, r24	; 0x02
    d528:	83 81       	ldd	r24, Z+3	; 0x03
    d52a:	8b 83       	std	Y+3, r24	; 0x03
    d52c:	7e 96       	adiw	r30, 0x1e	; 30
    d52e:	24 96       	adiw	r28, 0x04	; 4
//running out of cyles and its bordering on the edge with this function
//	buffer_ops_this_frame++;
	uint8_t troff = 0;
	uint16_t voff;
	table_restore_x = sx;
	for(uint8_t y=0;y<SCREEN_TILES_V;y++){//
    d530:	9d e0       	ldi	r25, 0x0D	; 13
    d532:	c9 3e       	cpi	r28, 0xE9	; 233
    d534:	d9 07       	cpc	r29, r25
    d536:	91 f7       	brne	.-28     	; 0xd51c <UpdateCursor+0x780>
//TODO THIS IS WHAT IS KILLING THE CYCLES!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		RestoreBuffer();
		stacks[STACK_HELD].x = cursorx>>3;
		stacks[STACK_HELD].y = cursory>>3;
		SaveBuffer(stacks[STACK_HELD].x);
		DrawStack(STACK_HELD);
    d538:	8d e0       	ldi	r24, 0x0D	; 13
    d53a:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
    d53e:	0e c0       	rjmp	.+28     	; 0xd55c <UpdateCursor+0x7c0>
	}else if(!(game_state & CARD_FLOATING)){//check for 1 button draw card shortcut
    d540:	80 91 06 0a 	lds	r24, 0x0A06
    d544:	81 fd       	sbrc	r24, 1
    d546:	0a c0       	rjmp	.+20     	; 0xd55c <UpdateCursor+0x7c0>
		if(padstate & BTN_Y && !(oldpadstate & BTN_Y)){
    d548:	80 91 fc 09 	lds	r24, 0x09FC
    d54c:	81 ff       	sbrs	r24, 1
    d54e:	06 c0       	rjmp	.+12     	; 0xd55c <UpdateCursor+0x7c0>
    d550:	80 91 fa 09 	lds	r24, 0x09FA
    d554:	81 fd       	sbrc	r24, 1
    d556:	02 c0       	rjmp	.+4      	; 0xd55c <UpdateCursor+0x7c0>
			HandleDeckClick(gt);
    d558:	80 2f       	mov	r24, r16
    d55a:	63 db       	rcall	.-2362   	; 0xcc22 <HandleDeckClick>
		}
	}
}
    d55c:	cd b7       	in	r28, 0x3d	; 61
    d55e:	de b7       	in	r29, 0x3e	; 62
    d560:	e6 e0       	ldi	r30, 0x06	; 6
    d562:	0c 94 b1 75 	jmp	0xeb62	; 0xeb62 <__epilogue_restores__+0x18>

0000d566 <PauseMenu>:
		for(uint8_t x=0+((SCREEN_TILES_H/2)-5);x<((SCREEN_TILES_H/2)-5)+10;x++)
			vram[x+(y*VRAM_TILES_H)] = table_restore[off++];
}
uint8_t PauseMenu(){
    d566:	1f 93       	push	r17

	PauseSaveScreen();
    d568:	0e 94 c9 53 	call	0xa792	; 0xa792 <PauseSaveScreen>
    d56c:	1b e0       	ldi	r17, 0x0B	; 11
//PAUSETOP:
	for(uint8_t i=((SCREEN_TILES_H/2)-4);i<((SCREEN_TILES_H/2)-5)+9;i++){
		SetTile(i,10,2);
    d56e:	81 2f       	mov	r24, r17
    d570:	6a e0       	ldi	r22, 0x0A	; 10
    d572:	42 e0       	ldi	r20, 0x02	; 2
    d574:	50 e0       	ldi	r21, 0x00	; 0
    d576:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
		SetTile(i,16,2);
    d57a:	81 2f       	mov	r24, r17
    d57c:	60 e1       	ldi	r22, 0x10	; 16
    d57e:	42 e0       	ldi	r20, 0x02	; 2
    d580:	50 e0       	ldi	r21, 0x00	; 0
    d582:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
}
uint8_t PauseMenu(){

	PauseSaveScreen();
//PAUSETOP:
	for(uint8_t i=((SCREEN_TILES_H/2)-4);i<((SCREEN_TILES_H/2)-5)+9;i++){
    d586:	1f 5f       	subi	r17, 0xFF	; 255
    d588:	13 31       	cpi	r17, 0x13	; 19
    d58a:	89 f7       	brne	.-30     	; 0xd56e <PauseMenu+0x8>
    d58c:	1b e0       	ldi	r17, 0x0B	; 11
		SetTile(i,10,2);
		SetTile(i,16,2);
	}
	for(uint8_t i=11;i<16;i++){
		SetTile(((SCREEN_TILES_H/2)-5)+0,i,4);
    d58e:	8a e0       	ldi	r24, 0x0A	; 10
    d590:	61 2f       	mov	r22, r17
    d592:	44 e0       	ldi	r20, 0x04	; 4
    d594:	50 e0       	ldi	r21, 0x00	; 0
    d596:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
		SetTile(((SCREEN_TILES_H/2)-5)+9,i,5);
    d59a:	83 e1       	ldi	r24, 0x13	; 19
    d59c:	61 2f       	mov	r22, r17
    d59e:	45 e0       	ldi	r20, 0x05	; 5
    d5a0:	50 e0       	ldi	r21, 0x00	; 0
    d5a2:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
//PAUSETOP:
	for(uint8_t i=((SCREEN_TILES_H/2)-4);i<((SCREEN_TILES_H/2)-5)+9;i++){
		SetTile(i,10,2);
		SetTile(i,16,2);
	}
	for(uint8_t i=11;i<16;i++){
    d5a6:	1f 5f       	subi	r17, 0xFF	; 255
    d5a8:	10 31       	cpi	r17, 0x10	; 16
    d5aa:	89 f7       	brne	.-30     	; 0xd58e <PauseMenu+0x28>
		SetTile(((SCREEN_TILES_H/2)-5)+0,i,4);
		SetTile(((SCREEN_TILES_H/2)-5)+9,i,5);
	}
	SetTile(((SCREEN_TILES_H/2)-5)+0,10,1);
    d5ac:	8a e0       	ldi	r24, 0x0A	; 10
    d5ae:	6a e0       	ldi	r22, 0x0A	; 10
    d5b0:	41 e0       	ldi	r20, 0x01	; 1
    d5b2:	50 e0       	ldi	r21, 0x00	; 0
    d5b4:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
	SetTile(((SCREEN_TILES_H/2)-5)+9,10,3);
    d5b8:	83 e1       	ldi	r24, 0x13	; 19
    d5ba:	6a e0       	ldi	r22, 0x0A	; 10
    d5bc:	43 e0       	ldi	r20, 0x03	; 3
    d5be:	50 e0       	ldi	r21, 0x00	; 0
    d5c0:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
	SetTile(((SCREEN_TILES_H/2)-5)+0,16,6);
    d5c4:	8a e0       	ldi	r24, 0x0A	; 10
    d5c6:	60 e1       	ldi	r22, 0x10	; 16
    d5c8:	46 e0       	ldi	r20, 0x06	; 6
    d5ca:	50 e0       	ldi	r21, 0x00	; 0
    d5cc:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
	SetTile(((SCREEN_TILES_H/2)-5)+9,16,7);
    d5d0:	83 e1       	ldi	r24, 0x13	; 19
    d5d2:	60 e1       	ldi	r22, 0x10	; 16
    d5d4:	47 e0       	ldi	r20, 0x07	; 7
    d5d6:	50 e0       	ldi	r21, 0x00	; 0
    d5d8:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>

		
	SPrint((SCREEN_TILES_H/2)-4,11,PSTR("CONTINUE"));
    d5dc:	8b e0       	ldi	r24, 0x0B	; 11
    d5de:	90 e0       	ldi	r25, 0x00	; 0
    d5e0:	6b e0       	ldi	r22, 0x0B	; 11
    d5e2:	70 e0       	ldi	r23, 0x00	; 0
    d5e4:	42 e6       	ldi	r20, 0x62	; 98
    d5e6:	54 e8       	ldi	r21, 0x84	; 132
    d5e8:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint((SCREEN_TILES_H/2)-4,13,PSTR("NEW HAND"));
    d5ec:	8b e0       	ldi	r24, 0x0B	; 11
    d5ee:	90 e0       	ldi	r25, 0x00	; 0
    d5f0:	6d e0       	ldi	r22, 0x0D	; 13
    d5f2:	70 e0       	ldi	r23, 0x00	; 0
    d5f4:	49 e5       	ldi	r20, 0x59	; 89
    d5f6:	54 e8       	ldi	r21, 0x84	; 132
    d5f8:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint((SCREEN_TILES_H/2)-2,15,PSTR("QUIT"));
    d5fc:	8d e0       	ldi	r24, 0x0D	; 13
    d5fe:	90 e0       	ldi	r25, 0x00	; 0
    d600:	6f e0       	ldi	r22, 0x0F	; 15
    d602:	70 e0       	ldi	r23, 0x00	; 0
    d604:	44 e5       	ldi	r20, 0x54	; 84
    d606:	54 e8       	ldi	r21, 0x84	; 132
    d608:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
    d60c:	10 e0       	ldi	r17, 0x00	; 0
    d60e:	01 c0       	rjmp	.+2      	; 0xd612 <PauseMenu+0xac>
    d610:	11 e0       	ldi	r17, 0x01	; 1
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    d612:	e7 d8       	rcall	.-3634   	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    d614:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    d618:	81 e0       	ldi	r24, 0x01	; 1
    d61a:	90 e0       	ldi	r25, 0x00	; 0
    d61c:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	uint8_t step = 0;
	while(true){
		SWaitVsync(1);

		//UpdatePad();//done in vsync routine
		UpdateCursor(1);
    d620:	81 e0       	ldi	r24, 0x01	; 1
    d622:	bc db       	rcall	.-2184   	; 0xcd9c <UpdateCursor>
		DrawCursor();
    d624:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
		if(!step && (padstate & BTN_B) && !(oldpadstate & BTN_B))
    d628:	11 23       	and	r17, r17
    d62a:	49 f4       	brne	.+18     	; 0xd63e <PauseMenu+0xd8>
    d62c:	80 91 fc 09 	lds	r24, 0x09FC
    d630:	80 ff       	sbrs	r24, 0
    d632:	32 c0       	rjmp	.+100    	; 0xd698 <PauseMenu+0x132>
    d634:	80 91 fa 09 	lds	r24, 0x09FA
    d638:	80 fd       	sbrc	r24, 0
    d63a:	2e c0       	rjmp	.+92     	; 0xd698 <PauseMenu+0x132>
    d63c:	e9 cf       	rjmp	.-46     	; 0xd610 <PauseMenu+0xaa>
			step = 1;
		else if(step == 1 && (oldpadstate & BTN_B) && !(padstate & BTN_B)){//determine which option the user selected
    d63e:	80 91 fa 09 	lds	r24, 0x09FA
    d642:	80 ff       	sbrs	r24, 0
    d644:	29 c0       	rjmp	.+82     	; 0xd698 <PauseMenu+0x132>
    d646:	80 91 fc 09 	lds	r24, 0x09FC
    d64a:	80 fd       	sbrc	r24, 0
    d64c:	25 c0       	rjmp	.+74     	; 0xd698 <PauseMenu+0x132>
			if(CursorIntersects(((SCREEN_TILES_H/2)-4)*8,11*8,8*8,8) || CursorIntersects(12*8,0,8,8)){//continue or check mark
    d64e:	88 e5       	ldi	r24, 0x58	; 88
    d650:	68 e5       	ldi	r22, 0x58	; 88
    d652:	40 e4       	ldi	r20, 0x40	; 64
    d654:	28 e0       	ldi	r18, 0x08	; 8
    d656:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    d65a:	88 23       	and	r24, r24
    d65c:	29 f5       	brne	.+74     	; 0xd6a8 <PauseMenu+0x142>
    d65e:	80 e6       	ldi	r24, 0x60	; 96
    d660:	60 e0       	ldi	r22, 0x00	; 0
    d662:	48 e0       	ldi	r20, 0x08	; 8
    d664:	28 e0       	ldi	r18, 0x08	; 8
    d666:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    d66a:	88 23       	and	r24, r24
    d66c:	e9 f4       	brne	.+58     	; 0xd6a8 <PauseMenu+0x142>
				step = 0;
				SWaitVsync(1);
				PauseRestoreScreen();
			}else if(CursorIntersects(((SCREEN_TILES_H/2)-4)*8,13*8,8*8,8)){//new hand
    d66e:	88 e5       	ldi	r24, 0x58	; 88
    d670:	68 e6       	ldi	r22, 0x68	; 104
    d672:	40 e4       	ldi	r20, 0x40	; 64
    d674:	28 e0       	ldi	r18, 0x08	; 8
    d676:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    d67a:	88 23       	and	r24, r24
    d67c:	11 f0       	breq	.+4      	; 0xd682 <PauseMenu+0x11c>
    d67e:	11 e0       	ldi	r17, 0x01	; 1
    d680:	1d c0       	rjmp	.+58     	; 0xd6bc <PauseMenu+0x156>
				step = 1;
			}else if(false){//CursorIntersects(((SCREEN_TILES_H/2)-2)*8,12*8,4*8,8)){//help
				//HelpScreen();
				//goto PAUSETOP;
			}else if(CursorIntersects(((SCREEN_TILES_H/2)-2)*8,15*8,4*8,8)){//quit to main menu
    d682:	88 e6       	ldi	r24, 0x68	; 104
    d684:	68 e7       	ldi	r22, 0x78	; 120
    d686:	40 e2       	ldi	r20, 0x20	; 32
    d688:	28 e0       	ldi	r18, 0x08	; 8
    d68a:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    d68e:	88 23       	and	r24, r24
    d690:	09 f4       	brne	.+2      	; 0xd694 <PauseMenu+0x12e>
    d692:	be cf       	rjmp	.-132    	; 0xd610 <PauseMenu+0xaa>
				step = 2;
			}else{//selected nothing
				continue;
    d694:	12 e0       	ldi	r17, 0x02	; 2
    d696:	12 c0       	rjmp	.+36     	; 0xd6bc <PauseMenu+0x156>
			}
			break;
		}else if(padstate & BTN_START && !(oldpadstate & BTN_START)){
    d698:	80 91 fc 09 	lds	r24, 0x09FC
    d69c:	83 ff       	sbrs	r24, 3
    d69e:	b9 cf       	rjmp	.-142    	; 0xd612 <PauseMenu+0xac>
    d6a0:	80 91 fa 09 	lds	r24, 0x09FA
    d6a4:	83 fd       	sbrc	r24, 3
    d6a6:	b5 cf       	rjmp	.-150    	; 0xd612 <PauseMenu+0xac>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    d6a8:	9c d8       	rcall	.-3784   	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    d6aa:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    d6ae:	81 e0       	ldi	r24, 0x01	; 1
    d6b0:	90 e0       	ldi	r25, 0x00	; 0
    d6b2:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
			step = 0;
			SWaitVsync(1);
			PauseRestoreScreen();
    d6b6:	0e 94 e5 53 	call	0xa7ca	; 0xa7ca <PauseRestoreScreen>
    d6ba:	10 e0       	ldi	r17, 0x00	; 0
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    d6bc:	92 d8       	rcall	.-3804   	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    d6be:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    d6c2:	81 e0       	ldi	r24, 0x01	; 1
    d6c4:	90 e0       	ldi	r25, 0x00	; 0
    d6c6:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>

	}
	SWaitVsync(1);

	return step;
}
    d6ca:	81 2f       	mov	r24, r17
    d6cc:	1f 91       	pop	r17
    d6ce:	08 95       	ret

0000d6d0 <ScrollScoreDataDown>:
	}
	}
	return 0;
}

void ScrollScoreDataDown(){
    d6d0:	1f 93       	push	r17
    d6d2:	cf 93       	push	r28
    d6d4:	df 93       	push	r29
    d6d6:	c4 eb       	ldi	r28, 0xB4	; 180
    d6d8:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t y=6;y<SCREEN_TILES_V-1;y++){
		for(uint8_t x=0;x<24;x++){
			vram[(y*VRAM_TILES_H)+x+VRAM_TILES_H] = vram[(y*VRAM_TILES_H)+x];
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
    d6da:	10 e1       	ldi	r17, 0x10	; 16
    d6dc:	12 c0       	rjmp	.+36     	; 0xd702 <ScrollScoreDataDown+0x32>
}

void ScrollScoreDataDown(){
	for(uint8_t y=6;y<SCREEN_TILES_V-1;y++){
		for(uint8_t x=0;x<24;x++){
			vram[(y*VRAM_TILES_H)+x+VRAM_TILES_H] = vram[(y*VRAM_TILES_H)+x];
    d6de:	80 81       	ld	r24, Z
    d6e0:	86 8f       	std	Z+30, r24	; 0x1e
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
    d6e2:	11 93       	st	Z+, r17
	return 0;
}

void ScrollScoreDataDown(){
	for(uint8_t y=6;y<SCREEN_TILES_V-1;y++){
		for(uint8_t x=0;x<24;x++){
    d6e4:	9f 5f       	subi	r25, 0xFF	; 255
    d6e6:	98 31       	cpi	r25, 0x18	; 24
    d6e8:	d1 f7       	brne	.-12     	; 0xd6de <ScrollScoreDataDown+0xe>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    d6ea:	7b d8       	rcall	.-3850   	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    d6ec:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    d6f0:	82 e0       	ldi	r24, 0x02	; 2
    d6f2:	90 e0       	ldi	r25, 0x00	; 0
    d6f4:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
    d6f8:	6e 96       	adiw	r28, 0x1e	; 30
	}
	return 0;
}

void ScrollScoreDataDown(){
	for(uint8_t y=6;y<SCREEN_TILES_V-1;y++){
    d6fa:	82 e0       	ldi	r24, 0x02	; 2
    d6fc:	ce 3e       	cpi	r28, 0xEE	; 238
    d6fe:	d8 07       	cpc	r29, r24
    d700:	29 f0       	breq	.+10     	; 0xd70c <ScrollScoreDataDown+0x3c>
    d702:	fe 01       	movw	r30, r28
    d704:	e0 5e       	subi	r30, 0xE0	; 224
    d706:	fe 4f       	sbci	r31, 0xFE	; 254
    d708:	90 e0       	ldi	r25, 0x00	; 0
    d70a:	e9 cf       	rjmp	.-46     	; 0xd6de <ScrollScoreDataDown+0xe>
    d70c:	ee e0       	ldi	r30, 0x0E	; 14
    d70e:	f4 e0       	ldi	r31, 0x04	; 4
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
		}
		SWaitVsync(2);
	}
	for(uint8_t x=0;x<24;x++)
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
    d710:	80 e1       	ldi	r24, 0x10	; 16
    d712:	81 93       	st	Z+, r24
			vram[(y*VRAM_TILES_H)+x+VRAM_TILES_H] = vram[(y*VRAM_TILES_H)+x];
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
		}
		SWaitVsync(2);
	}
	for(uint8_t x=0;x<24;x++)
    d714:	94 e0       	ldi	r25, 0x04	; 4
    d716:	e6 32       	cpi	r30, 0x26	; 38
    d718:	f9 07       	cpc	r31, r25
    d71a:	d9 f7       	brne	.-10     	; 0xd712 <ScrollScoreDataDown+0x42>
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
}
    d71c:	df 91       	pop	r29
    d71e:	cf 91       	pop	r28
    d720:	1f 91       	pop	r17
    d722:	08 95       	ret

0000d724 <ScrollScoreDataUp>:
	FadeIn(1,false);
}



uint8_t ScrollScoreDataUp(uint8_t start_slot, uint8_t total_slots, uint8_t spacing){
    d724:	ad e0       	ldi	r26, 0x0D	; 13
    d726:	b0 e0       	ldi	r27, 0x00	; 0
    d728:	e8 e9       	ldi	r30, 0x98	; 152
    d72a:	fb e6       	ldi	r31, 0x6B	; 107
    d72c:	0c 94 89 75 	jmp	0xeb12	; 0xeb12 <__prologue_saves__>
    d730:	38 2e       	mov	r3, r24
	uint8_t ticks = 0;
	uint8_t xoff;
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
    d732:	90 e0       	ldi	r25, 0x00	; 0
    d734:	9f 83       	std	Y+7, r25	; 0x07
    d736:	8e 83       	std	Y+6, r24	; 0x06
    d738:	86 0f       	add	r24, r22
    d73a:	91 1d       	adc	r25, r1
    d73c:	99 87       	std	Y+9, r25	; 0x09
    d73e:	88 87       	std	Y+8, r24	; 0x08
	xoff = 6;
	for(uint8_t j=k*10;j<(k*10)+10;j++){
		ticks = 0;
		if(j<(k*10+8)){
			for(uint8_t i=SCREEN_TILES_V-1;i>9+((k-start_slot)*spacing);i--){
    d740:	e4 2f       	mov	r30, r20
    d742:	f0 e0       	ldi	r31, 0x00	; 0
    d744:	fb 87       	std	Y+11, r31	; 0x0b
    d746:	ea 87       	std	Y+10, r30	; 0x0a
			xoff++;
		}else{//we are displaying the score digits
			uint16_t score_digits = eeprom_data[j+0]<<8;
			score_digits |= eeprom_data[j+1];
		//	score_digits = 65535;
			char digit_tiles[5] = {0,0,0,0,0,};
    d748:	ce 01       	movw	r24, r28
    d74a:	01 96       	adiw	r24, 0x01	; 1
    d74c:	9d 87       	std	Y+13, r25	; 0x0d
    d74e:	8c 87       	std	Y+12, r24	; 0x0c
			digit_tiles[3] = (score_digits/10UL);
			score_digits %= 10UL;
			digit_tiles[4] = (score_digits/1UL);
			for(uint8_t l=0;l<4;l++){
				if(digit_tiles[l] == 0)
					digit_tiles[l] = ' ';
    d750:	a0 e2       	ldi	r26, 0x20	; 32
    d752:	2a 2e       	mov	r2, r26
    d754:	0f c1       	rjmp	.+542    	; 0xd974 <ScrollScoreDataUp+0x250>
uint8_t ScrollScoreDataUp(uint8_t start_slot, uint8_t total_slots, uint8_t spacing){
	uint8_t ticks = 0;
	uint8_t xoff;
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
	xoff = 6;
	for(uint8_t j=k*10;j<(k*10)+10;j++){
    d756:	9a 01       	movw	r18, r20
    d758:	22 0f       	add	r18, r18
    d75a:	33 1f       	adc	r19, r19
    d75c:	ca 01       	movw	r24, r20
    d75e:	e3 e0       	ldi	r30, 0x03	; 3
    d760:	88 0f       	add	r24, r24
    d762:	99 1f       	adc	r25, r25
    d764:	ea 95       	dec	r30
    d766:	e1 f7       	brne	.-8      	; 0xd760 <ScrollScoreDataUp+0x3c>
    d768:	28 0f       	add	r18, r24
    d76a:	39 1f       	adc	r19, r25
    d76c:	c2 2e       	mov	r12, r18
    d76e:	ca 01       	movw	r24, r20
    d770:	01 96       	adiw	r24, 0x01	; 1
    d772:	7c 01       	movw	r14, r24
    d774:	73 e0       	ldi	r23, 0x03	; 3
    d776:	ee 0c       	add	r14, r14
    d778:	ff 1c       	adc	r15, r15
    d77a:	7a 95       	dec	r23
    d77c:	e1 f7       	brne	.-8      	; 0xd776 <ScrollScoreDataUp+0x52>
    d77e:	88 0f       	add	r24, r24
    d780:	99 1f       	adc	r25, r25
    d782:	e8 0e       	add	r14, r24
    d784:	f9 1e       	adc	r15, r25
		ticks = 0;
		if(j<(k*10+8)){
			for(uint8_t i=SCREEN_TILES_V-1;i>9+((k-start_slot)*spacing);i--){
    d786:	ee 81       	ldd	r30, Y+6	; 0x06
    d788:	ff 81       	ldd	r31, Y+7	; 0x07
    d78a:	4e 1b       	sub	r20, r30
    d78c:	5f 0b       	sbc	r21, r31
    d78e:	8a 85       	ldd	r24, Y+10	; 0x0a
    d790:	9b 85       	ldd	r25, Y+11	; 0x0b
    d792:	48 9f       	mul	r20, r24
    d794:	50 01       	movw	r10, r0
    d796:	49 9f       	mul	r20, r25
    d798:	b0 0c       	add	r11, r0
    d79a:	58 9f       	mul	r21, r24
    d79c:	b0 0c       	add	r11, r0
    d79e:	11 24       	eor	r1, r1
    d7a0:	e9 e0       	ldi	r30, 0x09	; 9
    d7a2:	f0 e0       	ldi	r31, 0x00	; 0
    d7a4:	ae 0e       	add	r10, r30
    d7a6:	bf 1e       	adc	r11, r31
    d7a8:	56 e0       	ldi	r21, 0x06	; 6
    d7aa:	d5 2e       	mov	r13, r21
	uint8_t xoff;
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
	xoff = 6;
	for(uint8_t j=k*10;j<(k*10)+10;j++){
		ticks = 0;
		if(j<(k*10+8)){
    d7ac:	47 e0       	ldi	r20, 0x07	; 7
    d7ae:	44 2e       	mov	r4, r20
    d7b0:	51 2c       	mov	r5, r1
    d7b2:	42 0e       	add	r4, r18
    d7b4:	53 1e       	adc	r5, r19
    d7b6:	d7 c0       	rjmp	.+430    	; 0xd966 <ScrollScoreDataUp+0x242>
    d7b8:	4e 16       	cp	r4, r30
    d7ba:	5f 06       	cpc	r5, r31
    d7bc:	0c f4       	brge	.+2      	; 0xd7c0 <ScrollScoreDataUp+0x9c>
    d7be:	42 c0       	rjmp	.+132    	; 0xd844 <ScrollScoreDataUp+0x120>
    d7c0:	00 e0       	ldi	r16, 0x00	; 0
    d7c2:	19 e1       	ldi	r17, 0x19	; 25
			for(uint8_t i=SCREEN_TILES_V-1;i>9+((k-start_slot)*spacing);i--){
				uint8_t c;
				c = eeprom_data[j]&127;//eliminate any top bits used to store game preferences
    d7c4:	91 e1       	ldi	r25, 0x11	; 17
    d7c6:	69 2e       	mov	r6, r25
    d7c8:	9a e0       	ldi	r25, 0x0A	; 10
    d7ca:	79 2e       	mov	r7, r25
    d7cc:	6e 0e       	add	r6, r30
    d7ce:	7f 1e       	adc	r7, r31
    d7d0:	31 c0       	rjmp	.+98     	; 0xd834 <ScrollScoreDataUp+0x110>
    d7d2:	f3 01       	movw	r30, r6
    d7d4:	40 81       	ld	r20, Z
    d7d6:	4f 77       	andi	r20, 0x7F	; 127
				if(c == ' '){
    d7d8:	40 32       	cpi	r20, 0x20	; 32
    d7da:	59 f1       	breq	.+86     	; 0xd832 <ScrollScoreDataUp+0x10e>
	
					continue;
				}
				c=(((c&127)-'A')+FONT_START_TILE);
				SetTile(xoff,i,c);
    d7dc:	4d 59       	subi	r20, 0x9D	; 157
    d7de:	8d 2d       	mov	r24, r13
    d7e0:	61 2f       	mov	r22, r17
    d7e2:	50 e0       	ldi	r21, 0x00	; 0
    d7e4:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
				if(i != SCREEN_TILES_V-1)
    d7e8:	19 31       	cpi	r17, 0x19	; 25
    d7ea:	39 f0       	breq	.+14     	; 0xd7fa <ScrollScoreDataUp+0xd6>
					SetTile(xoff,i+1,0);
    d7ec:	61 2f       	mov	r22, r17
    d7ee:	6f 5f       	subi	r22, 0xFF	; 255
    d7f0:	8d 2d       	mov	r24, r13
    d7f2:	40 e0       	ldi	r20, 0x00	; 0
    d7f4:	50 e0       	ldi	r21, 0x00	; 0
    d7f6:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
				if((padstate & 0x7FFF) && !(oldpadstate & 0x7FFF))
    d7fa:	80 91 fc 09 	lds	r24, 0x09FC
    d7fe:	90 91 fd 09 	lds	r25, 0x09FD
    d802:	9f 77       	andi	r25, 0x7F	; 127
    d804:	89 2b       	or	r24, r25
    d806:	41 f0       	breq	.+16     	; 0xd818 <ScrollScoreDataUp+0xf4>
    d808:	80 91 fa 09 	lds	r24, 0x09FA
    d80c:	90 91 fb 09 	lds	r25, 0x09FB
    d810:	9f 77       	andi	r25, 0x7F	; 127
    d812:	89 2b       	or	r24, r25
    d814:	09 f4       	brne	.+2      	; 0xd818 <ScrollScoreDataUp+0xf4>
    d816:	b8 c0       	rjmp	.+368    	; 0xd988 <ScrollScoreDataUp+0x264>
					return 1;
				if(ticks++){
    d818:	00 23       	and	r16, r16
    d81a:	11 f4       	brne	.+4      	; 0xd820 <ScrollScoreDataUp+0xfc>
    d81c:	01 e0       	ldi	r16, 0x01	; 1
    d81e:	09 c0       	rjmp	.+18     	; 0xd832 <ScrollScoreDataUp+0x10e>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    d820:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    d824:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    d828:	81 e0       	ldi	r24, 0x01	; 1
    d82a:	90 e0       	ldi	r25, 0x00	; 0
    d82c:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
    d830:	00 e0       	ldi	r16, 0x00	; 0
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
	xoff = 6;
	for(uint8_t j=k*10;j<(k*10)+10;j++){
		ticks = 0;
		if(j<(k*10+8)){
			for(uint8_t i=SCREEN_TILES_V-1;i>9+((k-start_slot)*spacing);i--){
    d832:	11 50       	subi	r17, 0x01	; 1
    d834:	81 2f       	mov	r24, r17
    d836:	90 e0       	ldi	r25, 0x00	; 0
    d838:	a8 16       	cp	r10, r24
    d83a:	b9 06       	cpc	r11, r25
    d83c:	54 f2       	brlt	.-108    	; 0xd7d2 <ScrollScoreDataUp+0xae>
				if(ticks++){
					ticks = 0;
					SWaitVsync(1);
				}
			}
			xoff++;
    d83e:	d3 94       	inc	r13
uint8_t ScrollScoreDataUp(uint8_t start_slot, uint8_t total_slots, uint8_t spacing){
	uint8_t ticks = 0;
	uint8_t xoff;
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
	xoff = 6;
	for(uint8_t j=k*10;j<(k*10)+10;j++){
    d840:	c3 94       	inc	r12
    d842:	91 c0       	rjmp	.+290    	; 0xd966 <ScrollScoreDataUp+0x242>
					SWaitVsync(1);
				}
			}
			xoff++;
		}else{//we are displaying the score digits
			uint16_t score_digits = eeprom_data[j+0]<<8;
    d844:	ef 5e       	subi	r30, 0xEF	; 239
    d846:	f5 4f       	sbci	r31, 0xF5	; 245
    d848:	90 80       	ld	r9, Z
    d84a:	88 24       	eor	r8, r8
			score_digits |= eeprom_data[j+1];
    d84c:	21 81       	ldd	r18, Z+1	; 0x01
    d84e:	30 e0       	ldi	r19, 0x00	; 0
    d850:	28 29       	or	r18, r8
    d852:	39 29       	or	r19, r9
		//	score_digits = 65535;
			char digit_tiles[5] = {0,0,0,0,0,};
    d854:	ec 85       	ldd	r30, Y+12	; 0x0c
    d856:	fd 85       	ldd	r31, Y+13	; 0x0d
    d858:	85 e0       	ldi	r24, 0x05	; 5
    d85a:	11 92       	st	Z+, r1
    d85c:	8a 95       	dec	r24
    d85e:	e9 f7       	brne	.-6      	; 0xd85a <ScrollScoreDataUp+0x136>
			digit_tiles[0] = (score_digits/10000UL);
    d860:	c9 01       	movw	r24, r18
    d862:	60 e1       	ldi	r22, 0x10	; 16
    d864:	77 e2       	ldi	r23, 0x27	; 39
    d866:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d86a:	46 2f       	mov	r20, r22
    d86c:	69 83       	std	Y+1, r22	; 0x01
			score_digits %= 10000UL;
    d86e:	c9 01       	movw	r24, r18
    d870:	60 e1       	ldi	r22, 0x10	; 16
    d872:	77 e2       	ldi	r23, 0x27	; 39
    d874:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d878:	9c 01       	movw	r18, r24
			digit_tiles[1] = (score_digits/1000UL);
    d87a:	68 ee       	ldi	r22, 0xE8	; 232
    d87c:	73 e0       	ldi	r23, 0x03	; 3
    d87e:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d882:	16 2f       	mov	r17, r22
    d884:	6a 83       	std	Y+2, r22	; 0x02
			score_digits %= 1000UL;
    d886:	c9 01       	movw	r24, r18
    d888:	68 ee       	ldi	r22, 0xE8	; 232
    d88a:	73 e0       	ldi	r23, 0x03	; 3
    d88c:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d890:	9c 01       	movw	r18, r24
			digit_tiles[2] = (score_digits/100UL);
    d892:	64 e6       	ldi	r22, 0x64	; 100
    d894:	70 e0       	ldi	r23, 0x00	; 0
    d896:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d89a:	f6 2f       	mov	r31, r22
    d89c:	6b 83       	std	Y+3, r22	; 0x03
			score_digits %= 100UL;
    d89e:	c9 01       	movw	r24, r18
    d8a0:	64 e6       	ldi	r22, 0x64	; 100
    d8a2:	70 e0       	ldi	r23, 0x00	; 0
    d8a4:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d8a8:	9c 01       	movw	r18, r24
			digit_tiles[3] = (score_digits/10UL);
    d8aa:	6a e0       	ldi	r22, 0x0A	; 10
    d8ac:	70 e0       	ldi	r23, 0x00	; 0
    d8ae:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d8b2:	e6 2f       	mov	r30, r22
    d8b4:	6c 83       	std	Y+4, r22	; 0x04
			score_digits %= 10UL;
			digit_tiles[4] = (score_digits/1UL);
    d8b6:	c9 01       	movw	r24, r18
    d8b8:	6a e0       	ldi	r22, 0x0A	; 10
    d8ba:	70 e0       	ldi	r23, 0x00	; 0
    d8bc:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d8c0:	8d 83       	std	Y+5, r24	; 0x05
			for(uint8_t l=0;l<4;l++){
				if(digit_tiles[l] == 0)
    d8c2:	44 23       	and	r20, r20
    d8c4:	49 f4       	brne	.+18     	; 0xd8d8 <ScrollScoreDataUp+0x1b4>
					digit_tiles[l] = ' ';
    d8c6:	29 82       	std	Y+1, r2	; 0x01
			score_digits %= 100UL;
			digit_tiles[3] = (score_digits/10UL);
			score_digits %= 10UL;
			digit_tiles[4] = (score_digits/1UL);
			for(uint8_t l=0;l<4;l++){
				if(digit_tiles[l] == 0)
    d8c8:	11 23       	and	r17, r17
    d8ca:	31 f4       	brne	.+12     	; 0xd8d8 <ScrollScoreDataUp+0x1b4>
					digit_tiles[l] = ' ';
    d8cc:	2a 82       	std	Y+2, r2	; 0x02
			score_digits %= 100UL;
			digit_tiles[3] = (score_digits/10UL);
			score_digits %= 10UL;
			digit_tiles[4] = (score_digits/1UL);
			for(uint8_t l=0;l<4;l++){
				if(digit_tiles[l] == 0)
    d8ce:	ff 23       	and	r31, r31
    d8d0:	19 f4       	brne	.+6      	; 0xd8d8 <ScrollScoreDataUp+0x1b4>
					digit_tiles[l] = ' ';
    d8d2:	2b 82       	std	Y+3, r2	; 0x03
			score_digits %= 100UL;
			digit_tiles[3] = (score_digits/10UL);
			score_digits %= 10UL;
			digit_tiles[4] = (score_digits/1UL);
			for(uint8_t l=0;l<4;l++){
				if(digit_tiles[l] == 0)
    d8d4:	ee 23       	and	r30, r30
    d8d6:	39 f0       	breq	.+14     	; 0xd8e6 <ScrollScoreDataUp+0x1c2>
    d8d8:	7e 01       	movw	r14, r28
    d8da:	08 94       	sec
    d8dc:	e1 1c       	adc	r14, r1
    d8de:	f1 1c       	adc	r15, r1
    d8e0:	dd 24       	eor	r13, r13
    d8e2:	0f e0       	ldi	r16, 0x0F	; 15
    d8e4:	3e c0       	rjmp	.+124    	; 0xd962 <ScrollScoreDataUp+0x23e>
					digit_tiles[l] = ' ';
    d8e6:	2c 82       	std	Y+4, r2	; 0x04
    d8e8:	f7 cf       	rjmp	.-18     	; 0xd8d8 <ScrollScoreDataUp+0x1b4>
			xoff = 15;
			for(uint8_t m=0;m<5;m++){

			for(uint8_t l=SCREEN_TILES_V-1;l>9+((k-start_slot)*spacing);l--){
				uint8_t c;
				c = digit_tiles[m];
    d8ea:	f7 01       	movw	r30, r14
    d8ec:	40 81       	ld	r20, Z
				if(c == ' '){
    d8ee:	40 32       	cpi	r20, 0x20	; 32
    d8f0:	61 f1       	breq	.+88     	; 0xd94a <ScrollScoreDataUp+0x226>
	
					continue;
				}

				SetTile(xoff,l,c+NUM_START_TILE);
    d8f2:	50 e0       	ldi	r21, 0x00	; 0
    d8f4:	46 56       	subi	r20, 0x66	; 102
    d8f6:	5f 4f       	sbci	r21, 0xFF	; 255
    d8f8:	80 2f       	mov	r24, r16
    d8fa:	61 2f       	mov	r22, r17
    d8fc:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
				if(l != SCREEN_TILES_V-1)
    d900:	19 31       	cpi	r17, 0x19	; 25
    d902:	39 f0       	breq	.+14     	; 0xd912 <ScrollScoreDataUp+0x1ee>
					SetTile(xoff,l+1,0);
    d904:	61 2f       	mov	r22, r17
    d906:	6f 5f       	subi	r22, 0xFF	; 255
    d908:	80 2f       	mov	r24, r16
    d90a:	40 e0       	ldi	r20, 0x00	; 0
    d90c:	50 e0       	ldi	r21, 0x00	; 0
    d90e:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
				if((padstate & 0x7FFF) && !(oldpadstate & 0x7FFF))
    d912:	80 91 fc 09 	lds	r24, 0x09FC
    d916:	90 91 fd 09 	lds	r25, 0x09FD
    d91a:	9f 77       	andi	r25, 0x7F	; 127
    d91c:	89 2b       	or	r24, r25
    d91e:	39 f0       	breq	.+14     	; 0xd92e <ScrollScoreDataUp+0x20a>
    d920:	80 91 fa 09 	lds	r24, 0x09FA
    d924:	90 91 fb 09 	lds	r25, 0x09FB
    d928:	9f 77       	andi	r25, 0x7F	; 127
    d92a:	89 2b       	or	r24, r25
    d92c:	69 f1       	breq	.+90     	; 0xd988 <ScrollScoreDataUp+0x264>
					return 1;
				if(ticks++){
    d92e:	dd 20       	and	r13, r13
    d930:	19 f4       	brne	.+6      	; 0xd938 <ScrollScoreDataUp+0x214>
    d932:	dd 24       	eor	r13, r13
    d934:	d3 94       	inc	r13
    d936:	09 c0       	rjmp	.+18     	; 0xd94a <ScrollScoreDataUp+0x226>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    d938:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    d93c:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    d940:	81 e0       	ldi	r24, 0x01	; 1
    d942:	90 e0       	ldi	r25, 0x00	; 0
    d944:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
    d948:	dd 24       	eor	r13, r13
					break;
			}
			xoff = 15;
			for(uint8_t m=0;m<5;m++){

			for(uint8_t l=SCREEN_TILES_V-1;l>9+((k-start_slot)*spacing);l--){
    d94a:	11 50       	subi	r17, 0x01	; 1
    d94c:	81 2f       	mov	r24, r17
    d94e:	90 e0       	ldi	r25, 0x00	; 0
    d950:	a8 16       	cp	r10, r24
    d952:	b9 06       	cpc	r11, r25
    d954:	54 f2       	brlt	.-108    	; 0xd8ea <ScrollScoreDataUp+0x1c6>
    d956:	08 94       	sec
    d958:	e1 1c       	adc	r14, r1
    d95a:	f1 1c       	adc	r15, r1
					digit_tiles[l] = ' ';
				else
					break;
			}
			xoff = 15;
			for(uint8_t m=0;m<5;m++){
    d95c:	03 31       	cpi	r16, 0x13	; 19
    d95e:	49 f0       	breq	.+18     	; 0xd972 <ScrollScoreDataUp+0x24e>
				if(ticks++){
					ticks = 0;
					SWaitVsync(1);
				}
			}
			xoff++;
    d960:	0f 5f       	subi	r16, 0xFF	; 255
    d962:	19 e1       	ldi	r17, 0x19	; 25
    d964:	f3 cf       	rjmp	.-26     	; 0xd94c <ScrollScoreDataUp+0x228>
uint8_t ScrollScoreDataUp(uint8_t start_slot, uint8_t total_slots, uint8_t spacing){
	uint8_t ticks = 0;
	uint8_t xoff;
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
	xoff = 6;
	for(uint8_t j=k*10;j<(k*10)+10;j++){
    d966:	ec 2d       	mov	r30, r12
    d968:	f0 e0       	ldi	r31, 0x00	; 0
    d96a:	ee 15       	cp	r30, r14
    d96c:	ff 05       	cpc	r31, r15
    d96e:	0c f4       	brge	.+2      	; 0xd972 <ScrollScoreDataUp+0x24e>
    d970:	23 cf       	rjmp	.-442    	; 0xd7b8 <ScrollScoreDataUp+0x94>


uint8_t ScrollScoreDataUp(uint8_t start_slot, uint8_t total_slots, uint8_t spacing){
	uint8_t ticks = 0;
	uint8_t xoff;
	for(uint8_t k=start_slot;k<start_slot+total_slots;k++){
    d972:	33 94       	inc	r3
    d974:	43 2d       	mov	r20, r3
    d976:	50 e0       	ldi	r21, 0x00	; 0
    d978:	88 85       	ldd	r24, Y+8	; 0x08
    d97a:	99 85       	ldd	r25, Y+9	; 0x09
    d97c:	48 17       	cp	r20, r24
    d97e:	59 07       	cpc	r21, r25
    d980:	0c f4       	brge	.+2      	; 0xd984 <ScrollScoreDataUp+0x260>
    d982:	e9 ce       	rjmp	.-558    	; 0xd756 <ScrollScoreDataUp+0x32>
    d984:	80 e0       	ldi	r24, 0x00	; 0
    d986:	01 c0       	rjmp	.+2      	; 0xd98a <ScrollScoreDataUp+0x266>
    d988:	81 e0       	ldi	r24, 0x01	; 1
			break;
		}
	}
	}
	return 0;
}
    d98a:	2d 96       	adiw	r28, 0x0d	; 13
    d98c:	e2 e1       	ldi	r30, 0x12	; 18
    d98e:	0c 94 a5 75 	jmp	0xeb4a	; 0xeb4a <__epilogue_restores__>

0000d992 <VictoryScreen>:
	SPrintNum(22,10,card_score,1);
	SPrintNum(22,12,bonus,1);
	SPrintNum(22,14,game_score,1);
}

void VictoryScreen(){//return;//////////////////////
    d992:	2f 92       	push	r2
    d994:	3f 92       	push	r3
    d996:	4f 92       	push	r4
    d998:	5f 92       	push	r5
    d99a:	7f 92       	push	r7
    d99c:	8f 92       	push	r8
    d99e:	9f 92       	push	r9
    d9a0:	af 92       	push	r10
    d9a2:	bf 92       	push	r11
    d9a4:	cf 92       	push	r12
    d9a6:	df 92       	push	r13
    d9a8:	ef 92       	push	r14
    d9aa:	ff 92       	push	r15
    d9ac:	0f 93       	push	r16
    d9ae:	1f 93       	push	r17
    d9b0:	cf 93       	push	r28
    d9b2:	df 93       	push	r29

	uint16_t bonus = (uint16_t)(((uint32_t)63000UL)/round_seconds);//(uint32_t)(((uint32_t)140000UL)/round_seconds);
//	uint16_t card_score = game_score;
	game_score += bonus;
    d9b4:	60 91 65 0a 	lds	r22, 0x0A65
    d9b8:	70 91 66 0a 	lds	r23, 0x0A66
    d9bc:	88 e1       	ldi	r24, 0x18	; 24
    d9be:	96 ef       	ldi	r25, 0xF6	; 246
    d9c0:	0e 94 62 75 	call	0xeac4	; 0xeac4 <__udivmodhi4>
    d9c4:	80 91 01 0a 	lds	r24, 0x0A01
    d9c8:	90 91 02 0a 	lds	r25, 0x0A02
    d9cc:	86 0f       	add	r24, r22
    d9ce:	97 1f       	adc	r25, r23
    d9d0:	90 93 02 0a 	sts	0x0A02, r25
    d9d4:	80 93 01 0a 	sts	0x0A01, r24

	//SPrintNumV(12,1,game_score);//make sure player sees the applied bonus during the winning screen
	if(ai_state){//ai can't win
    d9d8:	80 91 03 0a 	lds	r24, 0x0A03
    d9dc:	88 23       	and	r24, r24
    d9de:	39 f4       	brne	.+14     	; 0xd9ee <VictoryScreen+0x5c>
    d9e0:	62 ef       	ldi	r22, 0xF2	; 242
    d9e2:	7a e0       	ldi	r23, 0x0A	; 10
    d9e4:	40 e0       	ldi	r20, 0x00	; 0
    d9e6:	22 e0       	ldi	r18, 0x02	; 2
    d9e8:	30 e0       	ldi	r19, 0x00	; 0
//////TESTING SETUP/////////
uint8_t coff = 0;
for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
	for(uint8_t j=0;j<13;j++)
		stacks[i].cards[j] = FACEUP|coff++;
	stacks[i].numcards = 13;
    d9ea:	5d e0       	ldi	r21, 0x0D	; 13
    d9ec:	14 c0       	rjmp	.+40     	; 0xda16 <VictoryScreen+0x84>
//	uint16_t card_score = game_score;
	game_score += bonus;

	//SPrintNumV(12,1,game_score);//make sure player sees the applied bonus during the winning screen
	if(ai_state){//ai can't win
		ai_state = 0;//main loop will catch !ai_state && demo_playing and exit
    d9ee:	10 92 03 0a 	sts	0x0A03, r1
    d9f2:	3f c1       	rjmp	.+638    	; 0xdc72 <VictoryScreen+0x2e0>

//////TESTING SETUP/////////
uint8_t coff = 0;
for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
	for(uint8_t j=0;j<13;j++)
		stacks[i].cards[j] = FACEUP|coff++;
    d9f4:	89 2f       	mov	r24, r25
    d9f6:	80 68       	ori	r24, 0x80	; 128
    d9f8:	81 93       	st	Z+, r24
    d9fa:	9f 5f       	subi	r25, 0xFF	; 255


//////TESTING SETUP/////////
uint8_t coff = 0;
for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
	for(uint8_t j=0;j<13;j++)
    d9fc:	e6 17       	cp	r30, r22
    d9fe:	f7 07       	cpc	r31, r23
    da00:	c9 f7       	brne	.-14     	; 0xd9f4 <VictoryScreen+0x62>
    da02:	43 5f       	subi	r20, 0xF3	; 243
		stacks[i].cards[j] = FACEUP|coff++;
	stacks[i].numcards = 13;
    da04:	3f 97       	sbiw	r30, 0x0f	; 15
    da06:	50 83       	st	Z, r21
    da08:	2f 5f       	subi	r18, 0xFF	; 255
    da0a:	3f 4f       	sbci	r19, 0xFF	; 255
    da0c:	bf 01       	movw	r22, r30
    da0e:	69 5b       	subi	r22, 0xB9	; 185
    da10:	7f 4f       	sbci	r23, 0xFF	; 255
	}


//////TESTING SETUP/////////
uint8_t coff = 0;
for(uint8_t i=STACK_HOME0;i<=STACK_HOME3;i++){
    da12:	44 33       	cpi	r20, 0x34	; 52
    da14:	99 f0       	breq	.+38     	; 0xda3c <VictoryScreen+0xaa>
    da16:	c9 01       	movw	r24, r18
    da18:	88 0f       	add	r24, r24
    da1a:	99 1f       	adc	r25, r25
    da1c:	fc 01       	movw	r30, r24
    da1e:	b3 e0       	ldi	r27, 0x03	; 3
    da20:	ee 0f       	add	r30, r30
    da22:	ff 1f       	adc	r31, r31
    da24:	ba 95       	dec	r27
    da26:	e1 f7       	brne	.-8      	; 0xda20 <VictoryScreen+0x8e>
    da28:	e8 1b       	sub	r30, r24
    da2a:	f9 0b       	sbc	r31, r25
    da2c:	ee 0f       	add	r30, r30
    da2e:	ff 1f       	adc	r31, r31
    da30:	ee 0f       	add	r30, r30
    da32:	ff 1f       	adc	r31, r31
    da34:	eb 58       	subi	r30, 0x8B	; 139
    da36:	f5 4f       	sbci	r31, 0xF5	; 245
    da38:	94 2f       	mov	r25, r20
    da3a:	dc cf       	rjmp	.-72     	; 0xd9f4 <VictoryScreen+0x62>
	for(uint8_t j=0;j<13;j++)
		stacks[i].cards[j] = FACEUP|coff++;
	stacks[i].numcards = 13;
}
stacks[STACK_DECK].numcards = 0;
    da3c:	10 92 73 0a 	sts	0x0A73, r1
    da40:	c0 e0       	ldi	r28, 0x00	; 0
    da42:	d0 e0       	ldi	r29, 0x00	; 0



	for(uint8_t i=0;i<10;i++){
		DDRC = i&1?255:0;//flash screen a few times(how creative right?)
    da44:	c0 fd       	sbrc	r28, 0
    da46:	02 c0       	rjmp	.+4      	; 0xda4c <VictoryScreen+0xba>
    da48:	80 e0       	ldi	r24, 0x00	; 0
    da4a:	01 c0       	rjmp	.+2      	; 0xda4e <VictoryScreen+0xbc>
    da4c:	8f ef       	ldi	r24, 0xFF	; 255
    da4e:	87 b9       	out	0x07, r24	; 7
		DDRC > 0?(SetLedOn()):(SetLedOff());
    da50:	87 b1       	in	r24, 0x07	; 7
    da52:	88 23       	and	r24, r24
    da54:	19 f0       	breq	.+6      	; 0xda5c <VictoryScreen+0xca>
    da56:	0e 94 31 47 	call	0x8e62	; 0x8e62 <SetLedOn>
    da5a:	02 c0       	rjmp	.+4      	; 0xda60 <VictoryScreen+0xce>
    da5c:	0e 94 33 47 	call	0x8e66	; 0x8e66 <SetLedOff>
    da60:	10 e0       	ldi	r17, 0x00	; 0
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    da62:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    da66:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    da6a:	81 e0       	ldi	r24, 0x01	; 1
    da6c:	90 e0       	ldi	r25, 0x00	; 0
    da6e:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
		//PWM THE CONSOLE LED INSTEAD??!?
		for(uint8_t j=0;j<6;j++){
			SWaitVsync(1);
			UpdateCursor(1);
    da72:	81 e0       	ldi	r24, 0x01	; 1
    da74:	93 d9       	rcall	.-3290   	; 0xcd9c <UpdateCursor>
			DrawCursor();
    da76:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>

	for(uint8_t i=0;i<10;i++){
		DDRC = i&1?255:0;//flash screen a few times(how creative right?)
		DDRC > 0?(SetLedOn()):(SetLedOff());
		//PWM THE CONSOLE LED INSTEAD??!?
		for(uint8_t j=0;j<6;j++){
    da7a:	1f 5f       	subi	r17, 0xFF	; 255
    da7c:	16 30       	cpi	r17, 0x06	; 6
    da7e:	89 f7       	brne	.-30     	; 0xda62 <VictoryScreen+0xd0>
    da80:	21 96       	adiw	r28, 0x01	; 1
}
stacks[STACK_DECK].numcards = 0;



	for(uint8_t i=0;i<10;i++){
    da82:	ca 30       	cpi	r28, 0x0A	; 10
    da84:	d1 05       	cpc	r29, r1
    da86:	f1 f6       	brne	.-68     	; 0xda44 <VictoryScreen+0xb2>
	stacks[i].numcards = 13;
}*/


	uint8_t i=STACK_HOME0;
	awaiting_key = 1;//LET USER END SEQUENCE EARLY BY PRESSING A BUTTON, SPECIAL CASE HANDLED IN UpdatePad()
    da88:	81 e0       	ldi	r24, 0x01	; 1
    da8a:	80 93 0f 0a 	sts	0x0A0F, r24
    da8e:	22 e0       	ldi	r18, 0x02	; 2
    da90:	72 2e       	mov	r7, r18
	while(1){
			if(!stacks[i].numcards){
    da92:	9c e1       	ldi	r25, 0x1C	; 28
    da94:	29 2e       	mov	r2, r25
    da96:	31 2c       	mov	r3, r1
    da98:	01 c0       	rjmp	.+2      	; 0xda9c <VictoryScreen+0x10a>
				if(i++ == STACK_HOME3)
    da9a:	73 94       	inc	r7


	uint8_t i=STACK_HOME0;
	awaiting_key = 1;//LET USER END SEQUENCE EARLY BY PRESSING A BUTTON, SPECIAL CASE HANDLED IN UpdatePad()
	while(1){
			if(!stacks[i].numcards){
    da9c:	47 2c       	mov	r4, r7
    da9e:	55 24       	eor	r5, r5
    daa0:	42 9c       	mul	r4, r2
    daa2:	e0 01       	movw	r28, r0
    daa4:	43 9c       	mul	r4, r3
    daa6:	d0 0d       	add	r29, r0
    daa8:	52 9c       	mul	r5, r2
    daaa:	d0 0d       	add	r29, r0
    daac:	11 24       	eor	r1, r1
    daae:	cc 0f       	add	r28, r28
    dab0:	dd 1f       	adc	r29, r29
    dab2:	cd 58       	subi	r28, 0x8D	; 141
    dab4:	d5 4f       	sbci	r29, 0xF5	; 245
    dab6:	88 81       	ld	r24, Y
    dab8:	88 23       	and	r24, r24
    daba:	21 f4       	brne	.+8      	; 0xdac4 <VictoryScreen+0x132>
				if(i++ == STACK_HOME3)
    dabc:	25 e0       	ldi	r18, 0x05	; 5
    dabe:	72 16       	cp	r7, r18
    dac0:	61 f7       	brne	.-40     	; 0xda9a <VictoryScreen+0x108>
    dac2:	bb c0       	rjmp	.+374    	; 0xdc3a <VictoryScreen+0x2a8>
					break;//goto VICTORYBREAK;
				continue;
			}
			uint8_t dx = GetPrngNumber(0)%SCREEN_TILES_H;
    dac4:	80 e0       	ldi	r24, 0x00	; 0
    dac6:	90 e0       	ldi	r25, 0x00	; 0
    dac8:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dacc:	6e e1       	ldi	r22, 0x1E	; 30
    dace:	70 e0       	ldi	r23, 0x00	; 0
    dad0:	f9 d7       	rcall	.+4082   	; 0xeac4 <__udivmodhi4>
    dad2:	d8 2e       	mov	r13, r24
			uint8_t dy = GetPrngNumber(0)%SCREEN_TILES_V;
    dad4:	80 e0       	ldi	r24, 0x00	; 0
    dad6:	90 e0       	ldi	r25, 0x00	; 0
    dad8:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dadc:	6a e1       	ldi	r22, 0x1A	; 26
    dade:	70 e0       	ldi	r23, 0x00	; 0
    dae0:	f1 d7       	rcall	.+4066   	; 0xeac4 <__udivmodhi4>
    dae2:	18 2f       	mov	r17, r24
			uint8_t ndx = GetPrngNumber(0)%SCREEN_TILES_H;
    dae4:	80 e0       	ldi	r24, 0x00	; 0
    dae6:	90 e0       	ldi	r25, 0x00	; 0
    dae8:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    daec:	6e e1       	ldi	r22, 0x1E	; 30
    daee:	70 e0       	ldi	r23, 0x00	; 0
    daf0:	e9 d7       	rcall	.+4050   	; 0xeac4 <__udivmodhi4>
    daf2:	88 2e       	mov	r8, r24
			uint8_t ndy = GetPrngNumber(0)%SCREEN_TILES_V;
    daf4:	80 e0       	ldi	r24, 0x00	; 0
    daf6:	90 e0       	ldi	r25, 0x00	; 0
    daf8:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dafc:	6a e1       	ldi	r22, 0x1A	; 26
    dafe:	70 e0       	ldi	r23, 0x00	; 0
    db00:	e1 d7       	rcall	.+4034   	; 0xeac4 <__udivmodhi4>
    db02:	98 2e       	mov	r9, r24
			uint8_t card = stacks[i].cards[stacks[i].numcards-1];
    db04:	88 81       	ld	r24, Y
    db06:	28 e3       	ldi	r18, 0x38	; 56
    db08:	30 e0       	ldi	r19, 0x00	; 0
    db0a:	42 9e       	mul	r4, r18
    db0c:	f0 01       	movw	r30, r0
    db0e:	43 9e       	mul	r4, r19
    db10:	f0 0d       	add	r31, r0
    db12:	52 9e       	mul	r5, r18
    db14:	f0 0d       	add	r31, r0
    db16:	11 24       	eor	r1, r1
    db18:	ef 58       	subi	r30, 0x8F	; 143
    db1a:	f5 4f       	sbci	r31, 0xF5	; 245
    db1c:	e8 0f       	add	r30, r24
    db1e:	f1 1d       	adc	r31, r1
    db20:	f3 80       	ldd	r15, Z+3	; 0x03
			FloatCard(13+((i-STACK_HOME0)*CARD_TILES_H),0,dx,dy,card,1,0);//send them somewhere on the table
    db22:	c2 01       	movw	r24, r4
    db24:	02 97       	sbiw	r24, 0x02	; 2
    db26:	88 0f       	add	r24, r24
    db28:	99 1f       	adc	r25, r25
    db2a:	88 0f       	add	r24, r24
    db2c:	99 1f       	adc	r25, r25
    db2e:	83 5f       	subi	r24, 0xF3	; 243
    db30:	60 e0       	ldi	r22, 0x00	; 0
    db32:	4d 2d       	mov	r20, r13
    db34:	21 2f       	mov	r18, r17
    db36:	0f 2d       	mov	r16, r15
    db38:	ee 24       	eor	r14, r14
    db3a:	e3 94       	inc	r14
    db3c:	cc 24       	eor	r12, r12
    db3e:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
			FloatCard(dx,dy,ndx,ndy,card,1,0);//send them somewhere else..
    db42:	8d 2d       	mov	r24, r13
    db44:	61 2f       	mov	r22, r17
    db46:	48 2d       	mov	r20, r8
    db48:	29 2d       	mov	r18, r9
    db4a:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
			dx = GetPrngNumber(0)%SCREEN_TILES_H;
    db4e:	80 e0       	ldi	r24, 0x00	; 0
    db50:	90 e0       	ldi	r25, 0x00	; 0
    db52:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    db56:	6e e1       	ldi	r22, 0x1E	; 30
    db58:	70 e0       	ldi	r23, 0x00	; 0
    db5a:	b4 d7       	rcall	.+3944   	; 0xeac4 <__udivmodhi4>
    db5c:	a8 2e       	mov	r10, r24
			dy = GetPrngNumber(0)%SCREEN_TILES_V;
    db5e:	80 e0       	ldi	r24, 0x00	; 0
    db60:	90 e0       	ldi	r25, 0x00	; 0
    db62:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    db66:	6a e1       	ldi	r22, 0x1A	; 26
    db68:	70 e0       	ldi	r23, 0x00	; 0
    db6a:	ac d7       	rcall	.+3928   	; 0xeac4 <__udivmodhi4>
    db6c:	b8 2e       	mov	r11, r24
			FloatCard(ndx,ndy,dx,dy,card,1,0);//and somewhere else...
    db6e:	88 2d       	mov	r24, r8
    db70:	69 2d       	mov	r22, r9
    db72:	4a 2d       	mov	r20, r10
    db74:	2b 2d       	mov	r18, r11
    db76:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
			ndx = GetPrngNumber(0)%SCREEN_TILES_H;
    db7a:	80 e0       	ldi	r24, 0x00	; 0
    db7c:	90 e0       	ldi	r25, 0x00	; 0
    db7e:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    db82:	6e e1       	ldi	r22, 0x1E	; 30
    db84:	70 e0       	ldi	r23, 0x00	; 0
    db86:	9e d7       	rcall	.+3900   	; 0xeac4 <__udivmodhi4>
    db88:	d8 2e       	mov	r13, r24
			ndy = GetPrngNumber(0)%SCREEN_TILES_V;
    db8a:	80 e0       	ldi	r24, 0x00	; 0
    db8c:	90 e0       	ldi	r25, 0x00	; 0
    db8e:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    db92:	6a e1       	ldi	r22, 0x1A	; 26
    db94:	70 e0       	ldi	r23, 0x00	; 0
    db96:	96 d7       	rcall	.+3884   	; 0xeac4 <__udivmodhi4>
    db98:	18 2f       	mov	r17, r24
			FloatCard(dx,dy,ndx,ndy,card,1,0);//and somewhere else again...
    db9a:	8a 2d       	mov	r24, r10
    db9c:	6b 2d       	mov	r22, r11
    db9e:	4d 2d       	mov	r20, r13
    dba0:	21 2f       	mov	r18, r17
    dba2:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
			card &= ~FACEUP;
    dba6:	3f e7       	ldi	r19, 0x7F	; 127
    dba8:	f3 22       	and	r15, r19
			FloatCard(ndx,ndy,1,0,card,1,0);//send them to the deck
    dbaa:	8d 2d       	mov	r24, r13
    dbac:	61 2f       	mov	r22, r17
    dbae:	41 e0       	ldi	r20, 0x01	; 1
    dbb0:	20 e0       	ldi	r18, 0x00	; 0
    dbb2:	0f 2d       	mov	r16, r15
    dbb4:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
			stacks[STACK_DECK].numcards++;
    dbb8:	80 91 73 0a 	lds	r24, 0x0A73
    dbbc:	8f 5f       	subi	r24, 0xFF	; 255
    dbbe:	80 93 73 0a 	sts	0x0A73, r24
			if(stacks[STACK_DECK].numcards == 49)
    dbc2:	81 33       	cpi	r24, 0x31	; 49
    dbc4:	21 f4       	brne	.+8      	; 0xdbce <VictoryScreen+0x23c>
				FadeOut(12,false);
    dbc6:	8c e0       	ldi	r24, 0x0C	; 12
    dbc8:	60 e0       	ldi	r22, 0x00	; 0
    dbca:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
			if(!awaiting_key)
    dbce:	80 91 0f 0a 	lds	r24, 0x0A0F
    dbd2:	88 23       	and	r24, r24
    dbd4:	b1 f1       	breq	.+108    	; 0xdc42 <VictoryScreen+0x2b0>
				goto VICTORYSHORTCUT;

			stacks[STACK_DECK].cards[stacks[STACK_DECK].numcards-1] = card;
    dbd6:	e0 91 73 0a 	lds	r30, 0x0A73
    dbda:	f0 e0       	ldi	r31, 0x00	; 0
    dbdc:	ef 58       	subi	r30, 0x8F	; 143
    dbde:	f5 4f       	sbci	r31, 0xF5	; 245
    dbe0:	f3 82       	std	Z+3, r15	; 0x03
			stacks[i].numcards--;
    dbe2:	42 9c       	mul	r4, r2
    dbe4:	f0 01       	movw	r30, r0
    dbe6:	43 9c       	mul	r4, r3
    dbe8:	f0 0d       	add	r31, r0
    dbea:	52 9c       	mul	r5, r2
    dbec:	f0 0d       	add	r31, r0
    dbee:	11 24       	eor	r1, r1
    dbf0:	ee 0f       	add	r30, r30
    dbf2:	ff 1f       	adc	r31, r31
    dbf4:	ed 58       	subi	r30, 0x8D	; 141
    dbf6:	f5 4f       	sbci	r31, 0xF5	; 245
    dbf8:	80 81       	ld	r24, Z
    dbfa:	81 50       	subi	r24, 0x01	; 1
    dbfc:	80 83       	st	Z, r24
			DrawStack(STACK_DECK);
    dbfe:	80 e0       	ldi	r24, 0x00	; 0
    dc00:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
    dc04:	12 e0       	ldi	r17, 0x02	; 2
			for(uint8_t j=STACK_HOME0;j<=STACK_HOME3;j++)
				DrawStack(i);
    dc06:	87 2d       	mov	r24, r7
    dc08:	0e 94 6b 5e 	call	0xbcd6	; 0xbcd6 <DrawStack>
				goto VICTORYSHORTCUT;

			stacks[STACK_DECK].cards[stacks[STACK_DECK].numcards-1] = card;
			stacks[i].numcards--;
			DrawStack(STACK_DECK);
			for(uint8_t j=STACK_HOME0;j<=STACK_HOME3;j++)
    dc0c:	1f 5f       	subi	r17, 0xFF	; 255
    dc0e:	16 30       	cpi	r17, 0x06	; 6
    dc10:	d1 f7       	brne	.-12     	; 0xdc06 <VictoryScreen+0x274>
				DrawStack(i);
		if(++i > STACK_HOME3)
    dc12:	73 94       	inc	r7
    dc14:	85 e0       	ldi	r24, 0x05	; 5
    dc16:	87 15       	cp	r24, r7
    dc18:	08 f0       	brcs	.+2      	; 0xdc1c <VictoryScreen+0x28a>
    dc1a:	40 cf       	rjmp	.-384    	; 0xda9c <VictoryScreen+0x10a>
    dc1c:	b2 e0       	ldi	r27, 0x02	; 2
    dc1e:	7b 2e       	mov	r7, r27
    dc20:	3d cf       	rjmp	.-390    	; 0xda9c <VictoryScreen+0x10a>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    dc22:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    dc26:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    dc2a:	81 e0       	ldi	r24, 0x01	; 1
    dc2c:	90 e0       	ldi	r25, 0x00	; 0
    dc2e:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	}
//VICTORYBREAK:
//	FadeOut(5,false);
	while(DDRC){
		SWaitVsync(1);
		UpdateCursor(1);
    dc32:	81 e0       	ldi	r24, 0x01	; 1
    dc34:	b3 d8       	rcall	.-3738   	; 0xcd9c <UpdateCursor>
		DrawCursor();
    dc36:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
			i = STACK_HOME0;

	}
//VICTORYBREAK:
//	FadeOut(5,false);
	while(DDRC){
    dc3a:	87 b1       	in	r24, 0x07	; 7
    dc3c:	88 23       	and	r24, r24
    dc3e:	89 f7       	brne	.-30     	; 0xdc22 <VictoryScreen+0x290>
    dc40:	14 c0       	rjmp	.+40     	; 0xdc6a <VictoryScreen+0x2d8>
		DrawCursor();
	}
	FadeIn(3,false);
	return;
VICTORYSHORTCUT:
	FadeOut(4,false);
    dc42:	84 e0       	ldi	r24, 0x04	; 4
    dc44:	60 e0       	ldi	r22, 0x00	; 0
    dc46:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
    dc4a:	0c c0       	rjmp	.+24     	; 0xdc64 <VictoryScreen+0x2d2>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    dc4c:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    dc50:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    dc54:	81 e0       	ldi	r24, 0x01	; 1
    dc56:	90 e0       	ldi	r25, 0x00	; 0
    dc58:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	while(DDRC){
		SWaitVsync(1);
		UpdateCursor(1);
    dc5c:	81 e0       	ldi	r24, 0x01	; 1
    dc5e:	9e d8       	rcall	.-3780   	; 0xcd9c <UpdateCursor>
		DrawCursor();
    dc60:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
	}
	FadeIn(3,false);
	return;
VICTORYSHORTCUT:
	FadeOut(4,false);
	while(DDRC){
    dc64:	87 b1       	in	r24, 0x07	; 7
    dc66:	88 23       	and	r24, r24
    dc68:	89 f7       	brne	.-30     	; 0xdc4c <VictoryScreen+0x2ba>
		SWaitVsync(1);
		UpdateCursor(1);
		DrawCursor();
	}
	FadeIn(3,false);
    dc6a:	83 e0       	ldi	r24, 0x03	; 3
    dc6c:	60 e0       	ldi	r22, 0x00	; 0
    dc6e:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
	
}
    dc72:	df 91       	pop	r29
    dc74:	cf 91       	pop	r28
    dc76:	1f 91       	pop	r17
    dc78:	0f 91       	pop	r16
    dc7a:	ff 90       	pop	r15
    dc7c:	ef 90       	pop	r14
    dc7e:	df 90       	pop	r13
    dc80:	cf 90       	pop	r12
    dc82:	bf 90       	pop	r11
    dc84:	af 90       	pop	r10
    dc86:	9f 90       	pop	r9
    dc88:	8f 90       	pop	r8
    dc8a:	7f 90       	pop	r7
    dc8c:	5f 90       	pop	r5
    dc8e:	4f 90       	pop	r4
    dc90:	3f 90       	pop	r3
    dc92:	2f 90       	pop	r2
    dc94:	08 95       	ret

0000dc96 <Intro>:
		SWaitVsync(1);
	}
	return 0;
}

void Intro(){
    dc96:	a0 e0       	ldi	r26, 0x00	; 0
    dc98:	b0 e0       	ldi	r27, 0x00	; 0
    dc9a:	e0 e5       	ldi	r30, 0x50	; 80
    dc9c:	fe e6       	ldi	r31, 0x6E	; 110
    dc9e:	43 c7       	rjmp	.+3718   	; 0xeb26 <__prologue_saves__+0x14>
//HighScoreScreen();return;
//return;//////////////////////////////////

	ClearVram();
    dca0:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <ClearVram>
	cursorx = (SCREEN_TILES_H*TILE_WIDTH)-(CURSOR_TILES_H*8);
    dca4:	88 ed       	ldi	r24, 0xD8	; 216
    dca6:	80 93 ff 09 	sts	0x09FF, r24
    dcaa:	ff 24       	eor	r15, r15
	for(uint8_t i=0;i<14;i++){

		FloatCard(GetPrngNumber(0)%SCREEN_TILES_H,GetPrngNumber(0)%SCREEN_TILES_V,(SCREEN_TILES_H/2)-3,(SCREEN_TILES_V/2)-3,0,0,0);
    dcac:	80 e0       	ldi	r24, 0x00	; 0
    dcae:	90 e0       	ldi	r25, 0x00	; 0
    dcb0:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dcb4:	8c 01       	movw	r16, r24
    dcb6:	80 e0       	ldi	r24, 0x00	; 0
    dcb8:	90 e0       	ldi	r25, 0x00	; 0
    dcba:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dcbe:	9c 01       	movw	r18, r24
    dcc0:	c8 01       	movw	r24, r16
    dcc2:	6e e1       	ldi	r22, 0x1E	; 30
    dcc4:	70 e0       	ldi	r23, 0x00	; 0
    dcc6:	fe d6       	rcall	.+3580   	; 0xeac4 <__udivmodhi4>
    dcc8:	48 2f       	mov	r20, r24
    dcca:	c9 01       	movw	r24, r18
    dccc:	6a e1       	ldi	r22, 0x1A	; 26
    dcce:	70 e0       	ldi	r23, 0x00	; 0
    dcd0:	f9 d6       	rcall	.+3570   	; 0xeac4 <__udivmodhi4>
    dcd2:	68 2f       	mov	r22, r24
    dcd4:	84 2f       	mov	r24, r20
    dcd6:	4c e0       	ldi	r20, 0x0C	; 12
    dcd8:	2a e0       	ldi	r18, 0x0A	; 10
    dcda:	00 e0       	ldi	r16, 0x00	; 0
    dcdc:	ee 24       	eor	r14, r14
    dcde:	cc 24       	eor	r12, r12
    dce0:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
		DrawCard((SCREEN_TILES_H/2)-4,(SCREEN_TILES_V/2)-3,0);
    dce4:	8b e0       	ldi	r24, 0x0B	; 11
    dce6:	6a e0       	ldi	r22, 0x0A	; 10
    dce8:	40 e0       	ldi	r20, 0x00	; 0
    dcea:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
		FloatCard(GetPrngNumber(0)%SCREEN_TILES_H,GetPrngNumber(0)%SCREEN_TILES_V,(SCREEN_TILES_H/2)-0,(SCREEN_TILES_V/2)-3,0,0,0);
    dcee:	80 e0       	ldi	r24, 0x00	; 0
    dcf0:	90 e0       	ldi	r25, 0x00	; 0
    dcf2:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dcf6:	8c 01       	movw	r16, r24
    dcf8:	80 e0       	ldi	r24, 0x00	; 0
    dcfa:	90 e0       	ldi	r25, 0x00	; 0
    dcfc:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dd00:	9c 01       	movw	r18, r24
    dd02:	c8 01       	movw	r24, r16
    dd04:	6e e1       	ldi	r22, 0x1E	; 30
    dd06:	70 e0       	ldi	r23, 0x00	; 0
    dd08:	dd d6       	rcall	.+3514   	; 0xeac4 <__udivmodhi4>
    dd0a:	48 2f       	mov	r20, r24
    dd0c:	c9 01       	movw	r24, r18
    dd0e:	6a e1       	ldi	r22, 0x1A	; 26
    dd10:	70 e0       	ldi	r23, 0x00	; 0
    dd12:	d8 d6       	rcall	.+3504   	; 0xeac4 <__udivmodhi4>
    dd14:	68 2f       	mov	r22, r24
    dd16:	84 2f       	mov	r24, r20
    dd18:	4f e0       	ldi	r20, 0x0F	; 15
    dd1a:	2a e0       	ldi	r18, 0x0A	; 10
    dd1c:	00 e0       	ldi	r16, 0x00	; 0
    dd1e:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
		DrawCard((SCREEN_TILES_H/2),(SCREEN_TILES_V/2)-3,0);
    dd22:	8f e0       	ldi	r24, 0x0F	; 15
    dd24:	6a e0       	ldi	r22, 0x0A	; 10
    dd26:	40 e0       	ldi	r20, 0x00	; 0
    dd28:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
//HighScoreScreen();return;
//return;//////////////////////////////////

	ClearVram();
	cursorx = (SCREEN_TILES_H*TILE_WIDTH)-(CURSOR_TILES_H*8);
	for(uint8_t i=0;i<14;i++){
    dd2c:	f3 94       	inc	r15
    dd2e:	8e e0       	ldi	r24, 0x0E	; 14
    dd30:	f8 16       	cp	r15, r24
    dd32:	09 f0       	breq	.+2      	; 0xdd36 <Intro+0xa0>
    dd34:	bb cf       	rjmp	.-138    	; 0xdcac <Intro+0x16>
    dd36:	c0 e0       	ldi	r28, 0x00	; 0
    dd38:	d0 e0       	ldi	r29, 0x00	; 0
		DrawCard((SCREEN_TILES_H/2),(SCREEN_TILES_V/2)-3,0);
	}

	for(uint8_t i=0;i<14;i++){
		for(uint16_t i=SCREEN_TILES_H*((SCREEN_TILES_V/2)-5);i<SCREEN_TILES_H*((SCREEN_TILES_V/2)+5);i++)
			vram[i] = RAM_TILES_COUNT;
    dd3a:	90 e1       	ldi	r25, 0x10	; 16
    dd3c:	d9 2e       	mov	r13, r25
    dd3e:	58 c0       	rjmp	.+176    	; 0xddf0 <Intro+0x15a>
    dd40:	d1 92       	st	Z+, r13
		FloatCard(GetPrngNumber(0)%SCREEN_TILES_H,GetPrngNumber(0)%SCREEN_TILES_V,(SCREEN_TILES_H/2)-0,(SCREEN_TILES_V/2)-3,0,0,0);
		DrawCard((SCREEN_TILES_H/2),(SCREEN_TILES_V/2)-3,0);
	}

	for(uint8_t i=0;i<14;i++){
		for(uint16_t i=SCREEN_TILES_H*((SCREEN_TILES_V/2)-5);i<SCREEN_TILES_H*((SCREEN_TILES_V/2)+5);i++)
    dd42:	83 e0       	ldi	r24, 0x03	; 3
    dd44:	ec 33       	cpi	r30, 0x3C	; 60
    dd46:	f8 07       	cpc	r31, r24
    dd48:	d9 f7       	brne	.-10     	; 0xdd40 <Intro+0xaa>
    dd4a:	0c 2f       	mov	r16, r28
			vram[i] = RAM_TILES_COUNT;

		if(i < 12)
    dd4c:	cc 30       	cpi	r28, 0x0C	; 12
    dd4e:	28 f4       	brcc	.+10     	; 0xdd5a <Intro+0xc4>
			DrawCard((SCREEN_TILES_H/2)-4,(SCREEN_TILES_V/2)-3,0);
    dd50:	8b e0       	ldi	r24, 0x0B	; 11
    dd52:	6a e0       	ldi	r22, 0x0A	; 10
    dd54:	40 e0       	ldi	r20, 0x00	; 0
    dd56:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
		if(i < 13)
    dd5a:	0d 30       	cpi	r16, 0x0D	; 13
    dd5c:	39 f0       	breq	.+14     	; 0xdd6c <Intro+0xd6>
			DrawCard((SCREEN_TILES_H/2),(SCREEN_TILES_V/2)-3,0);
    dd5e:	8f e0       	ldi	r24, 0x0F	; 15
    dd60:	6a e0       	ldi	r22, 0x0A	; 10
    dd62:	40 e0       	ldi	r20, 0x00	; 0
    dd64:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
		if(i > 11)
    dd68:	0c 30       	cpi	r16, 0x0C	; 12
    dd6a:	90 f0       	brcs	.+36     	; 0xdd90 <Intro+0xfa>
			SPrint((SCREEN_TILES_H/2)-3,(SCREEN_TILES_V/2)-1,PSTR("UZE"));
    dd6c:	8c e0       	ldi	r24, 0x0C	; 12
    dd6e:	90 e0       	ldi	r25, 0x00	; 0
    dd70:	6c e0       	ldi	r22, 0x0C	; 12
    dd72:	70 e0       	ldi	r23, 0x00	; 0
    dd74:	4d e6       	ldi	r20, 0x6D	; 109
    dd76:	55 e8       	ldi	r21, 0x85	; 133
    dd78:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
		if(i > 12)
    dd7c:	0d 30       	cpi	r16, 0x0D	; 13
    dd7e:	41 f4       	brne	.+16     	; 0xdd90 <Intro+0xfa>
			SPrint((SCREEN_TILES_H/2),(SCREEN_TILES_V/2)-1,PSTR("BOX"));
    dd80:	8f e0       	ldi	r24, 0x0F	; 15
    dd82:	90 e0       	ldi	r25, 0x00	; 0
    dd84:	6c e0       	ldi	r22, 0x0C	; 12
    dd86:	70 e0       	ldi	r23, 0x00	; 0
    dd88:	49 e6       	ldi	r20, 0x69	; 105
    dd8a:	55 e8       	ldi	r21, 0x85	; 133
    dd8c:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
		FloatCard(((SCREEN_TILES_H/2)-4)+(i&1?4:0),(SCREEN_TILES_V/2)-1,GetPrngNumber(0)%SCREEN_TILES_H,GetPrngNumber(0)%SCREEN_TILES_V,(GetPrngNumber(0)%MAX_CARDS)|FACEUP,0,0);	
    dd90:	c0 fd       	sbrc	r28, 0
    dd92:	03 c0       	rjmp	.+6      	; 0xdd9a <Intro+0x104>
    dd94:	8b e0       	ldi	r24, 0x0B	; 11
    dd96:	c8 2e       	mov	r12, r24
    dd98:	02 c0       	rjmp	.+4      	; 0xdd9e <Intro+0x108>
    dd9a:	0f e0       	ldi	r16, 0x0F	; 15
    dd9c:	c0 2e       	mov	r12, r16
    dd9e:	80 e0       	ldi	r24, 0x00	; 0
    dda0:	90 e0       	ldi	r25, 0x00	; 0
    dda2:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    dda6:	8c 01       	movw	r16, r24
    dda8:	80 e0       	ldi	r24, 0x00	; 0
    ddaa:	90 e0       	ldi	r25, 0x00	; 0
    ddac:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    ddb0:	7c 01       	movw	r14, r24
    ddb2:	80 e0       	ldi	r24, 0x00	; 0
    ddb4:	90 e0       	ldi	r25, 0x00	; 0
    ddb6:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    ddba:	fc 01       	movw	r30, r24
    ddbc:	c8 01       	movw	r24, r16
    ddbe:	6e e1       	ldi	r22, 0x1E	; 30
    ddc0:	70 e0       	ldi	r23, 0x00	; 0
    ddc2:	80 d6       	rcall	.+3328   	; 0xeac4 <__udivmodhi4>
    ddc4:	48 2f       	mov	r20, r24
    ddc6:	c7 01       	movw	r24, r14
    ddc8:	6a e1       	ldi	r22, 0x1A	; 26
    ddca:	70 e0       	ldi	r23, 0x00	; 0
    ddcc:	7b d6       	rcall	.+3318   	; 0xeac4 <__udivmodhi4>
    ddce:	28 2f       	mov	r18, r24
    ddd0:	cf 01       	movw	r24, r30
    ddd2:	64 e3       	ldi	r22, 0x34	; 52
    ddd4:	70 e0       	ldi	r23, 0x00	; 0
    ddd6:	76 d6       	rcall	.+3308   	; 0xeac4 <__udivmodhi4>
    ddd8:	08 2f       	mov	r16, r24
    ddda:	00 68       	ori	r16, 0x80	; 128
    dddc:	8c 2d       	mov	r24, r12
    ddde:	6c e0       	ldi	r22, 0x0C	; 12
    dde0:	ee 24       	eor	r14, r14
    dde2:	cc 24       	eor	r12, r12
    dde4:	0e 94 de 64 	call	0xc9bc	; 0xc9bc <FloatCard>
    dde8:	21 96       	adiw	r28, 0x01	; 1
		DrawCard((SCREEN_TILES_H/2)-4,(SCREEN_TILES_V/2)-3,0);
		FloatCard(GetPrngNumber(0)%SCREEN_TILES_H,GetPrngNumber(0)%SCREEN_TILES_V,(SCREEN_TILES_H/2)-0,(SCREEN_TILES_V/2)-3,0,0,0);
		DrawCard((SCREEN_TILES_H/2),(SCREEN_TILES_V/2)-3,0);
	}

	for(uint8_t i=0;i<14;i++){
    ddea:	ce 30       	cpi	r28, 0x0E	; 14
    ddec:	d1 05       	cpc	r29, r1
    ddee:	19 f0       	breq	.+6      	; 0xddf6 <Intro+0x160>
    ddf0:	e0 e1       	ldi	r30, 0x10	; 16
    ddf2:	f2 e0       	ldi	r31, 0x02	; 2
    ddf4:	a5 cf       	rjmp	.-182    	; 0xdd40 <Intro+0xaa>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    ddf6:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    ddfa:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    ddfe:	81 e0       	ldi	r24, 0x01	; 1
    de00:	90 e0       	ldi	r25, 0x00	; 0
    de02:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
    de06:	90 91 07 0a 	lds	r25, 0x0A07
    de0a:	80 91 ff 09 	lds	r24, 0x09FF
	do{
		SWaitVsync(1);

		did_move = 0;
		for(uint8_t i=0;i<2;i++){
			if(cursorx > ((SCREEN_TILES_H/2)-1)*8){
    de0e:	81 37       	cpi	r24, 0x71	; 113
    de10:	10 f4       	brcc	.+4      	; 0xde16 <Intro+0x180>
    de12:	00 e0       	ldi	r16, 0x00	; 0
    de14:	02 c0       	rjmp	.+4      	; 0xde1a <Intro+0x184>
				cursorx--;
    de16:	81 50       	subi	r24, 0x01	; 1
    de18:	01 e0       	ldi	r16, 0x01	; 1
				did_move = 1;
			}
			if(cursorx < ((SCREEN_TILES_H/2)-1)*8){
    de1a:	80 37       	cpi	r24, 0x70	; 112
    de1c:	10 f4       	brcc	.+4      	; 0xde22 <Intro+0x18c>
				cursorx++;
    de1e:	8f 5f       	subi	r24, 0xFF	; 255
    de20:	01 e0       	ldi	r16, 0x01	; 1
				did_move = 1;
			}
			if(cursory < ((SCREEN_TILES_V/2)*8)-4){
    de22:	94 36       	cpi	r25, 0x64	; 100
    de24:	10 f4       	brcc	.+4      	; 0xde2a <Intro+0x194>
				cursory++;
    de26:	9f 5f       	subi	r25, 0xFF	; 255
    de28:	01 e0       	ldi	r16, 0x01	; 1
				did_move = 1;
			}
			if(cursory > ((SCREEN_TILES_V/2)*8)-4){
    de2a:	95 36       	cpi	r25, 0x65	; 101
    de2c:	10 f0       	brcs	.+4      	; 0xde32 <Intro+0x19c>
				cursory--;
    de2e:	91 50       	subi	r25, 0x01	; 1
    de30:	01 e0       	ldi	r16, 0x01	; 1
	do{
		SWaitVsync(1);

		did_move = 0;
		for(uint8_t i=0;i<2;i++){
			if(cursorx > ((SCREEN_TILES_H/2)-1)*8){
    de32:	81 37       	cpi	r24, 0x71	; 113
    de34:	10 f0       	brcs	.+4      	; 0xde3a <Intro+0x1a4>
				cursorx--;
    de36:	81 50       	subi	r24, 0x01	; 1
    de38:	01 e0       	ldi	r16, 0x01	; 1
				did_move = 1;
			}
			if(cursorx < ((SCREEN_TILES_H/2)-1)*8){
    de3a:	80 37       	cpi	r24, 0x70	; 112
    de3c:	10 f4       	brcc	.+4      	; 0xde42 <Intro+0x1ac>
				cursorx++;
    de3e:	8f 5f       	subi	r24, 0xFF	; 255
    de40:	01 e0       	ldi	r16, 0x01	; 1
				did_move = 1;
			}
			if(cursory < ((SCREEN_TILES_V/2)*8)-4){
    de42:	94 36       	cpi	r25, 0x64	; 100
    de44:	10 f4       	brcc	.+4      	; 0xde4a <Intro+0x1b4>
				cursory++;
    de46:	9f 5f       	subi	r25, 0xFF	; 255
    de48:	01 e0       	ldi	r16, 0x01	; 1
				did_move = 1;
			}
			if(cursory > ((SCREEN_TILES_V/2)*8)-4){
    de4a:	95 36       	cpi	r25, 0x65	; 101
    de4c:	10 f0       	brcs	.+4      	; 0xde52 <Intro+0x1bc>
				cursory--;
    de4e:	91 50       	subi	r25, 0x01	; 1
    de50:	01 e0       	ldi	r16, 0x01	; 1
    de52:	90 93 07 0a 	sts	0x0A07, r25
    de56:	80 93 ff 09 	sts	0x09FF, r24
				did_move = 1;
			}	
		}
		DrawCursor();
    de5a:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
	}while(did_move);
    de5e:	00 23       	and	r16, r16
    de60:	51 f6       	brne	.-108    	; 0xddf6 <Intro+0x160>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    de62:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    de66:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    de6a:	8c e0       	ldi	r24, 0x0C	; 12
    de6c:	90 e0       	ldi	r25, 0x00	; 0
    de6e:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	SWaitVsync(12);
	cursorframe = 1;
    de72:	81 e0       	ldi	r24, 0x01	; 1
    de74:	80 93 08 0a 	sts	0x0A08, r24
	DrawCursor();
    de78:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    de7c:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    de80:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    de84:	88 e0       	ldi	r24, 0x08	; 8
    de86:	90 e0       	ldi	r25, 0x00	; 0
    de88:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	SWaitVsync(8);
	FadeOut(2,true);
    de8c:	82 e0       	ldi	r24, 0x02	; 2
    de8e:	61 e0       	ldi	r22, 0x01	; 1
    de90:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
	FadeIn(2,false);
    de94:	82 e0       	ldi	r24, 0x02	; 2
    de96:	60 e0       	ldi	r22, 0x00	; 0
    de98:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
//	cursorx = 200;
//	cursory = 178;
}
    de9c:	cd b7       	in	r28, 0x3d	; 61
    de9e:	de b7       	in	r29, 0x3e	; 62
    dea0:	e8 e0       	ldi	r30, 0x08	; 8
    dea2:	5d c6       	rjmp	.+3258   	; 0xeb5e <__epilogue_restores__+0x14>

0000dea4 <SWaitVsyncWithCancel>:
uint8_t SWaitVsyncWithCancel(uint8_t frames){
    dea4:	0f 93       	push	r16
    dea6:	1f 93       	push	r17
    dea8:	08 2f       	mov	r16, r24
    deaa:	10 e0       	ldi	r17, 0x00	; 0
    deac:	1a c0       	rjmp	.+52     	; 0xdee2 <SWaitVsyncWithCancel+0x3e>
	for(uint8_t i=0;i<frames;i++){
		if((padstate & 0x7FFF) && (padstate > oldpadstate))//skip MSBit which is always set if mouse plugged
    deae:	20 91 fc 09 	lds	r18, 0x09FC
    deb2:	30 91 fd 09 	lds	r19, 0x09FD
    deb6:	c9 01       	movw	r24, r18
    deb8:	9f 77       	andi	r25, 0x7F	; 127
    deba:	89 2b       	or	r24, r25
    debc:	49 f0       	breq	.+18     	; 0xded0 <SWaitVsyncWithCancel+0x2c>
    debe:	80 91 fa 09 	lds	r24, 0x09FA
    dec2:	90 91 fb 09 	lds	r25, 0x09FB
    dec6:	82 17       	cp	r24, r18
    dec8:	93 07       	cpc	r25, r19
    deca:	10 f4       	brcc	.+4      	; 0xded0 <SWaitVsyncWithCancel+0x2c>
    decc:	81 e0       	ldi	r24, 0x01	; 1
    dece:	0c c0       	rjmp	.+24     	; 0xdee8 <SWaitVsyncWithCancel+0x44>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    ded0:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    ded4:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    ded8:	81 e0       	ldi	r24, 0x01	; 1
    deda:	90 e0       	ldi	r25, 0x00	; 0
    dedc:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
uint8_t SWaitVsyncWithCancel(uint8_t frames){
	for(uint8_t i=0;i<frames;i++){
    dee0:	1f 5f       	subi	r17, 0xFF	; 255
    dee2:	10 17       	cp	r17, r16
    dee4:	20 f3       	brcs	.-56     	; 0xdeae <SWaitVsyncWithCancel+0xa>
    dee6:	80 e0       	ldi	r24, 0x00	; 0
		if((padstate & 0x7FFF) && (padstate > oldpadstate))//skip MSBit which is always set if mouse plugged
			return 1;
		SWaitVsync(1);
	}
	return 0;
}
    dee8:	1f 91       	pop	r17
    deea:	0f 91       	pop	r16
    deec:	08 95       	ret

0000deee <HighScoreScreen>:
	}
	for(uint8_t x=0;x<24;x++)
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+x] = RAM_TILES_COUNT;
}

void HighScoreScreen(){
    deee:	ec e2       	ldi	r30, 0x2C	; 44
    def0:	f4 e0       	ldi	r31, 0x04	; 4
uint8_t CursorIntersects(uint8_t x, uint8_t y, uint8_t w, uint8_t h);
void MoveAllToDeck();

void HideSprites(){
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    def2:	80 ef       	ldi	r24, 0xF0	; 240
    def4:	80 83       	st	Z, r24
    def6:	34 96       	adiw	r30, 0x04	; 4
uint8_t EEPromScore(uint8_t direction);
uint8_t CursorIntersects(uint8_t x, uint8_t y, uint8_t w, uint8_t h);
void MoveAllToDeck();

void HideSprites(){
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    def8:	94 e0       	ldi	r25, 0x04	; 4
    defa:	e0 35       	cpi	r30, 0x50	; 80
    defc:	f9 07       	cpc	r31, r25
    defe:	d1 f7       	brne	.-12     	; 0xdef4 <HighScoreScreen+0x6>
    df00:	e0 e2       	ldi	r30, 0x20	; 32
    df02:	f1 e0       	ldi	r31, 0x01	; 1
//return;
//		FadeOut(3,true);
		HideSprites();

		for(uint16_t i=0;i<VRAM_SIZE;i++)
			vram[i] = RAM_TILES_COUNT;
    df04:	80 e1       	ldi	r24, 0x10	; 16
    df06:	81 93       	st	Z+, r24
void HighScoreScreen(){
//return;
//		FadeOut(3,true);
		HideSprites();

		for(uint16_t i=0;i<VRAM_SIZE;i++)
    df08:	94 e0       	ldi	r25, 0x04	; 4
    df0a:	ec 32       	cpi	r30, 0x2C	; 44
    df0c:	f9 07       	cpc	r31, r25
    df0e:	d9 f7       	brne	.-10     	; 0xdf06 <HighScoreScreen+0x18>
			vram[i] = RAM_TILES_COUNT;
		for(uint8_t y=0;y<6;y++)
			for(uint8_t x=0;x<24;x++)
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+95+(9*old_card_set);//RAM_TILES_COUNT+113;//make the top highlight color
    df10:	80 91 04 0a 	lds	r24, 0x0A04
    df14:	29 e0       	ldi	r18, 0x09	; 9
    df16:	82 9f       	mul	r24, r18
    df18:	c0 01       	movw	r24, r0
    df1a:	11 24       	eor	r1, r1
    df1c:	81 59       	subi	r24, 0x91	; 145
    df1e:	20 e0       	ldi	r18, 0x00	; 0
    df20:	30 e0       	ldi	r19, 0x00	; 0
    df22:	0c c0       	rjmp	.+24     	; 0xdf3c <HighScoreScreen+0x4e>
    df24:	81 93       	st	Z+, r24
		HideSprites();

		for(uint16_t i=0;i<VRAM_SIZE;i++)
			vram[i] = RAM_TILES_COUNT;
		for(uint8_t y=0;y<6;y++)
			for(uint8_t x=0;x<24;x++)
    df26:	9f 5f       	subi	r25, 0xFF	; 255
    df28:	98 31       	cpi	r25, 0x18	; 24
    df2a:	e1 f7       	brne	.-8      	; 0xdf24 <HighScoreScreen+0x36>
    df2c:	22 5e       	subi	r18, 0xE2	; 226
    df2e:	3f 4f       	sbci	r19, 0xFF	; 255
//		FadeOut(3,true);
		HideSprites();

		for(uint16_t i=0;i<VRAM_SIZE;i++)
			vram[i] = RAM_TILES_COUNT;
		for(uint8_t y=0;y<6;y++)
    df30:	24 3b       	cpi	r18, 0xB4	; 180
    df32:	31 05       	cpc	r19, r1
    df34:	19 f4       	brne	.+6      	; 0xdf3c <HighScoreScreen+0x4e>
    df36:	2c ec       	ldi	r18, 0xCC	; 204
    df38:	30 e0       	ldi	r19, 0x00	; 0
    df3a:	0f c0       	rjmp	.+30     	; 0xdf5a <HighScoreScreen+0x6c>
    df3c:	f9 01       	movw	r30, r18
    df3e:	e0 5e       	subi	r30, 0xE0	; 224
    df40:	fe 4f       	sbci	r31, 0xFE	; 254
    df42:	90 e0       	ldi	r25, 0x00	; 0
    df44:	ef cf       	rjmp	.-34     	; 0xdf24 <HighScoreScreen+0x36>
			for(uint8_t x=0;x<24;x++)
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+95+(9*old_card_set);//RAM_TILES_COUNT+113;//make the top highlight color
		for(uint8_t y=6;y<SCREEN_TILES_V;y++)
			for(uint8_t x=24;x<SCREEN_TILES_H;x++)
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+95+(9*old_card_set);//RAM_TILES_COUNT+113;//make the bottom highlight color
    df46:	81 93       	st	Z+, r24
			vram[i] = RAM_TILES_COUNT;
		for(uint8_t y=0;y<6;y++)
			for(uint8_t x=0;x<24;x++)
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+95+(9*old_card_set);//RAM_TILES_COUNT+113;//make the top highlight color
		for(uint8_t y=6;y<SCREEN_TILES_V;y++)
			for(uint8_t x=24;x<SCREEN_TILES_H;x++)
    df48:	9f 5f       	subi	r25, 0xFF	; 255
    df4a:	9e 31       	cpi	r25, 0x1E	; 30
    df4c:	e1 f7       	brne	.-8      	; 0xdf46 <HighScoreScreen+0x58>
    df4e:	22 5e       	subi	r18, 0xE2	; 226
    df50:	3f 4f       	sbci	r19, 0xFF	; 255
		for(uint16_t i=0;i<VRAM_SIZE;i++)
			vram[i] = RAM_TILES_COUNT;
		for(uint8_t y=0;y<6;y++)
			for(uint8_t x=0;x<24;x++)
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+95+(9*old_card_set);//RAM_TILES_COUNT+113;//make the top highlight color
		for(uint8_t y=6;y<SCREEN_TILES_V;y++)
    df52:	93 e0       	ldi	r25, 0x03	; 3
    df54:	24 32       	cpi	r18, 0x24	; 36
    df56:	39 07       	cpc	r19, r25
    df58:	29 f0       	breq	.+10     	; 0xdf64 <HighScoreScreen+0x76>
    df5a:	f9 01       	movw	r30, r18
    df5c:	e0 5e       	subi	r30, 0xE0	; 224
    df5e:	fe 4f       	sbci	r31, 0xFE	; 254
    df60:	98 e1       	ldi	r25, 0x18	; 24
    df62:	f1 cf       	rjmp	.-30     	; 0xdf46 <HighScoreScreen+0x58>
			for(uint8_t x=24;x<SCREEN_TILES_H;x++)
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+95+(9*old_card_set);//RAM_TILES_COUNT+113;//make the bottom highlight color

	
		SPrint(8,6,PSTR("HIGH SCORES"));
    df64:	88 e0       	ldi	r24, 0x08	; 8
    df66:	90 e0       	ldi	r25, 0x00	; 0
    df68:	66 e0       	ldi	r22, 0x06	; 6
    df6a:	70 e0       	ldi	r23, 0x00	; 0
    df6c:	49 e7       	ldi	r20, 0x79	; 121
    df6e:	54 e8       	ldi	r21, 0x84	; 132
    df70:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
		FadeIn(3,true);
    df74:	83 e0       	ldi	r24, 0x03	; 3
    df76:	61 e0       	ldi	r22, 0x01	; 1
    df78:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    df7c:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    df80:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    df84:	84 e0       	ldi	r24, 0x04	; 4
    df86:	90 e0       	ldi	r25, 0x00	; 0
    df88:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
		SWaitVsync(4);

		if(ScrollScoreDataUp(0,3,4))
    df8c:	80 e0       	ldi	r24, 0x00	; 0
    df8e:	63 e0       	ldi	r22, 0x03	; 3
    df90:	44 e0       	ldi	r20, 0x04	; 4
    df92:	c8 db       	rcall	.-2160   	; 0xd724 <ScrollScoreDataUp>
    df94:	88 23       	and	r24, r24
    df96:	b9 f4       	brne	.+46     	; 0xdfc6 <HighScoreScreen+0xd8>
			goto HIGHSCOREDONE;
		if(SWaitVsyncWithCancel(180))
    df98:	84 eb       	ldi	r24, 0xB4	; 180
    df9a:	84 df       	rcall	.-248    	; 0xdea4 <SWaitVsyncWithCancel>
    df9c:	88 23       	and	r24, r24
    df9e:	99 f4       	brne	.+38     	; 0xdfc6 <HighScoreScreen+0xd8>

//uzenet_got_records = 1;
//for(uint8_t i=30;i<80;i++){
//eeprom_data[i] = pgm_read_byte(&UzenetError[i-30]);
//}
		ScrollScoreDataDown();
    dfa0:	97 db       	rcall	.-2258   	; 0xd6d0 <ScrollScoreDataDown>
		if(uzenet_got_records){
    dfa2:	80 91 ef 0d 	lds	r24, 0x0DEF
    dfa6:	88 23       	and	r24, r24
    dfa8:	71 f0       	breq	.+28     	; 0xdfc6 <HighScoreScreen+0xd8>
//			FadeOut(1,true);
			SPrint(7,6,PSTR("WORLD RECORDS"));
    dfaa:	87 e0       	ldi	r24, 0x07	; 7
    dfac:	90 e0       	ldi	r25, 0x00	; 0
    dfae:	66 e0       	ldi	r22, 0x06	; 6
    dfb0:	70 e0       	ldi	r23, 0x00	; 0
    dfb2:	4b e6       	ldi	r20, 0x6B	; 107
    dfb4:	54 e8       	ldi	r21, 0x84	; 132
    dfb6:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
//			FadeIn(1,true);
			ScrollScoreDataUp(3,5,2);
    dfba:	83 e0       	ldi	r24, 0x03	; 3
    dfbc:	65 e0       	ldi	r22, 0x05	; 5
    dfbe:	42 e0       	ldi	r20, 0x02	; 2
    dfc0:	b1 db       	rcall	.-2206   	; 0xd724 <ScrollScoreDataUp>
			SWaitVsyncWithCancel(180);
    dfc2:	84 eb       	ldi	r24, 0xB4	; 180
    dfc4:	6f df       	rcall	.-290    	; 0xdea4 <SWaitVsyncWithCancel>
		}

HIGHSCOREDONE:
		FadeOut(3,true);
    dfc6:	83 e0       	ldi	r24, 0x03	; 3
    dfc8:	61 e0       	ldi	r22, 0x01	; 1
    dfca:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
		FadeIn(1,false);
    dfce:	81 e0       	ldi	r24, 0x01	; 1
    dfd0:	60 e0       	ldi	r22, 0x00	; 0
    dfd2:	0c 94 22 52 	jmp	0xa444	; 0xa444 <FadeIn>

0000dfd6 <SPrintNum>:
			break;
		}
	}
}

void SPrintNum(int x,int y, uint16_t val,bool zeropad){
    dfd6:	a0 e0       	ldi	r26, 0x00	; 0
    dfd8:	b0 e0       	ldi	r27, 0x00	; 0
    dfda:	e0 ef       	ldi	r30, 0xF0	; 240
    dfdc:	ff e6       	ldi	r31, 0x6F	; 111
    dfde:	a4 c5       	rjmp	.+2888   	; 0xeb28 <__prologue_saves__+0x16>
    dfe0:	8c 01       	movw	r16, r24
    dfe2:	e6 2e       	mov	r14, r22
    dfe4:	ea 01       	movw	r28, r20
    dfe6:	d2 2e       	mov	r13, r18
    dfe8:	ff 24       	eor	r15, r15
	unsigned char c,i;

	for(i=0;i<4;i++){
		c=val%10;
		if(val>0 || i==0){
    dfea:	20 97       	sbiw	r28, 0x00	; 0
    dfec:	11 f4       	brne	.+4      	; 0xdff2 <SPrintNum+0x1c>
    dfee:	ff 20       	and	r15, r15
    dff0:	81 f4       	brne	.+32     	; 0xe012 <SPrintNum+0x3c>
			SetTile(x--,y,c+NUM_START_TILE);
    dff2:	20 2f       	mov	r18, r16
    dff4:	01 50       	subi	r16, 0x01	; 1
    dff6:	10 40       	sbci	r17, 0x00	; 0
    dff8:	ce 01       	movw	r24, r28
    dffa:	6a e0       	ldi	r22, 0x0A	; 10
    dffc:	70 e0       	ldi	r23, 0x00	; 0
    dffe:	62 d5       	rcall	.+2756   	; 0xeac4 <__udivmodhi4>
    e000:	48 2f       	mov	r20, r24
    e002:	50 e0       	ldi	r21, 0x00	; 0
    e004:	46 56       	subi	r20, 0x66	; 102
    e006:	5f 4f       	sbci	r21, 0xFF	; 255
    e008:	82 2f       	mov	r24, r18
    e00a:	6e 2d       	mov	r22, r14
    e00c:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
    e010:	09 c0       	rjmp	.+18     	; 0xe024 <SPrintNum+0x4e>
		}else{
			if(zeropad){
    e012:	dd 20       	and	r13, r13
    e014:	39 f0       	breq	.+14     	; 0xe024 <SPrintNum+0x4e>
				SetFont(x--,y,NUM_START_TILE);
    e016:	80 2f       	mov	r24, r16
    e018:	01 50       	subi	r16, 0x01	; 1
    e01a:	10 40       	sbci	r17, 0x00	; 0
    e01c:	6e 2d       	mov	r22, r14
    e01e:	4a e9       	ldi	r20, 0x9A	; 154
    e020:	0e 94 f6 46 	call	0x8dec	; 0x8dec <SetFont>
}

void SPrintNum(int x,int y, uint16_t val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<4;i++){
    e024:	f3 94       	inc	r15
    e026:	84 e0       	ldi	r24, 0x04	; 4
    e028:	f8 16       	cp	r15, r24
    e02a:	31 f0       	breq	.+12     	; 0xe038 <SPrintNum+0x62>
				SetFont(x--,y,NUM_START_TILE);
			}else{
				//SetFont(x--,y,0);
			}
		}
		val=val/10;
    e02c:	ce 01       	movw	r24, r28
    e02e:	6a e0       	ldi	r22, 0x0A	; 10
    e030:	70 e0       	ldi	r23, 0x00	; 0
    e032:	48 d5       	rcall	.+2704   	; 0xeac4 <__udivmodhi4>
    e034:	eb 01       	movw	r28, r22
    e036:	d9 cf       	rjmp	.-78     	; 0xdfea <SPrintNum+0x14>
	}
		
}
    e038:	cd b7       	in	r28, 0x3d	; 61
    e03a:	de b7       	in	r29, 0x3e	; 62
    e03c:	e7 e0       	ldi	r30, 0x07	; 7
    e03e:	90 c5       	rjmp	.+2848   	; 0xeb60 <__epilogue_restores__+0x16>

0000e040 <DrawTable>:
	SPrintNumV(12,1,game_score);
	SetTile(12,0,CHECK_MARK_TILE);//menu check mark
}

void DrawTable(){
	DrawCard(1,0,CARD_FACEDOWN);//deck
    e040:	81 e0       	ldi	r24, 0x01	; 1
    e042:	60 e0       	ldi	r22, 0x00	; 0
    e044:	48 e3       	ldi	r20, 0x38	; 56
    e046:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
	DrawCard(6,0,MAX_CARDS);//draw pile
    e04a:	86 e0       	ldi	r24, 0x06	; 6
    e04c:	60 e0       	ldi	r22, 0x00	; 0
    e04e:	44 e3       	ldi	r20, 0x34	; 52
    e050:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
	DrawCard(13,0,MAX_CARDS);//home 0
    e054:	8d e0       	ldi	r24, 0x0D	; 13
    e056:	60 e0       	ldi	r22, 0x00	; 0
    e058:	44 e3       	ldi	r20, 0x34	; 52
    e05a:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
	DrawCard(17,0,MAX_CARDS);//home 1
    e05e:	81 e1       	ldi	r24, 0x11	; 17
    e060:	60 e0       	ldi	r22, 0x00	; 0
    e062:	44 e3       	ldi	r20, 0x34	; 52
    e064:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
	DrawCard(21,0,MAX_CARDS);//home 2
    e068:	85 e1       	ldi	r24, 0x15	; 21
    e06a:	60 e0       	ldi	r22, 0x00	; 0
    e06c:	44 e3       	ldi	r20, 0x34	; 52
    e06e:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
	DrawCard(25,0,MAX_CARDS);//home 3
    e072:	89 e1       	ldi	r24, 0x19	; 25
    e074:	60 e0       	ldi	r22, 0x00	; 0
    e076:	44 e3       	ldi	r20, 0x34	; 52
    e078:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
	DrawCard(1,6,MAX_CARDS);//base 0
    e07c:	81 e0       	ldi	r24, 0x01	; 1
    e07e:	66 e0       	ldi	r22, 0x06	; 6
    e080:	44 e3       	ldi	r20, 0x34	; 52
    e082:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
//	for(uint8_t i=STACK_BASE0;i<=STACK_BASE6;i++)
//		DrawCard(stacks[i].x,stacks[i].y,MAX_CARDS);
	SetTile(12,0,CHECK_MARK_TILE);//menu check mark
    e086:	8c e0       	ldi	r24, 0x0C	; 12
    e088:	60 e0       	ldi	r22, 0x00	; 0
    e08a:	4e eb       	ldi	r20, 0xBE	; 190
    e08c:	50 e0       	ldi	r21, 0x00	; 0
    e08e:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
	SPrintNum(12,1,0,0);
    e092:	8c e0       	ldi	r24, 0x0C	; 12
    e094:	90 e0       	ldi	r25, 0x00	; 0
    e096:	61 e0       	ldi	r22, 0x01	; 1
    e098:	70 e0       	ldi	r23, 0x00	; 0
    e09a:	40 e0       	ldi	r20, 0x00	; 0
    e09c:	50 e0       	ldi	r21, 0x00	; 0
    e09e:	20 e0       	ldi	r18, 0x00	; 0
}
    e0a0:	9a cf       	rjmp	.-204    	; 0xdfd6 <SPrintNum>

0000e0a2 <HighScoreEntry>:
	
}


const char default_highscore_name[] PROGMEM = "UNKNOWN ";
void HighScoreEntry(){
    e0a2:	a2 e0       	ldi	r26, 0x02	; 2
    e0a4:	b0 e0       	ldi	r27, 0x00	; 0
    e0a6:	e6 e5       	ldi	r30, 0x56	; 86
    e0a8:	f0 e7       	ldi	r31, 0x70	; 112
    e0aa:	3d c5       	rjmp	.+2682   	; 0xeb26 <__prologue_saves__+0x14>
	if(game_state & CHEAT_ACTIVE)
    e0ac:	80 91 06 0a 	lds	r24, 0x0A06
    e0b0:	86 fd       	sbrc	r24, 6
    e0b2:	9e c1       	rjmp	.+828    	; 0xe3f0 <HighScoreEntry+0x34e>
	char_last = 0;

	for(uint8_t i=0;i<3;i++){
		eeprom_score = eeprom_data[8+(i*10)]<<8UL;
		eeprom_score |= eeprom_data[9+(i*10)];
		if(game_score > eeprom_score){
    e0b4:	00 91 01 0a 	lds	r16, 0x0A01
    e0b8:	10 91 02 0a 	lds	r17, 0x0A02
    e0bc:	e9 e1       	ldi	r30, 0x19	; 25
    e0be:	fa e0       	ldi	r31, 0x0A	; 10
    e0c0:	ee 24       	eor	r14, r14
    e0c2:	49 e0       	ldi	r20, 0x09	; 9
    e0c4:	50 e0       	ldi	r21, 0x00	; 0
    e0c6:	ba 01       	movw	r22, r20
    e0c8:	61 50       	subi	r22, 0x01	; 1
    e0ca:	70 40       	sbci	r23, 0x00	; 0
	score_place = 255;
	char_place = 0;
	char_last = 0;

	for(uint8_t i=0;i<3;i++){
		eeprom_score = eeprom_data[8+(i*10)]<<8UL;
    e0cc:	30 81       	ld	r19, Z
    e0ce:	20 e0       	ldi	r18, 0x00	; 0
		eeprom_score |= eeprom_data[9+(i*10)];
		if(game_score > eeprom_score){
    e0d0:	81 81       	ldd	r24, Z+1	; 0x01
    e0d2:	90 e0       	ldi	r25, 0x00	; 0
    e0d4:	82 2b       	or	r24, r18
    e0d6:	93 2b       	or	r25, r19
    e0d8:	80 17       	cp	r24, r16
    e0da:	91 07       	cpc	r25, r17
    e0dc:	58 f5       	brcc	.+86     	; 0xe134 <HighScoreEntry+0x92>
    e0de:	e2 e0       	ldi	r30, 0x02	; 2
    e0e0:	fe 2e       	mov	r15, r30
    e0e2:	2a e0       	ldi	r18, 0x0A	; 10
    e0e4:	30 e0       	ldi	r19, 0x00	; 0
    e0e6:	12 c0       	rjmp	.+36     	; 0xe10c <HighScoreEntry+0x6a>
			score_place = i;
			for(uint8_t j=2;j>i;j--){
				for(uint8_t k=0;k<10;k++){
					if(k < 8)
    e0e8:	98 30       	cpi	r25, 0x08	; 8
    e0ea:	30 f4       	brcc	.+12     	; 0xe0f8 <HighScoreEntry+0x56>
						eeprom_data[(j*10)+k] = eeprom_data[((j-1)*10)+k]&127;//remove MSbits used for preferences
    e0ec:	8c 91       	ld	r24, X
    e0ee:	8f 77       	andi	r24, 0x7F	; 127
    e0f0:	1a 96       	adiw	r26, 0x0a	; 10
    e0f2:	8c 93       	st	X, r24
    e0f4:	1a 97       	sbiw	r26, 0x0a	; 10
    e0f6:	02 c0       	rjmp	.+4      	; 0xe0fc <HighScoreEntry+0x5a>
					else
						eeprom_data[(j*10)+k] = eeprom_data[((j-1)*10)+k];
    e0f8:	80 81       	ld	r24, Z
    e0fa:	82 87       	std	Z+10, r24	; 0x0a
		eeprom_score = eeprom_data[8+(i*10)]<<8UL;
		eeprom_score |= eeprom_data[9+(i*10)];
		if(game_score > eeprom_score){
			score_place = i;
			for(uint8_t j=2;j>i;j--){
				for(uint8_t k=0;k<10;k++){
    e0fc:	9f 5f       	subi	r25, 0xFF	; 255
    e0fe:	11 96       	adiw	r26, 0x01	; 1
    e100:	31 96       	adiw	r30, 0x01	; 1
    e102:	9a 30       	cpi	r25, 0x0A	; 10
    e104:	89 f7       	brne	.-30     	; 0xe0e8 <HighScoreEntry+0x46>
	for(uint8_t i=0;i<3;i++){
		eeprom_score = eeprom_data[8+(i*10)]<<8UL;
		eeprom_score |= eeprom_data[9+(i*10)];
		if(game_score > eeprom_score){
			score_place = i;
			for(uint8_t j=2;j>i;j--){
    e106:	fa 94       	dec	r15
    e108:	2a 50       	subi	r18, 0x0A	; 10
    e10a:	30 40       	sbci	r19, 0x00	; 0
    e10c:	ef 14       	cp	r14, r15
    e10e:	30 f4       	brcc	.+12     	; 0xe11c <HighScoreEntry+0x7a>
    e110:	f9 01       	movw	r30, r18
    e112:	ef 5e       	subi	r30, 0xEF	; 239
    e114:	f5 4f       	sbci	r31, 0xF5	; 245
    e116:	df 01       	movw	r26, r30
    e118:	90 e0       	ldi	r25, 0x00	; 0
    e11a:	e6 cf       	rjmp	.-52     	; 0xe0e8 <HighScoreEntry+0x46>
						eeprom_data[(j*10)+k] = eeprom_data[((j-1)*10)+k]&127;//remove MSbits used for preferences
					else
						eeprom_data[(j*10)+k] = eeprom_data[((j-1)*10)+k];
				}
			}
			eeprom_data[8+(i*10)] = game_score>>8UL;
    e11c:	6f 5e       	subi	r22, 0xEF	; 239
    e11e:	75 4f       	sbci	r23, 0xF5	; 245
    e120:	fb 01       	movw	r30, r22
    e122:	10 83       	st	Z, r17
			eeprom_data[9+(i*10)] = game_score&255UL;
    e124:	4f 5e       	subi	r20, 0xEF	; 239
    e126:	55 4f       	sbci	r21, 0xF5	; 245
    e128:	fa 01       	movw	r30, r20
    e12a:	00 83       	st	Z, r16
			break;
		}
	}
	if(score_place == 255)
    e12c:	ff ef       	ldi	r31, 0xFF	; 255
    e12e:	ef 16       	cp	r14, r31
    e130:	49 f4       	brne	.+18     	; 0xe144 <HighScoreEntry+0xa2>
    e132:	5e c1       	rjmp	.+700    	; 0xe3f0 <HighScoreEntry+0x34e>
HIGHSCOREENTRYTOP:
	score_place = 255;
	char_place = 0;
	char_last = 0;

	for(uint8_t i=0;i<3;i++){
    e134:	e3 94       	inc	r14
    e136:	46 5f       	subi	r20, 0xF6	; 246
    e138:	5f 4f       	sbci	r21, 0xFF	; 255
    e13a:	3a 96       	adiw	r30, 0x0a	; 10
    e13c:	83 e0       	ldi	r24, 0x03	; 3
    e13e:	e8 16       	cp	r14, r24
    e140:	11 f6       	brne	.-124    	; 0xe0c6 <HighScoreEntry+0x24>
    e142:	56 c1       	rjmp	.+684    	; 0xe3f0 <HighScoreEntry+0x34e>
	}
	if(score_place == 255)
		return;
//score_place = 0;

	ClearVram();
    e144:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <ClearVram>
	SPrint(3,2,PSTR("CONGRATULATIONS YOU MADE"));
    e148:	83 e0       	ldi	r24, 0x03	; 3
    e14a:	90 e0       	ldi	r25, 0x00	; 0
    e14c:	62 e0       	ldi	r22, 0x02	; 2
    e14e:	70 e0       	ldi	r23, 0x00	; 0
    e150:	4b eb       	ldi	r20, 0xBB	; 187
    e152:	54 e8       	ldi	r21, 0x84	; 132
    e154:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(7,3,PSTR("THE LEADER BOARD"));
    e158:	87 e0       	ldi	r24, 0x07	; 7
    e15a:	90 e0       	ldi	r25, 0x00	; 0
    e15c:	63 e0       	ldi	r22, 0x03	; 3
    e15e:	70 e0       	ldi	r23, 0x00	; 0
    e160:	4a ea       	ldi	r20, 0xAA	; 170
    e162:	54 e8       	ldi	r21, 0x84	; 132
    e164:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(7,5,PSTR("ENTER YOUR NAME"));
    e168:	87 e0       	ldi	r24, 0x07	; 7
    e16a:	90 e0       	ldi	r25, 0x00	; 0
    e16c:	65 e0       	ldi	r22, 0x05	; 5
    e16e:	70 e0       	ldi	r23, 0x00	; 0
    e170:	4a e9       	ldi	r20, 0x9A	; 154
    e172:	54 e8       	ldi	r21, 0x84	; 132
    e174:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	
	unsigned char char_buf[2];
	char_buf[1] = 0;
    e178:	1a 82       	std	Y+2, r1	; 0x02
    e17a:	15 e0       	ldi	r17, 0x05	; 5
    e17c:	7a e0       	ldi	r23, 0x0A	; 10
    e17e:	f7 2e       	mov	r15, r23
    e180:	01 e4       	ldi	r16, 0x41	; 65
	uint8_t x,y;
	x = 5;
	y = 10;
	for(uint8_t i='A';i<='Z';i++){
		char_buf[0] = i;
		SPrintRam(x,y,char_buf);
    e182:	6e 01       	movw	r12, r28
    e184:	08 94       	sec
    e186:	c1 1c       	adc	r12, r1
    e188:	d1 1c       	adc	r13, r1
	char_buf[1] = 0;
	uint8_t x,y;
	x = 5;
	y = 10;
	for(uint8_t i='A';i<='Z';i++){
		char_buf[0] = i;
    e18a:	09 83       	std	Y+1, r16	; 0x01
		SPrintRam(x,y,char_buf);
    e18c:	81 2f       	mov	r24, r17
    e18e:	90 e0       	ldi	r25, 0x00	; 0
    e190:	6f 2d       	mov	r22, r15
    e192:	70 e0       	ldi	r23, 0x00	; 0
    e194:	a6 01       	movw	r20, r12
    e196:	0e 94 67 53 	call	0xa6ce	; 0xa6ce <SPrintRam>
		x += 2;
    e19a:	1e 5f       	subi	r17, 0xFE	; 254
		if(x >= SCREEN_TILES_H-5){
    e19c:	19 31       	cpi	r17, 0x19	; 25
    e19e:	18 f0       	brcs	.+6      	; 0xe1a6 <HighScoreEntry+0x104>
			y += 2;
    e1a0:	e2 e0       	ldi	r30, 0x02	; 2
    e1a2:	fe 0e       	add	r15, r30
    e1a4:	15 e0       	ldi	r17, 0x05	; 5
	unsigned char char_buf[2];
	char_buf[1] = 0;
	uint8_t x,y;
	x = 5;
	y = 10;
	for(uint8_t i='A';i<='Z';i++){
    e1a6:	0f 5f       	subi	r16, 0xFF	; 255
    e1a8:	0b 35       	cpi	r16, 0x5B	; 91
    e1aa:	79 f7       	brne	.-34     	; 0xe18a <HighScoreEntry+0xe8>
			y += 2;
			x = 5;
		}
	}

	SPrint(23,8,PSTR("POINTS"));
    e1ac:	87 e1       	ldi	r24, 0x17	; 23
    e1ae:	90 e0       	ldi	r25, 0x00	; 0
    e1b0:	68 e0       	ldi	r22, 0x08	; 8
    e1b2:	70 e0       	ldi	r23, 0x00	; 0
    e1b4:	43 e9       	ldi	r20, 0x93	; 147
    e1b6:	54 e8       	ldi	r21, 0x84	; 132
    e1b8:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrintNum(21,8,game_score,0);
    e1bc:	40 91 01 0a 	lds	r20, 0x0A01
    e1c0:	50 91 02 0a 	lds	r21, 0x0A02
    e1c4:	85 e1       	ldi	r24, 0x15	; 21
    e1c6:	90 e0       	ldi	r25, 0x00	; 0
    e1c8:	68 e0       	ldi	r22, 0x08	; 8
    e1ca:	70 e0       	ldi	r23, 0x00	; 0
    e1cc:	20 e0       	ldi	r18, 0x00	; 0
    e1ce:	03 df       	rcall	.-506    	; 0xdfd6 <SPrintNum>
	SPrint(17,14,PSTR("DEL END"));
    e1d0:	81 e1       	ldi	r24, 0x11	; 17
    e1d2:	90 e0       	ldi	r25, 0x00	; 0
    e1d4:	6e e0       	ldi	r22, 0x0E	; 14
    e1d6:	70 e0       	ldi	r23, 0x00	; 0
    e1d8:	4b e8       	ldi	r20, 0x8B	; 139
    e1da:	54 e8       	ldi	r21, 0x84	; 132
    e1dc:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(12,16,PSTR("SPACE"));
    e1e0:	8c e0       	ldi	r24, 0x0C	; 12
    e1e2:	90 e0       	ldi	r25, 0x00	; 0
    e1e4:	60 e1       	ldi	r22, 0x10	; 16
    e1e6:	70 e0       	ldi	r23, 0x00	; 0
    e1e8:	45 e8       	ldi	r20, 0x85	; 133
    e1ea:	54 e8       	ldi	r21, 0x84	; 132
    e1ec:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
    e1f0:	18 e0       	ldi	r17, 0x08	; 8
	for(uint8_t i=0;i<8;i++)
		SetTile(8+i,8,2);
    e1f2:	81 2f       	mov	r24, r17
    e1f4:	68 e0       	ldi	r22, 0x08	; 8
    e1f6:	42 e0       	ldi	r20, 0x02	; 2
    e1f8:	50 e0       	ldi	r21, 0x00	; 0
    e1fa:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
    e1fe:	1f 5f       	subi	r17, 0xFF	; 255

	SPrint(23,8,PSTR("POINTS"));
	SPrintNum(21,8,game_score,0);
	SPrint(17,14,PSTR("DEL END"));
	SPrint(12,16,PSTR("SPACE"));
	for(uint8_t i=0;i<8;i++)
    e200:	10 31       	cpi	r17, 0x10	; 16
    e202:	b9 f7       	brne	.-18     	; 0xe1f2 <HighScoreEntry+0x150>
    e204:	00 e0       	ldi	r16, 0x00	; 0
    e206:	ff 24       	eor	r15, r15
    e208:	dd 24       	eor	r13, r13
    e20a:	01 c0       	rjmp	.+2      	; 0xe20e <HighScoreEntry+0x16c>
    e20c:	ff 24       	eor	r15, r15
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    e20e:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    e212:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    e216:	81 e0       	ldi	r24, 0x01	; 1
    e218:	90 e0       	ldi	r25, 0x00	; 0
    e21a:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
		SetTile(8+i,8,2);
	uint8_t flash = 0;
DEFAULTHIGHSCORETOP:
	while(1){
		SWaitVsync(1);
		UpdateCursor(1);
    e21e:	81 e0       	ldi	r24, 0x01	; 1
    e220:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <UpdateCursor>
		DrawCursor();
    e224:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
		if(padstate & BTN_START && !(oldpadstate & BTN_START)){
    e228:	80 91 fc 09 	lds	r24, 0x09FC
    e22c:	83 ff       	sbrs	r24, 3
    e22e:	04 c0       	rjmp	.+8      	; 0xe238 <HighScoreEntry+0x196>
    e230:	80 91 fa 09 	lds	r24, 0x09FA
    e234:	83 ff       	sbrs	r24, 3
    e236:	4e c0       	rjmp	.+156    	; 0xe2d4 <HighScoreEntry+0x232>
			break;
		}
		if(++flash > 18)
    e238:	d3 94       	inc	r13
    e23a:	f2 e1       	ldi	r31, 0x12	; 18
    e23c:	fd 15       	cp	r31, r13
    e23e:	58 f0       	brcs	.+22     	; 0xe256 <HighScoreEntry+0x1b4>
			flash = 0;
		if(flash > 9 && char_place < 8)
    e240:	89 e0       	ldi	r24, 0x09	; 9
    e242:	8d 15       	cp	r24, r13
    e244:	48 f4       	brcc	.+18     	; 0xe258 <HighScoreEntry+0x1b6>
    e246:	08 30       	cpi	r16, 0x08	; 8
    e248:	38 f4       	brcc	.+14     	; 0xe258 <HighScoreEntry+0x1b6>
			SetTile(8+char_place,7,66);
    e24a:	80 2f       	mov	r24, r16
    e24c:	88 5f       	subi	r24, 0xF8	; 248
    e24e:	67 e0       	ldi	r22, 0x07	; 7
    e250:	42 e4       	ldi	r20, 0x42	; 66
    e252:	50 e0       	ldi	r21, 0x00	; 0
    e254:	06 c0       	rjmp	.+12     	; 0xe262 <HighScoreEntry+0x1c0>
		if(padstate & BTN_START && !(oldpadstate & BTN_START)){
			break;
		}
		if(++flash > 18)
			flash = 0;
		if(flash > 9 && char_place < 8)
    e256:	dd 24       	eor	r13, r13
			SetTile(8+char_place,7,66);
		else
			SetTile(8+char_place,7,char_last);
    e258:	80 2f       	mov	r24, r16
    e25a:	88 5f       	subi	r24, 0xF8	; 248
    e25c:	67 e0       	ldi	r22, 0x07	; 7
    e25e:	4f 2d       	mov	r20, r15
    e260:	50 e0       	ldi	r21, 0x00	; 0
    e262:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
		if(padstate & BTN_B && !(oldpadstate & BTN_B) && CursorIntersects(5*8,10*8,19*8,7*8)){//we clicked in the characters area
    e266:	80 91 fc 09 	lds	r24, 0x09FC
    e26a:	80 ff       	sbrs	r24, 0
    e26c:	d0 cf       	rjmp	.-96     	; 0xe20e <HighScoreEntry+0x16c>
    e26e:	80 91 fa 09 	lds	r24, 0x09FA
    e272:	80 fd       	sbrc	r24, 0
    e274:	cc cf       	rjmp	.-104    	; 0xe20e <HighScoreEntry+0x16c>
    e276:	88 e2       	ldi	r24, 0x28	; 40
    e278:	60 e5       	ldi	r22, 0x50	; 80
    e27a:	48 e9       	ldi	r20, 0x98	; 152
    e27c:	28 e3       	ldi	r18, 0x38	; 56
    e27e:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e282:	88 23       	and	r24, r24
    e284:	21 f2       	breq	.-120    	; 0xe20e <HighScoreEntry+0x16c>
			if(CursorIntersects((17*8),(14*8),3*8,8)){//clicked "DEL"
    e286:	88 e8       	ldi	r24, 0x88	; 136
    e288:	60 e7       	ldi	r22, 0x70	; 112
    e28a:	48 e1       	ldi	r20, 0x18	; 24
    e28c:	28 e0       	ldi	r18, 0x08	; 8
    e28e:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e292:	88 23       	and	r24, r24
    e294:	61 f0       	breq	.+24     	; 0xe2ae <HighScoreEntry+0x20c>
				SetTile(8+char_place,7,0);
    e296:	80 2f       	mov	r24, r16
    e298:	88 5f       	subi	r24, 0xF8	; 248
    e29a:	67 e0       	ldi	r22, 0x07	; 7
    e29c:	40 e0       	ldi	r20, 0x00	; 0
    e29e:	50 e0       	ldi	r21, 0x00	; 0
    e2a0:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
				if(char_place){
    e2a4:	00 23       	and	r16, r16
    e2a6:	09 f4       	brne	.+2      	; 0xe2aa <HighScoreEntry+0x208>
    e2a8:	b1 cf       	rjmp	.-158    	; 0xe20c <HighScoreEntry+0x16a>
					char_place--;
    e2aa:	01 50       	subi	r16, 0x01	; 1
    e2ac:	af cf       	rjmp	.-162    	; 0xe20c <HighScoreEntry+0x16a>
				}
			//	char_last = vram[(8+char_place)+(7*VRAM_TILES_H)]-RAM_TILES_COUNT;
				char_last = 0;
			}else if(CursorIntersects((21*8),(14*8),3*8,8)){//clicked "END"
    e2ae:	88 ea       	ldi	r24, 0xA8	; 168
    e2b0:	60 e7       	ldi	r22, 0x70	; 112
    e2b2:	48 e1       	ldi	r20, 0x18	; 24
    e2b4:	28 e0       	ldi	r18, 0x08	; 8
    e2b6:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e2ba:	88 23       	and	r24, r24
    e2bc:	21 f1       	breq	.+72     	; 0xe306 <HighScoreEntry+0x264>
    e2be:	ea ef       	ldi	r30, 0xFA	; 250
    e2c0:	f1 e0       	ldi	r31, 0x01	; 1
				uint8_t not_blank = 0;
				for(uint8_t i=0;i<7;i++){
					if(vram[(8+i)+(7*VRAM_TILES_H)]-RAM_TILES_COUNT != 2){
    e2c2:	80 81       	ld	r24, Z
    e2c4:	82 31       	cpi	r24, 0x12	; 18
    e2c6:	31 f4       	brne	.+12     	; 0xe2d4 <HighScoreEntry+0x232>
    e2c8:	31 96       	adiw	r30, 0x01	; 1
				}
			//	char_last = vram[(8+char_place)+(7*VRAM_TILES_H)]-RAM_TILES_COUNT;
				char_last = 0;
			}else if(CursorIntersects((21*8),(14*8),3*8,8)){//clicked "END"
				uint8_t not_blank = 0;
				for(uint8_t i=0;i<7;i++){
    e2ca:	82 e0       	ldi	r24, 0x02	; 2
    e2cc:	e1 30       	cpi	r30, 0x01	; 1
    e2ce:	f8 07       	cpc	r31, r24
    e2d0:	c1 f7       	brne	.-16     	; 0xe2c2 <HighScoreEntry+0x220>
    e2d2:	09 c0       	rjmp	.+18     	; 0xe2e6 <HighScoreEntry+0x244>
    e2d4:	8a e0       	ldi	r24, 0x0A	; 10
    e2d6:	e8 9e       	mul	r14, r24
    e2d8:	f0 01       	movw	r30, r0
    e2da:	11 24       	eor	r1, r1
    e2dc:	ef 5e       	subi	r30, 0xEF	; 239
    e2de:	f5 4f       	sbci	r31, 0xF5	; 245
    e2e0:	aa ef       	ldi	r26, 0xFA	; 250
    e2e2:	b1 e0       	ldi	r27, 0x01	; 1
    e2e4:	53 c0       	rjmp	.+166    	; 0xe38c <HighScoreEntry+0x2ea>
    e2e6:	80 e0       	ldi	r24, 0x00	; 0
    e2e8:	90 e0       	ldi	r25, 0x00	; 0
					}
				}
				if(!not_blank){//user did not enter any characters, fill in a default
					uint8_t stroff = 0;
					for(uint8_t i=0;i<7;i++)
						vram[(8+i)+(7*VRAM_TILES_H)] = pgm_read_byte(&default_highscore_name[stroff++])+RAM_TILES_COUNT;
    e2ea:	fc 01       	movw	r30, r24
    e2ec:	ed 5e       	subi	r30, 0xED	; 237
    e2ee:	fb 47       	sbci	r31, 0x7B	; 123
    e2f0:	e4 91       	lpm	r30, Z+
    e2f2:	dc 01       	movw	r26, r24
    e2f4:	a6 50       	subi	r26, 0x06	; 6
    e2f6:	be 4f       	sbci	r27, 0xFE	; 254
    e2f8:	e0 5f       	subi	r30, 0xF0	; 240
    e2fa:	ec 93       	st	X, r30
    e2fc:	01 96       	adiw	r24, 0x01	; 1
						break;
					}
				}
				if(!not_blank){//user did not enter any characters, fill in a default
					uint8_t stroff = 0;
					for(uint8_t i=0;i<7;i++)
    e2fe:	87 30       	cpi	r24, 0x07	; 7
    e300:	91 05       	cpc	r25, r1
    e302:	99 f7       	brne	.-26     	; 0xe2ea <HighScoreEntry+0x248>
    e304:	84 cf       	rjmp	.-248    	; 0xe20e <HighScoreEntry+0x16c>
						vram[(8+i)+(7*VRAM_TILES_H)] = pgm_read_byte(&default_highscore_name[stroff++])+RAM_TILES_COUNT;
					goto DEFAULTHIGHSCORETOP;//the first "END" click fills in a default name, the player will see what will happen and can click again to accept
				}
				break;
			}else if(CursorIntersects((12*8),16*8,5*8,8)){//space
    e306:	80 e6       	ldi	r24, 0x60	; 96
    e308:	60 e8       	ldi	r22, 0x80	; 128
    e30a:	48 e2       	ldi	r20, 0x28	; 40
    e30c:	28 e0       	ldi	r18, 0x08	; 8
    e30e:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e312:	88 23       	and	r24, r24
    e314:	59 f0       	breq	.+22     	; 0xe32c <HighScoreEntry+0x28a>
					char_last = 0;
					SetTile(8+char_place,7,0);
    e316:	80 2f       	mov	r24, r16
    e318:	88 5f       	subi	r24, 0xF8	; 248
    e31a:	67 e0       	ldi	r22, 0x07	; 7
    e31c:	40 e0       	ldi	r20, 0x00	; 0
    e31e:	50 e0       	ldi	r21, 0x00	; 0
    e320:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
					if(char_place < 7){
    e324:	07 30       	cpi	r16, 0x07	; 7
    e326:	08 f0       	brcs	.+2      	; 0xe32a <HighScoreEntry+0x288>
    e328:	71 cf       	rjmp	.-286    	; 0xe20c <HighScoreEntry+0x16a>
    e32a:	2e c0       	rjmp	.+92     	; 0xe388 <HighScoreEntry+0x2e6>
						char_place++;
					}
			}else{//either clicked a character, or blank space
				uint8_t clicked_tile = vram[(((cursory+0)/8)*VRAM_TILES_H)+((cursorx+9)/8)]-RAM_TILES_COUNT;
    e32c:	20 91 ff 09 	lds	r18, 0x09FF
    e330:	30 e0       	ldi	r19, 0x00	; 0
    e332:	27 5f       	subi	r18, 0xF7	; 247
    e334:	3f 4f       	sbci	r19, 0xFF	; 255
    e336:	63 e0       	ldi	r22, 0x03	; 3
    e338:	35 95       	asr	r19
    e33a:	27 95       	ror	r18
    e33c:	6a 95       	dec	r22
    e33e:	e1 f7       	brne	.-8      	; 0xe338 <HighScoreEntry+0x296>
    e340:	40 91 07 0a 	lds	r20, 0x0A07
    e344:	84 2f       	mov	r24, r20
    e346:	86 95       	lsr	r24
    e348:	86 95       	lsr	r24
    e34a:	86 95       	lsr	r24
    e34c:	90 e0       	ldi	r25, 0x00	; 0
    e34e:	fc 01       	movw	r30, r24
    e350:	55 e0       	ldi	r21, 0x05	; 5
    e352:	ee 0f       	add	r30, r30
    e354:	ff 1f       	adc	r31, r31
    e356:	5a 95       	dec	r21
    e358:	e1 f7       	brne	.-8      	; 0xe352 <HighScoreEntry+0x2b0>
    e35a:	88 0f       	add	r24, r24
    e35c:	99 1f       	adc	r25, r25
    e35e:	e8 1b       	sub	r30, r24
    e360:	f9 0b       	sbc	r31, r25
    e362:	e2 0f       	add	r30, r18
    e364:	f3 1f       	adc	r31, r19
    e366:	e0 5e       	subi	r30, 0xE0	; 224
    e368:	fe 4f       	sbci	r31, 0xFE	; 254
    e36a:	10 81       	ld	r17, Z
    e36c:	10 51       	subi	r17, 0x10	; 16
//SetTile(0,0,clicked_tile);
				if(clicked_tile != 0){//not a space, is some character
    e36e:	09 f4       	brne	.+2      	; 0xe372 <HighScoreEntry+0x2d0>
    e370:	4e cf       	rjmp	.-356    	; 0xe20e <HighScoreEntry+0x16c>
					SetTile(8+char_place,7,clicked_tile);
    e372:	80 2f       	mov	r24, r16
    e374:	88 5f       	subi	r24, 0xF8	; 248
    e376:	67 e0       	ldi	r22, 0x07	; 7
    e378:	41 2f       	mov	r20, r17
    e37a:	50 e0       	ldi	r21, 0x00	; 0
    e37c:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
					char_last = clicked_tile;
					if(char_place < 7){
    e380:	07 30       	cpi	r16, 0x07	; 7
    e382:	10 f0       	brcs	.+4      	; 0xe388 <HighScoreEntry+0x2e6>
    e384:	f1 2e       	mov	r15, r17
    e386:	43 cf       	rjmp	.-378    	; 0xe20e <HighScoreEntry+0x16c>
						char_place++;
    e388:	0f 5f       	subi	r16, 0xFF	; 255
    e38a:	40 cf       	rjmp	.-384    	; 0xe20c <HighScoreEntry+0x16a>
			}
		}
	}
	uint8_t found_char;
	for(uint8_t i=0;i<8;i++){
		eeprom_data[(score_place*10)+i] &= 128;//keep bits used for preferences
    e38c:	90 81       	ld	r25, Z
    e38e:	90 78       	andi	r25, 0x80	; 128
    e390:	90 83       	st	Z, r25
		if(vram[8+i+(VRAM_TILES_H*7)]-RAM_TILES_COUNT && vram[8+i+(VRAM_TILES_H*7)]-RAM_TILES_COUNT != 66){//don't add the flashing cursor
    e392:	8c 91       	ld	r24, X
    e394:	80 31       	cpi	r24, 0x10	; 16
    e396:	31 f0       	breq	.+12     	; 0xe3a4 <HighScoreEntry+0x302>
    e398:	82 35       	cpi	r24, 0x52	; 82
    e39a:	21 f0       	breq	.+8      	; 0xe3a4 <HighScoreEntry+0x302>
			found_char = 1;
			eeprom_data[(score_place*10)+i] |= ((vram[8+i+(VRAM_TILES_H*7)]-(RAM_TILES_COUNT+FONT_START_TILE))+'A');
    e39c:	83 57       	subi	r24, 0x73	; 115
    e39e:	89 2b       	or	r24, r25
    e3a0:	80 83       	st	Z, r24
    e3a2:	02 c0       	rjmp	.+4      	; 0xe3a8 <HighScoreEntry+0x306>
		}else
			eeprom_data[(score_place*10)+i] |= ' ';
    e3a4:	90 62       	ori	r25, 0x20	; 32
    e3a6:	90 83       	st	Z, r25
    e3a8:	31 96       	adiw	r30, 0x01	; 1
    e3aa:	11 96       	adiw	r26, 0x01	; 1
				}
			}
		}
	}
	uint8_t found_char;
	for(uint8_t i=0;i<8;i++){
    e3ac:	82 e0       	ldi	r24, 0x02	; 2
    e3ae:	a2 30       	cpi	r26, 0x02	; 2
    e3b0:	b8 07       	cpc	r27, r24
    e3b2:	61 f7       	brne	.-40     	; 0xe38c <HighScoreEntry+0x2ea>
		SPrint(12,12,PSTR("PLEASE ENTER A NAME"));
		SWaitVsync(60);
		goto HIGHSCOREENTRYTOP;
	}

	SetEEPromFlags();//fix preference bits that sorting destroyed
    e3b4:	0e 94 ad 54 	call	0xa95a	; 0xa95a <SetEEPromFlags>
	EEPromScore(1);//update data to eeprom, Uzenet will pick this up before long
    e3b8:	81 e0       	ldi	r24, 0x01	; 1
    e3ba:	0e 94 42 61 	call	0xc284	; 0xc284 <EEPromScore>
	FadeOut(4,false);
    e3be:	84 e0       	ldi	r24, 0x04	; 4
    e3c0:	60 e0       	ldi	r22, 0x00	; 0
    e3c2:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
    e3c6:	0d c0       	rjmp	.+26     	; 0xe3e2 <HighScoreEntry+0x340>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    e3c8:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    e3cc:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    e3d0:	81 e0       	ldi	r24, 0x01	; 1
    e3d2:	90 e0       	ldi	r25, 0x00	; 0
    e3d4:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	while(DDRC){
		SWaitVsync(1);
		UpdateCursor(1);
    e3d8:	81 e0       	ldi	r24, 0x01	; 1
    e3da:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <UpdateCursor>
		DrawCursor();
    e3de:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
	}

	SetEEPromFlags();//fix preference bits that sorting destroyed
	EEPromScore(1);//update data to eeprom, Uzenet will pick this up before long
	FadeOut(4,false);
	while(DDRC){
    e3e2:	87 b1       	in	r24, 0x07	; 7
    e3e4:	88 23       	and	r24, r24
    e3e6:	81 f7       	brne	.-32     	; 0xe3c8 <HighScoreEntry+0x326>
		SWaitVsync(1);
		UpdateCursor(1);
		DrawCursor();
	}
	FadeIn(1,false);
    e3e8:	81 e0       	ldi	r24, 0x01	; 1
    e3ea:	60 e0       	ldi	r22, 0x00	; 0
    e3ec:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
}
    e3f0:	22 96       	adiw	r28, 0x02	; 2
    e3f2:	e8 e0       	ldi	r30, 0x08	; 8
    e3f4:	b4 c3       	rjmp	.+1896   	; 0xeb5e <__epilogue_restores__+0x14>

0000e3f6 <GameLoop>:

uint8_t GameLoop(){
    e3f6:	ff 92       	push	r15
    e3f8:	0f 93       	push	r16
    e3fa:	1f 93       	push	r17
		SPrintNum(4,VRAM_TILES_V-1,round_seconds%60,1);
		SPrintNum(1,VRAM_TILES_V-1,round_seconds/60,0);
		SetTile(2,VRAM_TILES_V-1,COLON_TILE);
	}
	for(uint16_t voff = 12;voff<(12+(VRAM_TILES_H*5));voff+=VRAM_TILES_H)//blank score
		vram[voff] = RAM_TILES_COUNT;
    e3fc:	10 e1       	ldi	r17, 0x10	; 16
				return 0;
			}//else it shouldn't have returned
		}
		
		if(++last_click_time > DOUBLE_CLICK_TIME){
			last_click_time = DOUBLE_CLICK_TIME;
    e3fe:	f3 e2       	ldi	r31, 0x23	; 35
    e400:	ff 2e       	mov	r15, r31
			last_click_num = 0;
			last_click_stack = 255;
    e402:	0f ef       	ldi	r16, 0xFF	; 255
	SPrintNum(12,1,0,0);
}

uint8_t GameLoop(){
GAMELOOPTOP:
		game_state &= ~CARDS_DEALT;
    e404:	80 91 06 0a 	lds	r24, 0x0A06
    e408:	8f 7d       	andi	r24, 0xDF	; 223
    e40a:	80 93 06 0a 	sts	0x0A06, r24
		ClearVram();
    e40e:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <ClearVram>
	
		DrawTable();
    e412:	16 de       	rcall	.-980    	; 0xe040 <DrawTable>
		DealHand();
    e414:	0e 94 85 65 	call	0xcb0a	; 0xcb0a <DealHand>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    e418:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    e41c:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    e420:	81 e0       	ldi	r24, 0x01	; 1
    e422:	90 e0       	ldi	r25, 0x00	; 0
    e424:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	

//		cursorspeed = 2;
	while(true){
		SWaitVsync(1);
		if(!ai_state && demo_playing){//ai won or gaveup, the demo is over
    e428:	80 91 03 0a 	lds	r24, 0x0A03
    e42c:	88 23       	and	r24, r24
    e42e:	c1 f4       	brne	.+48     	; 0xe460 <GameLoop+0x6a>
    e430:	80 91 f7 09 	lds	r24, 0x09F7
    e434:	88 23       	and	r24, r24
    e436:	a1 f0       	breq	.+40     	; 0xe460 <GameLoop+0x6a>
			demo_playing = 0;
    e438:	10 92 f7 09 	sts	0x09F7, r1
			card_set = old_card_set;//we used a random card set to show off the graphics, revert back to the users preference
    e43c:	80 91 04 0a 	lds	r24, 0x0A04
    e440:	80 93 f6 09 	sts	0x09F6, r24
			game_state ^= DRAW_THREE;
			game_state |= old_game_options;//get the old option for DRAW_THREE or not
    e444:	80 91 06 0a 	lds	r24, 0x0A06
    e448:	91 e0       	ldi	r25, 0x01	; 1
    e44a:	89 27       	eor	r24, r25
    e44c:	90 91 ee 0d 	lds	r25, 0x0DEE
    e450:	89 2b       	or	r24, r25
    e452:	80 93 06 0a 	sts	0x0A06, r24
			cursorspeed = oldcursorspeed;
    e456:	80 91 64 0a 	lds	r24, 0x0A64
    e45a:	80 93 6d 0a 	sts	0x0A6D, r24
    e45e:	21 c0       	rjmp	.+66     	; 0xe4a2 <GameLoop+0xac>
		//	FadeOut(3,true);
		//	FadeIn(2,true);
			return 1;
		}

		if((game_state & HAVE_MOVED) && round_seconds < 1000)
    e460:	80 91 06 0a 	lds	r24, 0x0A06
    e464:	82 ff       	sbrs	r24, 2
    e466:	17 c0       	rjmp	.+46     	; 0xe496 <GameLoop+0xa0>
    e468:	20 91 65 0a 	lds	r18, 0x0A65
    e46c:	30 91 66 0a 	lds	r19, 0x0A66
    e470:	83 e0       	ldi	r24, 0x03	; 3
    e472:	28 3e       	cpi	r18, 0xE8	; 232
    e474:	38 07       	cpc	r19, r24
    e476:	78 f4       	brcc	.+30     	; 0xe496 <GameLoop+0xa0>
			if(++round_ticks > 59){
    e478:	80 91 10 0a 	lds	r24, 0x0A10
    e47c:	8f 5f       	subi	r24, 0xFF	; 255
    e47e:	80 93 10 0a 	sts	0x0A10, r24
    e482:	8c 33       	cpi	r24, 0x3C	; 60
    e484:	40 f0       	brcs	.+16     	; 0xe496 <GameLoop+0xa0>
				round_ticks = 0;
    e486:	10 92 10 0a 	sts	0x0A10, r1
				round_seconds++;
    e48a:	2f 5f       	subi	r18, 0xFF	; 255
    e48c:	3f 4f       	sbci	r19, 0xFF	; 255
    e48e:	30 93 66 0a 	sts	0x0A66, r19
    e492:	20 93 65 0a 	sts	0x0A65, r18
			}

		if(CheckVictory()){
    e496:	0e 94 d9 5c 	call	0xb9b2	; 0xb9b2 <CheckVictory>
    e49a:	88 23       	and	r24, r24
    e49c:	21 f0       	breq	.+8      	; 0xe4a6 <GameLoop+0xb0>
			VictoryScreen();
    e49e:	79 da       	rcall	.-2830   	; 0xd992 <VictoryScreen>
			HighScoreEntry();
    e4a0:	00 de       	rcall	.-1024   	; 0xe0a2 <HighScoreEntry>
    e4a2:	81 e0       	ldi	r24, 0x01	; 1
    e4a4:	8d c0       	rjmp	.+282    	; 0xe5c0 <GameLoop+0x1ca>
			return 1;
		}

		if(((padstate & BTN_START && !(oldpadstate & BTN_START)) || (padstate & BTN_B && !(oldpadstate & BTN_B) && CursorIntersects(12*8,8,8,8))) && !stack_held){//can't pause while holding a stack
    e4a6:	90 91 fc 09 	lds	r25, 0x09FC
    e4aa:	93 ff       	sbrs	r25, 3
    e4ac:	04 c0       	rjmp	.+8      	; 0xe4b6 <GameLoop+0xc0>
    e4ae:	80 91 fa 09 	lds	r24, 0x09FA
    e4b2:	83 ff       	sbrs	r24, 3
    e4b4:	0e c0       	rjmp	.+28     	; 0xe4d2 <GameLoop+0xdc>
    e4b6:	90 ff       	sbrs	r25, 0
    e4b8:	2f c0       	rjmp	.+94     	; 0xe518 <GameLoop+0x122>
    e4ba:	80 91 fa 09 	lds	r24, 0x09FA
    e4be:	80 fd       	sbrc	r24, 0
    e4c0:	2b c0       	rjmp	.+86     	; 0xe518 <GameLoop+0x122>
    e4c2:	80 e6       	ldi	r24, 0x60	; 96
    e4c4:	68 e0       	ldi	r22, 0x08	; 8
    e4c6:	48 e0       	ldi	r20, 0x08	; 8
    e4c8:	28 e0       	ldi	r18, 0x08	; 8
    e4ca:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e4ce:	88 23       	and	r24, r24
    e4d0:	19 f1       	breq	.+70     	; 0xe518 <GameLoop+0x122>
    e4d2:	80 91 69 0a 	lds	r24, 0x0A69
    e4d6:	88 23       	and	r24, r24
    e4d8:	f9 f4       	brne	.+62     	; 0xe518 <GameLoop+0x122>
			uint8_t pret = PauseMenu();
    e4da:	45 d8       	rcall	.-3958   	; 0xd566 <PauseMenu>
			if(pret == 0){//continue
    e4dc:	88 23       	and	r24, r24
    e4de:	e1 f0       	breq	.+56     	; 0xe518 <GameLoop+0x122>

			}else if(pret == 1){//new hand
    e4e0:	81 30       	cpi	r24, 0x01	; 1
    e4e2:	b9 f4       	brne	.+46     	; 0xe512 <GameLoop+0x11c>
				FadeOut(3,true);
    e4e4:	83 e0       	ldi	r24, 0x03	; 3
    e4e6:	61 e0       	ldi	r22, 0x01	; 1
    e4e8:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
				MoveAllToDeck();//SetInitialStacksState();
    e4ec:	0e 94 1c 5d 	call	0xba38	; 0xba38 <MoveAllToDeck>
				Shuffle(255);
    e4f0:	8f ef       	ldi	r24, 0xFF	; 255
    e4f2:	90 e0       	ldi	r25, 0x00	; 0
    e4f4:	0e 94 68 5d 	call	0xbad0	; 0xbad0 <Shuffle>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    e4f8:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    e4fc:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    e500:	81 e0       	ldi	r24, 0x01	; 1
    e502:	90 e0       	ldi	r25, 0x00	; 0
    e504:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
				SWaitVsync(1);
				FadeIn(2,false);
    e508:	82 e0       	ldi	r24, 0x02	; 2
    e50a:	60 e0       	ldi	r22, 0x00	; 0
    e50c:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
    e510:	79 cf       	rjmp	.-270    	; 0xe404 <GameLoop+0xe>
				goto GAMELOOPTOP;
			}else if(pret == 2){//quit to main menu
    e512:	82 30       	cpi	r24, 0x02	; 2
    e514:	09 f4       	brne	.+2      	; 0xe518 <GameLoop+0x122>
    e516:	53 c0       	rjmp	.+166    	; 0xe5be <GameLoop+0x1c8>
				return 0;
			}//else it shouldn't have returned
		}
		
		if(++last_click_time > DOUBLE_CLICK_TIME){
    e518:	80 91 09 0a 	lds	r24, 0x0A09
    e51c:	8f 5f       	subi	r24, 0xFF	; 255
    e51e:	80 93 09 0a 	sts	0x0A09, r24
    e522:	84 32       	cpi	r24, 0x24	; 36
    e524:	30 f0       	brcs	.+12     	; 0xe532 <GameLoop+0x13c>
			last_click_time = DOUBLE_CLICK_TIME;
    e526:	f0 92 09 0a 	sts	0x0A09, r15
			last_click_num = 0;
    e52a:	10 92 67 0a 	sts	0x0A67, r1
			last_click_stack = 255;
    e52e:	00 93 0e 0a 	sts	0x0A0E, r16


inline void DrawStats(){
//	if(stack_held || (game_state & CARD_FLOATING))
//		return;
	if(game_state & SHOW_TIMER){
    e532:	80 91 06 0a 	lds	r24, 0x0A06
    e536:	87 ff       	sbrs	r24, 7
    e538:	22 c0       	rjmp	.+68     	; 0xe57e <GameLoop+0x188>
		SPrintNum(4,VRAM_TILES_V-1,round_seconds%60,1);
    e53a:	80 91 65 0a 	lds	r24, 0x0A65
    e53e:	90 91 66 0a 	lds	r25, 0x0A66
    e542:	6c e3       	ldi	r22, 0x3C	; 60
    e544:	70 e0       	ldi	r23, 0x00	; 0
    e546:	be d2       	rcall	.+1404   	; 0xeac4 <__udivmodhi4>
    e548:	ac 01       	movw	r20, r24
    e54a:	84 e0       	ldi	r24, 0x04	; 4
    e54c:	90 e0       	ldi	r25, 0x00	; 0
    e54e:	69 e1       	ldi	r22, 0x19	; 25
    e550:	70 e0       	ldi	r23, 0x00	; 0
    e552:	21 e0       	ldi	r18, 0x01	; 1
    e554:	40 dd       	rcall	.-1408   	; 0xdfd6 <SPrintNum>
		SPrintNum(1,VRAM_TILES_V-1,round_seconds/60,0);
    e556:	80 91 65 0a 	lds	r24, 0x0A65
    e55a:	90 91 66 0a 	lds	r25, 0x0A66
    e55e:	6c e3       	ldi	r22, 0x3C	; 60
    e560:	70 e0       	ldi	r23, 0x00	; 0
    e562:	b0 d2       	rcall	.+1376   	; 0xeac4 <__udivmodhi4>
    e564:	ab 01       	movw	r20, r22
    e566:	81 e0       	ldi	r24, 0x01	; 1
    e568:	90 e0       	ldi	r25, 0x00	; 0
    e56a:	69 e1       	ldi	r22, 0x19	; 25
    e56c:	70 e0       	ldi	r23, 0x00	; 0
    e56e:	20 e0       	ldi	r18, 0x00	; 0
    e570:	32 dd       	rcall	.-1436   	; 0xdfd6 <SPrintNum>
		SetTile(2,VRAM_TILES_V-1,COLON_TILE);
    e572:	82 e0       	ldi	r24, 0x02	; 2
    e574:	69 e1       	ldi	r22, 0x19	; 25
    e576:	4f eb       	ldi	r20, 0xBF	; 191
    e578:	50 e0       	ldi	r21, 0x00	; 0
    e57a:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
	}
	for(uint16_t voff = 12;voff<(12+(VRAM_TILES_H*5));voff+=VRAM_TILES_H)//blank score
		vram[voff] = RAM_TILES_COUNT;
    e57e:	10 93 2c 01 	sts	0x012C, r17
    e582:	10 93 4a 01 	sts	0x014A, r17
    e586:	10 93 68 01 	sts	0x0168, r17
    e58a:	10 93 86 01 	sts	0x0186, r17
    e58e:	10 93 a4 01 	sts	0x01A4, r17

	SPrintNumV(12,1,game_score);
    e592:	40 91 01 0a 	lds	r20, 0x0A01
    e596:	50 91 02 0a 	lds	r21, 0x0A02
    e59a:	8c e0       	ldi	r24, 0x0C	; 12
    e59c:	90 e0       	ldi	r25, 0x00	; 0
    e59e:	61 e0       	ldi	r22, 0x01	; 1
    e5a0:	70 e0       	ldi	r23, 0x00	; 0
    e5a2:	0e 94 e1 60 	call	0xc1c2	; 0xc1c2 <SPrintNumV>
	SetTile(12,0,CHECK_MARK_TILE);//menu check mark
    e5a6:	8c e0       	ldi	r24, 0x0C	; 12
    e5a8:	60 e0       	ldi	r22, 0x00	; 0
    e5aa:	4e eb       	ldi	r20, 0xBE	; 190
    e5ac:	50 e0       	ldi	r21, 0x00	; 0
    e5ae:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			last_click_num = 0;
			last_click_stack = 255;
		}

		DrawStats();
		UpdateCursor(0);
    e5b2:	80 e0       	ldi	r24, 0x00	; 0
    e5b4:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <UpdateCursor>
		DrawCursor();
    e5b8:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
    e5bc:	2d cf       	rjmp	.-422    	; 0xe418 <GameLoop+0x22>


	}
    e5be:	80 e0       	ldi	r24, 0x00	; 0
	return 1;
}
    e5c0:	1f 91       	pop	r17
    e5c2:	0f 91       	pop	r16
    e5c4:	ff 90       	pop	r15
    e5c6:	08 95       	ret

0000e5c8 <TitleScreen>:
//	cursory = 178;
}

void HowToPlayScreen();

void TitleScreen(){
    e5c8:	ef 92       	push	r14
    e5ca:	ff 92       	push	r15
    e5cc:	0f 93       	push	r16
    e5ce:	1f 93       	push	r17
    e5d0:	cf 93       	push	r28
    e5d2:	df 93       	push	r29
	SetInitialStacksState();
    e5d4:	0e 94 f7 5c 	call	0xb9ee	; 0xb9ee <SetInitialStacksState>
	uint16_t idle_ticks = 0;
//	cursorx = 80;
//	cursory = 120;
	card_set = old_card_set;
    e5d8:	80 91 04 0a 	lds	r24, 0x0A04
    e5dc:	80 93 f6 09 	sts	0x09F6, r24
	game_state |= CARDS_DEALT;
	game_state ^= CARDS_DEALT;
	game_state &= ~DRAW_THREE;
    e5e0:	90 91 06 0a 	lds	r25, 0x0A06
    e5e4:	90 62       	ori	r25, 0x20	; 32
    e5e6:	80 e2       	ldi	r24, 0x20	; 32
    e5e8:	98 27       	eor	r25, r24
    e5ea:	9e 7f       	andi	r25, 0xFE	; 254
    e5ec:	90 93 06 0a 	sts	0x0A06, r25
	if(old_game_options & DRAW_THREE)
    e5f0:	80 91 ee 0d 	lds	r24, 0x0DEE
    e5f4:	80 ff       	sbrs	r24, 0
    e5f6:	03 c0       	rjmp	.+6      	; 0xe5fe <TitleScreen+0x36>
		game_state |= DRAW_THREE;
    e5f8:	91 60       	ori	r25, 0x01	; 1
    e5fa:	90 93 06 0a 	sts	0x0A06, r25
//TITLETOP:
	idle_ticks = 0;
	ClearVram();
    e5fe:	0e 94 ec 46 	call	0x8dd8	; 0x8dd8 <ClearVram>
	SPrint((SCREEN_TILES_H/2)-10,1,PSTR("WELCOME TO SOLITAIRE"));
    e602:	85 e0       	ldi	r24, 0x05	; 5
    e604:	90 e0       	ldi	r25, 0x00	; 0
    e606:	61 e0       	ldi	r22, 0x01	; 1
    e608:	70 e0       	ldi	r23, 0x00	; 0
    e60a:	44 e5       	ldi	r20, 0x54	; 84
    e60c:	55 e8       	ldi	r21, 0x85	; 133
    e60e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>

	SPrint(5, 7,PSTR("DECK"));
    e612:	85 e0       	ldi	r24, 0x05	; 5
    e614:	90 e0       	ldi	r25, 0x00	; 0
    e616:	67 e0       	ldi	r22, 0x07	; 7
    e618:	70 e0       	ldi	r23, 0x00	; 0
    e61a:	4f e4       	ldi	r20, 0x4F	; 79
    e61c:	55 e8       	ldi	r21, 0x85	; 133
    e61e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(5,10,PSTR("DRAW   ONE   THREE"));
    e622:	85 e0       	ldi	r24, 0x05	; 5
    e624:	90 e0       	ldi	r25, 0x00	; 0
    e626:	6a e0       	ldi	r22, 0x0A	; 10
    e628:	70 e0       	ldi	r23, 0x00	; 0
    e62a:	4c e3       	ldi	r20, 0x3C	; 60
    e62c:	55 e8       	ldi	r21, 0x85	; 133
    e62e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(5,13,PSTR("MUSIC        OFF"));
    e632:	85 e0       	ldi	r24, 0x05	; 5
    e634:	90 e0       	ldi	r25, 0x00	; 0
    e636:	6d e0       	ldi	r22, 0x0D	; 13
    e638:	70 e0       	ldi	r23, 0x00	; 0
    e63a:	4b e2       	ldi	r20, 0x2B	; 43
    e63c:	55 e8       	ldi	r21, 0x85	; 133
    e63e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(5,16,PSTR("TIMER  HIDE  SHOW"));
    e642:	85 e0       	ldi	r24, 0x05	; 5
    e644:	90 e0       	ldi	r25, 0x00	; 0
    e646:	60 e1       	ldi	r22, 0x10	; 16
    e648:	70 e0       	ldi	r23, 0x00	; 0
    e64a:	49 e1       	ldi	r20, 0x19	; 25
    e64c:	55 e8       	ldi	r21, 0x85	; 133
    e64e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(5,19,PSTR("SPEED"));
    e652:	85 e0       	ldi	r24, 0x05	; 5
    e654:	90 e0       	ldi	r25, 0x00	; 0
    e656:	63 e1       	ldi	r22, 0x13	; 19
    e658:	70 e0       	ldi	r23, 0x00	; 0
    e65a:	43 e1       	ldi	r20, 0x13	; 19
    e65c:	55 e8       	ldi	r21, 0x85	; 133
    e65e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
	SPrint(5,22,PSTR("SAVE"));
    e662:	85 e0       	ldi	r24, 0x05	; 5
    e664:	90 e0       	ldi	r25, 0x00	; 0
    e666:	66 e1       	ldi	r22, 0x16	; 22
    e668:	70 e0       	ldi	r23, 0x00	; 0
    e66a:	4e e0       	ldi	r20, 0x0E	; 14
    e66c:	55 e8       	ldi	r21, 0x85	; 133
    e66e:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
    e672:	ff 24       	eor	r15, r15
    e674:	00 e0       	ldi	r16, 0x00	; 0
    e676:	c0 e0       	ldi	r28, 0x00	; 0
    e678:	d0 e0       	ldi	r29, 0x00	; 0
			if(padstate == pgm_read_word(&KonamiCode[codepos])){
				if(++codepos ==(sizeof(KonamiCode)/2) ){
				//	STriggerFx(1,255,true);
					FadeIn(1,false);
					codepos = 0;
					game_state ^= CHEAT_ACTIVE;
    e67a:	80 e4       	ldi	r24, 0x40	; 64
    e67c:	e8 2e       	mov	r14, r24
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    e67e:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    e682:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    e686:	81 e0       	ldi	r24, 0x01	; 1
    e688:	90 e0       	ldi	r25, 0x00	; 0
    e68a:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
//TITLEREENTRY:
	while(true){
		SWaitVsync(1);


		if(padstate && !oldpadstate){
    e68e:	20 91 fc 09 	lds	r18, 0x09FC
    e692:	30 91 fd 09 	lds	r19, 0x09FD
    e696:	21 15       	cp	r18, r1
    e698:	31 05       	cpc	r19, r1
    e69a:	f1 f0       	breq	.+60     	; 0xe6d8 <TitleScreen+0x110>
    e69c:	80 91 fa 09 	lds	r24, 0x09FA
    e6a0:	90 91 fb 09 	lds	r25, 0x09FB
    e6a4:	89 2b       	or	r24, r25
    e6a6:	c1 f4       	brne	.+48     	; 0xe6d8 <TitleScreen+0x110>
			if(padstate == pgm_read_word(&KonamiCode[codepos])){
    e6a8:	e0 2f       	mov	r30, r16
    e6aa:	f0 e0       	ldi	r31, 0x00	; 0
    e6ac:	ee 0f       	add	r30, r30
    e6ae:	ff 1f       	adc	r31, r31
    e6b0:	e0 51       	subi	r30, 0x10	; 16
    e6b2:	fc 47       	sbci	r31, 0x7C	; 124
    e6b4:	85 91       	lpm	r24, Z+
    e6b6:	94 91       	lpm	r25, Z+
    e6b8:	28 17       	cp	r18, r24
    e6ba:	39 07       	cpc	r19, r25
    e6bc:	61 f4       	brne	.+24     	; 0xe6d6 <TitleScreen+0x10e>
				if(++codepos ==(sizeof(KonamiCode)/2) ){
    e6be:	0f 5f       	subi	r16, 0xFF	; 255
    e6c0:	0a 30       	cpi	r16, 0x0A	; 10
    e6c2:	51 f4       	brne	.+20     	; 0xe6d8 <TitleScreen+0x110>
				//	STriggerFx(1,255,true);
					FadeIn(1,false);
    e6c4:	81 e0       	ldi	r24, 0x01	; 1
    e6c6:	60 e0       	ldi	r22, 0x00	; 0
    e6c8:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
					codepos = 0;
					game_state ^= CHEAT_ACTIVE;
    e6cc:	80 91 06 0a 	lds	r24, 0x0A06
    e6d0:	8e 25       	eor	r24, r14
    e6d2:	80 93 06 0a 	sts	0x0A06, r24
    e6d6:	00 e0       	ldi	r16, 0x00	; 0
				}
			}else
				codepos = 0;
		}
		
		if(++idle_ticks > TITLE_IDLE_TIME){
    e6d8:	21 96       	adiw	r28, 0x01	; 1
    e6da:	c1 3f       	cpi	r28, 0xF1	; 241
    e6dc:	d1 05       	cpc	r29, r1
    e6de:	28 f1       	brcs	.+74     	; 0xe72a <TitleScreen+0x162>
		//	idle_ticks = 0;
		//	HowToPlayScreen();
		//	goto TITLETOP;
			ai_state = AI_CHOOSING;
    e6e0:	81 e0       	ldi	r24, 0x01	; 1
    e6e2:	80 93 03 0a 	sts	0x0A03, r24
			demo_playing = 1;
    e6e6:	80 93 f7 09 	sts	0x09F7, r24
			old_card_set = card_set;
    e6ea:	80 91 f6 09 	lds	r24, 0x09F6
    e6ee:	80 93 04 0a 	sts	0x0A04, r24
			card_set = GetPrngNumber(0)%GFX_NUM_CARD_SETS;
    e6f2:	80 e0       	ldi	r24, 0x00	; 0
    e6f4:	90 e0       	ldi	r25, 0x00	; 0
    e6f6:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    e6fa:	67 e0       	ldi	r22, 0x07	; 7
    e6fc:	70 e0       	ldi	r23, 0x00	; 0
    e6fe:	e2 d1       	rcall	.+964    	; 0xeac4 <__udivmodhi4>
    e700:	80 93 f6 09 	sts	0x09F6, r24
			old_game_options = game_state;
    e704:	80 91 06 0a 	lds	r24, 0x0A06
    e708:	80 93 ee 0d 	sts	0x0DEE, r24
			if((GetPrngNumber(0)&3)==1){
    e70c:	80 e0       	ldi	r24, 0x00	; 0
    e70e:	90 e0       	ldi	r25, 0x00	; 0
    e710:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
    e714:	83 70       	andi	r24, 0x03	; 3
    e716:	90 70       	andi	r25, 0x00	; 0
    e718:	01 97       	sbiw	r24, 0x01	; 1
    e71a:	09 f0       	breq	.+2      	; 0xe71e <TitleScreen+0x156>
    e71c:	5b c1       	rjmp	.+694    	; 0xe9d4 <TitleScreen+0x40c>
				game_state |= DRAW_THREE;
    e71e:	80 91 06 0a 	lds	r24, 0x0A06
    e722:	81 60       	ori	r24, 0x01	; 1
    e724:	80 93 06 0a 	sts	0x0A06, r24
    e728:	55 c1       	rjmp	.+682    	; 0xe9d4 <TitleScreen+0x40c>
			}
			goto TITLEESCAPE;
		}else if((padstate & 0x7FFF)|| mousestate)//ignore MSbit which is always set if mouse plugged
    e72a:	80 91 fc 09 	lds	r24, 0x09FC
    e72e:	90 91 fd 09 	lds	r25, 0x09FD
    e732:	9f 77       	andi	r25, 0x7F	; 127
    e734:	89 2b       	or	r24, r25
    e736:	31 f4       	brne	.+12     	; 0xe744 <TitleScreen+0x17c>
    e738:	80 91 f8 09 	lds	r24, 0x09F8
    e73c:	90 91 f9 09 	lds	r25, 0x09F9
    e740:	89 2b       	or	r24, r25
    e742:	11 f0       	breq	.+4      	; 0xe748 <TitleScreen+0x180>
    e744:	c0 e0       	ldi	r28, 0x00	; 0
    e746:	d0 e0       	ldi	r29, 0x00	; 0
			idle_ticks = 0;

		Shuffle(10);
    e748:	8a e0       	ldi	r24, 0x0A	; 10
    e74a:	90 e0       	ldi	r25, 0x00	; 0
    e74c:	0e 94 68 5d 	call	0xbad0	; 0xbad0 <Shuffle>
		//UpdatePad();//done in vsync routine
		UpdateCursor(1);
    e750:	81 e0       	ldi	r24, 0x01	; 1
    e752:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <UpdateCursor>
		DrawCursor();
    e756:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>

		if((padstate & BTN_B) && !(oldpadstate & BTN_B)){
    e75a:	80 91 fc 09 	lds	r24, 0x09FC
    e75e:	80 ff       	sbrs	r24, 0
    e760:	a9 c0       	rjmp	.+338    	; 0xe8b4 <TitleScreen+0x2ec>
    e762:	80 91 fa 09 	lds	r24, 0x09FA
    e766:	80 fd       	sbrc	r24, 0
    e768:	a5 c0       	rjmp	.+330    	; 0xe8b4 <TitleScreen+0x2ec>
			if(CursorIntersects(12*8,(11-7)*8,CARD_WIDTH,CARD_HEIGHT)){//change card color
    e76a:	80 e6       	ldi	r24, 0x60	; 96
    e76c:	60 e2       	ldi	r22, 0x20	; 32
    e76e:	40 e2       	ldi	r20, 0x20	; 32
    e770:	20 e3       	ldi	r18, 0x30	; 48
    e772:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e776:	88 23       	and	r24, r24
    e778:	59 f0       	breq	.+22     	; 0xe790 <TitleScreen+0x1c8>
				if(++card_set == GFX_NUM_CARD_SETS)
    e77a:	80 91 f6 09 	lds	r24, 0x09F6
    e77e:	8f 5f       	subi	r24, 0xFF	; 255
    e780:	80 93 f6 09 	sts	0x09F6, r24
    e784:	87 30       	cpi	r24, 0x07	; 7
    e786:	09 f0       	breq	.+2      	; 0xe78a <TitleScreen+0x1c2>
    e788:	95 c0       	rjmp	.+298    	; 0xe8b4 <TitleScreen+0x2ec>
					card_set = 0;
    e78a:	10 92 f6 09 	sts	0x09F6, r1
    e78e:	92 c0       	rjmp	.+292    	; 0xe8b4 <TitleScreen+0x2ec>
			}else if(CursorIntersects(12*8,10*8,3*8,8)){//draw type ONE
    e790:	80 e6       	ldi	r24, 0x60	; 96
    e792:	60 e5       	ldi	r22, 0x50	; 80
    e794:	48 e1       	ldi	r20, 0x18	; 24
    e796:	28 e0       	ldi	r18, 0x08	; 8
    e798:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e79c:	88 23       	and	r24, r24
    e79e:	21 f0       	breq	.+8      	; 0xe7a8 <TitleScreen+0x1e0>
				game_state &= ~DRAW_THREE;
    e7a0:	80 91 06 0a 	lds	r24, 0x0A06
    e7a4:	8e 7f       	andi	r24, 0xFE	; 254
    e7a6:	0b c0       	rjmp	.+22     	; 0xe7be <TitleScreen+0x1f6>
			}else if(CursorIntersects(18*8,10*8,5*8,8)){//draw type THREE
    e7a8:	80 e9       	ldi	r24, 0x90	; 144
    e7aa:	60 e5       	ldi	r22, 0x50	; 80
    e7ac:	48 e2       	ldi	r20, 0x28	; 40
    e7ae:	28 e0       	ldi	r18, 0x08	; 8
    e7b0:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e7b4:	88 23       	and	r24, r24
    e7b6:	31 f0       	breq	.+12     	; 0xe7c4 <TitleScreen+0x1fc>
				game_state |= DRAW_THREE;
    e7b8:	80 91 06 0a 	lds	r24, 0x0A06
    e7bc:	81 60       	ori	r24, 0x01	; 1
    e7be:	80 93 06 0a 	sts	0x0A06, r24
    e7c2:	78 c0       	rjmp	.+240    	; 0xe8b4 <TitleScreen+0x2ec>
			}else if(CursorIntersects(12*8,13*8,2*8,8)){//music ON
    e7c4:	80 e6       	ldi	r24, 0x60	; 96
    e7c6:	68 e6       	ldi	r22, 0x68	; 104
    e7c8:	40 e1       	ldi	r20, 0x10	; 16
    e7ca:	28 e0       	ldi	r18, 0x08	; 8
    e7cc:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e7d0:	88 23       	and	r24, r24
    e7d2:	f9 f0       	breq	.+62     	; 0xe812 <TitleScreen+0x24a>
				if(!(game_state & NO_MUSIC)){
    e7d4:	80 91 06 0a 	lds	r24, 0x0A06
    e7d8:	84 fd       	sbrc	r24, 4
    e7da:	09 c0       	rjmp	.+18     	; 0xe7ee <TitleScreen+0x226>
					music_track++;
    e7dc:	80 91 00 0a 	lds	r24, 0x0A00
    e7e0:	8f 5f       	subi	r24, 0xFF	; 255
    e7e2:	80 93 00 0a 	sts	0x0A00, r24
					if(music_track >= NUM_MUSIC_TRACKS)
    e7e6:	86 30       	cpi	r24, 0x06	; 6
    e7e8:	10 f0       	brcs	.+4      	; 0xe7ee <TitleScreen+0x226>
						music_track = 0;
    e7ea:	10 92 00 0a 	sts	0x0A00, r1
				}
				StopSong();
    e7ee:	0e 94 be 49 	call	0x937c	; 0x937c <StopSong>
				StartSong((const char *)(pgm_read_word(&musicData[music_track])));
    e7f2:	80 91 00 0a 	lds	r24, 0x0A00
    e7f6:	e8 2f       	mov	r30, r24
    e7f8:	f0 e0       	ldi	r31, 0x00	; 0
    e7fa:	ee 0f       	add	r30, r30
    e7fc:	ff 1f       	adc	r31, r31
    e7fe:	e8 55       	subi	r30, 0x58	; 88
    e800:	fc 47       	sbci	r31, 0x7C	; 124
    e802:	85 91       	lpm	r24, Z+
    e804:	94 91       	lpm	r25, Z+
    e806:	0e 94 84 49 	call	0x9308	; 0x9308 <StartSong>
				game_state &= ~NO_MUSIC;
    e80a:	80 91 06 0a 	lds	r24, 0x0A06
    e80e:	8f 7e       	andi	r24, 0xEF	; 239
    e810:	d6 cf       	rjmp	.-84     	; 0xe7be <TitleScreen+0x1f6>
			}else if(CursorIntersects(18*8,13*8,3*8,8)){//music OFF
    e812:	80 e9       	ldi	r24, 0x90	; 144
    e814:	68 e6       	ldi	r22, 0x68	; 104
    e816:	48 e1       	ldi	r20, 0x18	; 24
    e818:	28 e0       	ldi	r18, 0x08	; 8
    e81a:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e81e:	88 23       	and	r24, r24
    e820:	41 f0       	breq	.+16     	; 0xe832 <TitleScreen+0x26a>
				game_state |= NO_MUSIC;
    e822:	80 91 06 0a 	lds	r24, 0x0A06
    e826:	80 61       	ori	r24, 0x10	; 16
    e828:	80 93 06 0a 	sts	0x0A06, r24
				StopSong();
    e82c:	0e 94 be 49 	call	0x937c	; 0x937c <StopSong>
    e830:	41 c0       	rjmp	.+130    	; 0xe8b4 <TitleScreen+0x2ec>
			}else if(CursorIntersects(5*8,22*8,4*8,8)){//save settings
    e832:	88 e2       	ldi	r24, 0x28	; 40
    e834:	60 eb       	ldi	r22, 0xB0	; 176
    e836:	40 e2       	ldi	r20, 0x20	; 32
    e838:	28 e0       	ldi	r18, 0x08	; 8
    e83a:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e83e:	88 23       	and	r24, r24
    e840:	31 f0       	breq	.+12     	; 0xe84e <TitleScreen+0x286>
				SetEEPromFlags();
    e842:	0e 94 ad 54 	call	0xa95a	; 0xa95a <SetEEPromFlags>
				EEPromScore(1);
    e846:	81 e0       	ldi	r24, 0x01	; 1
    e848:	0e 94 42 61 	call	0xc284	; 0xc284 <EEPromScore>
    e84c:	33 c0       	rjmp	.+102    	; 0xe8b4 <TitleScreen+0x2ec>
			}else if(CursorIntersects(10*8,24*8,12*8,8)){//deal hand
    e84e:	80 e5       	ldi	r24, 0x50	; 80
    e850:	60 ec       	ldi	r22, 0xC0	; 192
    e852:	40 e6       	ldi	r20, 0x60	; 96
    e854:	28 e0       	ldi	r18, 0x08	; 8
    e856:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e85a:	88 23       	and	r24, r24
    e85c:	09 f0       	breq	.+2      	; 0xe860 <TitleScreen+0x298>
    e85e:	ba c0       	rjmp	.+372    	; 0xe9d4 <TitleScreen+0x40c>
				break;
			}else if(CursorIntersects(18*8,16*8,4*8,8)){//show timer
    e860:	80 e9       	ldi	r24, 0x90	; 144
    e862:	60 e8       	ldi	r22, 0x80	; 128
    e864:	40 e2       	ldi	r20, 0x20	; 32
    e866:	28 e0       	ldi	r18, 0x08	; 8
    e868:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e86c:	88 23       	and	r24, r24
    e86e:	21 f0       	breq	.+8      	; 0xe878 <TitleScreen+0x2b0>
				game_state |= SHOW_TIMER;
    e870:	80 91 06 0a 	lds	r24, 0x0A06
    e874:	80 68       	ori	r24, 0x80	; 128
    e876:	a3 cf       	rjmp	.-186    	; 0xe7be <TitleScreen+0x1f6>
			}else if(CursorIntersects(12*8,16*8,4*8,8)){//hide timer
    e878:	80 e6       	ldi	r24, 0x60	; 96
    e87a:	60 e8       	ldi	r22, 0x80	; 128
    e87c:	40 e2       	ldi	r20, 0x20	; 32
    e87e:	28 e0       	ldi	r18, 0x08	; 8
    e880:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e884:	88 23       	and	r24, r24
    e886:	21 f0       	breq	.+8      	; 0xe890 <TitleScreen+0x2c8>
				game_state &= ~SHOW_TIMER;
    e888:	80 91 06 0a 	lds	r24, 0x0A06
    e88c:	8f 77       	andi	r24, 0x7F	; 127
    e88e:	97 cf       	rjmp	.-210    	; 0xe7be <TitleScreen+0x1f6>
			}else if(CursorIntersects(12*8,19*8,2*8,8)){//speed
    e890:	80 e6       	ldi	r24, 0x60	; 96
    e892:	68 e9       	ldi	r22, 0x98	; 152
    e894:	40 e1       	ldi	r20, 0x10	; 16
    e896:	28 e0       	ldi	r18, 0x08	; 8
    e898:	0e 94 19 5a 	call	0xb432	; 0xb432 <CursorIntersects>
    e89c:	88 23       	and	r24, r24
    e89e:	51 f0       	breq	.+20     	; 0xe8b4 <TitleScreen+0x2ec>
				if(++cursorspeed > MAX_CURSOR_SPEED)
    e8a0:	80 91 6d 0a 	lds	r24, 0x0A6D
    e8a4:	8f 5f       	subi	r24, 0xFF	; 255
    e8a6:	80 93 6d 0a 	sts	0x0A6D, r24
    e8aa:	86 30       	cpi	r24, 0x06	; 6
    e8ac:	18 f0       	brcs	.+6      	; 0xe8b4 <TitleScreen+0x2ec>
					cursorspeed = 1;
    e8ae:	81 e0       	ldi	r24, 0x01	; 1
    e8b0:	80 93 6d 0a 	sts	0x0A6D, r24
			}
		}

		if(padstate & BTN_START && !(oldpadstate & BTN_START)){
    e8b4:	80 91 fc 09 	lds	r24, 0x09FC
    e8b8:	83 ff       	sbrs	r24, 3
    e8ba:	09 c0       	rjmp	.+18     	; 0xe8ce <TitleScreen+0x306>
    e8bc:	80 91 fa 09 	lds	r24, 0x09FA
    e8c0:	83 fd       	sbrc	r24, 3
    e8c2:	05 c0       	rjmp	.+10     	; 0xe8ce <TitleScreen+0x306>
			old_card_set = card_set;
    e8c4:	80 91 f6 09 	lds	r24, 0x09F6
    e8c8:	80 93 04 0a 	sts	0x0A04, r24
    e8cc:	83 c0       	rjmp	.+262    	; 0xe9d4 <TitleScreen+0x40c>
			break;
		}

		DrawCard(12,10-7,0);
    e8ce:	8c e0       	ldi	r24, 0x0C	; 12
    e8d0:	63 e0       	ldi	r22, 0x03	; 3
    e8d2:	40 e0       	ldi	r20, 0x00	; 0
    e8d4:	0e 94 5f 55 	call	0xaabe	; 0xaabe <DrawCard>
		SPrintNum(12,13,music_track+1,0);
    e8d8:	40 91 00 0a 	lds	r20, 0x0A00
    e8dc:	50 e0       	ldi	r21, 0x00	; 0
    e8de:	4f 5f       	subi	r20, 0xFF	; 255
    e8e0:	5f 4f       	sbci	r21, 0xFF	; 255
    e8e2:	8c e0       	ldi	r24, 0x0C	; 12
    e8e4:	90 e0       	ldi	r25, 0x00	; 0
    e8e6:	6d e0       	ldi	r22, 0x0D	; 13
    e8e8:	70 e0       	ldi	r23, 0x00	; 0
    e8ea:	20 e0       	ldi	r18, 0x00	; 0
    e8ec:	74 db       	rcall	.-2328   	; 0xdfd6 <SPrintNum>
		SPrintNum(12,19,cursorspeed,0);
    e8ee:	40 91 6d 0a 	lds	r20, 0x0A6D
    e8f2:	8c e0       	ldi	r24, 0x0C	; 12
    e8f4:	90 e0       	ldi	r25, 0x00	; 0
    e8f6:	63 e1       	ldi	r22, 0x13	; 19
    e8f8:	70 e0       	ldi	r23, 0x00	; 0
    e8fa:	50 e0       	ldi	r21, 0x00	; 0
    e8fc:	20 e0       	ldi	r18, 0x00	; 0
    e8fe:	6b db       	rcall	.-2346   	; 0xdfd6 <SPrintNum>

		if(game_state & DRAW_THREE){
    e900:	80 91 06 0a 	lds	r24, 0x0A06
    e904:	80 ff       	sbrs	r24, 0
    e906:	08 c0       	rjmp	.+16     	; 0xe918 <TitleScreen+0x350>
			SetTile(17,10,CHECK_MARK_TILE);
    e908:	81 e1       	ldi	r24, 0x11	; 17
    e90a:	6a e0       	ldi	r22, 0x0A	; 10
    e90c:	4e eb       	ldi	r20, 0xBE	; 190
    e90e:	50 e0       	ldi	r21, 0x00	; 0
    e910:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(11,10,0);
    e914:	8b e0       	ldi	r24, 0x0B	; 11
    e916:	07 c0       	rjmp	.+14     	; 0xe926 <TitleScreen+0x35e>
		}else{
			SetTile(11,10,CHECK_MARK_TILE);
    e918:	8b e0       	ldi	r24, 0x0B	; 11
    e91a:	6a e0       	ldi	r22, 0x0A	; 10
    e91c:	4e eb       	ldi	r20, 0xBE	; 190
    e91e:	50 e0       	ldi	r21, 0x00	; 0
    e920:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(17,10,0);
    e924:	81 e1       	ldi	r24, 0x11	; 17
    e926:	6a e0       	ldi	r22, 0x0A	; 10
    e928:	40 e0       	ldi	r20, 0x00	; 0
    e92a:	50 e0       	ldi	r21, 0x00	; 0
    e92c:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
		}
		if(game_state & NO_MUSIC){
    e930:	80 91 06 0a 	lds	r24, 0x0A06
    e934:	84 ff       	sbrs	r24, 4
    e936:	08 c0       	rjmp	.+16     	; 0xe948 <TitleScreen+0x380>
			SetTile(17,13,CHECK_MARK_TILE);
    e938:	81 e1       	ldi	r24, 0x11	; 17
    e93a:	6d e0       	ldi	r22, 0x0D	; 13
    e93c:	4e eb       	ldi	r20, 0xBE	; 190
    e93e:	50 e0       	ldi	r21, 0x00	; 0
    e940:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(11,13,0);
    e944:	8b e0       	ldi	r24, 0x0B	; 11
    e946:	07 c0       	rjmp	.+14     	; 0xe956 <TitleScreen+0x38e>
		}else{
			SetTile(11,13,CHECK_MARK_TILE);
    e948:	8b e0       	ldi	r24, 0x0B	; 11
    e94a:	6d e0       	ldi	r22, 0x0D	; 13
    e94c:	4e eb       	ldi	r20, 0xBE	; 190
    e94e:	50 e0       	ldi	r21, 0x00	; 0
    e950:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(17,13,0);
    e954:	81 e1       	ldi	r24, 0x11	; 17
    e956:	6d e0       	ldi	r22, 0x0D	; 13
    e958:	40 e0       	ldi	r20, 0x00	; 0
    e95a:	50 e0       	ldi	r21, 0x00	; 0
    e95c:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
		}

		if(game_state & SHOW_TIMER){
    e960:	80 91 06 0a 	lds	r24, 0x0A06
    e964:	87 ff       	sbrs	r24, 7
    e966:	08 c0       	rjmp	.+16     	; 0xe978 <TitleScreen+0x3b0>
			SetTile(17,16,CHECK_MARK_TILE);
    e968:	81 e1       	ldi	r24, 0x11	; 17
    e96a:	60 e1       	ldi	r22, 0x10	; 16
    e96c:	4e eb       	ldi	r20, 0xBE	; 190
    e96e:	50 e0       	ldi	r21, 0x00	; 0
    e970:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(11,16,0);
    e974:	8b e0       	ldi	r24, 0x0B	; 11
    e976:	07 c0       	rjmp	.+14     	; 0xe986 <TitleScreen+0x3be>
		}else{
			SetTile(11,16,CHECK_MARK_TILE);
    e978:	8b e0       	ldi	r24, 0x0B	; 11
    e97a:	60 e1       	ldi	r22, 0x10	; 16
    e97c:	4e eb       	ldi	r20, 0xBE	; 190
    e97e:	50 e0       	ldi	r21, 0x00	; 0
    e980:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(17,16,0);
    e984:	81 e1       	ldi	r24, 0x11	; 17
    e986:	60 e1       	ldi	r22, 0x10	; 16
    e988:	40 e0       	ldi	r20, 0x00	; 0
    e98a:	50 e0       	ldi	r21, 0x00	; 0
    e98c:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
    e990:	1a e0       	ldi	r17, 0x0A	; 10
		}


		for(uint8_t i=10;i<23;i++)
			SetTile(i,24,0);
    e992:	81 2f       	mov	r24, r17
    e994:	68 e1       	ldi	r22, 0x18	; 24
    e996:	40 e0       	ldi	r20, 0x00	; 0
    e998:	50 e0       	ldi	r21, 0x00	; 0
    e99a:	0e 94 fa 46 	call	0x8df4	; 0x8df4 <SetTile>
			SetTile(11,16,CHECK_MARK_TILE);
			SetTile(17,16,0);
		}


		for(uint8_t i=10;i<23;i++)
    e99e:	1f 5f       	subi	r17, 0xFF	; 255
    e9a0:	17 31       	cpi	r17, 0x17	; 23
    e9a2:	b9 f7       	brne	.-18     	; 0xe992 <TitleScreen+0x3ca>
			SetTile(i,24,0);
		if(++flash > 160)
    e9a4:	f3 94       	inc	r15
    e9a6:	80 ea       	ldi	r24, 0xA0	; 160
    e9a8:	8f 15       	cp	r24, r15
    e9aa:	50 f0       	brcs	.+20     	; 0xe9c0 <TitleScreen+0x3f8>
			flash = 0;
		if(flash  > 80)
    e9ac:	80 e5       	ldi	r24, 0x50	; 80
    e9ae:	8f 15       	cp	r24, r15
    e9b0:	40 f4       	brcc	.+16     	; 0xe9c2 <TitleScreen+0x3fa>
			SPrint(10,24,PSTR("TO DEAL HAND"));
    e9b2:	8a e0       	ldi	r24, 0x0A	; 10
    e9b4:	90 e0       	ldi	r25, 0x00	; 0
    e9b6:	68 e1       	ldi	r22, 0x18	; 24
    e9b8:	70 e0       	ldi	r23, 0x00	; 0
    e9ba:	41 e0       	ldi	r20, 0x01	; 1
    e9bc:	55 e8       	ldi	r21, 0x85	; 133
    e9be:	07 c0       	rjmp	.+14     	; 0xe9ce <TitleScreen+0x406>
    e9c0:	ff 24       	eor	r15, r15
		else
			SPrint(10,24,PSTR(" CLICK HERE"));
    e9c2:	8a e0       	ldi	r24, 0x0A	; 10
    e9c4:	90 e0       	ldi	r25, 0x00	; 0
    e9c6:	68 e1       	ldi	r22, 0x18	; 24
    e9c8:	70 e0       	ldi	r23, 0x00	; 0
    e9ca:	45 ef       	ldi	r20, 0xF5	; 245
    e9cc:	54 e8       	ldi	r21, 0x84	; 132
    e9ce:	0e 94 44 53 	call	0xa688	; 0xa688 <SPrint>
    e9d2:	55 ce       	rjmp	.-854    	; 0xe67e <TitleScreen+0xb6>
	}
TITLEESCAPE:
	FadeOut(3,false);
    e9d4:	83 e0       	ldi	r24, 0x03	; 3
    e9d6:	60 e0       	ldi	r22, 0x00	; 0
    e9d8:	0e 94 3a 52 	call	0xa474	; 0xa474 <FadeOut>
    e9dc:	0d c0       	rjmp	.+26     	; 0xe9f8 <TitleScreen+0x430>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    e9de:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    e9e2:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    e9e6:	81 e0       	ldi	r24, 0x01	; 1
    e9e8:	90 e0       	ldi	r25, 0x00	; 0
    e9ea:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	while(DDRC){
		SWaitVsync(1);
		UpdateCursor(1);
    e9ee:	81 e0       	ldi	r24, 0x01	; 1
    e9f0:	0e 94 ce 66 	call	0xcd9c	; 0xcd9c <UpdateCursor>
		DrawCursor();
    e9f4:	0e 94 79 59 	call	0xb2f2	; 0xb2f2 <DrawCursor>
		else
			SPrint(10,24,PSTR(" CLICK HERE"));
	}
TITLEESCAPE:
	FadeOut(3,false);
	while(DDRC){
    e9f8:	87 b1       	in	r24, 0x07	; 7
    e9fa:	88 23       	and	r24, r24
    e9fc:	81 f7       	brne	.-32     	; 0xe9de <TitleScreen+0x416>
			game_state = old_game_options;
			goto TITLEREENTRY;
		}
*/
	}
	FadeIn(2,false);
    e9fe:	82 e0       	ldi	r24, 0x02	; 2
    ea00:	60 e0       	ldi	r22, 0x00	; 0
    ea02:	0e 94 22 52 	call	0xa444	; 0xa444 <FadeIn>
}
    ea06:	cd b7       	in	r28, 0x3d	; 61
    ea08:	de b7       	in	r29, 0x3e	; 62
    ea0a:	e6 e0       	ldi	r30, 0x06	; 6
    ea0c:	aa c0       	rjmp	.+340    	; 0xeb62 <__epilogue_restores__+0x18>

0000ea0e <main>:
}

void main(void) __attribute__((noreturn));
void main(){

	GetPrngNumber(GetTrueRandomSeed());//seed LFSR
    ea0e:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <GetTrueRandomSeed>
    ea12:	0e 94 c2 47 	call	0x8f84	; 0x8f84 <GetPrngNumber>
	Shuffle(233);//scramble the deck
    ea16:	89 ee       	ldi	r24, 0xE9	; 233
    ea18:	90 e0       	ldi	r25, 0x00	; 0
    ea1a:	0e 94 68 5d 	call	0xbad0	; 0xbad0 <Shuffle>
	InitMusicPlayer(patches);
    ea1e:	8f eb       	ldi	r24, 0xBF	; 191
    ea20:	97 e0       	ldi	r25, 0x07	; 7
    ea22:	0e 94 6a 49 	call	0x92d4	; 0x92d4 <InitMusicPlayer>
	SetTileTable((const char *)TableTiles);
    ea26:	88 e2       	ldi	r24, 0x28	; 40
    ea28:	9f e4       	ldi	r25, 0x4F	; 79
    ea2a:	0e 94 08 47 	call	0x8e10	; 0x8e10 <SetTileTable>
	SetSpritesTileTable(Sprites);
    ea2e:	88 e2       	ldi	r24, 0x28	; 40
    ea30:	9f e7       	ldi	r25, 0x7F	; 127
    ea32:	0e 94 e7 46 	call	0x8dce	; 0x8dce <SetSpritesTileTable>
	SetMasterVolume(224);
    ea36:	80 ee       	ldi	r24, 0xE0	; 224
    ea38:	0e 94 ee 49 	call	0x93dc	; 0x93dc <SetMasterVolume>
//	SetUserPostVsyncCallback(&PostVSRoutine);
//	SetUserPreVsyncCallback(&PreVSRoutine);
	SetInitialStacksState();
    ea3c:	0e 94 f7 5c 	call	0xb9ee	; 0xb9ee <SetInitialStacksState>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    ea40:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    ea44:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    ea48:	81 e0       	ldi	r24, 0x01	; 1
    ea4a:	90 e0       	ldi	r25, 0x00	; 0
    ea4c:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>

	SWaitVsync(1);
	EEPromScore(0);//read the eeprom data into the ram buffer(this include preferences and high scores)
    ea50:	80 e0       	ldi	r24, 0x00	; 0
    ea52:	0e 94 42 61 	call	0xc284	; 0xc284 <EEPromScore>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    ea56:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    ea5a:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    ea5e:	81 e0       	ldi	r24, 0x01	; 1
    ea60:	90 e0       	ldi	r25, 0x00	; 0
    ea62:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	SWaitVsync(1);
	GetEEPromFlags();//load up scores and graphics/sound preferences
    ea66:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <GetEEPromFlags>
}

void UpdateUzenet();

inline void SWaitVsync(uint8_t frames){
	UpdatePads();
    ea6a:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <UpdatePads>
//	if(TCNT1 < 1000UL)
		UpdateUzenet();
    ea6e:	0e 94 b6 61 	call	0xc36c	; 0xc36c <UpdateUzenet>
//	if(ReadPowerSwitch())
//		SoftReset();
	WaitVsync(frames);
    ea72:	81 e0       	ldi	r24, 0x01	; 1
    ea74:	90 e0       	ldi	r25, 0x00	; 0
    ea76:	0e 94 77 52 	call	0xa4ee	; 0xa4ee <WaitVsync>
	SWaitVsync(1);


	if(!(game_state & NO_MUSIC))
    ea7a:	80 91 06 0a 	lds	r24, 0x0A06
    ea7e:	84 fd       	sbrc	r24, 4
    ea80:	0c c0       	rjmp	.+24     	; 0xea9a <main+0x8c>
		StartSong((const char *)(pgm_read_word(&musicData[music_track])));
    ea82:	80 91 00 0a 	lds	r24, 0x0A00
    ea86:	e8 2f       	mov	r30, r24
    ea88:	f0 e0       	ldi	r31, 0x00	; 0
    ea8a:	ee 0f       	add	r30, r30
    ea8c:	ff 1f       	adc	r31, r31
    ea8e:	e8 55       	subi	r30, 0x58	; 88
    ea90:	fc 47       	sbci	r31, 0x7C	; 124
    ea92:	85 91       	lpm	r24, Z+
    ea94:	94 91       	lpm	r25, Z+
    ea96:	0e 94 84 49 	call	0x9308	; 0x9308 <StartSong>
	
	Intro();
    ea9a:	fd d8       	rcall	.-3590   	; 0xdc96 <Intro>
	while(1){
		demo_playing = 0;
    ea9c:	10 92 f7 09 	sts	0x09F7, r1
		TitleScreen();
    eaa0:	93 dd       	rcall	.-1242   	; 0xe5c8 <TitleScreen>
		if(GameLoop())
    eaa2:	a9 dc       	rcall	.-1710   	; 0xe3f6 <GameLoop>
    eaa4:	88 23       	and	r24, r24
    eaa6:	d1 f3       	breq	.-12     	; 0xea9c <main+0x8e>
			HighScoreScreen();
    eaa8:	22 da       	rcall	.-3004   	; 0xdeee <HighScoreScreen>
    eaaa:	f8 cf       	rjmp	.-16     	; 0xea9c <main+0x8e>

0000eaac <__udivmodqi4>:
    eaac:	99 1b       	sub	r25, r25
    eaae:	79 e0       	ldi	r23, 0x09	; 9
    eab0:	04 c0       	rjmp	.+8      	; 0xeaba <__udivmodqi4_ep>

0000eab2 <__udivmodqi4_loop>:
    eab2:	99 1f       	adc	r25, r25
    eab4:	96 17       	cp	r25, r22
    eab6:	08 f0       	brcs	.+2      	; 0xeaba <__udivmodqi4_ep>
    eab8:	96 1b       	sub	r25, r22

0000eaba <__udivmodqi4_ep>:
    eaba:	88 1f       	adc	r24, r24
    eabc:	7a 95       	dec	r23
    eabe:	c9 f7       	brne	.-14     	; 0xeab2 <__udivmodqi4_loop>
    eac0:	80 95       	com	r24
    eac2:	08 95       	ret

0000eac4 <__udivmodhi4>:
    eac4:	aa 1b       	sub	r26, r26
    eac6:	bb 1b       	sub	r27, r27
    eac8:	51 e1       	ldi	r21, 0x11	; 17
    eaca:	07 c0       	rjmp	.+14     	; 0xeada <__udivmodhi4_ep>

0000eacc <__udivmodhi4_loop>:
    eacc:	aa 1f       	adc	r26, r26
    eace:	bb 1f       	adc	r27, r27
    ead0:	a6 17       	cp	r26, r22
    ead2:	b7 07       	cpc	r27, r23
    ead4:	10 f0       	brcs	.+4      	; 0xeada <__udivmodhi4_ep>
    ead6:	a6 1b       	sub	r26, r22
    ead8:	b7 0b       	sbc	r27, r23

0000eada <__udivmodhi4_ep>:
    eada:	88 1f       	adc	r24, r24
    eadc:	99 1f       	adc	r25, r25
    eade:	5a 95       	dec	r21
    eae0:	a9 f7       	brne	.-22     	; 0xeacc <__udivmodhi4_loop>
    eae2:	80 95       	com	r24
    eae4:	90 95       	com	r25
    eae6:	bc 01       	movw	r22, r24
    eae8:	cd 01       	movw	r24, r26
    eaea:	08 95       	ret

0000eaec <__divmodhi4>:
    eaec:	97 fb       	bst	r25, 7
    eaee:	09 2e       	mov	r0, r25
    eaf0:	07 26       	eor	r0, r23
    eaf2:	0a d0       	rcall	.+20     	; 0xeb08 <__divmodhi4_neg1>
    eaf4:	77 fd       	sbrc	r23, 7
    eaf6:	04 d0       	rcall	.+8      	; 0xeb00 <__divmodhi4_neg2>
    eaf8:	e5 df       	rcall	.-54     	; 0xeac4 <__udivmodhi4>
    eafa:	06 d0       	rcall	.+12     	; 0xeb08 <__divmodhi4_neg1>
    eafc:	00 20       	and	r0, r0
    eafe:	1a f4       	brpl	.+6      	; 0xeb06 <__divmodhi4_exit>

0000eb00 <__divmodhi4_neg2>:
    eb00:	70 95       	com	r23
    eb02:	61 95       	neg	r22
    eb04:	7f 4f       	sbci	r23, 0xFF	; 255

0000eb06 <__divmodhi4_exit>:
    eb06:	08 95       	ret

0000eb08 <__divmodhi4_neg1>:
    eb08:	f6 f7       	brtc	.-4      	; 0xeb06 <__divmodhi4_exit>
    eb0a:	90 95       	com	r25
    eb0c:	81 95       	neg	r24
    eb0e:	9f 4f       	sbci	r25, 0xFF	; 255
    eb10:	08 95       	ret

0000eb12 <__prologue_saves__>:
    eb12:	2f 92       	push	r2
    eb14:	3f 92       	push	r3
    eb16:	4f 92       	push	r4
    eb18:	5f 92       	push	r5
    eb1a:	6f 92       	push	r6
    eb1c:	7f 92       	push	r7
    eb1e:	8f 92       	push	r8
    eb20:	9f 92       	push	r9
    eb22:	af 92       	push	r10
    eb24:	bf 92       	push	r11
    eb26:	cf 92       	push	r12
    eb28:	df 92       	push	r13
    eb2a:	ef 92       	push	r14
    eb2c:	ff 92       	push	r15
    eb2e:	0f 93       	push	r16
    eb30:	1f 93       	push	r17
    eb32:	cf 93       	push	r28
    eb34:	df 93       	push	r29
    eb36:	cd b7       	in	r28, 0x3d	; 61
    eb38:	de b7       	in	r29, 0x3e	; 62
    eb3a:	ca 1b       	sub	r28, r26
    eb3c:	db 0b       	sbc	r29, r27
    eb3e:	0f b6       	in	r0, 0x3f	; 63
    eb40:	f8 94       	cli
    eb42:	de bf       	out	0x3e, r29	; 62
    eb44:	0f be       	out	0x3f, r0	; 63
    eb46:	cd bf       	out	0x3d, r28	; 61
    eb48:	09 94       	ijmp

0000eb4a <__epilogue_restores__>:
    eb4a:	2a 88       	ldd	r2, Y+18	; 0x12
    eb4c:	39 88       	ldd	r3, Y+17	; 0x11
    eb4e:	48 88       	ldd	r4, Y+16	; 0x10
    eb50:	5f 84       	ldd	r5, Y+15	; 0x0f
    eb52:	6e 84       	ldd	r6, Y+14	; 0x0e
    eb54:	7d 84       	ldd	r7, Y+13	; 0x0d
    eb56:	8c 84       	ldd	r8, Y+12	; 0x0c
    eb58:	9b 84       	ldd	r9, Y+11	; 0x0b
    eb5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    eb5c:	b9 84       	ldd	r11, Y+9	; 0x09
    eb5e:	c8 84       	ldd	r12, Y+8	; 0x08
    eb60:	df 80       	ldd	r13, Y+7	; 0x07
    eb62:	ee 80       	ldd	r14, Y+6	; 0x06
    eb64:	fd 80       	ldd	r15, Y+5	; 0x05
    eb66:	0c 81       	ldd	r16, Y+4	; 0x04
    eb68:	1b 81       	ldd	r17, Y+3	; 0x03
    eb6a:	aa 81       	ldd	r26, Y+2	; 0x02
    eb6c:	b9 81       	ldd	r27, Y+1	; 0x01
    eb6e:	ce 0f       	add	r28, r30
    eb70:	d1 1d       	adc	r29, r1
    eb72:	0f b6       	in	r0, 0x3f	; 63
    eb74:	f8 94       	cli
    eb76:	de bf       	out	0x3e, r29	; 62
    eb78:	0f be       	out	0x3f, r0	; 63
    eb7a:	cd bf       	out	0x3d, r28	; 61
    eb7c:	ed 01       	movw	r28, r26
    eb7e:	08 95       	ret

0000eb80 <_exit>:
    eb80:	f8 94       	cli

0000eb82 <__stop_program>:
    eb82:	ff cf       	rjmp	.-2      	; 0xeb82 <__stop_program>
