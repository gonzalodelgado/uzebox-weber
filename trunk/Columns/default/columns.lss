
columns.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000e86c  0000e96c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e86c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ed6  00800120  00800120  0000e980  2**5
                  ALLOC
  3 .debug_aranges 00000558  00000000  00000000  0000e970  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000130c  00000000  00000000  0000eec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000736f  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c3b  00000000  00000000  00017543  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000054b7  00000000  00000000  0001817e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000890  00000000  00000000  0001d638  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000165c  00000000  00000000  0001dec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004f95  00000000  00000000  0001f524  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b80  00000000  00000000  000244c0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 f5 44 	jmp	0x89ea	; 0x89ea <__ctors_end>

void SetSongTempo(int t){
	songTempo = t;
}

int GetSongTempo(){
       4:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
       8:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
		return pos+rtl_FontStartOffset;
	}
}


uint8_t rtl_SearchCharList(int8_t ch, const int8_t *chrlst){
       c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      10:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      14:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      18:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      1c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      20:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      24:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      28:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      2c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      30:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      34:	0c 94 a2 46 	jmp	0x8d44	; 0x8d44 <__vector_13>
      38:	0c 94 df 46 	jmp	0x8dbe	; 0x8dbe <__vector_14>
      3c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      40:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      44:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      48:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      4c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      50:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      54:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      58:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      5c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      60:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      64:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      68:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>
      6c:	0c 94 5d 45 	jmp	0x8aba	; 0x8aba <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	3f 4a 42 4a a1 4e 2a 4b 24 4b 4b 4a 50 4a 55 4a     ?JBJ.N*K$KKJPJUJ
      ce:	16 4b 58 4a 5b 4a 5e 4a a2 4a                       .KXJ[J^J.J

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <ColumnsTiles>:
	...
     124:	06 07 03 00 00 02 03 03 57 07 05 03 00 00 02 03     ........W.......
     134:	06 05 06 05 01 00 01 00 05 05 06 06 04 01 00 01     ................
     144:	05 05 06 07 06 02 00 01 05 05 05 06 05 03 01 00     ................
     154:	04 05 05 05 03 02 01 00 04 04 04 04 01 01 03 03     ................
     164:	03 01 01 05 06 06 03 00 01 00 03 57 06 06 05 02     ...........W....
     174:	01 02 07 57 05 06 07 04 02 06 57 06 05 05 06 0f     ...W......W.....
     184:	02 07 57 06 05 05 05 06 01 04 05 05 05 05 04 04     ..W.............
     194:	00 02 04 05 04 05 04 03 01 01 03 04 04 04 03 03     ................
     1a4:	02 02 04 04 02 00 04 57 01 02 04 03 01 03 57 ff     .......W......W.
     1b4:	01 01 02 02 02 57 ff a7 03 01 01 02 07 af 57 06     .....W........W.
     1c4:	05 02 01 01 07 56 06 05 04 02 00 01 03 05 05 06     .....V..........
     1d4:	02 02 02 01 01 03 05 05 01 04 06 02 00 03 03 04     ................
     1e4:	02 03 02 00 02 07 a7 07 02 02 01 00 05 af 07 0f     ................
     1f4:	00 01 00 02 07 56 06 05 00 01 01 03 07 06 04 05     .....V..........
     204:	00 01 02 03 06 05 05 05 01 01 02 03 03 04 05 05     ................
     214:	01 01 00 02 02 04 05 05 02 03 00 01 02 03 03 05     ................
     224:	04 01 01 02 03 03 02 00 0f 03 01 01 03 02 00 03     ................
     234:	06 05 03 01 02 00 02 07 05 05 04 02 01 01 06 af     ................
     244:	06 06 04 02 00 01 03 0f 05 05 05 02 00 00 03 05     ................
     254:	05 04 03 00 01 00 01 03 04 03 02 00 05 02 01 03     ................
     264:	04 a7 57 06 03 00 02 03 56 5e 07 06 05 01 01 02     ..W.....V^......
     274:	5f 07 05 06 06 03 00 00 07 04 05 06 07 05 02 00     _...............
     284:	06 05 06 05 05 05 03 01 05 05 06 05 04 04 03 01     ................
     294:	05 05 05 04 04 03 01 01 03 04 04 04 04 02 01 02     ................
     2a4:	e5 e5 93 8a 8a dc dc dc dc 93 8a dc e5 8a dc 93     ................
     2b4:	93 8a dc dc dc e5 8a dc 8a dc 93 dc 93 dc e5 8a     ................
     2c4:	8a 93 dc e5 dc dc dc e5 f7 8a 93 dc dc 93 dc dc     ................
     2d4:	e5 f7 8a 93 dc dc dc e5 dc e5 dc 8a 93 dc dc dc     ................
     2e4:	93 8a e5 8a 8a 93 dc dc 93 93 8a dc e5 8a 93 dc     ................
     2f4:	93 8a dc 93 e5 e5 8a 93 8a dc dc dc dc 93 e5 8a     ................
     304:	dc dc dc e5 dc dc 93 8a dc e5 dc dc dc 93 8a f7     ................
     314:	dc dc 93 dc 93 8a f7 e5 dc 93 dc 93 8a f7 e5 e5     ................
     324:	e5 dc 93 8a 8a 93 dc dc dc 93 8a f7 f7 8a 93 dc     ................
     334:	93 8a f7 e5 e5 f7 8a 93 8a f7 ee e5 e5 ee f7 8a     ................
     344:	8a dc e5 ee dc e5 e5 f7 e5 8a dc e5 e5 ee e5 e5     ................
     354:	e5 e5 8a dc e5 e5 dc ee dc dc e5 8a dc e5 ee e5     ................
     364:	e5 dc 93 8a 8a 93 dc e5 dc 93 8a f7 f7 8a 93 dc     ................
     374:	93 8a f7 e5 e5 f7 8a 93 8a f7 e5 e5 ee e5 f7 8a     ................
     384:	f7 e5 e5 e5 dc e5 dc 8a e5 dc e5 e5 e5 dc 8a dc     ................
     394:	e5 e5 ee e5 dc 8a dc dc dc ee e5 dc 8a dc dc dc     ................
     3a4:	93 dc 93 8a e5 dc dc dc 93 93 8a e5 dc dc 93 e5     ................
     3b4:	93 8a e5 dc dc dc dc dc 8a e5 dc 93 e5 dc dc 93     ................
     3c4:	8a 93 dc dc dc dc 93 8a f7 8a 93 dc dc 93 8a f7     ................
     3d4:	e5 f7 8a 93 93 8a f7 e5 e5 e5 f7 8a 8a f7 dc e5     ................
     3e4:	dc dc dc e5 8a dc e5 e5 dc 93 dc dc e5 8a dc dc     ................
     3f4:	dc dc e5 dc dc e5 8a dc 93 dc dc 93 dc dc e5 8a     ................
     404:	8a 93 dc dc dc dc 93 8a 8a 8a 93 dc dc 93 8a e5     ................
     414:	93 8a 8a 93 93 8a e5 e5 e5 93 8a 8a 8a e5 e5 e5     ................
     424:	dc dc 93 8a f7 e5 e5 e5 dc 93 8a f7 e5 ee e5 ee     ................
     434:	93 8a f7 e5 dc e5 e5 dc 8a dc e5 e5 e5 e5 dc 93     ................
     444:	8a 93 dc ee e5 dc 93 8a f7 8a 93 dc dc 93 8a e5     ................
     454:	e5 f7 8a 93 93 8a e5 dc e5 e5 dc 8a 93 e5 dc dc     ................
     464:	e5 e5 e5 f7 8a 93 e5 dc e5 e5 e5 e5 f7 8a 93 dc     ................
     474:	dc ee e5 dc e5 f7 8a 93 93 dc e5 e5 e5 dc dc 8a     ................
     484:	8a 93 dc ee dc 93 8a f7 e5 8a 93 dc 93 8a f7 ee     ................
     494:	dc e5 8a 93 8a f7 ee dc 93 dc e5 8a f7 ee e5 e5     ................
     4a4:	93 dc 93 8a e5 dc dc dc 93 93 8a e5 dc dc 93 e5     ................
     4b4:	dc 8a e5 dc dc dc dc dc 8a e5 dc 93 e5 dc dc 93     ................
     4c4:	8a 93 dc dc dc dc 93 8a f7 8a 93 dc dc 93 8a f7     ................
     4d4:	e5 f7 8a 93 93 8a f7 e5 e5 e5 f7 8a 8a f7 dc e5     ................
     4e4:	dc dc dc e5 8a dc e5 e5 dc 93 dc dc e5 8a dc dc     ................
     4f4:	dc dc e5 dc dc e5 8a dc 93 dc dc 93 dc dc e5 8a     ................
     504:	8a 93 dc dc dc dc 93 8a 8a 8a 93 dc dc 93 8a e5     ................
     514:	93 8a 8a 93 93 8a e5 e5 93 93 8a 8a 8a e5 e5 e5     ................
	...
     530:	04 04 04 04 00 00 00 04 0f ff ff a7 00 00 04 0f     ................
     540:	ff ff ff a7 00 04 0f ff ff ff a7 a7 00 04 0f ff     ................
     550:	ff a7 a7 0f 00 04 03 a7 a7 a7 0f 04 00 04 03 04     ................
     560:	0f 0f 04 04 00 00 00 00 00 00 00 00 04 04 04 04     ................
     570:	00 00 00 00 04 04 03 03 04 00 00 00 04 04 04 04     ................
     580:	03 04 00 00 0f 0f 04 04 04 03 04 00 0f 0f 0f 04     ................
     590:	04 04 04 00 0f 0f 0f 0f 04 04 04 00 04 0f 0f 0f     ................
     5a0:	04 04 04 00 00 04 03 03 04 04 04 04 00 04 03 03     ................
     5b0:	03 03 04 04 00 04 04 03 03 03 04 04 00 04 0f 04     ................
     5c0:	04 04 04 04 00 04 04 0f 04 04 04 0f 00 00 04 04     ................
     5d0:	0f 0f 0f 0f 00 00 00 04 04 04 04 03 00 00 00 00     ................
     5e0:	04 04 04 04 04 0f 0f 0f 04 04 04 00 04 0f 0f 0f     ................
     5f0:	04 04 04 00 04 0f 0f a7 04 04 04 00 0f 0f a7 a7     ................
     600:	04 04 04 00 0f a7 a7 04 04 03 04 00 0f 04 04 04     ................
     610:	03 04 00 00 03 03 03 03 04 00 00 00 04 04 04 04     ................
	...
     628:	00 00 00 27 00 00 00 00 00 0f 27 77 00 00 00 0f     ...'......'w....
     638:	0f ff ff 27 00 0f 0f 77 77 27 27 0f 00 0f 77 27     ...'...ww''...w'
     648:	27 0f 0f 04 00 0f 27 0f 0f 04 04 04 00 0f 27 0f     '.....'.......'.
     658:	04 04 04 04 00 0f 27 0f 04 04 04 04 27 00 00 00     ......'.....'...
     668:	00 00 00 00 27 27 27 00 00 00 00 00 0f 27 27 27     ....'''......'''
     678:	27 00 00 00 0f 0f 0f 27 27 0f 0f 00 27 0f 0f 0f     '......''...'...
     688:	0f 77 0f 00 27 77 27 0f 0f 27 0f 00 27 ff ff 27     .w..'w'..'..'..'
     698:	27 0f 0f 00 0f 27 27 27 27 77 0f 00 00 0f 27 0f     '....''''w....'.
     6a8:	0f 0f 0f 0f 00 0f 27 0f 0f 27 27 0f 00 0f 27 0f     ......'..''...'.
     6b8:	0f 27 77 0f 00 0f 27 27 27 0f 0f 0f 00 04 04 77     .'w...'''......w
     6c8:	77 27 27 0f 00 00 00 04 04 77 77 0f 00 00 00 00     w''......ww.....
     6d8:	00 04 04 27 00 00 00 00 00 00 00 04 04 04 04 04     ...'............
     6e8:	0f 77 0f 00 04 04 04 04 0f 77 0f 00 04 04 04 0f     .w.......w......
     6f8:	0f 27 0f 00 04 0f 0f 0f 0f 27 0f 00 0f 0f 0f 27     .'.......'.....'
     708:	27 04 04 00 0f 27 27 04 04 00 00 00 27 04 04 00     '....''.....'...
     718:	00 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00     ................
     728:	00 00 00 00 00 00 00 26 37 37 b6 b6 00 00 26 3f     .......&77....&?
     738:	3f 26 26 26 00 26 1e 1e 37 26 1e 1e 00 26 ff ff     ?&&&.&..7&...&..
     748:	26 1e 1e 1e 00 26 ff ff 26 ff ff 3f 00 26 b6 b6     &....&..&..?.&..
     758:	26 ff ff 26 00 26 1e 1e 26 1e 1e 1e 00 00 00 00     &..&.&..&.......
     768:	00 00 00 00 ff ff ff b6 26 00 00 00 26 37 3f ff     ........&...&7?.
     778:	b6 26 00 00 1e 26 37 3f 3f 3f 26 00 37 37 26 26     .&...&7???&.77&&
     788:	3f 3f 26 00 26 26 3f 3f 26 26 26 00 3f 3f 3f 26     ??&.&&??&&&.???&
     798:	1e 1e 26 00 26 26 26 1e 1e 1e 26 00 00 26 1e 26     ..&.&&&...&..&.&
     7a8:	26 1e 1e 1e 00 26 26 37 26 1e 1e 1e 00 26 37 3f     &....&&7&....&7?
     7b8:	26 26 1e 1e 00 26 b6 37 37 26 26 26 00 26 b6 3f     &&...&.77&&&.&.?
     7c8:	37 37 26 26 00 26 b6 b6 3f 37 26 26 00 00 26 b6     77&&.&..?7&&..&.
     7d8:	b6 26 1e 1e 00 00 00 26 26 26 26 26 1e 1e 26 1e     .&.....&&&&&..&.
     7e8:	26 1e 26 00 1e 1e 26 1e 26 1e 26 00 1e 1e 26 1e     &.&...&.&.&...&.
     7f8:	26 26 26 00 26 26 26 26 26 37 26 00 26 37 37 37     &&&.&&&&&7&.&777
     808:	3f 3f 26 00 37 37 37 3f 3f 3f 26 00 1e 1e 26 3f     ??&.777???&...&?
     818:	3f 26 00 00 26 26 26 26 26 00 00 00 00 00 00 00     ?&..&&&&&.......
     828:	00 00 00 00 00 00 00 21 21 21 21 21 00 00 21 b9     .......!!!!!..!.
     838:	18 21 30 30 00 21 b9 ff 18 18 21 30 00 21 18 18     .!00.!....!0.!..
     848:	b9 18 ff f0 00 21 21 18 ff 21 18 18 00 30 21 18     .....!!..!...0!.
     858:	ff 18 18 18 00 b9 21 21 ff 18 18 18 00 00 00 00     ......!!........
     868:	00 00 00 00 30 30 30 21 21 00 00 00 b9 30 21 30     ....000!!....0!0
     878:	b9 21 00 00 b9 30 21 f0 f0 b9 21 00 30 30 21 b9     .!...0!...!.00!.
     888:	f0 30 21 00 18 18 21 b9 21 18 30 00 18 21 18 30     .0!...!.!.0..!.0
     898:	21 18 30 00 21 30 21 30 21 18 30 00 00 b9 30 21     !.0.!0!0!.0...0!
     8a8:	b9 18 18 18 00 30 f0 21 b9 18 18 21 00 30 f0 21     .....0.!...!.0.!
     8b8:	f0 21 18 18 00 30 b9 30 21 21 21 21 00 21 18 30     .!...0.0!!!!.!.0
     8c8:	18 18 18 18 00 21 18 18 21 21 21 21 00 00 21 18     .....!..!!!!..!.
     8d8:	18 18 18 18 00 00 00 21 21 30 30 b9 21 30 21 30     .......!!00.!0!0
     8e8:	21 21 30 00 21 21 18 30 21 21 30 00 18 18 21 b9     !!0.!!.0!!0...!.
     8f8:	21 21 30 00 30 30 b9 30 30 30 30 00 21 21 30 30     !!0.00.0000.!!00
     908:	f0 30 21 00 30 30 21 f0 f0 b9 21 00 21 21 21 21     .0!.00!...!.!!!!
     918:	b9 21 00 00 f0 b9 30 21 21 00 00 00 00 00 00 00     .!....0!!.......
     928:	00 00 00 00 00 00 d9 ff f0 f0 e3 e3 00 d9 ff d9     ................
     938:	d9 e3 e3 d9 00 d9 ff ff d9 e3 f4 e3 00 d9 f0 ff     ................
     948:	f0 e3 ff f4 00 d9 f4 f4 f0 ff ff ff 00 d9 f0 f4     ................
     958:	f0 e3 f4 e3 00 d9 e3 f0 f0 e3 f4 d9 00 00 00 00     ................
     968:	00 00 00 00 e3 e3 f0 f0 ff d9 00 00 d9 d9 e3 e3     ................
     978:	e3 ff d9 00 e3 e3 f4 f0 ff ff d9 00 f4 f4 ff ff     ................
     988:	ff f0 d9 00 ff ff ff ff f4 f0 d9 00 e3 e3 f4 e3     ................
     998:	f4 f0 d9 00 e3 d9 f4 e3 f0 e3 d9 00 00 d9 d9 e3     ................
     9a8:	f0 e3 f0 d9 00 d9 48 d9 f0 e3 e3 d9 00 d9 48 48     ......H.......HH
     9b8:	d9 d9 e3 d9 00 d9 48 48 e3 d9 d9 e3 00 e3 48 d9     ......HH......H.
     9c8:	d9 d9 e3 e3 00 e3 d9 e3 d9 f0 f0 f4 00 e3 d9 d9     ................
     9d8:	f4 f0 e3 d9 00 00 e3 e3 e3 e3 e3 e3 d9 d9 f0 e3     ................
     9e8:	f0 e3 d9 00 d9 d9 f0 e3 e3 d9 d9 00 d9 d9 f0 e3     ................
     9f8:	d9 48 d9 00 e3 d9 d9 d9 48 48 d9 00 e3 e3 d9 48     .H......HH.....H
     a08:	d9 48 e3 00 f4 f0 f0 d9 e3 d9 e3 00 d9 e3 f0 f0     .H..............
     a18:	d9 d9 e3 00 e3 e3 e3 e3 e3 e3 00 00 00 00 00 00     ................
     a28:	00 00 00 00 00 00 00 84 84 cf e7 e7 00 00 00 84     ................
     a38:	84 cf 43 ff 00 00 84 43 cf cf 43 e6 00 00 84 43     ..C....C..C....C
     a48:	cf 84 43 84 00 84 43 e7 84 43 43 84 00 84 43 e6     ..C...C..CC...C.
     a58:	43 43 43 84 84 43 43 ff 43 84 84 84 00 00 00 00     CCC..CC.C.......
     a68:	00 00 00 00 e7 e7 cf 84 84 00 00 00 ff ff 43 43     ..............CC
     a78:	84 00 00 00 e6 e6 84 43 e6 84 00 00 cf cf 84 84     .......C........
     a88:	e6 84 00 00 cf ff e7 84 84 43 84 00 cf e6 e7 84     .........C......
     a98:	84 43 84 00 cf cf e7 84 84 43 43 84 84 43 43 ff     .C.......CC..CC.
     aa8:	43 cf 84 84 84 43 43 ff 43 cf 84 84 00 84 43 e6     C....CC.C.....C.
     ab8:	43 e7 cf 84 00 84 43 e6 cf e7 cf 84 00 00 84 43     C.....C........C
     ac8:	cf e7 e7 43 00 00 84 43 43 e7 ff 43 00 00 00 84     ...C...CC..C....
     ad8:	43 ff ff ff 00 00 00 84 84 84 84 84 84 84 cf 84     C...............
     ae8:	84 43 43 84 84 84 cf 84 84 43 43 84 84 84 cf 84     .CC......CC.....
     af8:	84 43 84 00 84 84 cf 84 cf 43 84 00 84 84 cf cf     .C.......C......
     b08:	e7 84 00 00 43 84 e7 e7 43 84 00 00 43 43 43 43     ....C...C...CCCC
     b18:	84 00 00 00 84 84 84 84 84 00 00 00 00 00 00 00     ................
     b28:	00 00 00 00 00 00 00 37 37 37 00 00 00 00 37 00     .......777....7.
     b38:	00 00 37 00 00 37 00 00 00 00 37 00 00 37 00 00     ..7..7....7..7..
     b48:	00 00 37 00 00 37 00 00 00 00 37 00 00 37 00 00     ..7..7....7..7..
     b58:	00 37 00 00 00 00 37 37 37 00 00 00 00 00 00 00     .7....777.......
	...
     b70:	37 00 00 00 00 00 00 37 37 00 00 00 00 00 00 00     7......77.......
     b80:	37 00 00 00 00 00 00 00 37 00 00 00 00 00 00 37     7.......7......7
     b90:	00 00 00 00 00 00 00 37 00 00 00 00 00 00 37 37     .......7......77
     ba0:	37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 37     7..............7
     bb0:	37 37 00 00 00 00 37 00 00 00 37 00 00 00 00 00     77....7...7.....
     bc0:	00 00 37 00 00 00 00 00 37 37 00 00 00 00 37 37     ..7.....77....77
     bd0:	00 00 00 00 00 37 00 00 00 00 00 00 00 37 37 37     .....7.......777
     be0:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 00 37     77.............7
     bf0:	37 37 00 00 00 00 37 00 00 00 37 00 00 00 00 00     77....7...7.....
     c00:	00 00 37 00 00 00 00 00 37 37 00 00 00 00 00 00     ..7.....77......
     c10:	00 00 37 00 00 37 00 00 00 00 37 00 00 00 37 37     ..7..7....7...77
     c20:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 00 00     77..............
     c30:	00 37 37 00 00 00 00 00 37 00 37 00 00 00 00 37     .77.....7.7....7
     c40:	00 00 37 00 00 00 37 00 00 00 37 00 00 37 00 00     ..7...7...7..7..
     c50:	00 37 00 00 00 37 37 37 37 37 37 00 00 00 00 00     .7...777777.....
     c60:	00 37 00 00 00 00 00 00 00 00 00 00 00 00 37 37     .7............77
     c70:	37 37 37 00 00 00 37 00 00 00 00 00 00 37 00 00     777...7......7..
     c80:	00 00 00 00 00 37 37 37 37 37 00 00 00 00 00 00     .....77777......
     c90:	00 00 37 00 00 00 00 00 00 00 37 00 00 37 37 37     ..7.......7..777
     ca0:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 00 37     77.............7
     cb0:	37 37 37 00 00 00 37 00 00 00 00 00 00 37 00 00     777...7......7..
     cc0:	00 00 00 00 00 37 37 37 37 37 00 00 00 37 00 00     .....77777...7..
     cd0:	00 00 37 00 00 37 00 00 00 00 37 00 00 00 37 37     ..7..7....7...77
     ce0:	37 37 00 00 00 00 00 00 00 00 00 00 00 00 37 37     77............77
     cf0:	37 37 37 00 00 37 00 00 00 00 37 00 00 00 00 00     777..7....7.....
     d00:	00 00 37 00 00 00 00 00 00 37 00 00 00 00 00 00     ..7......7......
     d10:	37 00 00 00 00 00 00 37 00 00 00 00 00 00 37 00     7......7......7.
	...
     d2c:	00 00 00 37 37 37 00 00 00 00 37 00 00 00 37 00     ...777....7...7.
     d3c:	00 00 37 00 00 00 37 00 00 00 37 37 37 37 00 00     ..7...7...7777..
     d4c:	00 37 00 00 00 00 37 00 00 37 00 00 00 00 37 00     .7....7..7....7.
     d5c:	00 00 37 37 37 37 00 00 00 00 00 00 00 00 00 00     ..7777..........
     d6c:	00 00 00 37 37 37 00 00 00 00 37 00 00 00 37 00     ...777....7...7.
     d7c:	00 00 37 00 00 00 37 00 00 00 00 37 37 37 37 00     ..7...7....7777.
     d8c:	00 00 00 00 00 00 37 00 00 37 00 00 00 00 37 00     ......7..7....7.
     d9c:	00 00 37 37 37 37 00 00                             ..7777..

00000da4 <BannerTiles>:
     da4:	80 80 80 80 91 91 91 91 a2 a2 a2 a2 b3 b3 b3 b3     ................
     db4:	b3 b3 b3 b3 c4 c4 c4 c4 d5 d5 d5 d5 d5 d5 d5 d5     ................
     dc4:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 e6     ................
     dd4:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 e6     ................
     de4:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 64     ...............d
     df4:	e6 b3 e6 a2 e6 b3 64 a2 b3 e6 a2 c4 b3 64 a2 c4     ......d......d..
     e04:	e6 b3 64 a2 e6 a2 c4 a2 a2 c4 a2 c4 a2 c4 a2 46     ..d............F
     e14:	c4 a2 46 b3 c4 a2 46 32 a2 c4 b3 c4 a2 c4 b3 c4     ..F...F2........
     e24:	c4 a2 e6 b3 c4 a2 c4 b3 a2 c4 a2 46 b3 64 a2 c4     ...........F.d..
     e34:	e6 b3 c4 a2 c4 b3 64 a2 a2 e6 32 c4 23 e6 32 c4     ......d...2.#.2.
     e44:	e6 b3 e6 b3 e6 b3 e6 b3 b3 e6 b3 e6 b3 e6 b3 e6     ................
     e54:	e6 b3 e6 32 e6 b3 64 a2 b3 c4 a2 c4 a2 c4 a2 c4     ...2..d.........
     e64:	e6 a2 c4 a2 e6 a2 c4 a2 32 c4 a2 c4 a2 c4 a2 c4     ........2.......
     e74:	c4 a2 c4 a2 c4 a2 c4 a2 a2 c4 a2 c4 a2 c4 a2 c4     ................
     e84:	c4 a2 e6 a2 c4 a2 e6 a2 a2 c4 23 64 a2 c4 a2 e6     ..........#d....
     e94:	c4 a2 c4 a2 c4 a2 c4 a2 a2 c4 a2 c4 a2 c4 a2 c4     ................
     ea4:	46 b3 c4 23 c4 a2 c4 23 a2 c4 a2 e6 32 c4 b3 e6     F..#...#....2...
     eb4:	e6 b3 e6 b3 c4 b3 e6 b3 a2 c4 a2 e6 a2 c4 a2 c4     ................
     ec4:	d5 d5 d5 d5 d5 d5 d5 d5 a2 a2 a2 a2 b3 b3 b3 b3     ................
     ed4:	b3 b3 b3 b3 c4 c4 c4 c4 77 77 77 77 77 77 77 77     ........wwwwwwww

00000ee4 <BannerPallet>:
     ee4:	02 0b 64 0a 5b 14 13 0a 64                          ..d.[...d

00000eed <TitleMap>:
     eed:	01 01 01 01 01 01 02 03 04 05 02 03 06 07 08 09     ................
     efd:	06 07 0a 0a 0a 0a 0a 0a                             ........

00000f05 <FieldMap>:
     f05:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f15:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f25:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f35:	01 02 03 01 04 05 06 04 01 02 03 01 04 05 06 04     ................
     f45:	01 02 03 01 04 05 06 04 01 02 03 01 07 08 09 0a     ................
     f55:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f65:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f75:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f85:	0b 0c 0d 0e 09 0a 07 08 0d 0e 0f 10 07 08 09 0a     ................
     f95:	0b 0c 0d 0e 09 0a 07 08                             ........

00000f9d <GridTiles>:
     f9d:	ff 80 80 80 80 80 80 80 fe 00 00 00 00 00 00 00     ................
     fad:	80 80 80 80 80 80 80 00                             ........

00000fb5 <MagicPallet>:
     fb5:	00 ff 03 07 a7 06 00 ff 16 27 77 17 00 ff 13 2f     .........'w..../
     fc5:	3f 1d 00 ff 10 78 b0 28 00 ff 88 e1 f0 d1 00 ff     ?....x.(........
     fd5:	42 c6 df 84                                         B...

00000fd9 <MagicTiles>:
     fd9:	00 00 00 00 00 00 00 02 00 00 00 00 00 00 02 03     ................
     fe9:	00 00 00 00 00 00 02 04 00 00 00 00 00 02 03 01     ................
     ff9:	00 00 00 00 00 03 04 01 00 00 00 00 02 03 03 01     ................
    1009:	00 00 00 00 02 01 05 04 00 00 00 02 04 01 03 05     ................
    1019:	02 00 00 00 00 00 00 00 03 02 00 00 00 00 00 00     ................
    1029:	04 02 00 00 00 00 00 00 01 03 02 00 00 00 00 00     ................
    1039:	01 04 03 00 00 00 00 00 01 03 03 02 00 00 00 00     ................
    1049:	04 05 01 02 00 00 00 00 05 03 01 04 02 00 00 00     ................
    1059:	00 00 00 02 01 01 04 01 00 00 02 04 05 03 04 01     ................
    1069:	00 00 02 04 05 01 03 05 00 02 03 05 01 01 05 03     ................
    1079:	00 02 04 01 01 01 03 01 02 04 01 01 01 03 04 01     ................
    1089:	02 01 04 04 03 02 03 04 00 02 02 02 02 02 02 02     ................
    1099:	01 04 01 01 02 00 00 00 01 04 03 05 04 02 00 00     ................
    10a9:	05 03 01 05 04 02 00 00 03 05 01 01 05 03 02 00     ................
    10b9:	01 03 01 01 01 04 02 00 01 04 03 01 01 01 04 02     ................
    10c9:	04 03 02 03 04 04 01 02 02 02 02 02 02 02 02 00     ................
    10d9:	00 00 00 00 00 02 02 02 00 01 04 02 02 04 04 04     ................
    10e9:	00 04 02 04 04 03 04 04 00 02 04 01 01 04 03 03     ................
    10f9:	00 02 04 01 01 01 05 04 02 05 05 04 01 05 01 01     ................
    1109:	02 03 03 03 05 01 01 01 02 04 04 04 04 01 01 01     ................
    1119:	02 02 02 00 00 00 00 00 01 01 01 02 02 04 01 00     ................
    1129:	01 01 03 04 04 02 04 00 03 03 04 01 01 04 02 00     ................
    1139:	04 05 01 01 01 04 02 00 01 01 05 01 04 03 04 02     ................
    1149:	01 01 01 05 03 04 01 02 01 01 01 04 04 01 01 02     ................
    1159:	02 01 01 04 04 01 01 01 02 01 04 03 05 01 01 01     ................
    1169:	02 04 03 04 01 05 01 01 00 02 04 01 01 01 05 05     ................
    1179:	00 02 04 01 01 04 03 03 00 01 02 04 04 03 03 03     ................
    1189:	00 04 04 02 02 04 04 04 00 00 00 00 00 02 02 02     ................
    1199:	04 01 01 04 04 04 04 02 04 04 01 05 03 03 03 02     ................
    11a9:	04 04 05 01 04 05 05 02 05 05 01 01 01 04 02 00     ................
    11b9:	03 03 04 01 01 04 02 00 03 03 03 04 04 02 01 00     ................
    11c9:	01 01 01 02 02 04 04 00 02 02 02 00 00 00 00 00     ................
    11d9:	00 02 02 02 02 02 02 02 02 01 04 04 03 02 03 04     ................
    11e9:	02 04 01 01 01 03 04 01 00 02 04 01 01 01 03 01     ................
    11f9:	00 02 03 05 01 01 05 03 00 00 02 04 05 01 03 05     ................
    1209:	00 00 02 04 05 03 04 01 00 00 00 02 01 01 04 01     ................
    1219:	02 02 02 02 02 02 02 00 04 03 02 03 04 04 01 02     ................
    1229:	01 04 03 01 01 01 04 02 01 03 01 01 01 04 02 00     ................
    1239:	03 05 01 01 05 03 02 00 05 03 01 05 04 02 00 00     ................
    1249:	01 04 03 05 04 02 00 00 01 04 01 01 02 00 00 00     ................
    1259:	00 00 00 02 04 01 03 05 00 00 00 00 02 01 05 04     ................
    1269:	00 00 00 00 02 03 03 01 00 00 00 00 00 03 04 01     ................
    1279:	00 00 00 00 00 02 03 01 00 00 00 00 00 00 02 04     ................
    1289:	00 00 00 00 00 00 02 03 00 00 00 00 00 00 00 02     ................
    1299:	05 03 01 04 02 00 00 00 04 05 01 02 00 00 00 00     ................
    12a9:	01 03 03 02 00 00 00 00 01 04 03 00 00 00 00 00     ................
    12b9:	01 03 02 00 00 00 00 00 04 02 00 00 00 00 00 00     ................
    12c9:	03 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................

000012d9 <CrashTiles>:
    12d9:	00 00 15 55 25 55 29 55 2a 55 2a 95 2a a5 2a a9     ...U%U)U*U*.*.*.
    12e9:	00 00 55 54 55 58 55 68 55 a8 56 a8 5a a8 6a a8     ..UTUXUhU.V.Z.j.
    12f9:	2a a8 2a a0 2a 80 2a 00 28 00 20 00 00 00 00 00     *.*.*.*.(. .....
    1309:	2a a8 0a a8 02 a8 00 a8 00 28 00 08 00 00 00 00     *........(......

00001319 <ExplosionTiles>:
	...
    133d:	ff 00 00 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    134d:	00 3f 00 37 00 00 37 00 00 00 37 3f 00 00 00 00     .?.7..7...7?....
	...
    1369:	37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     7...............
    1379:	00 00 00 ff 00 00 00 00 00 3f 00 00 00 00 00 00     .........?......
    1389:	37 00 00 00 00 00 00 00 3f 37 ff 00 00 00 00 00     7.......?7......
    1399:	00 00 00 00 00 ff 37 3f 00 00 00 00 00 00 00 37     ......7?.......7
    13a9:	00 00 00 00 00 00 3f 00 00 00 00 00 ff 00 00 00     ......?.........
	...
    13c5:	00 00 00 37 00 00 00 00 00 00 00 00 00 00 00 00     ...7............
    13d5:	00 00 00 00 3f 37 00 00 00 37 00 00 37 00 3f 00     ....?7...7..7.?.
    13e5:	00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 ff     ................
	...
    1419:	ff 00 00 00 00 00 00 00 00 00 3f 00 00 00 00 00     ..........?.....
	...
    1431:	00 00 00 3f 00 3f 00 00 00 00 00 00 00 00 00 37     ...?.?.........7
    1441:	00 00 00 37 00 0f 00 00 00 00 00 00 00 00 ff 00     ...7............
    1451:	3f 00 00 00 00 0f 00 0f 3f 00 00 00 00 00 00 ff     ?.......?.......
	...
    146d:	00 00 3f 00 00 00 37 00 3f 00 00 00 00 00 00 00     ..?...7.?.......
    147d:	00 00 00 00 0f 00 0f 00 3f 00 00 00 00 ff 00 00     ........?.......
    148d:	00 00 00 00 0f 00 00 37 00 00 00 00 00 00 00 00     .......7........
    149d:	37 00 00 0f 00 00 00 00 00 00 ff 00 00 00 00 3f     7..............?
    14ad:	00 0f 00 0f 00 00 00 00 00 00 00 00 00 00 00 3f     ...............?
    14bd:	00 37 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .7...?..........
    14cd:	00 00 00 00 ff 00 00 00 00 00 00 3f 0f 00 0f 00     ...........?....
    14dd:	00 00 00 3f 00 ff 00 00 00 00 00 00 00 00 0f 00     ...?............
    14ed:	37 00 00 00 37 00 00 00 00 00 00 00 00 00 3f 00     7...7.........?.
    14fd:	3f 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ?...............
    150d:	00 3f 00 00 00 00 00 00 00 00 00 ff a7 0f a7 00     .?..............
    151d:	a7 00 00 00 0f 00 00 37 00 00 00 00 a7 00 00 00     .......7........
    152d:	00 0f 00 00 00 37 00 a7 00 00 00 ff a7 00 00 00     .....7..........
    153d:	37 00 00 00 00 00 0f 00 00 00 ff 00 00 00 00 00     7...............
    154d:	ff 00 00 37 0f 00 00 00 00 00 2e 0f 0f 00 00 a7     ...7............
    155d:	00 a7 0f a7 00 00 00 00 37 00 00 0f 00 00 0f 00     ........7.......
    156d:	00 00 00 a7 00 00 00 00 a7 00 37 00 00 ff 00 37     ..........7....7
    157d:	00 00 00 a7 00 00 00 00 00 0f 00 00 2e 00 ff 00     ................
    158d:	00 00 00 00 0f 37 00 00 ff 00 00 00 00 00 00 ff     .....7..........
    159d:	00 00 37 0f 00 00 00 00 00 ff 00 2e 00 00 0f 00     ..7.............
    15ad:	00 00 00 00 a7 00 00 00 37 00 ff 00 00 37 00 a7     ........7....7..
    15bd:	00 00 00 00 a7 00 00 00 00 0f 00 00 0f 00 00 37     ...............7
    15cd:	00 00 00 00 a7 0f a7 00 a7 00 00 0f 0f 2e 00 00     ................
    15dd:	00 00 00 0f 37 00 00 ff 00 00 00 00 00 ff 00 00     ....7...........
    15ed:	00 0f 00 00 00 00 00 37 00 00 00 a7 ff 00 00 00     .......7........
    15fd:	a7 00 37 00 00 00 0f 00 00 00 00 a7 00 00 00 00     ..7.............
    160d:	37 00 00 0f 00 00 00 a7 00 a7 0f a7 0f 00 00 0f     7...............
    161d:	00 00 00 00 00 a7 00 00 00 00 00 00 00 00 e2 00     ................
    162d:	00 00 00 e2 0f 00 00 ff 00 ff 00 00 00 00 00 00     ................
    163d:	00 00 00 00 00 00 00 ff 00 00 f0 00 00 00 00 00     ................
    164d:	00 e2 00 00 a7 00 00 00 00 00 fd 00 a7 00 00 00     ................
    165d:	0f 00 00 0f 00 00 00 00 00 00 a7 00 00 00 00 00     ................
    166d:	00 e2 00 00 00 00 ff 00 ff 00 00 0f 00 00 00 00     ................
    167d:	00 00 00 00 00 e2 00 00 ff 00 00 00 fd 00 f0 00     ................
	...
    1695:	00 e2 00 00 00 00 e2 00 00 00 00 00 00 00 00 00     ................
    16a5:	00 f0 00 fd 00 00 00 ff 00 00 e2 00 00 00 00 00     ................
    16b5:	00 00 00 00 0f 00 00 ff 00 ff 00 00 00 00 e2 00     ................
    16c5:	00 00 00 00 00 a7 00 00 00 00 00 00 0f 00 00 0f     ................
    16d5:	00 00 00 a7 00 fd 00 00 00 00 00 a7 00 00 e2 00     ................
    16e5:	00 00 00 00 00 f0 00 00 ff 00 00 00 00 00 00 00     ................
    16f5:	00 00 00 00 00 00 ff 00 ff 00 00 0f e2 00 00 00     ................
    1705:	00 e2 00 00 00 00 00 00 00 00 a7 00 00 00 00 00     ................
    1715:	0f 00 00 0f 2e 00 ff 00 37 00 00 00 00 00 00 00     ........7.......
    1725:	00 00 00 e2 ff 00 fd 00 e2 00 00 00 00 00 00 00     ................
    1735:	00 00 00 00 37 00 e2 00 fd 00 f0 00 00 00 00 00     ....7...........
	...
    174d:	e2 00 00 00 00 00 00 00 00 00 00 00 00 00 00 37     ...............7
    175d:	00 ff 00 2e 00 00 00 00 00 00 00 00 00 00 00 e2     ................
    176d:	00 fd 00 ff 00 00 00 00 00 00 00 00 00 e2 00 fd     ................
    177d:	00 e2 00 37 00 00 00 00 00 00 00 00 00 00 00 f0     ...7............
	...
    1795:	00 00 e2 00 00 e2 00 00 00 00 00 00 00 00 00 00     ................
    17a5:	f0 00 00 00 00 00 00 00 00 00 00 00 37 00 e2 00     ............7...
    17b5:	fd 00 e2 00 00 00 00 00 00 00 00 00 ff 00 fd 00     ................
    17c5:	e2 00 00 00 00 00 00 00 00 00 00 00 2e 00 ff 00     ................
    17d5:	37 00 00 00 00 00 00 00 00 00 00 00 00 00 00 e2     7...............
	...
    17f1:	00 f0 00 fd 00 e2 00 37 00 00 00 00 00 00 00 00     .......7........
    1801:	00 00 00 e2 00 fd 00 ff e2 00 00 00 00 00 00 00     ................
    1811:	00 00 00 37 00 ff 00 2e ff 00 fd 00 00 00 00 e2     ...7............
    1821:	00 00 00 00 fd 00 00 00 fd 00 00 00 00 00 00 00     ................
	...
    1839:	00 e2 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    185d:	00 fd 00 ff 00 00 00 e2 00 00 00 00 00 00 00 00     ................
    186d:	00 00 00 fd 00 00 00 00 00 00 00 00 00 00 00 00     ................
    187d:	00 00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1895:	00 00 00 e2 e2 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18b1:	00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    18c1:	fd 00 00 00 00 00 00 00 00 00 00 00 e2 00 00 00     ................
    18d1:	ff 00 fd 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18f5:	00 00 e2 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1905:	00 00 00 fd 00 00 00 fd 00 00 00 00 e2 00 00 00     ................
    1915:	00 fd 00 ff 00 00 00 00 f0 00 00 00 00 da 00 00     ................
	...
    1939:	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1959:	00 00 00 f0 00 00 00 00 00 00 00 00 00 00 da 00     ................
	...
    197d:	00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19b1:	f0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19c9:	00 da 00 00 00 00 00 00 00 00 00 00 f0 00 00 00     ................
	...
    19f5:	00 00 00 f0 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a0d:	00 00 da 00 00 00 00 f0 00 00 00 00                 ............

00001a19 <GetReadyPallet>:
    1a19:	07 07 07 06 06 05 03 02 01 02 02 03 05 06 07 07     ................
    1a29:	8a 8a 93 93 dc dc e5 e5 ee ee e5 e5 dc dc 93 93     ................

00001a39 <CrashPallet>:
    1a39:	01 03 04 00 03 05 07 00 8a 93 dc 00 dc e5 ee 00     ................

00001a49 <GridPallet>:
    1a49:	01 03 07 47 4f 0f c8                                ...GO..

00001a50 <compfont>:
    1a50:	00 30 00 00 30 00 00 00 38 44 44 08 10 00 10 00     .0..0...8DD.....
    1a60:	08 0c fe ff ff fe 0c 08 3f 7f ff f0 e0 e0 e0 e0     ........?.......
    1a70:	fc fe ff 0f 07 07 07 07 e0 e0 e0 e0 f0 ff 7f 3f     ...............?
    1a80:	07 07 07 07 0f ff fe fc e0 e0 e0 e0 e0 e0 e0 e0     ................
    1a90:	07 07 07 07 07 07 07 07 ff ff ff 00 00 00 00 00     ................
    1aa0:	00 00 00 00 00 ff ff ff 06 06 0c 08 10 00 20 00     .............. .
    1ab0:	38 28 44 44 7c 82 82 00 f8 44 42 7c 42 44 f8 00     8(DD|....DB|BD..
    1ac0:	1e 22 40 80 40 22 1e 00 f0 48 44 42 44 48 f0 00     ."@.@"...HDBDH..
    1ad0:	1e 20 40 fc 40 20 1e 00 1e 20 40 fc 40 40 40 00     . @.@ ... @.@@@.
    1ae0:	3c 40 80 8e 44 28 10 00 c6 44 44 fe 44 44 c6 00     <@..D(...DD.DD..
    1af0:	38 10 10 10 10 10 38 00 1e 02 02 c2 82 44 38 00     8.....8......D8.
    1b00:	c6 88 90 e0 90 88 c6 00 70 40 40 40 40 42 fe 00     ........p@@@@B..
    1b10:	c6 c6 aa aa 92 92 c6 00 c4 c4 a4 b4 94 8c 8c 00     ................
    1b20:	38 44 82 92 82 44 38 00 f8 84 82 84 f8 80 80 00     8D...D8.........
    1b30:	38 44 82 92 8a 44 3a 00 f8 84 82 84 f8 88 86 00     8D...D:.........
    1b40:	3e 40 80 7c 02 04 f8 00 fe 92 10 10 10 10 38 00     >@.|..........8.
    1b50:	c6 44 44 44 44 44 38 00 c6 44 44 28 28 10 10 00     .DDDDD8..DD((...
    1b60:	c6 82 92 92 aa 6c 44 00 82 44 28 10 28 44 82 00     .....lD..D(.(D..
    1b70:	82 44 28 10 10 10 10 00 fe 44 08 10 20 44 fe 00     .D(......D.. D..
    1b80:	38 44 84 84 84 88 70 00 10 30 10 10 20 20 70 00     8D....p..0..  p.
    1b90:	38 44 04 18 60 80 f8 00 38 44 04 18 04 84 78 00     8D..`...8D....x.
    1ba0:	0c 14 24 44 88 fc 08 00 7c 40 80 f8 04 04 f8 00     ..$D....|@......
    1bb0:	3c 40 80 f8 84 84 78 00 7c 84 04 08 10 20 40 00     <@....x.|.... @.
    1bc0:	38 44 44 78 84 84 78 00 38 44 44 3c 04 84 78 00     8DDx..x.8DD<..x.
    1bd0:	3c 3c 3c 3c ff 7e 3c 18                             <<<<.~<.

00001bd8 <compfontspeckles>:
    1bd8:	ff ff ff ff ff ff ff ff ff ff ff ff 02 00 03 00     ................
    1be8:	03 03 02 00 02 02 00 01 00 00 02 00 02 00 02 00     ................
    1bf8:	00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    1c08:	ff ff ff ff ff ff ff ff ff ff                       ..........

00001c12 <charlist>:
    1c12:	3a 3f 3e 7b 7d 5b 5d 2c 2e 5e 76 21 41 42 43 44     :?>{}[],.^v!ABCD
    1c22:	45 46 47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54     EFGHIJKLMNOPQRST
    1c32:	55 56 57 58 59 5a 30 31 32 33 34 35 36 37 38 39     UVWXYZ0123456789
    1c42:	7c 00                                               |.

00001c44 <patch00>:
    1c44:	00 02 03 00 07 41 00 00 08 00 06 00 00 00 f9 06     .....A..........
    1c54:	05 00 00 ff                                         ....

00001c58 <patch01>:
    1c58:	00 09 64 00 0a 3c 00 02 03 00 07 41 00 00 08 00     ..d..<.....A....
    1c68:	06 00 00 00 fd 0c 05 00 00 ff                       ..........

00001c72 <patch02>:
    1c72:	00 02 00 00 07 4c 00 00 08 01 06 00 00 00 f9 07     .....L..........
    1c82:	05 00 00 ff                                         ....

00001c86 <patch03>:
    1c86:	00 ff                                               ..

00001c88 <patch04>:
    1c88:	00 09 aa 00 0a b4 00 02 04 00 07 60 00 00 10 01     ...........`....
    1c98:	06 00 00 00 f8 08 05 00 00 ff                       ..........

00001ca2 <patch05>:
    1ca2:	00 02 01 00 07 3c 00 00 08 01 06 00 00 00 f0 08     .....<..........
    1cb2:	05 00 00 ff                                         ....

00001cb6 <patch06>:
    1cb6:	00 02 04 00 07 58 00 00 08 03 00 f0 0e 05 00 00     .....X..........
    1cc6:	ff                                                  .

00001cc7 <patch07>:
    1cc7:	00 09 aa 00 0a b4 00 02 04 00 07 62 00 00 10 01     ...........b....
    1cd7:	06 00 00 00 f8 08 05 00 00 ff                       ..........

00001ce1 <patch20>:
    1ce1:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1cf1:	00 fc 05 05 00 00 ff                                .......

00001cf8 <patch21>:
    1cf8:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1d08:	05 00 00 ff                                         ....

00001d0c <patch22>:
    1d0c:	00 01 02 00 07 28 00 00 e2 01 00 f1 01 05 00 00     .....(..........
    1d1c:	ff                                                  .

00001d1d <patch23>:
    1d1d:	00 ff                                               ..

00001d1f <patch24>:
    1d1f:	00 01 0e 00 07 28 00 00 1e 01 00 ec 01 00 f8 01     .....(..........
    1d2f:	00 fc 05 05 00 00 ff                                .......

00001d36 <patch25>:
    1d36:	00 01 08 00 07 3c 00 00 e2 01 00 f1 01 00 f8 02     .....<..........
    1d46:	05 00 00 ff                                         ....

00001d4a <patch26>:
    1d4a:	00 01 02 00 07 46 00 00 e2 01 00 f1 01 05 00 00     .....F..........
    1d5a:	ff                                                  .

00001d5b <patch27>:
    1d5b:	00 01 16 00 07 50 00 00 e2 01 00 f1 01 05 00 00     .....P..........
    1d6b:	ff                                                  .

00001d6c <patch40>:
    1d6c:	00 02 03 00 07 00 20 07 5a 00 09 b1 00 0a 68 00     ...... .Z.....h.
    1d7c:	08 48 02 08 47 02 08 46 02 08 45 02 08 44 02 08     .H..G..F..E..D..
    1d8c:	43 03 08 42 02 08 41 03 08 40 03 08 3f 03 08 3e     C..B..A..@..?..>
    1d9c:	03 08 3d 03 08 3c 04 08 3b 03 08 3a 04 08 39 05     ..=..<..;..:..9.
    1dac:	08 38 03 08 37 05 08 36 05 08 35 05 08 34 06 08     .8..7..6..5..4..
    1dbc:	33 02 08 32 06 08 31 05 08 33 02 08 32 06 08 31     3..2..1..3..2..1
    1dcc:	00 09 b1 00 0a 6f 00 00 ff 05 08 33 02 08 32 06     .....o.....3..2.
    1ddc:	08 31 05 08 33 02 08 32 06 08 31 05 08 33 02 08     .1..3..2..1..3..
    1dec:	32 06 08 31 05 08 33 02 08 32 06 08 31 05 08 33     2..1..3..2..1..3
    1dfc:	02 08 32 06 08 31 05 08 33 02 08 32 06 08 31 05     ..2..1..3..2..1.
    1e0c:	05 00 00 ff                                         ....

00001e10 <patch41>:
    1e10:	00 02 00 00 07 00 21 07 5a 00 08 47 01 08 46 01     ......!.Z..G..F.
    1e20:	08 45 03 08 44 02 08 43 02 08 42 03 08 41 02 08     .E..D..C..B..A..
    1e30:	40 03 08 3f 03 08 3e 03 08 3d 04 08 3c 02 08 3b     @..?..>..=..<..;
    1e40:	04 08 3a 03 08 39 04 08 38 05 08 37 03 08 36 05     ..:..9..8..7..6.
    1e50:	08 35 05 08 34 05 08 33 06 08 32 02 08 31 06 08     .5..4..3..2..1..
    1e60:	30 03 08 32 03 08 31 07 08 30 00 09 b1 00 0a 21     0..2..1..0.....!
    1e70:	00 00 fe 03 08 32 03 08 31 07 08 30 03 08 32 03     .....2..1..0..2.
    1e80:	08 31 07 08 30 03 08 32 03 08 31 07 08 30 03 08     .1..0..2..1..0..
    1e90:	32 03 08 31 07 08 30 03 08 32 03 08 31 07 08 30     2..1..0..2..1..0
    1ea0:	03 08 33 04 08 32 06 08 31 05 05 00 00 ff           ..3..2..1.....

00001eae <DropWave>:
    1eae:	ff 02 fe 03 fc 06 f6 17 17 39 3f ab af 8c a6 8a     .........9?.....
    1ebe:	aa 97 23 3a d7 20 c4 76 13 d4 b8 ac a4 95 9e a4     ..#:. .v........
    1ece:	57 e3 01 e9 bb 7f 3d 57 28 43 e1 f1 a9 6f fc f6     W.....=W(C...o..
    1ede:	0a a3 5d 57 45 29 17 ce 90 9b 80 3c 0f ed 64 9a     ..]WE).....<..d.
    1eee:	a2 9e cb f2 4f 61 3a fe 7f cf 24 31 89 bc d8 0c     ....Oa:...$1....
    1efe:	37 76 fc 8e c6 83 ee 3f 8d f6 56 78 71 5f f8 95     7v.....?..Vxq_..
    1f0e:	39 6c 4c 47 9a 13 75 44 03 cc 9a a6 59 f2 97 0a     9lLG..uD....Y...
    1f1e:	c2 bf 4a 72 1d fa dc b8 bb 6d b8 f5 78 69 1a a6     ..Jr.....m..xi..
    1f2e:	a8 e6 0f 18 06 22 f2 e7 2d f1 10 36 63 37 10 05     ....."..-..6c7..
    1f3e:	d2 a5 c7 60 c6 2e e5 8a a4 a4 da f8 16 2c 66 38     ...`.........,f8
    1f4e:	b6 3a da 47 25 c9 e5 e6 0f 1d 2e 4d 62 aa 13 d8     .:.G%......Mb...
    1f5e:	16 2e a9 c6 b2 d0 ab e3 d1 4e 24 da 13 e0 4a e7     .........N$...J.
    1f6e:	c9 c4 c2 b5 b8 c1 cc 38 f6 f3 f7 e6 2a fe ff f6     .......8....*...
    1f7e:	f0 d7 d4 b0 b8 34 e2 04 fe c0 d5 e7 01 1a 2b 46     .....4........+F
    1f8e:	4a 3c c0 1a ef 01 49 a4 b2 88 b2 b0 f4 06 35 a1     J<....I.......5.
    1f9e:	0c ff e3 5e e3 b9 ac ae b9 0b 52 57 69 c1 fa 1a     ...^......RWi...
    1fae:	94 09 3b 5e 59 43 f1 ac c5 ec a0 33 e6 b2 30 51     ..;^YC.....3..0Q
    1fbe:	5d 46 12 b2 f2 53 b4 46 50 a7 a7 cf 1d 36 36 39     ]F...S.FP....669
    1fce:	46 4c 54 53 58 54 4f 3b 11 c2 97 08 77 bf be 62     FLTSXTO;....w..b
    1fde:	08 9f 9e e5 2f 3e 40 4c 5a 65 6d 73 79 7c 7d 7b     ..../>@LZemsy|}{
    1fee:	69 22 b1 cb 75 0a 98 2d 5d 0b a8 84 9d ac a9 a8     i"..u..-].......
    1ffe:	ac b3 c5 de fe 1c 2d 28 00 b4 a0 34 5d a8 c3 54     ......-(...4]..T
    200e:	5a 04 ab 96 9f 9d 93 90 92 a1 bc e6 16 3c 4c 4d     Z............<LM
    201e:	26 cd a1 34 5f b8 b4 4a 4b e6 f1 9e af aa ac bb     &..4_..JK.......
    202e:	d3 fd 38 5c 58 34 1e 2a 5b 72 10 9a f8 6f 40 cd     ..8\X4.*[r...o@.
    203e:	8f 9a b9 c4 ce dc fa 23 51 5f 2e d4 a3 b0 c7 ba     .......#Q_......
    204e:	97 a4 18 5c 05 9c 9a de 17 2c 36 43 55 63 68 4e     ...\.....,6CUchN
    205e:	07 b6 b7 12 5e 5c 49 50 63 3b d4 a9 ef 44 66 58     ....^\IPc;...DfX
    206e:	46 3c 33 20 04 d7 ad b2 09 5c 23 a8 9d db 02 ed     F<3 .....\#.....
    207e:	b4 97 bf 0b 44 50 44 35 2f 28 1c 03 e1 be c4 04     ....DPD5/(......
    208e:	31 ff e2 0c 1c 00 ea f5 f8 e0 ec 16 3d 4e 4e 50     1...........=NNP
    209e:	52 4d 3e 1a e2 b3 d3 45 3f b1 c8 41 5b 34 0f 1b     RM>....E?..A[4..
    20ae:	3d 53 59 51 46 3f 37 2c 1e 07 e6 c1 b1 e7 48 24     =SYQF?7,......H$
    20be:	aa f1 4e 15 c7 a4 ae b8 b1 b1 bc ca d5 de eb fa     ..N.............
    20ce:	0f 29 45 4d 19 c0 db 53 07 b7 17 49 2d f7 dc e5     .)EM...S...I-...
    20de:	f0 f2 f3 f5 f8 fe 05 10 22 38 4c 3e f5 b5 19 4a     ........"8L>...J
    20ee:	cc de 3c 3a 07 d4 ca d3 d1 cb ca c9 cc cf d3 db     ..<:............
    20fe:	eb 04 26 32 fe c9 17 2f d9 ec 29 2e 0b e5 db dd     ..&2.../..).....
    210e:	d9 d5 d3 d3 d2 d1 d1 d2 d4 de f6 19 12 e0 f9 16     ................
    211e:	fa f7 07 09 f9 e3 d6 cc c0 b6 b0 ae b0 b6 bf cb     ................
    212e:	d4 db e0 e3 05 21 ea d8 1f 30 01 d1 c1 cd d5 d5     .....!...0......
    213e:	d7 db e4 f2 05 19 29 32 32 20 ed c2 01 4a f3 ba     ......)22 ...J..
    214e:	03 44 42 12 ed e1 dc d2 c7 bb b6 b6 c3 db f4 00     .DB.............
    215e:	f5 d0 b6 f8 47 fd b5 ef 3c 4e 2b 0a fd f4 e6 d6     ....G...<N+.....
    216e:	c5 bb c5 e9 16 35 3c 3f 3b 13 cf db 37 40 f1 b9     .....5<?;...7@..
    217e:	bc da ed f2 fb 0b 20 37 3f 2a f6 ca ca de e4 d2     ...... 7?*......
    218e:	bd d7 1e 32 fa c6 c9 e7 00 0a 10 1a 26 30 2c 13     ...2........&0,.
    219e:	ea de fe 1d 22 1d 1b 1a 08 ed ed 07 17 15 0c 05     ...."...........
    21ae:	00 f7 ef e4 dc ea 13 2d 05 cd d7 0b 2c 29 0b db     .......-....,)..
    21be:	bc ce fe 22 2e 2c 2a 27 21 1d 1d 1f 08 dd e6 34     ...".,*'!......4
    21ce:	2c de b8 bb c5 bf c2 e1 0b 28 37 3e 44 46 44 37     ,........(7>DFD7
    21de:	19 e7 c4 ee 43 1a b9 e2 33 4d 41 38 43 47 39 22     ....C...3MA8CG9"
    21ee:	0f ff f1 e2 d3 c4 bb cb 05 3c 05 b5 0b 40 f1 bd     .........<...@..
    21fe:	c2 de e3 d1 c3 bd bb ba b8 b8 b8 bf cf f3 25 36     ..............%6
    220e:	eb bf 28 2d cd d5 10 3d 41 38 3a 40 3f 3d 39 35     ..(-...=A8:@?=95
    221e:	2e 22 0d ec ca d5 28 2b c0 fc 38 ef c3 cb f1 04     ."....(+..8.....
    222e:	00 ff 03 06 07 06 03 fc ed d6 c2 db 2c 20 bd 03     ............, ..
    223e:	36 eb c4 d3 ff 15 15 18 1e 24 27 29 2a 29 21 0d     6........$')*)!.
    224e:	e7 c8 f6 41 ee cd 2c 21 e2 be cb e8 f2 f4 f5 fc     ...A..,!........
    225e:	06 10 19 20 22 19 fd d2 d6 2e 21 c4 f5 37 26 ef     ... ".....!..7&.
    226e:	c9 c7 cc c8 c5 c5 cb d5 e4 f5 00 00 ec cb d2 25     ...............%
    227e:	27 c9 e5 2f 35 08 de d4 d2 cc c6 c4 cb dd f8 13     '../5...........
    228e:	23 26 19 ee ca 05 3e f8 c2 e3 1f 3a 36 2f 2e 2a     #&....>....:6/.*
    229e:	1d 04 e5 ce d2 ea ff ff e6 c5 da 28 2a e1 c1 de     ...........(*...
    22ae:	0a 1e 23 2a 33 38 34 1c f2 d2 d8 f6 09 ff df c3     ..#*384.........
    22be:	f4 33 f9 f1 df 03 1f 26 2f 32 37 2e 0e e0 d2 ff     .3.....&/27.....
    22ce:	30 35 26 27 36 2c f7 d0 e0 0b 27 2d 2e 30 2f 24     05&'6,....'-.0/$
    22de:	08 e2 d2 fe 35 1c dc c5 cf d5 cd d3 f8 1f 2e 28     ....5..........(
    22ee:	1c 14 0b fd ed d9 cd e0 15 2f f3 c6 f4 2a 39 31     ........./...*91
    22fe:	2c 26 0f f1 db d3 d2 d2 d6 de ef 0c 29 26 ef cd     ,&..........)&..
    230e:	12 34 f4 ca d3 e8 e8 d6 ca c9 cd d3 d9 df e8 f4     .4..............
    231e:	06 1f 2e 16 da e2 2f 16 d3 db 06 22 21 17 11 0a     ....../...."!...
    232e:	01 f9 f1 e9 e1 da d4 d8 f0 16 16 e9 eb 03 17 1a     ................
    233e:	f0 e6 fd 0c 16 1c 1e 1d 1e 22 28 2c 2d 26 0c e4     ........."(,-&..
    234e:	e3 21 1a d9 f4 25 21 00 e6 e2 e5 e1 dd da da db     .!...%!.........
    235e:	de e2 ed fc 11 1f 0c e1 f6 24 fa e2 02 1f 23 14     .........$....#.
    236e:	0b 0b 0a 07 02 ff fd fc fc 01 0b 19 1b fa e2 0c     ................
    237e:	1b ef e7 03 1c 1d 13 10 11 11 10 0d 0b 07 02 00     ................
    238e:	03 0c 16 0f f0 f2 15 08 ee f4 06 13 13 0c 08 07     ................
    239e:	03 01 fe fa f6 f2 f0 ee f0 f8 05 0b fb f6 ff 04     ................
    23ae:	04 02 04 08 0c 10 11 11 0f 08 fc f0 eb ef f4 f7     ................
    23be:	f8 f5 fb 0c 05 ed ee 00 10 16 14 12 11 0e 08 fe     ................
    23ce:	f2 ea ea f3 ff 04 00 f6 e8 ec 0a 1a 04 e7 e1 ec     ................
    23de:	f7 fd 02 08 10 19 1d 15 02 eb e4 ec f5 f4 ea de     ................
    23ee:	ea 0b 1c 0b ee e0 e3 eb f0 f4 fb 06 13 1b 11 f6     ................
    23fe:	e4 f1 0b 17 16 11 07 f4 e7 ef 02 11 18 16 14 11     ................
    240e:	0d 05 fb f2 ee f7 09 12 02 ec ea f1 f5 f1 ee f2     ................
    241e:	fd 08 0e 0e 0d 0c 0c 08 04 ff f9 f4 f6 02 0e 04     ................
    242e:	f2 f0 f8 fe fe f7 ec e4 e5 ea f1 f9 02 09 12 1b     ................
    243e:	23 24 15 f5 e3 fd 20 0e ea ea ff 0c 0d 0a 0c 10     #$.... .........
    244e:	13 11 0d 08 03 fa f2 e6 dd de f9 1b 15 e1 e5 1a     ................
    245e:	20 fb df d9 df df dd db df e0 e5 e7 ed f2 fd 0a      ...............
    246e:	1c 1f 0c e0 ee 11 0f ef f4 e0 21 29 cd cb e9 0b     ..........!)....
    247e:	18 1d 25 2a 1e 21 22 28 27 27 1d 0a e3 cc ff 3e     ..%*.!"(''.....>
    248e:	e8 e4 3a 07 c5 cb f3 16 1a 22 32 2f 29 2c 33 39     ..:......"2/),39
    249e:	3b 3c 3b 34 12 da e1 38 0b d0 20 39 02 d0 c4 d0     ;<;4...8.. 9....
    24ae:	d0 ce dc e4 e4 e7 f2 02 11 19 17 03 db c8 0f 2f     .............../
    24be:	da e7 32 2a f7 d3 cf ce c4 c7 d4 d6 d9 e3 f7 0d     ..2*............
    24ce:	20 27 27 13 e5 c7 0e 2f e2 e1 2f 27 eb f6 d7 d8      ''..../../'....
    24de:	ce d4 e5 f5 03 22 2d 29 13 04 07 21 34 0f d3 fb     ....."-)...!4...
    24ee:	34 1d e9 d2 d3 d8 d9 ea fc 08 15 27 2b 12 e4 cb     4..........'+...
    24fe:	d2 e1 e2 d6 db 0e 2f 05 d0 cc e6 ff 11 22 2e 2e     ....../......"..
    250e:	2c 2b 20 ff d8 da 0a 31 33 2d 2f 31 17 e3 cf f3     ,+ ....13-/1....
    251e:	1f 34 35 2f 24 14 05 fa ea d8 dc 07 33 17 db d4     .45/$.......3...
    252e:	ec f9 f3 e3 d7 e0 fe 1b 29 27 1d 12 0a 05 fe f3     ........)'......
    253e:	e3 e4 02 1c 03 f4 0a 0a f4 ec fa ff ee f2 0c 1f     ................
    254e:	26 27 28 27 22 1b 0c f2 da e9 22 25 e0 ec 24 26     &'('"....."%..$&
    255e:	0e 05 10 1e 23 2b 30 2b 22 19 13 0e 05 f5 e1 d7     ....#+0+".......
    256e:	f4 29 19 d6 fb 2c 04 d9 d1 d8 d6 cf d7 e5 e7 e9     .)...,..........
    257e:	ed f3 fa 04 12 22 29 0f dc e4 28 03 d7 13 31 17     .....")...(...1.
    258e:	f9 ef f5 f2 f0 fb 01 02 01 03 08 12 1e 2a 23 fa     .............*#.
    259e:	d5 09 26 e2 f1 2b 22 ff e7 e5 e5 dc de e6 e6 e4     ..&..+".........
    25ae:	e3 e5 e9 f2 00 15 20 04 db 03 1b e2 f3 22 20 08     ...... ......" .
    25be:	f2 ef ee e5 e6 eb ea e7 e6 e5 e6 e9 f0 02 13 08     ................
    25ce:	ea fc 0a f4 fc 0b 0a fb ea e2 dd d6 d6 d9 dc df     ................
    25de:	e4 ea f1 f5 f6 ee e6 fa 1a f3 e4 15 1b fa e0 dd     ................
    25ee:	e2 e1 e4 ee f3 f5 fa 03 0e 17 1b 1a 0f f4 da fa     ................
    25fe:	28 fe dd 06 27 1e 05 f9 f4 e7 df e1 e0 dd dc e3     (...'...........
    260e:	f1 ff 04 fc e5 d4 f8 20 fc dd fc 1e 1f 11 07 00     ....... ........
    261e:	f2 e8 e6 e3 e0 e7 fa 10 1f 20 1f 1a 04 e1 ea 1a     ......... ......
    262e:	1f fb e4 e3 ea ef f9 07 0e 13 1a 1d 11 f6 e2 e3     ................
    263e:	ef f6 f0 e6 ef 0f 17 fb e4 e4 ee f8 02 0d 13 14     ................
    264e:	14 11 02 f1 ee fe 0f 14 13 12 0e 02 f5 f6 03 0c     ................
    265e:	0e 0d 06 ff f9 f4 f1 f0 f8 0c 16 00 e7 ef 06 12     ................
    266e:	14 0b f3 dc e1 fb 12 1d 1f 19 10 09 08 0a 0d 03     ................
    267e:	ec f7 1d 12 ec df e1 df da e3 f8 0a 14 1b 1e 1e     ................
    268e:	1d 1c 17 0a f2 e2 fa 25 0a e1 fe 1d 1f 19 1f 26     .......%.......&
    269e:	20 15 0f 08 01 f9 f3 ed e6 e1 e9 07 21 00 dd 0b      ...........!...
    26ae:	17 ea dc ea f4 ef e9 ea e5 dd db dc dd de e0 e8     ................
    26be:	fa 13 19 f0 e0 14 0a df f0 11 1e 1c 1d 23 1e 18     .............#..
    26ce:	19 1b 19 16 10 05 f4 e4 f0 1c 10 e2 0d 19 eb dc     ................
    26de:	eb fc fe ff 07 05 00 ff 00 00 fc f5 e9 e1 f3 1c     ................
    26ee:	09 e0 0d 15 e9 de f0 03 07 0a 13 12 0e 0f 11 13     ................
    26fe:	13 0f 03 f0 e4 03 20 f0 f2 1e 09 e6 de eb f4 f5     ...... .........
    270e:	fd 05 04 04 08 0d 11 12 0c fa e5 ee 1b 09 e4 07     ................
    271e:	1e 0a f0 e7 e6 e1 df e6 e9 ea ed f3 fb 00 fe f2     ................
    272e:	e1 ec 17 08 e3 00 1c 11 fa f0 ec e3 e0 e5 e7 eb     ................
    273e:	f3 00 0c 12 11 06 ed e2 09 1a f4 e7 fd 12 17 1a     ................
    274e:	1d 18 0e 06 fb ef e7 ed fa 04 02 f3 e2 f3 15 0c     ................
    275e:	eb e6 f3 02 0b 16 1c 1b 17 13 05 f2 e6 f1 00 0a     ................
    276e:	03 f3 e2 01 12 f7 fb f4 05 0a 13 1b 1c 18 11 fd     ................
    277e:	ea eb 08 1c 1c 16 18 19 0c f1 e7 f4 08 15 1c 1d     ................
    278e:	1a 12 0a fc ec ea 05 1d 0c ee e6 e7 e4 e3 ef 04     ................
    279e:	13 16 13 0d 06 fe f9 f4 ec e9 f5 11 17 f5 e7 00     ................
    27ae:	13 16 19 1b 14 01 f2 ec e9 ea ec ef f3 fb 08 15     ................
    27be:	0f f0 e7 0c 10 f0 e9 f2 f6 f0 ec eb e8 e5 e8 ec     ................
    27ce:	f0 f4 f9 03 0f 15 05 e8 f4 16 01 e9 f8 0a 10 0e     ................
    27de:	10 0d 04 fd fc f9 f6 f3 f0 ec ee fa 0b 08 f7 f8     ................
    27ee:	fb 0b 06 f7 fe 05 08 0a 0d 10 10 0f 11 13 15 16     ................
    27fe:	13 04 f1 f3 13 0a ed 02 17 0b fa f2 f1 ed ea ee     ................
    280e:	f0 ef ee ee ef f3 fb 07 12 06 ea fb 12 f6 ed 06     ................
    281e:	16 13 0c 0a 09 02 01 02 03 01 01 01 04 0a 12 10     ................
    282e:	f9 ee 0c 0c ef f5 0a 13 0f 0d 0d 09 05 04 05 03     ................
    283e:	01 ff ff 01 08 0f 0b f6 f4 0c 06 f2 f7 05 0d 0c     ................
    284e:	0b 0c 08 04 03 02 fe fb f8 f7 f7 fa 02 08 02 f6     ................
    285e:	fc 07 03 fd fc fe ff 01 05 09 0a 08 03 fb f4 f3     ................
    286e:	f5 f8 fb fa f6 ff 0c 01 f0 f3 01 0a 0e 0f 0e 0a     ................
    287e:	04 00 fb f5 f1 f3 fb 04 07 06 fd ef ef 04 11 05     ................
    288e:	f4 ee f1 f5 fb 03 09 0b 0e 10 0c 01 f3 ee f2 f9     ................
    289e:	fa f5 ef f5 07 10 04 f5 ed ec ef f4 fc 03 08 0e     ................
    28ae:	0f 07 f6 ec f5 04 0e 11 10 08 f8 ec f0 ff 0c 12     ................
    28be:	12 10 0b 07 03 fe f7 f2 f7 07 11 07 f6 ef ef f0     ................
    28ce:	f0 f1 f8 02 09 0c 0b 08 04 00 fd fb f8 f5 f7 00     ................
    28de:	0a 06 f9 f7 ff 04 06 07 07 04 fe fa fa fb fc fd     ................
    28ee:	ff 00 03 06 09 06 fc f3 fc 0c 07 f4 f2 fb 02 02     ................
    28fe:	01 fd f7 f1 ef f1 f4 f7 f9 f9 f8 f6 f5 fc 0a 09     ................
    290e:	f3 f3 0c 0c fb f0 ef ef ec ec f0 f1 f0 f0 f1 f3     ................
    291e:	f7 fb 03 0b 0e 00 f9 f6 08 f3 0f 15 e9 e7 f3 04     ................
    292e:	0b 0f 14 13 0e 10 12 14 14 13 0f 05 f2 e5 ff 1f     ................
    293e:	f4 f2 1d 02 e1 e6 fc 0a 0c 13 19 15 14 17 1a 1d     ................
    294e:	1e 1e 1e 1a 09 ed f1 1c 05 e8 10 1c 00 e7 e4 e8     ................
    295e:	e6 e8 ef f1 f1 f3 f9 01 08 0c 0b 01 ed e4 08 18     ................
    296e:	ed f4 18 14 fb ea e9 e6 e1 e5 e9 e9 ea ef f9 04     ................
    297e:	0e 12 12 07 f1 e4 08 17 f0 f0 16 13 f4 fb ed e9     ................
    298e:	e5 ea f2 f7 00 0f 15 15 0b 05 06 12 1a 05 e9 ff     ................
    299e:	1a 0e f5 ea e9 e9 ec f6 fd 02 08 12 16 0a f4 e6     ................
    29ae:	e8 ef ef ea ee 08 17 01 e8 e6 f3 ff 09 12 16 15     ................
    29be:	15 16 10 00 ec ed 05 18 19 16 16 17 0a f0 e8 fa     ................
    29ce:	10 1a 1b 17 10 08 02 fe f6 ec ed 03 19 0c ee e9     ................
    29de:	f3 fa f8 f1 eb f0 ff 0f 15 13 0d 08 04 03 00 f9     ................
    29ee:	f1 f1 00 0d 02 f9 04 05 fb f8 ff 00 f7 fa 07 10     ................
    29fe:	13 14 14 13 10 0d 06 f8 ed f4 11 12 f0 f4 10 13     ................
    2a0e:	09 05 0b 0f 12 16 18 14 10 0c 0a 07 02 fa f0 eb     ................
    2a1e:	f9 14 0c eb fd 15 01 ed e9 ec e9 e7 ed f2 f2 f4     ................
    2a2e:	f6 f9 fd 02 09 11 14 07 ee f2 14 01 ec 0a 18 0a     ................
    2a3e:	fc f9 fa f7 f9 fe 00 00 00 01 04 08 0f 15 11 fd     ................
    2a4e:	ea 04 13 f1 f9 15 10 fe f4 f4 f1 ed f0 f3 f2 f1     ................
    2a5e:	f1 f2 f4 f9 00 0a 10 02 ed 01 0d f1 f9 11 10 02     ................
    2a6e:	f8 f7 f4 f1 f3 f5 f4 f2 f2 f2 f2 f4 f8 01 09 04     ................
    2a7e:	f5 fe 05 fa fe 06 05 fc f4 f1 ee eb eb ec ed ef     ................
    2a8e:	f1 f5 f8 fa fb f7 f3 fd 0d f9 f2 0a 0d fc f0 ef     ................
    2a9e:	f1 f0 f2 f7 f8 f9 fc 01 07 0b 0d 0d 07 fa ed fd     ................
    2aae:	14 ff ee 02 13 0e 02 fd f9 f2 f0 f1 f0 ee ed f1     ................
    2abe:	f8 ff 02 fe f2 ea fc 12 fe ed fe 10 10 08 04 ff     ................
    2ace:	f7 f4 f3 f1 ee f1 fb 08 0f 11 11 0e 01 ee f4 0f     ................
    2ade:	11 fe f1 ef f2 f6 fc 03 06 09 0e 10 0a fc ef ef     ................
    2aee:	f5 f8 f5 f0 f7 0b 0d fb ee ef f5 fc 03 0a 0c 0d     ................
    2afe:	0d 0b 01 f4 f2 00 0e 10 0e 0e 0d 06 fa f4 f9 03     ................
    2b0e:	0a 0c 0c 09 06 04 02 fe fb fd 05 06 fe fa fe 01     ................
    2b1e:	01 00 fb f5 f7 ff 07 0c 0f 10 0f 0d 08 00 f4 f1     ................
    2b2e:	02 0f 03 f7 fb fd fa f8 f6 f6 fa 03 0b 0f 10 10     ................
    2b3e:	0f 0e 0b 04 f9 f1 fd 12 05 f0 fd 0d 0f 0e 11 12     ................
    2b4e:	0e 09 06 02 fe fb f8 f5 f2 f0 f5 04 10 ff ee 05     ................
    2b5e:	0b f6 ee f5 f8 f5 f4 f4 f1 ee ed ee ee ef f0 f4     ................
    2b6e:	fd 0a 0c f8 ef 09 05 ef f8 08 0e 0d 0f 11 0d 0c     ................
    2b7e:	0d 0d 0d 0b 08 04 fb f3 f3 05 0f 0b 04 02 01 00     ................

00002b8e <ScoreWave>:
    2b8e:	00 ff fe 04 fa ff 03 fa 04 05 1c f8 c9 11 1c 03     ................
    2b9e:	00 f1 b2 24 df e3 01 df 12 17 c2 10 fa cb 11 f4     ...$............
    2bae:	f0 12 cd f6 1c d1 0c 19 d1 f4 eb d5 30 f0 ff 1f     ............0...
    2bbe:	c3 dc 13 d6 26 18 e5 0f d3 cd 20 ec 12 30 e1 dd     ....&..... ..0..
    2bce:	ec ca 26 15 08 22 ee c1 ef dd 14 35 04 13 ec bc     ..&..".....5....
    2bde:	ed 01 12 3c 0b e9 eb c8 fa 11 13 30 18 d1 da d8     ...<.......0....
    2bee:	f7 30 1d 1a 06 d2 cd ed f6 2d 27 09 00 d0 ce fa     .0.......-'.....
    2bfe:	0d 2b 30 f3 e6 db dd 0f 15 25 26 fa c9 de e1 19     .+0......%&.....
    2c0e:	2d 1e 11 ed c7 dc f8 0f 30 1a 02 eb ca e2 07 20     -.......0...... 
    2c1e:	31 19 e1 e4 dc f9 15 21 25 15 e0 cc e3 fa 29 29     1......!%.....))
    2c2e:	18 02 d9 cb eb 0a 1e 2f 0a f6 d9 d7 f1 17 27 2b     ......./......'+
    2c3e:	00 d7 e1 e9 09 1e 27 17 00 d3 d2 f2 0f 2d 22 0d     ......'......-".
    2c4e:	ee d4 d4 01 17 25 25 fb e9 d9 e8 ff 27 22 23 eb     .....%%.....'"#.
    2c5e:	d6 e8 f9 11 29 20 06 f1 c8 e4 03 17 2d 1b fe e4     ....) ......-...
    2c6e:	d2 e0 19 1a 2b 13 ec e4 e8 ec 14 29 1e 17 d5 dd     ....+......)....
    2c7e:	f5 01 1d 2d 0e 02 de ca fd 08 1d 2f 0d f1 e2 cf     ...-......./....
    2c8e:	fc 23 1b 2f fb e5 ec ec f4 2b 1d 22 fd ce ec fe     .#./.....+."....
    2c9e:	04 2f 1e 06 f6 cf dc 11 04 2e 22 00 e9 dd d6 1c     ./........".....
    2cae:	1c 27 1d ea e7 f8 e6 0e 2d 18 18 e4 d0 ff fa 15     .'......-.......
    2cbe:	30 13 ff ea c8 fc 10 0d 35 12 f2 eb d8 eb 2d 1a     0.......5.....-.
    2cce:	2c 0a de f5 f5 ea 2a 27 0f 0f cf e2 06 f9 27 30     ,.....*'......'0
    2cde:	00 f3 d2 cf 19 03 fd 22 e3 0e 1c 18 d1 f4 00 f6     ......."........
    2cee:	0a d9 f9 ff d8 ff dc 0c 0b d5 18 d6 f4 ff f1 0c     ................
    2cfe:	ca fe fd d3 1e e4 f2 ef db 1d e2 0e 04 c3 0b e0     ................
    2d0e:	13 0c f5 04 bb 05 00 f5 2e e1 ee d1 e8 29 fc 24     .............).$
    2d1e:	fc c3 ef e3 21 16 06 01 c4 ef f4 16 36 ef f6 c8     ....!.......6...
    2d2e:	e7 1b 0d 35 ff cc de e1 20 1f 16 07 c9 db ef 1e     ...5.... .......
    2d3e:	32 08 03 c6 dc 02 0f 3c 03 e4 d8 d5 17 17 26 0e     2......<......&.
    2d4e:	ce d9 e9 17 2a 1d 10 ca d1 ec 12 3d 0a 00 d6 cc     ....*......=....
    2d5e:	04 0e 34 15 de e1 de 0a 20 29 17 d7 ce e1 12 30     ..4..... ).....0
    2d6e:	1b 14 d6 c8 ef 0b 39 1e f7 e5 d0 fb 16 2b 1e e7     ......9......+..
    2d7e:	d4 df 03 20 26 22 dd ca e2 05 31 23 0d ec c4 ea     ... &"....1#....
    2d8e:	0f 26 23 f8 e3 dd ec 14 2e 26 ed d3 dc fc 22 27     .&#......&...."'
    2d9e:	20 f0 c3 e2 02 22 2a 0a f3 d2 df 10 27 2a 06 e2      ...."*.....'*..
    2dae:	db e6 10 28 2a fa d1 e1 f3 17 2f 15 ff ce df 0c     ...(*...../.....
    2dbe:	18 2e 18 ee dc d4 06 26 2b 0f e5 df e2 08 29 20     .......&+.....) 
    2dce:	11 d5 e2 fc 08 2f 1c ff de cd 06 18 2b 1f f5 e0     ...../......+...
    2dde:	d3 fc 23 23 20 e2 e7 ea f6 2e 16 0f e7 d1 05 00     ..## ...........
    2dee:	28 2a 03 e8 c9 fa 17 23 2c f5 ee d4 ef 25 12 24     (*.....#,....%.$
    2dfe:	f0 e0 ff e8 2a 25 11 f8 c7 fe 00 1e 31 04 f9 c7     ....*%......1...
    2e0e:	f1 16 11 37 f7 f1 ec de 29 14 23 06 d0 02 e4 19     ...7....).#.....
    2e1e:	2c 10 08 c6 f9 00 0f 39 fe 08 d4 e4 20 02 34 0a     ,......9.... .4.
    2e2e:	e5 f8 d0 1c 1f 20 17 cf fd e6 09 33 09 1a cc f0     ..... .....3....
    2e3e:	0c f6 3b 07 fd eb d1 1d 0a 2c 1e e3 f8 d1 09 25     ..;......,.....%
    2e4e:	19 26 d3 f9 ef f2 39 04 17 e4 de 1b f1 33 21 f8     .&....9......3!.
    2e5e:	f7 c7 0e 13 1f 2e e6 fa da f3 2d 08 2a e4 eb 0b     ..........-.*...
    2e6e:	e3 38 1d 07 f7 c9 2d ea e8 fa f3 2b fc f0 fd f6     .8....-....+....
    2e7e:	04 fa 13 d4 f9 ed 0e fb cf 1e c0 04 e6 0e d4 02     ................
    2e8e:	f3 e4 17 cf 0a c9 1c d5 1f d9 ea ff e4 1f e2 0f     ................
    2e9e:	b2 26 d9 24 f9 eb df ea 25 f1 2b c0 ef d7 27 0d     .&.$....%.+...'.
    2eae:	06 ef c5 04 f6 3b e7 f9 c1 06 08 1e 13 d0 df e2     .....;..........
    2ebe:	30 08 22 d9 d0 ee 17 26 fd f7 c3 fb 03 36 06 e5     0."....&.....6..
    2ece:	d9 f5 1a 18 21 d6 d9 e2 23 1e 19 ec cc f2 07 35     ....!...#......5
    2ede:	06 f9 ca ed 09 2b 15 e3 e3 e4 1a 1c 27 e2 ce e7     .....+......'...
    2eee:	14 24 10 fc c7 e5 05 32 10 f6 da e2 0e 1e 1f e9     .$.....2........
    2efe:	db e0 14 1d 23 f7 cb ee 08 29 13 03 cc de 03 2a     ....#....).....*
    2f0e:	20 f7 e6 df 09 1c 27 f4 d8 e4 04 23 20 00 cf e7      .....'....# ...
    2f1e:	01 28 1f 06 dc d0 03 20 22 f9 ed d9 fb 1c 29 05     .(..... ".....).
    2f2e:	d3 ea fd 1d 18 0d d7 d5 ff 20 28 06 ed d5 01 16     ......... (.....
    2f3e:	28 0b e3 e0 f0 1c 23 15 d9 ed f5 1a 24 11 e4 cc     (.....#.....$...
    2f4e:	ff 14 30 0a f4 d6 f0 19 27 17 e1 ea e4 19 20 16     ..0.....'..... .
    2f5e:	e2 e0 f7 0d 2c 14 f7 c6 ff 0e 26 10 f7 dc de 18     ....,.....&.....
    2f6e:	23 26 e1 f1 e8 0d 1c 1d f4 cf fa 01 31 15 03 d4     #&..........1...
    2f7e:	f5 0a 25 27 f4 e6 d2 14 1e 29 ef ee e8 fb 2d 1c     ..%'.....)....-.
    2f8e:	05 c8 fd f8 2c 1a 05 da dd 11 1b 32 f6 f1 d1 0a     ....,......2....
    2f9e:	1d 22 ff de f1 ea 30 1e 13 cd fb fd 1b 28 04 e9     ."....0......(..
    2fae:	c9 14 12 39 fc f4 de f6 24 1f 18 d1 f9 df 2d 1f     ...9....$.....-.
    2fbe:	13 df ea 02 0c 3e 01 f7 c1 10 0e 2c 0c ee e6 db     .....>.....,....
    2fce:	32 17 2a ce 00 e2 1d 25 0f f1 cc 0f fa 47 02 01     2.*....%.....G..
    2fde:	c9 06 12 1f 24 df f4 cb 35 14 31 db f9 ee 06 3a     ....$...5.1....:
    2fee:	07 06 ba 19 ef 44 0b fe d6 ee 21 13 3b d7 ff c5     .....D....!.;...
    2ffe:	2c 16 20 ef e5 02 f1 48 ff 0f bc 18 ff 17 04 fc     ,. ....H........
    300e:	0d fe 07 f5 0e 07 ef eb 00 f7 fd ff f8 e7 05 f9     ................
    301e:	ef 03 f4 fa 11 f6 ed 0d f0 eb 05 f9 fa 07 ec f2     ................
    302e:	0d ec f6 0d f4 ed 09 e7 fe 0d f0 ff 11 e0 f7 09     ................
    303e:	e8 09 0b f0 05 ff de 04 06 ef 10 08 ef f8 f5 e6     ................
    304e:	0e 06 f9 0f 05 e0 f9 f5 f3 15 07 fa 0d f0 e2 05     ................
    305e:	f8 02 18 01 f6 fd e7 f4 0d 00 0d 10 f8 eb f3 ef     ................
    306e:	03 12 08 0a 08 ed e9 fa f6 0c 15 03 01 fe e5 f5     ................
    307e:	03 ff 13 10 f7 f7 f2 ec 07 09 08 13 02 eb f0 f1     ................
    308e:	fb 12 0d 0a 08 f5 e6 f3 fa 06 16 0c fe fd ee eb     ................
    309e:	02 02 0d 17 00 f2 f6 ed fc 0d 08 11 0d f1 eb f2     ................
    30ae:	f6 0b 12 0c 0b fc e9 eb f8 03 13 14 06 fb f2 e9     ................
    30be:	f8 03 0b 16 0e f5 f1 ef f3 07 0d 0e 12 fd e9 f0     ................
    30ce:	f4 01 12 10 0c 06 ee e9 f1 ff 0d 16 0d 00 f4 ee     ................
    30de:	ef fd 0c 12 13 02 ed ef f2 fc 0c 12 10 0b ef ea     ................
    30ee:	f1 fd 0a 15 0f 09 f8 e9 ee f8 09 13 12 06 f8 ef     ................
    30fe:	f0 f5 07 11 12 0b f5 eb f3 f7 03 14 10 0c fd e7     ................
    310e:	ec fb 03 10 17 07 00 ef eb f3 07 0d 15 0c fa f1     ................
    311e:	f3 f3 ff 12 10 0c fd ea f0 fc fc 10 16 09 04 ef     ................
    312e:	e5 f8 02 08 1a 0c 00 fa eb ed 03 0a 11 13 fe f4     ................
    313e:	f4 f4 f8 10 11 0d 04 ef ea fd fd 07 1a 0d 02 f9     ................
    314e:	e4 ef 07 04 14 17 ff fa f3 e7 fc 0e 0c 16 06 f3     ................
    315e:	f5 f8 f1 0b 14 0e 0a f6 e7 f9 01 00 18 15 04 fc     ................
    316e:	ec e5 04 0a 0b 1c 09 f4 f8 ea ee 11 0e 12 13 f6     ................
    317e:	ef fb ef 00 19 0f 0d 00 e8 f0 03 fc 10 1b 08 fd     ................
    318e:	f4 e3 f8 14 06 1a 10 e7 0c 13 0f 09 fd e5 05 0b     ................
    319e:	00 01 ee e9 09 eb fc f1 f9 13 ee f7 08 e8 01 fb     ................
    31ae:	fc 06 e7 ff 04 eb 0b fc f0 fc ea 02 06 f1 13 ed     ................
    31be:	ee 04 eb 0f 04 f5 06 df f9 07 f8 17 00 ed f7 e3     ................
    31ce:	06 0f fe 13 f2 e5 f6 ef 14 13 fd 07 e6 ec 00 fb     ................
    31de:	1d 09 f4 f6 e4 fd 0b 0a 1b fb e7 ee ed 0b 13 0a     ................
    31ee:	0e e9 e5 f5 fa 1a 13 ff fc e4 f1 00 06 20 05 f0     ............. ..
    31fe:	f0 ea 03 0b 11 17 f2 e6 ee f4 11 12 0d 07 e4 e9     ................
    320e:	f6 03 1c 0d fe f3 e5 f6 03 0e 1d fe ee ee f2 08     ................
    321e:	0d 14 10 ec e6 f0 fe 12 12 0d fe e2 ec fb 0a 19     ................
    322e:	09 fb ef e8 fb 07 13 18 fa ec f0 f7 0a 0f 14 08     ................
    323e:	e9 e6 f6 05 14 12 09 f8 e3 ee 01 0e 15 08 f7 ec     ................
    324e:	ec fe 0d 15 10 f7 e9 f3 fc 0c 12 12 02 e7 e8 fe     ................
    325e:	0a 14 12 04 f3 e4 f2 08 0f 12 06 f2 ed f0 02 11     ................
    326e:	12 0a f4 e9 f7 00 0f 14 0c fe e7 ed 04 0c 14 10     ................
    327e:	fe f2 e7 f6 0e 0e 12 03 ef f1 f3 05 14 0b 07 f1     ................
    328e:	e9 fc 01 11 15 06 fe e6 f1 0a 0b 16 0e f8 f4 e8     ................
    329e:	fc 12 0b 13 fd ed f6 f3 0a 14 07 07 ec ec 02 00     ................
    32ae:	16 12 01 fd e6 f7 0c 09 19 07 f6 f7 e7 03 13 0a     ................
    32be:	14 f6 ef f9 f2 10 11 06 06 e6 f2 03 ff 1b 0c ff     ................
    32ce:	fc e4 fe 0b 0a 1c ff f8 f8 e9 0b 10 0d 12 ee f5     ................
    32de:	f9 f3 16 0d 08 02 e3 fa 00 02 1e 05 00 f9 e4 04     ................
    32ee:	09 0e 1b f9 fb f6 eb 10 0f 0f 0d ea fa f7 f6 1a     ................
    32fe:	0c 09 fc e3 00 fe 06 1d 01 fe f5 e6 0a 08 11 17     ................
    330e:	f5 fd f5 ee 15 0e 10 08 e8 ff f5 fa 1e 09 08 f5     ................
    331e:	e5 05 00 0d 1f f4 08 05 fb 0b 0a 0b ee 00 f8 fd     ................
    332e:	ff ff 05 ed fd f4 fe 0b e8 09 f1 f5 fd fc 02 e5     ................
    333e:	07 ef fa 06 eb ff e8 0a f7 02 04 df 09 ea 0e fb     ................
    334e:	00 f7 e1 11 ed 11 fd f2 f0 eb 15 f7 13 f7 e5 f4     ................
    335e:	f5 19 00 0a ed e9 00 ff 1a fd f8 eb f1 0d 03 18     ................
    336e:	f4 ea ee f9 19 06 10 ea e5 f6 05 1e 01 02 e1 f1     ................
    337e:	01 0d 1c f4 f5 e2 01 0c 10 13 e7 eb ec 0e 13 0d     ................
    338e:	05 e2 ed fa 14 14 01 f6 e7 fa 07 15 0d f0 f0 ee     ................
    339e:	09 0e 11 05 e3 ee f6 14 12 0a f9 df f4 00 1c 0d     ................
    33ae:	fd ee e7 02 09 1d 01 ed ea f5 0f 0f 15 f5 e3 ee     ................
    33be:	04 16 10 06 ee e6 fa 0e 18 08 f6 ee f1 06 11 12     ................
    33ce:	f9 ec f3 fb 12 0e 0b ef e5 fa 07 19 0b 00 e7 ea     ................
    33de:	02 12 17 fe f4 e9 f9 0a 15 0e f1 ea f4 06 13 12     ................
    33ee:	02 e7 e9 02 0f 16 08 f6 eb f1 0e 11 10 f9 f1 f4     ................
    33fe:	fd 13 0d 07 eb f3 fb 08 17 08 fe e3 f4 05 11 16     ................
    340e:	ff f4 e7 fb 0f 14 0c f2 f1 f3 05 15 0f ff e7 f5     ................
    341e:	01 0e 17 04 f7 e3 fe 0b 11 13 f4 f7 eb 08 10 0d     ................
    342e:	06 ec fe f3 10 0e 09 f9 e8 02 fc 18 0c 02 f0 e7     ................
    343e:	08 07 1a 06 f6 f0 ed 0f 0d 14 f9 ef f9 f7 16 0d     ................
    344e:	0b ed ed 05 00 1d 06 00 ea f1 0e 07 1c f9 fa f1     ................
    345e:	f8 14 07 13 ed fe f6 00 16 04 0a e4 00 fc 0a 19     ................
    346e:	ff 01 e1 00 07 12 15 f5 f9 e8 04 11 10 0a e9 fe     ................
    347e:	f1 0c 15 09 ff e3 06 fc 14 14 fc fb e5 0c 05 15     ................
    348e:	0a f2 fe eb 11 09 10 fe ef 04 ef 19 08 0b f3 ed     ................
    349e:	08 fa 1e 07 00 ef ec 0f 06 1c fe f6 f4 f0 18 0b     ................
    34ae:	13 f1 f3 ff f7 23 03 08 e3 fa 09 03 19 f8 04 fa     .....#..........
    34be:	04 01 f2 fd 0b 00 ee fe 04 ff 02 ff f9 ee 05 fb     ................
    34ce:	f8 ff fb f9 08 02 f5 ff 05 f2 fe 00 fa 00 03 f4     ................
    34de:	fa 06 f6 fa 05 fc f7 00 fb f6 06 01 f7 06 01 f0     ................
    34ee:	fc 04 f4 04 08 f9 fd 00 f2 f8 07 fb 00 0a fd f7     ................
    34fe:	fc f7 f6 09 05 fd 09 02 f2 f6 fd f7 05 09 00 ff     ................
    350e:	02 f4 f4 00 ff 02 0e 02 fc fc f7 f4 04 03 03 09     ................
    351e:	05 f6 f6 f8 f6 02 09 06 05 04 f9 f2 fa fc 03 0c     ................
    352e:	07 02 ff f8 f1 fd fe 03 0a 08 fc fa fa f4 fe 07     ................
    353e:	05 09 08 fd f3 f7 f8 ff 08 07 06 03 fb f1 f8 fb     ................
    354e:	00 0a 0a 01 00 fb f3 f8 02 02 09 0a 01 f7 f8 f5     ................
    355e:	fa 02 06 07 07 fe f5 f5 f9 fd 08 0a 05 06 ff f3     ................
    356e:	f5 fb ff 06 0a 05 fd fc f5 f6 fe 03 07 0a 03 fc     ................
    357e:	f7 f7 fa 03 06 07 08 03 f5 f5 f8 fc 03 09 09 04     ................
    358e:	01 f8 f3 f9 01 06 0a 08 02 fb f7 f6 fc 01 08 08     ................
    359e:	07 fc f8 f8 fa ff 07 09 08 05 fd f3 f6 fd 02 07     ................
    35ae:	0b 06 00 f9 f4 f6 fe 05 08 0a 03 fd fa f8 f9 02     ................
    35be:	07 08 08 02 f6 f6 fa fd 01 0a 08 03 fe f6 f3 fc     ................
    35ce:	02 06 0b 08 02 fc f7 f4 fc 04 05 09 08 fb f8 f9     ................
    35de:	f8 fc 09 08 07 05 fb f4 fb fe 00 08 0a 05 02 f7     ................
    35ee:	f4 f9 01 01 09 0c 01 fe fb f4 f8 05 07 08 0b 01     ................
    35fe:	f7 fa fa f9 04 09 05 07 fd f4 fa ff fd 07 0d 05     ................
    360e:	03 fe f2 f6 02 02 05 0e 05 fc fb f7 f5 01 08 05     ................
    361e:	0b 03 f9 fa fd f7 03 0a 06 08 04 f4 f6 ff fc 00     ................
    362e:	0e 07 01 fe f6 f2 01 03 04 0c 09 fe fd f9 f4 fd     ................
    363e:	09 04 0c 07 f8 f7 06 fb f9 05 ff 07 05 ef fd 09     ................
    364e:	01 fe 00 ee fe 02 f5 02 f5 00 08 f6 fb 05 f1 ff     ................
    365e:	ff fb 03 fb f4 07 f8 fc 05 fa f9 ff f3 04 02 fb     ................
    366e:	08 fc f0 02 fa 01 0a fc ff fe ef 03 00 fd 0b 02     ................
    367e:	f5 fa f2 fe 0a 00 07 03 f2 f6 fa fb 0b 06 02 02     ................
    368e:	f1 f4 fe 00 0b 0b fb fb f6 f6 04 03 09 0a fd f2     ................
    369e:	f6 f6 07 0a 06 07 fa f0 f8 fb 04 0d 05 01 fa f0     ................
    36ae:	fa 00 06 0e 05 f7 f9 f3 fe 06 06 0b 04 f6 f3 f7     ................
    36be:	fd 0c 08 07 01 f2 f2 fb 01 0a 0b 01 fe f4 f5 fe     ................
    36ce:	03 0b 0c fd f6 f7 f7 04 07 0a 07 fc f2 f5 fa 04     ................
    36de:	0c 07 06 fa f1 f5 00 07 0d 07 fd fa f3 fb 00 09     ................
    36ee:	0b 08 f7 f6 f7 fd 07 09 08 02 f7 f1 f9 ff 08 0c     ................
    36fe:	06 00 f5 f2 fa 06 09 0c 01 fb f7 f7 fd 06 0b 09     ................
    370e:	01 f3 f7 fa 02 09 0a 05 fd f3 f4 ff 03 0a 0a 03     ................
    371e:	fb f4 f4 01 09 0a 09 fc f9 f8 fa 00 0a 08 05 fb     ................
    372e:	f2 fa fe 05 0b 07 01 f9 f2 f9 04 03 0c 06 fe f7     ................
    373e:	f6 f8 08 08 0a 05 f8 f9 fb fb 07 0b 05 03 f6 f4     ................
    374e:	ff ff 08 0b 04 fd f7 f2 02 04 05 0d 01 fb f9 f6     ................
    375e:	fe 0b 05 0b fe f6 fd fb fe 0c 06 03 00 f1 fa 01     ................
    376e:	ff 0d 08 00 fc f3 f7 09 00 0b 09 fc fb f9 f5 07     ................
    377e:	08 07 09 f7 f8 00 f8 06 0b 02 04 f9 f2 03 fc 05     ................
    378e:	0e 02 ff fa f1 02 06 02 0f 01 fa fe f5 fc 0c 03     ................
    379e:	0b 03 f3 ff fc fb 0d 05 02 02 f2 fa 04 fa 0d 09     ................
    37ae:	00 fe f5 f5 0a 01 09 0b fb fe fd f4 05 09 04 0b     ................
    37be:	f9 f6 02 f7 04 0c 02 04 fb f1 03 fe 00 10 03 ff     ................
    37ce:	fb f2 fe 0c 00 0f 01 f7 0c 04 05 06 f3 fd ff fe     ................
    37de:	01 f6 fe ff f5 00 f6 03 02 f5 05 f5 fc ff fc 03     ................
    37ee:	f2 ff ff f4 07 f9 fc fb f6 07 f8 03 00 f1 02 f8     ................
    37fe:	04 03 fd 01 ee 01 00 fe 0b f8 fb f4 f9 0a fe 09     ................
    380e:	fe f0 fb f8 08 06 01 00 f0 fb fc 05 0d fc fd f2     ................
    381e:	f9 06 03 0d ff f3 f7 f8 08 07 05 01 f2 f6 fb 07     ................
    382e:	0c 02 00 f1 f7 00 03 0f 01 f8 f5 f5 05 05 09 03     ................
    383e:	f3 f6 fa 06 0a 07 03 f2 f4 fb 04 0f 02 ff f5 f3     ................
    384e:	00 04 0c 05 f7 f8 f7 02 08 0a 05 f5 f3 f8 04 0c     ................
    385e:	06 05 f5 f2 fb 02 0e 07 fd f9 f3 fe 05 0a 07 f9     ................
    386e:	f4 f8 00 08 09 08 f7 f2 f8 01 0c 09 03 fb f1 fa     ................
    387e:	03 09 08 fe f8 f7 fa 05 0b 09 fb f4 f7 fe 08 0a     ................
    388e:	07 fc f0 f8 00 08 0a 02 fc f4 f7 04 09 0a 01 f8     ................
    389e:	f6 f9 04 0a 0a fe f4 f8 fc 05 0b 05 ff f3 f7 03     ................
    38ae:	05 0b 05 fb f7 f5 01 09 0a 03 f9 f7 f8 02 0a 08     ................
    38be:	04 f5 f8 ff 01 0b 06 ff f7 f3 01 06 0a 07 fd f8     ................
    38ce:	f4 ff 08 08 08 f8 f9 fa fd 0b 05 03 f9 f4 01 ff     ................
    38de:	09 0a 00 fa f2 fe 05 08 0b fd fb f5 fb 09 04 09     ................
    38ee:	fc f8 ff fa 0a 09 04 fe f1 ff ff 07 0c 00 fe f1     ................
    38fe:	fc 05 03 0d fd fc fb f7 0a 04 08 01 f3 00 f9 06     ................
    390e:	0a 04 02 f1 fe 00 03 0e ff 02 f5 f8 08 00 0d 02     ................
    391e:	f9 fe f3 07 07 08 05 f3 ff f9 02 0c 02 06 f2 fc     ................
    392e:	02 fd 0e 01 ff fb f4 07 02 0b 07 f8 fe f4 02 09     ................
    393e:	06 09 f4 fe fc fc 0e 01 05 f9 f7 06 fc 0c 08 fe     ................
    394e:	fd f2 03 04 07 0b f9 fe f6 fc 0b 01 0a f9 fa 03     ................
    395e:	f7 0d 06 02 fe f0 05 ff 09 0d fc fe f5 00 03 fd     ................
    396e:	03 fc 03 00 03 03 f8 fa 03 00 02 fe 01 f8 f8 05     ................
    397e:	fc fc ff fd fc 04 02 fa fe 04 f9 fc 01 ff fc 02     ................
    398e:	ff f8 ff 03 f9 fe 03 ff f9 00 ff f9 02 04 fb 00     ................
    399e:	04 fc f7 01 00 fa 04 04 fc ff 01 fa fa 03 01 fd     ................
    39ae:	05 03 fb fc fe f9 fd 05 01 00 04 01 f9 fa fe fb     ................
    39be:	00 06 02 ff 01 fd f7 fc 00 fd 03 06 02 fd fd fb     ................
    39ce:	f9 ff 03 00 04 05 ff fb fb fb fc 03 05 02 03 02     ................
    39de:	fc f8 fb fd 00 05 05 01 00 ff fa f9 fe ff 02 05     ................
    39ee:	04 fe fc fc fa fd 02 02 04 04 01 fa fa fb fc 01     ................
    39fe:	04 03 03 02 fe f8 fa fe ff 04 06 02 00 ff fb f9     ................
    3a0e:	fd 01 02 05 05 00 fd fc fb fc 01 04 04 04 02 fd     ................
    3a1e:	fa fb fc ff 03 05 03 01 ff fa f9 fc fe 02 04 05     ................
    3a2e:	01 fe fc fa fc 00 01 04 05 03 fd fb fb fc 00 03     ................
    3a3e:	03 04 03 ff fa f9 fc ff 02 05 04 02 00 fd f9 fb     ................
    3a4e:	ff 02 04 05 02 fe fd fb fb fd 01 04 04 03 fe fb     ................
    3a5e:	fb fc fe 00 04 05 03 00 fb f9 fb ff 01 03 05 03     ................
    3a6e:	00 fd fa fa fe 02 03 04 04 00 fd fc fc fd 01 04     ................
    3a7e:	04 03 01 fc fa fd fe ff 04 06 03 00 fe fa fa fe     ................
    3a8e:	01 01 05 05 00 fd fc fa fc 01 03 03 05 02 fc fb     ................
    3a9e:	fd fc ff 04 04 03 03 fe f9 fc ff ff 02 06 04 01     ................
    3aae:	00 fb f8 fe 02 02 04 06 01 fe fe fb fa 00 04 02     ................
    3abe:	04 04 fd fc fe fc fc 03 05 02 03 00 fa fb ff ff     ................
    3ace:	ff 06 05 01 00 fd f9 fc 02 01 02 07 04 fe fd fd     ................
    3ade:	f9 fe 04 03 03 05 00 fa fd fe fb 01 06 03 02 02     ................
    3aee:	fc f8 fe 00 fe 05 06 fd fb 05 ff 04 fd f9 00 fd     ................
    3afe:	ff 00 fe f9 01 01 f9 01 fe fc 03 ff fa 03 ff f9     ................
    3b0e:	01 fe fd 03 fd fa 04 fc fb 04 fe fb 02 fb fb 05     ................
    3b1e:	fb ff 05 fa fa 02 fa ff 05 fd 00 01 f7 fd 03 fb     ................
    3b2e:	03 04 fc fd fe f7 01 03 fe 04 03 f8 fd fd fa 05     ................
    3b3e:	03 ff 04 fe f7 ff fd fe 07 02 fe ff fa f9 01 00     ................
    3b4e:	02 06 01 fb fc fa fd 03 03 03 04 fd f9 fc fb 01     ................
    3b5e:	06 02 01 00 f8 fb ff ff 05 05 00 fe fc f9 ff 01     ................
    3b6e:	02 06 03 fc fa fb fc 02 04 03 03 00 f9 fa fd ff     ................
    3b7e:	05 05 01 00 fc f9 fe ff 03 06 02 fd fc fa fd 01     ................
    3b8e:	02 05 04 fe fa fa fc 01 04 04 03 00 fb f9 fc ff     ................
    3b9e:	04 06 03 ff fd f9 fb 00 02 05 05 fe fc fb fb 00     ................
    3bae:	03 04 05 01 fa f9 fb ff 04 05 04 01 fc f9 fa ff     ................
    3bbe:	03 05 05 00 fd fa fa fe 03 05 06 01 fb fb fb fe     ................
    3bce:	03 05 05 03 fc f9 fa fe 02 05 05 03 fe fa f9 fd     ................
    3bde:	02 05 06 03 fd fb fa fc 02 05 05 04 fd f9 fb fd     ................
    3bee:	00 05 05 04 ff f9 f9 fd 01 04 06 03 00 fb f9 fb     ................
    3bfe:	01 04 06 04 ff fa fb fb fe 05 05 04 01 f9 f9 fd     ................
    3c0e:	fe 04 07 03 01 fb f8 fb 00 02 06 05 00 fc fa fa     ................
    3c1e:	ff 04 04 05 01 fb fb fd fc 04 06 03 02 fc f8 fd     ................
    3c2e:	ff 00 07 05 01 ff f8 f9 00 01 04 07 01 fd fc fa     ................
    3c3e:	fc 04 03 05 03 fc fa fe fc 01 07 03 02 fe f8 fb     ................
    3c4e:	01 ff 05 07 00 ff fb f7 ff 03 02 07 03 fc fd fb     ................
    3c5e:	fa 03 04 03 05 fe fa fe fd fe 07 04 02 00 f9 f9     ................
    3c6e:	01 00 02 08 02 fe fd f7 fc 05 01 05 06 fd fc fd     ................
    3c7e:	f8 00 06 01 05 01 fa 01 05 fc fe 03 fe f9 01 03     ................
    3c8e:	ff 00 fb fa 02 fa ff fc fe 04 fb fd 01 fa 00 ff     ................
    3c9e:	ff 01 f9 ff 01 fa 02 ff fb ff fa 00 01 fc 04 fb     ................
    3cae:	fb 01 fa 03 01 fd 01 f7 fe 01 fe 06 00 fb fd f8     ................
    3cbe:	01 03 ff 04 fc f9 fd fb 05 04 ff 01 f9 fb 00 ff     ................
    3cce:	07 02 fd fd f9 ff 02 02 06 fe f9 fb fb 02 05 02     ................
    3cde:	03 fa f9 fd fe 06 04 ff ff f9 fc 00 01 08 01 fc     ................
    3cee:	fc fa 00 02 04 05 fc f9 fb fd 04 04 03 01 f9 fa     ................
    3cfe:	fd 00 07 03 ff fc f9 fd 01 03 07 ff fb fb fc 02     ................
    3d0e:	03 05 04 fb f9 fc ff 04 04 03 ff f8 fa fe 02 06     ................
    3d1e:	02 fe fb fa fe 02 05 05 fe fb fc fd 02 04 05 01     ................
    3d2e:	fa f9 fd 01 04 04 02 fd f8 fb 00 03 05 01 fd fb     ................
    3d3e:	fb ff 03 05 04 fd fa fc ff 03 04 04 00 f9 fa ff     ................
    3d4e:	02 04 04 00 fc f9 fc 02 03 04 01 fc fb fc 00 04     ................
    3d5e:	04 02 fd fa fe ff 03 05 03 ff fa fb 01 02 05 04     ................
    3d6e:	ff fc f9 fd 03 03 04 00 fb fc fc 01 05 02 02 fc     ................
    3d7e:	fa ff 00 04 05 01 ff f9 fc 02 02 05 03 fd fd f9     ................
    3d8e:	ff 04 03 04 ff fb fd fc 02 05 01 01 fb fa 00 ff     ................
    3d9e:	05 04 00 ff f9 fd 03 02 06 01 fd fd f9 00 05 02     ................
    3dae:	05 fd fb fe fc 04 04 01 01 f9 fc 00 00 06 03 ff     ................
    3dbe:	ff f8 ff 02 02 07 ff fd fe fa 02 04 03 04 fb fd     ................
    3dce:	fe fc 05 03 02 00 f8 fe 00 00 07 01 00 fe f9 01     ................
    3dde:	02 03 07 fe fe fd fa 04 04 03 03 fa fe fd fd 06     ................
    3dee:	03 02 ff f8 00 ff 01 07 00 ff fd f9 02 01 04 05     ................
    3dfe:	fd ff fd fb 05 03 04 01 fa ff fd fe 08 01 02 fd     ................
    3e0e:	f9 01 ff 02 07 fe ff fb fa 04 02 04 02 fc 01 ff     ................
    3e1e:	ff 00 fd fe 01 ff ff fb 02 00 01 fe 01 ff fb fd     ................
    3e2e:	04 fc ff fe ff fc 02 00 ff fb 03 fe fd fe 02 fd     ................
    3e3e:	ff 00 ff fb 01 01 fe fd 02 ff fd fe 01 fc fe 02     ................
    3e4e:	00 fd 01 02 fc fc 00 00 fc 02 01 00 fd 01 fd fc     ................
    3e5e:	fe 03 fd 02 01 02 fb ff fd fe fc 04 00 01 ff 03     ................
    3e6e:	fb fd fd 00 fc 03 01 02 fe 02 fd fd fc 01 fd 02     ................
    3e7e:	02 03 fe 00 fd fe fc 02 ff 02 01 03 fe fe fc fe     ................
    3e8e:	fc 01 01 02 00 02 ff fd fc ff fe 01 02 03 00 00     ................
    3e9e:	ff fd fc ff 00 00 02 03 00 fe ff fd fd fe 01 00     ................
    3eae:	02 02 01 fd fd fc fe fe 02 01 03 00 01 fd fd fc     ................
    3ebe:	00 fe 03 02 03 fe 00 fd fd fc 01 ff 03 02 02 fe     ................
    3ece:	ff fc fe fd 01 00 02 01 02 fe fe fc fe fe 01 01     ................
    3ede:	03 01 01 fe fd fc fe ff 01 02 02 01 ff fe fd fd     ................
    3eee:	ff 00 01 02 02 00 fe fd fd fe ff 01 02 02 01 00     ................
    3efe:	fd fd fd ff ff 02 02 02 01 00 fe fd fc ff 00 02     ................
    3f0e:	01 03 00 ff fd fe fd 00 01 03 01 02 ff fe fc fe     ................
    3f1e:	fe 01 01 03 01 01 fe fd fc fe ff 01 01 03 01 00     ................
    3f2e:	fe fe fc fe ff 02 01 02 01 00 fd fe fd fe 00 02     ................
    3f3e:	02 01 00 ff fc fe ff 00 00 03 02 01 ff fe fc fd     ................
    3f4e:	ff 01 01 02 02 00 fe fe fd fd ff 02 01 02 02 00     ................
    3f5e:	fe fe fe fe fe 02 02 01 01 00 fd fd ff 00 ff 02     ................
    3f6e:	03 01 00 ff fd fc fe 01 00 01 03 02 fe fe fe fd     ................
    3f7e:	fd 01 02 01 01 02 fe fd fe ff fd 00 02 01 01 01     ................
    3f8e:	ff fc fe 00 ff 00 03 02 00 ff ff fc fd 00 01 00     ................
    3f9e:	02 03 00 fe fe fe fd ff 02 fc fe 01 02 fd fc 01     ................
    3fae:	00 00 ff 00 fb fe 01 fc ff 00 fd 00 02 fd fe 02     ................
    3fbe:	fe fc 01 ff ff 01 ff fc 01 ff fc 01 01 fd ff 00     ................
    3fce:	fc ff 01 fd ff 02 fe fc 01 fe fe 03 00 ff 01 fe     ................
    3fde:	fb 01 ff fe 02 01 fd fe ff fc ff 02 ff 01 02 fe     ................
    3fee:	fc ff fd ff 03 01 00 01 fe fb fe ff ff 02 02 ff     ................
    3ffe:	ff fe fc fe 01 00 02 03 ff fd fd fc fe 01 01 01     ................
    400e:	02 ff fc fd fe ff 02 02 01 01 ff fc fd ff ff 02     ................
    401e:	03 01 fe fe fc fd 00 01 02 03 01 fe fd fd fe 01     ................
    402e:	02 02 02 00 fc fc fd fe 01 03 02 00 ff fd fc fe     ................
    403e:	00 01 03 02 ff fd fd fd 00 00 02 02 01 fe fd fd     ................
    404e:	fd 00 02 02 02 01 fe fc fd ff 00 02 02 01 ff fd     ................
    405e:	fc fe ff 01 02 02 00 fe fd fd ff 01 02 02 02 ff     ................
    406e:	fc fc fd ff 01 03 02 00 fe fc fc fe 00 02 03 01     ................
    407e:	ff fe fd fd ff 01 02 02 01 fd fd fd fe 00 02 02     ................
    408e:	02 00 fd fc fe 00 01 02 02 01 ff fc fc fd 00 01     ................
    409e:	03 02 ff fe fd fd fe 02 02 02 02 ff fc fd fe 00     ................
    40ae:	01 03 02 00 fe fc fd ff 01 02 03 01 ff fe fc fd     ................
    40be:	00 02 02 03 00 fd fd fd fe 00 03 02 01 ff fc fd     ................
    40ce:	ff ff 01 03 02 01 ff fc fc ff 00 01 03 02 ff fe     ................
    40de:	fd fc ff 02 02 02 01 fe fd fe fe 00 03 02 02 00     ................
    40ee:	fc fc ff ff 00 03 02 00 ff fd fb ff 01 01 03 02     ................
    40fe:	ff fe fd fc fe 02 01 02 02 fe fd fe fe fe 03 03     ................
    410e:	01 01 fe fb fe 00 ff 02 03 00 ff fe fc fe 01 00     ................
    411e:	02 03 00 fe ff fd fd 02 02 01 03 ff fc fe ff fd     ................
    412e:	02 03 00 01 ff fd ff 02 fe fe 00 01 01 fb ff 02     ................
    413e:	00 ff 00 fb ff 00 fd 00 fd ff 02 fd ff 01 fc ff     ................
    414e:	00 fe 00 fe fd 01 fe ff 01 fe fe ff fc 00 00 fe     ................
    415e:	02 fe fc 00 fe 00 02 fe 00 ff fb 00 00 ff 02 00     ................
    416e:	fd fe fc ff 02 00 01 00 fc fd fe fe 02 01 00 00     ................
    417e:	fc fd ff 00 02 02 fe fe fd fd 01 00 02 02 ff fc     ................
    418e:	fd fd 01 02 01 01 fe fc fe fe 01 03 01 00 fe fb     ................
    419e:	fe ff 01 03 01 fd fe fc ff 01 01 02 01 fd fc fd     ................
    41ae:	ff 03 01 01 00 fc fc fe 00 02 02 00 ff fc fd ff     ................
    41be:	00 02 03 ff fd fd fd 01 01 02 01 ff fc fd fe 01     ................
    41ce:	03 01 01 fe fc fd ff 01 03 01 ff fe fc fe 00 02     ................
    41de:	02 01 fd fd fd ff 01 02 02 00 fd fc fe ff 02 02     ................
    41ee:	01 00 fd fc fe 01 02 03 00 fe fd fd ff 01 02 02     ................
    41fe:	00 fd fd fe 00 02 02 01 ff fc fd ff 00 02 02 00     ................
    420e:	fe fc fd 00 02 02 02 ff fe fe fe 00 02 02 01 fe     ................
    421e:	fc fe ff 01 02 01 00 fe fc fe 01 00 03 01 ff fd     ................
    422e:	fd fe 01 02 02 01 fe fe fe fe 01 02 01 00 fd fd     ................
    423e:	ff ff 02 02 01 ff fd fc 00 01 01 03 00 fe fe fd     ................
    424e:	ff 02 01 02 ff fd ff fe ff 03 01 00 00 fc fe 00     ................
    425e:	ff 03 02 00 ff fc fd 02 00 02 02 ff fe fe fd 01     ................
    426e:	02 01 02 fd fe ff fe 01 02 00 01 fe fc 00 ff 01     ................
    427e:	03 00 ff fe fc 00 01 00 03 00 fe ff fd ff 02 00     ................
    428e:	02 00 fc ff ff fe 03 01 00 00 fc fe 01 fe 03 02     ................
    429e:	00 ff fd fd 02 00 02 02 fe ff ff fc 01 02 01 02     ................
    42ae:	01 00                                               ..

000042b0 <MagicWave>:
    42b0:	ff 00 fc 00 fd ff fe 01 fe 00 ff fe 00 ff 00 ff     ................
    42c0:	00 ff 00 ff 00 ff ff ff ff 00 09 0a 09 09 07 03     ................
    42d0:	fe fa f5 f4 fb 07 07 f9 f4 fb 00 00 fb f6 f6 fd     ................
    42e0:	06 09 09 07 07 06 03 00 fc f8 f6 fb 08 09 f9 f5     ................
    42f0:	ff 07 09 09 07 02 fb f7 f6 f7 fa fb fd fd fb f9     ................
    4300:	f9 ff 06 04 04 fd f9 04 09 06 03 03 04 07 08 08     ................
    4310:	06 05 05 05 02 ff fe fa f5 f7 03 07 f8 f8 07 05     ................
    4320:	fa f5 f5 f5 f5 f6 f8 fa fc fc fc ff 02 03 06 0b     ................
    4330:	07 fb f6 05 04 f5 fe 09 06 01 fe fd fd fe ff 00     ................
    4340:	00 ff 00 03 04 04 08 09 02 f7 fb 07 fc f7 03 07     ................
    4350:	01 fd f9 fa f7 04 26 20 27 16 f8 fe fc f0 05 07     ......& '.......
    4360:	07 0e f8 0b f2 e0 0a fe 13 17 f2 03 de e0 04 ee     ................
    4370:	46 1d ec 05 c8 f0 01 ff 3c 06 f9 ff c3 ff f7 11     F.......<.......
    4380:	41 fd 09 ed e9 12 f2 2d 39 f1 08 c0 c4 04 eb 47     A......-9......G
    4390:	2b f8 ff ac e0 0d 00 66 2f f6 e8 9e f0 f8 1d 57     +......f/......W
    43a0:	04 08 d3 b0 03 01 3e 48 f8 09 af d1 17 07 5f 3a     ......>H......_:
    43b0:	ff e9 9d c6 f8 14 56 20 f9 d2 9e db 03 35 55 1e     ......V .....5U.
    43c0:	fe bf 9d 06 2b 50 5a 1a e5 a9 ad e3 1f 4e 43 0d     ....+PZ......NC.
    43d0:	d0 b0 c0 fc 43 59 3f fa bb b3 ba 2b 5d 49 40 e3     ....CY?....+]I@.
    43e0:	ae ae c6 2d 5a 57 38 c3 a5 a5 cb 3e 47 50 25 b8     ...-ZW8....>GP%.
    43f0:	b3 a3 e4 79 61 56 05 a6 bd a9 17 5e 46 52 d8 a7     ...yaV.....^FR..
    4400:	b9 b1 3a 59 51 47 b5 af ab c8 53 72 75 23 a3 b2     ..:YQG....Sru#..
    4410:	9e e5 62 49 61 f9 9a ba a6 17 62 44 52 d3 a4 b7     ..bIa.....bDR...
    4420:	b5 39 5b 53 4a bd c6 da d0 42 49 5b 29 ab ab a1     .9[SJ....BI[)...
    4430:	e6 4a 46 51 03 b2 b7 b7 15 5b 58 4a e8 aa a5 c2     .JFQ.....[XJ....
    4440:	2c 55 54 58 ef b2 b6 e5 37 5b 52 15 cc a6 b7 f1     ,UTX....7[R.....
    4450:	2f 53 34 f8 c5 aa cf fc 3d 62 20 ed b3 a1 e0 2a     /S4.....=b ....*
    4460:	64 49 08 ea a7 ac f0 08 52 3b 07 f5 a2 c8 05 1c     dI......R;......
    4470:	59 1c 03 e8 a8 f2 0c 52 4c 07 e8 cc f7 03 52 33     Y......RL.....R3
    4480:	f6 d6 a9 ff f7 59 2b fb cf a8 03 fd 5c 39 09 ce     .....Y+.....\9..
    4490:	bd 0a fe 54 01 03 c0 c9 0e 05 47 fc 13 c1 da 26     ...T......G....&
    44a0:	0f 43 f7 10 c8 f2 02 14 38 f5 0e cb f6 f2 13 29     .C......8......)
    44b0:	f2 28 e3 03 f4 0c 0d f5 00 e1 04 f9 0f 09 01 02     .(..............
    44c0:	f5 06 fd 24 03 02 01 f7 ff 07 fa fa f8 fc 04 f3     ...$............
    44d0:	fc e1 fa f6 0e 36 03 00 d9 fe f3 22 14 f1 fd d4     .....6....."....
    44e0:	0f f0 2b 07 f9 ea c3 04 ef 36 23 2b e4 cd 0d f4     ..+......6#+....
    44f0:	45 07 0e cd c4 0a 05 5a 03 10 c3 d5 06 0d 51 f3     E......Z......Q.
    4500:	0c da dd 00 1d 4f fa 06 a8 db f7 31 50 03 f5 a5     .....O.....1P...
    4510:	e7 08 47 4c fe dc 98 08 19 4a 3f 01 d3 a2 dd 0e     ..GL.....J?.....
    4520:	54 42 04 c5 ad e6 2a 5d 40 f6 ae ae df 56 7c 46     TB....*]@....V|F
    4530:	f7 b0 ab d9 42 52 4b e1 b4 b2 ef 53 4c 41 c3 ae     ....BRK....SLA..
    4540:	ae fa 54 46 40 db c8 9c 0b 5d 55 41 af b9 a2 1a     ..TF@....]UA....
    4550:	54 4c 2b 9e bf a7 2e 4b 57 23 a4 bf ab 44 4b 66     TL+....KW#...DKf
    4560:	34 a3 af ab 46 47 5d f9 a9 b5 bd 4a 4c 5d e3 a1     4...FG]....JL]..
    4570:	a8 ce 4f 45 4c d3 a7 a5 e2 49 6d 68 d2 b2 b2 f9     ..OEL....Imh....
    4580:	47 51 39 d1 a4 b2 03 4e 57 26 d2 a8 c0 09 49 50     GQ9....NW&....IP
    4590:	0f cf 9e cc 10 7d 5f 02 d4 a1 e4 0c 51 39 fc d0     .....}_.....Q9..
    45a0:	a1 f3 0a 5b 2f 02 d1 ad 01 09 5c 1a fe f3 cb fc     ...[/.....\.....
    45b0:	06 5e 0e 05 c0 c2 03 05 55 fa 07 b9 d4 02 0c 4e     .^......U......N
    45c0:	f5 13 b8 01 20 15 40 eb 0d be fd fb 1e 2e f4 07     .... .@.........
    45d0:	c5 01 f6 1d 1e f7 03 d4 08 01 45 13 ff fa de 06     ..........E.....
    45e0:	fc 19 09 00 fe f0 06 fc 0c fe 01 fc ff ff 03 fe     ................
    45f0:	28 0c 03 08 fa 00 ee 05 fc 11 0b fc ff df 07 f4     (...............
    4600:	1e 06 fd f4 d6 0b 1b 38 03 02 e9 d4 0d f6 3f fe     .......8......?.
    4610:	08 d8 d4 0a ff 4a fa 0a ea dd 01 08 4e f6 0b b8     .....J......N...
    4620:	e1 ff 17 4e f8 07 ac e7 ff 2d 72 02 f7 9f e7 fb     ...N.....-r.....
    4630:	3d 46 fd eb 9c e9 01 4e 41 fd d9 9d 10 13 53 3c     =F.....NA.....S<
    4640:	01 cd a8 ec 18 57 35 f9 ba a8 e6 23 58 38 1a bf     .....W5....#X8..
    4650:	a9 e7 35 54 37 e2 ac af f1 4b 56 3b d0 a8 ae f8     ..5T7....KV;....
    4660:	79 5f 3b c2 ab a8 05 5a 4c 13 b8 c2 13 51 25 c1     y_;....ZL....Q%.
    4670:	b7 1d 4e 3b d1 a6 ec 4d 46 e0 a0 d7 46 51 09 b7     ..N;...MF...FQ..
    4680:	c2 3d 5e 0d a4 b7 24 64 1c af a9 11 7f 3c b7 a0     .=^...$d.....<..
    4690:	f9 61 40 d0 94 e6 4f 54 e1 a0 f2 4a 5d 00 a2 c4     .a@...OT...J]...
    46a0:	2c 5e 0f b2 b1 1f 56 31 d5 ac 0d 57 32 ce ad fa     ,^....V1...W2...
    46b0:	4b 3c da af df 51 4f ed bc d8 2a 41 04 c0 d0 19     K<...QO...*A....
    46c0:	38 09 c7 ea 12 30 14 d6 d0 ff 2c 1a ec da fb 1d     8....0....,.....
    46d0:	1d 14 dd f6 1b 14 f5 e6 f4 0e 13 06 0e fd 06 0b     ................
    46e0:	05 03 00 05 fb 0a 09 fd 08 f2 f2 0a 17 fc ec ff     ................
    46f0:	07 1e 10 ee e8 06 2a 17 02 e7 fc 30 26 f3 c7 e9     ......*....0&...
    4700:	27 3b 02 c1 e7 26 38 fc bb ca 15 55 14 bc bf 0c     ';...&8....U....
    4710:	4f 23 cf b2 0f 5d 2a d4 ae ed 43 49 e9 a4 ec 40     O#...]*...CI...@
    4720:	4b f1 9b c3 2e 5b 01 b3 c7 24 6a 22 b7 a5 0c 5f     K....[...$j"..._
    4730:	45 c1 95 fe 61 4d d7 93 e3 4c 55 eb 94 d3 45 67     E...aM...LU...Eg
    4740:	0c a2 c5 33 66 22 ab ae 1a 64 34 b9 a5 05 53 3a     ...3f"...d4...S:
    4750:	ca a3 f7 4c 4c e8 ac e8 39 47 f2 a9 d5 27 4c 11     ...LL...9G...'L.
    4760:	bd ce 18 43 1a c9 cf 12 42 2b de d2 05 2d 24 e4     ...C....B+...-$.
    4770:	d3 ff 29 31 fc dc f3 11 23 03 e4 f8 10 22 0d ec     ..)1....#...."..
    4780:	f4 00 0e 07 f2 fd 03 03 07 fa 01 fe f9 01 ff 08     ................
    4790:	06 f6 03 09 17 0b f0 e6 01 16 14 00 dc fd 1e 1d     ................
    47a0:	f1 d4 f0 21 40 03 cd e8 20 3b 02 cd d2 28 54 0f     ...!@... ;...(T.
    47b0:	c9 c0 0c 48 27 cc b4 18 52 35 da ad f3 4a 4b e5     ...H'...R5...JK.
    47c0:	b8 ee 3e 57 f6 a7 c6 32 55 09 c1 bc 1e 5f 22 b6     ..>W...2U...._".
    47d0:	a3 0d 58 40 c7 95 f9 59 46 cf 99 e2 59 6b e8 9f     ..X@...YF...Yk..
    47e0:	d4 42 59 fe a2 b7 44 70 10 ac ad 1e 5d 26 b4 b1     .BY...Dp....]&..
    47f0:	1d 58 36 ca a8 f7 56 45 df a1 00 4e 44 ed ae db     .X6...VE...ND...
    4800:	32 4a fd b6 c7 20 42 15 e1 c4 0e 3f 1a d4 c8 07     2J... B....?....
    4810:	37 21 df d1 f0 38 3e ee d6 ed 1c 1e f8 d9 e9 10     7!...8>.........
    4820:	19 01 e1 05 14 0c 07 f0 f7 ff 0a 02 fc f7 00 ff     ................
    4830:	00 1c 06 fb f6 f0 ff 06 03 ec ec fa 16 09 fa fd     ................
    4840:	f8 1e 19 ef d9 f3 20 22 f7 cb e4 15 43 16 c5 d8     ...... "....C...
    4850:	15 3e 12 cf ca 10 43 1c cf bc 1c 4c 2c ee c1 c3     .>....C....L,...
    4860:	2f 33 2f f1 c2 cf d7 36 1e 48 04 cc cc e9 33 28     /3/....6.H....3(
    4870:	36 de ca c9 f8 3b 2c 2e d4 d4 c4 0f 52 28 1e d2     6....;,.....R(..
    4880:	d2 d1 0e 35 33 18 d1 cc d5 15 2e 2f 04 e3 ee da     ...53....../....
    4890:	14 30 2f 06 dc cd e7 10 2f 24 fc d6 c6 f0 10 47     .0/...../$.....G
    48a0:	42 f7 d6 cb f9 0f 39 14 00 d7 d8 00 0f 36 07 01     B.....9......6..
    48b0:	cf eb 27 11 38 fd 00 cb eb ff 17 2f fc ff cb f0     ..'.8....../....
    48c0:	fc 15 2b f7 18 ee f8 fc 1e 21 fa fd cc 00 f7 22     ..+......!....."
    48d0:	15 ff fd da 08 f9 21 0a ff f3 e6 35 01 1a fe fe     ......!....5....
    48e0:	f1 e8 01 fa 17 01 05 f9 f8 08 00 12 fd 02 f2 fb     ................
    48f0:	02 28 17 f9 05 00 03 02 03 00 03 ff 05 ff fe f9     .(..............
    4900:	f2 00 f7 0c fc 08 f2 08 27 fd 17 f5 02 e8 f1 fe     ........'.......
    4910:	fd 19 f5 03 df f0 fc 03 1f f6 09 de f6 04 3e 2a     ..............>*
    4920:	f3 02 d3 ff ff 1e 24 fc 02 ce 02 fc 27 1d fc f4     ......$.....'...
    4930:	c6 fd fd 30 14 00 f0 f2 16 f9 35 13 01 e0 cf fd     ...0......5.....
    4940:	08 38 13 fd d7 ce f8 0e 3b 13 f6 d2 d8 f9 17 35     .8......;......5
    4950:	11 03 fc e0 fe 26 35 17 ec cc d8 01 29 2c 15 e2     .....&5.....),..
    4960:	cb d2 0d 30 2e 0e d3 cc d4 11 32 2e 30 f3 d1 d6     ...0......2.0...
    4970:	1f 31 32 03 c7 d5 d4 25 2c 39 fc c7 ce d5 2d 26     .12....%,9....-&
    4980:	34 ec c7 cc df 35 2f 65 f4 c7 cb ec 39 24 34 dd     4....5/e....9$4.
    4990:	d2 c8 f4 35 27 2b d0 d0 c4 01 35 31 23 e9 fa c5     ...5'+....51#...
    49a0:	0b 33 34 17 ce d0 d2 15 35 33 13 d2 d1 d5 16 2c     .34.....53.....,
    49b0:	2d 04 d1 d4 0a 1c 31 2e 00 d0 ca e8 1b 34 27 fc     -.....1......4'.
    49c0:	d8 d0 f7 17 35 15 f8 cf d5 f8 3c 49 0e fe cd da     ....5.....<I....
    49d0:	fd 18 38 09 ff ce e8 01 1a 2f fd fc cd ef 03 1c     ..8....../......
    49e0:	49 20 f8 c7 f5 fd 23 25 fd ff cd 02 f8 22 14 fb     I ....#%....."..
    49f0:	fb d2 05 f2 2d 2f fc f2 d9 0a fa 27 05 03 f1 e2     ....-/.....'....
    4a00:	05 f7 1e fc 07 f0 f5 27 fd 1c fd 07 f2 f8 01 fe     .......'........
    4a10:	0d f8 00 f0 fa fe 01 06 07 29 fa fc 00 02 fd fc     .........)......
    4a20:	fc 01 fd fe f8 f7 ff fb 0a f9 08 1a fa 03 02 15     ................
    4a30:	f7 04 ee f8 fd 02 1a f9 08 e2 fc fc 11 41 f9 03     .............A..
    4a40:	d6 fc f8 13 1b f8 02 d2 00 f6 23 17 ff f9 d8 28     ..........#....(
    4a50:	04 18 01 00 f7 03 09 0b fa f6 fa 0c 08 02 0b f5     ................
    4a60:	0b 17 ff e9 ec 0c 16 04 e1 e9 02 2c 24 e1 e0 01     ...........,$...
    4a70:	25 17 eb d7 f9 28 1c ef ce 0b 36 23 fb cf e9 1d     %....(....6#....
    4a80:	30 00 d0 db 17 34 0d f2 dc 09 37 17 dc c7 02 35     0....4....7....5
    4a90:	27 e1 ca f3 3b 4b ec c4 e9 2b 36 f7 c5 dc 26 39     '...;K...+6...&9
    4aa0:	07 c1 e6 30 36 13 ce ce 0c 3c 1e da c8 fd 38 22     ...06....<....8"
    4ab0:	fd d3 ec 31 2a f2 c6 ea 23 32 fb cf eb 1b 30 07     ...1*...#2....0.
    4ac0:	d1 da 0e 31 0e e7 dd 02 2a 13 e4 d4 fc 22 1f fd     ...1....*...."..
    4ad0:	d8 f4 1a 1d f9 e0 f2 14 28 05 e2 ee 09 17 00 ed     ........(.......
    4ae0:	eb 0c 1e 05 f2 ee 00 0f 08 f8 f1 09 09 03 fe f9     ................
    4af0:	00 02 04 fe 07 09 f9 fb fc 04 02 fa f3 fe 18 0d     ................
    4b00:	fa ef f5 0a 0e 00 e9 fb 14 17 07 e8 e8 05 1d 0c     ................
    4b10:	ed f1 03 20 11 ea da fc 22 24 f6 d6 f5 1f 29 fc     ... ...."$....).
    4b20:	cf e6 1a 31 09 d0 dc 12 32 11 d2 d3 0c 36 21 dc     ...1....2....6!.
    4b30:	cd 02 34 2a e3 c4 f4 2e 33 f1 c4 e9 28 39 fe c4     ..4*....3...(9..
    4b40:	df 21 3e 0b c6 d3 15 3e 18 ce cc 0a 3d 26 d9 c6     .!>....>....=&..
    4b50:	fc 35 30 e6 c3 ef 2d 35 f2 c5 e7 23 37 fe c7 dd     .50...-5...#7...
    4b60:	18 37 0c cf d8 0e 35 18 da d4 02 30 22 e3 d3 f8     .7....5....0"...
    4b70:	25 23 ec d4 f2 1c 26 f7 d9 ee 14 26 04 e2 ec 0b     %#....&....&....
    4b80:	20 0a e7 ec 08 1a 0b ec ee 01 14 0b fb f0 09 14      ...............
    4b90:	08 00 f7 ff 05 04 f9 fc 0e 00 fc 02 04 ff fa fa     ................
    4ba0:	fc 13 0f fd f9 fb 0d 0e 04 f1 fc 17 15 06 ea e9     ................
    4bb0:	08 1a 07 ea f5 06 19 0f e9 dd f7 1e 16 f7 e2 ef     ................
    4bc0:	20 23 fb d7 ea 19 27 0d da dc 12 30 10 d5 d5 05      #....'....0....
    4bd0:	38 1d d6 cc fd 31 20 e3 c8 f8 3f 2f f0 c5 e4 2b     8....1 ...?/...+
    4be0:	3b f7 c3 dd 25 38 07 c7 d0 13 3a 10 d1 dd 0d 3d     ;...%8....:....=
    4bf0:	22 db c7 fd 39 2a e7 bf f0 30 3b 00 c0 e3 24 33     "...9*...0;...$3
    4c00:	fb c8 dc 1c 39 0a d4 d2 1c 3b 0d d9 ce 03 2f 1f     ....9....;..../.
    4c10:	e5 d0 f8 27 20 ee e6 f9 21 27 fa dc ec 17 1e 00     ...' ...!'......
    4c20:	df ec 10 26 1b e9 e7 04 18 0c f0 ec 02 17 0d f7     ...&............
    4c30:	ea 05 1a 05 fb f3 fe 05 06 fc f9 fb 02 01 fc 0b     ................
    4c40:	0b fd 04 fb 01 15 0d f2 dd fc 00 1e 10 fd fe ec     ................
    4c50:	fb 09 20 0d fd e5 e3 fc 0f 22 10 fb e6 e6 ff 12     .. ......"......
    4c60:	33 16 ef e3 e8 fe 16 1f 11 f0 e2 e6 04 1d 20 10     3............. .
    4c70:	ec e2 f9 14 1b 1e 0b e3 e0 e1 0e 1f 1b 06 e2 e6     ................
    4c80:	e2 11 1a 1a 12 e8 e0 e5 18 19 1f fc df e5 ea 21     ...............!
    4c90:	1a 20 f2 e1 e5 e9 32 27 1f f0 e0 e0 f2 21 17 1f     . ....2'.....!..
    4ca0:	e9 e4 df fc 21 1b 1c e7 f1 f5 ff 23 19 12 e5 e7     ....!......#....
    4cb0:	e1 07 1b 1b 0a e4 e1 e4 08 1c 1a 06 e5 e1 ef 29     ...............)
    4cc0:	23 18 01 e9 df ef 0d 21 17 ff e5 e0 f4 0b 1d 11     #......!........
    4cd0:	fa e6 e0 fb 08 36 19 fc e7 e5 fe 0b 21 05 fe e3     .....6......!...
    4ce0:	eb fe 0a 1e fe fd dd f0 fc 0e 18 0a 15 de f9 fb     ................
    4cf0:	10 18 fc fd e1 ff fc 11 0f fa fc e1 00 fa 13 0b     ................
    4d00:	fc 02 02 09 fb 16 05 fe f8 ee 04 f9 12 02 03 f8     ................
    4d10:	f2 02 fc 0d fd ff f6 f5 01 fc 1c 14 01 f9 fa 00     ................
    4d20:	01 05 fb 00 fd 01 00 00 ff ff fe 00 fd fe fb fb     ................
    4d30:	01 00 08 01 05 15 04 fe 00 0d fd 01 f3 f8 00 00     ................
    4d40:	10 fc 05 f1 fc 01 03 11 f8 03 e8 fb fb 09 11 09     ................
    4d50:	1d e6 fd fb 0f 11 fc 00 e3 02 fd 17 0f fc f9 e1     ................
    4d60:	02 fd 1c 0d ff f3 e0 00 00 1f 22 12 eb e4 fe 04     ..........".....
    4d70:	1f 09 ff e9 e5 fd 08 22 0a ff e3 e7 fb 0f 1f 0c     ......."........
    4d80:	f7 f0 ff ff 17 1f 0c f3 e0 e7 00 1a 1e 09 eb df     ................
    4d90:	e6 04 1a 1c 0a e9 e3 ed 27 23 1e 08 e3 e3 e4 11     ........'#......
    4da0:	1e 1f 00 df e6 e9 1a 1c 22 fd e1 e3 eb 1c 2f 2c     ........"...../,
    4db0:	f1 e0 df ed 1f 1a 20 ec e2 e2 f3 1f 16 1d e7 e2     ...... .........
    4dc0:	dd f9 20 15 28 f8 e0 de ff 21 1b 19 e1 e5 df 0b     .. .(....!......
    4dd0:	1b 1d 0f e5 e5 e6 0d 21 1b 16 f6 e3 e8 10 1d 1c     .......!........
    4de0:	00 e3 e3 ee 0e 1e 1a fe e1 e2 ef 1c 31 14 fc e4     ............1...
    4df0:	e3 f8 0f 1f 0f f9 e1 e4 fd 11 1d 0d f9 eb fb fc     ................
    4e00:	10 20 06 fd e1 f0 00 12 1e 01 fd df f3 fe 10 25     . .............%
    4e10:	10 fa e1 fb fc 13 12 fc fb e0 ff fc 17 0f fe fc     ................
    4e20:	e1 0d 0f 15 07 00 f8 e6 04 fd 17 01 ff f4 ec 03     ................
    4e30:	f9 15 f9 0b 07 f4 01 00 0f ff f6 e8 ff 0e 0f f9     ................
    4e40:	ed f9 0a 16 0a e9 f8 05 0d fd f5 f7 07 0b 03 f6     ................
    4e50:	f5 11 12 fe fc f7 02 03 05 fd 00 ff 02 fe 00 10     ................
    4e60:	02 fb fe fe 04 ff fd f9 01 03 06 f8 fd 0d 08 0b     ................
    4e70:	ff f4 fa 08 0d fd f1 f2 0a 0d 0f fa ed 07 13 09     ................
    4e80:	ef eb 01 17 10 f3 e9 fb 27 18 f2 e5 f6 17 19 fe     ........'.......
    4e90:	e4 f0 10 1c 00 e5 fc 0f 21 0b e6 e4 05 20 0d ea     ........!.... ..
    4ea0:	de 0a 26 12 ef d9 f7 1b 1d f4 e0 fe 19 21 fd dc     ..&..........!..
    4eb0:	e9 11 22 02 ec eb 0a 23 0a e6 e0 07 21 18 f5 db     .."....#....!...
    4ec0:	fd 1d 16 ef dc f6 1a 28 fc de f1 12 1f fe e3 e7     .......(........
    4ed0:	14 26 02 e7 e6 07 19 09 ea e7 0e 19 0d f3 e9 fe     .&..............
    4ee0:	11 11 f6 f3 ff 0b 12 fb ef f6 0c 0e 02 fd f5 05     ................
    4ef0:	0c 01 f5 f4 03 07 0f 00 f4 01 05 05 fc fd fd 07     ................
    4f00:	0e fe ff 00 00 06 03 01 03 fd 02 01 01 06 fb fc     ................
    4f10:	01 05 09 fb f8 fe 04 0b fd f4 fb 04 0f 02 f2 f8     ................
    4f20:	04 13 08 f0 f3 02 13 0c f2 f0 ff 14 14 f6 ec f9     ................
    4f30:	12 19 fa e8 f4 0e 1d 01 e9 ef 09 20 08 e7 ea 05     ........... ....
    4f40:	21 10 eb e8 ff 20 17 ef e4 f8 1c 1c f4 e3 f4 18     !.... ..........
    4f50:	21 fa e3 ee 10 23 03 e4 ea 0b 25 0b e7 e6 03 23     !....#....%....#
    4f60:	11 eb e3 fc 1f 18 f1 de f3 26 21 f6 e0 ee 16 1c     .........&!.....
    4f70:	00 de f0 1a 1c 06 e5 e7 07 1b 0a e9 f2 05 18 11     ................
    4f80:	f0 e7 fa 17 0f ff f3 f6 12 11 fd ea f5 09 11 0c     ................
    4f90:	f1 f3 07 0e 03 f1 f5 01 16 0c f4 f6 fe 09 04 fc     ................
    4fa0:	f7 01 12 04 fe fb fd 01 00 00 fc 09 04 fb 02 01     ................
    4fb0:	03 fb fb fa 08 11 fc f8 fb 06 0a ff f4 f4 11 12     ................
    4fc0:	02 f5 f2 04 0e 08 f1 f4 0c 10 0e f4 eb fb 13 10     ................
    4fd0:	f7 e6 f6 12 16 0d e9 ee 10 19 02 e4 eb 0a 1f 08     ................
    4fe0:	e9 e3 0b 30 0f eb e0 fe 1e 15 f0 dd f8 1a 1d f3     ...0............
    4ff0:	e7 fe 14 21 fb dd e8 12 22 05 e0 e4 0e 22 1d ec     ...!...."...."..
    5000:	db 05 22 15 e8 dd fb 21 18 f2 db f7 2d 1f f7 de     .."....!....-...
    5010:	ee 16 1d ff de ea 0d 21 04 eb f5 07 1f 0b e9 e3     .......!........
    5020:	00 1a 0e f0 e3 fc 13 1e 02 e2 f9 10 15 fb eb f3     ................
    5030:	0c 14 fe f4 fa 19 07 fa 03 fd 07 fe 02 fb fc 00     ................
    5040:	00 07 00 ff fa f6 11 0e 09 fe 01 f5 fb ff 02 0b     ................
    5050:	fc 01 f1 fb ff 03 0e f9 11 fd fa ff 08 0c fd ff     ................
    5060:	ec ff fe 0d 0a fd fc eb 01 fb 1f 19 fc fa eb 00     ................
    5070:	ff 13 07 00 f4 ed fe 03 14 06 00 ef fd 0e 02 16     ................
    5080:	04 fe ec f0 fc 0b 11 08 f9 ee ef ff 0b 13 06 0e     ................
    5090:	fa ee 01 0f 12 08 f3 ed ef 03 10 11 06 f0 ed ef     ................
    50a0:	06 12 10 06 ea fd 05 09 11 11 03 ec f0 ef 0f 0f     ................
    50b0:	13 fe ec ee f1 10 0e 13 fa ec ed f8 2c 11 13 f7     ............,...
    50c0:	ed ec f7 13 0f 12 f3 ee ed fc 14 0e 11 ef ef ea     ................
    50d0:	00 11 27 19 ec f0 ec 04 11 11 08 ef ef ee 06 11     ..'.............
    50e0:	12 05 f0 ee f1 06 12 0e 11 05 eb f6 06 12 0e 00     ................
    50f0:	f0 ee f7 08 11 0c fd f0 ed fc 07 14 08 fe ee ef     ................
    5100:	fd 15 1e 04 fe ee f2 ff 08 14 02 ff ed f5 ff 08     ................
    5110:	11 ff ff ec fa ff 0a 0f fd ff eb 01 0e 10 0b fe     ................
    5120:	fe ed 00 fd 0c 07 fd fd ef 02 fd 0d 04 fe fc f2     ................
    5130:	03 fd 0d 01 01 fa 00 0f fd 0a fe 01 f9 f9 01 ff     ................
    5140:	08 fe 00 fa fc 01 ff 05 fd 00 fb fe ff 00 01 ff     ................
    5150:	01 0e 07 ff 00 ff 00 ff 01 ff 00 fe fd 00 fe 05     ................
    5160:	fe 01 fb fc 00 00 06 02 10 f8 fc ff 01 09 fd 02     ................
    5170:	f5 fd fe 03 0b fc 02 f0 fe fd 07 09 fd 00 fd 05     ................
    5180:	fb 0b 08 fe fd ed 01 fd 0f 07 ff fa ee 00 fe 11     ................
    5190:	06 ff f7 ed 0b 0b 11 06 ff f3 ef ff 03 14 04 ff     ................
    51a0:	ef f1 fe 08 14 05 fc ed f2 fd 10 21 05 fa eb f2     ...........!....
    51b0:	ff 0e 11 06 f5 ed f1 03 10 11 04 f3 ed f2 04 1e     ................
    51c0:	15 03 ef ed f0 09 10 11 01 ed ee f1 0c 10 12 00     ................
    51d0:	eb fb f7 0f 10 13 fb ec ee f4 12 0e 13 f7 ed ed     ................
    51e0:	f7 14 0d 1f f8 ed ed fb 14 0e 11 f0 f0 eb 00 13     ................
    51f0:	0f 0e ed f0 ea 10 18 0f 0b ed f0 ec 07 11 11 06     ................
    5200:	ed ef ee 09 10 12 01 fa f5 f1 0c 10 11 ff ef ed     ................
    5210:	f6 0a 11 0e fd ef ed fa 09 1d 12 f5 ee ef 0b 13     ................
    5220:	05 ed ef 04 16 07 f2 ea 09 18 0a f5 eb fc 10 0e     ................
    5230:	f9 ec f9 0d 10 fc f8 f9 09 10 00 f0 f3 07 0f 05     ................
    5240:	f3 f3 01 10 11 f6 f3 00 0b 08 f9 f4 fc 09 07 fd     ................
    5250:	f3 01 0f 06 00 f7 fb 03 06 00 fa fb 01 05 ff 05     ................
    5260:	01 fe 03 00 ff fd 00 00 00 ff 00 ff fe 09 02 01     ................
    5270:	01 fc fc ff 04 02 fd f9 ff 04 08 08 f7 fd 05 08     ................
    5280:	fe f6 f9 06 09 04 fc f5 05 0b 04 f5 f4 02 0d 0e     ................
    5290:	f8 f0 ff 0d 0b f7 f0 f9 12 13 fa ef f6 0c 10 ff     ................
    52a0:	ed f4 11 13 03 ef f0 06 13 08 ef f3 06 12 0d f2     ................
    52b0:	eb fc 13 0e f9 f1 f8 10 12 fb ea f4 0e 13 07 ee     ................
    52c0:	ef 0a 14 05 ed ee 03 17 0f f0 ed 00 13 0c f5 ec     ................
    52d0:	fc 18 11 f8 ec f7 0e 0f fe eb f9 10 0f 02 ef f4     ................
    52e0:	06 10 03 f4 f6 02 0f 06 f6 f6 fe 0c 08 f9 f7 fd     ................
    52f0:	09 09 fc f8 fb 06 09 fe fa fc 03 08 ff fc fd 01     ................
    5300:	07 00 fe fe ff 04 01 ff 00 fe 02 00 ff 02 ff 00     ................
    5310:	ff ff 04 00 fe fe ff 06 03 fd fb fd 07 05 fc f9     ................
    5320:	fb 07 09 fd f8 f9 06 0c 00 f7 f7 04 0e 03 f7 f5     ................
    5330:	02 11 06 f7 f2 ff 11 0a f8 f0 fa 10 0e fb ef f7     ................
    5340:	0f 12 fd ef f2 0c 15 02 ef f1 05 14 06 f6 f3 00     ................
    5350:	14 0a f4 ea fd 11 10 ff eb f8 10 11 fc e9 f5 0b     ................
    5360:	1a 04 ea f1 09 16 04 ee ec 06 1c 08 f0 eb 00 14     ................
    5370:	0c f5 ea 03 14 0e f9 ea f8 0d 12 fb f0 fb 0a 12     ................
    5380:	01 ef f2 06 11 04 f9 f3 02 11 07 f6 f0 00 0c 0d     ................
    5390:	ff f0 fd 0a 0a fc f4 fa 08 11 ff f4 f9 04 09 00     ................
    53a0:	f9 f7 08 0c 01 fb fa 01 05 02 fd fa 09 07 00 ff     ................
    53b0:	fc ff 00 01 fe ff fe ff fd 01 0b 01 fd fd fe 03     ................
    53c0:	02 ff fa fe 02 06 fd fe 04 03 08 00 f8 f9 03 0a     ................
    53d0:	03 f8 f5 02 09 0e fe f1 00 0b 09 f9 f1 fb 0c 0c     ................
    53e0:	fc ef f7 14 12 fe f0 f3 08 10 03 ef f1 04 13 06     ................
    53f0:	f4 f8 01 13 0b f3 ec fd 12 0e f8 e9 f9 0e 18 04     ................
    5400:	e8 f5 0c 14 00 ec f0 09 15 05 ee ec 0e 1b 08 f2     ................
    5410:	ef fd 0b 0b fd fe f2 fe fd 09 04 08 06 f2 00 fe     ................
    5420:	09 04 ff fc f5 01 fe 0a 02 00 fa f8 ff 07 13 fe     ................
    5430:	01 fa f9 00 ff 08 ff 01 fa fc 00 00 06 ff ff 02     ................
    5440:	08 fe 01 04 fe 00 fb fe ff 00 02 fe 00 fc ff 00     ................
    5450:	ff 09 0a fe fe ff 00 00 00 ff 00 ff ff ff ff ff     ................
    5460:	ff 00 00 05 0b fb 00 fe 01 02 ff ff fb fe ff 01     ................
    5470:	04 fe 01 f9 01 fe 12 09 fd 00 f8 00 fe 05 03 ff     ................
    5480:	fe f7 01 fd 08 01 00 fc f8 00 ff 08 0c 0c f9 f8     ................
    5490:	00 00 0a 00 00 f8 f8 00 01 0b 00 00 f6 f9 00 03     ................
    54a0:	0b ff 03 03 fa ff 05 0a 00 fe f4 fa ff 08 09 01     ................
    54b0:	fb f4 fa 01 08 09 00 f9 f4 09 07 09 09 00 f8 f5     ................
    54c0:	f9 04 09 08 ff f6 f5 f9 06 0a 09 fe f5 f6 f9 14     ................
    54d0:	14 08 fd f4 f6 fa 0a 08 0a f9 f6 f4 fd 0a 09 09     ................
    54e0:	f7 f6 f4 fe 0b 08 09 f4 01 01 01 0b 09 07 f4 f7     ................
    54f0:	f3 04 0a 0a 05 f4 f7 f4 05 09 0a 02 f4 f6 f5 07     ................
    5500:	09 0a 02 04 fd f6 08 08 0a fe f5 f5 fa 08 09 09     ................
    5510:	fc f5 f5 fc 08 09 07 fb f5 f5 fd 08 09 0d 0b f6     ................
    5520:	f6 ff 08 0a 04 fb f5 f8 00 07 0a 01 fc f4 fa 00     ................
    5530:	08 08 00 fb f4 fc 00 08 15 0a fa f4 fe 00 09 05     ................
    5540:	ff fb f4 00 ff 0a 03 00 fa f6 00 ff 0a 01 00 08     ................
    5550:	fd 00 00 09 00 01 f9 fa 01 00 08 fe 01 f9 fc 00     ................
    5560:	00 07 fd 01 f7 09 0a 00 05 fd 01 f9 ff fe 02 02     ................
    5570:	fe 00 fb ff ff 01 01 ff ff fd ff 05 0f 00 00 fe     ................
    5580:	ff ff 00 ff 00 ff 00 00 00 00 fe ff 00 00 02 fe     ................
    5590:	00 fc 0f 02 01 02 ff 00 fa 00 fe 04 02 fe ff f8     ................
    55a0:	01 fd 07 00 00 fb ff 0c fd 09 00 00 fb f8 01 fe     ................
    55b0:	09 ff 01 f8 f9 00 01 09 06 0c f5 fb ff 03 0a ff     ................
    55c0:	00 f5 fb ff 04 09 00 fe f5 fa 05 13 08 01 fc f4     ................
    55d0:	fb 00 08 08 00 fa f4 fb 01 09 09 ff fe 00 fa 03     ................
    55e0:	09 08 ff f7 f4 fb 05 0a 08 fe f6 f5 fc 06 0e 15     ................
    55f0:	fb f6 f5 fc 08 09 08 fa f5 f5 fd 0a 08 08 f8 f5     ................
    5600:	f9 0c 09 0a 02 f7 f6 01 09 05 f8 f5 ff 0a 07 fb     ................
    5610:	fe fe 08 09 fc f4 f9 08 0a 00 f3 f9 04 10 0b f4     ................
    5620:	f6 03 0c 04 f6 f4 00 0c 06 f9 f1 06 11 06 fb f2     ................
    5630:	fc 09 0a fd f3 f9 07 0b ff fe fb 03 0c 01 f7 f6     ................
    5640:	03 0a 05 f7 f6 ff 0b 10 fb f5 fe 07 07 fc f7 fb     ................
    5650:	07 06 00 f6 00 0d 05 01 f8 fb 02 06 01 fa fa 00     ................
    5660:	06 00 04 01 fd 05 01 fe fa ff 01 03 fd 03 02 ff     ................
    5670:	02 fe fe fe 01 ff 02 06 fe 00 ff ff 00 00 00 fd     ................
    5680:	06 03 00 01 fc fe 00 04 ff 00 02 ff 04 01 fc fb     ................
    5690:	00 05 03 04 fa fd 05 04 fe f7 fd 03 0b 04 f6 fb     ................
    56a0:	03 08 00 f8 f8 03 10 03 f7 f7 01 0a 04 fa f4 05     ................
    56b0:	0e 06 fc f3 fd 08 0a fc f6 02 07 0a ff f4 f8 05     ................
    56c0:	0c 01 fc f9 02 0d 03 f7 f3 01 0a 09 fb f2 ff 0a     ................
    56d0:	0a fe f2 fc 08 0b 01 f3 f9 07 0b 04 f4 f7 05 0b     ................
    56e0:	07 f7 f5 03 0a 08 f9 f4 01 09 09 fd f4 fe 07 09     ................
    56f0:	ff f5 fd 05 09 02 f6 fb 04 08 04 f8 fa 02 07 06     ................
    5700:	fa f9 01 05 07 fd f9 00 03 07 ff fa ff 02 06 01     ................
    5710:	fb ff 01 04 03 fc ff 00 02 04 fe ff ff 01 04 ff     ................
    5720:	ff ff fe 03 00 00 00 fd 02 02 01 01 fc 00           ..............

0000572e <CrashWave>:
    572e:	f5 13 41 c7 7f b9 3b d8 39 85 2c ba ec fd 21 ba     ..A...;.9.,...!.
    573e:	5a 2b dd 1c 7f df 14 e2 35 d7 80 9b 80 94 b7 7a     Z+......5......z
    574e:	0a d9 6a 9f 9a e6 7c 34 92 81 81 83 8a 8e 80 89     ..j...|4........
    575e:	84 88 b5 e2 d4 85 81 83 92 a5 91 82 b1 bf a9 8b     ................
    576e:	81 82 82 81 b4 6c 34 8d a0 11 5c 87 02 7d 23 db     .....l4...\..}#.
    577e:	db d8 00 38 7f b6 1e 20 84 73 2d 93 a0 22 36 c8     ...8... .s-.."6.
    578e:	9a 71 e2 a5 7a f6 a8 7d 2f d2 ee 60 7b 1a 81 fd     .q..z..}/..`{...
    579e:	79 a0 34 5d a4 87 9b 09 61 7f 6b 3e c8 88 8e cc     y.4]....a.k>....
    57ae:	08 5b 6e da 85 88 84 8a cf 37 7e 6e 50 3e 40 68     .[n......7~nP>@h
    57be:	68 22 07 b1 85 80 df 27 56 7f 18 9a ad eb 1e 5d     h".....'V......]
    57ce:	7f 5d 44 70 7b 14 94 ee 7f 05 9e 6e 9b bf 23 45     .]Dp{......n..#E
    57de:	44 11 85 de 5c b1 48 94 19 7f 5c 47 71 58 9a 53     D...\.H...\GqX.S
    57ee:	b7 4a d2 84 f0 f6 cf 81 62 d2 28 d6 fa 7f fa 19     .J......b.(.....
    57fe:	1c 7f e1 e2 30 bc 72 bd 82 a7 b5 9e 80 1f 48 a2     ....0.r.......H.
    580e:	78 ba 97 43 7b ef 90 80 88 c6 59 72 17 cb 81 24     x..C{.....Yr...$
    581e:	75 c4 80 a9 f9 5f 79 4b 08 b3 a3 9f 9f 93 83 82     u...._yK........
    582e:	88 81 85 8b 85 80 83 83 82 91 a0 9b 90 94 a3 cd     ................
    583e:	26 55 73 7f 7d 5b ed 8a c1 1f 66 7f 42 a5 b2 4e     &Us.}[....f.B..N
    584e:	7e 6a 0f a5 80 b6 fb 11 fc d0 a2 8b 80 98 0d 7f     ~j..............
    585e:	27 92 a0 13 75 56 a9 95 10 69 7f 7f 65 33 06 ed     '...uV...i..e3..
    586e:	00 3f 79 7f 77 54 19 bb 80 aa 0c 5d 7f 79 67 07     .?y.wT.....].yg.
    587e:	9b 80 94 97 92 bd f7 4d 69 4f 48 4a 4a 5f 4d 4a     .......MiOHJJ_MJ
    588e:	41 17 e5 a8 80 84 80 95 d7 6a 7b 62 39 08 a4 86     A........j{b9...
    589e:	cb 21 50 66 6c 78 74 7f 52 02 fe c9 30 6b 5c be     .!Pflxt.R...0k\.
    58ae:	84 d5 53 7b 73 3f 10 ea dd dd ee 0e 41 6c 7f 64     ..S{s?......Al.d
    58be:	18 b5 80 a9 f8 4e 7f 44 cf 85 9a 0b 77 69 08 bc     .....N.D....wi..
    58ce:	87 89 b4 e9 0d 21 31 29 13 ea c7 91 83 c1 33 72     .....!1)......3r
    58de:	78 2b b9 86 a2 e3 4f 7b 59 ee bd 8b 86 c2 11 4d     x+....O{Y......M
    58ee:	67 7f 6f 3d 03 e0 ae 91 84 83 81 83 8c 9f c3 f6     g.o=............
    58fe:	08 54 76 7e 3d 34 e9 9b 80 ac c3 e6 40 67 7f 6a     .Tv~=4......@g.j
    590e:	78 4d 04 ab 83 82 89 cc 12 61 7c 7a 77 3e 08 c2     xM.......a|zw>..
    591e:	ca aa 8d 81 80 80 81 80 80 80 80 80 80 80 83 86     ................
    592e:	8a 8e 96 9a 9e a0 ac a9 a7 9c 94 99 91 81 80 86     ................
    593e:	93 8e ac bc df f0 cf d5 f2 f8 13 f3 dc ee f4 0f     ................
    594e:	13 e0 fb 11 30 53 3a 4c 66 7a 7f 7b 7b 7f 7f 7e     ....0S:Lfz.{{..~
    595e:	7c 79 7a 7c 7c 7f 6e 5c 69 67 6a 66 47 5a 69 6f     |yz||.n\igjfGZio
    596e:	7e 6e 6d 7a 78 7f 74 60 62 5c 59 58 1c 0c 08 fd     ~nmzx.t`b\YX....
    597e:	fa d1 b4 bc b4 c1 bc a9 b2 bb cb d6 bf b5 bc b2     ................
    598e:	b0 a0 8f 8a 86 82 80 80 80 80 80 80 80 80 80 80     ................
    599e:	81 87 97 a6 b1 ba c2 d9 f6 f3 fc f6 09 30 2c 37     .............0,7
    59ae:	39 42 6c 78 7c 7c 7e 5f 23 07 dc b9 9b 80 85 90     9Blx||~_#.......
    59be:	a9 b4 fd 2c 3f 56 67 74 7a 6b 5b 43 1a c8 9e 89     ...,?Vgtzk[C....
    59ce:	80 84 b4 fd 26 51 6b 7c 76 65 53 3d 2a fd d4 c6     ....&Qk|veS=*...
    59de:	af a1 8e 80 80 80 80 8c a3 bc d2 eb fa 0c 13 16     ................
    59ee:	08 00 f6 e7 d8 c8 b6 a7 95 88 81 80 80 80 83 8a     ................
    59fe:	91 9c a8 c2 e2 01 23 44 65 79 77 66 45 18 e3 b4     ......#DeywfE...
    5a0e:	90 80 80 88 9b b9 dc f7 10 30 4c 66 75 7a 71 59     .........0LfuzqY
    5a1e:	36 0b d5 ad 92 81 80 85 96 a9 c0 dd f2 06 0f 19     6...............
    5a2e:	2c 3a 4a 58 60 6c 75 7a 78 76 6e 63 57 46 3c 37     ,:JX`luzxvncWF<7
    5a3e:	2b 25 21 22 2a 2f 33 39 3e 42 44 44 42 40 3b 36     +%!"*/39>BDDB@;6
    5a4e:	32 2d 29 27 22 20 23 27 2f 36 3c 4a 55 61 6c 6f     2-)'" #'/6<JUalo
    5a5e:	72 75 77 79 77 77 77 78 78 78 76 76 77 78 79 78     ruwywwwxxxvvwxyx
    5a6e:	78 79 77 73 6f 70 69 62 59 56 61 62 5e 62 5f 68     xywsopibYVab^b_h
    5a7e:	6e 6f 70 6f 6f 75 74 71 70 68 6b 6b 63 5f 58 5c     nopooutqphkkc_X\
    5a8e:	65 63 65 68 6a 73 77 77 78 79 79 78 78 78 78 79     ecehjswwxyyxxxxy
    5a9e:	77 79 79 7a 79 79 79 7a 79 79 78 77 75 74 71 70     wyyzyyyzyyxwutqp
    5aae:	6d 6c 6a 6b 6b 6f 72 75 77 79 79 78 74 73 6f 70     mljkkoruwyyxtsop
    5abe:	67 61 5f 5c 5b 54 42 3c 34 2b 19 f2 d3 c7 ae 9e     ga_\[TB<4+......
    5ace:	87 80 80 88 91 a7 d9 f7 0d 27 32 5d 73 78 79 75     .........'2]sxyu
    5ade:	5e 2d 07 df bd 9c 80 82 95 b4 df 15 56 68 78 78     ^-..........Vhxx
    5aee:	73 49 28 0d ed d3 a5 84 80 80 84 9b d2 f2 18 35     sI(............5
    5afe:	52 6b 79 79 7a 75 71 67 65 60 60 5d 5c 5d 5f 60     Rkyyzuqge``]\]_`
    5b0e:	62 66 6a 6d 6f 72 76 7b 7a 77 6e 62 40 19 f5 ca     bfjmorv{zwnb@...
    5b1e:	a8 89 80 85 9f c3 f2 39 5f 73 7b 72 4f 1e f3 c1     .......9_s{rO...
    5b2e:	9b 80 81 9c c4 fb 31 65 7c 75 5c 36 03 cb a9 8f     ......1e|u\6....
    5b3e:	82 80 80 87 95 a3 b3 c6 dc eb fd 0a 19 24 2c 32     .............$,2
    5b4e:	35 35 31 2a 21 11 ff e6 c9 b0 99 87 80 81 91 a9     551*!...........
    5b5e:	cc f1 1e 46 63 76 7b 70 51 27 f5 c3 99 81 82 a1     ...Fcv{pQ'......
    5b6e:	d7 0c 42 6b 7b 71 50 20 f3 c4 9e 86 80 86 99 b8     ..Bk{qP ........
    5b7e:	de 07 2f 4e 68 77 7c 76 69 57 3d 26 0e f9 eb dd     ../Nhw|viW=&....
    5b8e:	d2 cb c7 c5 c5 c6 c9 cd d2 d7 df e5 ee f7 fe 0a     ................
    5b9e:	19 27 38 46 55 66 74 7c 7c 76 65 4c 27 02 e6 c7     .'8FUft||veL'...
    5bae:	a4 8f 82 80 84 93 a7 cc f8 0a 2d 50 6c 7b 7d 76     ..........-Pl{}v
    5bbe:	5f 3c 0f e5 d0 ac 90 82 82 85 91 ad c3 e2 f8 08     _<..............
    5bce:	28 43 5d 6c 75 7c 7d 76 66 59 4b 2e 16 fd e8 e0     (C]lu|}vfYK.....
    5bde:	cd bc b1 a6 a4 9f 97 90 8b 89 87 83 82 81 82 82     ................
    5bee:	84 87 89 8c 8e 8f 90 91 91 8f 8e 8c 8a 89 87 86     ................
    5bfe:	85 84 84 83 83 83 82 82 82 82 82 82 82 83 84 87     ................
    5c0e:	8b 92 9a a3 af bb c6 d3 df ee f9 04 0e 1a 24 30     ..............$0
    5c1e:	39 45 50 5a 61 6d 74 7c 7d 7f 7b 79 6d 6b 3b 2b     9EPZamt|}.{ymk;+
    5c2e:	2f 0a eb 23 3e fb c4 d4 16 3a 3e 2a 11 fb f0 ee     /..#>....:>*....
    5c3e:	f3 00 18 2f 40 3b 1d ec c4 c8 f3 18 3d 35 fd cb     .../@;......=5..
    5c4e:	c3 ee 2d 3f 17 e6 cb c0 d2 eb 03 0d 18 17 10 fc     ..-?............
    5c5e:	e8 d3 c0 d0 05 34 41 27 f1 c6 cd ed 13 3d 37 0c     .....4A'.....=7.
    5c6e:	db d0 be d6 f8 24 33 3e 3e 2a 0b f2 e0 cd c4 c2     .....$3>>*......
    5c7e:	c1 c2 c4 cd d8 f7 06 1a 39 40 2e 0e 07 d6 c5 c7     ........9@......
    5c8e:	eb f2 11 2f 41 3a 34 34 10 e7 c4 c4 c2 d8 fd 22     .../A:44......."
    5c9e:	40 3e 40 2a 14 f2 dd e0 ce c4 c0 c0 c2 c2 c0 c0     @>@*............
    5cae:	c0 c0 c0 c0 c0 c1 c3 c4 c7 c9 cb cb ce d1 d0 cd     ................
    5cbe:	c8 c6 c7 c1 c0 c1 ce cf d3 e2 ec ff fd ee fa 02     ................
    5cce:	09 10 fb f7 00 04 15 09 f9 0d 14 2a 2e 29 31 3d     ...........*.)1=
    5cde:	40 3f 3d 41 3f 3f 3d 3d 3e 3f 3f 40 40 36 33 39     @?=A??==>??@@639
    5cee:	34 3b 33 2b 36 38 3e 3f 38 3d 3e 3f 40 3a 33 34     4;3+68>?8=>?@:34
    5cfe:	2f 33 26 0d 0a 06 02 fd e7 e0 e2 e1 e8 e2 dc e1     /3&.............
    5d0e:	e8 f0 ef e2 e2 e1 dd da d0 c9 c7 c4 c2 c0 bf be     ................
    5d1e:	be be be be be bf c1 c5 cb d6 db e1 e5 ea fb 02     ................
    5d2e:	01 05 01 13 1d 1d 22 22 2e 3c 3e 3f 3d 3a 1c 03     ......"".<>?=:..
    5d3e:	f3 de d2 c2 c1 c7 d2 da e9 0d 1e 27 31 38 3d 39     ...........'18=9
    5d4e:	30 27 16 fd d6 c9 bf c0 c9 eb 0a 1d 31 3a 3e 36     0'..........1:>6
    5d5e:	2f 24 1b 0f f6 e8 e0 d5 cf c4 be bd be c1 c9 d5     /$..............
    5d6e:	e1 ec f5 fc 02 04 03 00 fc f6 ed e5 dd d4 cd c4     ................
    5d7e:	c0 be bd bd c0 c4 c8 cd d3 dc ee ff 0f 20 30 3c     ............. 0<
    5d8e:	3d 35 26 10 f6 dc c9 bf bd c2 cc da ec fa 07 16     =5&.............
    5d9e:	25 32 3b 3d 3a 2f 1f 09 f1 da cb c1 bc c0 c8 d2     %2;=:/..........
    5dae:	dc ea f7 00 09 0c 13 1c 22 2b 30 35 3a 3d 3d 3b     ........"+05:==;
    5dbe:	38 33 2d 25 1e 1b 17 12 11 10 13 17 19 1c 1f 21     83-%...........!
    5dce:	22 22 21 20 1e 1c 19 17 15 13 12 10 11 13 16 1b     ""! ............
    5dde:	1f 23 2a 2f 35 38 39 3b 3c 3c 3d 3c 3c 3c 3c 3d     .#*/589;<<=<<<<=
    5dee:	3c 3b 3c 3c 3d 3d 3d 3d 3c 3b 37 37 36 32 2e 2a     <;<<====<;7762.*
    5dfe:	2c 30 2f 30 30 30 35 38 37 38 37 38 3b 38 38 35     ,0/000587878;885
    5e0e:	32 34 33 2f 2d 2b 2f 32 32 33 35 37 3b 3b 3c 3c     243/-+/22357;;<<
    5e1e:	3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c 3c     <<<<<<<<<<<<<<<<
    5e2e:	3c 3b 3b 3a 39 38 37 36 35 35 35 36 38 3a 3b 3c     <;;:987655568:;<
    5e3e:	3c 3c 3b 39 38 37 37 32 2f 2e 2d 2c 26 1d 1c 16     <<;98772/.-,&...
    5e4e:	0f 05 ee e4 db cf c9 be be c1 c8 ce de f7 04 0f     ................
    5e5e:	18 23 36 3b 3d 39 35 23 05 f2 e1 d0 c3 bf ca d5     .#6;=95#........
    5e6e:	ee fe 1e 35 3a 3d 3a 2f 15 08 f8 ea db c6 be bd     ...5:=:/........
    5e7e:	c1 c9 de f8 08 19 26 31 3a 3d 3c 3b 39 35 32 31     ......&1:=<;9521
    5e8e:	2f 2f 2e 2e 2f 30 30 32 33 36 36 38 3a 3c 3d 3c     //../0023668:<=<
    5e9e:	38 33 28 12 fe ea d7 c9 bf c0 cb dc f2 0d 2c 37     83(...........,7
    5eae:	3d 3a 30 18 fe e7 d1 c3 be ca dc f6 12 2a 3c 3c     =:0..........*<<
    5ebe:	32 20 0a ee d7 ca c2 be be c2 c8 d0 d7 df ea f4     2 ..............
    5ece:	fc 04 0a 10 15 19 1a 1b 19 17 11 0b 01 f7 e8 da     ................
    5ede:	ce c5 bf bf c5 d1 e0 f3 08 1e 2e 39 3e 3b 2d 19     ...........9>;-.
    5eee:	01 e7 d0 c2 bf cb e4 00 1b 32 3d 3b 2d 17 fd e7     .........2=;-...
    5efe:	d2 c5 be c1 c9 d7 ea fe 13 24 31 3a 3e 3d 36 2e     .........$1:>=6.
    5f0e:	22 15 0a fe f6 f0 ea e6 e3 e2 e2 e2 e3 e5 e8 eb     "...............
    5f1e:	ee f2 f5 fa ff 03 0a 12 19 22 29 31 39 3e 3e 3c     .........")19>><
    5f2e:	35 2a 18 05 f2 e6 d6 c8 c2 bf c1 c5 d0 df f8 06     5*..............
    5f3e:	12 24 33 3c 3f 3c 34 21 0c f3 e4 d9 c8 c1 bf c3     .$3<?<4!........
    5f4e:	c7 d3 e0 ed ff 08 11 21 2a 34 3a 3d 3f 3d 37 2d     .......!*4:=?=7-
    5f5e:	28 1e 10 06 f8 f2 ed e3 dd d7 d3 d3 cf cb c8 c6     (...............
    5f6e:	c5 c4 c2 c1 c0 c1 c0 c1 c2 c3 c4 c5 c5 c6 c5 c5     ................
    5f7e:	c4 c4 c3 c3 c2 c1 c1 c1 c1 c1 c0 c1 c0 c1 c0 c1     ................
    5f8e:	c1 c1 c1 c2 c3 c5 c7 cb cf d4 da e1 e6 ed f3 fb     ................
    5f9e:	00 06 0b 10 15 1b 20 25 2a 2f 32 38 3a 3e 3e 40     ...... %*/28:>>@
    5fae:	3c 3d 23 16 17 04 f4 11 1f fc e2 ec 0b 1d 1e 13     <=#.............
    5fbe:	07 fd f8 f6 f9 01 0d 17 20 1c 0a f1 e1 e4 f9 13     ........ .......
    5fce:	1f 16 ff e5 e5 01 1b 1f 0c f1 e2 e2 eb f5 01 07     ................
    5fde:	0c 0a 08 fe f2 e4 e1 ea 02 1a 1d 05 ed e4 e4 00     ................
    5fee:	19 1e 19 07 eb e0 e5 f1 fb 12 1e 20 1a 14 06 f7     ........... ....
    5ffe:	eb e5 e1 e1 e0 e1 e4 ea ec fb 08 19 20 20 17 05     ............  ..
    600e:	f0 e1 e1 e4 f3 0a 1c 1f 1f 1e 14 04 ed eb e4 e0     ................
    601e:	eb 03 10 0f 21 1d 15 02 04 f8 ea e3 e0 e0 e0 e0     ....!...........
    602e:	e0 e0 e1 df e0 e0 e0 e0 e1 e1 e2 e3 e4 e5 e7 e7     ................
    603e:	e8 e7 e5 e7 e6 e3 e1 df e0 e0 e5 ea f4 fb f6 fb     ................
    604e:	00 04 0d 06 00 06 08 0e 0c 01 06 0b 0f 17 0d 11     ................
    605e:	18 1e 20 1f 20 20 1e 1c 19 1e 20 1e 1e 1d 1e 1f     .. .  .... .....
    606e:	20 20 20 1f 19 1b 1d 1f 20 1c 1e 20 20 1f 1e 1f        ..... ..  ...
    607e:	1f 20 20 1f 17 16 15 12 13 08 fd fc fa fd f8 ef     .  .............
    608e:	f0 f3 f6 f8 f5 f3 f6 f5 f8 f3 ec ea e8 e6 e4 e1     ................
    609e:	e0 df df df df df df df df df df e1 e3 e5 e7 ec     ................
    60ae:	f0 f1 f3 f3 f7 ff fe 01 01 02 0b 10 13 16 16 1c     ................
    60be:	1f 1d 18 12 07 f1 ea e3 e0 de e6 ed f3 f9 fe 09     ................
    60ce:	18 1b 1e 1e 1e 15 0a 00 f6 ef e3 e0 e6 ee f9 05     ................
    60de:	18 1d 1f 1d 1b 13 0a 06 ff fa f2 e9 e5 e2 e0 df     ................
    60ee:	e0 e2 e6 ec f1 f8 fe 01 04 05 05 03 01 fe fa f7     ................
    60fe:	f2 ec e8 e5 e2 e0 df df df e0 e1 e4 e8 ec f2 f9     ................
    610e:	04 0e 16 1c 1e 1c 14 09 fc ef e6 e0 df e1 e6 ec     ................
    611e:	f4 fd 03 0b 12 19 1d 1e 1c 17 0d 02 f7 ec e4 df     ................
    612e:	df e1 e5 eb f3 fa fe 02 06 0b 0e 11 13 16 1a 1c     ................
    613e:	1e 1e 1e 1c 19 16 13 10 0c 09 06 04 05 05 06 07     ................
    614e:	08 0a 0c 0d 0e 0e 0d 0d 0c 0b 0a 09 07 06 06 06     ................
    615e:	07 07 08 0a 0d 10 14 15 18 1b 1c 1d 1d 1d 1d 1e     ................
    616e:	1e 1e 1d 1d 1d 1d 1e 1d 1d 1e 1e 1e 1d 1d 1c 1b     ................
    617e:	18 16 17 17 16 16 14 17 19 19 19 1a 1a 1c 1c 1c     ................
    618e:	1c 1a 1b 1c 1a 19 17 16 18 17 17 17 17 1a 1c 1c     ................
    619e:	1c 1d 1d 1e 1e 1e 1e 1e 1d 1d 1e 1e 1e 1e 1e 1e     ................
    61ae:	1e 1e 1e 1e 1d 1d 1d 1c 1b 1a 1a 19 18 19 19 1a     ................
    61be:	1a 1b 1c 1d 1e 1e 1e 1e 1d 1c 1c 1c 1c 1b 18 18     ................
    61ce:	17 16 15 10 09 07 01 fe f5 e9 e6 e2 df df e1 e6     ................
    61de:	ea f0 f4 01 0b 10 15 18 1c 1d 1a 17 0f 07 f4 e7     ................
    61ee:	e2 de df e6 f7 00 09 12 18 1e 1c 19 13 0d ff f2     ................
    61fe:	ec e5 e1 de e1 e6 ee f6 00 0c 16 19 1d 1e 1e 1c     ................
    620e:	1b 1a 19 17 16 15 15 15 15 15 16 16 17 17 19 1a     ................
    621e:	1c 1d 1e 1e 1d 1a 16 0f 08 fb ed e6 e0 de e1 ec     ................
    622e:	f8 04 0f 17 1d 1d 18 10 05 f9 e8 e1 de e2 e9 fa     ................
    623e:	0a 16 1d 1f 1a 0e 03 f7 ed e5 e0 df df e1 e4 e9     ................
    624e:	ee f2 f7 fc 00 05 08 0b 0d 0f 10 10 10 0e 0c 09     ................
    625e:	04 fe f7 f0 ea e4 e0 df e1 e6 ee f7 02 0c 15 1c     ................
    626e:	1f 1e 17 0e 01 f4 e9 e1 df e4 f0 00 0d 19 1e 1d     ................
    627e:	16 0b fd f1 e7 e1 df e1 e6 ee f8 01 0b 14 1a 1e     ................
    628e:	1f 1d 19 14 0e 07 02 fc f7 f4 f1 f0 ef ee ee ee     ................
    629e:	ef f0 f1 f3 f4 f6 f8 fa fd 00 04 06 0a 0e 13 18     ................
    62ae:	1c 1e 1f 1e 1a 14 0d 05 fa f2 e8 e3 e1 df e1 e5     ................
    62be:	eb ef fa 04 0d 16 1b 1e 1f 1c 16 0d 05 f9 ef e7     ................
    62ce:	e1 e0 e0 e2 e7 ef f4 f8 01 08 0f 16 18 1c 1f 1f     ................
    62de:	1e 1c 19 13 0d 06 00 fe f7 f2 ed ea e9 e8 e5 e4     ................
    62ee:	e2 e1 e1 e1 e0 e0 e0 e0 e0 e1 e1 e3 e3 e4 e4 e5     ................
    62fe:	e6 e6 e5 e5 e5 e4 e3 e3 e2 e2 e2 e1 e1 e1 e1 e0     ................
    630e:	e0 e0 e0 e0 e0 e0 e0 e0 e0 e0 e1 e2 e4 e6 e8 eb     ................
    631e:	ee f1 f4 f8 fb fd 00 03 05 08 0b 0e 11 14 16 19     ................
    632e:	1b 1e 1f 20 1f 20 13 0b 0c 03 fa 08 0f ff f1 f5     ... . ..........
    633e:	05 0e 0f 0a 04 ff fc fb fd 00 06 0b 10 0e 07 fb     ................
    634e:	f1 f2 fc 06 0f 0d ff f3 f1 fb 0b 10 06 f9 f2 f0     ................
    635e:	f4 fa 00 03 06 05 04 ff fa f4 f0 f4 01 0d 10 09     ................
    636e:	fc f1 f3 fb 04 0f 0d 03 f6 f4 ef f5 fe 09 0c 0f     ................
    637e:	0f 0a 02 fc f8 f3 f1 f0 f0 f0 f1 f3 f6 fd 01 06     ................
    638e:	0e 10 0b 03 01 f5 f1 f2 fb fc 04 0b 10 0e 0d 0c     ................
    639e:	04 fa f1 f1 f0 f6 ff 08 0f 0f 0f 0a 04 fb f6 f7     ................
    63ae:	f3 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f0 f1 f1 f1     ................
    63be:	f2 f3 f4 f4 f5 f5 f5 f4 f3 f2 f2 f1 f0 f0 f3 f3     ................
    63ce:	f4 f7 f9 fe fe fa fd ff 01 02 fd fc fe 00 04 01     ................
    63de:	fd 02 03 09 0a 09 0b 0e 0f 10 0f 0f 0f 10 0f 0f     ................
    63ee:	0f 0f 0f 0f 0f 0d 0c 0d 0c 0e 0c 09 0c 0d 0f 0f     ................
    63fe:	0d 0e 0f 0f 0f 0d 0b 0c 0a 0b 08 02 01 00 ff fe     ................
    640e:	f8 f7 f7 f7 f8 f7 f6 f7 f8 fa fa f7 f7 f7 f6 f5     ................
    641e:	f3 f1 f1 f0 f0 f0 ef ef ef f0 f0 ef ef ef f0 f0     ................
    642e:	f2 f4 f5 f7 f8 f9 fd ff fe ff fe 03 06 06 07 07     ................
    643e:	0a 0e 0f 0f 0f 0f 07 01 fd f8 f5 f1 f0 f1 f4 f6     ................
    644e:	f9 03 07 09 0c 0d 0f 0e 0c 09 05 ff f5 f2 ef f0     ................
    645e:	f2 fb 03 08 0c 0e 0f 0c 0b 08 05 02 fc f9 f7 f4     ................
    646e:	f3 f0 ef ef f0 f1 f3 f6 f9 fc ff 00 02 02 02 01     ................
    647e:	00 ff fd fb f8 f6 f4 f2 f0 f0 ef ef ef f0 f1 f2     ................
    648e:	f4 f6 fa fe 02 07 0b 0e 0f 0d 0a 04 fe f7 f2 f0     ................
    649e:	ef f0 f3 f6 fb fe 01 05 09 0c 0e 0f 0e 0b 07 01     ................
    64ae:	fb f6 f2 f0 ef f0 f2 f5 f8 fb fe 01 03 04 06 07     ................
    64be:	08 0a 0b 0d 0e 0f 0f 0e 0d 0c 0b 09 07 06 05 04     ................
    64ce:	04 04 04 05 06 07 07 08 08 08 08 07 07 07 06 05     ................
    64de:	05 04 04 04 04 04 05 06 07 08 0a 0b 0d 0d 0e 0e     ................
    64ee:	0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0f 0e 0f     ................
    64fe:	0e 0e 0d 0d 0d 0c 0b 0a 0a 0c 0b 0b 0b 0b 0d 0d     ................
    650e:	0d 0d 0d 0d 0e 0e 0d 0d 0c 0d 0c 0b 0b 0a 0b 0c     ................
    651e:	0c 0c 0d 0d 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e 0e     ................
    652e:	0f 0f 0f 0e 0f 0f 0f 0e 0f 0e 0e 0e 0e 0d 0d 0d     ................
    653e:	0d 0d 0d 0d 0e 0e 0e 0e 0f 0e 0e 0e 0d 0d 0d 0c     ................
    654e:	0b 0b 0b 0b 09 07 06 05 03 01 fb f9 f7 f4 f2 f0     ................
    655e:	ef f0 f2 f3 f7 fd 00 03 05 08 0d 0e 0e 0d 0c 08     ................
    656e:	01 fc f8 f4 f1 f0 f3 f5 fb ff 07 0c 0d 0e 0d 0b     ................
    657e:	04 01 fe fa f7 f2 f0 f0 f1 f3 f8 fe 01 05 08 0b     ................
    658e:	0d 0d 0d 0d 0c 0c 0b 0b 0a 0a 0a 0a 0a 0a 0a 0b     ................
    659e:	0b 0c 0c 0c 0c 0d 0d 0d 0c 0b 08 03 ff fb f7 f3     ................
    65ae:	f1 f2 f4 f8 fc 02 09 0b 0d 0c 0a 05 ff fa f5 f2     ................
    65be:	f2 f4 f8 fd 03 08 0c 0c 0a 06 01 fc f7 f4 f3 f2     ................
    65ce:	f2 f3 f4 f5 f7 f9 fb fd ff 00 01 03 04 04 05 04     ................
    65de:	04 03 02 01 00 fe fb f8 f6 f4 f3 f2 f4 f6 f9 fd     ................
    65ee:	00 04 08 0a 0b 0a 07 03 00 fb f6 f4 f4 f5 fa ff     ................
    65fe:	04 08 09 09 07 03 ff fb f8 f5 f4 f5 f6 f9 fb ff     ................
    660e:	02 05 07 08 09 09 07 06 04 02 00 ff fe fd fb fb     ................
    661e:	fb fb fb fb fb fc fc fc fc fd fe fe ff 00 00 02     ................
    662e:	03 03 05 06 06 07 07 07 06 05 02 00 fd fc fa f8     ................
    663e:	f8 f7 f8 f8 f9 fb fe 00 01 03 05 06 05 03 01 00     ................

0000664e <PCMSPEEDS>:
    664e:	17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17     ................
    665e:	17 17 17 17                                         ....

00006662 <PCMPRIORITY>:
    6662:	01 02 03 04 04                                      .....

00006667 <PCMTIMES>:
    6667:	05 0f 14 14 0f 0f                                   ......

0000666d <patches>:
    666d:	00 00 00 44 1c 00 00 00 00 00 00 00 58 1c 00 00     ...D........X...
    667d:	00 00 00 00 00 72 1c 00 00 00 00 00 00 00 86 1c     .....r..........
    668d:	00 00 00 00 00 00 00 88 1c 00 00 00 00 00 00 00     ................
    669d:	a2 1c 00 00 00 00 00 00 00 b6 1c 00 00 00 00 00     ................
    66ad:	00 00 c7 1c 00 00 00 00 00 00 00 c7 1c 00 00 00     ................
    66bd:	00 00 00 00 c7 1c 00 00 00 00 00 00 00 c7 1c 00     ................
    66cd:	00 00 00 00 00 00 c7 1c 00 00 00 00 00 00 00 c7     ................
    66dd:	1c 00 00 00 00 00 00 00 c7 1c 00 00 00 00 00 00     ................
    66ed:	00 c7 1c 00 00 00 00 00 00 00 c7 1c 00 00 00 00     ................
    66fd:	00 00 00 c7 1c 00 00 00 00 00 00 00 c7 1c 00 00     ................
    670d:	00 00 00 00 00 c7 1c 00 00 00 00 00 00 00 c7 1c     ................
    671d:	00 00 00 00 01 00 00 e1 1c 00 00 00 00 01 00 00     ................
    672d:	f8 1c 00 00 00 00 01 00 00 0c 1d 00 00 00 00 01     ................
    673d:	00 00 1d 1d 00 00 00 00 01 00 00 1f 1d 00 00 00     ................
    674d:	00 01 00 00 36 1d 00 00 00 00 01 00 00 4a 1d 00     ....6........J..
    675d:	00 00 00 01 00 00 5b 1d 00 00 00 00 00 00 00 c7     ......[.........
    676d:	1c 00 00 00 00 00 00 00 c7 1c 00 00 00 00 00 00     ................
    677d:	00 c7 1c 00 00 00 00 00 00 00 c7 1c 00 00 00 00     ................
    678d:	00 00 00 c7 1c 00 00 00 00 00 00 00 c7 1c 00 00     ................
    679d:	00 00 00 00 00 c7 1c 00 00 00 00 00 00 00 c7 1c     ................
    67ad:	00 00 00 00 00 00 00 c7 1c 00 00 00 00 00 00 00     ................
    67bd:	c7 1c 00 00 00 00 00 00 00 c7 1c 00 00 00 00 00     ................
    67cd:	00 00 c7 1c 00 00 00 00 00 00 00 6c 1d 00 00 00     ...........l....
    67dd:	00 00 00 00 10 1e 00 00 00 00 00 00 00 c7 1c 00     ................
    67ed:	00 00 00 02 ae 1e 00 00 e0 0c e0 0c 02 8e 2b 00     ..............+.
    67fd:	00 22 17 22 17 02 b0 42 00 00 7e 14 7e 14 02 2e     ."."...B..~.~...
    680d:	57 00 00 20 0f 20 0f                                W.. . .

00006814 <Song0>:
    6814:	00 c0 00 00 c1 01 00 c2 02 00 c3 03 00 b0 07 7f     ................
    6824:	00 91 51 6e 00 b2 07 7f 00 92 2d 64 00 93 14 64     ..Qn......-d...d
    6834:	00 ff 06 01 53 0b 90 40 64 00 91 4c 5a 00 93 16     ....S..@d..LZ...
    6844:	5a 05 16 5a 06 91 54 6e 00 92 28 64 00 93 15 64     Z..Z..Tn..(d...d
    6854:	0b 90 40 64 00 91 4c 5a 00 93 16 50 0b 91 53 6e     ..@d..LZ...P..Sn
    6864:	00 92 2d 64 00 93 14 64 0b 90 40 64 00 91 4c 5a     ..-d...d..@d..LZ
    6874:	00 93 16 5a 06 16 5a 06 91 51 6e 00 92 30 64 00     ...Z..Z..Qn..0d.
    6884:	93 15 64 0b 90 40 64 00 91 4c 5a 00 93 16 50 0b     ..d..@d..LZ...P.
    6894:	91 50 6e 00 92 2f 64 00 93 14 64 0b 90 40 64 00     .Pn../d...d..@d.
    68a4:	91 4c 5a 00 93 16 5a 05 16 5a 06 91 53 6e 00 92     .LZ...Z..Z..Sn..
    68b4:	2c 64 00 93 15 64 0c 90 40 64 00 91 4c 5a 00 93     ,d...d..@d..LZ..
    68c4:	16 50 0b 91 51 6e 00 92 28 64 00 93 14 64 0b 90     .P..Qn..(d...d..
    68d4:	40 64 00 91 4c 5a 00 93 16 5a 05 16 5a 06 91 50     @d..LZ...Z..Z..P
    68e4:	6e 00 92 2c 64 00 93 15 64 0b 90 40 64 00 91 4c     n..,d...d..@d..L
    68f4:	5a 00 93 16 50 0c 91 4f 6e 00 92 2b 64 00 93 14     Z...P..On..+d...
    6904:	64 0b 90 3e 64 00 91 4a 5a 00 93 16 5a 05 16 5a     d..>d..JZ...Z..Z
    6914:	06 91 53 6e 00 92 2f 64 00 93 15 64 0b 90 3e 64     ..Sn../d...d..>d
    6924:	00 91 4a 5a 00 93 16 50 0b 91 51 6e 00 92 32 64     ..JZ...P..Qn..2d
    6934:	00 93 14 64 0c 90 3e 64 00 91 4a 5a 00 93 16 5a     ...d..>d..JZ...Z
    6944:	05 16 5a 06 91 4f 6e 00 92 2b 64 00 93 15 64 0b     ..Z..On..+d...d.
    6954:	90 3e 64 00 91 4a 5a 00 93 16 50 0b 91 4e 6e 00     .>d..JZ...P..Nn.
    6964:	92 2a 64 00 93 14 64 0b 90 3e 64 00 91 4a 5a 00     .*d...d..>d..JZ.
    6974:	93 16 5a 06 16 5a 06 91 4f 6e 00 92 2b 64 00 93     ..Z..Z..On..+d..
    6984:	15 64 0b 90 3e 64 00 91 4a 5a 00 93 16 50 0b 91     .d..>d..JZ...P..
    6994:	51 6e 00 92 2d 64 00 93 14 64 0b 90 3e 64 00 91     Qn..-d...d..>d..
    69a4:	4a 5a 00 93 16 5a 05 16 5a 06 91 4f 6e 00 92 2a     JZ...Z..Z..On..*
    69b4:	64 00 93 15 64 0b 90 3e 64 00 91 4a 5a 00 93 16     d...d..>d..JZ...
    69c4:	50 0c 91 51 6e 00 92 2d 64 00 93 14 64 0b 90 40     P..Qn..-d...d..@
    69d4:	64 00 91 4c 5a 00 93 16 5a 05 16 5a 06 91 54 6e     d..LZ...Z..Z..Tn
    69e4:	00 92 28 64 00 93 15 64 0b 90 40 64 00 91 4c 5a     ..(d...d..@d..LZ
    69f4:	00 93 16 50 0b 91 53 6e 00 92 2d 64 00 93 14 64     ...P..Sn..-d...d
    6a04:	0c 90 40 64 00 91 4c 5a 00 93 16 5a 05 16 5a 06     ..@d..LZ...Z..Z.
    6a14:	91 51 6e 00 92 30 64 00 93 15 64 0b 90 40 64 00     .Qn..0d...d..@d.
    6a24:	91 4c 5a 00 93 16 50 0b 91 56 6e 00 92 2f 64 00     .LZ...P..Vn../d.
    6a34:	93 14 64 0b 90 40 64 00 91 4c 5a 00 93 16 5a 06     ..d..@d..LZ...Z.
    6a44:	16 5a 06 91 53 6e 00 92 2c 64 00 93 15 64 0b 90     .Z..Sn..,d...d..
    6a54:	40 64 00 91 4c 5a 00 93 16 50 0b 91 50 6e 00 92     @d..LZ...P..Pn..
    6a64:	28 64 00 93 14 64 0b 90 40 64 00 91 4c 5a 00 93     (d...d..@d..LZ..
    6a74:	16 5a 05 16 5a 06 91 53 6e 00 92 2c 64 00 93 15     .Z..Z..Sn..,d...
    6a84:	64 0c 90 40 64 00 91 4c 5a 00 93 16 50 0b 91 4f     d..@d..LZ...P..O
    6a94:	6e 00 92 2b 64 00 93 14 64 0b 90 3e 64 00 91 4a     n..+d...d..>d..J
    6aa4:	5a 00 93 16 5a 05 16 5a 06 91 53 6e 00 92 2f 64     Z...Z..Z..Sn../d
    6ab4:	00 93 15 64 0b 90 3e 64 00 91 4a 5a 00 93 16 50     ...d..>d..JZ...P
    6ac4:	0c 91 51 6e 00 92 32 64 00 93 14 64 0b 90 3e 64     ..Qn..2d...d..>d
    6ad4:	00 91 4a 5a 00 93 16 5a 05 16 5a 06 91 54 6e 00     ..JZ...Z..Z..Tn.
    6ae4:	92 2b 64 00 93 15 64 0b 90 3e 64 00 91 4a 5a 00     .+d...d..>d..JZ.
    6af4:	93 16 50 0b 91 53 6e 00 92 2a 64 00 93 14 64 0b     ..P..Sn..*d...d.
    6b04:	90 3e 64 00 91 4a 5a 00 93 16 5a 06 16 5a 06 91     .>d..JZ...Z..Z..
    6b14:	4f 6e 00 92 2b 64 00 93 15 64 0b 90 3e 64 00 91     On..+d...d..>d..
    6b24:	4a 5a 00 93 16 50 0b 91 4e 6e 00 92 2d 64 00 93     JZ...P..Nn..-d..
    6b34:	14 64 0b 90 3e 64 00 91 4a 5a 00 93 16 5a 05 16     .d..>d..JZ...Z..
    6b44:	5a 06 91 4f 6e 00 92 2a 64 00 93 15 64 0c 90 3e     Z..On..*d...d..>
    6b54:	64 00 93 16 50 0b 90 48 64 00 91 51 6e 00 92 2d     d...P..Hd..Qn..-
    6b64:	64 00 93 14 64 0b 91 4c 5a 00 93 16 5a 05 16 5a     d...d..LZ...Z..Z
    6b74:	06 91 54 6e 00 92 28 64 00 93 15 64 0b 91 4c 5a     ..Tn..(d...d..LZ
    6b84:	00 93 16 50 0c 91 53 6e 00 92 2d 64 00 93 14 64     ...P..Sn..-d...d
    6b94:	0b 91 4c 5a 00 93 16 5a 05 16 5a 06 90 48 64 00     ..LZ...Z..Z..Hd.
    6ba4:	91 51 6e 00 92 30 64 00 93 15 64 0b 90 4a 64 00     .Qn..0d...d..Jd.
    6bb4:	91 4c 5a 00 93 16 50 0b 90 47 64 00 91 50 6e 00     .LZ...P..Gd..Pn.
    6bc4:	92 2f 64 00 93 14 64 0c 91 4c 5a 00 93 16 5a 05     ./d...d..LZ...Z.
    6bd4:	16 5a 06 91 53 6e 00 92 2c 64 00 93 15 64 0b 91     .Z..Sn..,d...d..
    6be4:	4c 5a 00 93 16 50 0b 91 51 6e 00 92 28 64 00 93     LZ...P..Qn..(d..
    6bf4:	14 64 0b 91 4c 5a 00 93 16 5a 06 16 5a 06 91 50     .d..LZ...Z..Z..P
    6c04:	6e 00 92 2c 64 00 93 15 64 0b 91 4c 5a 00 93 16     n..,d...d..LZ...
    6c14:	50 0b 90 43 64 00 91 3e 64 00 92 2b 64 00 93 14     P..Cd..>d..+d...
    6c24:	64 0b 90 3e 64 00 93 16 5a 05 16 5a 06 90 43 64     d..>d...Z..Z..Cd
    6c34:	00 91 3b 64 00 92 2f 64 00 93 15 64 0c 90 45 64     ..;d../d...d..Ed
    6c44:	00 93 16 50 0b 90 47 64 00 91 37 64 00 92 32 64     ...P..Gd..7d..2d
    6c54:	00 93 14 64 0b 90 45 64 00 93 16 5a 05 16 5a 06     ...d..Ed...Z..Z.
    6c64:	90 43 64 00 91 3b 64 00 92 2b 64 00 93 15 64 0b     .Cd..;d..+d...d.
    6c74:	90 45 64 00 93 16 50 0b 90 42 64 00 91 42 64 00     .Ed...P..Bd..Bd.
    6c84:	92 2a 64 00 93 14 64 0c 90 43 64 00 93 16 5a 05     .*d...d..Cd...Z.
    6c94:	16 5a 06 90 45 64 00 91 3e 64 00 92 2b 64 00 93     .Z..Ed..>d..+d..
    6ca4:	15 64 0b 90 42 64 00 93 16 50 0b 90 3e 64 00 91     .d..Bd...P..>d..
    6cb4:	39 64 00 92 2d 64 00 93 14 64 0b 90 40 64 00 93     9d..-d...d..@d..
    6cc4:	16 5a 06 16 5a 06 90 42 64 00 91 3e 64 00 92 2a     .Z..Z..Bd..>d..*
    6cd4:	64 00 93 15 64 0b 90 3e 64 00 93 16 50 0b 90 4c     d...d..>d...P..L
    6ce4:	64 00 91 51 6e 00 92 2d 64 00 93 14 64 0b 91 4c     d..Qn..-d...d..L
    6cf4:	5a 00 93 16 5a 05 16 5a 06 90 48 64 00 91 54 6e     Z...Z..Z..Hd..Tn
    6d04:	00 92 28 64 00 93 15 64 0c 90 4a 64 00 91 4c 5a     ..(d...d..Jd..LZ
    6d14:	00 93 16 50 0b 90 4c 64 00 91 53 6e 00 92 2d 64     ...P..Ld..Sn..-d
    6d24:	00 93 14 64 0b 91 4c 5a 00 93 16 5a 05 16 5a 06     ...d..LZ...Z..Z.
    6d34:	90 4a 64 00 91 51 6e 00 92 30 64 00 93 15 64 0b     .Jd..Qn..0d...d.
    6d44:	91 4c 5a 00 93 16 50 0c 90 4c 64 00 91 50 6e 00     .LZ...P..Ld..Pn.
    6d54:	92 2f 64 00 93 14 64 0b 91 4c 5a 00 93 16 5a 05     ./d...d..LZ...Z.
    6d64:	16 5a 06 90 4a 64 00 91 53 6e 00 92 2c 64 00 93     .Z..Jd..Sn..,d..
    6d74:	15 64 0b 91 4c 5a 00 93 16 50 0b 90 47 64 00 91     .d..LZ...P..Gd..
    6d84:	56 6e 00 92 28 64 00 93 14 64 0c 90 48 64 00 91     Vn..(d...d..Hd..
    6d94:	4c 5a 00 93 16 5a 05 16 5a 06 90 4a 64 00 91 54     LZ...Z..Z..Jd..T
    6da4:	6e 00 92 2c 64 00 93 15 64 0b 90 47 64 00 91 53     n..,d...d..Gd..S
    6db4:	5a 00 93 16 50 0b 90 47 64 00 91 4f 6e 00 92 2b     Z...P..Gd..On..+
    6dc4:	64 00 93 14 64 0b 90 48 64 00 91 4a 5a 00 93 16     d...d..Hd..JZ...
    6dd4:	5a 06 16 5a 05 90 4a 64 00 91 4f 6e 00 92 2f 64     Z..Z..Jd..On../d
    6de4:	00 93 15 64 0c 90 43 64 00 91 51 5a 00 93 16 50     ...d..Cd..QZ...P
    6df4:	0b 90 48 64 00 91 53 6e 00 92 32 64 00 93 14 64     ..Hd..Sn..2d...d
    6e04:	0b 90 4a 64 00 91 51 5a 00 93 16 5a 05 16 5a 06     ..Jd..QZ...Z..Z.
    6e14:	90 4c 64 00 91 4f 6e 00 92 2b 64 00 93 15 64 0b     .Ld..On..+d...d.
    6e24:	90 48 64 00 91 51 5a 00 93 16 50 0c 90 45 64 00     .Hd..QZ...P..Ed.
    6e34:	91 4e 6e 00 92 2a 64 00 93 14 64 0b 90 47 64 00     .Nn..*d...d..Gd.
    6e44:	91 4f 5a 00 93 16 5a 05 16 5a 06 90 48 64 00 91     .OZ...Z..Z..Hd..
    6e54:	51 6e 00 92 2b 64 00 93 15 64 0b 90 45 64 00 91     Qn..+d...d..Ed..
    6e64:	4e 64 00 93 16 50 0b 90 4a 64 00 91 4a 5a 00 92     Nd...P..Jd..JZ..
    6e74:	2d 64 00 93 15 6e 0c 90 48 64 00 91 4c 5a 00 93     -d...n..Hd..LZ..
    6e84:	16 5a 05 15 50 06 90 47 64 00 91 4e 6e 00 92 2a     .Z..P..Gd..Nn..*
    6e94:	64 00 93 15 64 0b 90 48 64 00 91 4a 6e 00 93 16     d...d..Hd..Jn...
    6ea4:	50 0b 14 64 0b 90 4c 64 00 91 40 64 06 90 4c 64     P..d..Ld..@d..Ld
    6eb4:	06 48 64 00 91 3c 64 00 92 2d 64 00 93 15 64 05     .Hd..<d..-d...d.
    6ec4:	90 48 64 06 45 64 00 91 39 64 00 92 2d 64 00 93     .Hd.Ed..9d..-d..
    6ed4:	15 46 05 90 45 64 06 4c 64 00 91 40 64 00 92 28     .F..Ed.Ld..@d..(
    6ee4:	64 00 93 14 64 06 90 4c 64 05 48 64 00 91 3c 64     d...d..Ld.Hd..<d
    6ef4:	06 90 48 64 05 45 64 00 91 39 64 00 92 2d 64 00     ..Hd.Ed..9d..-d.
    6f04:	93 15 64 06 90 45 64 06 4c 64 00 91 40 64 05 90     ..d..Ed.Ld..@d..
    6f14:	4c 64 06 93 14 64 0b 90 4a 64 00 91 3e 64 06 90     Ld...d..Jd..>d..
    6f24:	4a 64 05 47 64 00 91 3b 64 00 92 2b 64 00 93 15     Jd.Gd..;d..+d...
    6f34:	64 06 90 47 64 05 43 64 00 91 37 64 00 92 2b 64     d..Gd.Cd..7d..+d
    6f44:	00 93 15 46 06 90 43 64 05 4a 64 00 91 3e 64 00     ...F..Cd.Jd..>d.
    6f54:	92 26 64 00 93 14 64 06 90 4a 64 06 47 64 00 91     .&d...d..Jd.Gd..
    6f64:	3b 64 05 90 47 64 06 43 64 00 91 37 64 00 92 2b     ;d..Gd.Cd..7d..+
    6f74:	64 00 93 15 64 05 90 43 64 06 4a 64 00 91 3e 64     d...d..Cd.Jd..>d
    6f84:	06 90 4a 64 05 93 14 64 0b 90 48 64 00 91 3c 64     ..Jd...d..Hd..<d
    6f94:	06 90 48 64 06 45 64 00 91 39 64 00 92 29 64 00     ..Hd.Ed..9d..)d.
    6fa4:	93 15 64 05 90 45 64 06 41 64 00 91 35 64 00 92     ..d..Ed.Ad..5d..
    6fb4:	29 64 00 93 15 46 05 90 41 64 06 48 64 00 91 3c     )d...F..Ad.Hd..<
    6fc4:	64 00 92 24 64 00 93 14 64 06 90 48 64 05 45 64     d..$d...d..Hd.Ed
    6fd4:	00 91 39 64 06 90 45 64 05 41 64 00 91 35 64 00     ..9d..Ed.Ad..5d.
    6fe4:	92 29 64 00 93 15 64 06 90 41 64 06 48 64 00 91     .)d...d..Ad.Hd..
    6ff4:	3c 64 05 90 48 64 06 4a 64 00 91 3e 64 00 92 2b     <d..Hd.Jd..>d..+
    7004:	64 00 93 14 64 05 90 4a 64 06 43 64 00 91 37 64     d...d..Jd.Cd..7d
    7014:	00 92 26 50 00 93 14 64 06 90 43 64 05 47 64 00     ..&P...d..Cd.Gd.
    7024:	91 3b 64 00 92 29 64 00 93 15 64 06 90 47 64 05     .;d..)d...d..Gd.
    7034:	4a 64 00 91 3e 64 00 92 2b 64 00 93 15 46 06 90     Jd..>d..+d...F..
    7044:	4a 64 06 43 64 00 91 37 64 00 92 26 64 05 90 43     Jd.Cd..7d..&d..C
    7054:	64 06 47 64 00 91 3b 64 00 93 14 64 05 90 47 64     d.Gd..;d...d..Gd
    7064:	06 4a 64 00 91 3e 64 00 92 2b 64 00 93 15 64 06     .Jd..>d..+d...d.
    7074:	90 4a 64 05 47 64 00 91 3b 64 06 90 47 64 05 3e     .Jd.Gd..;d..Gd.>
    7084:	64 00 91 32 64 00 92 29 64 00 93 14 64 06 90 3e     d..2d..)d...d..>
    7094:	64 06 41 64 00 91 35 64 00 93 16 5a 05 16 5a 00     d.Ad..5d...Z..Z.
    70a4:	90 41 64 06 45 64 00 91 39 64 00 92 24 64 00 93     .Ad.Ed..9d..$d..
    70b4:	15 64 05 90 45 64 06 41 64 00 91 35 64 00 93 16     .d..Ed.Ad..5d...
    70c4:	50 06 90 41 64 05 48 64 00 91 3c 64 00 92 21 64     P..Ad.Hd..<d..!d
    70d4:	00 93 14 64 06 90 48 64 05 45 64 00 91 39 64 00     ...d..Hd.Ed..9d.
    70e4:	93 16 5a 06 16 5a 00 90 45 64 06 41 64 00 91 35     ..Z..Z..Ed.Ad..5
    70f4:	64 00 92 29 64 00 93 15 64 05 90 41 64 06 45 64     d..)d...d..Ad.Ed
    7104:	00 91 39 64 00 93 16 50 05 90 45 64 06 40 64 00     ..9d...P..Ed.@d.
    7114:	91 34 64 00 92 28 64 00 93 14 64 05 90 40 64 06     .4d..(d...d..@d.
    7124:	45 64 00 91 39 64 00 93 16 5a 05 16 5a 01 90 45     Ed..9d...Z..Z..E
    7134:	64 05 48 64 00 91 3c 64 00 92 24 64 00 93 15 64     d.Hd..<d..$d...d
    7144:	06 90 48 64 05 45 64 00 91 39 64 00 93 16 50 06     ..Hd.Ed..9d...P.
    7154:	90 45 64 06 4c 64 00 91 40 64 00 92 21 64 00 93     .Ed.Ld..@d..!d..
    7164:	14 64 05 90 4c 64 06 48 64 00 91 3c 64 00 93 16     .d..Ld.Hd..<d...
    7174:	5a 05 16 5a 00 90 48 64 06 45 64 00 91 39 64 00     Z..Z..Hd.Ed..9d.
    7184:	92 28 64 00 93 15 64 06 90 45 64 05 48 64 00 91     .(d...d..Ed.Hd..
    7194:	3c 64 00 93 16 50 06 90 48 64 05 42 64 00 91 36     <d...P..Hd.Bd..6
    71a4:	64 00 92 27 64 00 93 14 64 06 90 42 64 06 44 64     d..'d...d..Bd.Dd
    71b4:	00 91 38 64 00 93 16 5a 05 16 5a 00 90 44 64 06     ..8d...Z..Z..Dd.
    71c4:	45 64 00 91 39 64 00 92 24 64 00 93 15 64 00 16     Ed..9d..$d...d..
    71d4:	64 05 90 45 64 06 42 64 00 91 36 64 00 93 16 50     d..Ed.Bd..6d...P
    71e4:	06 90 42 64 05 45 64 00 91 39 64 00 92 21 64 00     ..Bd.Ed..9d..!d.
    71f4:	93 14 64 06 90 45 64 05 42 64 00 91 36 64 00 93     ..d..Ed.Bd..6d..
    7204:	16 5a 06 16 5a 00 90 42 64 06 44 64 00 91 38 64     .Z..Z..Bd.Dd..8d
    7214:	00 92 27 64 00 93 15 64 00 16 64 05 90 44 64 06     ..'d...d..d..Dd.
    7224:	45 64 00 91 39 64 00 93 16 50 05 90 45 64 06 44     Ed..9d...P..Ed.D
    7234:	64 00 91 38 64 00 92 28 64 00 93 14 64 06 90 44     d..8d..(d...d..D
    7244:	64 05 45 64 00 91 39 64 00 93 16 5a 05 16 5a 01     d.Ed..9d...Z..Z.
    7254:	90 45 64 05 47 64 00 91 3b 64 00 92 20 64 00 93     .Ed.Gd..;d.. d..
    7264:	15 64 00 16 64 06 90 47 64 06 44 64 00 91 38 64     .d..d..Gd.Dd..8d
    7274:	00 93 16 50 05 90 44 64 06 47 64 00 91 3b 64 00     ...P..Dd.Gd..;d.
    7284:	92 21 64 00 93 14 64 05 90 47 64 06 44 64 00 91     .!d...d..Gd.Dd..
    7294:	38 64 00 93 16 5a 05 16 5a 01 90 44 64 05 45 64     8d...Z..Z..Dd.Ed
    72a4:	00 91 39 64 00 92 23 64 00 93 16 64 06 90 45 64     ..9d..#d...d..Ed
    72b4:	05 47 64 00 91 3b 64 00 93 15 46 06 90 47 64 06     .Gd..;d...F..Gd.
    72c4:	93 14 64 0b 90 4c 64 00 91 40 64 05 90 4c 64 06     ..d..Ld..@d..Ld.
    72d4:	48 64 00 91 3c 64 00 92 2d 64 00 93 15 64 06 90     Hd..<d..-d...d..
    72e4:	48 64 05 45 64 00 91 39 64 00 92 2d 64 00 93 15     Hd.Ed..9d..-d...
    72f4:	46 06 90 45 64 05 4c 64 00 91 40 64 00 92 28 64     F..Ed.Ld..@d..(d
    7304:	00 93 14 64 06 90 4c 64 05 48 64 00 91 3c 64 06     ...d..Ld.Hd..<d.
    7314:	90 48 64 06 45 64 00 91 39 64 00 92 2d 64 00 93     .Hd.Ed..9d..-d..
    7324:	15 64 05 90 45 64 06 4c 64 00 91 40 64 05 90 4c     .d..Ed.Ld..@d..L
    7334:	64 06 93 14 64 0b 90 4a 64 00 91 3e 64 06 90 4a     d...d..Jd..>d..J
    7344:	64 05 47 64 00 91 3b 64 00 92 2b 64 00 93 15 64     d.Gd..;d..+d...d
    7354:	06 90 47 64 06 43 64 00 91 37 64 00 92 2b 64 00     ..Gd.Cd..7d..+d.
    7364:	93 15 46 05 90 43 64 06 4a 64 00 91 3e 64 00 92     ..F..Cd.Jd..>d..
    7374:	26 64 00 93 14 64 05 90 4a 64 06 47 64 00 91 3b     &d...d..Jd.Gd..;
    7384:	64 06 90 47 64 05 43 64 00 91 37 64 00 92 2b 64     d..Gd.Cd..7d..+d
    7394:	00 93 15 64 06 90 43 64 05 4a 64 00 91 3e 64 06     ...d..Cd.Jd..>d.
    73a4:	90 4a 64 06 93 14 64 0b 90 48 64 00 91 3c 64 05     .Jd...d..Hd..<d.
    73b4:	90 48 64 06 45 64 00 91 39 64 00 92 29 64 00 93     .Hd.Ed..9d..)d..
    73c4:	15 64 06 90 45 64 05 41 64 00 91 35 64 00 92 29     .d..Ed.Ad..5d..)
    73d4:	64 00 93 15 46 06 90 41 64 05 48 64 00 91 3c 64     d...F..Ad.Hd..<d
    73e4:	00 92 24 64 00 93 14 64 06 90 48 64 06 45 64 00     ..$d...d..Hd.Ed.
    73f4:	91 39 64 05 90 45 64 06 41 64 00 91 35 64 00 92     .9d..Ed.Ad..5d..
    7404:	29 64 00 93 15 64 05 90 41 64 06 48 64 00 91 3c     )d...d..Ad.Hd..<
    7414:	64 06 90 48 64 05 4a 64 00 91 3e 64 00 92 2b 64     d..Hd.Jd..>d..+d
    7424:	00 93 14 64 06 90 4a 64 05 43 64 00 91 37 64 00     ...d..Jd.Cd..7d.
    7434:	92 26 50 00 93 14 64 06 90 43 64 06 47 64 00 91     .&P...d..Cd.Gd..
    7444:	3b 64 00 92 29 64 00 93 15 64 05 90 47 64 06 4a     ;d..)d...d..Gd.J
    7454:	64 00 91 3e 64 00 92 2b 64 00 93 15 46 05 90 4a     d..>d..+d...F..J
    7464:	64 06 43 64 00 91 37 64 00 92 26 64 06 90 43 64     d.Cd..7d..&d..Cd
    7474:	05 47 64 00 91 3b 64 00 93 14 64 06 90 47 64 05     .Gd..;d...d..Gd.
    7484:	4a 64 00 91 3e 64 00 92 2b 64 00 93 15 64 06 90     Jd..>d..+d...d..
    7494:	4a 64 06 47 64 00 91 3b 64 05 90 47 64 06 3e 64     Jd.Gd..;d..Gd.>d
    74a4:	00 91 32 64 00 92 29 64 00 93 14 64 05 90 3e 64     ..2d..)d...d..>d
    74b4:	06 41 64 00 91 35 64 00 93 16 5a 05 16 5a 00 90     .Ad..5d...Z..Z..
    74c4:	41 64 06 45 64 00 91 39 64 00 92 24 64 00 93 15     Ad.Ed..9d..$d...
    74d4:	64 06 90 45 64 05 41 64 00 91 35 64 00 93 16 50     d..Ed.Ad..5d...P
    74e4:	06 90 41 64 05 48 64 00 91 3c 64 00 92 21 64 00     ..Ad.Hd..<d..!d.
    74f4:	93 14 64 06 90 48 64 06 45 64 00 91 39 64 00 93     ..d..Hd.Ed..9d..
    7504:	16 5a 05 16 5a 00 90 45 64 06 41 64 00 91 35 64     .Z..Z..Ed.Ad..5d
    7514:	00 92 29 64 00 93 15 64 05 90 41 64 06 45 64 00     ..)d...d..Ad.Ed.
    7524:	91 39 64 00 93 16 50 06 90 45 64 05 40 64 00 91     .9d...P..Ed.@d..
    7534:	34 64 00 92 28 64 00 93 14 64 06 90 40 64 05 45     4d..(d...d..@d.E
    7544:	64 00 91 39 64 00 93 16 5a 06 16 5a 00 90 45 64     d..9d...Z..Z..Ed
    7554:	06 48 64 00 91 3c 64 00 92 24 64 00 93 15 64 05     .Hd..<d..$d...d.
    7564:	90 48 64 06 45 64 00 91 39 64 00 93 16 50 05 90     .Hd.Ed..9d...P..
    7574:	45 64 06 4c 64 00 91 40 64 00 92 21 64 00 93 14     Ed.Ld..@d..!d...
    7584:	64 06 90 4c 64 05 48 64 00 91 3c 64 00 93 16 5a     d..Ld.Hd..<d...Z
    7594:	05 16 5a 01 90 48 64 05 45 64 00 91 39 64 00 92     ..Z..Hd.Ed..9d..
    75a4:	28 64 00 93 15 64 06 90 45 64 06 48 64 00 91 3c     (d...d..Ed.Hd..<
    75b4:	64 00 93 16 50 05 90 48 64 06 42 64 00 91 36 64     d...P..Hd.Bd..6d
    75c4:	00 92 27 64 00 93 14 64 05 90 42 64 06 44 64 00     ..'d...d..Bd.Dd.
    75d4:	91 38 64 00 93 16 5a 05 16 5a 01 90 44 64 05 45     .8d...Z..Z..Dd.E
    75e4:	64 00 91 39 64 00 92 24 64 00 93 15 64 06 90 45     d..9d..$d...d..E
    75f4:	64 05 42 64 00 91 36 64 00 93 16 50 06 90 42 64     d.Bd..6d...P..Bd
    7604:	06 45 64 00 91 39 64 00 92 21 64 00 93 14 64 05     .Ed..9d..!d...d.
    7614:	90 45 64 06 42 64 00 91 36 64 00 93 16 5a 05 16     .Ed.Bd..6d...Z..
    7624:	5a 00 90 42 64 06 44 64 00 91 38 64 00 92 27 64     Z..Bd.Dd..8d..'d
    7634:	00 93 15 64 06 90 44 64 05 45 64 00 91 39 64 00     ...d..Dd.Ed..9d.
    7644:	93 16 50 06 90 45 64 05 44 64 00 91 38 64 00 92     ..P..Ed.Dd..8d..
    7654:	28 64 00 93 14 64 06 90 44 64 06 45 64 00 91 39     (d...d..Dd.Ed..9
    7664:	64 00 93 16 5a 05 16 5a 00 90 45 64 06 47 64 00     d...Z..Z..Ed.Gd.
    7674:	91 3b 64 00 92 20 64 00 93 15 64 05 90 47 64 06     .;d.. d...d..Gd.
    7684:	44 64 00 91 38 64 00 93 16 50 05 90 44 64 06 47     Dd..8d...P..Dd.G
    7694:	64 00 91 3b 64 00 92 21 64 00 93 14 64 06 90 47     d..;d..!d...d..G
    76a4:	64 05 44 64 00 91 38 64 00 93 16 5a 06 16 5a 00     d.Dd..8d...Z..Z.
    76b4:	90 44 64 05 45 64 00 91 39 64 00 92 23 64 00 93     .Dd.Ed..9d..#d..
    76c4:	15 6e 06 90 45 64 06 47 64 00 91 3b 64 00 93 15     .n..Ed.Gd..;d...
    76d4:	46 05 90 47 64 06 ff 06 01 45 00 ff 2f 00           F..Gd....E../.

000076e2 <Song1>:
    76e2:	00 c0 04 00 c1 05 00 c2 06 00 c3 07 00 90 37 7f     ..............7.
    76f2:	00 91 30 7f 00 92 24 7f 00 ff 06 01 53 01 93 18     ..0...$.....S...
    7702:	7f 05 91 30 7f 06 37 7f 00 92 24 7f 06 91 30 7f     ...0..7...$...0.
    7712:	06 30 7f 00 92 24 7f 00 93 19 7f 06 91 35 7f 06     .0...$.......5..
    7722:	30 7f 00 92 24 7f 06 91 30 7f 06 33 7f 00 92 24     0...$...0..3...$
    7732:	7f 00 93 18 7f 06 91 30 7f 06 30 7f 00 92 24 7f     .......0..0...$.
    7742:	06 91 35 7f 05 30 7f 00 92 24 7f 00 93 19 7f 07     ..5..0...$......
    7752:	91 30 7f 06 33 7f 00 92 24 7f 06 91 33 7f 06 90     .0..3...$...3...
    7762:	39 7f 00 91 35 7f 00 92 29 7f 00 93 18 7f 05 91     9...5...).......
    7772:	35 7f 07 39 7f 00 92 29 7f 05 91 30 7f 07 30 7f     5..9...)...0..0.
    7782:	00 92 29 7f 00 93 19 7f 06 91 35 7f 05 2d 7f 00     ..).......5..-..
    7792:	92 29 7f 07 91 2d 7f 05 30 7f 00 92 29 7f 00 93     .)...-..0...)...
    77a2:	18 7f 07 91 2d 7f 05 2d 7f 00 92 29 7f 06 91 2d     ....-..-...)...-
    77b2:	7f 07 30 7f 00 92 29 7f 00 93 19 7f 05 91 30 7f     ..0...).......0.
    77c2:	07 35 7f 00 92 29 7f 05 91 35 7f 06 90 38 7f 00     .5...)...5...8..
    77d2:	91 38 7f 00 92 27 7f 00 93 18 7f 06 91 38 7f 06     .8...'.......8..
    77e2:	3c 7f 00 92 27 7f 07 91 33 7f 05 33 7f 00 92 27     <...'...3..3...'
    77f2:	7f 00 93 19 7f 06 91 38 7f 06 30 7f 00 92 27 7f     .......8..0...'.
    7802:	06 91 30 7f 06 33 7f 00 92 27 7f 00 93 18 7f 06     ..0..3...'......
    7812:	91 2c 7f 06 2c 7f 00 92 27 7f 06 91 33 7f 06 30     .,..,...'...3..0
    7822:	7f 00 92 27 7f 00 93 19 7f 06 91 30 7f 06 38 7f     ...'.......0..8.
    7832:	00 92 27 7f 05 91 38 7f 07 90 3a 7f 00 91 3a 7f     ..'...8...:...:.
    7842:	00 92 26 7f 00 93 18 7f 06 91 3a 7f 06 3e 7f 00     ..&.......:..>..
    7852:	92 26 7f 06 91 35 7f 05 35 7f 00 92 26 7f 00 93     .&...5..5...&...
    7862:	19 7f 07 91 3a 7f 05 32 7f 00 92 26 7f 07 91 32     ....:..2...&...2
    7872:	7f 06 35 7f 00 92 26 7f 00 93 1a 7f 02 1a 7f 03     ..5...&.........
    7882:	91 2e 7f 00 93 1a 7f 07 91 2e 7f 00 92 26 7f 05     .............&..
    7892:	91 35 7f 00 93 1b 7f 03 1b 7f 04 91 32 7f 00 92     .5..........2...
    78a2:	26 7f 00 93 1b 7f 05 91 32 7f 06 3a 7f 00 92 26     &.......2..:...&
    78b2:	7f 00 93 19 7f 07 91 3a 7f 05 90 37 7f 00 91 30     .......:...7...0
    78c2:	7f 00 92 24 7f 00 93 18 7f 07 91 30 7f 05 37 7f     ...$.......0..7.
    78d2:	00 92 24 7f 06 91 30 7f 06 30 7f 00 92 24 7f 00     ..$...0..0...$..
    78e2:	93 19 7f 06 91 35 7f 07 30 7f 00 92 24 7f 05 91     .....5..0...$...
    78f2:	30 7f 06 33 7f 00 92 24 7f 00 93 18 7f 06 91 30     0..3...$.......0
    7902:	7f 06 30 7f 00 92 24 7f 06 91 35 7f 06 30 7f 00     ..0...$...5..0..
    7912:	92 24 7f 00 93 19 7f 06 91 30 7f 06 33 7f 00 92     .$.......0..3...
    7922:	24 7f 06 91 33 7f 06 90 39 7f 00 91 35 7f 00 92     $...3...9...5...
    7932:	29 7f 00 93 18 7f 06 91 35 7f 06 39 7f 00 92 29     ).......5..9...)
    7942:	7f 06 91 30 7f 06 30 7f 00 92 29 7f 00 93 19 7f     ...0..0...).....
    7952:	06 91 35 7f 06 2d 7f 00 92 29 7f 05 91 2d 7f 07     ..5..-...)...-..
    7962:	30 7f 00 92 29 7f 00 93 18 7f 06 91 2d 7f 06 2d     0...).......-..-
    7972:	7f 00 92 29 7f 06 91 2d 7f 05 30 7f 00 92 29 7f     ...)...-..0...).
    7982:	00 93 19 7f 07 91 30 7f 05 35 7f 00 92 29 7f 07     ......0..5...)..
    7992:	91 35 7f 06 90 38 7f 00 91 38 7f 00 92 27 7f 00     .5...8...8...'..
    79a2:	93 18 7f 05 91 38 7f 07 3c 7f 00 92 27 7f 05 91     .....8..<...'...
    79b2:	33 7f 07 33 7f 00 92 27 7f 00 93 19 7f 05 91 38     3..3...'.......8
    79c2:	7f 06 30 7f 00 92 27 7f 07 91 30 7f 05 33 7f 00     ..0...'...0..3..
    79d2:	92 27 7f 00 93 18 7f 07 91 2c 7f 05 2c 7f 00 92     .'.......,..,...
    79e2:	27 7f 06 91 33 7f 06 30 7f 00 92 27 7f 00 93 19     '...3..0...'....
    79f2:	7f 06 91 30 7f 07 38 7f 00 92 27 7f 05 91 38 7f     ...0..8...'...8.
    7a02:	06 90 3a 7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f     ..:...:...&.....
    7a12:	06 91 3a 7f 06 3e 7f 00 92 26 7f 06 91 35 7f 06     ..:..>...&...5..
    7a22:	35 7f 00 92 26 7f 00 93 19 7f 06 91 3a 7f 06 32     5...&.......:..2
    7a32:	7f 00 92 26 7f 06 91 32 7f 06 35 7f 00 92 26 7f     ...&...2..5...&.
    7a42:	00 93 19 7f 03 19 7f 03 91 2e 7f 05 2e 7f 00 92     ................
    7a52:	26 7f 00 93 18 7f 07 91 35 7f 00 93 18 7f 06 91     &.......5.......
    7a62:	32 7f 00 92 26 7f 00 93 19 7f 06 91 32 7f 06 3a     2...&.......2..:
    7a72:	7f 00 92 26 7f 00 93 19 7f 05 91 3a 7f 00 93 19     ...&.......:....
    7a82:	7f 07 90 30 7f 00 91 30 7f 00 92 24 7f 00 93 18     ...0...0...$....
    7a92:	7f 05 91 30 7f 07 37 7f 00 92 24 7f 06 91 30 7f     ...0..7...$...0.
    7aa2:	05 30 7f 00 92 24 7f 00 93 19 7f 07 91 35 7f 05     .0...$.......5..
    7ab2:	30 7f 00 92 24 7f 07 91 30 7f 05 33 7f 00 92 24     0...$...0..3...$
    7ac2:	7f 00 93 18 7f 06 91 30 7f 07 30 7f 00 92 24 7f     .......0..0...$.
    7ad2:	05 91 35 7f 07 30 7f 00 92 24 7f 00 93 19 7f 05     ..5..0...$......
    7ae2:	91 30 7f 06 33 7f 00 92 24 7f 06 91 33 7f 06 35     .0..3...$...3..5
    7af2:	7f 00 92 29 7f 00 93 18 7f 07 91 35 7f 05 39 7f     ...).......5..9.
    7b02:	00 92 29 7f 06 91 30 7f 06 30 7f 00 92 29 7f 00     ..)...0..0...)..
    7b12:	93 19 7f 06 91 35 7f 06 2d 7f 00 92 29 7f 06 91     .....5..-...)...
    7b22:	2d 7f 06 30 7f 00 92 29 7f 00 93 18 7f 06 91 2d     -..0...).......-
    7b32:	7f 06 90 32 7f 00 91 2d 7f 00 92 29 7f 06 91 2d     ...2...-...)...-
    7b42:	7f 06 30 7f 00 92 29 7f 00 93 19 7f 06 91 30 7f     ..0...).......0.
    7b52:	06 90 33 7f 00 91 35 7f 00 92 29 7f 06 91 35 7f     ..3...5...)...5.
    7b62:	06 90 30 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f     ..0...8...'.....
    7b72:	06 91 38 7f 05 3c 7f 00 92 27 7f 07 91 33 7f 06     ..8..<...'...3..
    7b82:	33 7f 00 92 27 7f 00 93 19 7f 06 91 38 7f 06 90     3...'.......8...
    7b92:	37 7f 00 91 30 7f 00 92 27 7f 05 91 30 7f 07 33     7...0...'...0..3
    7ba2:	7f 00 92 27 7f 00 93 18 7f 05 91 2c 7f 07 2c 7f     ...'.......,..,.
    7bb2:	00 92 27 7f 06 91 33 7f 05 30 7f 00 92 27 7f 00     ..'...3..0...'..
    7bc2:	93 19 7f 07 91 30 7f 05 38 7f 00 92 27 7f 07 91     .....0..8...'...
    7bd2:	38 7f 05 90 2e 7f 00 91 3a 7f 00 92 26 7f 00 93     8.......:...&...
    7be2:	18 7f 06 91 3a 7f 07 3e 7f 00 92 26 7f 00 93 1a     ....:..>...&....
    7bf2:	7f 05 91 35 7f 07 35 7f 00 92 26 7f 00 93 19 7f     ...5..5...&.....
    7c02:	05 91 3a 7f 00 93 1b 7f 06 90 35 7f 00 91 32 7f     ..:.......5...2.
    7c12:	00 92 26 7f 06 91 32 7f 06 35 7f 00 92 26 7f 00     ..&...2..5...&..
    7c22:	93 19 7f 07 91 2e 7f 00 93 18 7f 05 91 2e 7f 00     ................
    7c32:	92 26 7f 00 93 18 7f 06 91 35 7f 00 93 19 7f 06     .&.......5......
    7c42:	91 32 7f 00 92 26 7f 00 93 18 7f 06 91 32 7f 00     .2...&.......2..
    7c52:	93 18 7f 06 91 3a 7f 00 92 26 7f 00 93 19 7f 06     .....:...&......
    7c62:	91 3a 7f 00 93 18 7f 06 90 37 7f 00 91 30 7f 00     .:.......7...0..
    7c72:	92 24 7f 00 93 18 7f 06 91 30 7f 06 37 7f 00 92     .$.......0..7...
    7c82:	24 7f 06 91 30 7f 06 30 7f 00 92 24 7f 00 93 19     $...0..0...$....
    7c92:	7f 05 91 35 7f 07 30 7f 00 92 24 7f 06 91 30 7f     ...5..0...$...0.
    7ca2:	06 33 7f 00 92 24 7f 00 93 18 7f 06 91 30 7f 05     .3...$.......0..
    7cb2:	30 7f 00 92 24 7f 07 91 35 7f 05 90 3a 7f 00 91     0...$...5...:...
    7cc2:	30 7f 00 92 24 7f 00 93 19 7f 07 91 30 7f 06 33     0...$.......0..3
    7cd2:	7f 00 92 24 7f 05 91 33 7f 07 90 39 7f 00 91 35     ...$...3...9...5
    7ce2:	7f 00 92 29 7f 00 93 18 7f 05 91 35 7f 07 39 7f     ...).......5..9.
    7cf2:	00 92 29 7f 05 91 30 7f 06 30 7f 00 92 29 7f 00     ..)...0..0...)..
    7d02:	93 19 7f 07 91 35 7f 05 2d 7f 00 92 29 7f 07 91     .....5..-...)...
    7d12:	2d 7f 05 30 7f 00 92 29 7f 00 93 18 7f 06 91 2d     -..0...).......-
    7d22:	7f 06 90 35 7f 00 91 2d 7f 00 92 29 7f 06 91 2d     ...5...-...)...-
    7d32:	7f 07 30 7f 00 92 29 7f 00 93 19 7f 05 91 30 7f     ..0...).......0.
    7d42:	06 90 37 7f 00 91 35 7f 00 92 29 7f 06 91 35 7f     ..7...5...)...5.
    7d52:	06 90 38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f     ..8...8...'.....
    7d62:	06 91 38 7f 06 3c 7f 00 92 27 7f 06 91 33 7f 06     ..8..<...'...3..
    7d72:	33 7f 00 92 27 7f 00 93 19 7f 06 91 38 7f 06 30     3...'.......8..0
    7d82:	7f 00 92 27 7f 06 91 30 7f 06 33 7f 00 92 27 7f     ...'...0..3...'.
    7d92:	00 93 18 7f 06 91 2c 7f 06 2c 7f 00 92 27 7f 06     ......,..,...'..
    7da2:	91 33 7f 06 30 7f 00 92 27 7f 00 93 19 7f 05 91     .3..0...'.......
    7db2:	30 7f 07 38 7f 00 92 27 7f 06 91 38 7f 06 90 3a     0..8...'...8...:
    7dc2:	7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 06 91 3a     ...:...&.......:
    7dd2:	7f 05 3e 7f 00 92 26 7f 00 93 1a 7f 07 91 35 7f     ..>...&.......5.
    7de2:	05 35 7f 00 92 26 7f 00 93 19 7f 07 91 3a 7f 00     .5...&.......:..
    7df2:	93 1b 7f 06 91 32 7f 00 92 26 7f 05 91 32 7f 07     .....2...&...2..
    7e02:	35 7f 00 92 26 7f 00 93 19 7f 05 91 2e 7f 00 93     5...&...........
    7e12:	18 7f 07 91 2e 7f 00 92 26 7f 00 93 18 7f 05 91     ........&.......
    7e22:	35 7f 00 93 19 7f 06 91 32 7f 00 92 26 7f 00 93     5.......2...&...
    7e32:	18 7f 07 91 32 7f 00 93 18 7f 05 91 3a 7f 00 92     ....2.......:...
    7e42:	26 7f 00 93 19 7f 07 91 3a 7f 00 93 18 7f 05 90     &.......:.......
    7e52:	37 7f 00 91 30 7f 00 92 24 7f 00 93 18 7f 06 91     7...0...$.......
    7e62:	30 7f 06 37 7f 00 92 24 7f 06 91 30 7f 07 30 7f     0..7...$...0..0.
    7e72:	00 92 24 7f 00 93 19 7f 05 91 35 7f 06 30 7f 00     ..$.......5..0..
    7e82:	92 24 7f 06 91 30 7f 06 33 7f 00 92 24 7f 00 93     .$...0..3...$...
    7e92:	18 7f 06 91 30 7f 06 30 7f 00 92 24 7f 06 91 35     ....0..0...$...5
    7ea2:	7f 06 30 7f 00 92 24 7f 00 93 19 7f 06 91 30 7f     ..0...$.......0.
    7eb2:	06 33 7f 00 92 24 7f 06 91 33 7f 05 90 39 7f 00     .3...$...3...9..
    7ec2:	91 35 7f 00 92 29 7f 00 93 18 7f 07 91 35 7f 06     .5...).......5..
    7ed2:	39 7f 00 92 29 7f 06 91 30 7f 06 30 7f 00 92 29     9...)...0..0...)
    7ee2:	7f 00 93 19 7f 05 91 35 7f 07 2d 7f 00 92 29 7f     .......5..-...).
    7ef2:	05 91 2d 7f 07 30 7f 00 92 29 7f 00 93 18 7f 06     ..-..0...)......
    7f02:	91 2d 7f 05 2d 7f 00 92 29 7f 07 91 2d 7f 05 30     .-..-...)...-..0
    7f12:	7f 00 92 29 7f 00 93 19 7f 07 91 30 7f 05 35 7f     ...).......0..5.
    7f22:	00 92 29 7f 06 91 35 7f 07 90 38 7f 00 91 38 7f     ..)...5...8...8.
    7f32:	00 92 27 7f 00 93 18 7f 05 91 38 7f 07 3c 7f 00     ..'.......8..<..
    7f42:	92 27 7f 05 91 33 7f 06 33 7f 00 92 27 7f 00 93     .'...3..3...'...
    7f52:	19 7f 06 91 38 7f 06 30 7f 00 92 27 7f 07 91 30     ....8..0...'...0
    7f62:	7f 05 33 7f 00 92 27 7f 00 93 18 7f 06 91 2c 7f     ..3...'.......,.
    7f72:	06 2c 7f 00 92 27 7f 06 91 33 7f 06 30 7f 00 92     .,...'...3..0...
    7f82:	27 7f 00 93 19 7f 06 91 30 7f 06 38 7f 00 92 27     '.......0..8...'
    7f92:	7f 06 91 38 7f 06 90 3a 7f 00 91 3a 7f 00 92 26     ...8...:...:...&
    7fa2:	7f 00 93 18 7f 06 91 3a 7f 06 3e 7f 00 92 26 7f     .......:..>...&.
    7fb2:	06 91 35 7f 06 35 7f 00 92 26 7f 00 93 19 7f 06     ..5..5...&......
    7fc2:	91 3a 7f 06 32 7f 00 92 26 7f 06 91 32 7f 05 35     .:..2...&...2..5
    7fd2:	7f 00 92 26 7f 00 93 1a 7f 04 1a 7f 03 91 2e 7f     ...&............
    7fe2:	00 93 1a 7f 06 91 2e 7f 00 92 26 7f 06 91 35 7f     ..........&...5.
    7ff2:	00 93 1b 7f 03 1b 7f 03 91 32 7f 00 92 26 7f 00     .........2...&..
    8002:	93 1b 7f 05 91 32 7f 07 3a 7f 00 92 26 7f 00 93     .....2..:...&...
    8012:	19 7f 05 91 3a 7f 07 90 37 7f 00 91 30 7f 00 92     ....:...7...0...
    8022:	24 7f 00 93 18 7f 06 91 30 7f 05 37 7f 00 92 24     $.......0..7...$
    8032:	7f 07 91 30 7f 05 30 7f 00 92 24 7f 00 93 19 7f     ...0..0...$.....
    8042:	07 91 35 7f 05 30 7f 00 92 24 7f 06 91 30 7f 07     ..5..0...$...0..
    8052:	33 7f 00 92 24 7f 00 93 18 7f 05 91 30 7f 07 30     3...$.......0..0
    8062:	7f 00 92 24 7f 05 91 35 7f 06 30 7f 00 92 24 7f     ...$...5..0...$.
    8072:	00 93 19 7f 06 91 30 7f 06 33 7f 00 92 24 7f 07     ......0..3...$..
    8082:	91 33 7f 05 90 39 7f 00 91 35 7f 00 92 29 7f 00     .3...9...5...)..
    8092:	93 18 7f 06 91 35 7f 06 39 7f 00 92 29 7f 06 91     .....5..9...)...
    80a2:	30 7f 06 30 7f 00 92 29 7f 00 93 19 7f 06 91 35     0..0...).......5
    80b2:	7f 06 2d 7f 00 92 29 7f 06 91 2d 7f 06 30 7f 00     ..-...)...-..0..
    80c2:	92 29 7f 00 93 18 7f 06 91 2d 7f 06 2d 7f 00 92     .).......-..-...
    80d2:	29 7f 05 91 2d 7f 07 30 7f 00 92 29 7f 00 93 19     )...-..0...)....
    80e2:	7f 06 91 30 7f 06 35 7f 00 92 29 7f 06 91 35 7f     ...0..5...)...5.
    80f2:	05 90 38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f     ..8...8...'.....
    8102:	07 91 38 7f 05 3c 7f 00 92 27 7f 07 91 33 7f 06     ..8..<...'...3..
    8112:	33 7f 00 92 27 7f 00 93 19 7f 05 91 38 7f 07 30     3...'.......8..0
    8122:	7f 00 92 27 7f 05 91 30 7f 07 33 7f 00 92 27 7f     ...'...0..3...'.
    8132:	00 93 18 7f 05 91 2c 7f 06 2c 7f 00 92 27 7f 07     ......,..,...'..
    8142:	91 33 7f 05 30 7f 00 92 27 7f 00 93 19 7f 07 91     .3..0...'.......
    8152:	30 7f 05 38 7f 00 92 27 7f 06 91 38 7f 06 90 3a     0..8...'...8...:
    8162:	7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 06 91 3a     ...:...&.......:
    8172:	7f 07 3e 7f 00 92 26 7f 05 91 35 7f 06 35 7f 00     ..>...&...5..5..
    8182:	92 26 7f 00 93 19 7f 06 91 3a 7f 06 32 7f 00 92     .&.......:..2...
    8192:	26 7f 06 91 32 7f 06 35 7f 00 92 26 7f 00 93 19     &...2..5...&....
    81a2:	7f 03 19 7f 03 91 2e 7f 06 2e 7f 00 92 26 7f 00     .............&..
    81b2:	93 18 7f 06 91 35 7f 00 93 18 7f 06 91 32 7f 00     .....5.......2..
    81c2:	92 26 7f 00 93 19 7f 06 91 32 7f 06 3a 7f 00 92     .&.......2..:...
    81d2:	26 7f 00 93 19 7f 06 91 3a 7f 00 93 19 7f 06 90     &.......:.......
    81e2:	43 7f 00 91 30 7f 00 92 24 7f 00 93 18 7f 06 90     C...0...$.......
    81f2:	3f 7f 00 91 30 7f 06 90 3c 7f 00 91 37 7f 00 92     ?...0...<...7...
    8202:	24 7f 05 90 43 7f 00 91 30 7f 07 90 3f 7f 00 91     $...C...0...?...
    8212:	30 7f 00 92 24 7f 00 93 19 7f 06 90 3c 7f 00 91     0...$.......<...
    8222:	35 7f 06 90 43 7f 00 91 30 7f 00 92 24 7f 06 90     5...C...0...$...
    8232:	3f 7f 00 91 30 7f 05 90 3c 7f 00 91 33 7f 00 92     ?...0...<...3...
    8242:	24 7f 00 93 18 7f 07 90 43 7f 00 91 30 7f 05 90     $.......C...0...
    8252:	3f 7f 00 91 30 7f 00 92 24 7f 07 90 3c 7f 00 91     ?...0...$...<...
    8262:	35 7f 06 90 43 7f 00 91 30 7f 00 92 24 7f 00 93     5...C...0...$...
    8272:	19 7f 05 90 3f 7f 00 91 30 7f 07 90 3c 7f 00 91     ....?...0...<...
    8282:	33 7f 00 92 24 7f 05 90 43 7f 00 91 33 7f 07 90     3...$...C...3...
    8292:	41 7f 00 91 35 7f 00 92 29 7f 00 93 18 7f 05 90     A...5...).......
    82a2:	3e 7f 00 91 35 7f 06 90 3a 7f 00 91 39 7f 00 92     >...5...:...9...
    82b2:	29 7f 07 90 41 7f 00 91 30 7f 05 90 3e 7f 00 91     )...A...0...>...
    82c2:	30 7f 00 92 29 7f 00 93 19 7f 07 90 3a 7f 00 91     0...).......:...
    82d2:	35 7f 05 90 41 7f 00 91 2d 7f 00 92 29 7f 06 90     5...A...-...)...
    82e2:	3e 7f 00 91 2d 7f 06 90 3a 7f 00 91 30 7f 00 92     >...-...:...0...
    82f2:	29 7f 00 93 18 7f 06 90 41 7f 00 91 2d 7f 07 90     ).......A...-...
    8302:	3e 7f 00 91 2d 7f 00 92 29 7f 05 90 3a 7f 00 91     >...-...)...:...
    8312:	2d 7f 06 90 41 7f 00 91 30 7f 00 92 29 7f 00 93     -...A...0...)...
    8322:	19 7f 06 90 3e 7f 00 91 30 7f 06 90 3a 7f 00 91     ....>...0...:...
    8332:	35 7f 00 92 29 7f 06 90 41 7f 00 91 35 7f 06 90     5...)...A...5...
    8342:	38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f 06 90     8...8...'.......
    8352:	3c 7f 00 91 38 7f 06 90 3f 7f 00 91 3c 7f 00 92     <...8...?...<...
    8362:	27 7f 06 90 43 7f 00 91 33 7f 06 90 3f 7f 00 91     '...C...3...?...
    8372:	33 7f 00 92 27 7f 00 93 19 7f 06 90 3c 7f 00 91     3...'.......<...
    8382:	38 7f 05 90 41 7f 00 91 30 7f 00 92 27 7f 07 90     8...A...0...'...
    8392:	3e 7f 00 91 30 7f 06 90 3a 7f 00 91 33 7f 00 92     >...0...:...3...
    83a2:	27 7f 00 93 18 7f 06 90 35 7f 00 91 2c 7f 06 90     '.......5...,...
    83b2:	3a 7f 00 91 2c 7f 00 92 27 7f 05 90 41 7f 00 91     :...,...'...A...
    83c2:	33 7f 07 90 3f 7f 00 91 30 7f 00 92 27 7f 00 93     3...?...0...'...
    83d2:	19 7f 05 90 3e 7f 00 91 30 7f 07 90 3f 7f 00 91     ....>...0...?...
    83e2:	38 7f 00 92 27 7f 06 90 41 7f 00 91 38 7f 05 90     8...'...A...8...
    83f2:	3e 7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 07 90     >...:...&.......
    8402:	3a 7f 00 91 3a 7f 05 90 35 7f 00 91 3e 7f 00 92     :...:...5...>...
    8412:	26 7f 00 93 1a 7f 07 90 32 7f 00 91 35 7f 05 90     &.......2...5...
    8422:	2e 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 06 90     ....5...&.......
    8432:	29 7f 00 91 3a 7f 00 93 1b 7f 07 90 2e 7f 00 91     )...:...........
    8442:	32 7f 00 92 26 7f 05 90 32 7f 00 91 32 7f 07 90     2...&...2...2...
    8452:	27 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 05 90     '...5...&.......
    8462:	24 7f 00 91 2e 7f 00 93 18 7f 06 90 27 7f 00 91     $...........'...
    8472:	2e 7f 00 92 26 7f 00 93 18 7f 06 90 29 7f 00 91     ....&.......)...
    8482:	35 7f 00 93 19 7f 06 90 2e 7f 00 91 32 7f 00 92     5...........2...
    8492:	26 7f 00 93 18 7f 07 90 32 7f 00 91 32 7f 00 93     &.......2...2...
    84a2:	18 7f 05 90 35 7f 00 91 3a 7f 00 92 26 7f 00 93     ....5...:...&...
    84b2:	19 7f 06 90 3a 7f 00 91 3a 7f 00 93 18 7f 06 90     ....:...:.......
    84c2:	37 7f 00 91 30 7f 00 92 24 7f 00 93 18 7f 06 90     7...0...$.......
    84d2:	3c 7f 00 91 30 7f 06 90 3f 7f 00 91 37 7f 00 92     <...0...?...7...
    84e2:	24 7f 06 90 43 7f 00 91 30 7f 06 90 3f 7f 00 91     $...C...0...?...
    84f2:	30 7f 00 92 24 7f 00 93 19 7f 06 90 3c 7f 00 91     0...$.......<...
    8502:	35 7f 06 90 41 7f 00 91 30 7f 00 92 24 7f 06 90     5...A...0...$...
    8512:	3e 7f 00 91 30 7f 06 90 3a 7f 00 91 33 7f 00 92     >...0...:...3...
    8522:	24 7f 00 93 18 7f 06 90 41 7f 00 91 30 7f 06 90     $.......A...0...
    8532:	3e 7f 00 91 30 7f 00 92 24 7f 06 90 3a 7f 00 91     >...0...$...:...
    8542:	35 7f 06 90 3f 7f 00 91 30 7f 00 92 24 7f 00 93     5...?...0...$...
    8552:	19 7f 06 90 3e 7f 00 91 30 7f 05 90 3f 7f 00 91     ....>...0...?...
    8562:	33 7f 00 92 24 7f 07 90 41 7f 00 91 33 7f 06 90     3...$...A...3...
    8572:	3c 7f 00 91 35 7f 00 92 29 7f 00 93 18 7f 06 90     <...5...).......
    8582:	41 7f 00 91 35 7f 06 90 45 7f 00 91 39 7f 00 92     A...5...E...9...
    8592:	29 7f 05 90 30 7f 00 91 30 7f 07 90 35 7f 00 91     )...0...0...5...
    85a2:	30 7f 00 92 29 7f 00 93 19 7f 05 90 39 7f 00 91     0...).......9...
    85b2:	35 7f 07 90 3c 7f 00 91 2d 7f 00 92 29 7f 06 90     5...<...-...)...
    85c2:	41 7f 00 91 2d 7f 05 90 3c 7f 00 91 30 7f 00 92     A...-...<...0...
    85d2:	29 7f 00 93 18 7f 07 90 35 7f 00 91 2d 7f 05 90     ).......5...-...
    85e2:	39 7f 00 91 2d 7f 00 92 29 7f 07 90 3c 7f 00 91     9...-...)...<...
    85f2:	2d 7f 05 90 41 7f 00 91 30 7f 00 92 29 7f 00 93     -...A...0...)...
    8602:	19 7f 06 90 45 7f 00 91 30 7f 07 90 3c 7f 00 91     ....E...0...<...
    8612:	35 7f 00 92 29 7f 05 90 45 7f 00 91 35 7f 07 90     5...)...E...5...
    8622:	38 7f 00 91 38 7f 00 92 27 7f 00 93 18 7f 05 90     8...8...'.......
    8632:	3c 7f 00 91 38 7f 06 90 3f 7f 00 91 3c 7f 00 92     <...8...?...<...
    8642:	27 7f 06 90 43 7f 00 91 33 7f 06 90 3f 7f 00 91     '...C...3...?...
    8652:	33 7f 00 92 27 7f 00 93 19 7f 07 90 3c 7f 00 91     3...'.......<...
    8662:	38 7f 05 90 41 7f 00 91 30 7f 00 92 27 7f 06 90     8...A...0...'...
    8672:	3e 7f 00 91 30 7f 06 90 3a 7f 00 91 33 7f 00 92     >...0...:...3...
    8682:	27 7f 00 93 18 7f 06 90 35 7f 00 91 2c 7f 06 90     '.......5...,...
    8692:	3a 7f 00 91 2c 7f 00 92 27 7f 06 90 41 7f 00 91     :...,...'...A...
    86a2:	33 7f 06 90 3f 7f 00 91 30 7f 00 92 27 7f 00 93     3...?...0...'...
    86b2:	19 7f 06 90 3e 7f 00 91 30 7f 06 90 3f 7f 00 91     ....>...0...?...
    86c2:	38 7f 00 92 27 7f 06 90 41 7f 00 91 38 7f 06 90     8...'...A...8...
    86d2:	3e 7f 00 91 3a 7f 00 92 26 7f 00 93 18 7f 05 90     >...:...&.......
    86e2:	3a 7f 00 91 3a 7f 07 90 35 7f 00 91 3e 7f 00 92     :...:...5...>...
    86f2:	26 7f 00 93 1a 7f 06 90 32 7f 00 91 35 7f 06 90     &.......2...5...
    8702:	2e 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 06 90     ....5...&.......
    8712:	29 7f 00 91 3a 7f 00 93 1b 7f 05 90 2e 7f 00 91     )...:...........
    8722:	32 7f 00 92 26 7f 07 90 32 7f 00 91 32 7f 05 90     2...&...2...2...
    8732:	27 7f 00 91 35 7f 00 92 26 7f 00 93 19 7f 07 90     '...5...&.......
    8742:	24 7f 00 91 2e 7f 00 93 18 7f 06 90 27 7f 00 91     $...........'...
    8752:	2e 7f 00 92 26 7f 00 93 18 7f 05 90 29 7f 00 91     ....&.......)...
    8762:	35 7f 00 93 19 7f 07 90 2e 7f 00 91 32 7f 00 92     5...........2...
    8772:	26 7f 00 93 18 7f 05 90 32 7f 00 91 32 7f 00 93     &.......2...2...
    8782:	18 7f 07 90 35 7f 00 91 3a 7f 00 92 26 7f 00 93     ....5...:...&...
    8792:	19 7f 05 90 3a 7f 00 91 3a 7f 00 93 18 7f 06 ff     ....:...:.......
    87a2:	06 01 45 00 ff 2f 00                                ..E../.

000087a9 <DemoLfsr>:
    87a9:	00 00 32 a5 fa 56 31 a4 b4 e7                       ..2..V1...

000087b3 <DemoData>:
    87b3:	ff 11 11 2d 02 2d 05 2d 08 2d 0b 2d 0e 2d 11 2d     ...-.-.-.-.-.-.-
    87c3:	03 2d 06 2d 09 ff 11 11 01 01 01 01 01 01 01 01     .-.-............
    87d3:	01 01 01 01 01 01 01 01 ff 11 11 06 06 06 06 06     ................
    87e3:	06 06 06 06 06 06 06 06 06 06 06 ff 11 11 0d 0d     ................
    87f3:	0d 0d 0d 0d 0d 0d 0d ff 11 11 11 11 11 11 11 11     ................
    8803:	11 11 11                                            ...

00008806 <CheatString>:
    8806:	10 00 10 00 20 00 20 00 40 00 80 00 40 00 80 00     .... . .@...@...
    8816:	01 00 00 01                                         ....

0000881a <introcharmap>:
    881a:	21 41 42 43 44 45 46 47 48 49 4b 4c 4e 4f 50 52     !ABCDEFGHIKLNOPR
    882a:	53 54 55 56 57 58 59 5a 00                          STUVWXYZ.

00008833 <menucharmap>:
    8833:	7b 7d 5b 5d 2c 2e 5e 76 00                          {}[],.^v.

0000883c <titlecharmap>:
    883c:	7b 7d 5b 5d 2c 2e 5e 76 3e 50 52 45 53 54 41 4c     {}[],.^v>PRESTAL
    884c:	43 4f 55 4d 4e 49 47 56 5a 00                       COUMNIGVZ.

00008856 <readycharmap>:
    8856:	52 45 41 44 59 21 00                                READY!.

0000885d <pausecharmap>:
    885d:	50 41 55 53 45 52 4d 51 49 54 3e 00                 PAUSERMQIT>.

00008869 <gameovercharmap>:
    8869:	57 49 4e 45 52 21 54 59 41 47 53 4f 4c 56 42 4b     WINER!TYAGSOLVBK
    8879:	44 43 00                                            DC.

0000887c <CpuDropTime>:
    887c:	06 04 03 02 01 01 01 00 00 00 00                    ...........

00008887 <CpuMoveTime>:
    8887:	1e 14 12 0f 0a 04 03 02 01 00 00                    ...........

00008892 <__c.4390>:
    8892:	59 4f 55 20 47 55 59 53 20 41 52 45 20 47 52 45     YOU GUYS ARE GRE
    88a2:	41 54 21 21 00                                      AT!!.

000088a7 <__c.4388>:
    88a7:	41 4c 4c 20 54 48 45 53 45 20 59 45 41 52 53 21     ALL THESE YEARS!
    88b7:	21 00                                               !.

000088b9 <__c.4386>:
    88b9:	54 48 45 20 48 4f 42 42 59 20 41 4c 49 56 45 20     THE HOBBY ALIVE 
    88c9:	41 4e 44 20 46 55 4e 20 46 4f 52 00                 AND FUN FOR.

000088d5 <__c.4384>:
    88d5:	54 48 41 4e 4b 53 20 45 56 45 52 59 4f 4e 45 20     THANKS EVERYONE 
    88e5:	46 4f 52 20 4b 45 45 50 49 4e 47 00                 FOR KEEPING.

000088f1 <__c.4374>:
    88f1:	4c 45 45 20 57 45 42 45 52 00                       LEE WEBER.

000088fb <__c.4372>:
    88fb:	43 4f 44 49 4e 47 20 43 48 41 4c 4c 45 4e 47 45     CODING CHALLENGE
	...

0000890c <__c.4370>:
    890c:	55 20 5a 20 45 20 42 20 4f 20 58 00                 U Z E B O X.

00008918 <__c.3212>:
    8918:	4c 45 56 45 4c 00                                   LEVEL.

0000891e <__c.3210>:
    891e:	42 41 43 4b 20 54 4f 00                             BACK TO.

00008926 <__c.3208>:
    8926:	49 4e 43 52 45 44 49 42 4c 45 21 00                 INCREDIBLE!.

00008932 <__c.3206>:
    8932:	4c 45 56 45 4c 00                                   LEVEL.

00008938 <__c.3204>:
    8938:	4e 4f 57 20 54 52 59 00                             NOW TRY.

00008940 <__c.3202>:
    8940:	54 52 59 20 41 47 41 49 4e 21 00                    TRY AGAIN!.

0000894b <__c.3200>:
    894b:	44 52 41 57 21 21 00                                DRAW!!.

00008952 <__c.3198>:
    8952:	57 49 4e 4e 45 52 21 21 00                          WINNER!!.

0000895b <__c.3196>:
    895b:	50 41 55 53 45 00                                   PAUSE.

00008961 <__c.3194>:
    8961:	51 55 49 54 00                                      QUIT.

00008966 <__c.3192>:
    8966:	52 45 53 55 4d 45 00                                RESUME.

0000896d <__c.3190>:
    896d:	3e 00                                               >.

0000896f <__c.3188>:
    896f:	52 45 41 44 59 21 00                                READY!.

00008976 <__c.3004>:
    8976:	50 4c 41 59 45 52 53 20 20 20 20 50 49 4e 47 00     PLAYERS    PING.

00008986 <__c.2999>:
    8986:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

00008994 <__c.2941>:
    8994:	3e 00                                               >.

00008996 <__c.2939>:
    8996:	55 5a 45 4e 45 54 00                                UZENET.

0000899d <__c.2937>:
    899d:	4c 56 4c 00                                         LVL.

000089a1 <__c.2935>:
    89a1:	56 45 52 53 55 53 00                                VERSUS.

000089a8 <__c.2933>:
    89a8:	53 49 4e 47 4c 45 00                                SINGLE.

000089af <__c.2931>:
    89af:	53 45 4c 45 43 54 00                                SELECT.

000089b6 <__c.2926>:
    89b6:	55 5a 45 4e 45 54 00                                UZENET.

000089bd <__c.2924>:
    89bd:	4c 56 4c 00                                         LVL.

000089c1 <__c.2922>:
    89c1:	56 45 52 53 55 53 00                                VERSUS.

000089c8 <__c.2920>:
    89c8:	53 49 4e 47 4c 45 00                                SINGLE.

000089cf <__c.2918>:
    89cf:	53 45 4c 45 43 54 00                                SELECT.

000089d6 <__c.2899>:
    89d6:	50 52 45 53 53 20 53 54 41 52 54 00                 PRESS START.

000089e2 <__c.2867>:
    89e2:	43 4f 4c 55 4d 4e 53 00                             COLUMNS.

000089ea <__ctors_end>:
    89ea:	11 24       	eor	r1, r1
    89ec:	1f be       	out	0x3f, r1	; 63
    89ee:	cf ef       	ldi	r28, 0xFF	; 255
    89f0:	d0 e1       	ldi	r29, 0x10	; 16
    89f2:	de bf       	out	0x3e, r29	; 62
    89f4:	cd bf       	out	0x3d, r28	; 61

000089f6 <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    89f6:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    89f8:	88 e1       	ldi	r24, 0x18	; 24
    89fa:	0f b6       	in	r0, 0x3f	; 63
    89fc:	f8 94       	cli
    89fe:	80 93 60 00 	sts	0x0060, r24
    8a02:	10 92 60 00 	sts	0x0060, r1
    8a06:	0f be       	out	0x3f, r0	; 63

00008a08 <__do_copy_data>:
    8a08:	11 e0       	ldi	r17, 0x01	; 1
    8a0a:	a0 e0       	ldi	r26, 0x00	; 0
    8a0c:	b1 e0       	ldi	r27, 0x01	; 1
    8a0e:	ec e6       	ldi	r30, 0x6C	; 108
    8a10:	f8 ee       	ldi	r31, 0xE8	; 232
    8a12:	02 c0       	rjmp	.+4      	; 0x8a18 <.do_copy_data_start>

00008a14 <.do_copy_data_loop>:
    8a14:	05 90       	lpm	r0, Z+
    8a16:	0d 92       	st	X+, r0

00008a18 <.do_copy_data_start>:
    8a18:	a2 30       	cpi	r26, 0x02	; 2
    8a1a:	b1 07       	cpc	r27, r17
    8a1c:	d9 f7       	brne	.-10     	; 0x8a14 <.do_copy_data_loop>

00008a1e <__do_clear_bss>:
    8a1e:	1f e0       	ldi	r17, 0x0F	; 15
    8a20:	a0 e2       	ldi	r26, 0x20	; 32
    8a22:	b1 e0       	ldi	r27, 0x01	; 1
    8a24:	01 c0       	rjmp	.+2      	; 0x8a28 <.do_clear_bss_start>

00008a26 <.do_clear_bss_loop>:
    8a26:	1d 92       	st	X+, r1

00008a28 <.do_clear_bss_start>:
    8a28:	a6 3f       	cpi	r26, 0xF6	; 246
    8a2a:	b1 07       	cpc	r27, r17
    8a2c:	e1 f7       	brne	.-8      	; 0x8a26 <.do_clear_bss_loop>

00008a2e <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    8a2e:	ee d4       	rcall	.+2524   	; 0x940c <isEepromFormatted>
    8a30:	88 23       	and	r24, r24
    8a32:	09 f4       	brne	.+2      	; 0x8a36 <Initialize+0x8>
    8a34:	ff d4       	rcall	.+2558   	; 0x9434 <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    8a36:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8a38:	91 e0       	ldi	r25, 0x01	; 1
    8a3a:	90 93 35 0d 	sts	0x0D35, r25
		tr4_barrel_hi=1;		
    8a3e:	90 93 36 0d 	sts	0x0D36, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    8a42:	90 93 34 0d 	sts	0x0D34, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    8a46:	10 92 21 0d 	sts	0x0D21, r1
    8a4a:	10 92 27 0d 	sts	0x0D27, r1
    8a4e:	10 92 2d 0d 	sts	0x0D2D, r1
    8a52:	10 92 33 0d 	sts	0x0D33, r1
    8a56:	10 92 39 0d 	sts	0x0D39, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1
	sync_phase=0;
    8a5a:	10 92 ee 0c 	sts	0x0CEE, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    8a5e:	82 e1       	ldi	r24, 0x12	; 18
    8a60:	80 93 ef 0c 	sts	0x0CEF, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    8a64:	80 ed       	ldi	r24, 0xD0	; 208
    8a66:	80 93 f8 0c 	sts	0x0CF8, r24
	render_lines_count=FRAME_LINES;
    8a6a:	80 93 f6 0c 	sts	0x0CF6, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    8a6e:	84 e2       	ldi	r24, 0x24	; 36
    8a70:	80 93 f7 0c 	sts	0x0CF7, r24
	first_render_line=FIRST_RENDER_LINE;
    8a74:	80 93 f5 0c 	sts	0x0CF5, r24

	joypad1_status_hi=0;
    8a78:	10 92 fc 0c 	sts	0x0CFC, r1
    8a7c:	10 92 fb 0c 	sts	0x0CFB, r1
	joypad2_status_hi=0;
    8a80:	10 92 00 0d 	sts	0x0D00, r1
    8a84:	10 92 ff 0c 	sts	0x0CFF, r1
	sound_enabled=1;
    8a88:	90 93 20 0d 	sts	0x0D20, r25

	InitializeVideoMode();
    8a8c:	0e 94 81 52 	call	0xa502	; 0xa502 <InitializeVideoMode>
    8a90:	20 e9       	ldi	r18, 0x90	; 144
    8a92:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    8a94:	f9 01       	movw	r30, r18
    8a96:	85 91       	lpm	r24, Z+
    8a98:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    8a9a:	fc 01       	movw	r30, r24
    8a9c:	f0 70       	andi	r31, 0x00	; 0
    8a9e:	90 83       	st	Z, r25
    8aa0:	2e 5f       	subi	r18, 0xFE	; 254
    8aa2:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    8aa4:	80 e0       	ldi	r24, 0x00	; 0
    8aa6:	2e 3b       	cpi	r18, 0xBE	; 190
    8aa8:	38 07       	cpc	r19, r24
    8aaa:	a1 f7       	brne	.-24     	; 0x8a94 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    8aac:	78 94       	sei
	
	DisplayLogo();
    8aae:	0e 94 80 52 	call	0xa500	; 0xa500 <DisplayLogo>
    8ab2:	0e 94 40 73 	call	0xe680	; 0xe680 <main>
    8ab6:	0c 94 34 74 	jmp	0xe868	; 0xe868 <_exit>

00008aba <__bad_interrupt>:
    8aba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00008abe <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		ldi r16,6
    8abe:	06 e0       	ldi	r16, 0x06	; 6
		dec r16
    8ac0:	0a 95       	dec	r16
		brne .-4		
    8ac2:	f1 f7       	brne	.-4      	; 0x8ac0 <sub_video_mode3+0x2>

		;ldi YL,lo8(vram)
		;ldi YH,hi8(vram)

		;lds r18,free_tile_index
		lpm
    8ac4:	c8 95       	lpm
		lpm
    8ac6:	c8 95       	lpm

		clr r16
    8ac8:	00 27       	eor	r16, r16

00008aca <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    8aca:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    8acc:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    8ace:	ac 0f       	add	r26, r28
		adc XH,YH
    8ad0:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    8ad2:	1c 91       	ld	r17, X
		rjmp .;std Z+2,r17
    8ad4:	00 c0       	rjmp	.+0      	; 0x8ad6 <upd_loop+0xc>
		

		cp r16,r18
    8ad6:	02 17       	cp	r16, r18
		brsh noov
    8ad8:	08 f4       	brcc	.+2      	; 0x8adc <noov>
		mov r17,r16
    8ada:	10 2f       	mov	r17, r16

00008adc <noov>:
	noov:
		rjmp .;st X,r17
    8adc:	00 c0       	rjmp	.+0      	; 0x8ade <noov+0x2>
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    8ade:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    8ae0:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    8ae2:	03 32       	cpi	r16, 0x23	; 35
		brlo upd_loop ;23
    8ae4:	90 f3       	brcs	.-28     	; 0x8aca <upd_loop>



		ldi r16,63-RAM_TILES_COUNT ;222*7 
    8ae6:	0c e1       	ldi	r16, 0x1C	; 28

00008ae8 <wait_loop>:
	wait_loop:
	
		ldi r17,6
    8ae8:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    8aea:	1a 95       	dec	r17
		brne .-4
    8aec:	f1 f7       	brne	.-4      	; 0x8aea <wait_loop+0x2>

		dec r16
    8aee:	0a 95       	dec	r16
		brne wait_loop
    8af0:	d9 f7       	brne	.-10     	; 0x8ae8 <wait_loop>

	


		ldi YL,lo8(vram)
    8af2:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8af4:	d1 e0       	ldi	r29, 0x01	; 1

		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    8af6:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    8af8:	a0 2e       	mov	r10, r16
		clr r22
    8afa:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    8afc:	78 e0       	ldi	r23, 0x08	; 8

00008afe <next_text_line>:




	next_text_line:	
		rcall hsync_pulse
    8afe:	00 d2       	rcall	.+1024   	; 0x8f00 <hsync_pulse>

		WAIT r19,245 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT
    8b00:	3b e0       	ldi	r19, 0x0B	; 11
    8b02:	3a 95       	dec	r19
    8b04:	f1 f7       	brne	.-4      	; 0x8b02 <next_text_line+0x4>

		;***draw line***
		call render_tile_line
    8b06:	24 d0       	rcall	.+72     	; 0x8b50 <render_tile_line>
    8b08:	3b e0       	ldi	r19, 0x0B	; 11

		ldi r19,7 + 4 - CENTER_ADJUSTMENT	
    8b0a:	3a 95       	dec	r19
		dec r19			
    8b0c:	f1 f7       	brne	.-4      	; 0x8b0a <next_text_line+0xc>
		brne .-4
    8b0e:	aa 94       	dec	r10
	
		;rjmp .

		dec r10
    8b10:	89 f0       	breq	.+34     	; 0x8b34 <text_frame_end>
		breq text_frame_end
    8b12:	63 95       	inc	r22
	
		inc r22
    8b14:	c8 95       	lpm
		lpm ;3 nop
    8b16:	68 30       	cpi	r22, 0x08	; 8

		cpi r22,TILE_HEIGHT ;last char line? 1
    8b18:	29 f0       	breq	.+10     	; 0x8b24 <next_text_row>
		breq next_text_row 
    8b1a:	c8 95       	lpm
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		lpm ;3 nop
    8b1c:	c8 95       	lpm
		lpm ;3 nop
    8b1e:	c8 95       	lpm
		lpm ;3 nop
    8b20:	00 00       	nop
		nop
    8b22:	ed cf       	rjmp	.-38     	; 0x8afe <next_text_line>

00008b24 <next_text_row>:
		rjmp next_text_line	
    8b24:	66 27       	eor	r22, r22

	next_text_row:
		clr r22		;current char line			;1	
    8b26:	00 24       	eor	r0, r0

		clr r0
    8b28:	3e e1       	ldi	r19, 0x1E	; 30
		ldi r19,VRAM_TILES_H
    8b2a:	c3 0f       	add	r28, r19
		add YL,r19
    8b2c:	d0 1d       	adc	r29, r0
		adc YH,r0
    8b2e:	c8 95       	lpm

		lpm
    8b30:	00 00       	nop
		nop
    8b32:	e5 cf       	rjmp	.-54     	; 0x8afe <next_text_line>

00008b34 <text_frame_end>:

		rjmp next_text_line
    8b34:	35 e0       	ldi	r19, 0x05	; 5

	text_frame_end:

		ldi r19,5
    8b36:	3a 95       	dec	r19
		dec r19			
    8b38:	f1 f7       	brne	.-4      	; 0x8b36 <text_frame_end+0x2>
		brne .-4
    8b3a:	00 c0       	rjmp	.+0      	; 0x8b3c <text_frame_end+0x8>
		rjmp .
    8b3c:	e1 d1       	rcall	.+962    	; 0x8f00 <hsync_pulse>

		rcall hsync_pulse ;145
    8b3e:	11 24       	eor	r1, r1
	
		clr r1
    8b40:	e1 e0       	ldi	r30, 0x01	; 1
;		call RestoreBackground

		;set vsync flag if beginning of next frame
		ldi ZL,1
    8b42:	e0 93 f0 0c 	sts	0x0CF0, r30
		sts vsync_flag,ZL
    8b46:	e2 e0       	ldi	r30, 0x02	; 2

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8b48:	e0 93 36 00 	sts	0x0036, r30
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8b4c:	11 24       	eor	r1, r1



		clr r1
    8b4e:	08 95       	ret

00008b50 <render_tile_line>:


		ret
    8b50:	de 01       	movw	r26, r28
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8b52:	67 9f       	mul	r22, r23

		mul r22,r23
    8b54:	00 00       	nop

		nop
    8b56:	00 91 ec 0c 	lds	r16, 0x0CEC

		lds r16,tile_table_lo 
    8b5a:	10 91 ed 0c 	lds	r17, 0x0CED
		lds r17,tile_table_hi
    8b5e:	00 5c       	subi	r16, 0xC0	; 192
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8b60:	18 40       	sbci	r17, 0x08	; 8
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8b62:	00 0d       	add	r16, r0

		add r16,r0
    8b64:	11 1d       	adc	r17, r1
		adc r17,r1
    8b66:	18 01       	movw	r2, r16
		movw r2,r16			;rom tiles
    8b68:	0c e2       	ldi	r16, 0x2C	; 44

		ldi r16,lo8(ram_tiles)
    8b6a:	14 e0       	ldi	r17, 0x04	; 4
		ldi r17,hi8(ram_tiles)
    8b6c:	00 0d       	add	r16, r0
		add r16,r0
    8b6e:	11 1d       	adc	r17, r1
		adc r17,r1
    8b70:	28 01       	movw	r4, r16
		movw r4,r16			;ram tiles
    8b72:	30 e4       	ldi	r19, 0x40	; 64

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    8b74:	1e e1       	ldi	r17, 0x1E	; 30
		ldi r17,SCREEN_TILES_H
    8b76:	2d 91       	ld	r18, X+

	    ld r18,X+     	;load next tile # from VRAM
    8b78:	23 32       	cpi	r18, 0x23	; 35
		cpi r18,RAM_TILES_COUNT
    8b7a:	6f b6       	in	r6, 0x3f	; 63
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8b7c:	60 fa       	bst	r6, 0
		bst r6,SREG_C
    8b7e:	23 9f       	mul	r18, r19

		mul r18,r19 	;tile*width*height
    8b80:	a1 01       	movw	r20, r2
		movw r20,r2		;rom tiles
    8b82:	0e f4       	brtc	.+2      	; 0x8b86 <render_tile_line+0x36>
		brtc .+2
    8b84:	a2 01       	movw	r20, r4
		movw r20,r4		;ram tiles
    8b86:	04 0e       	add	r0, r20

	    add r0,r20    ;add title table address +row offset
    8b88:	15 1e       	adc	r1, r21
	    adc r1,r21
    8b8a:	f0 01       	movw	r30, r0

		movw ZL,r0
    8b8c:	f6 f0       	brts	.+60     	; 0x8bca <ramloop>

00008b8e <romloop>:

		brts ramloop
    8b8e:	05 91       	lpm	r16, Z+
	

	romloop:
	    lpm r16,Z+
    8b90:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8b92:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    8b94:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    8b96:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    8b98:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    8b9a:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    8b9c:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    8b9e:	23 32       	cpi	r18, 0x23	; 35
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    8ba0:	6f b6       	in	r6, 0x3f	; 63
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8ba2:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    8ba4:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8ba6:	08 f4       	brcc	.+2      	; 0x8baa <romloop+0x1c>
		brsh .+2		;skip in next tile is in ROM	
    8ba8:	a2 01       	movw	r20, r4
		movw r20,r4 	;load RAM title table address +row offset	
    8baa:	05 91       	lpm	r16, Z+
   
	    lpm r16,Z+
    8bac:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    8bae:	60 fa       	bst	r6, 0
	    bst r6,SREG_C	;store carry state in T flag for later branch
    8bb0:	04 0e       	add	r0, r20
		add r0,r20		;add title table address +row offset lsb
    8bb2:	05 91       	lpm	r16, Z+
    
	    lpm r16,Z+
    8bb4:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    8bb6:	15 1e       	adc	r1, r21
		adc r1,r21		;add title table address +row offset msb
    8bb8:	1a 95       	dec	r17
		dec r17			;decrement tiles to draw on line
    8bba:	05 91       	lpm	r16, Z+

   
	    lpm r16,Z+
    8bbc:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    8bbe:	05 91       	lpm	r16, Z+
	    lpm r16,Z+
    8bc0:	39 f1       	breq	.+78     	; 0x8c10 <end>

		breq end	
    8bc2:	f0 01       	movw	r30, r0
	    movw ZL,r0   	;copy next tile adress
    8bc4:	08 b9       	out	0x08, r16	; 8

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8bc6:	1e f7       	brtc	.-58     	; 0x8b8e <romloop>
	    brtc romloop
    8bc8:	00 c0       	rjmp	.+0      	; 0x8bca <ramloop>

00008bca <ramloop>:
	
		rjmp .
    8bca:	01 91       	ld	r16, Z+

	ramloop:

	    ld r16,Z+
    8bcc:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8bce:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    8bd0:	01 91       	ld	r16, Z+

	    ld r16,Z+ 
    8bd2:	00 00       	nop
		nop   
    8bd4:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    8bd6:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    8bd8:	01 91       	ld	r16, Z+


	    ld r16,Z+
    8bda:	00 00       	nop
		nop
    8bdc:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    8bde:	23 32       	cpi	r18, 0x23	; 35
		cpi r18,RAM_TILES_COUNT
    8be0:	6f b6       	in	r6, 0x3f	; 63
		in r6,_SFR_IO_ADDR(SREG)	;save the carry flag
    8be2:	60 fa       	bst	r6, 0
		bst r6,SREG_C
    8be4:	01 91       	ld	r16, Z+
   

	    ld r16,Z+
    8be6:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8be8:	0e f0       	brts	.+2      	; 0x8bec <ramloop+0x22>
		brts .+2 
    8bea:	a1 01       	movw	r20, r2
		movw r20,r2 	;ROM title table address +row offset	
    8bec:	01 91       	ld	r16, Z+
   
   
	    ld r16,Z+
    8bee:	04 0e       	add	r0, r20
	    add r0,r20    ;add title table address +row offset
    8bf0:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8bf2:	15 1e       	adc	r1, r21
	    adc r1,r21
    8bf4:	00 c0       	rjmp	.+0      	; 0x8bf6 <ramloop+0x2c>
		rjmp .
    8bf6:	01 91       	ld	r16, Z+
    
		ld r16,Z+		
    8bf8:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    8bfa:	00 00       	nop
		nop
    8bfc:	00 c0       	rjmp	.+0      	; 0x8bfe <ramloop+0x34>
		rjmp .  
    8bfe:	01 91       	ld	r16, Z+

	    ld r16,Z+	
    8c00:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8c02:	01 91       	ld	r16, Z+
	    ld r16,Z+
    8c04:	1a 95       	dec	r17

	    dec r17
    8c06:	21 f0       	breq	.+8      	; 0x8c10 <end>
	    breq end
    8c08:	f0 01       	movw	r30, r0
	
		movw ZL,r0
    8c0a:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8c0c:	06 f6       	brtc	.-128    	; 0x8b8e <romloop>
	
	    brtc romloop
    8c0e:	dd cf       	rjmp	.-70     	; 0x8bca <ramloop>

00008c10 <end>:
		rjmp ramloop
    8c10:	08 b9       	out	0x08, r16	; 8
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8c12:	00 27       	eor	r16, r16
		clr r16	
    8c14:	c8 95       	lpm
		lpm	
    8c16:	00 00       	nop
		nop
    8c18:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        
    8c1a:	05 e0       	ldi	r16, 0x05	; 5

		;wait
		ldi r16,5
    8c1c:	0a 95       	dec	r16
		dec r16
    8c1e:	f1 f7       	brne	.-4      	; 0x8c1c <end+0xc>
		brne .-4
    8c20:	08 95       	ret

00008c22 <CopyTileToRam>:

	
		ret
    8c22:	20 e4       	ldi	r18, 0x40	; 64
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8c24:	e0 91 ec 0c 	lds	r30, 0x0CEC

	;compute source adress
	lds ZL,tile_table_lo
    8c28:	f0 91 ed 0c 	lds	r31, 0x0CED
	lds ZH,tile_table_hi
    8c2c:	83 52       	subi	r24, 0x23	; 35
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    8c2e:	82 9f       	mul	r24, r18
	mul r24,r18
    8c30:	e0 0d       	add	r30, r0
	add ZL,r0
    8c32:	f1 1d       	adc	r31, r1
	adc ZH,r1
    8c34:	ac e2       	ldi	r26, 0x2C	; 44

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8c36:	b4 e0       	ldi	r27, 0x04	; 4
	ldi XH,hi8(ram_tiles)
    8c38:	62 9f       	mul	r22, r18
	mul r22,r18
    8c3a:	a0 0d       	add	r26, r0
	add XL,r0
    8c3c:	b1 1d       	adc	r27, r1
	adc XH,r1
    8c3e:	00 24       	eor	r0, r0

	clr r0
    8c40:	05 90       	lpm	r0, Z+
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    8c42:	0d 92       	st	X+, r0
    8c44:	05 90       	lpm	r0, Z+
    8c46:	0d 92       	st	X+, r0
    8c48:	05 90       	lpm	r0, Z+
    8c4a:	0d 92       	st	X+, r0
    8c4c:	05 90       	lpm	r0, Z+
    8c4e:	0d 92       	st	X+, r0
    8c50:	05 90       	lpm	r0, Z+
    8c52:	0d 92       	st	X+, r0
    8c54:	05 90       	lpm	r0, Z+
    8c56:	0d 92       	st	X+, r0
    8c58:	05 90       	lpm	r0, Z+
    8c5a:	0d 92       	st	X+, r0
    8c5c:	05 90       	lpm	r0, Z+
    8c5e:	0d 92       	st	X+, r0
    8c60:	05 90       	lpm	r0, Z+
    8c62:	0d 92       	st	X+, r0
    8c64:	05 90       	lpm	r0, Z+
    8c66:	0d 92       	st	X+, r0
    8c68:	05 90       	lpm	r0, Z+
    8c6a:	0d 92       	st	X+, r0
    8c6c:	05 90       	lpm	r0, Z+
    8c6e:	0d 92       	st	X+, r0
    8c70:	05 90       	lpm	r0, Z+
    8c72:	0d 92       	st	X+, r0
    8c74:	05 90       	lpm	r0, Z+
    8c76:	0d 92       	st	X+, r0
    8c78:	05 90       	lpm	r0, Z+
    8c7a:	0d 92       	st	X+, r0
    8c7c:	05 90       	lpm	r0, Z+
    8c7e:	0d 92       	st	X+, r0
    8c80:	05 90       	lpm	r0, Z+
    8c82:	0d 92       	st	X+, r0
    8c84:	05 90       	lpm	r0, Z+
    8c86:	0d 92       	st	X+, r0
    8c88:	05 90       	lpm	r0, Z+
    8c8a:	0d 92       	st	X+, r0
    8c8c:	05 90       	lpm	r0, Z+
    8c8e:	0d 92       	st	X+, r0
    8c90:	05 90       	lpm	r0, Z+
    8c92:	0d 92       	st	X+, r0
    8c94:	05 90       	lpm	r0, Z+
    8c96:	0d 92       	st	X+, r0
    8c98:	05 90       	lpm	r0, Z+
    8c9a:	0d 92       	st	X+, r0
    8c9c:	05 90       	lpm	r0, Z+
    8c9e:	0d 92       	st	X+, r0
    8ca0:	05 90       	lpm	r0, Z+
    8ca2:	0d 92       	st	X+, r0
    8ca4:	05 90       	lpm	r0, Z+
    8ca6:	0d 92       	st	X+, r0
    8ca8:	05 90       	lpm	r0, Z+
    8caa:	0d 92       	st	X+, r0
    8cac:	05 90       	lpm	r0, Z+
    8cae:	0d 92       	st	X+, r0
    8cb0:	05 90       	lpm	r0, Z+
    8cb2:	0d 92       	st	X+, r0
    8cb4:	05 90       	lpm	r0, Z+
    8cb6:	0d 92       	st	X+, r0
    8cb8:	05 90       	lpm	r0, Z+
    8cba:	0d 92       	st	X+, r0
    8cbc:	05 90       	lpm	r0, Z+
    8cbe:	0d 92       	st	X+, r0
    8cc0:	05 90       	lpm	r0, Z+
    8cc2:	0d 92       	st	X+, r0
    8cc4:	05 90       	lpm	r0, Z+
    8cc6:	0d 92       	st	X+, r0
    8cc8:	05 90       	lpm	r0, Z+
    8cca:	0d 92       	st	X+, r0
    8ccc:	05 90       	lpm	r0, Z+
    8cce:	0d 92       	st	X+, r0
    8cd0:	05 90       	lpm	r0, Z+
    8cd2:	0d 92       	st	X+, r0
    8cd4:	05 90       	lpm	r0, Z+
    8cd6:	0d 92       	st	X+, r0
    8cd8:	05 90       	lpm	r0, Z+
    8cda:	0d 92       	st	X+, r0
    8cdc:	05 90       	lpm	r0, Z+
    8cde:	0d 92       	st	X+, r0
    8ce0:	05 90       	lpm	r0, Z+
    8ce2:	0d 92       	st	X+, r0
    8ce4:	05 90       	lpm	r0, Z+
    8ce6:	0d 92       	st	X+, r0
    8ce8:	05 90       	lpm	r0, Z+
    8cea:	0d 92       	st	X+, r0
    8cec:	05 90       	lpm	r0, Z+
    8cee:	0d 92       	st	X+, r0
    8cf0:	05 90       	lpm	r0, Z+
    8cf2:	0d 92       	st	X+, r0
    8cf4:	05 90       	lpm	r0, Z+
    8cf6:	0d 92       	st	X+, r0
    8cf8:	05 90       	lpm	r0, Z+
    8cfa:	0d 92       	st	X+, r0
    8cfc:	05 90       	lpm	r0, Z+
    8cfe:	0d 92       	st	X+, r0
    8d00:	05 90       	lpm	r0, Z+
    8d02:	0d 92       	st	X+, r0
    8d04:	05 90       	lpm	r0, Z+
    8d06:	0d 92       	st	X+, r0
    8d08:	05 90       	lpm	r0, Z+
    8d0a:	0d 92       	st	X+, r0
    8d0c:	05 90       	lpm	r0, Z+
    8d0e:	0d 92       	st	X+, r0
    8d10:	05 90       	lpm	r0, Z+
    8d12:	0d 92       	st	X+, r0
    8d14:	05 90       	lpm	r0, Z+
    8d16:	0d 92       	st	X+, r0
    8d18:	05 90       	lpm	r0, Z+
    8d1a:	0d 92       	st	X+, r0
    8d1c:	05 90       	lpm	r0, Z+
    8d1e:	0d 92       	st	X+, r0
    8d20:	05 90       	lpm	r0, Z+
    8d22:	0d 92       	st	X+, r0
    8d24:	05 90       	lpm	r0, Z+
    8d26:	0d 92       	st	X+, r0
    8d28:	05 90       	lpm	r0, Z+
    8d2a:	0d 92       	st	X+, r0
    8d2c:	05 90       	lpm	r0, Z+
    8d2e:	0d 92       	st	X+, r0
    8d30:	05 90       	lpm	r0, Z+
    8d32:	0d 92       	st	X+, r0
    8d34:	05 90       	lpm	r0, Z+
    8d36:	0d 92       	st	X+, r0
    8d38:	05 90       	lpm	r0, Z+
    8d3a:	0d 92       	st	X+, r0
    8d3c:	05 90       	lpm	r0, Z+
    8d3e:	0d 92       	st	X+, r0
    8d40:	11 24       	eor	r1, r1


	clr r1
    8d42:	08 95       	ret

00008d44 <__vector_13>:
	ret
    8d44:	0f 92       	push	r0

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8d46:	1f 92       	push	r1
	push r1
    8d48:	ef 93       	push	r30
	push ZL;2
    8d4a:	ff 93       	push	r31
	push ZH;2
    8d4c:	ef b7       	in	r30, 0x3f	; 63
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8d4e:	ef 93       	push	r30
	push ZL ;2		
    8d50:	e0 91 84 00 	lds	r30, 0x0084

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8d54:	e2 51       	subi	r30, 0x12	; 18
	subi ZL,0x12 ;MIN_INT_LATENCY
    8d56:	f1 e0       	ldi	r31, 0x01	; 1

00008d58 <latency_loop>:

	ldi ZH,1
    8d58:	ef 17       	cp	r30, r31
latency_loop:
	cp ZL,ZH
    8d5a:	00 f0       	brcs	.+0      	; 0x8d5c <latency_loop+0x4>
	brlo .		;advance PC to next instruction	
    8d5c:	f3 95       	inc	r31
	inc ZH
    8d5e:	fa 30       	cpi	r31, 0x0A	; 10
	cpi ZH,10
    8d60:	d8 f3       	brcs	.-10     	; 0x8d58 <latency_loop>
	brlo latency_loop
    8d62:	00 c0       	rjmp	.+0      	; 0x8d64 <latency_loop+0xc>
	jmp .
    8d64:	e0 91 ef 0c 	lds	r30, 0x0CEF
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    8d68:	ea 95       	dec	r30
    8d6a:	e0 93 ef 0c 	sts	0x0CEF, r30
	dec ZL
	sts sync_pulse,ZL
    8d6e:	f0 91 ee 0c 	lds	r31, 0x0CEE

	;process sync phases
	lds ZH,sync_phase
    8d72:	f0 fd       	sbrc	r31, 0
    8d74:	54 c0       	rjmp	.+168    	; 0x8e1e <sync_hsync>
	sbrc ZH,0
    8d76:	ec 30       	cpi	r30, 0x0C	; 12
	rjmp sync_hsync
    8d78:	90 f0       	brcs	.+36     	; 0x8d9e <sync_eq>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8d7a:	f3 e0       	ldi	r31, 0x03	; 3
	brlo sync_eq
    8d7c:	f0 93 89 00 	sts	0x0089, r31

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8d80:	fd e8       	ldi	r31, 0x8D	; 141
    8d82:	f0 93 88 00 	sts	0x0088, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8d86:	e0 fb       	bst	r30, 0
    8d88:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8d8a:	1e f4       	brtc	.+6      	; 0x8d92 <sync_pre_eq_no_sound_update>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8d8c:	e1 e0       	ldi	r30, 0x01	; 1
	brtc sync_pre_eq_no_sound_update
    8d8e:	c7 d0       	rcall	.+398    	; 0x8f1e <update_sound>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8d90:	b0 c0       	rjmp	.+352    	; 0x8ef2 <sync_end>

00008d92 <sync_pre_eq_no_sound_update>:
	call update_sound
    8d92:	e5 e1       	ldi	r30, 0x15	; 21
    8d94:	ea 95       	dec	r30
	rjmp sync_end
    8d96:	f1 f7       	brne	.-4      	; 0x8d94 <sync_pre_eq_no_sound_update+0x2>

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8d98:	00 00       	nop
    8d9a:	28 9a       	sbi	0x05, 0	; 5
    8d9c:	aa c0       	rjmp	.+340    	; 0x8ef2 <sync_end>

00008d9e <sync_eq>:
    8d9e:	e6 30       	cpi	r30, 0x06	; 6
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8da0:	30 f1       	brcs	.+76     	; 0x8dee <sync_post_eq>
		
	rjmp sync_end
    8da2:	00 c0       	rjmp	.+0      	; 0x8da4 <sync_eq+0x6>
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8da4:	00 c0       	rjmp	.+0      	; 0x8da6 <sync_eq+0x8>
	brlo sync_post_eq
    8da6:	28 98       	cbi	0x05, 0	; 5

	rjmp .
    8da8:	e0 fb       	bst	r30, 0
	rjmp .
    8daa:	e4 e0       	ldi	r30, 0x04	; 4

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8dac:	0e f4       	brtc	.+2      	; 0x8db0 <sync_eq_skip>

	bst ZL,0
    8dae:	b7 d0       	rcall	.+366    	; 0x8f1e <update_sound>

00008db0 <sync_eq_skip>:
	ldi ZL,4
    8db0:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8db2:	e0 93 36 00 	sts	0x0036, r30
	
	call update_sound
    8db6:	e6 e0       	ldi	r30, 0x06	; 6
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8db8:	e0 93 6f 00 	sts	0x006F, r30
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8dbc:	9a c0       	rjmp	.+308    	; 0x8ef2 <sync_end>

00008dbe <__vector_14>:
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8dbe:	ef 93       	push	r30
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8dc0:	ef b7       	in	r30, 0x3f	; 63
    8dc2:	ef 93       	push	r30

	rjmp sync_end
    8dc4:	e0 91 84 00 	lds	r30, 0x0084
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8dc8:	ed 55       	subi	r30, 0x5D	; 93
	push ZL ;2		
    8dca:	e1 30       	cpi	r30, 0x01	; 1

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8dcc:	00 f0       	brcs	.+0      	; 0x8dce <__vector_14+0x10>
    8dce:	e2 30       	cpi	r30, 0x02	; 2
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    8dd0:	00 f0       	brcs	.+0      	; 0x8dd2 <__vector_14+0x14>

	cpi ZL,1
    8dd2:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    8dd4:	00 f0       	brcs	.+0      	; 0x8dd6 <__vector_14+0x18>

	cpi ZL,2
    8dd6:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    8dd8:	00 f0       	brcs	.+0      	; 0x8dda <__vector_14+0x1c>

	cpi ZL,3
    8dda:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    8ddc:	00 f0       	brcs	.+0      	; 0x8dde <__vector_14+0x20>

	cpi ZL,4
    8dde:	28 9a       	sbi	0x05, 0	; 5
	brlo .		;advance PC to next instruction
    8de0:	e2 e0       	ldi	r30, 0x02	; 2

	cpi ZL,5
    8de2:	e0 93 6f 00 	sts	0x006F, r30
	brlo .		;advance PC to next instruction

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8de6:	ef 91       	pop	r30
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8de8:	ef bf       	out	0x3f, r30	; 63
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8dea:	ef 91       	pop	r30
    8dec:	18 95       	reti

00008dee <sync_post_eq>:
	
	;restore flags
	pop ZL
    8dee:	00 c0       	rjmp	.+0      	; 0x8df0 <sync_post_eq+0x2>
	out _SFR_IO_ADDR(SREG),ZL	
    8df0:	e0 fb       	bst	r30, 0
	pop ZL
    8df2:	28 98       	cbi	0x05, 0	; 5
	reti
    8df4:	1e f4       	brtc	.+6      	; 0x8dfc <sync_post_eq_no_sound_update>
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8df6:	e1 e0       	ldi	r30, 0x01	; 1

	bst ZL,0
    8df8:	92 d0       	rcall	.+292    	; 0x8f1e <update_sound>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8dfa:	05 c0       	rjmp	.+10     	; 0x8e06 <sync_pre_eq_cont>

00008dfc <sync_post_eq_no_sound_update>:
	brtc sync_post_eq_no_sound_update
    8dfc:	e5 e1       	ldi	r30, 0x15	; 21
	ldi ZL,1	
    8dfe:	ea 95       	dec	r30
	call update_sound
    8e00:	f1 f7       	brne	.-4      	; 0x8dfe <sync_post_eq_no_sound_update+0x2>
    8e02:	00 00       	nop
	rjmp sync_pre_eq_cont
    8e04:	28 9a       	sbi	0x05, 0	; 5

00008e06 <sync_pre_eq_cont>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8e06:	e0 91 ef 0c 	lds	r30, 0x0CEF
    8e0a:	e0 30       	cpi	r30, 0x00	; 0
    8e0c:	09 f0       	breq	.+2      	; 0x8e10 <sync_pre_eq_cont+0xa>

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8e0e:	71 c0       	rjmp	.+226    	; 0x8ef2 <sync_end>

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8e10:	ed ef       	ldi	r30, 0xFD	; 253
    8e12:	e0 93 ef 0c 	sts	0x0CEF, r30
	cpi ZL,0
	breq .+2 ;skip rjmp
    8e16:	e1 e0       	ldi	r30, 0x01	; 1
	rjmp sync_end
    8e18:	e0 93 ee 0c 	sts	0x0CEE, r30
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
	sts sync_pulse,ZL
    8e1c:	6a c0       	rjmp	.+212    	; 0x8ef2 <sync_end>

00008e1e <sync_hsync>:
    8e1e:	e7 e0       	ldi	r30, 0x07	; 7
	ldi ZL,1
    8e20:	e0 93 89 00 	sts	0x0089, r30
	sts sync_phase,ZL
    8e24:	eb e1       	ldi	r30, 0x1B	; 27
	
	rjmp sync_end
    8e26:	e0 93 88 00 	sts	0x0088, r30
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8e2a:	00 c0       	rjmp	.+0      	; 0x8e2c <sync_hsync+0xe>
    8e2c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,lo8(HDRIVE_CL)
    8e2e:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8e30:	00 c0       	rjmp	.+0      	; 0x8e32 <sync_hsync+0x14>
    8e32:	75 d0       	rcall	.+234    	; 0x8f1e <update_sound>
	rjmp .
    8e34:	fd ef       	ldi	r31, 0xFD	; 253

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8e36:	00 90 f5 0c 	lds	r0, 0x0CF5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
	rjmp .
    8e3a:	f0 19       	sub	r31, r0
	call update_sound
    8e3c:	e0 91 ef 0c 	lds	r30, 0x0CEF

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8e40:	ef 17       	cp	r30, r31
	lds r0,first_render_line
    8e42:	c8 f4       	brcc	.+50     	; 0x8e76 <no_render>
    8e44:	fd ef       	ldi	r31, 0xFD	; 253
	sub ZH,r0				
    8e46:	00 90 f5 0c 	lds	r0, 0x0CF5
	lds ZL,sync_pulse
    8e4a:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8e4c:	00 90 f6 0c 	lds	r0, 0x0CF6
	brsh no_render

	ldi ZH,SYNC_HSYNC_PULSES
    8e50:	f0 19       	sub	r31, r0
	lds r0,first_render_line
    8e52:	ef 17       	cp	r30, r31
    8e54:	80 f0       	brcs	.+32     	; 0x8e76 <no_render>
	sub ZH,r0				
    8e56:	ed e1       	ldi	r30, 0x1D	; 29
	lds r0,render_lines_count
    8e58:	ff 27       	eor	r31, r31

00008e5a <push_loop>:
    8e5a:	00 80       	ld	r0, Z
	sub ZH,r0			
    8e5c:	0f 92       	push	r0
	cp ZL,ZH
    8e5e:	ea 95       	dec	r30
	brlo no_render
    8e60:	e1 f7       	brne	.-8      	; 0x8e5a <push_loop>

	;push r1-r29
	ldi ZL,29
    8e62:	06 e0       	ldi	r16, 0x06	; 6
	clr ZH
    8e64:	0a 95       	dec	r16
push_loop:
	ld r0,Z	;load value from register file
    8e66:	f1 f7       	brne	.-4      	; 0x8e64 <push_loop+0xa>
	push r0
    8e68:	2a de       	rcall	.-940    	; 0x8abe <sub_video_mode3>
	dec ZL
    8e6a:	e1 e0       	ldi	r30, 0x01	; 1
	brne push_loop	
    8e6c:	ff 27       	eor	r31, r31

00008e6e <pop_loop>:

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,18+212-AUDIO_OUT_HSYNC_CYCLES
    8e6e:	0f 90       	pop	r0
    8e70:	01 92       	st	Z+, r0
    8e72:	ee 31       	cpi	r30, 0x1E	; 30

	call VMODE_FUNC		;TCNT1=0x234
    8e74:	e0 f3       	brcs	.-8      	; 0x8e6e <pop_loop>

00008e76 <no_render>:
    8e76:	e0 91 ef 0c 	lds	r30, 0x0CEF

	;pop r1-r29
	ldi ZL,1
	clr ZH
    8e7a:	e0 30       	cpi	r30, 0x00	; 0
pop_loop:
	pop r0
    8e7c:	09 f0       	breq	.+2      	; 0x8e80 <no_render+0xa>
	st Z+,r0 ;store value to register file
    8e7e:	39 c0       	rjmp	.+114    	; 0x8ef2 <sync_end>
	cpi ZL,30
    8e80:	2f 93       	push	r18
	brlo pop_loop	
    8e82:	3f 93       	push	r19

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8e84:	4f 93       	push	r20
    8e86:	5f 93       	push	r21
	cpi ZL,0
    8e88:	6f 93       	push	r22
	breq .+2
    8e8a:	7f 93       	push	r23
	rjmp sync_end
    8e8c:	8f 93       	push	r24
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8e8e:	9f 93       	push	r25
	push r19
    8e90:	af 93       	push	r26
	push r20
    8e92:	bf 93       	push	r27
	push r21
    8e94:	78 94       	sei
	push r22
    8e96:	11 24       	eor	r1, r1
	push r23
    8e98:	ee 27       	eor	r30, r30
	push r24
    8e9a:	e0 93 ee 0c 	sts	0x0CEE, r30
	push r25
	push r26
    8e9e:	e2 e1       	ldi	r30, 0x12	; 18
	push r27
    8ea0:	e0 93 ef 0c 	sts	0x0CEF, r30

	sei ;must enable ints for re-entrant sync pulses
	clr r1
    8ea4:	f0 91 f7 0c 	lds	r31, 0x0CF7

	;set vsync flags
	clr ZL
	sts sync_phase,ZL
    8ea8:	f0 93 f5 0c 	sts	0x0CF5, r31
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8eac:	f0 91 f8 0c 	lds	r31, 0x0CF8
	sts sync_pulse,ZL
    8eb0:	f0 93 f6 0c 	sts	0x0CF6, r31

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    8eb4:	e0 91 f1 0c 	lds	r30, 0x0CF1
	sts first_render_line,ZH
    8eb8:	f0 91 f2 0c 	lds	r31, 0x0CF2
	
	lds ZH,render_lines_count_tmp
    8ebc:	e1 15       	cp	r30, r1
	sts render_lines_count,ZH
    8ebe:	f1 05       	cpc	r31, r1
    8ec0:	09 f0       	breq	.+2      	; 0x8ec4 <no_render+0x4e>

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8ec2:	09 95       	icall
    8ec4:	94 d2       	rcall	.+1320   	; 0x93ee <ReadControllers>
	lds ZH,pre_vsync_user_callback+1
    8ec6:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <VideoModeVsync>
	cp  ZL,r1
    8eca:	24 d0       	rcall	.+72     	; 0x8f14 <process_music>
	cpc ZH,r1
    8ecc:	11 24       	eor	r1, r1
	breq .+2 
    8ece:	e0 91 f3 0c 	lds	r30, 0x0CF3
	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8ed2:	f0 91 f4 0c 	lds	r31, 0x0CF4
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8ed6:	e1 15       	cp	r30, r1
    8ed8:	f1 05       	cpc	r31, r1

	;process music (music, envelopes, etc)
	call process_music
    8eda:	09 f0       	breq	.+2      	; 0x8ede <no_render+0x68>
    8edc:	09 95       	icall
	clr r1
    8ede:	bf 91       	pop	r27

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8ee0:	af 91       	pop	r26
    8ee2:	9f 91       	pop	r25
	lds ZH,post_vsync_user_callback+1
    8ee4:	8f 91       	pop	r24
    8ee6:	7f 91       	pop	r23
	cp  ZL,r1
    8ee8:	6f 91       	pop	r22
	cpc ZH,r1
    8eea:	5f 91       	pop	r21
	breq .+2 
    8eec:	4f 91       	pop	r20
	icall
    8eee:	3f 91       	pop	r19
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8ef0:	2f 91       	pop	r18

00008ef2 <sync_end>:
	pop r26
    8ef2:	ef 91       	pop	r30
	pop r25
    8ef4:	ef bf       	out	0x3f, r30	; 63
	pop r24
    8ef6:	ff 91       	pop	r31
	pop r23
    8ef8:	ef 91       	pop	r30
	pop r22
    8efa:	1f 90       	pop	r1
	pop r21
    8efc:	0f 90       	pop	r0
	pop r20
    8efe:	18 95       	reti

00008f00 <hsync_pulse>:
	pop r19
    8f00:	28 98       	cbi	0x05, 0	; 5
	pop r18
    8f02:	e2 e0       	ldi	r30, 0x02	; 2
	
sync_end:	
	;restore flags
	pop ZL
    8f04:	00 c0       	rjmp	.+0      	; 0x8f06 <hsync_pulse+0x6>
	out _SFR_IO_ADDR(SREG),ZL
    8f06:	0b d0       	rcall	.+22     	; 0x8f1e <update_sound>
	
	pop ZH
    8f08:	e0 91 ef 0c 	lds	r30, 0x0CEF
	pop ZL
	pop r1
    8f0c:	ea 95       	dec	r30
	pop r0
    8f0e:	e0 93 ef 0c 	sts	0x0CEF, r30
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8f12:	08 95       	ret

00008f14 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8f14:	e0 91 20 0d 	lds	r30, 0x0D20
	sbrc ZL,0
    8f18:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8f1a:	64 c4       	rjmp	.+2248   	; 0x97e4 <ProcessMusic>
    8f1c:	08 95       	ret

00008f1e <update_sound>:
#endif

	ret
    8f1e:	0f 93       	push	r16

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    8f20:	1f 93       	push	r17
	push r17
    8f22:	2f 93       	push	r18
	push r18
    8f24:	cf 93       	push	r28
	push r28
    8f26:	df 93       	push	r29
	push r29
    8f28:	2e 2f       	mov	r18, r30

	mov r18,ZL
    8f2a:	00 91 22 0d 	lds	r16, 0x0D22

	;channel 1 
	lds r16,tr1_step_lo
    8f2e:	10 91 24 0d 	lds	r17, 0x0D24
	lds r17,tr1_pos_frac
    8f32:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    8f34:	00 91 23 0d 	lds	r16, 0x0D23
	lds r16,tr1_step_hi	
    8f38:	e0 91 25 0d 	lds	r30, 0x0D25
	lds ZL,tr1_pos_lo
    8f3c:	f0 91 26 0d 	lds	r31, 0x0D26
	lds ZH,tr1_pos_hi 
    8f40:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    8f42:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    8f44:	e0 93 25 0d 	sts	0x0D25, r30
	sts tr1_pos_lo,ZL
    8f48:	10 93 24 0d 	sts	0x0D24, r17
	sts tr1_pos_frac,r17
    8f4c:	10 91 21 0d 	lds	r17, 0x0D21
	lds r17,tr1_vol
    8f50:	01 03       	mulsu	r16, r17
	mulsu r16,r17;(sample*mixing vol)
    8f52:	00 24       	eor	r0, r0
	clr r0
    8f54:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend	
    8f56:	c1 2d       	mov	r28, r1
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8f58:	d0 2d       	mov	r29, r0
	mov r29,r0	;set mix buffer msb	
    8f5a:	00 91 28 0d 	lds	r16, 0x0D28

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8f5e:	10 91 2a 0d 	lds	r17, 0x0D2A
	lds r17,tr2_pos_frac
    8f62:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    8f64:	00 91 29 0d 	lds	r16, 0x0D29
	lds r16,tr2_step_hi	
    8f68:	e0 91 2b 0d 	lds	r30, 0x0D2B
	lds ZL,tr2_pos_lo
    8f6c:	f0 91 2c 0d 	lds	r31, 0x0D2C
	lds ZH,tr2_pos_hi 
    8f70:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    8f72:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    8f74:	e0 93 2b 0d 	sts	0x0D2B, r30
	sts tr2_pos_lo,ZL
    8f78:	10 93 2a 0d 	sts	0x0D2A, r17
	sts tr2_pos_frac,r17
    8f7c:	10 91 27 0d 	lds	r17, 0x0D27
	lds r17,tr2_vol
    8f80:	20 fd       	sbrc	r18, 0
	;clr r17
	;nop

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8f82:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8f84:	20 ff       	sbrs	r18, 0
	sbrs r18,0								
    8f86:	00 c0       	rjmp	.+0      	; 0x8f88 <update_sound+0x6a>
	rjmp .
    8f88:	01 03       	mulsu	r16, r17
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8f8a:	00 24       	eor	r0, r0
	clr r0
    8f8c:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    8f8e:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8f90:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb		
    8f92:	00 91 2e 0d 	lds	r16, 0x0D2E
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8f96:	10 91 30 0d 	lds	r17, 0x0D30
	lds r17,tr3_pos_frac
    8f9a:	10 0f       	add	r17, r16
	add	r17,r16				;add step to fractional part of sample pos
    8f9c:	00 91 2f 0d 	lds	r16, 0x0D2F
	lds r16,tr3_step_hi	
    8fa0:	e0 91 31 0d 	lds	r30, 0x0D31
	lds ZL,tr3_pos_lo
    8fa4:	f0 91 32 0d 	lds	r31, 0x0D32
	lds ZH,tr3_pos_hi 
    8fa8:	e0 1f       	adc	r30, r16
	adc ZL,r16				;add step to low byte of sample pos
    8faa:	04 91       	lpm	r16, Z+
	lpm	r16,Z				;load sample
    8fac:	e0 93 31 0d 	sts	0x0D31, r30
	sts tr3_pos_lo,ZL
    8fb0:	10 93 30 0d 	sts	0x0D30, r17
	sts tr3_pos_frac,r17
    8fb4:	10 91 2d 0d 	lds	r17, 0x0D2D
	lds r17,tr3_vol
    8fb8:	01 03       	mulsu	r16, r17
	mulsu r16,r17			;(sample*mixing vol)
    8fba:	00 24       	eor	r0, r0
	clr r0
    8fbc:	00 08       	sbc	r0, r0
	sbc r0,r0				;sign extend
    8fbe:	c1 0d       	add	r28, r1
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8fc0:	d0 1d       	adc	r29, r0
	adc r29,r0				;ajust mix buffer msb
    8fc2:	00 91 35 0d 	lds	r16, 0x0D35
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    8fc6:	10 91 36 0d 	lds	r17, 0x0D36
	lds r17,tr4_barrel_hi
    8fca:	e0 91 37 0d 	lds	r30, 0x0D37
	lds ZL,tr4_divider
    8fce:	ea 95       	dec	r30
	dec ZL	
    8fd0:	92 f4       	brpl	.+36     	; 0x8ff6 <ch4_no_shift>
	brpl ch4_no_shift	
    8fd2:	f0 91 34 0d 	lds	r31, 0x0D34

	lds ZH,tr4_params
    8fd6:	ef 2f       	mov	r30, r31
	mov ZL,ZH
    8fd8:	e6 95       	lsr	r30
	lsr ZL 			;keep bits7:1
    8fda:	00 2e       	mov	r0, r16

	mov r0,r16  ;copy barrel shifter
    8fdc:	06 94       	lsr	r0
	lsr r0
    8fde:	00 26       	eor	r0, r16
	eor r0,r16  ;xor bit0 and bit1
    8fe0:	00 fa       	bst	r0, 0
	bst r0,0
    8fe2:	16 95       	lsr	r17
	lsr r17
    8fe4:	07 95       	ror	r16
	ror r16
    8fe6:	16 f9       	bld	r17, 6
	bld r17,6	;15 bits mode
    8fe8:	f0 ff       	sbrs	r31, 0
	sbrs ZH,0
    8fea:	06 f9       	bld	r16, 6
	bld r16,6	;7 bits mode
    8fec:	00 93 35 0d 	sts	0x0D35, r16

	sts tr4_barrel_lo,r16
    8ff0:	10 93 36 0d 	sts	0x0D36, r17
	sts tr4_barrel_hi,r17
    8ff4:	03 c0       	rjmp	.+6      	; 0x8ffc <ch4_end>

00008ff6 <ch4_no_shift>:

	rjmp ch4_end
    8ff6:	16 e0       	ldi	r17, 0x06	; 6
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    8ff8:	1a 95       	dec	r17
	dec r17
    8ffa:	f1 f7       	brne	.-4      	; 0x8ff8 <ch4_no_shift+0x2>

00008ffc <ch4_end>:
	brne .-4
    8ffc:	e0 93 37 0d 	sts	0x0D37, r30
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    9000:	21 fd       	sbrc	r18, 1
;126
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    9002:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    9004:	21 ff       	sbrs	r18, 1
	sbrs r18,1								
    9006:	00 c0       	rjmp	.+0      	; 0x9008 <ch4_end+0xc>
	rjmp .
    9008:	10 e8       	ldi	r17, 0x80	; 128
	;*************************
	
	ldi r17,0x80 ;-128
    900a:	00 fd       	sbrc	r16, 0
	sbrc r16,0
    900c:	1f e7       	ldi	r17, 0x7F	; 127
	ldi r17,0x7f ;+127
    900e:	00 91 33 0d 	lds	r16, 0x0D33
	
	lds r16,tr4_vol
    9012:	10 03       	mulsu	r17, r16

	mulsu r17,r16;(sample*mixing vol)
    9014:	00 24       	eor	r0, r0
	clr r0
    9016:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    9018:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    901a:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb
    901c:	00 91 3c 0d 	lds	r16, 0x0D3C
;142

	;channel 5 PCM 

	;add fractional part
	lds r16,tr5_pos_frac
    9020:	10 91 3a 0d 	lds	r17, 0x0D3A
	lds r17,tr5_step_lo 
    9024:	01 0f       	add	r16, r17
	add r16,r17
    9026:	00 93 3c 0d 	sts	0x0D3C, r16
	sts tr5_pos_frac,r16
    902a:	e0 91 3d 0d 	lds	r30, 0x0D3D

	;add lo
	lds ZL,tr5_pos_lo
    902e:	10 91 3b 0d 	lds	r17, 0x0D3B
	lds r17,tr5_step_hi 
    9032:	e1 1f       	adc	r30, r17
	adc ZL,r17
    9034:	f0 91 3e 0d 	lds	r31, 0x0D3E

	;add hi
	lds ZH,tr5_pos_hi
    9038:	00 e0       	ldi	r16, 0x00	; 0
	ldi r16,0
    903a:	f0 1f       	adc	r31, r16
	adc ZH,r16
    903c:	00 90 41 0d 	lds	r0, 0x0D41

	lds r0,tr5_loop_end_lo
    9040:	10 90 42 0d 	lds	r1, 0x0D42
	lds r1,tr5_loop_end_hi
    9044:	00 91 3f 0d 	lds	r16, 0x0D3F

	lds r16,tr5_loop_start_lo
    9048:	10 91 40 0d 	lds	r17, 0x0D40
	lds r17,tr5_loop_start_hi	
    904c:	e0 15       	cp	r30, r0

	cp ZL,r0
    904e:	f1 05       	cpc	r31, r1
	cpc ZH,r1
    9050:	08 f0       	brcs	.+2      	; 0x9054 <ch4_end+0x58>
	brlo .+2
    9052:	f8 01       	movw	r30, r16
	movw ZL,r16
    9054:	e0 93 3d 0d 	sts	0x0D3D, r30

	sts tr5_pos_lo,ZL
    9058:	f0 93 3e 0d 	sts	0x0D3E, r31
	sts tr5_pos_hi,ZH
    905c:	04 91       	lpm	r16, Z+

	lpm	r16,Z	;load sample
    905e:	10 91 39 0d 	lds	r17, 0x0D39
	lds r17,tr5_vol
    9062:	01 03       	mulsu	r16, r17

	mulsu r16,r17;(sample*mixing vol)
    9064:	00 24       	eor	r0, r0
	clr r0
    9066:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    9068:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    906a:	d0 1d       	adc	r29, r0
	adc r29,r0	;adjust mix buffer msb	
    906c:	00 24       	eor	r0, r0
;186	
	
	;final processing

	;clip
	clr r0
    906e:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,128	;> 127?
    9070:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0	
    9072:	0c f0       	brlt	.+2      	; 0x9076 <ch4_end+0x7a>
	brlt .+2
    9074:	cf e7       	ldi	r28, 0x7F	; 127
	ldi r28,127
    9076:	0a 94       	dec	r0
	
	dec r0
    9078:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,-128; <-128?
    907a:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0xff
    907c:	0c f4       	brge	.+2      	; 0x9080 <ch4_end+0x84>
	brge .+2
    907e:	c0 e8       	ldi	r28, 0x80	; 128
	ldi r28,-128
    9080:	c0 58       	subi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    9082:	c0 93 b3 00 	sts	0x00B3, r28
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    9086:	df 91       	pop	r29
	
	pop r29
    9088:	cf 91       	pop	r28
	pop r28
    908a:	2f 91       	pop	r18
	pop r18
    908c:	1f 91       	pop	r17
	pop r17
    908e:	0f 91       	pop	r16
	pop r16
    9090:	08 95       	ret

00009092 <SetMixerNote>:
	
	ret
    9092:	99 27       	eor	r25, r25
; r24: Channel
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
SetMixerNote:
	clr r25
    9094:	77 27       	eor	r23, r23
	clr r23
    9096:	83 30       	cpi	r24, 0x03	; 3
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9098:	09 f4       	brne	.+2      	; 0x909c <set_note_waves>
		brne set_note_waves		
    909a:	08 95       	ret

0000909c <set_note_waves>:
		ret
    909c:	e8 e0       	ldi	r30, 0x08	; 8
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    909e:	fe e9       	ldi	r31, 0x9E	; 158
	ldi ZH,hi8(steptable)
    90a0:	66 0f       	add	r22, r22
	lsl r22
    90a2:	77 1f       	adc	r23, r23
	rol r23
    90a4:	e6 0f       	add	r30, r22
	add ZL,r22
    90a6:	f7 1f       	adc	r31, r23
	adc ZH,r23	
    90a8:	a5 91       	lpm	r26, Z+

	lpm r26,Z+
    90aa:	b4 91       	lpm	r27, Z+
	lpm r27,Z
    90ac:	e1 e2       	ldi	r30, 0x21	; 33

	ldi ZL,lo8(mixerStruct)
    90ae:	fd e0       	ldi	r31, 0x0D	; 13
	ldi ZH,hi8(mixerStruct)
    90b0:	26 e0       	ldi	r18, 0x06	; 6
	ldi r18,CHANNEL_STRUCT_SIZE
    90b2:	28 9f       	mul	r18, r24
	mul r18,r24
    90b4:	e0 0d       	add	r30, r0
	add ZL,r0
    90b6:	f1 1d       	adc	r31, r1
	adc ZH,r1
    90b8:	a1 83       	std	Z+1, r26	; 0x01
	
	std Z+step_lo,r26
    90ba:	b2 83       	std	Z+2, r27	; 0x02
	std Z+step_hi,r27
    90bc:	11 24       	eor	r1, r1
	
	clr r1
    90be:	08 95       	ret

000090c0 <SetMixerNoiseParams>:
	

	ret
    90c0:	90 91 34 0d 	lds	r25, 0x0D34
;(C-call compatible)
; r24: noise divider
;*****************
SetMixerNoiseParams:
	;preserve wave type (7/15 bit)
	lds r25,tr4_params
    90c4:	91 70       	andi	r25, 0x01	; 1
	andi r25,1
    90c6:	88 0f       	add	r24, r24
	lsl r24
    90c8:	89 2b       	or	r24, r25
	or r24,r25
    90ca:	80 93 34 0d 	sts	0x0D34, r24

	sts tr4_params,r24	
    90ce:	08 95       	ret

000090d0 <SetMixerWave>:
	ret
    90d0:	99 27       	eor	r25, r25
; r23:r22 Waves channels: patch (0x00-0xfd) 
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
SetMixerWave:
	clr r25
    90d2:	77 27       	eor	r23, r23
	clr r23
    90d4:	e1 e2       	ldi	r30, 0x21	; 33

	ldi ZL,lo8(mixerStruct)
    90d6:	fd e0       	ldi	r31, 0x0D	; 13
	ldi ZH,hi8(mixerStruct)
    90d8:	26 e0       	ldi	r18, 0x06	; 6
	ldi r18,CHANNEL_STRUCT_SIZE
    90da:	28 9f       	mul	r18, r24
	mul r18,r24	
    90dc:	e0 0d       	add	r30, r0
	add ZL,r0
    90de:	f1 1d       	adc	r31, r1
	adc ZH,r1
    90e0:	6e 3f       	cpi	r22, 0xFE	; 254

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    90e2:	31 f4       	brne	.+12     	; 0x90f0 <smw1>
	brne smw1
    90e4:	60 91 34 0d 	lds	r22, 0x0D34
	lds r22,tr4_params
    90e8:	6e 7f       	andi	r22, 0xFE	; 254
	andi r22,0xfe;
    90ea:	60 93 34 0d 	sts	0x0D34, r22
	sts tr4_params,r22
    90ee:	0b c0       	rjmp	.+22     	; 0x9106 <esmw>

000090f0 <smw1>:
	rjmp esmw	
    90f0:	6f 3f       	cpi	r22, 0xFF	; 255
smw1:
	cpi r22,0xff	;15bit lfsr
    90f2:	31 f4       	brne	.+12     	; 0x9100 <smw2>
	brne smw2
    90f4:	60 91 34 0d 	lds	r22, 0x0D34
	lds r22,tr4_params
    90f8:	6e 6f       	ori	r22, 0xFE	; 254
	ori r22,0xfe;
    90fa:	60 93 34 0d 	sts	0x0D34, r22
	sts tr4_params,r22	
    90fe:	03 c0       	rjmp	.+6      	; 0x9106 <esmw>

00009100 <smw2>:
	rjmp esmw
    9100:	70 ea       	ldi	r23, 0xA0	; 160
smw2:
#endif

	ldi r23,hi8(waves)
    9102:	76 0f       	add	r23, r22
	add r23,r22
    9104:	75 83       	std	Z+5, r23	; 0x05

00009106 <esmw>:
	std Z+samplepos_hi,r23 ;store path No
    9106:	11 24       	eor	r1, r1

esmw:
	clr r1	
    9108:	08 95       	ret

0000910a <SetMixerVolume>:
	ret
    910a:	99 27       	eor	r25, r25
; (C-call compatible)
; r24 channel (0,1,2,3)
; r22 volume (0x00-0xff)
;***********************
SetMixerVolume:
	clr r25
    910c:	77 27       	eor	r23, r23
	clr r23
    910e:	e1 e2       	ldi	r30, 0x21	; 33

	ldi ZL,lo8(mixerStruct)
    9110:	fd e0       	ldi	r31, 0x0D	; 13
	ldi ZH,hi8(mixerStruct)
    9112:	26 e0       	ldi	r18, 0x06	; 6
	ldi r18,CHANNEL_STRUCT_SIZE
    9114:	28 9f       	mul	r18, r24
	mul r18,r24	
    9116:	e0 0d       	add	r30, r0
	add ZL,r0
    9118:	f1 1d       	adc	r31, r1
	adc ZH,r1
    911a:	60 83       	st	Z, r22
	std Z+vol,r22 ;store vol
    911c:	11 24       	eor	r1, r1

	clr r1	
    911e:	08 95       	ret

00009120 <CpuBufferWellAsm>:



.section .text
CpuBufferWellAsm:
mov ZL,r24;well pointer
    9120:	e8 2f       	mov	r30, r24
mov ZH,r25
    9122:	f9 2f       	mov	r31, r25
ldi XL,lo8(cpubuffer);cpu buffer
    9124:	a4 e4       	ldi	r26, 0x44	; 68
ldi XH,hi8(cpubuffer)
    9126:	bd e0       	ldi	r27, 0x0D	; 13
.rept 6*16
	ld r16,Z+
	st X+,r16
.endr
    9128:	01 91       	ld	r16, Z+
    912a:	0d 93       	st	X+, r16
    912c:	01 91       	ld	r16, Z+
    912e:	0d 93       	st	X+, r16
    9130:	01 91       	ld	r16, Z+
    9132:	0d 93       	st	X+, r16
    9134:	01 91       	ld	r16, Z+
    9136:	0d 93       	st	X+, r16
    9138:	01 91       	ld	r16, Z+
    913a:	0d 93       	st	X+, r16
    913c:	01 91       	ld	r16, Z+
    913e:	0d 93       	st	X+, r16
    9140:	01 91       	ld	r16, Z+
    9142:	0d 93       	st	X+, r16
    9144:	01 91       	ld	r16, Z+
    9146:	0d 93       	st	X+, r16
    9148:	01 91       	ld	r16, Z+
    914a:	0d 93       	st	X+, r16
    914c:	01 91       	ld	r16, Z+
    914e:	0d 93       	st	X+, r16
    9150:	01 91       	ld	r16, Z+
    9152:	0d 93       	st	X+, r16
    9154:	01 91       	ld	r16, Z+
    9156:	0d 93       	st	X+, r16
    9158:	01 91       	ld	r16, Z+
    915a:	0d 93       	st	X+, r16
    915c:	01 91       	ld	r16, Z+
    915e:	0d 93       	st	X+, r16
    9160:	01 91       	ld	r16, Z+
    9162:	0d 93       	st	X+, r16
    9164:	01 91       	ld	r16, Z+
    9166:	0d 93       	st	X+, r16
    9168:	01 91       	ld	r16, Z+
    916a:	0d 93       	st	X+, r16
    916c:	01 91       	ld	r16, Z+
    916e:	0d 93       	st	X+, r16
    9170:	01 91       	ld	r16, Z+
    9172:	0d 93       	st	X+, r16
    9174:	01 91       	ld	r16, Z+
    9176:	0d 93       	st	X+, r16
    9178:	01 91       	ld	r16, Z+
    917a:	0d 93       	st	X+, r16
    917c:	01 91       	ld	r16, Z+
    917e:	0d 93       	st	X+, r16
    9180:	01 91       	ld	r16, Z+
    9182:	0d 93       	st	X+, r16
    9184:	01 91       	ld	r16, Z+
    9186:	0d 93       	st	X+, r16
    9188:	01 91       	ld	r16, Z+
    918a:	0d 93       	st	X+, r16
    918c:	01 91       	ld	r16, Z+
    918e:	0d 93       	st	X+, r16
    9190:	01 91       	ld	r16, Z+
    9192:	0d 93       	st	X+, r16
    9194:	01 91       	ld	r16, Z+
    9196:	0d 93       	st	X+, r16
    9198:	01 91       	ld	r16, Z+
    919a:	0d 93       	st	X+, r16
    919c:	01 91       	ld	r16, Z+
    919e:	0d 93       	st	X+, r16
    91a0:	01 91       	ld	r16, Z+
    91a2:	0d 93       	st	X+, r16
    91a4:	01 91       	ld	r16, Z+
    91a6:	0d 93       	st	X+, r16
    91a8:	01 91       	ld	r16, Z+
    91aa:	0d 93       	st	X+, r16
    91ac:	01 91       	ld	r16, Z+
    91ae:	0d 93       	st	X+, r16
    91b0:	01 91       	ld	r16, Z+
    91b2:	0d 93       	st	X+, r16
    91b4:	01 91       	ld	r16, Z+
    91b6:	0d 93       	st	X+, r16
    91b8:	01 91       	ld	r16, Z+
    91ba:	0d 93       	st	X+, r16
    91bc:	01 91       	ld	r16, Z+
    91be:	0d 93       	st	X+, r16
    91c0:	01 91       	ld	r16, Z+
    91c2:	0d 93       	st	X+, r16
    91c4:	01 91       	ld	r16, Z+
    91c6:	0d 93       	st	X+, r16
    91c8:	01 91       	ld	r16, Z+
    91ca:	0d 93       	st	X+, r16
    91cc:	01 91       	ld	r16, Z+
    91ce:	0d 93       	st	X+, r16
    91d0:	01 91       	ld	r16, Z+
    91d2:	0d 93       	st	X+, r16
    91d4:	01 91       	ld	r16, Z+
    91d6:	0d 93       	st	X+, r16
    91d8:	01 91       	ld	r16, Z+
    91da:	0d 93       	st	X+, r16
    91dc:	01 91       	ld	r16, Z+
    91de:	0d 93       	st	X+, r16
    91e0:	01 91       	ld	r16, Z+
    91e2:	0d 93       	st	X+, r16
    91e4:	01 91       	ld	r16, Z+
    91e6:	0d 93       	st	X+, r16
    91e8:	01 91       	ld	r16, Z+
    91ea:	0d 93       	st	X+, r16
    91ec:	01 91       	ld	r16, Z+
    91ee:	0d 93       	st	X+, r16
    91f0:	01 91       	ld	r16, Z+
    91f2:	0d 93       	st	X+, r16
    91f4:	01 91       	ld	r16, Z+
    91f6:	0d 93       	st	X+, r16
    91f8:	01 91       	ld	r16, Z+
    91fa:	0d 93       	st	X+, r16
    91fc:	01 91       	ld	r16, Z+
    91fe:	0d 93       	st	X+, r16
    9200:	01 91       	ld	r16, Z+
    9202:	0d 93       	st	X+, r16
    9204:	01 91       	ld	r16, Z+
    9206:	0d 93       	st	X+, r16
    9208:	01 91       	ld	r16, Z+
    920a:	0d 93       	st	X+, r16
    920c:	01 91       	ld	r16, Z+
    920e:	0d 93       	st	X+, r16
    9210:	01 91       	ld	r16, Z+
    9212:	0d 93       	st	X+, r16
    9214:	01 91       	ld	r16, Z+
    9216:	0d 93       	st	X+, r16
    9218:	01 91       	ld	r16, Z+
    921a:	0d 93       	st	X+, r16
    921c:	01 91       	ld	r16, Z+
    921e:	0d 93       	st	X+, r16
    9220:	01 91       	ld	r16, Z+
    9222:	0d 93       	st	X+, r16
    9224:	01 91       	ld	r16, Z+
    9226:	0d 93       	st	X+, r16
    9228:	01 91       	ld	r16, Z+
    922a:	0d 93       	st	X+, r16
    922c:	01 91       	ld	r16, Z+
    922e:	0d 93       	st	X+, r16
    9230:	01 91       	ld	r16, Z+
    9232:	0d 93       	st	X+, r16
    9234:	01 91       	ld	r16, Z+
    9236:	0d 93       	st	X+, r16
    9238:	01 91       	ld	r16, Z+
    923a:	0d 93       	st	X+, r16
    923c:	01 91       	ld	r16, Z+
    923e:	0d 93       	st	X+, r16
    9240:	01 91       	ld	r16, Z+
    9242:	0d 93       	st	X+, r16
    9244:	01 91       	ld	r16, Z+
    9246:	0d 93       	st	X+, r16
    9248:	01 91       	ld	r16, Z+
    924a:	0d 93       	st	X+, r16
    924c:	01 91       	ld	r16, Z+
    924e:	0d 93       	st	X+, r16
    9250:	01 91       	ld	r16, Z+
    9252:	0d 93       	st	X+, r16
    9254:	01 91       	ld	r16, Z+
    9256:	0d 93       	st	X+, r16
    9258:	01 91       	ld	r16, Z+
    925a:	0d 93       	st	X+, r16
    925c:	01 91       	ld	r16, Z+
    925e:	0d 93       	st	X+, r16
    9260:	01 91       	ld	r16, Z+
    9262:	0d 93       	st	X+, r16
    9264:	01 91       	ld	r16, Z+
    9266:	0d 93       	st	X+, r16
    9268:	01 91       	ld	r16, Z+
    926a:	0d 93       	st	X+, r16
    926c:	01 91       	ld	r16, Z+
    926e:	0d 93       	st	X+, r16
    9270:	01 91       	ld	r16, Z+
    9272:	0d 93       	st	X+, r16
    9274:	01 91       	ld	r16, Z+
    9276:	0d 93       	st	X+, r16
    9278:	01 91       	ld	r16, Z+
    927a:	0d 93       	st	X+, r16
    927c:	01 91       	ld	r16, Z+
    927e:	0d 93       	st	X+, r16
    9280:	01 91       	ld	r16, Z+
    9282:	0d 93       	st	X+, r16
    9284:	01 91       	ld	r16, Z+
    9286:	0d 93       	st	X+, r16
    9288:	01 91       	ld	r16, Z+
    928a:	0d 93       	st	X+, r16
    928c:	01 91       	ld	r16, Z+
    928e:	0d 93       	st	X+, r16
    9290:	01 91       	ld	r16, Z+
    9292:	0d 93       	st	X+, r16
    9294:	01 91       	ld	r16, Z+
    9296:	0d 93       	st	X+, r16
    9298:	01 91       	ld	r16, Z+
    929a:	0d 93       	st	X+, r16
    929c:	01 91       	ld	r16, Z+
    929e:	0d 93       	st	X+, r16
    92a0:	01 91       	ld	r16, Z+
    92a2:	0d 93       	st	X+, r16
    92a4:	01 91       	ld	r16, Z+
    92a6:	0d 93       	st	X+, r16
ret
    92a8:	08 95       	ret

000092aa <CpuCheckLossAsm>:



CpuCheckLossAsm:
	ldi XL,lo8(cpubuffer);cpu buffer
    92aa:	a4 e4       	ldi	r26, 0x44	; 68
	ldi XH,hi8(cpubuffer)
    92ac:	bd e0       	ldi	r27, 0x0D	; 13
.rept 3*6
	ld r16,X+
	cpi r16,0
	brne CPULOSS
.endr
    92ae:	0d 91       	ld	r16, X+
    92b0:	00 30       	cpi	r16, 0x00	; 0
    92b2:	a9 f5       	brne	.+106    	; 0x931e <CPULOSS>
    92b4:	0d 91       	ld	r16, X+
    92b6:	00 30       	cpi	r16, 0x00	; 0
    92b8:	91 f5       	brne	.+100    	; 0x931e <CPULOSS>
    92ba:	0d 91       	ld	r16, X+
    92bc:	00 30       	cpi	r16, 0x00	; 0
    92be:	79 f5       	brne	.+94     	; 0x931e <CPULOSS>
    92c0:	0d 91       	ld	r16, X+
    92c2:	00 30       	cpi	r16, 0x00	; 0
    92c4:	61 f5       	brne	.+88     	; 0x931e <CPULOSS>
    92c6:	0d 91       	ld	r16, X+
    92c8:	00 30       	cpi	r16, 0x00	; 0
    92ca:	49 f5       	brne	.+82     	; 0x931e <CPULOSS>
    92cc:	0d 91       	ld	r16, X+
    92ce:	00 30       	cpi	r16, 0x00	; 0
    92d0:	31 f5       	brne	.+76     	; 0x931e <CPULOSS>
    92d2:	0d 91       	ld	r16, X+
    92d4:	00 30       	cpi	r16, 0x00	; 0
    92d6:	19 f5       	brne	.+70     	; 0x931e <CPULOSS>
    92d8:	0d 91       	ld	r16, X+
    92da:	00 30       	cpi	r16, 0x00	; 0
    92dc:	01 f5       	brne	.+64     	; 0x931e <CPULOSS>
    92de:	0d 91       	ld	r16, X+
    92e0:	00 30       	cpi	r16, 0x00	; 0
    92e2:	e9 f4       	brne	.+58     	; 0x931e <CPULOSS>
    92e4:	0d 91       	ld	r16, X+
    92e6:	00 30       	cpi	r16, 0x00	; 0
    92e8:	d1 f4       	brne	.+52     	; 0x931e <CPULOSS>
    92ea:	0d 91       	ld	r16, X+
    92ec:	00 30       	cpi	r16, 0x00	; 0
    92ee:	b9 f4       	brne	.+46     	; 0x931e <CPULOSS>
    92f0:	0d 91       	ld	r16, X+
    92f2:	00 30       	cpi	r16, 0x00	; 0
    92f4:	a1 f4       	brne	.+40     	; 0x931e <CPULOSS>
    92f6:	0d 91       	ld	r16, X+
    92f8:	00 30       	cpi	r16, 0x00	; 0
    92fa:	89 f4       	brne	.+34     	; 0x931e <CPULOSS>
    92fc:	0d 91       	ld	r16, X+
    92fe:	00 30       	cpi	r16, 0x00	; 0
    9300:	71 f4       	brne	.+28     	; 0x931e <CPULOSS>
    9302:	0d 91       	ld	r16, X+
    9304:	00 30       	cpi	r16, 0x00	; 0
    9306:	59 f4       	brne	.+22     	; 0x931e <CPULOSS>
    9308:	0d 91       	ld	r16, X+
    930a:	00 30       	cpi	r16, 0x00	; 0
    930c:	41 f4       	brne	.+16     	; 0x931e <CPULOSS>
    930e:	0d 91       	ld	r16, X+
    9310:	00 30       	cpi	r16, 0x00	; 0
    9312:	29 f4       	brne	.+10     	; 0x931e <CPULOSS>
    9314:	0d 91       	ld	r16, X+
    9316:	00 30       	cpi	r16, 0x00	; 0
    9318:	11 f4       	brne	.+4      	; 0x931e <CPULOSS>
	clr r24
    931a:	88 27       	eor	r24, r24
	ret
    931c:	08 95       	ret

0000931e <CPULOSS>:
CPULOSS:
	ldi r24,1
    931e:	81 e0       	ldi	r24, 0x01	; 1
	ret
    9320:	08 95       	ret

00009322 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    9322:	80 93 ec 0c 	sts	0x0CEC, r24
	sts tile_table_hi,r25	
    9326:	90 93 ed 0c 	sts	0x0CED, r25
	ret
    932a:	08 95       	ret

0000932c <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,vsync_flag
    932c:	80 91 f0 0c 	lds	r24, 0x0CF0
	ret
    9330:	08 95       	ret

00009332 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	clr r1
    9332:	11 24       	eor	r1, r1
	sts vsync_flag,r1
    9334:	10 92 f0 0c 	sts	0x0CF0, r1
	ret
    9338:	08 95       	ret

0000933a <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    933a:	88 23       	and	r24, r24
	brne rj_p2
    933c:	29 f4       	brne	.+10     	; 0x9348 <rj_p2>
		
	lds r24,joypad1_status_lo
    933e:	80 91 f9 0c 	lds	r24, 0x0CF9
	lds r25,joypad1_status_lo+1
    9342:	90 91 fa 0c 	lds	r25, 0x0CFA
	ret
    9346:	08 95       	ret

00009348 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    9348:	80 91 fd 0c 	lds	r24, 0x0CFD
	lds r25,joypad2_status_lo+1	
    934c:	90 91 fe 0c 	lds	r25, 0x0CFE

	ret
    9350:	08 95       	ret

00009352 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9352:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    9354:	fe cf       	rjmp	.-4      	; 0x9352 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    9356:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    9358:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    935a:	60 bd       	out	0x20, r22	; 32
   cli
    935c:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    935e:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    9360:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    9362:	78 94       	sei
   ret
    9364:	08 95       	ret

00009366 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9366:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    9368:	fe cf       	rjmp	.-4      	; 0x9366 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    936a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    936c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    936e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    9370:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    9372:	80 b5       	in	r24, 0x20	; 32
   sei
    9374:	78 94       	sei
   ret
    9376:	08 95       	ret

00009378 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    9378:	12 9a       	sbi	0x02, 2	; 2
			WaitUs(1);
		}else{
			Wait200ns();
		}	
	#else
		Wait200ns();
    937a:	c8 95       	lpm
    937c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    937e:	12 98       	cbi	0x02, 2	; 2
    9380:	20 e0       	ldi	r18, 0x00	; 0
    9382:	30 e0       	ldi	r19, 0x00	; 0
    9384:	40 e0       	ldi	r20, 0x00	; 0
    9386:	80 e0       	ldi	r24, 0x00	; 0
    9388:	90 e0       	ldi	r25, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    938a:	96 95       	lsr	r25
    938c:	87 95       	ror	r24
		p2ButtonsLo>>=1;
    938e:	36 95       	lsr	r19
    9390:	27 95       	ror	r18
	
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    9392:	13 98       	cbi	0x02, 3	; 2
				WaitUs(5);
			}else{
				Wait200ns();
			}	
		#else
			Wait200ns();
    9394:	c8 95       	lpm
    9396:	c8 95       	lpm
		#endif
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    9398:	00 9b       	sbis	0x00, 0	; 0
    939a:	90 68       	ori	r25, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    939c:	01 9b       	sbis	0x00, 1	; 0
    939e:	30 68       	ori	r19, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    93a0:	13 9a       	sbi	0x02, 3	; 2
				WaitUs(5);
			}else{
				Wait200ns();
			}	
		#else
			Wait200ns();
    93a2:	c8 95       	lpm
    93a4:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    93a6:	4f 5f       	subi	r20, 0xFF	; 255
    93a8:	40 31       	cpi	r20, 0x10	; 16
    93aa:	79 f7       	brne	.-34     	; 0x938a <ReadButtons+0x12>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    93ac:	90 93 fa 0c 	sts	0x0CFA, r25
    93b0:	80 93 f9 0c 	sts	0x0CF9, r24
		joypad2_status_lo=p2ButtonsLo;
    93b4:	30 93 fe 0c 	sts	0x0CFE, r19
    93b8:	20 93 fd 0c 	sts	0x0CFD, r18
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    93bc:	80 91 f9 0c 	lds	r24, 0x0CF9
    93c0:	90 91 fa 0c 	lds	r25, 0x0CFA
    93c4:	0f 97       	sbiw	r24, 0x0f	; 15
    93c6:	31 f0       	breq	.+12     	; 0x93d4 <ReadButtons+0x5c>
    93c8:	80 91 fd 0c 	lds	r24, 0x0CFD
    93cc:	90 91 fe 0c 	lds	r25, 0x0CFE
    93d0:	0f 97       	sbiw	r24, 0x0f	; 15
    93d2:	61 f4       	brne	.+24     	; 0x93ec <ReadButtons+0x74>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    93d4:	28 e0       	ldi	r18, 0x08	; 8
    93d6:	88 e1       	ldi	r24, 0x18	; 24
    93d8:	90 e0       	ldi	r25, 0x00	; 0
    93da:	0f b6       	in	r0, 0x3f	; 63
    93dc:	f8 94       	cli
    93de:	a8 95       	wdr
    93e0:	80 93 60 00 	sts	0x0060, r24
    93e4:	0f be       	out	0x3f, r0	; 63
    93e6:	20 93 60 00 	sts	0x0060, r18
    93ea:	ff cf       	rjmp	.-2      	; 0x93ea <ReadButtons+0x72>
    93ec:	08 95       	ret

000093ee <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    93ee:	10 92 a5 0d 	sts	0x0DA5, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    93f2:	00 99       	sbic	0x00, 0	; 0
    93f4:	03 c0       	rjmp	.+6      	; 0x93fc <ReadControllers+0xe>
    93f6:	81 e0       	ldi	r24, 0x01	; 1
    93f8:	80 93 a5 0d 	sts	0x0DA5, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    93fc:	01 99       	sbic	0x00, 1	; 0
    93fe:	05 c0       	rjmp	.+10     	; 0x940a <ReadControllers+0x1c>
    9400:	80 91 a5 0d 	lds	r24, 0x0DA5
    9404:	82 60       	ori	r24, 0x02	; 2
    9406:	80 93 a5 0d 	sts	0x0DA5, r24
			
	//read the standard buttons
	ReadButtons();
}
    940a:	b6 cf       	rjmp	.-148    	; 0x9378 <ReadButtons>

0000940c <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    940c:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    940e:	80 e0       	ldi	r24, 0x00	; 0
    9410:	90 e0       	ldi	r25, 0x00	; 0
    9412:	a9 df       	rcall	.-174    	; 0x9366 <ReadEeprom>
    9414:	18 2f       	mov	r17, r24
    9416:	81 e0       	ldi	r24, 0x01	; 1
    9418:	90 e0       	ldi	r25, 0x00	; 0
    941a:	a5 df       	rcall	.-182    	; 0x9366 <ReadEeprom>
    941c:	90 e0       	ldi	r25, 0x00	; 0
    941e:	38 2f       	mov	r19, r24
    9420:	20 e0       	ldi	r18, 0x00	; 0
    9422:	21 0f       	add	r18, r17
    9424:	31 1d       	adc	r19, r1
    9426:	2a 55       	subi	r18, 0x5A	; 90
    9428:	35 45       	sbci	r19, 0x55	; 85
    942a:	09 f4       	brne	.+2      	; 0x942e <isEepromFormatted+0x22>
    942c:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    942e:	89 2f       	mov	r24, r25
    9430:	1f 91       	pop	r17
    9432:	08 95       	ret

00009434 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    9434:	cf 93       	push	r28
    9436:	df 93       	push	r29
    9438:	c0 e0       	ldi	r28, 0x00	; 0
    943a:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    943c:	fe 01       	movw	r30, r28
    943e:	e0 59       	subi	r30, 0x90	; 144
    9440:	ff 4f       	sbci	r31, 0xFF	; 255
    9442:	e4 91       	lpm	r30, Z+
    9444:	ce 01       	movw	r24, r28
    9446:	6e 2f       	mov	r22, r30
    9448:	84 df       	rcall	.-248    	; 0x9352 <WriteEeprom>
    944a:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    944c:	c0 32       	cpi	r28, 0x20	; 32
    944e:	d1 05       	cpc	r29, r1
    9450:	a9 f7       	brne	.-22     	; 0x943c <FormatEeprom+0x8>
    9452:	c0 e2       	ldi	r28, 0x20	; 32
    9454:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    9456:	ce 01       	movw	r24, r28
    9458:	6f ef       	ldi	r22, 0xFF	; 255
    945a:	7b df       	rcall	.-266    	; 0x9352 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    945c:	ce 01       	movw	r24, r28
    945e:	01 96       	adiw	r24, 0x01	; 1
    9460:	6f ef       	ldi	r22, 0xFF	; 255
    9462:	77 df       	rcall	.-274    	; 0x9352 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    9464:	a0 96       	adiw	r28, 0x20	; 32
    9466:	88 e0       	ldi	r24, 0x08	; 8
    9468:	c0 30       	cpi	r28, 0x00	; 0
    946a:	d8 07       	cpc	r29, r24
    946c:	a1 f7       	brne	.-24     	; 0x9456 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    946e:	df 91       	pop	r29
    9470:	cf 91       	pop	r28
    9472:	08 95       	ret

00009474 <SetSongTempo>:

#if SONGTEMPO == 1
int songTempo;

void SetSongTempo(int t){
	songTempo = t;
    9474:	90 93 1e 0e 	sts	0x0E1E, r25
    9478:	80 93 1d 0e 	sts	0x0E1D, r24
}
    947c:	08 95       	ret

0000947e <PatchCommand00>:
#endif
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    947e:	fc 01       	movw	r30, r24
    9480:	45 87       	std	Z+13, r20	; 0x0d
}
    9482:	08 95       	ret

00009484 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    9484:	81 e0       	ldi	r24, 0x01	; 1
    9486:	91 e0       	ldi	r25, 0x01	; 1
    9488:	90 93 36 0d 	sts	0x0D36, r25
    948c:	80 93 35 0d 	sts	0x0D35, r24
		mixer.channels.type.noise.params=param;
    9490:	40 93 34 0d 	sts	0x0D34, r20
	#endif
}
    9494:	08 95       	ret

00009496 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    9496:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    9498:	80 81       	ld	r24, Z
    949a:	8f 75       	andi	r24, 0x5F	; 95
    949c:	80 83       	st	Z, r24
}
    949e:	08 95       	ret

000094a0 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    94a0:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    94a2:	80 81       	ld	r24, Z
    94a4:	80 64       	ori	r24, 0x40	; 64
    94a6:	80 83       	st	Z, r24
}
    94a8:	08 95       	ret

000094aa <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    94aa:	fc 01       	movw	r30, r24
    94ac:	44 87       	std	Z+12, r20	; 0x0c
}
    94ae:	08 95       	ret

000094b0 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    94b0:	fc 01       	movw	r30, r24
    94b2:	47 83       	std	Z+7, r20	; 0x07
}
    94b4:	08 95       	ret

000094b6 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    94b6:	fc 01       	movw	r30, r24
    94b8:	40 87       	std	Z+8, r20	; 0x08
}
    94ba:	08 95       	ret

000094bc <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    94bc:	1f 93       	push	r17
    94be:	cf 93       	push	r28
    94c0:	df 93       	push	r29
    94c2:	ec 01       	movw	r28, r24
    94c4:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    94c6:	89 81       	ldd	r24, Y+1	; 0x01
    94c8:	90 e0       	ldi	r25, 0x00	; 0
    94ca:	fc 01       	movw	r30, r24
    94cc:	ee 0f       	add	r30, r30
    94ce:	ff 1f       	adc	r31, r31
    94d0:	e8 5f       	subi	r30, 0xF8	; 248
    94d2:	f1 46       	sbci	r31, 0x61	; 97
    94d4:	25 91       	lpm	r18, Z+
    94d6:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    94d8:	e4 2f       	mov	r30, r20
    94da:	ff 27       	eor	r31, r31
    94dc:	e7 fd       	sbrc	r30, 7
    94de:	f0 95       	com	r31
    94e0:	e8 0f       	add	r30, r24
    94e2:	f9 1f       	adc	r31, r25
    94e4:	ee 0f       	add	r30, r30
    94e6:	ff 1f       	adc	r31, r31
    94e8:	e8 5f       	subi	r30, 0xF8	; 248
    94ea:	f1 46       	sbci	r31, 0x61	; 97
    94ec:	85 91       	lpm	r24, Z+
    94ee:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    94f0:	60 91 ad 0d 	lds	r22, 0x0DAD
    94f4:	82 1b       	sub	r24, r18
    94f6:	93 0b       	sbc	r25, r19
    94f8:	70 e0       	ldi	r23, 0x00	; 0
    94fa:	0e 94 c8 73 	call	0xe790	; 0xe790 <__divmodhi4>
    94fe:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    9500:	61 15       	cp	r22, r1
    9502:	71 05       	cpc	r23, r1
    9504:	11 f4       	brne	.+4      	; 0x950a <PatchCommand11+0x4e>
    9506:	21 e0       	ldi	r18, 0x01	; 1
    9508:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    950a:	81 2f       	mov	r24, r17
    950c:	90 e0       	ldi	r25, 0x00	; 0
    950e:	fc 01       	movw	r30, r24
    9510:	ee 0f       	add	r30, r30
    9512:	ff 1f       	adc	r31, r31
    9514:	e8 0f       	add	r30, r24
    9516:	f9 1f       	adc	r31, r25
    9518:	ee 0f       	add	r30, r30
    951a:	ff 1f       	adc	r31, r31
    951c:	ef 5d       	subi	r30, 0xDF	; 223
    951e:	f2 4f       	sbci	r31, 0xF2	; 242
    9520:	81 81       	ldd	r24, Z+1	; 0x01
    9522:	92 81       	ldd	r25, Z+2	; 0x02
    9524:	82 0f       	add	r24, r18
    9526:	93 1f       	adc	r25, r19
    9528:	92 83       	std	Z+2, r25	; 0x02
    952a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    952c:	3b 83       	std	Y+3, r19	; 0x03
    952e:	2a 83       	std	Y+2, r18	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    9530:	88 81       	ld	r24, Y
    9532:	88 60       	ori	r24, 0x08	; 8
    9534:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    9536:	89 81       	ldd	r24, Y+1	; 0x01
    9538:	84 0f       	add	r24, r20
    953a:	8c 83       	std	Y+4, r24	; 0x04
}
    953c:	df 91       	pop	r29
    953e:	cf 91       	pop	r28
    9540:	1f 91       	pop	r17
    9542:	08 95       	ret

00009544 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    9544:	40 93 ad 0d 	sts	0x0DAD, r20
}
    9548:	08 95       	ret

0000954a <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    954a:	90 93 19 0e 	sts	0x0E19, r25
    954e:	80 93 18 0e 	sts	0x0E18, r24

	masterVolume=DEFAULT_MASTER_VOL;
    9552:	8f e6       	ldi	r24, 0x6F	; 111
    9554:	80 93 1f 0e 	sts	0x0E1F, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    9558:	10 92 a4 0d 	sts	0x0DA4, r1
    955c:	e8 ea       	ldi	r30, 0xA8	; 168
    955e:	fd e0       	ldi	r31, 0x0D	; 13

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9560:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    9562:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    9564:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    9566:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    9568:	13 86       	std	Z+11, r1	; 0x0b
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    956a:	81 87       	std	Z+9, r24	; 0x09
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    956c:	82 87       	std	Z+10, r24	; 0x0a
		tracks[t].patchNo=DEFAULT_PATCH;
    956e:	16 86       	std	Z+14, r1	; 0x0e
		tracks[t].tremoloRate=24; //~6hz
    9570:	20 87       	std	Z+8, r18	; 0x08
		tracks[t].slideSpeed=0x10;
    9572:	95 83       	std	Z+5, r25	; 0x05
    9574:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    9576:	3e e0       	ldi	r19, 0x0E	; 14
    9578:	e6 31       	cpi	r30, 0x16	; 22
    957a:	f3 07       	cpc	r31, r19
    957c:	a1 f7       	brne	.-24     	; 0x9566 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    957e:	08 95       	ret

00009580 <StartSong>:

void StartSong(const char *midiSong){
    9580:	9c 01       	movw	r18, r24
    9582:	e8 ea       	ldi	r30, 0xA8	; 168
    9584:	fd e0       	ldi	r31, 0x0D	; 13
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    9586:	80 81       	ld	r24, Z
    9588:	8f 77       	andi	r24, 0x7F	; 127
    958a:	80 83       	st	Z, r24
    958c:	76 96       	adiw	r30, 0x16	; 22
	}

}

void StartSong(const char *midiSong){
	for(unsigned char t=0;t<CHANNELS;t++){
    958e:	8e e0       	ldi	r24, 0x0E	; 14
    9590:	e6 31       	cpi	r30, 0x16	; 22
    9592:	f8 07       	cpc	r31, r24
    9594:	c1 f7       	brne	.-16     	; 0x9586 <StartSong+0x6>
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
	}

	songPos=midiSong+1; //skip first delta-time
    9596:	c9 01       	movw	r24, r18
    9598:	01 96       	adiw	r24, 0x01	; 1
    959a:	90 93 23 0e 	sts	0x0E23, r25
    959e:	80 93 22 0e 	sts	0x0E22, r24
	songStart=midiSong+1;//skip first delta-time
    95a2:	90 93 a7 0d 	sts	0x0DA7, r25
    95a6:	80 93 a6 0d 	sts	0x0DA6, r24
	loopStart=midiSong+1;
    95aa:	90 93 25 0e 	sts	0x0E25, r25
    95ae:	80 93 24 0e 	sts	0x0E24, r24
	nextDeltaTime=0;
    95b2:	10 92 21 0e 	sts	0x0E21, r1
    95b6:	10 92 20 0e 	sts	0x0E20, r1
	currDeltaTime=0;
    95ba:	10 92 17 0e 	sts	0x0E17, r1
    95be:	10 92 16 0e 	sts	0x0E16, r1
	lastStatus=0;
    95c2:	10 92 1a 0e 	sts	0x0E1A, r1
	playSong=true;
    95c6:	81 e0       	ldi	r24, 0x01	; 1
    95c8:	80 93 a4 0d 	sts	0x0DA4, r24
	absoluteTime=0;
    95cc:	10 92 1c 0e 	sts	0x0E1C, r1
    95d0:	10 92 1b 0e 	sts	0x0E1B, r1

	
}
    95d4:	08 95       	ret

000095d6 <ResumeSong>:
	playSong=false;
}


void ResumeSong(){
	playSong=true;
    95d6:	81 e0       	ldi	r24, 0x01	; 1
    95d8:	80 93 a4 0d 	sts	0x0DA4, r24
}
    95dc:	08 95       	ret

000095de <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    95de:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    95e0:	ed 91       	ld	r30, X+
    95e2:	fc 91       	ld	r31, X
    95e4:	11 97       	sbiw	r26, 0x01	; 1
    95e6:	af 01       	movw	r20, r30
    95e8:	4f 5f       	subi	r20, 0xFF	; 255
    95ea:	5f 4f       	sbci	r21, 0xFF	; 255
    95ec:	11 96       	adiw	r26, 0x01	; 1
    95ee:	5c 93       	st	X, r21
    95f0:	4e 93       	st	-X, r20
    95f2:	e4 91       	lpm	r30, Z+
    95f4:	2e 2f       	mov	r18, r30
    95f6:	30 e0       	ldi	r19, 0x00	; 0
    95f8:	e7 ff       	sbrs	r30, 7
    95fa:	13 c0       	rjmp	.+38     	; 0x9622 <ReadVarLen+0x44>
    {
       value &= 0x7F;
    95fc:	2f 77       	andi	r18, 0x7F	; 127
    95fe:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    9600:	36 95       	lsr	r19
    9602:	32 2f       	mov	r19, r18
    9604:	22 27       	eor	r18, r18
    9606:	37 95       	ror	r19
    9608:	27 95       	ror	r18
    960a:	fa 01       	movw	r30, r20
    960c:	4f 5f       	subi	r20, 0xFF	; 255
    960e:	5f 4f       	sbci	r21, 0xFF	; 255
    9610:	e4 91       	lpm	r30, Z+
    9612:	8e 2f       	mov	r24, r30
    9614:	8f 77       	andi	r24, 0x7F	; 127
    9616:	28 0f       	add	r18, r24
    9618:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    961a:	e7 fd       	sbrc	r30, 7
    961c:	f1 cf       	rjmp	.-30     	; 0x9600 <ReadVarLen+0x22>
    961e:	4d 93       	st	X+, r20
    9620:	5c 93       	st	X, r21
    }


    return value;
}
    9622:	c9 01       	movw	r24, r18
    9624:	08 95       	ret

00009626 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    9626:	80 93 1f 0e 	sts	0x0E1F, r24
}
    962a:	08 95       	ret

0000962c <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    962c:	ff 92       	push	r15
    962e:	0f 93       	push	r16
    9630:	1f 93       	push	r17
    9632:	8c 01       	movw	r16, r24
    9634:	86 2f       	mov	r24, r22
    9636:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    9638:	64 2f       	mov	r22, r20
    963a:	2b dd       	rcall	.-1450   	; 0x9092 <SetMixerNote>
	track->note=param;
    963c:	f8 01       	movw	r30, r16
    963e:	f1 82       	std	Z+1, r15	; 0x01
}
    9640:	1f 91       	pop	r17
    9642:	0f 91       	pop	r16
    9644:	ff 90       	pop	r15
    9646:	08 95       	ret

00009648 <PatchCommand04>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    9648:	fc 01       	movw	r30, r24
    964a:	86 2f       	mov	r24, r22
	track->note-=param;
    964c:	61 81       	ldd	r22, Z+1	; 0x01
    964e:	64 1b       	sub	r22, r20
    9650:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
}
    9652:	1f cd       	rjmp	.-1474   	; 0x9092 <SetMixerNote>

00009654 <PatchCommand03>:
	SetMixerWave(trackNo,param);
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    9654:	fc 01       	movw	r30, r24
    9656:	86 2f       	mov	r24, r22
	track->note+=param;
    9658:	91 81       	ldd	r25, Z+1	; 0x01
    965a:	49 0f       	add	r20, r25
    965c:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    965e:	64 2f       	mov	r22, r20
}
    9660:	18 cd       	rjmp	.-1488   	; 0x9092 <SetMixerNote>

00009662 <TriggerCommon>:
}




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    9662:	ef 92       	push	r14
    9664:	ff 92       	push	r15
    9666:	0f 93       	push	r16
    9668:	1f 93       	push	r17
    966a:	cf 93       	push	r28
    966c:	df 93       	push	r29
    966e:	18 2f       	mov	r17, r24
    9670:	f6 2e       	mov	r15, r22
    9672:	02 2f       	mov	r16, r18
	struct TrackStruct* track=&tracks[channel];
    9674:	86 e1       	ldi	r24, 0x16	; 22
    9676:	18 9f       	mul	r17, r24
    9678:	e0 01       	movw	r28, r0
    967a:	11 24       	eor	r1, r1
    967c:	c8 55       	subi	r28, 0x58	; 88
    967e:	d2 4f       	sbci	r29, 0xF2	; 242
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    9680:	ee 24       	eor	r14, r14
    9682:	88 81       	ld	r24, Y
    9684:	87 ff       	sbrs	r24, 7
    9686:	02 c0       	rjmp	.+4      	; 0x968c <TriggerCommon+0x2a>
    9688:	ee 24       	eor	r14, r14
    968a:	e3 94       	inc	r14

	track->patchCurrDeltaTime=0;
    968c:	1a 8a       	std	Y+18, r1	; 0x12
	track->envelopeStep=0; 
    968e:	1d 86       	std	Y+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    9690:	9f ef       	ldi	r25, 0xFF	; 255
    9692:	9c 87       	std	Y+12, r25	; 0x0c
	track->noteVol=volume;
    9694:	4b 87       	std	Y+11, r20	; 0x0b
	track->patchPlayingTime=0;
    9696:	1b 8a       	std	Y+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    9698:	88 81       	ld	r24, Y
    969a:	80 62       	ori	r24, 0x20	; 32
    969c:	87 7b       	andi	r24, 0xB7	; 183
    969e:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    96a0:	1f 82       	std	Y+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    96a2:	99 87       	std	Y+9, r25	; 0x09
	track->note=note;
    96a4:	09 83       	std	Y+1, r16	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    96a6:	13 30       	cpi	r17, 0x03	; 3
    96a8:	69 f4       	brne	.+26     	; 0x96c4 <TriggerCommon+0x62>
			//noise channel		
			if(!isFx) patch=note;			
    96aa:	ee 20       	and	r14, r14
    96ac:	09 f4       	brne	.+2      	; 0x96b0 <TriggerCommon+0x4e>
    96ae:	f0 2e       	mov	r15, r16
			mixer.channels.type.noise.barrel=0x0101;				
    96b0:	81 e0       	ldi	r24, 0x01	; 1
    96b2:	91 e0       	ldi	r25, 0x01	; 1
    96b4:	90 93 36 0d 	sts	0x0D36, r25
    96b8:	80 93 35 0d 	sts	0x0D35, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    96bc:	81 e0       	ldi	r24, 0x01	; 1
    96be:	80 93 34 0d 	sts	0x0D34, r24
    96c2:	32 c0       	rjmp	.+100    	; 0x9728 <TriggerCommon+0xc6>
		
		}else if(channel==4){
    96c4:	14 30       	cpi	r17, 0x04	; 4
    96c6:	51 f5       	brne	.+84     	; 0x971c <TriggerCommon+0xba>

			//PCM channel					
			mixer.channels.type.pcm.positionFrac=0;
    96c8:	10 92 3c 0d 	sts	0x0D3C, r1
			const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    96cc:	89 e0       	ldi	r24, 0x09	; 9
    96ce:	f8 9e       	mul	r15, r24
    96d0:	c0 01       	movw	r24, r0
    96d2:	11 24       	eor	r1, r1
    96d4:	20 91 18 0e 	lds	r18, 0x0E18
    96d8:	30 91 19 0e 	lds	r19, 0x0E19
    96dc:	28 0f       	add	r18, r24
    96de:	39 1f       	adc	r19, r25
    96e0:	f9 01       	movw	r30, r18
    96e2:	31 96       	adiw	r30, 0x01	; 1
    96e4:	45 91       	lpm	r20, Z+
    96e6:	54 91       	lpm	r21, Z+
			mixer.channels.type.pcm.position=pos;
    96e8:	50 93 3e 0d 	sts	0x0D3E, r21
    96ec:	40 93 3d 0d 	sts	0x0D3D, r20
			mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
    96f0:	f9 01       	movw	r30, r18
    96f2:	35 96       	adiw	r30, 0x05	; 5
    96f4:	85 91       	lpm	r24, Z+
    96f6:	94 91       	lpm	r25, Z+
    96f8:	84 0f       	add	r24, r20
    96fa:	95 1f       	adc	r25, r21
    96fc:	90 93 40 0d 	sts	0x0D40, r25
    9700:	80 93 3f 0d 	sts	0x0D3F, r24
			mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    9704:	f9 01       	movw	r30, r18
    9706:	37 96       	adiw	r30, 0x07	; 7
    9708:	85 91       	lpm	r24, Z+
    970a:	94 91       	lpm	r25, Z+
    970c:	48 0f       	add	r20, r24
    970e:	59 1f       	adc	r21, r25
    9710:	50 93 42 0d 	sts	0x0D42, r21
    9714:	40 93 41 0d 	sts	0x0D41, r20
			SetMixerNote(channel,note);
    9718:	84 e0       	ldi	r24, 0x04	; 4
    971a:	04 c0       	rjmp	.+8      	; 0x9724 <TriggerCommon+0xc2>
	
		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    971c:	81 2f       	mov	r24, r17
    971e:	60 e0       	ldi	r22, 0x00	; 0
    9720:	d7 dc       	rcall	.-1618   	; 0x90d0 <SetMixerWave>
			SetMixerNote(channel,note);
    9722:	81 2f       	mov	r24, r17
    9724:	60 2f       	mov	r22, r16
    9726:	b5 dc       	rcall	.-1686   	; 0x9092 <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    9728:	ee 20       	and	r14, r14
    972a:	11 f0       	breq	.+4      	; 0x9730 <TriggerCommon+0xce>
		track->fxPatchNo=patch;
    972c:	ff 86       	std	Y+15, r15	; 0x0f
    972e:	01 c0       	rjmp	.+2      	; 0x9732 <TriggerCommon+0xd0>
	}else{
		track->patchNo=patch;	
    9730:	fe 86       	std	Y+14, r15	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    9732:	89 e0       	ldi	r24, 0x09	; 9
    9734:	f8 9e       	mul	r15, r24
    9736:	c0 01       	movw	r24, r0
    9738:	11 24       	eor	r1, r1
    973a:	e0 91 18 0e 	lds	r30, 0x0E18
    973e:	f0 91 19 0e 	lds	r31, 0x0E19
    9742:	e8 0f       	add	r30, r24
    9744:	f9 1f       	adc	r31, r25
    9746:	33 96       	adiw	r30, 0x03	; 3
    9748:	25 91       	lpm	r18, Z+
    974a:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    974c:	21 15       	cp	r18, r1
    974e:	31 05       	cpc	r19, r1
    9750:	19 f4       	brne	.+6      	; 0x9758 <TriggerCommon+0xf6>
		track->patchCommandStreamPos=NULL;
    9752:	1d 8a       	std	Y+21, r1	; 0x15
    9754:	1c 8a       	std	Y+20, r1	; 0x14
    9756:	07 c0       	rjmp	.+14     	; 0x9766 <TriggerCommon+0x104>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    9758:	f9 01       	movw	r30, r18
    975a:	84 91       	lpm	r24, Z+
    975c:	89 8b       	std	Y+17, r24	; 0x11
		track->patchCommandStreamPos=pos;
    975e:	2f 5f       	subi	r18, 0xFF	; 255
    9760:	3f 4f       	sbci	r19, 0xFF	; 255
    9762:	3d 8b       	std	Y+21, r19	; 0x15
    9764:	2c 8b       	std	Y+20, r18	; 0x14
	}

}
    9766:	cd b7       	in	r28, 0x3d	; 61
    9768:	de b7       	in	r29, 0x3e	; 62
    976a:	e6 e0       	ldi	r30, 0x06	; 6
    976c:	0c 94 25 74 	jmp	0xe84a	; 0xe84a <__epilogue_restores__+0x18>

00009770 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    9770:	58 2f       	mov	r21, r24
    9772:	74 2f       	mov	r23, r20

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    9774:	a8 2f       	mov	r26, r24
    9776:	b0 e0       	ldi	r27, 0x00	; 0
    9778:	86 e1       	ldi	r24, 0x16	; 22
    977a:	90 e0       	ldi	r25, 0x00	; 0
    977c:	a8 9f       	mul	r26, r24
    977e:	f0 01       	movw	r30, r0
    9780:	a9 9f       	mul	r26, r25
    9782:	f0 0d       	add	r31, r0
    9784:	b8 9f       	mul	r27, r24
    9786:	f0 0d       	add	r31, r0
    9788:	11 24       	eor	r1, r1
    978a:	e8 55       	subi	r30, 0x58	; 88
    978c:	f2 4f       	sbci	r31, 0xF2	; 242
    978e:	30 81       	ld	r19, Z
    9790:	35 ff       	sbrs	r19, 5
    9792:	02 c0       	rjmp	.+4      	; 0x9798 <TriggerNote+0x28>
    9794:	37 fd       	sbrc	r19, 7
    9796:	25 c0       	rjmp	.+74     	; 0x97e2 <TriggerNote+0x72>
			
		if(volume==0){ //note-off received
    9798:	22 23       	and	r18, r18
    979a:	91 f4       	brne	.+36     	; 0x97c0 <TriggerNote+0x50>
			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    979c:	86 e1       	ldi	r24, 0x16	; 22
    979e:	90 e0       	ldi	r25, 0x00	; 0
    97a0:	a8 9f       	mul	r26, r24
    97a2:	f0 01       	movw	r30, r0
    97a4:	a9 9f       	mul	r26, r25
    97a6:	f0 0d       	add	r31, r0
    97a8:	b8 9f       	mul	r27, r24
    97aa:	f0 0d       	add	r31, r0
    97ac:	11 24       	eor	r1, r1
    97ae:	e8 55       	subi	r30, 0x58	; 88
    97b0:	f2 4f       	sbci	r31, 0xF2	; 242
    97b2:	3f 7b       	andi	r19, 0xBF	; 191
    97b4:	30 83       	st	Z, r19
			
			//cut note if there's no envelope
			if(tracks[channel].envelopeStep==0){
    97b6:	85 85       	ldd	r24, Z+13	; 0x0d
    97b8:	88 23       	and	r24, r24
    97ba:	99 f4       	brne	.+38     	; 0x97e2 <TriggerNote+0x72>
				tracks[channel].noteVol=0;	
    97bc:	13 86       	std	Z+11, r1	; 0x0b
    97be:	08 95       	ret
			}
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    97c0:	86 e1       	ldi	r24, 0x16	; 22
    97c2:	90 e0       	ldi	r25, 0x00	; 0
    97c4:	a8 9f       	mul	r26, r24
    97c6:	f0 01       	movw	r30, r0
    97c8:	a9 9f       	mul	r26, r25
    97ca:	f0 0d       	add	r31, r0
    97cc:	b8 9f       	mul	r27, r24
    97ce:	f0 0d       	add	r31, r0
    97d0:	11 24       	eor	r1, r1
    97d2:	e8 55       	subi	r30, 0x58	; 88
    97d4:	f2 4f       	sbci	r31, 0xF2	; 242
    97d6:	3f 77       	andi	r19, 0x7F	; 127
    97d8:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    97da:	85 2f       	mov	r24, r21
    97dc:	42 2f       	mov	r20, r18
    97de:	27 2f       	mov	r18, r23
    97e0:	40 cf       	rjmp	.-384    	; 0x9662 <TriggerCommon>
    97e2:	08 95       	ret

000097e4 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    97e4:	af 92       	push	r10
    97e6:	bf 92       	push	r11
    97e8:	df 92       	push	r13
    97ea:	ef 92       	push	r14
    97ec:	ff 92       	push	r15
    97ee:	0f 93       	push	r16
    97f0:	1f 93       	push	r17
    97f2:	cf 93       	push	r28
    97f4:	df 93       	push	r29
    97f6:	a8 ea       	ldi	r26, 0xA8	; 168
    97f8:	bd e0       	ldi	r27, 0x0D	; 13
    97fa:	c2 e2       	ldi	r28, 0x22	; 34
    97fc:	dd e0       	ldi	r29, 0x0D	; 13
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    97fe:	1d 96       	adiw	r26, 0x0d	; 13
    9800:	8c 91       	ld	r24, X
    9802:	1d 97       	sbiw	r26, 0x0d	; 13
    9804:	88 23       	and	r24, r24
    9806:	b9 f0       	breq	.+46     	; 0x9836 <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;		
    9808:	28 2f       	mov	r18, r24
    980a:	33 27       	eor	r19, r19
    980c:	27 fd       	sbrc	r18, 7
    980e:	30 95       	com	r19
    9810:	1c 96       	adiw	r26, 0x0c	; 12
    9812:	8c 91       	ld	r24, X
    9814:	1c 97       	sbiw	r26, 0x0c	; 12
    9816:	28 0f       	add	r18, r24
    9818:	31 1d       	adc	r19, r1
    981a:	2f 3f       	cpi	r18, 0xFF	; 255
    981c:	31 05       	cpc	r19, r1
    981e:	19 f0       	breq	.+6      	; 0x9826 <ProcessMusic+0x42>
    9820:	14 f0       	brlt	.+4      	; 0x9826 <ProcessMusic+0x42>
    9822:	2f ef       	ldi	r18, 0xFF	; 255
    9824:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    9826:	c9 01       	movw	r24, r18
    9828:	37 ff       	sbrs	r19, 7
    982a:	02 c0       	rjmp	.+4      	; 0x9830 <ProcessMusic+0x4c>
    982c:	80 e0       	ldi	r24, 0x00	; 0
    982e:	90 e0       	ldi	r25, 0x00	; 0
    9830:	1c 96       	adiw	r26, 0x0c	; 12
    9832:	8c 93       	st	X, r24
    9834:	1c 97       	sbiw	r26, 0x0c	; 12
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    9836:	8c 91       	ld	r24, X
    9838:	83 ff       	sbrs	r24, 3
    983a:	26 c0       	rjmp	.+76     	; 0x9888 <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    983c:	12 96       	adiw	r26, 0x02	; 2
    983e:	4d 91       	ld	r20, X+
    9840:	5c 91       	ld	r21, X
    9842:	13 97       	sbiw	r26, 0x03	; 3
    9844:	28 81       	ld	r18, Y
    9846:	39 81       	ldd	r19, Y+1	; 0x01
    9848:	24 0f       	add	r18, r20
    984a:	35 1f       	adc	r19, r21
    984c:	39 83       	std	Y+1, r19	; 0x01
    984e:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9850:	14 96       	adiw	r26, 0x04	; 4
    9852:	8c 91       	ld	r24, X
    9854:	14 97       	sbiw	r26, 0x04	; 4
    9856:	e8 2f       	mov	r30, r24
    9858:	f0 e0       	ldi	r31, 0x00	; 0
    985a:	ee 0f       	add	r30, r30
    985c:	ff 1f       	adc	r31, r31
    985e:	e8 5f       	subi	r30, 0xF8	; 248
    9860:	f1 46       	sbci	r31, 0x61	; 97
    9862:	85 91       	lpm	r24, Z+
    9864:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    9866:	14 16       	cp	r1, r20
    9868:	15 06       	cpc	r1, r21
    986a:	24 f4       	brge	.+8      	; 0x9874 <ProcessMusic+0x90>
    986c:	28 17       	cp	r18, r24
    986e:	39 07       	cpc	r19, r25
    9870:	30 f4       	brcc	.+12     	; 0x987e <ProcessMusic+0x9a>
    9872:	0a c0       	rjmp	.+20     	; 0x9888 <ProcessMusic+0xa4>
    9874:	45 2b       	or	r20, r21
    9876:	41 f0       	breq	.+16     	; 0x9888 <ProcessMusic+0xa4>
    9878:	82 17       	cp	r24, r18
    987a:	93 07       	cpc	r25, r19
    987c:	28 f0       	brcs	.+10     	; 0x9888 <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    987e:	99 83       	std	Y+1, r25	; 0x01
    9880:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9882:	8c 91       	ld	r24, X
    9884:	87 7f       	andi	r24, 0xF7	; 247
    9886:	8c 93       	st	X, r24
    9888:	56 96       	adiw	r26, 0x16	; 22
    988a:	26 96       	adiw	r28, 0x06	; 6
	unsigned int uVol,tVol;	
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    988c:	4e e0       	ldi	r20, 0x0E	; 14
    988e:	a6 31       	cpi	r26, 0x16	; 22
    9890:	b4 07       	cpc	r27, r20
    9892:	09 f0       	breq	.+2      	; 0x9896 <ProcessMusic+0xb2>
    9894:	b4 cf       	rjmp	.-152    	; 0x97fe <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    9896:	80 91 a4 0d 	lds	r24, 0x0DA4
    989a:	88 23       	and	r24, r24
    989c:	09 f0       	breq	.+2      	; 0x98a0 <ProcessMusic+0xbc>
    989e:	1e c1       	rjmp	.+572    	; 0x9adc <ProcessMusic+0x2f8>
    98a0:	3a c1       	rjmp	.+628    	; 0x9b16 <ProcessMusic+0x332>
	
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){

			c1=pgm_read_byte(songPos++);
    98a2:	e0 91 22 0e 	lds	r30, 0x0E22
    98a6:	f0 91 23 0e 	lds	r31, 0x0E23
    98aa:	cf 01       	movw	r24, r30
    98ac:	01 96       	adiw	r24, 0x01	; 1
    98ae:	90 93 23 0e 	sts	0x0E23, r25
    98b2:	80 93 22 0e 	sts	0x0E22, r24
    98b6:	44 91       	lpm	r20, Z+
			
			if(c1==0xff){
    98b8:	4f 3f       	cpi	r20, 0xFF	; 255
    98ba:	69 f5       	brne	.+90     	; 0x9916 <ProcessMusic+0x132>
				//META data type event
				c1=pgm_read_byte(songPos++);
    98bc:	ac 01       	movw	r20, r24
    98be:	4f 5f       	subi	r20, 0xFF	; 255
    98c0:	5f 4f       	sbci	r21, 0xFF	; 255
    98c2:	50 93 23 0e 	sts	0x0E23, r21
    98c6:	40 93 22 0e 	sts	0x0E22, r20
    98ca:	fc 01       	movw	r30, r24
    98cc:	84 91       	lpm	r24, Z+

				
				if(c1==0x2f){ //end of song
    98ce:	8f 32       	cpi	r24, 0x2F	; 47
    98d0:	19 f4       	brne	.+6      	; 0x98d8 <ProcessMusic+0xf4>
					playSong=false;
    98d2:	10 92 a4 0d 	sts	0x0DA4, r1
    98d6:	10 c1       	rjmp	.+544    	; 0x9af8 <ProcessMusic+0x314>
					break;	
				}else if(c1==0x6){ //marker
    98d8:	86 30       	cpi	r24, 0x06	; 6
    98da:	09 f0       	breq	.+2      	; 0x98de <ProcessMusic+0xfa>
    98dc:	ad c0       	rjmp	.+346    	; 0x9a38 <ProcessMusic+0x254>
					c1=pgm_read_byte(songPos++); //read len
    98de:	fa 01       	movw	r30, r20
    98e0:	31 96       	adiw	r30, 0x01	; 1
					c2=pgm_read_byte(songPos++); //read data
    98e2:	cf 01       	movw	r24, r30
    98e4:	01 96       	adiw	r24, 0x01	; 1
    98e6:	90 93 23 0e 	sts	0x0E23, r25
    98ea:	80 93 22 0e 	sts	0x0E22, r24
    98ee:	e4 91       	lpm	r30, Z+
					if(c2=='S'){ //loop start
    98f0:	e3 35       	cpi	r30, 0x53	; 83
    98f2:	29 f4       	brne	.+10     	; 0x98fe <ProcessMusic+0x11a>
						loopStart=songPos;
    98f4:	90 93 25 0e 	sts	0x0E25, r25
    98f8:	80 93 24 0e 	sts	0x0E24, r24
    98fc:	9d c0       	rjmp	.+314    	; 0x9a38 <ProcessMusic+0x254>
					}else if(c2=='E'){//loop end
    98fe:	e5 34       	cpi	r30, 0x45	; 69
    9900:	09 f0       	breq	.+2      	; 0x9904 <ProcessMusic+0x120>
    9902:	9a c0       	rjmp	.+308    	; 0x9a38 <ProcessMusic+0x254>
						songPos=loopStart;
    9904:	80 91 24 0e 	lds	r24, 0x0E24
    9908:	90 91 25 0e 	lds	r25, 0x0E25
    990c:	90 93 23 0e 	sts	0x0E23, r25
    9910:	80 93 22 0e 	sts	0x0E22, r24
    9914:	91 c0       	rjmp	.+290    	; 0x9a38 <ProcessMusic+0x254>
				}
				

			}else{

				if(c1&0x80) lastStatus=c1;					
    9916:	47 ff       	sbrs	r20, 7
    9918:	02 c0       	rjmp	.+4      	; 0x991e <ProcessMusic+0x13a>
    991a:	40 93 1a 0e 	sts	0x0E1A, r20
				channel=lastStatus&0x0f;
    991e:	20 91 1a 0e 	lds	r18, 0x0E1A
    9922:	32 2f       	mov	r19, r18
    9924:	3f 70       	andi	r19, 0x0F	; 15
				
				//get next data byte
				//Note: maybe we should not advance the cursor
				//in case we receive an unsupported command				
				if(c1&0x80) c1=pgm_read_byte(songPos++); 
    9926:	47 ff       	sbrs	r20, 7
    9928:	08 c0       	rjmp	.+16     	; 0x993a <ProcessMusic+0x156>
    992a:	01 96       	adiw	r24, 0x01	; 1
    992c:	90 93 23 0e 	sts	0x0E23, r25
    9930:	80 93 22 0e 	sts	0x0E22, r24
    9934:	01 97       	sbiw	r24, 0x01	; 1
    9936:	fc 01       	movw	r30, r24
    9938:	44 91       	lpm	r20, Z+

				switch(lastStatus&0xf0){
    993a:	82 2f       	mov	r24, r18
    993c:	90 e0       	ldi	r25, 0x00	; 0
    993e:	80 7f       	andi	r24, 0xF0	; 240
    9940:	90 70       	andi	r25, 0x00	; 0
    9942:	80 3b       	cpi	r24, 0xB0	; 176
    9944:	91 05       	cpc	r25, r1
    9946:	09 f1       	breq	.+66     	; 0x998a <ProcessMusic+0x1a6>
    9948:	80 3c       	cpi	r24, 0xC0	; 192
    994a:	91 05       	cpc	r25, r1
    994c:	09 f4       	brne	.+2      	; 0x9950 <ProcessMusic+0x16c>
    994e:	68 c0       	rjmp	.+208    	; 0x9a20 <ProcessMusic+0x23c>
    9950:	80 39       	cpi	r24, 0x90	; 144
    9952:	91 05       	cpc	r25, r1
    9954:	09 f0       	breq	.+2      	; 0x9958 <ProcessMusic+0x174>
    9956:	70 c0       	rjmp	.+224    	; 0x9a38 <ProcessMusic+0x254>

					//note-on
					case 0x90:
						//c1 = note						
						c2=pgm_read_byte(songPos++)<<1; //get volume
    9958:	80 91 22 0e 	lds	r24, 0x0E22
    995c:	90 91 23 0e 	lds	r25, 0x0E23
    9960:	01 96       	adiw	r24, 0x01	; 1
    9962:	90 93 23 0e 	sts	0x0E23, r25
    9966:	80 93 22 0e 	sts	0x0E22, r24
					c2 = 127;
						if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
							TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    996a:	83 2f       	mov	r24, r19
    996c:	90 e0       	ldi	r25, 0x00	; 0
    996e:	8c 9f       	mul	r24, r28
    9970:	f0 01       	movw	r30, r0
    9972:	8d 9f       	mul	r24, r29
    9974:	f0 0d       	add	r31, r0
    9976:	9c 9f       	mul	r25, r28
    9978:	f0 0d       	add	r31, r0
    997a:	11 24       	eor	r1, r1
    997c:	e8 55       	subi	r30, 0x58	; 88
    997e:	f2 4f       	sbci	r31, 0xF2	; 242
    9980:	83 2f       	mov	r24, r19
    9982:	66 85       	ldd	r22, Z+14	; 0x0e
    9984:	2f e7       	ldi	r18, 0x7F	; 127
    9986:	f4 de       	rcall	.-536    	; 0x9770 <TriggerNote>
    9988:	57 c0       	rjmp	.+174    	; 0x9a38 <ProcessMusic+0x254>
						break;

					//controllers
					case 0xb0:
						///c1 = controller #
						c2=pgm_read_byte(songPos++); //get controller value
    998a:	e0 91 22 0e 	lds	r30, 0x0E22
    998e:	f0 91 23 0e 	lds	r31, 0x0E23
    9992:	31 96       	adiw	r30, 0x01	; 1
    9994:	f0 93 23 0e 	sts	0x0E23, r31
    9998:	e0 93 22 0e 	sts	0x0E22, r30
    999c:	31 97       	sbiw	r30, 0x01	; 1
    999e:	24 91       	lpm	r18, Z+
						
						if(c1==CONTROLER_VOL){
    99a0:	47 30       	cpi	r20, 0x07	; 7
    99a2:	71 f4       	brne	.+28     	; 0x99c0 <ProcessMusic+0x1dc>
							tracks[channel].trackVol=c2<<1;
    99a4:	83 2f       	mov	r24, r19
    99a6:	90 e0       	ldi	r25, 0x00	; 0
    99a8:	8c 9f       	mul	r24, r28
    99aa:	f0 01       	movw	r30, r0
    99ac:	8d 9f       	mul	r24, r29
    99ae:	f0 0d       	add	r31, r0
    99b0:	9c 9f       	mul	r25, r28
    99b2:	f0 0d       	add	r31, r0
    99b4:	11 24       	eor	r1, r1
    99b6:	e8 55       	subi	r30, 0x58	; 88
    99b8:	f2 4f       	sbci	r31, 0xF2	; 242
    99ba:	22 0f       	add	r18, r18
    99bc:	22 87       	std	Z+10, r18	; 0x0a
    99be:	3c c0       	rjmp	.+120    	; 0x9a38 <ProcessMusic+0x254>
						}else if(c1==CONTROLER_EXPRESSION){
    99c0:	4b 30       	cpi	r20, 0x0B	; 11
    99c2:	71 f4       	brne	.+28     	; 0x99e0 <ProcessMusic+0x1fc>
							tracks[channel].expressionVol=c2<<1;
    99c4:	83 2f       	mov	r24, r19
    99c6:	90 e0       	ldi	r25, 0x00	; 0
    99c8:	8c 9f       	mul	r24, r28
    99ca:	f0 01       	movw	r30, r0
    99cc:	8d 9f       	mul	r24, r29
    99ce:	f0 0d       	add	r31, r0
    99d0:	9c 9f       	mul	r25, r28
    99d2:	f0 0d       	add	r31, r0
    99d4:	11 24       	eor	r1, r1
    99d6:	e8 55       	subi	r30, 0x58	; 88
    99d8:	f2 4f       	sbci	r31, 0xF2	; 242
    99da:	22 0f       	add	r18, r18
    99dc:	21 87       	std	Z+9, r18	; 0x09
    99de:	2c c0       	rjmp	.+88     	; 0x9a38 <ProcessMusic+0x254>
						}else if(c1==CONTROLER_TREMOLO){
    99e0:	4c 35       	cpi	r20, 0x5C	; 92
    99e2:	71 f4       	brne	.+28     	; 0x9a00 <ProcessMusic+0x21c>
							tracks[channel].tremoloLevel=c2<<1;
    99e4:	83 2f       	mov	r24, r19
    99e6:	90 e0       	ldi	r25, 0x00	; 0
    99e8:	8c 9f       	mul	r24, r28
    99ea:	f0 01       	movw	r30, r0
    99ec:	8d 9f       	mul	r24, r29
    99ee:	f0 0d       	add	r31, r0
    99f0:	9c 9f       	mul	r25, r28
    99f2:	f0 0d       	add	r31, r0
    99f4:	11 24       	eor	r1, r1
    99f6:	e8 55       	subi	r30, 0x58	; 88
    99f8:	f2 4f       	sbci	r31, 0xF2	; 242
    99fa:	22 0f       	add	r18, r18
    99fc:	27 83       	std	Z+7, r18	; 0x07
    99fe:	1c c0       	rjmp	.+56     	; 0x9a38 <ProcessMusic+0x254>
						}else if(c1==CONTROLER_TREMOLO_RATE){
    9a00:	44 36       	cpi	r20, 0x64	; 100
    9a02:	d1 f4       	brne	.+52     	; 0x9a38 <ProcessMusic+0x254>
							tracks[channel].tremoloRate=c2<<1;
    9a04:	83 2f       	mov	r24, r19
    9a06:	90 e0       	ldi	r25, 0x00	; 0
    9a08:	8c 9f       	mul	r24, r28
    9a0a:	f0 01       	movw	r30, r0
    9a0c:	8d 9f       	mul	r24, r29
    9a0e:	f0 0d       	add	r31, r0
    9a10:	9c 9f       	mul	r25, r28
    9a12:	f0 0d       	add	r31, r0
    9a14:	11 24       	eor	r1, r1
    9a16:	e8 55       	subi	r30, 0x58	; 88
    9a18:	f2 4f       	sbci	r31, 0xF2	; 242
    9a1a:	22 0f       	add	r18, r18
    9a1c:	20 87       	std	Z+8, r18	; 0x08
    9a1e:	0c c0       	rjmp	.+24     	; 0x9a38 <ProcessMusic+0x254>
						break;

					//program change
					case 0xc0:
						// c1 = patch #						
						tracks[channel].patchNo=c1;
    9a20:	83 2f       	mov	r24, r19
    9a22:	90 e0       	ldi	r25, 0x00	; 0
    9a24:	8c 9f       	mul	r24, r28
    9a26:	f0 01       	movw	r30, r0
    9a28:	8d 9f       	mul	r24, r29
    9a2a:	f0 0d       	add	r31, r0
    9a2c:	9c 9f       	mul	r25, r28
    9a2e:	f0 0d       	add	r31, r0
    9a30:	11 24       	eor	r1, r1
    9a32:	e8 55       	subi	r30, 0x58	; 88
    9a34:	f2 4f       	sbci	r31, 0xF2	; 242
    9a36:	46 87       	std	Z+14, r20	; 0x0e


			}//end if(c1==0xff)

			//read next delta time
			nextDeltaTime=ReadVarLen(&songPos); //Bug fix: remove divide by two			
    9a38:	82 e2       	ldi	r24, 0x22	; 34
    9a3a:	9e e0       	ldi	r25, 0x0E	; 14
    9a3c:	d0 dd       	rcall	.-1120   	; 0x95de <ReadVarLen>
    9a3e:	90 93 21 0e 	sts	0x0E21, r25
    9a42:	80 93 20 0e 	sts	0x0E20, r24
			currDeltaTime=0;
    9a46:	10 92 17 0e 	sts	0x0E17, r1
    9a4a:	10 92 16 0e 	sts	0x0E16, r1

#if SONGTEMPO == 1
			if(songTempo != 0){
    9a4e:	e0 91 1d 0e 	lds	r30, 0x0E1D
    9a52:	f0 91 1e 0e 	lds	r31, 0x0E1E
    9a56:	30 97       	sbiw	r30, 0x00	; 0
    9a58:	09 f4       	brne	.+2      	; 0x9a5c <ProcessMusic+0x278>
    9a5a:	42 c0       	rjmp	.+132    	; 0x9ae0 <ProcessMusic+0x2fc>
				uint32_t l  = (uint32_t)(2048L*nextDeltaTime);
    9a5c:	9c 01       	movw	r18, r24
    9a5e:	40 e0       	ldi	r20, 0x00	; 0
    9a60:	50 e0       	ldi	r21, 0x00	; 0
    9a62:	79 01       	movw	r14, r18
    9a64:	8a 01       	movw	r16, r20
    9a66:	ab e0       	ldi	r26, 0x0B	; 11
    9a68:	ee 0c       	add	r14, r14
    9a6a:	ff 1c       	adc	r15, r15
    9a6c:	00 1f       	adc	r16, r16
    9a6e:	11 1f       	adc	r17, r17
    9a70:	aa 95       	dec	r26
    9a72:	d1 f7       	brne	.-12     	; 0x9a68 <ProcessMusic+0x284>

				if(songTempo < 0){//slow
    9a74:	f7 ff       	sbrs	r31, 7
    9a76:	1a c0       	rjmp	.+52     	; 0x9aac <ProcessMusic+0x2c8>
					(uint32_t)(l += (uint32_t)((-songTempo*2L*nextDeltaTime)));
    9a78:	66 27       	eor	r22, r22
    9a7a:	77 27       	eor	r23, r23
    9a7c:	6e 1b       	sub	r22, r30
    9a7e:	7f 0b       	sbc	r23, r31
    9a80:	88 27       	eor	r24, r24
    9a82:	77 fd       	sbrc	r23, 7
    9a84:	80 95       	com	r24
    9a86:	98 2f       	mov	r25, r24
    9a88:	66 0f       	add	r22, r22
    9a8a:	77 1f       	adc	r23, r23
    9a8c:	88 1f       	adc	r24, r24
    9a8e:	99 1f       	adc	r25, r25
    9a90:	0e 94 89 73 	call	0xe712	; 0xe712 <__mulsi3>
    9a94:	6e 0d       	add	r22, r14
    9a96:	7f 1d       	adc	r23, r15
    9a98:	80 1f       	adc	r24, r16
    9a9a:	91 1f       	adc	r25, r17
					(uint32_t)(l /= 2048);
    9a9c:	bb e0       	ldi	r27, 0x0B	; 11
    9a9e:	96 95       	lsr	r25
    9aa0:	87 95       	ror	r24
    9aa2:	77 95       	ror	r23
    9aa4:	67 95       	ror	r22
    9aa6:	ba 95       	dec	r27
    9aa8:	d1 f7       	brne	.-12     	; 0x9a9e <ProcessMusic+0x2ba>
    9aaa:	13 c0       	rjmp	.+38     	; 0x9ad2 <ProcessMusic+0x2ee>
				}
				else//fast
					(uint32_t)(l /= (uint32_t)(2048L+(songTempo*2)));
    9aac:	ee 0f       	add	r30, r30
    9aae:	ff 1f       	adc	r31, r31
    9ab0:	9f 01       	movw	r18, r30
    9ab2:	44 27       	eor	r20, r20
    9ab4:	37 fd       	sbrc	r19, 7
    9ab6:	40 95       	com	r20
    9ab8:	54 2f       	mov	r21, r20
    9aba:	20 50       	subi	r18, 0x00	; 0
    9abc:	38 4f       	sbci	r19, 0xF8	; 248
    9abe:	4f 4f       	sbci	r20, 0xFF	; 255
    9ac0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ac2:	c8 01       	movw	r24, r16
    9ac4:	b7 01       	movw	r22, r14
    9ac6:	0e 94 db 73 	call	0xe7b6	; 0xe7b6 <__udivmodsi4>
    9aca:	c9 01       	movw	r24, r18
    9acc:	da 01       	movw	r26, r20
    9ace:	bc 01       	movw	r22, r24
    9ad0:	cd 01       	movw	r24, r26

				nextDeltaTime = l;
    9ad2:	70 93 21 0e 	sts	0x0E21, r23
    9ad6:	60 93 20 0e 	sts	0x0E20, r22
    9ada:	02 c0       	rjmp	.+4      	; 0x9ae0 <ProcessMusic+0x2fc>
						}else if(c1==CONTROLER_EXPRESSION){
							tracks[channel].expressionVol=c2<<1;
						}else if(c1==CONTROLER_TREMOLO){
							tracks[channel].tremoloLevel=c2<<1;
						}else if(c1==CONTROLER_TREMOLO_RATE){
							tracks[channel].tremoloRate=c2<<1;
    9adc:	c6 e1       	ldi	r28, 0x16	; 22
    9ade:	d0 e0       	ldi	r29, 0x00	; 0

	//Process song MIDI notes
	if(playSong){
	
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){
    9ae0:	20 91 16 0e 	lds	r18, 0x0E16
    9ae4:	30 91 17 0e 	lds	r19, 0x0E17
    9ae8:	80 91 20 0e 	lds	r24, 0x0E20
    9aec:	90 91 21 0e 	lds	r25, 0x0E21
    9af0:	28 17       	cp	r18, r24
    9af2:	39 07       	cpc	r19, r25
    9af4:	09 f4       	brne	.+2      	; 0x9af8 <ProcessMusic+0x314>
    9af6:	d5 ce       	rjmp	.-598    	; 0x98a2 <ProcessMusic+0xbe>
#endif
		
		}//end while

		
		currDeltaTime++;
    9af8:	2f 5f       	subi	r18, 0xFF	; 255
    9afa:	3f 4f       	sbci	r19, 0xFF	; 255
    9afc:	30 93 17 0e 	sts	0x0E17, r19
    9b00:	20 93 16 0e 	sts	0x0E16, r18
		absoluteTime++;
    9b04:	80 91 1b 0e 	lds	r24, 0x0E1B
    9b08:	90 91 1c 0e 	lds	r25, 0x0E1C
    9b0c:	01 96       	adiw	r24, 0x01	; 1
    9b0e:	90 93 1c 0e 	sts	0x0E1C, r25
    9b12:	80 93 1b 0e 	sts	0x0E1B, r24
    9b16:	c8 ea       	ldi	r28, 0xA8	; 168
    9b18:	dd e0       	ldi	r29, 0x0D	; 13
    9b1a:	01 e2       	ldi	r16, 0x21	; 33
    9b1c:	1d e0       	ldi	r17, 0x0D	; 13
    9b1e:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9b20:	ef ef       	ldi	r30, 0xFF	; 255
    9b22:	ae 2e       	mov	r10, r30
    9b24:	b1 2c       	mov	r11, r1
		
		}//end while

		
		currDeltaTime++;
		absoluteTime++;
    9b26:	dc 2e       	mov	r13, r28
    9b28:	ed 2e       	mov	r14, r29
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    9b2a:	88 81       	ld	r24, Y
    9b2c:	86 fd       	sbrc	r24, 6
    9b2e:	3d c0       	rjmp	.+122    	; 0x9baa <ProcessMusic+0x3c6>

			if(track->patchCommandStreamPos!=NULL && 
    9b30:	8c 89       	ldd	r24, Y+20	; 0x14
    9b32:	9d 89       	ldd	r25, Y+21	; 0x15
    9b34:	89 2b       	or	r24, r25
    9b36:	09 f4       	brne	.+2      	; 0x9b3a <ProcessMusic+0x356>
    9b38:	35 c0       	rjmp	.+106    	; 0x9ba4 <ProcessMusic+0x3c0>
    9b3a:	9a 89       	ldd	r25, Y+18	; 0x12
    9b3c:	89 89       	ldd	r24, Y+17	; 0x11
    9b3e:	98 17       	cp	r25, r24
    9b40:	68 f5       	brcc	.+90     	; 0x9b9c <ProcessMusic+0x3b8>
    9b42:	30 c0       	rjmp	.+96     	; 0x9ba4 <ProcessMusic+0x3c0>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    9b44:	ec 89       	ldd	r30, Y+20	; 0x14
    9b46:	fd 89       	ldd	r31, Y+21	; 0x15
    9b48:	cf 01       	movw	r24, r30
    9b4a:	01 96       	adiw	r24, 0x01	; 1
    9b4c:	9d 8b       	std	Y+21, r25	; 0x15
    9b4e:	8c 8b       	std	Y+20, r24	; 0x14
    9b50:	24 91       	lpm	r18, Z+
					if(c1==0xff){					
    9b52:	2f 3f       	cpi	r18, 0xFF	; 255
    9b54:	31 f4       	brne	.+12     	; 0x9b62 <ProcessMusic+0x37e>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9b56:	88 81       	ld	r24, Y
    9b58:	8f 77       	andi	r24, 0x7F	; 127
    9b5a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    9b5c:	1d 8a       	std	Y+21, r1	; 0x15
    9b5e:	1c 8a       	std	Y+20, r1	; 0x14
    9b60:	21 c0       	rjmp	.+66     	; 0x9ba4 <ProcessMusic+0x3c0>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    9b62:	01 96       	adiw	r24, 0x01	; 1
    9b64:	9d 8b       	std	Y+21, r25	; 0x15
    9b66:	8c 8b       	std	Y+20, r24	; 0x14
    9b68:	01 97       	sbiw	r24, 0x01	; 1
    9b6a:	fc 01       	movw	r30, r24
    9b6c:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    9b6e:	82 2f       	mov	r24, r18
    9b70:	90 e0       	ldi	r25, 0x00	; 0
    9b72:	88 0f       	add	r24, r24
    9b74:	99 1f       	adc	r25, r25
    9b76:	82 54       	subi	r24, 0x42	; 66
    9b78:	9f 4f       	sbci	r25, 0xFF	; 255
    9b7a:	fc 01       	movw	r30, r24
    9b7c:	25 91       	lpm	r18, Z+
    9b7e:	34 91       	lpm	r19, Z+
    9b80:	8d 2d       	mov	r24, r13
    9b82:	9e 2d       	mov	r25, r14
    9b84:	6f 2d       	mov	r22, r15
    9b86:	f9 01       	movw	r30, r18
    9b88:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9b8a:	ec 89       	ldd	r30, Y+20	; 0x14
    9b8c:	fd 89       	ldd	r31, Y+21	; 0x15
    9b8e:	31 96       	adiw	r30, 0x01	; 1
    9b90:	fd 8b       	std	Y+21, r31	; 0x15
    9b92:	ec 8b       	std	Y+20, r30	; 0x14
    9b94:	31 97       	sbiw	r30, 0x01	; 1
    9b96:	e4 91       	lpm	r30, Z+
    9b98:	e9 8b       	std	Y+17, r30	; 0x11
					
					track->patchCurrDeltaTime=0;	
    9b9a:	1a 8a       	std	Y+18, r1	; 0x12

			if(track->patchCommandStreamPos!=NULL && 
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    9b9c:	9a 89       	ldd	r25, Y+18	; 0x12
    9b9e:	89 89       	ldd	r24, Y+17	; 0x11
    9ba0:	98 17       	cp	r25, r24
    9ba2:	81 f2       	breq	.-96     	; 0x9b44 <ProcessMusic+0x360>
					track->patchCurrDeltaTime=0;	

				}		
			}				
			
			track->patchCurrDeltaTime++;
    9ba4:	8a 89       	ldd	r24, Y+18	; 0x12
    9ba6:	8f 5f       	subi	r24, 0xFF	; 255
    9ba8:	8a 8b       	std	Y+18, r24	; 0x12
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9baa:	88 81       	ld	r24, Y
    9bac:	85 fd       	sbrc	r24, 5
    9bae:	03 c0       	rjmp	.+6      	; 0x9bb6 <ProcessMusic+0x3d2>
    9bb0:	20 e0       	ldi	r18, 0x00	; 0
    9bb2:	30 e0       	ldi	r19, 0x00	; 0
    9bb4:	6b c0       	rjmp	.+214    	; 0x9c8c <ProcessMusic+0x4a8>
		
			if(track->patchPlayingTime<0xff){
    9bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    9bb8:	8f 3f       	cpi	r24, 0xFF	; 255
    9bba:	11 f0       	breq	.+4      	; 0x9bc0 <ProcessMusic+0x3dc>
				track->patchPlayingTime++;
    9bbc:	8f 5f       	subi	r24, 0xFF	; 255
    9bbe:	8b 8b       	std	Y+19, r24	; 0x13
			}

			//compute final frame volume
			if(track->noteVol!=0 && track->envelopeVol!=0 && track->trackVol!=0 && masterVolume!=0){
    9bc0:	9b 85       	ldd	r25, Y+11	; 0x0b
    9bc2:	99 23       	and	r25, r25
    9bc4:	09 f4       	brne	.+2      	; 0x9bc8 <ProcessMusic+0x3e4>
    9bc6:	5c c0       	rjmp	.+184    	; 0x9c80 <ProcessMusic+0x49c>
    9bc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    9bca:	22 23       	and	r18, r18
    9bcc:	09 f4       	brne	.+2      	; 0x9bd0 <ProcessMusic+0x3ec>
    9bce:	58 c0       	rjmp	.+176    	; 0x9c80 <ProcessMusic+0x49c>
    9bd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    9bd2:	88 23       	and	r24, r24
    9bd4:	09 f4       	brne	.+2      	; 0x9bd8 <ProcessMusic+0x3f4>
    9bd6:	54 c0       	rjmp	.+168    	; 0x9c80 <ProcessMusic+0x49c>
    9bd8:	40 91 1f 0e 	lds	r20, 0x0E1F
    9bdc:	44 23       	and	r20, r20
    9bde:	09 f4       	brne	.+2      	; 0x9be2 <ProcessMusic+0x3fe>
    9be0:	4f c0       	rjmp	.+158    	; 0x9c80 <ProcessMusic+0x49c>

				uVol=(track->noteVol*track->trackVol)+0x100;
    9be2:	89 9f       	mul	r24, r25
    9be4:	c0 01       	movw	r24, r0
    9be6:	11 24       	eor	r1, r1
    9be8:	80 50       	subi	r24, 0x00	; 0
    9bea:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->envelopeVol)+0x100;
    9bec:	89 2f       	mov	r24, r25
    9bee:	99 27       	eor	r25, r25
    9bf0:	30 e0       	ldi	r19, 0x00	; 0
    9bf2:	b9 01       	movw	r22, r18
    9bf4:	86 9f       	mul	r24, r22
    9bf6:	90 01       	movw	r18, r0
    9bf8:	87 9f       	mul	r24, r23
    9bfa:	30 0d       	add	r19, r0
    9bfc:	96 9f       	mul	r25, r22
    9bfe:	30 0d       	add	r19, r0
    9c00:	11 24       	eor	r1, r1
    9c02:	20 50       	subi	r18, 0x00	; 0
    9c04:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->expressionVol)+0x100;
    9c06:	23 2f       	mov	r18, r19
    9c08:	33 27       	eor	r19, r19
    9c0a:	89 85       	ldd	r24, Y+9	; 0x09
    9c0c:	90 e0       	ldi	r25, 0x00	; 0
    9c0e:	fc 01       	movw	r30, r24
    9c10:	2e 9f       	mul	r18, r30
    9c12:	c0 01       	movw	r24, r0
    9c14:	2f 9f       	mul	r18, r31
    9c16:	90 0d       	add	r25, r0
    9c18:	3e 9f       	mul	r19, r30
    9c1a:	90 0d       	add	r25, r0
    9c1c:	11 24       	eor	r1, r1
    9c1e:	80 50       	subi	r24, 0x00	; 0
    9c20:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    9c22:	89 2f       	mov	r24, r25
    9c24:	99 27       	eor	r25, r25
    9c26:	24 2f       	mov	r18, r20
    9c28:	30 e0       	ldi	r19, 0x00	; 0
    9c2a:	ac 01       	movw	r20, r24
    9c2c:	42 9f       	mul	r20, r18
    9c2e:	c0 01       	movw	r24, r0
    9c30:	43 9f       	mul	r20, r19
    9c32:	90 0d       	add	r25, r0
    9c34:	52 9f       	mul	r21, r18
    9c36:	90 0d       	add	r25, r0
    9c38:	11 24       	eor	r1, r1
    9c3a:	80 50       	subi	r24, 0x00	; 0
    9c3c:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    9c3e:	29 2f       	mov	r18, r25
    9c40:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    9c42:	8f 81       	ldd	r24, Y+7	; 0x07
    9c44:	88 23       	and	r24, r24
    9c46:	f1 f0       	breq	.+60     	; 0x9c84 <ProcessMusic+0x4a0>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9c48:	ee 81       	ldd	r30, Y+6	; 0x06
    9c4a:	f0 e0       	ldi	r31, 0x00	; 0
    9c4c:	e0 50       	subi	r30, 0x00	; 0
    9c4e:	f0 46       	sbci	r31, 0x60	; 96
    9c50:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    9c52:	e0 58       	subi	r30, 0x80	; 128
    9c54:	e8 9f       	mul	r30, r24
    9c56:	c0 01       	movw	r24, r0
    9c58:	11 24       	eor	r1, r1
    9c5a:	80 50       	subi	r24, 0x00	; 0
    9c5c:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9c5e:	89 2f       	mov	r24, r25
    9c60:	99 27       	eor	r25, r25
    9c62:	b5 01       	movw	r22, r10
    9c64:	68 1b       	sub	r22, r24
    9c66:	79 0b       	sbc	r23, r25
    9c68:	62 9f       	mul	r22, r18
    9c6a:	c0 01       	movw	r24, r0
    9c6c:	63 9f       	mul	r22, r19
    9c6e:	90 0d       	add	r25, r0
    9c70:	72 9f       	mul	r23, r18
    9c72:	90 0d       	add	r25, r0
    9c74:	11 24       	eor	r1, r1
    9c76:	80 50       	subi	r24, 0x00	; 0
    9c78:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    9c7a:	29 2f       	mov	r18, r25
    9c7c:	33 27       	eor	r19, r19
    9c7e:	02 c0       	rjmp	.+4      	; 0x9c84 <ProcessMusic+0x4a0>
    9c80:	20 e0       	ldi	r18, 0x00	; 0
    9c82:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    9c84:	8e 81       	ldd	r24, Y+6	; 0x06
    9c86:	98 85       	ldd	r25, Y+8	; 0x08
    9c88:	89 0f       	add	r24, r25
    9c8a:	8e 83       	std	Y+6, r24	; 0x06

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9c8c:	f8 01       	movw	r30, r16
    9c8e:	20 83       	st	Z, r18
	

	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9c90:	f3 94       	inc	r15
    9c92:	66 96       	adiw	r28, 0x16	; 22
    9c94:	0a 5f       	subi	r16, 0xFA	; 250
    9c96:	1f 4f       	sbci	r17, 0xFF	; 255
    9c98:	f5 e0       	ldi	r31, 0x05	; 5
    9c9a:	ff 16       	cp	r15, r31
    9c9c:	09 f0       	breq	.+2      	; 0x9ca0 <ProcessMusic+0x4bc>
    9c9e:	43 cf       	rjmp	.-378    	; 0x9b26 <ProcessMusic+0x342>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9ca0:	df 91       	pop	r29
    9ca2:	cf 91       	pop	r28
    9ca4:	1f 91       	pop	r17
    9ca6:	0f 91       	pop	r16
    9ca8:	ff 90       	pop	r15
    9caa:	ef 90       	pop	r14
    9cac:	df 90       	pop	r13
    9cae:	bf 90       	pop	r11
    9cb0:	af 90       	pop	r10
    9cb2:	08 95       	ret

00009cb4 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    9cb4:	58 2f       	mov	r21, r24
    9cb6:	76 2f       	mov	r23, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    9cb8:	89 e0       	ldi	r24, 0x09	; 9
    9cba:	58 9f       	mul	r21, r24
    9cbc:	c0 01       	movw	r24, r0
    9cbe:	11 24       	eor	r1, r1
    9cc0:	e0 91 18 0e 	lds	r30, 0x0E18
    9cc4:	f0 91 19 0e 	lds	r31, 0x0E19
    9cc8:	e8 0f       	add	r30, r24
    9cca:	f9 1f       	adc	r31, r25
    9ccc:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    9cce:	81 30       	cpi	r24, 0x01	; 1
    9cd0:	11 f4       	brne	.+4      	; 0x9cd6 <TriggerFx+0x22>
    9cd2:	43 e0       	ldi	r20, 0x03	; 3
    9cd4:	21 c0       	rjmp	.+66     	; 0x9d18 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    9cd6:	82 30       	cpi	r24, 0x02	; 2
    9cd8:	11 f4       	brne	.+4      	; 0x9cde <TriggerFx+0x2a>
    9cda:	44 e0       	ldi	r20, 0x04	; 4
    9cdc:	1d c0       	rjmp	.+58     	; 0x9d18 <TriggerFx+0x64>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    9cde:	80 91 be 0d 	lds	r24, 0x0DBE
    9ce2:	87 ff       	sbrs	r24, 7
    9ce4:	16 c0       	rjmp	.+44     	; 0x9d12 <TriggerFx+0x5e>
    9ce6:	80 91 cd 0d 	lds	r24, 0x0DCD
    9cea:	85 17       	cp	r24, r21
    9cec:	11 f4       	brne	.+4      	; 0x9cf2 <TriggerFx+0x3e>
    9cee:	44 23       	and	r20, r20
    9cf0:	81 f4       	brne	.+32     	; 0x9d12 <TriggerFx+0x5e>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    9cf2:	80 91 d4 0d 	lds	r24, 0x0DD4
    9cf6:	87 ff       	sbrs	r24, 7
    9cf8:	0e c0       	rjmp	.+28     	; 0x9d16 <TriggerFx+0x62>
    9cfa:	80 91 e3 0d 	lds	r24, 0x0DE3
    9cfe:	85 17       	cp	r24, r21
    9d00:	11 f4       	brne	.+4      	; 0x9d06 <TriggerFx+0x52>
    9d02:	44 23       	and	r20, r20
    9d04:	41 f4       	brne	.+16     	; 0x9d16 <TriggerFx+0x62>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    9d06:	90 91 d1 0d 	lds	r25, 0x0DD1
    9d0a:	80 91 e7 0d 	lds	r24, 0x0DE7
    9d0e:	89 17       	cp	r24, r25
    9d10:	10 f4       	brcc	.+4      	; 0x9d16 <TriggerFx+0x62>
    9d12:	41 e0       	ldi	r20, 0x01	; 1
    9d14:	01 c0       	rjmp	.+2      	; 0x9d18 <TriggerFx+0x64>
    9d16:	42 e0       	ldi	r20, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    9d18:	24 2f       	mov	r18, r20
    9d1a:	30 e0       	ldi	r19, 0x00	; 0
    9d1c:	86 e1       	ldi	r24, 0x16	; 22
    9d1e:	90 e0       	ldi	r25, 0x00	; 0
    9d20:	28 9f       	mul	r18, r24
    9d22:	f0 01       	movw	r30, r0
    9d24:	29 9f       	mul	r18, r25
    9d26:	f0 0d       	add	r31, r0
    9d28:	38 9f       	mul	r19, r24
    9d2a:	f0 0d       	add	r31, r0
    9d2c:	11 24       	eor	r1, r1
    9d2e:	e8 55       	subi	r30, 0x58	; 88
    9d30:	f2 4f       	sbci	r31, 0xF2	; 242
    9d32:	80 81       	ld	r24, Z
    9d34:	80 68       	ori	r24, 0x80	; 128
    9d36:	80 83       	st	Z, r24
	TriggerCommon(channel,patch,volume,80);
    9d38:	84 2f       	mov	r24, r20
    9d3a:	65 2f       	mov	r22, r21
    9d3c:	47 2f       	mov	r20, r23
    9d3e:	20 e5       	ldi	r18, 0x50	; 80
}
    9d40:	90 cc       	rjmp	.-1760   	; 0x9662 <TriggerCommon>

00009d42 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    9d42:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    9d44:	64 2f       	mov	r22, r20
}
    9d46:	c4 c9       	rjmp	.-3192   	; 0x90d0 <SetMixerWave>
	...

00009e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9e02:	80 93 20 0d 	sts	0x0D20, r24
	ret
    9e06:	08 95       	ret

00009e08 <steptable>:
    9e08:	22 00       	.word	0x0022	; ????
    9e0a:	24 00       	.word	0x0024	; ????
    9e0c:	26 00       	.word	0x0026	; ????
    9e0e:	28 00       	.word	0x0028	; ????
    9e10:	2b 00       	.word	0x002b	; ????
    9e12:	2d 00       	.word	0x002d	; ????
    9e14:	30 00       	.word	0x0030	; ????
    9e16:	33 00       	.word	0x0033	; ????
    9e18:	36 00       	.word	0x0036	; ????
    9e1a:	39 00       	.word	0x0039	; ????
    9e1c:	3d 00       	.word	0x003d	; ????
    9e1e:	40 00       	.word	0x0040	; ????
    9e20:	44 00       	.word	0x0044	; ????
    9e22:	48 00       	.word	0x0048	; ????
    9e24:	4c 00       	.word	0x004c	; ????
    9e26:	51 00       	.word	0x0051	; ????
    9e28:	56 00       	.word	0x0056	; ????
    9e2a:	5b 00       	.word	0x005b	; ????
    9e2c:	60 00       	.word	0x0060	; ????
    9e2e:	66 00       	.word	0x0066	; ????
    9e30:	6c 00       	.word	0x006c	; ????
    9e32:	73 00       	.word	0x0073	; ????
    9e34:	79 00       	.word	0x0079	; ????
    9e36:	81 00       	.word	0x0081	; ????
    9e38:	88 00       	.word	0x0088	; ????
    9e3a:	90 00       	.word	0x0090	; ????
    9e3c:	99 00       	.word	0x0099	; ????
    9e3e:	a2 00       	.word	0x00a2	; ????
    9e40:	ac 00       	.word	0x00ac	; ????
    9e42:	b6 00       	.word	0x00b6	; ????
    9e44:	c1 00       	.word	0x00c1	; ????
    9e46:	cc 00       	.word	0x00cc	; ????
    9e48:	d8 00       	.word	0x00d8	; ????
    9e4a:	e5 00       	.word	0x00e5	; ????
    9e4c:	f3 00       	.word	0x00f3	; ????
    9e4e:	01 01       	movw	r0, r2
    9e50:	10 01       	movw	r2, r0
    9e52:	21 01       	movw	r4, r2
    9e54:	32 01       	movw	r6, r4
    9e56:	44 01       	movw	r8, r8
    9e58:	57 01       	movw	r10, r14
    9e5a:	6c 01       	movw	r12, r24
    9e5c:	81 01       	movw	r16, r2
    9e5e:	98 01       	movw	r18, r16
    9e60:	b0 01       	movw	r22, r0
    9e62:	ca 01       	movw	r24, r20
    9e64:	e5 01       	movw	r28, r10
    9e66:	02 02       	muls	r16, r18
    9e68:	21 02       	muls	r18, r17
    9e6a:	41 02       	muls	r20, r17
    9e6c:	64 02       	muls	r22, r20
    9e6e:	88 02       	muls	r24, r24
    9e70:	ae 02       	muls	r26, r30
    9e72:	d7 02       	muls	r29, r23
    9e74:	03 03       	mulsu	r16, r19
    9e76:	30 03       	mulsu	r19, r16
    9e78:	61 03       	mulsu	r22, r17
    9e7a:	94 03       	fmuls	r17, r20
    9e7c:	cb 03       	fmulsu	r20, r19
    9e7e:	05 04       	cpc	r0, r5
    9e80:	42 04       	cpc	r4, r2
    9e82:	83 04       	cpc	r8, r3
    9e84:	c7 04       	cpc	r12, r7
    9e86:	10 05       	cpc	r17, r0
    9e88:	5d 05       	cpc	r21, r13
    9e8a:	af 05       	cpc	r26, r15
    9e8c:	05 06       	cpc	r0, r21
    9e8e:	61 06       	cpc	r6, r17
    9e90:	c2 06       	cpc	r12, r18
    9e92:	29 07       	cpc	r18, r25
    9e94:	96 07       	cpc	r25, r22
    9e96:	09 08       	sbc	r0, r9
    9e98:	83 08       	sbc	r8, r3
    9e9a:	05 09       	sbc	r16, r5
    9e9c:	8e 09       	sbc	r24, r14
    9e9e:	20 0a       	sbc	r2, r16
    9ea0:	ba 0a       	sbc	r11, r26
    9ea2:	5d 0b       	sbc	r21, r29
    9ea4:	0a 0c       	add	r0, r10
    9ea6:	c1 0c       	add	r12, r1
    9ea8:	84 0d       	add	r24, r4
    9eaa:	51 0e       	add	r5, r17
    9eac:	2b 0f       	add	r18, r27
    9eae:	12 10       	cpse	r1, r2
    9eb0:	07 11       	cpse	r16, r7
    9eb2:	0a 12       	cpse	r0, r26
    9eb4:	1d 13       	cpse	r17, r29
    9eb6:	40 14       	cp	r4, r0
    9eb8:	74 15       	cp	r23, r4
    9eba:	ba 16       	cp	r11, r26
    9ebc:	14 18       	sub	r1, r4
    9ebe:	83 19       	sub	r24, r3
    9ec0:	07 1b       	sub	r16, r23
    9ec2:	a3 1c       	adc	r10, r3
    9ec4:	57 1e       	adc	r5, r23
    9ec6:	24 20       	and	r2, r4
    9ec8:	0e 22       	and	r0, r30
    9eca:	14 24       	eor	r1, r4
    9ecc:	39 26       	eor	r3, r25
    9ece:	7f 28       	or	r7, r15
    9ed0:	e8 2a       	or	r14, r24
    9ed2:	75 2d       	mov	r23, r5
    9ed4:	29 30       	cpi	r18, 0x09	; 9
    9ed6:	06 33       	cpi	r16, 0x36	; 54
    9ed8:	0f 36       	cpi	r16, 0x6F	; 111
    9eda:	45 39       	cpi	r20, 0x95	; 149
    9edc:	ad 3c       	cpi	r26, 0xCD	; 205
    9ede:	49 40       	sbci	r20, 0x09	; 9
    9ee0:	1b 44       	sbci	r17, 0x4B	; 75
    9ee2:	28 48       	sbci	r18, 0x88	; 136
    9ee4:	73 4c       	sbci	r23, 0xC3	; 195
    9ee6:	fe 50       	subi	r31, 0x0E	; 14
    9ee8:	cf 55       	subi	r28, 0x5F	; 95
    9eea:	ea 5a       	subi	r30, 0xAA	; 170
    9eec:	51 60       	ori	r21, 0x01	; 1
    9eee:	0c 66       	ori	r16, 0x6C	; 108
    9ef0:	1d 6c       	ori	r17, 0xCD	; 205
    9ef2:	8b 72       	andi	r24, 0x2B	; 43
    9ef4:	5a 79       	andi	r21, 0x9A	; 154
    9ef6:	92 80       	ldd	r9, Z+2	; 0x02
    9ef8:	37 88       	ldd	r3, Z+23	; 0x17
    9efa:	50 90 e5 98 	lds	r5, 0x98E5
    9efe:	fd a1       	ldd	r31, Y+37	; 0x25
    9f00:	9f ab       	std	Y+55, r25	; 0x37
    9f02:	d3 b5       	in	r29, 0x23	; 35
    9f04:	a3 c0       	rjmp	.+326    	; 0xa04c <waves+0x4c>
	...

0000a000 <waves>:
    a000:	7f 7f       	andi	r23, 0xFF	; 255
    a002:	7f 7f       	andi	r23, 0xFF	; 255
    a004:	7f 7f       	andi	r23, 0xFF	; 255
    a006:	7f 7f       	andi	r23, 0xFF	; 255
    a008:	7f 7f       	andi	r23, 0xFF	; 255
    a00a:	7f 7f       	andi	r23, 0xFF	; 255
    a00c:	7f 7f       	andi	r23, 0xFF	; 255
    a00e:	7f 7f       	andi	r23, 0xFF	; 255
    a010:	7f 7f       	andi	r23, 0xFF	; 255
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7f       	andi	r23, 0xFF	; 255
    a04e:	7f 7f       	andi	r23, 0xFF	; 255
    a050:	7f 7f       	andi	r23, 0xFF	; 255
    a052:	7f 7f       	andi	r23, 0xFF	; 255
    a054:	7f 7f       	andi	r23, 0xFF	; 255
    a056:	7f 7f       	andi	r23, 0xFF	; 255
    a058:	7f 7f       	andi	r23, 0xFF	; 255
    a05a:	7f 7f       	andi	r23, 0xFF	; 255
    a05c:	7f 7f       	andi	r23, 0xFF	; 255
    a05e:	7f 7f       	andi	r23, 0xFF	; 255
    a060:	7f 7f       	andi	r23, 0xFF	; 255
    a062:	7f 7f       	andi	r23, 0xFF	; 255
    a064:	7f 7f       	andi	r23, 0xFF	; 255
    a066:	7f 7f       	andi	r23, 0xFF	; 255
    a068:	7f 7f       	andi	r23, 0xFF	; 255
    a06a:	7f 7f       	andi	r23, 0xFF	; 255
    a06c:	7f 7f       	andi	r23, 0xFF	; 255
    a06e:	7f 7f       	andi	r23, 0xFF	; 255
    a070:	7f 7f       	andi	r23, 0xFF	; 255
    a072:	7f 7f       	andi	r23, 0xFF	; 255
    a074:	7f 7f       	andi	r23, 0xFF	; 255
    a076:	7f 7f       	andi	r23, 0xFF	; 255
    a078:	7f 7f       	andi	r23, 0xFF	; 255
    a07a:	7f 7f       	andi	r23, 0xFF	; 255
    a07c:	7f 7f       	andi	r23, 0xFF	; 255
    a07e:	7f 7f       	andi	r23, 0xFF	; 255
    a080:	80 80       	ld	r8, Z
    a082:	80 80       	ld	r8, Z
    a084:	80 80       	ld	r8, Z
    a086:	80 80       	ld	r8, Z
    a088:	80 80       	ld	r8, Z
    a08a:	80 80       	ld	r8, Z
    a08c:	80 80       	ld	r8, Z
    a08e:	80 80       	ld	r8, Z
    a090:	80 80       	ld	r8, Z
    a092:	80 80       	ld	r8, Z
    a094:	80 80       	ld	r8, Z
    a096:	80 80       	ld	r8, Z
    a098:	80 80       	ld	r8, Z
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 80       	ld	r8, Z
    a0f6:	80 80       	ld	r8, Z
    a0f8:	80 80       	ld	r8, Z
    a0fa:	80 80       	ld	r8, Z
    a0fc:	80 80       	ld	r8, Z
    a0fe:	80 80       	ld	r8, Z
    a100:	7f 7f       	andi	r23, 0xFF	; 255
    a102:	7f 7f       	andi	r23, 0xFF	; 255
    a104:	7f 7f       	andi	r23, 0xFF	; 255
    a106:	7f 7f       	andi	r23, 0xFF	; 255
    a108:	7f 7f       	andi	r23, 0xFF	; 255
    a10a:	7f 7f       	andi	r23, 0xFF	; 255
    a10c:	7f 7f       	andi	r23, 0xFF	; 255
    a10e:	7f 7f       	andi	r23, 0xFF	; 255
    a110:	7f 7f       	andi	r23, 0xFF	; 255
    a112:	7f 7f       	andi	r23, 0xFF	; 255
    a114:	7f 7f       	andi	r23, 0xFF	; 255
    a116:	7f 7f       	andi	r23, 0xFF	; 255
    a118:	7f 7f       	andi	r23, 0xFF	; 255
    a11a:	7f 7f       	andi	r23, 0xFF	; 255
    a11c:	7f 7f       	andi	r23, 0xFF	; 255
    a11e:	7f 7f       	andi	r23, 0xFF	; 255
    a120:	7f 7f       	andi	r23, 0xFF	; 255
    a122:	7f 7f       	andi	r23, 0xFF	; 255
    a124:	7f 7f       	andi	r23, 0xFF	; 255
    a126:	7f 7f       	andi	r23, 0xFF	; 255
    a128:	7f 7f       	andi	r23, 0xFF	; 255
    a12a:	7f 7f       	andi	r23, 0xFF	; 255
    a12c:	7f 7f       	andi	r23, 0xFF	; 255
    a12e:	7f 7f       	andi	r23, 0xFF	; 255
    a130:	7f 7f       	andi	r23, 0xFF	; 255
    a132:	7f 7f       	andi	r23, 0xFF	; 255
    a134:	7f 7f       	andi	r23, 0xFF	; 255
    a136:	7f 7f       	andi	r23, 0xFF	; 255
    a138:	7f 7f       	andi	r23, 0xFF	; 255
    a13a:	7f 7f       	andi	r23, 0xFF	; 255
    a13c:	7f 7f       	andi	r23, 0xFF	; 255
    a13e:	7f 7f       	andi	r23, 0xFF	; 255
    a140:	80 80       	ld	r8, Z
    a142:	80 80       	ld	r8, Z
    a144:	80 80       	ld	r8, Z
    a146:	80 80       	ld	r8, Z
    a148:	80 80       	ld	r8, Z
    a14a:	80 80       	ld	r8, Z
    a14c:	80 80       	ld	r8, Z
    a14e:	80 80       	ld	r8, Z
    a150:	80 80       	ld	r8, Z
    a152:	80 80       	ld	r8, Z
    a154:	80 80       	ld	r8, Z
    a156:	80 80       	ld	r8, Z
    a158:	80 80       	ld	r8, Z
    a15a:	80 80       	ld	r8, Z
    a15c:	80 80       	ld	r8, Z
    a15e:	80 80       	ld	r8, Z
    a160:	80 80       	ld	r8, Z
    a162:	80 80       	ld	r8, Z
    a164:	80 80       	ld	r8, Z
    a166:	80 80       	ld	r8, Z
    a168:	80 80       	ld	r8, Z
    a16a:	80 80       	ld	r8, Z
    a16c:	80 80       	ld	r8, Z
    a16e:	80 80       	ld	r8, Z
    a170:	80 80       	ld	r8, Z
    a172:	80 80       	ld	r8, Z
    a174:	80 80       	ld	r8, Z
    a176:	80 80       	ld	r8, Z
    a178:	80 80       	ld	r8, Z
    a17a:	80 80       	ld	r8, Z
    a17c:	80 80       	ld	r8, Z
    a17e:	80 80       	ld	r8, Z
    a180:	80 80       	ld	r8, Z
    a182:	80 80       	ld	r8, Z
    a184:	80 80       	ld	r8, Z
    a186:	80 80       	ld	r8, Z
    a188:	80 80       	ld	r8, Z
    a18a:	80 80       	ld	r8, Z
    a18c:	80 80       	ld	r8, Z
    a18e:	80 80       	ld	r8, Z
    a190:	80 80       	ld	r8, Z
    a192:	80 80       	ld	r8, Z
    a194:	80 80       	ld	r8, Z
    a196:	80 80       	ld	r8, Z
    a198:	80 80       	ld	r8, Z
    a19a:	80 80       	ld	r8, Z
    a19c:	80 80       	ld	r8, Z
    a19e:	80 80       	ld	r8, Z
    a1a0:	80 80       	ld	r8, Z
    a1a2:	80 80       	ld	r8, Z
    a1a4:	80 80       	ld	r8, Z
    a1a6:	80 80       	ld	r8, Z
    a1a8:	80 80       	ld	r8, Z
    a1aa:	80 80       	ld	r8, Z
    a1ac:	80 80       	ld	r8, Z
    a1ae:	80 80       	ld	r8, Z
    a1b0:	80 80       	ld	r8, Z
    a1b2:	80 80       	ld	r8, Z
    a1b4:	80 80       	ld	r8, Z
    a1b6:	80 80       	ld	r8, Z
    a1b8:	80 80       	ld	r8, Z
    a1ba:	80 80       	ld	r8, Z
    a1bc:	80 80       	ld	r8, Z
    a1be:	80 80       	ld	r8, Z
    a1c0:	80 80       	ld	r8, Z
    a1c2:	80 80       	ld	r8, Z
    a1c4:	80 80       	ld	r8, Z
    a1c6:	80 80       	ld	r8, Z
    a1c8:	80 80       	ld	r8, Z
    a1ca:	80 80       	ld	r8, Z
    a1cc:	80 80       	ld	r8, Z
    a1ce:	80 80       	ld	r8, Z
    a1d0:	80 80       	ld	r8, Z
    a1d2:	80 80       	ld	r8, Z
    a1d4:	80 80       	ld	r8, Z
    a1d6:	80 80       	ld	r8, Z
    a1d8:	80 80       	ld	r8, Z
    a1da:	80 80       	ld	r8, Z
    a1dc:	80 80       	ld	r8, Z
    a1de:	80 80       	ld	r8, Z
    a1e0:	80 80       	ld	r8, Z
    a1e2:	80 80       	ld	r8, Z
    a1e4:	80 80       	ld	r8, Z
    a1e6:	80 80       	ld	r8, Z
    a1e8:	80 80       	ld	r8, Z
    a1ea:	80 80       	ld	r8, Z
    a1ec:	80 80       	ld	r8, Z
    a1ee:	80 80       	ld	r8, Z
    a1f0:	80 80       	ld	r8, Z
    a1f2:	80 80       	ld	r8, Z
    a1f4:	80 80       	ld	r8, Z
    a1f6:	80 80       	ld	r8, Z
    a1f8:	80 80       	ld	r8, Z
    a1fa:	80 80       	ld	r8, Z
    a1fc:	80 80       	ld	r8, Z
    a1fe:	80 80       	ld	r8, Z
    a200:	00 02       	muls	r16, r16
    a202:	04 06       	cpc	r0, r20
    a204:	08 0a       	sbc	r0, r24
    a206:	0c 0e       	add	r0, r28
    a208:	10 12       	cpse	r1, r16
    a20a:	14 16       	cp	r1, r20
    a20c:	18 1a       	sub	r1, r24
    a20e:	1c 1e       	adc	r1, r28
    a210:	20 22       	and	r2, r16
    a212:	24 26       	eor	r2, r20
    a214:	28 2a       	or	r2, r24
    a216:	2c 2e       	mov	r2, r28
    a218:	30 32       	cpi	r19, 0x20	; 32
    a21a:	34 36       	cpi	r19, 0x64	; 100
    a21c:	38 3a       	cpi	r19, 0xA8	; 168
    a21e:	3c 3e       	cpi	r19, 0xEC	; 236
    a220:	40 42       	sbci	r20, 0x20	; 32
    a222:	44 46       	sbci	r20, 0x64	; 100
    a224:	48 4a       	sbci	r20, 0xA8	; 168
    a226:	4c 4e       	sbci	r20, 0xEC	; 236
    a228:	50 52       	subi	r21, 0x20	; 32
    a22a:	54 56       	subi	r21, 0x64	; 100
    a22c:	58 5a       	subi	r21, 0xA8	; 168
    a22e:	5c 5e       	subi	r21, 0xEC	; 236
    a230:	60 62       	ori	r22, 0x20	; 32
    a232:	64 66       	ori	r22, 0x64	; 100
    a234:	68 6a       	ori	r22, 0xA8	; 168
    a236:	6c 6e       	ori	r22, 0xEC	; 236
    a238:	70 72       	andi	r23, 0x20	; 32
    a23a:	74 76       	andi	r23, 0x64	; 100
    a23c:	78 7a       	andi	r23, 0xA8	; 168
    a23e:	7c 7e       	andi	r23, 0xEC	; 236
    a240:	7f 7d       	andi	r23, 0xDF	; 223
    a242:	7b 79       	andi	r23, 0x9B	; 155
    a244:	77 75       	andi	r23, 0x57	; 87
    a246:	73 71       	andi	r23, 0x13	; 19
    a248:	6f 6d       	ori	r22, 0xDF	; 223
    a24a:	6b 69       	ori	r22, 0x9B	; 155
    a24c:	67 65       	ori	r22, 0x57	; 87
    a24e:	63 61       	ori	r22, 0x13	; 19
    a250:	5f 5d       	subi	r21, 0xDF	; 223
    a252:	5b 59       	subi	r21, 0x9B	; 155
    a254:	57 55       	subi	r21, 0x57	; 87
    a256:	53 51       	subi	r21, 0x13	; 19
    a258:	4f 4d       	sbci	r20, 0xDF	; 223
    a25a:	4b 49       	sbci	r20, 0x9B	; 155
    a25c:	47 45       	sbci	r20, 0x57	; 87
    a25e:	43 41       	sbci	r20, 0x13	; 19
    a260:	3f 3d       	cpi	r19, 0xDF	; 223
    a262:	3b 39       	cpi	r19, 0x9B	; 155
    a264:	37 35       	cpi	r19, 0x57	; 87
    a266:	33 31       	cpi	r19, 0x13	; 19
    a268:	2f 2d       	mov	r18, r15
    a26a:	2b 29       	or	r18, r11
    a26c:	27 25       	eor	r18, r7
    a26e:	23 21       	and	r18, r3
    a270:	1f 1d       	adc	r17, r15
    a272:	1b 19       	sub	r17, r11
    a274:	17 15       	cp	r17, r7
    a276:	13 11       	cpse	r17, r3
    a278:	0f 0d       	add	r16, r15
    a27a:	0b 09       	sbc	r16, r11
    a27c:	07 05       	cpc	r16, r7
    a27e:	03 01       	movw	r0, r6
    a280:	ff fd       	.word	0xfdff	; ????
    a282:	fb f9       	.word	0xf9fb	; ????
    a284:	f7 f5       	brid	.+124    	; 0xa302 <waves+0x302>
    a286:	f3 f1       	brvs	.+124    	; 0xa304 <waves+0x304>
    a288:	ef ed       	ldi	r30, 0xDF	; 223
    a28a:	eb e9       	ldi	r30, 0x9B	; 155
    a28c:	e7 e5       	ldi	r30, 0x57	; 87
    a28e:	e3 e1       	ldi	r30, 0x13	; 19
    a290:	df dd       	rcall	.-1090   	; 0x9e50 <steptable+0x48>
    a292:	db d9       	rcall	.-3146   	; 0x964a <PatchCommand04+0x2>
    a294:	d7 d5       	rcall	.+2990   	; 0xae44 <FlashingJewelInWell+0x30>
    a296:	d3 d1       	rcall	.+934    	; 0xa63e <rtl_RamifyFontEx+0x32>
    a298:	cf cd       	rjmp	.-1122   	; 0x9e38 <steptable+0x30>
    a29a:	cb c9       	rjmp	.-3178   	; 0x9632 <PatchCommand08+0x6>
    a29c:	c7 c5       	rjmp	.+2958   	; 0xae2c <FlashingJewelInWell+0x18>
    a29e:	c3 c1       	rjmp	.+902    	; 0xa626 <rtl_RamifyFontEx+0x1a>
    a2a0:	bf bd       	out	0x2f, r27	; 47
    a2a2:	bb b9       	out	0x0b, r27	; 11
    a2a4:	b7 b5       	in	r27, 0x27	; 39
    a2a6:	b3 b1       	in	r27, 0x03	; 3
    a2a8:	af ad       	ldd	r26, Y+63	; 0x3f
    a2aa:	ab a9       	ldd	r26, Y+51	; 0x33
    a2ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a2ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    a2b0:	9f 9d       	mul	r25, r15
    a2b2:	9b 99       	sbic	0x13, 3	; 19
    a2b4:	97 95       	ror	r25
    a2b6:	93 91       	.word	0x9193	; ????
    a2b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a2ba:	8b 89       	ldd	r24, Y+19	; 0x13
    a2bc:	87 85       	ldd	r24, Z+15	; 0x0f
    a2be:	83 81       	ldd	r24, Z+3	; 0x03
    a2c0:	80 82       	st	Z, r8
    a2c2:	84 86       	std	Z+12, r8	; 0x0c
    a2c4:	88 8a       	std	Y+16, r8	; 0x10
    a2c6:	8c 8e       	std	Y+28, r8	; 0x1c
    a2c8:	90 92 94 96 	sts	0x9694, r9
    a2cc:	98 9a       	sbi	0x13, 0	; 19
    a2ce:	9c 9e       	mul	r9, r28
    a2d0:	a0 a2       	std	Z+32, r10	; 0x20
    a2d2:	a4 a6       	std	Z+44, r10	; 0x2c
    a2d4:	a8 aa       	std	Y+48, r10	; 0x30
    a2d6:	ac ae       	std	Y+60, r10	; 0x3c
    a2d8:	b0 b2       	in	r11, 0x10	; 16
    a2da:	b4 b6       	in	r11, 0x34	; 52
    a2dc:	b8 ba       	out	0x18, r11	; 24
    a2de:	bc be       	out	0x3c, r11	; 60
    a2e0:	c0 c2       	rjmp	.+1408   	; 0xa862 <open_for_piece+0x4>
    a2e2:	c4 c6       	rjmp	.+3464   	; 0xb06c <RamTileStateMachine+0x8e>
    a2e4:	c8 ca       	rjmp	.-2672   	; 0x9876 <ProcessMusic+0x92>
    a2e6:	cc ce       	rjmp	.-616    	; 0xa080 <waves+0x80>
    a2e8:	d0 d2       	rcall	.+1440   	; 0xa88a <open_for_piece+0x2c>
    a2ea:	d4 d6       	rcall	.+3496   	; 0xb094 <RamTileStateMachine+0xb6>
    a2ec:	d8 da       	rcall	.-2640   	; 0x989e <ProcessMusic+0xba>
    a2ee:	dc de       	rcall	.-584    	; 0xa0a8 <waves+0xa8>
    a2f0:	e0 e2       	ldi	r30, 0x20	; 32
    a2f2:	e4 e6       	ldi	r30, 0x64	; 100
    a2f4:	e8 ea       	ldi	r30, 0xA8	; 168
    a2f6:	ec ee       	ldi	r30, 0xEC	; 236
    a2f8:	f0 f2       	brcs	.-68     	; 0xa2b6 <waves+0x2b6>
    a2fa:	f4 f6       	brge	.-68     	; 0xa2b8 <waves+0x2b8>
    a2fc:	f8 fa       	.word	0xfaf8	; ????
    a2fe:	fc fe       	.word	0xfefc	; ????
    a300:	7f 7f       	andi	r23, 0xFF	; 255
    a302:	7f 7f       	andi	r23, 0xFF	; 255
    a304:	7f 7f       	andi	r23, 0xFF	; 255
    a306:	7f 7f       	andi	r23, 0xFF	; 255
    a308:	7f 7f       	andi	r23, 0xFF	; 255
    a30a:	7f 7f       	andi	r23, 0xFF	; 255
    a30c:	7f 7f       	andi	r23, 0xFF	; 255
    a30e:	7f 7f       	andi	r23, 0xFF	; 255
    a310:	7f 7f       	andi	r23, 0xFF	; 255
    a312:	7f 7f       	andi	r23, 0xFF	; 255
    a314:	7f 7f       	andi	r23, 0xFF	; 255
    a316:	7f 7f       	andi	r23, 0xFF	; 255
    a318:	7f 7f       	andi	r23, 0xFF	; 255
    a31a:	7f 7f       	andi	r23, 0xFF	; 255
    a31c:	7f 7f       	andi	r23, 0xFF	; 255
    a31e:	7f 7f       	andi	r23, 0xFF	; 255
    a320:	7f 7f       	andi	r23, 0xFF	; 255
    a322:	7f 7f       	andi	r23, 0xFF	; 255
    a324:	7f 7f       	andi	r23, 0xFF	; 255
    a326:	7f 7f       	andi	r23, 0xFF	; 255
    a328:	7f 7f       	andi	r23, 0xFF	; 255
    a32a:	7f 7f       	andi	r23, 0xFF	; 255
    a32c:	7f 7f       	andi	r23, 0xFF	; 255
    a32e:	7f 7f       	andi	r23, 0xFF	; 255
    a330:	7f 7f       	andi	r23, 0xFF	; 255
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	7f 7f       	andi	r23, 0xFF	; 255
    a342:	7f 7f       	andi	r23, 0xFF	; 255
    a344:	7f 7f       	andi	r23, 0xFF	; 255
    a346:	7f 7f       	andi	r23, 0xFF	; 255
    a348:	7f 7f       	andi	r23, 0xFF	; 255
    a34a:	7f 7f       	andi	r23, 0xFF	; 255
    a34c:	7f 7f       	andi	r23, 0xFF	; 255
    a34e:	7f 7f       	andi	r23, 0xFF	; 255
    a350:	7f 7f       	andi	r23, 0xFF	; 255
    a352:	7f 7f       	andi	r23, 0xFF	; 255
    a354:	7f 7f       	andi	r23, 0xFF	; 255
    a356:	7f 7f       	andi	r23, 0xFF	; 255
    a358:	7f 7f       	andi	r23, 0xFF	; 255
    a35a:	7f 7f       	andi	r23, 0xFF	; 255
    a35c:	7f 7f       	andi	r23, 0xFF	; 255
    a35e:	7f 7f       	andi	r23, 0xFF	; 255
    a360:	7f 7f       	andi	r23, 0xFF	; 255
    a362:	7f 7f       	andi	r23, 0xFF	; 255
    a364:	7f 7f       	andi	r23, 0xFF	; 255
    a366:	7f 7f       	andi	r23, 0xFF	; 255
    a368:	7f 7f       	andi	r23, 0xFF	; 255
    a36a:	7f 7f       	andi	r23, 0xFF	; 255
    a36c:	7f 7f       	andi	r23, 0xFF	; 255
    a36e:	7f 7f       	andi	r23, 0xFF	; 255
    a370:	7f 7f       	andi	r23, 0xFF	; 255
    a372:	7f 7f       	andi	r23, 0xFF	; 255
    a374:	7f 7f       	andi	r23, 0xFF	; 255
    a376:	7f 7f       	andi	r23, 0xFF	; 255
    a378:	7f 7f       	andi	r23, 0xFF	; 255
    a37a:	7f 7f       	andi	r23, 0xFF	; 255
    a37c:	7f 7f       	andi	r23, 0xFF	; 255
    a37e:	7f 7f       	andi	r23, 0xFF	; 255
    a380:	80 80       	ld	r8, Z
    a382:	80 80       	ld	r8, Z
    a384:	80 80       	ld	r8, Z
    a386:	80 80       	ld	r8, Z
    a388:	80 80       	ld	r8, Z
    a38a:	80 80       	ld	r8, Z
    a38c:	80 80       	ld	r8, Z
    a38e:	80 80       	ld	r8, Z
    a390:	80 80       	ld	r8, Z
    a392:	80 80       	ld	r8, Z
    a394:	80 80       	ld	r8, Z
    a396:	80 80       	ld	r8, Z
    a398:	80 80       	ld	r8, Z
    a39a:	80 80       	ld	r8, Z
    a39c:	80 80       	ld	r8, Z
    a39e:	80 80       	ld	r8, Z
    a3a0:	80 80       	ld	r8, Z
    a3a2:	80 80       	ld	r8, Z
    a3a4:	80 80       	ld	r8, Z
    a3a6:	80 80       	ld	r8, Z
    a3a8:	80 80       	ld	r8, Z
    a3aa:	80 80       	ld	r8, Z
    a3ac:	80 80       	ld	r8, Z
    a3ae:	80 80       	ld	r8, Z
    a3b0:	80 80       	ld	r8, Z
    a3b2:	80 80       	ld	r8, Z
    a3b4:	80 80       	ld	r8, Z
    a3b6:	80 80       	ld	r8, Z
    a3b8:	80 80       	ld	r8, Z
    a3ba:	80 80       	ld	r8, Z
    a3bc:	80 80       	ld	r8, Z
    a3be:	80 80       	ld	r8, Z
    a3c0:	80 80       	ld	r8, Z
    a3c2:	80 80       	ld	r8, Z
    a3c4:	80 80       	ld	r8, Z
    a3c6:	80 80       	ld	r8, Z
    a3c8:	80 80       	ld	r8, Z
    a3ca:	80 80       	ld	r8, Z
    a3cc:	80 80       	ld	r8, Z
    a3ce:	80 80       	ld	r8, Z
    a3d0:	80 80       	ld	r8, Z
    a3d2:	80 80       	ld	r8, Z
    a3d4:	80 80       	ld	r8, Z
    a3d6:	80 80       	ld	r8, Z
    a3d8:	80 80       	ld	r8, Z
    a3da:	80 80       	ld	r8, Z
    a3dc:	80 80       	ld	r8, Z
    a3de:	80 80       	ld	r8, Z
    a3e0:	80 80       	ld	r8, Z
    a3e2:	80 80       	ld	r8, Z
    a3e4:	80 80       	ld	r8, Z
    a3e6:	80 80       	ld	r8, Z
    a3e8:	80 80       	ld	r8, Z
    a3ea:	80 80       	ld	r8, Z
    a3ec:	80 80       	ld	r8, Z
    a3ee:	80 80       	ld	r8, Z
    a3f0:	80 80       	ld	r8, Z
    a3f2:	80 80       	ld	r8, Z
    a3f4:	80 80       	ld	r8, Z
    a3f6:	80 80       	ld	r8, Z
    a3f8:	80 80       	ld	r8, Z
    a3fa:	80 80       	ld	r8, Z
    a3fc:	80 80       	ld	r8, Z
    a3fe:	80 80       	ld	r8, Z
    a400:	7f 7f       	andi	r23, 0xFF	; 255
    a402:	7f 7f       	andi	r23, 0xFF	; 255
    a404:	7f 7f       	andi	r23, 0xFF	; 255
    a406:	7f 7f       	andi	r23, 0xFF	; 255
    a408:	7f 7f       	andi	r23, 0xFF	; 255
    a40a:	7f 7f       	andi	r23, 0xFF	; 255
    a40c:	7f 7f       	andi	r23, 0xFF	; 255
    a40e:	7f 7f       	andi	r23, 0xFF	; 255
    a410:	7f 7f       	andi	r23, 0xFF	; 255
    a412:	7f 7f       	andi	r23, 0xFF	; 255
    a414:	7f 7f       	andi	r23, 0xFF	; 255
    a416:	7f 7f       	andi	r23, 0xFF	; 255
    a418:	7f 7f       	andi	r23, 0xFF	; 255
    a41a:	7f 7f       	andi	r23, 0xFF	; 255
    a41c:	7f 7f       	andi	r23, 0xFF	; 255
    a41e:	7f 7f       	andi	r23, 0xFF	; 255
    a420:	7f 7f       	andi	r23, 0xFF	; 255
    a422:	7f 7f       	andi	r23, 0xFF	; 255
    a424:	7f 7f       	andi	r23, 0xFF	; 255
    a426:	7f 7f       	andi	r23, 0xFF	; 255
    a428:	7f 7f       	andi	r23, 0xFF	; 255
    a42a:	7f 7f       	andi	r23, 0xFF	; 255
    a42c:	7f 7f       	andi	r23, 0xFF	; 255
    a42e:	7f 7f       	andi	r23, 0xFF	; 255
    a430:	7f 7f       	andi	r23, 0xFF	; 255
    a432:	7f 7f       	andi	r23, 0xFF	; 255
    a434:	7f 7f       	andi	r23, 0xFF	; 255
    a436:	7f 7f       	andi	r23, 0xFF	; 255
    a438:	7f 7f       	andi	r23, 0xFF	; 255
    a43a:	7f 7f       	andi	r23, 0xFF	; 255
    a43c:	7f 7f       	andi	r23, 0xFF	; 255
    a43e:	7f 7f       	andi	r23, 0xFF	; 255
    a440:	80 80       	ld	r8, Z
    a442:	80 80       	ld	r8, Z
    a444:	80 80       	ld	r8, Z
    a446:	80 80       	ld	r8, Z
    a448:	80 80       	ld	r8, Z
    a44a:	80 80       	ld	r8, Z
    a44c:	80 80       	ld	r8, Z
    a44e:	80 80       	ld	r8, Z
    a450:	80 80       	ld	r8, Z
    a452:	80 80       	ld	r8, Z
    a454:	80 80       	ld	r8, Z
    a456:	80 80       	ld	r8, Z
    a458:	80 80       	ld	r8, Z
    a45a:	80 80       	ld	r8, Z
    a45c:	80 80       	ld	r8, Z
    a45e:	80 80       	ld	r8, Z
    a460:	80 80       	ld	r8, Z
    a462:	80 80       	ld	r8, Z
    a464:	80 80       	ld	r8, Z
    a466:	80 80       	ld	r8, Z
    a468:	80 80       	ld	r8, Z
    a46a:	80 80       	ld	r8, Z
    a46c:	80 80       	ld	r8, Z
    a46e:	80 80       	ld	r8, Z
    a470:	80 80       	ld	r8, Z
    a472:	80 80       	ld	r8, Z
    a474:	80 80       	ld	r8, Z
    a476:	80 80       	ld	r8, Z
    a478:	80 80       	ld	r8, Z
    a47a:	80 80       	ld	r8, Z
    a47c:	80 80       	ld	r8, Z
    a47e:	80 80       	ld	r8, Z
    a480:	80 80       	ld	r8, Z
    a482:	80 80       	ld	r8, Z
    a484:	80 80       	ld	r8, Z
    a486:	80 80       	ld	r8, Z
    a488:	80 80       	ld	r8, Z
    a48a:	80 80       	ld	r8, Z
    a48c:	80 80       	ld	r8, Z
    a48e:	80 80       	ld	r8, Z
    a490:	80 80       	ld	r8, Z
    a492:	80 80       	ld	r8, Z
    a494:	80 80       	ld	r8, Z
    a496:	80 80       	ld	r8, Z
    a498:	80 80       	ld	r8, Z
    a49a:	80 80       	ld	r8, Z
    a49c:	80 80       	ld	r8, Z
    a49e:	80 80       	ld	r8, Z
    a4a0:	80 80       	ld	r8, Z
    a4a2:	80 80       	ld	r8, Z
    a4a4:	80 80       	ld	r8, Z
    a4a6:	80 80       	ld	r8, Z
    a4a8:	80 80       	ld	r8, Z
    a4aa:	80 80       	ld	r8, Z
    a4ac:	80 80       	ld	r8, Z
    a4ae:	80 80       	ld	r8, Z
    a4b0:	80 80       	ld	r8, Z
    a4b2:	80 80       	ld	r8, Z
    a4b4:	80 80       	ld	r8, Z
    a4b6:	80 80       	ld	r8, Z
    a4b8:	80 80       	ld	r8, Z
    a4ba:	80 80       	ld	r8, Z
    a4bc:	80 80       	ld	r8, Z
    a4be:	80 80       	ld	r8, Z
    a4c0:	80 80       	ld	r8, Z
    a4c2:	80 80       	ld	r8, Z
    a4c4:	80 80       	ld	r8, Z
    a4c6:	80 80       	ld	r8, Z
    a4c8:	80 80       	ld	r8, Z
    a4ca:	80 80       	ld	r8, Z
    a4cc:	80 80       	ld	r8, Z
    a4ce:	80 80       	ld	r8, Z
    a4d0:	80 80       	ld	r8, Z
    a4d2:	80 80       	ld	r8, Z
    a4d4:	80 80       	ld	r8, Z
    a4d6:	80 80       	ld	r8, Z
    a4d8:	80 80       	ld	r8, Z
    a4da:	80 80       	ld	r8, Z
    a4dc:	80 80       	ld	r8, Z
    a4de:	80 80       	ld	r8, Z
    a4e0:	80 80       	ld	r8, Z
    a4e2:	80 80       	ld	r8, Z
    a4e4:	80 80       	ld	r8, Z
    a4e6:	80 80       	ld	r8, Z
    a4e8:	80 80       	ld	r8, Z
    a4ea:	80 80       	ld	r8, Z
    a4ec:	80 80       	ld	r8, Z
    a4ee:	80 80       	ld	r8, Z
    a4f0:	80 80       	ld	r8, Z
    a4f2:	80 80       	ld	r8, Z
    a4f4:	80 80       	ld	r8, Z
    a4f6:	80 80       	ld	r8, Z
    a4f8:	80 80       	ld	r8, Z
    a4fa:	80 80       	ld	r8, Z
    a4fc:	80 80       	ld	r8, Z
    a4fe:	80 80       	ld	r8, Z

0000a500 <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    a500:	08 95       	ret

0000a502 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
	}
    a502:	08 95       	ret

0000a504 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    a504:	98 2f       	mov	r25, r24
	if(speed==0){
    a506:	88 23       	and	r24, r24
    a508:	19 f4       	brne	.+6      	; 0xa510 <FadeIn+0xc>
		DDRC=0xff;
    a50a:	8f ef       	ldi	r24, 0xFF	; 255
    a50c:	87 b9       	out	0x07, r24	; 7
    a50e:	08 95       	ret
		return;
	}
	fadeStep=1;
    a510:	81 e0       	ldi	r24, 0x01	; 1
    a512:	80 93 2b 0e 	sts	0x0E2B, r24
	fadeDir=1;
    a516:	80 93 27 0e 	sts	0x0E27, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a51a:	90 93 26 0e 	sts	0x0E26, r25
	currFadeFrame=0;
    a51e:	10 92 2a 0e 	sts	0x0E2A, r1
	fadeActive=true;
    a522:	80 93 29 0e 	sts	0x0E29, r24
		
	if(blocking){
    a526:	66 23       	and	r22, r22
    a528:	21 f0       	breq	.+8      	; 0xa532 <FadeIn+0x2e>
		while(fadeActive==true);
    a52a:	80 91 29 0e 	lds	r24, 0x0E29
    a52e:	88 23       	and	r24, r24
    a530:	e1 f7       	brne	.-8      	; 0xa52a <FadeIn+0x26>
    a532:	08 95       	ret

0000a534 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    a534:	98 2f       	mov	r25, r24
	if(speed==0){
    a536:	88 23       	and	r24, r24
    a538:	11 f4       	brne	.+4      	; 0xa53e <FadeOut+0xa>
		DDRC=0;
    a53a:	17 b8       	out	0x07, r1	; 7
    a53c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    a53e:	8c e0       	ldi	r24, 0x0C	; 12
    a540:	80 93 2b 0e 	sts	0x0E2B, r24
	fadeDir=-1;
    a544:	8f ef       	ldi	r24, 0xFF	; 255
    a546:	80 93 27 0e 	sts	0x0E27, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a54a:	90 93 26 0e 	sts	0x0E26, r25
	currFadeFrame=0;
    a54e:	10 92 2a 0e 	sts	0x0E2A, r1
	fadeActive=true;
    a552:	81 e0       	ldi	r24, 0x01	; 1
    a554:	80 93 29 0e 	sts	0x0E29, r24
		
	if(blocking){
    a558:	66 23       	and	r22, r22
    a55a:	21 f0       	breq	.+8      	; 0xa564 <FadeOut+0x30>
		while(fadeActive==true);
    a55c:	80 91 29 0e 	lds	r24, 0x0E29
    a560:	88 23       	and	r24, r24
    a562:	e1 f7       	brne	.-8      	; 0xa55c <FadeOut+0x28>
    a564:	08 95       	ret

0000a566 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a566:	80 91 29 0e 	lds	r24, 0x0E29
    a56a:	88 23       	and	r24, r24
    a56c:	f9 f0       	breq	.+62     	; 0xa5ac <ProcessFading+0x46>
		if(currFadeFrame==0){
    a56e:	80 91 2a 0e 	lds	r24, 0x0E2A
    a572:	88 23       	and	r24, r24
    a574:	c1 f4       	brne	.+48     	; 0xa5a6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    a576:	80 91 26 0e 	lds	r24, 0x0E26
    a57a:	80 93 2a 0e 	sts	0x0E2A, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a57e:	80 91 2b 0e 	lds	r24, 0x0E2B
    a582:	e8 2f       	mov	r30, r24
    a584:	f0 e0       	ldi	r31, 0x00	; 0
    a586:	e9 52       	subi	r30, 0x29	; 41
    a588:	ff 4f       	sbci	r31, 0xFF	; 255
    a58a:	e4 91       	lpm	r30, Z+
    a58c:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a58e:	90 91 27 0e 	lds	r25, 0x0E27
    a592:	98 0f       	add	r25, r24
    a594:	90 93 2b 0e 	sts	0x0E2B, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a598:	99 23       	and	r25, r25
    a59a:	11 f0       	breq	.+4      	; 0xa5a0 <ProcessFading+0x3a>
    a59c:	9d 30       	cpi	r25, 0x0D	; 13
    a59e:	31 f4       	brne	.+12     	; 0xa5ac <ProcessFading+0x46>
				fadeActive=false;
    a5a0:	10 92 29 0e 	sts	0x0E29, r1
    a5a4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a5a6:	81 50       	subi	r24, 0x01	; 1
    a5a8:	80 93 2a 0e 	sts	0x0E2A, r24
    a5ac:	08 95       	ret

0000a5ae <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		//todo just rename ProcessFading to VideoModeVsync to eliminate call
		ProcessFading();
    a5ae:	db cf       	rjmp	.-74     	; 0xa566 <ProcessFading>


	}
    a5b0:	08 95       	ret

0000a5b2 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a5b2:	0f 93       	push	r16
    a5b4:	1f 93       	push	r17
    a5b6:	cf 93       	push	r28
    a5b8:	df 93       	push	r29
    a5ba:	8c 01       	movw	r16, r24
    a5bc:	c0 e0       	ldi	r28, 0x00	; 0
    a5be:	d0 e0       	ldi	r29, 0x00	; 0
    a5c0:	07 c0       	rjmp	.+14     	; 0xa5d0 <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    a5c2:	0e 94 96 49 	call	0x932c	; 0x932c <GetVsyncFlag>
    a5c6:	88 23       	and	r24, r24
    a5c8:	e1 f3       	breq	.-8      	; 0xa5c2 <WaitVsync+0x10>
		ClearVsyncFlag();		
    a5ca:	0e 94 99 49 	call	0x9332	; 0x9332 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a5ce:	21 96       	adiw	r28, 0x01	; 1
    a5d0:	c0 17       	cp	r28, r16
    a5d2:	d1 07       	cpc	r29, r17
    a5d4:	b4 f3       	brlt	.-20     	; 0xa5c2 <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a5d6:	df 91       	pop	r29
    a5d8:	cf 91       	pop	r28
    a5da:	1f 91       	pop	r17
    a5dc:	0f 91       	pop	r16
    a5de:	08 95       	ret

0000a5e0 <rtl_FindChar>:

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
}

uint8_t rtl_FindChar(int8_t ch, const int8_t *fmap){
    a5e0:	20 e0       	ldi	r18, 0x00	; 0
    a5e2:	30 e0       	ldi	r19, 0x00	; 0
    a5e4:	42 2f       	mov	r20, r18
	uint8_t pos = 0;

	int8_t t;
	while(true){
		t = pgm_read_byte(&fmap[pos]);
    a5e6:	fb 01       	movw	r30, r22
    a5e8:	e2 0f       	add	r30, r18
    a5ea:	f1 1d       	adc	r31, r1
    a5ec:	94 91       	lpm	r25, Z+

		if(t == 0 || pos == 255)
    a5ee:	99 23       	and	r25, r25
    a5f0:	59 f0       	breq	.+22     	; 0xa608 <rtl_FindChar+0x28>
    a5f2:	2f 3f       	cpi	r18, 0xFF	; 255
    a5f4:	31 05       	cpc	r19, r1
    a5f6:	41 f0       	breq	.+16     	; 0xa608 <rtl_FindChar+0x28>
    a5f8:	2f 5f       	subi	r18, 0xFF	; 255
    a5fa:	3f 4f       	sbci	r19, 0xFF	; 255
			return 255;

		if(t != ch){
    a5fc:	98 17       	cp	r25, r24
    a5fe:	91 f7       	brne	.-28     	; 0xa5e4 <rtl_FindChar+0x4>
			pos++;
			continue;
		}
		return pos+rtl_FontStartOffset;
    a600:	80 91 5e 0e 	lds	r24, 0x0E5E
    a604:	84 0f       	add	r24, r20
    a606:	08 95       	ret
    a608:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    a60a:	08 95       	ret

0000a60c <rtl_RamifyFontEx>:
			return pos;
		pos++;
	}
}

void rtl_RamifyFontEx(uint16_t rtoff, const int8_t *cmap, const int8_t *chrlst, const uint8_t *ftiles, uint8_t backcolor, uint8_t fontcolor, bool speckles){
    a60c:	a0 e0       	ldi	r26, 0x00	; 0
    a60e:	b0 e0       	ldi	r27, 0x00	; 0
    a610:	ec e0       	ldi	r30, 0x0C	; 12
    a612:	f3 e5       	ldi	r31, 0x53	; 83
    a614:	0c 94 fd 73 	jmp	0xe7fa	; 0xe7fa <__prologue_saves__>
    a618:	5b 01       	movw	r10, r22
    a61a:	d4 2e       	mov	r13, r20
    a61c:	35 2e       	mov	r3, r21
    a61e:	49 01       	movw	r8, r18
    a620:	40 2e       	mov	r4, r16
    a622:	5e 2c       	mov	r5, r14
	uint8_t moff = 0;
	uint8_t t,t2;
	uint8_t c;
	rtl_FontStartOffset = rtoff;
    a624:	80 93 5e 0e 	sts	0x0E5E, r24
	rtl_CharMap = (int8_t *)cmap;
    a628:	70 93 93 0f 	sts	0x0F93, r23
    a62c:	60 93 92 0f 	sts	0x0F92, r22
	rtoff *= 64;
    a630:	ec 01       	movw	r28, r24
    a632:	66 e0       	ldi	r22, 0x06	; 6
    a634:	cc 0f       	add	r28, r28
    a636:	dd 1f       	adc	r29, r29
    a638:	6a 95       	dec	r22
    a63a:	e1 f7       	brne	.-8      	; 0xa634 <rtl_RamifyFontEx+0x28>
    a63c:	ee 24       	eor	r14, r14
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
			t = pgm_read_byte(&ftiles[i]);
			for(u8 j=0;j<8;j++){
				if(t & (128>>j)){
    a63e:	50 e8       	ldi	r21, 0x80	; 128
    a640:	65 2e       	mov	r6, r21
    a642:	71 2c       	mov	r7, r1

		//do columns font speckles
		if(speckles){
			t = pgm_read_byte(&compfontspeckles[t2]);
			if(t != 255)
				ram_tiles[rtoff-64+t] = 255;
    a644:	22 24       	eor	r2, r2
    a646:	2a 94       	dec	r2
    a648:	61 c0       	rjmp	.+194    	; 0xa70c <rtl_RamifyFontEx+0x100>
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;

	while(rtoff < (RAM_TILES_COUNT*64)){
		c = pgm_read_byte(&cmap[moff++]);
    a64a:	f5 01       	movw	r30, r10
    a64c:	ee 0d       	add	r30, r14
    a64e:	f1 1d       	adc	r31, r1
    a650:	a4 91       	lpm	r26, Z+
		if(c == 0)
    a652:	aa 23       	and	r26, r26
    a654:	09 f4       	brne	.+2      	; 0xa658 <rtl_RamifyFontEx+0x4c>
    a656:	5f c0       	rjmp	.+190    	; 0xa716 <rtl_RamifyFontEx+0x10a>
			return;
		

		t2 = rtl_SearchCharList(c,chrlst);
    a658:	8d 2d       	mov	r24, r13
    a65a:	93 2d       	mov	r25, r3
    a65c:	fc 01       	movw	r30, r24
    a65e:	fe 2e       	mov	r15, r30
    a660:	fd 18       	sub	r15, r13


uint8_t rtl_SearchCharList(int8_t ch, const int8_t *chrlst){
	int8_t pos=0,t;
	while(true){
		t = pgm_read_byte(&chrlst[pos]);
    a662:	84 91       	lpm	r24, Z+
		if(t == 0 || t == 255)
    a664:	88 23       	and	r24, r24
    a666:	09 f4       	brne	.+2      	; 0xa66a <rtl_RamifyFontEx+0x5e>
    a668:	56 c0       	rjmp	.+172    	; 0xa716 <rtl_RamifyFontEx+0x10a>
    a66a:	31 96       	adiw	r30, 0x01	; 1
			return 255;
		if(t == ch)
    a66c:	8a 17       	cp	r24, r26
    a66e:	b9 f7       	brne	.-18     	; 0xa65e <rtl_RamifyFontEx+0x52>
			return;
		

		t2 = rtl_SearchCharList(c,chrlst);

		if(t2 == 255){
    a670:	8f ef       	ldi	r24, 0xFF	; 255
    a672:	f8 16       	cp	r15, r24
    a674:	09 f4       	brne	.+2      	; 0xa678 <rtl_RamifyFontEx+0x6c>
    a676:	4f c0       	rjmp	.+158    	; 0xa716 <rtl_RamifyFontEx+0x10a>
			return;	
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
    a678:	8f 2d       	mov	r24, r15
    a67a:	90 e0       	ldi	r25, 0x00	; 0
    a67c:	9c 01       	movw	r18, r24
    a67e:	43 e0       	ldi	r20, 0x03	; 3
    a680:	22 0f       	add	r18, r18
    a682:	33 1f       	adc	r19, r19
    a684:	4a 95       	dec	r20
    a686:	e1 f7       	brne	.-8      	; 0xa680 <rtl_RamifyFontEx+0x74>
    a688:	bc 01       	movw	r22, r24
    a68a:	6f 5f       	subi	r22, 0xFF	; 255
    a68c:	7f 4f       	sbci	r23, 0xFF	; 255
    a68e:	83 e0       	ldi	r24, 0x03	; 3
    a690:	66 0f       	add	r22, r22
    a692:	77 1f       	adc	r23, r23
    a694:	8a 95       	dec	r24
    a696:	e1 f7       	brne	.-8      	; 0xa690 <rtl_RamifyFontEx+0x84>
    a698:	a4 01       	movw	r20, r8
    a69a:	42 0f       	add	r20, r18
    a69c:	53 1f       	adc	r21, r19
    a69e:	21 c0       	rjmp	.+66     	; 0xa6e2 <rtl_RamifyFontEx+0xd6>
			t = pgm_read_byte(&ftiles[i]);
    a6a0:	fa 01       	movw	r30, r20
    a6a2:	84 91       	lpm	r24, Z+
    a6a4:	fe 01       	movw	r30, r28
    a6a6:	e4 5d       	subi	r30, 0xD4	; 212
    a6a8:	fb 4f       	sbci	r31, 0xFB	; 251
    a6aa:	a0 e0       	ldi	r26, 0x00	; 0
    a6ac:	b0 e0       	ldi	r27, 0x00	; 0
			for(u8 j=0;j<8;j++){
				if(t & (128>>j)){
    a6ae:	08 2f       	mov	r16, r24
    a6b0:	10 e0       	ldi	r17, 0x00	; 0
    a6b2:	c3 01       	movw	r24, r6
    a6b4:	0a 2e       	mov	r0, r26
    a6b6:	02 c0       	rjmp	.+4      	; 0xa6bc <rtl_RamifyFontEx+0xb0>
    a6b8:	95 95       	asr	r25
    a6ba:	87 95       	ror	r24
    a6bc:	0a 94       	dec	r0
    a6be:	e2 f7       	brpl	.-8      	; 0xa6b8 <rtl_RamifyFontEx+0xac>
    a6c0:	80 23       	and	r24, r16
    a6c2:	91 23       	and	r25, r17
    a6c4:	89 2b       	or	r24, r25
    a6c6:	11 f0       	breq	.+4      	; 0xa6cc <rtl_RamifyFontEx+0xc0>
						ram_tiles[rtoff] = fontcolor;
    a6c8:	50 82       	st	Z, r5
    a6ca:	01 c0       	rjmp	.+2      	; 0xa6ce <rtl_RamifyFontEx+0xc2>
				}
				else
					ram_tiles[rtoff] = backcolor;
    a6cc:	40 82       	st	Z, r4
    a6ce:	11 96       	adiw	r26, 0x01	; 1
    a6d0:	31 96       	adiw	r30, 0x01	; 1
			return;	
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
			t = pgm_read_byte(&ftiles[i]);
			for(u8 j=0;j<8;j++){
    a6d2:	a8 30       	cpi	r26, 0x08	; 8
    a6d4:	b1 05       	cpc	r27, r1
    a6d6:	69 f7       	brne	.-38     	; 0xa6b2 <rtl_RamifyFontEx+0xa6>
    a6d8:	28 96       	adiw	r28, 0x08	; 8

		if(t2 == 255){
			return;	
		}
	
		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
    a6da:	2f 5f       	subi	r18, 0xFF	; 255
    a6dc:	3f 4f       	sbci	r19, 0xFF	; 255
    a6de:	4f 5f       	subi	r20, 0xFF	; 255
    a6e0:	5f 4f       	sbci	r21, 0xFF	; 255
    a6e2:	26 17       	cp	r18, r22
    a6e4:	37 07       	cpc	r19, r23
    a6e6:	e0 f2       	brcs	.-72     	; 0xa6a0 <rtl_RamifyFontEx+0x94>
				rtoff++;
			}
		}

		//do columns font speckles
		if(speckles){
    a6e8:	cc 20       	and	r12, r12
    a6ea:	79 f0       	breq	.+30     	; 0xa70a <rtl_RamifyFontEx+0xfe>
			t = pgm_read_byte(&compfontspeckles[t2]);
    a6ec:	ef 2d       	mov	r30, r15
    a6ee:	f0 e0       	ldi	r31, 0x00	; 0
    a6f0:	e8 52       	subi	r30, 0x28	; 40
    a6f2:	f4 4e       	sbci	r31, 0xE4	; 228
    a6f4:	84 91       	lpm	r24, Z+
			if(t != 255)
    a6f6:	8f 3f       	cpi	r24, 0xFF	; 255
    a6f8:	41 f0       	breq	.+16     	; 0xa70a <rtl_RamifyFontEx+0xfe>
				ram_tiles[rtoff-64+t] = 255;
    a6fa:	fe 01       	movw	r30, r28
    a6fc:	e4 5d       	subi	r30, 0xD4	; 212
    a6fe:	fb 4f       	sbci	r31, 0xFB	; 251
    a700:	e8 0f       	add	r30, r24
    a702:	f1 1d       	adc	r31, r1
    a704:	e0 54       	subi	r30, 0x40	; 64
    a706:	f0 40       	sbci	r31, 0x00	; 0
    a708:	20 82       	st	Z, r2
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;

	while(rtoff < (RAM_TILES_COUNT*64)){
		c = pgm_read_byte(&cmap[moff++]);
    a70a:	e3 94       	inc	r14
	uint8_t c;
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;

	while(rtoff < (RAM_TILES_COUNT*64)){
    a70c:	f8 e0       	ldi	r31, 0x08	; 8
    a70e:	c0 3c       	cpi	r28, 0xC0	; 192
    a710:	df 07       	cpc	r29, r31
    a712:	08 f4       	brcc	.+2      	; 0xa716 <rtl_RamifyFontEx+0x10a>
    a714:	9a cf       	rjmp	.-204    	; 0xa64a <rtl_RamifyFontEx+0x3e>
			if(t != 255)
				ram_tiles[rtoff-64+t] = 255;
		}		

	}
}
    a716:	cd b7       	in	r28, 0x3d	; 61
    a718:	de b7       	in	r29, 0x3e	; 62
    a71a:	e2 e1       	ldi	r30, 0x12	; 18
    a71c:	0c 94 19 74 	jmp	0xe832	; 0xe832 <__epilogue_restores__>

0000a720 <rtl_PrintEx>:


void rtl_PrintEx(uint8_t x, uint8_t y, const char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
    a720:	a0 e0       	ldi	r26, 0x00	; 0
    a722:	b0 e0       	ldi	r27, 0x00	; 0
    a724:	e6 e9       	ldi	r30, 0x96	; 150
    a726:	f3 e5       	ldi	r31, 0x53	; 83
    a728:	0c 94 07 74 	jmp	0xe80e	; 0xe80e <__prologue_saves__+0x14>
    a72c:	08 2f       	mov	r16, r24
    a72e:	6a 01       	movw	r12, r20
    a730:	79 01       	movw	r14, r18

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    a732:	8e e1       	ldi	r24, 0x1E	; 30
    a734:	68 9f       	mul	r22, r24
    a736:	e0 01       	movw	r28, r0
    a738:	11 24       	eor	r1, r1
    a73a:	10 e0       	ldi	r17, 0x00	; 0
    a73c:	c0 5e       	subi	r28, 0xE0	; 224
    a73e:	de 4f       	sbci	r29, 0xFE	; 254
    a740:	01 c0       	rjmp	.+2      	; 0xa744 <rtl_PrintEx+0x24>
    a742:	0f 5f       	subi	r16, 0xFF	; 255
void rtl_PrintEx(uint8_t x, uint8_t y, const char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
	uint8_t t,i=0;
	int8_t c;

	while(true){
		c = pgm_read_byte(&string[i++]);
    a744:	f6 01       	movw	r30, r12
    a746:	e1 0f       	add	r30, r17
    a748:	f1 1d       	adc	r31, r1
    a74a:	1f 5f       	subi	r17, 0xFF	; 255
    a74c:	84 91       	lpm	r24, Z+
		
		if(c == 0)
    a74e:	88 23       	and	r24, r24
    a750:	69 f0       	breq	.+26     	; 0xa76c <rtl_PrintEx+0x4c>
			return;

		if(x > VRAM_TILES_H-1){
    a752:	0e 31       	cpi	r16, 0x1E	; 30
    a754:	b0 f7       	brcc	.-20     	; 0xa742 <rtl_PrintEx+0x22>
			x++;
			continue;
		}		
		else if(c == ' '){
    a756:	80 32       	cpi	r24, 0x20	; 32
    a758:	a1 f3       	breq	.-24     	; 0xa742 <rtl_PrintEx+0x22>
		//	rtl_SetVram(x,y,blank);
			x++;
			continue;
		}

		t = rtl_FindChar(c,cmap);
    a75a:	b7 01       	movw	r22, r14
    a75c:	41 df       	rcall	.-382    	; 0xa5e0 <rtl_FindChar>

		if(t > RAM_TILES_COUNT){
    a75e:	84 32       	cpi	r24, 0x24	; 36
    a760:	80 f7       	brcc	.-32     	; 0xa742 <rtl_PrintEx+0x22>

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    a762:	fe 01       	movw	r30, r28
    a764:	e0 0f       	add	r30, r16
    a766:	f1 1d       	adc	r31, r1
    a768:	80 83       	st	Z, r24
    a76a:	eb cf       	rjmp	.-42     	; 0xa742 <rtl_PrintEx+0x22>
			continue;
		}

		rtl_SetVram(x++,y,t);
	}
}
    a76c:	cd b7       	in	r28, 0x3d	; 61
    a76e:	de b7       	in	r29, 0x3e	; 62
    a770:	e8 e0       	ldi	r30, 0x08	; 8
    a772:	0c 94 23 74 	jmp	0xe846	; 0xe846 <__epilogue_restores__+0x14>

0000a776 <rtl_Print>:


void rtl_Print(uint8_t x, uint8_t y, const char *string){
    a776:	ef 92       	push	r14
    a778:	0f 93       	push	r16
	rtl_PrintEx(x,y,string,rtl_CharMap,rtl_FontStartOffset,0);
    a77a:	20 91 92 0f 	lds	r18, 0x0F92
    a77e:	30 91 93 0f 	lds	r19, 0x0F93
    a782:	00 91 5e 0e 	lds	r16, 0x0E5E
    a786:	ee 24       	eor	r14, r14
    a788:	cb df       	rcall	.-106    	; 0xa720 <rtl_PrintEx>
}
    a78a:	0f 91       	pop	r16
    a78c:	ef 90       	pop	r14
    a78e:	08 95       	ret

0000a790 <add_piece>:
inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
 void add_piece(uint8_t p){
    a790:	1f 93       	push	r17
	for(uint8_t i=0;i<3;i++){//smaller than inlined
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
    a792:	90 e0       	ldi	r25, 0x00	; 0
    a794:	fc 01       	movw	r30, r24
    a796:	e3 59       	subi	r30, 0x93	; 147
    a798:	f1 4f       	sbci	r31, 0xF1	; 241
    a79a:	10 81       	ld	r17, Z
    a79c:	fc 01       	movw	r30, r24
    a79e:	e5 58       	subi	r30, 0x85	; 133
    a7a0:	f0 4f       	sbci	r31, 0xF0	; 240
    a7a2:	50 81       	ld	r21, Z
    a7a4:	52 95       	swap	r21
    a7a6:	55 0f       	add	r21, r21
    a7a8:	55 0f       	add	r21, r21
    a7aa:	50 7c       	andi	r21, 0xC0	; 192



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    a7ac:	fc 01       	movw	r30, r24
    a7ae:	e0 59       	subi	r30, 0x90	; 144
    a7b0:	f0 4f       	sbci	r31, 0xF0	; 240
    a7b2:	40 81       	ld	r20, Z
    a7b4:	20 e6       	ldi	r18, 0x60	; 96
    a7b6:	30 e0       	ldi	r19, 0x00	; 0
    a7b8:	82 9f       	mul	r24, r18
    a7ba:	b0 01       	movw	r22, r0
    a7bc:	83 9f       	mul	r24, r19
    a7be:	70 0d       	add	r23, r0
    a7c0:	92 9f       	mul	r25, r18
    a7c2:	70 0d       	add	r23, r0
    a7c4:	11 24       	eor	r1, r1
    a7c6:	64 0f       	add	r22, r20
    a7c8:	71 1d       	adc	r23, r1
    a7ca:	dc 01       	movw	r26, r24
    a7cc:	aa 0f       	add	r26, r26
    a7ce:	bb 1f       	adc	r27, r27
    a7d0:	a8 0f       	add	r26, r24
    a7d2:	b9 1f       	adc	r27, r25
    a7d4:	ad 5b       	subi	r26, 0xBD	; 189
    a7d6:	b0 4f       	sbci	r27, 0xF0	; 240
    a7d8:	20 e0       	ldi	r18, 0x00	; 0
    a7da:	30 e0       	ldi	r19, 0x00	; 0
    a7dc:	81 2f       	mov	r24, r17
    a7de:	82 0f       	add	r24, r18
    a7e0:	90 e0       	ldi	r25, 0x00	; 0
    a7e2:	fc 01       	movw	r30, r24
    a7e4:	ee 0f       	add	r30, r30
    a7e6:	ff 1f       	adc	r31, r31
    a7e8:	e8 0f       	add	r30, r24
    a7ea:	f9 1f       	adc	r31, r25
    a7ec:	ee 0f       	add	r30, r30
    a7ee:	ff 1f       	adc	r31, r31
    a7f0:	e6 0f       	add	r30, r22
    a7f2:	f7 1f       	adc	r31, r23
    a7f4:	ee 58       	subi	r30, 0x8E	; 142
    a7f6:	f1 4f       	sbci	r31, 0xF1	; 241
    a7f8:	8d 91       	ld	r24, X+
    a7fa:	85 2b       	or	r24, r21
    a7fc:	80 83       	st	Z, r24
    a7fe:	2f 5f       	subi	r18, 0xFF	; 255
    a800:	3f 4f       	sbci	r19, 0xFF	; 255
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
inline bool get_scoring(uint8_t x, uint8_t y, uint8_t p){return	well[(p*WELLSIZE)+x+(y*6)]&		0b10000000;}
 void add_piece(uint8_t p){
	for(uint8_t i=0;i<3;i++){//smaller than inlined
    a802:	23 30       	cpi	r18, 0x03	; 3
    a804:	31 05       	cpc	r19, r1
    a806:	51 f7       	brne	.-44     	; 0xa7dc <add_piece+0x4c>
		set_well(piecex[p],piecey[p]+i,p,piece[(p*3)+i]|(halfstep[p]*HALFSTEP));
		}
	}//set_well(piecex[p],piecey[p]+0,p,piece[(p*3)+0]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+1,p,piece[(p*3)+1]|(halfstep[p]*HALFSTEP));set_well(piecex[p],piecey[p]+2,p,piece[(p*3)+2]|(halfstep[p]*HALFSTEP));}
    a808:	1f 91       	pop	r17
    a80a:	08 95       	ret

0000a80c <blank_piece>:
 void blank_piece(uint8_t p){
	uint8_t off = piecex[p]+(piecey[p]*6)+(p*WELLSIZE);
    a80c:	a8 2f       	mov	r26, r24
    a80e:	b0 e0       	ldi	r27, 0x00	; 0
    a810:	80 e6       	ldi	r24, 0x60	; 96
    a812:	90 e0       	ldi	r25, 0x00	; 0
    a814:	9c 01       	movw	r18, r24
    a816:	a2 9f       	mul	r26, r18
    a818:	c0 01       	movw	r24, r0
    a81a:	a3 9f       	mul	r26, r19
    a81c:	90 0d       	add	r25, r0
    a81e:	b2 9f       	mul	r27, r18
    a820:	90 0d       	add	r25, r0
    a822:	11 24       	eor	r1, r1
    a824:	fd 01       	movw	r30, r26
    a826:	e0 59       	subi	r30, 0x90	; 144
    a828:	f0 4f       	sbci	r31, 0xF0	; 240
    a82a:	20 81       	ld	r18, Z
    a82c:	28 0f       	add	r18, r24
    a82e:	a3 59       	subi	r26, 0x93	; 147
    a830:	b1 4f       	sbci	r27, 0xF1	; 241
    a832:	8c 91       	ld	r24, X
    a834:	36 e0       	ldi	r19, 0x06	; 6
    a836:	83 9f       	mul	r24, r19
    a838:	c0 01       	movw	r24, r0
    a83a:	11 24       	eor	r1, r1
    a83c:	28 0f       	add	r18, r24
	well[off] = 0;//smaller than loop!
    a83e:	a2 e7       	ldi	r26, 0x72	; 114
    a840:	be e0       	ldi	r27, 0x0E	; 14
    a842:	fd 01       	movw	r30, r26
    a844:	e2 0f       	add	r30, r18
    a846:	f1 1d       	adc	r31, r1
    a848:	10 82       	st	Z, r1
	off += 6;
    a84a:	2a 5f       	subi	r18, 0xFA	; 250
	well[off] = 0;
    a84c:	fd 01       	movw	r30, r26
    a84e:	e2 0f       	add	r30, r18
    a850:	f1 1d       	adc	r31, r1
    a852:	10 82       	st	Z, r1
	off += 6;
	well[off] = 0;
    a854:	2a 5f       	subi	r18, 0xFA	; 250
    a856:	a2 0f       	add	r26, r18
    a858:	b1 1d       	adc	r27, r1
    a85a:	1c 92       	st	X, r1
	/*
	for(uint8_t i=0;i<3;i++){
		set_well(piecex[p],piecey[p]+i,p,0);
		}*/
}//set_well(piecex[p],piecey[p]+0,p,0);set_well(piecex[p],piecey[p]+1,p,0);set_well(piecex[p],piecey[p]+2,p,0);}
    a85c:	08 95       	ret

0000a85e <open_for_piece>:
bool open_for_piece(uint8_t x, uint8_t y, uint8_t p){
	uint8_t off = (y*6)+x+(p*WELLSIZE);
    a85e:	e4 2f       	mov	r30, r20
    a860:	f0 e0       	ldi	r31, 0x00	; 0
    a862:	96 e0       	ldi	r25, 0x06	; 6
    a864:	69 9f       	mul	r22, r25
    a866:	b0 01       	movw	r22, r0
    a868:	11 24       	eor	r1, r1
    a86a:	58 2f       	mov	r21, r24
    a86c:	56 0f       	add	r21, r22
    a86e:	80 e6       	ldi	r24, 0x60	; 96
    a870:	90 e0       	ldi	r25, 0x00	; 0
    a872:	9c 01       	movw	r18, r24
    a874:	e2 9f       	mul	r30, r18
    a876:	c0 01       	movw	r24, r0
    a878:	e3 9f       	mul	r30, r19
    a87a:	90 0d       	add	r25, r0
    a87c:	f2 9f       	mul	r31, r18
    a87e:	90 0d       	add	r25, r0
    a880:	11 24       	eor	r1, r1
    a882:	58 0f       	add	r21, r24
	
	for(uint8_t i=0;i<3+halfstep[p];i++){
    a884:	e5 58       	subi	r30, 0x85	; 133
    a886:	f0 4f       	sbci	r31, 0xF0	; 240
    a888:	80 81       	ld	r24, Z
    a88a:	28 2f       	mov	r18, r24
    a88c:	30 e0       	ldi	r19, 0x00	; 0
    a88e:	2e 5f       	subi	r18, 0xFE	; 254
    a890:	3f 4f       	sbci	r19, 0xFF	; 255
    a892:	40 e0       	ldi	r20, 0x00	; 0
    a894:	0b c0       	rjmp	.+22     	; 0xa8ac <open_for_piece+0x4e>
		if(well[off]){return false;}
    a896:	e5 2f       	mov	r30, r21
    a898:	f0 e0       	ldi	r31, 0x00	; 0
    a89a:	ee 58       	subi	r30, 0x8E	; 142
    a89c:	f1 4f       	sbci	r31, 0xF1	; 241
    a89e:	80 81       	ld	r24, Z
    a8a0:	88 23       	and	r24, r24
    a8a2:	11 f0       	breq	.+4      	; 0xa8a8 <open_for_piece+0x4a>
    a8a4:	80 e0       	ldi	r24, 0x00	; 0
    a8a6:	08 95       	ret
		off += 6;
    a8a8:	5a 5f       	subi	r21, 0xFA	; 250
		}*/
}//set_well(piecex[p],piecey[p]+0,p,0);set_well(piecex[p],piecey[p]+1,p,0);set_well(piecex[p],piecey[p]+2,p,0);}
bool open_for_piece(uint8_t x, uint8_t y, uint8_t p){
	uint8_t off = (y*6)+x+(p*WELLSIZE);
	
	for(uint8_t i=0;i<3+halfstep[p];i++){
    a8aa:	4f 5f       	subi	r20, 0xFF	; 255
    a8ac:	84 2f       	mov	r24, r20
    a8ae:	90 e0       	ldi	r25, 0x00	; 0
    a8b0:	28 17       	cp	r18, r24
    a8b2:	39 07       	cpc	r19, r25
    a8b4:	84 f7       	brge	.-32     	; 0xa896 <open_for_piece+0x38>
    a8b6:	81 e0       	ldi	r24, 0x01	; 1
		if(well[off]){return false;}
		off += 6;
	}
	return true;
}
    a8b8:	08 95       	ret

0000a8ba <prng>:


uint16_t prng(uint8_t p){
	uint16_t bit;
  /* taps: 16 14 13 11; characteristic polynomial: x^16 + x^14 + x^13 + x^11 + 1 */
	bit  = ((lfsr[p] >> 0) ^ (lfsr[p] >> 2) ^ (lfsr[p] >> 3) ^ (lfsr[p] >> 5) ) & 1;
    a8ba:	e8 2f       	mov	r30, r24
    a8bc:	f0 e0       	ldi	r31, 0x00	; 0
    a8be:	ee 0f       	add	r30, r30
    a8c0:	ff 1f       	adc	r31, r31
    a8c2:	ef 59       	subi	r30, 0x9F	; 159
    a8c4:	f0 4f       	sbci	r31, 0xF0	; 240
    a8c6:	80 81       	ld	r24, Z
    a8c8:	91 81       	ldd	r25, Z+1	; 0x01
	lfsr[p] =  (lfsr[p] >> 1) | (bit << 15);
    a8ca:	9c 01       	movw	r18, r24
    a8cc:	36 95       	lsr	r19
    a8ce:	27 95       	ror	r18
    a8d0:	36 95       	lsr	r19
    a8d2:	27 95       	ror	r18
    a8d4:	ac 01       	movw	r20, r24
    a8d6:	73 e0       	ldi	r23, 0x03	; 3
    a8d8:	56 95       	lsr	r21
    a8da:	47 95       	ror	r20
    a8dc:	7a 95       	dec	r23
    a8de:	e1 f7       	brne	.-8      	; 0xa8d8 <prng+0x1e>
    a8e0:	24 27       	eor	r18, r20
    a8e2:	35 27       	eor	r19, r21
    a8e4:	28 27       	eor	r18, r24
    a8e6:	39 27       	eor	r19, r25
    a8e8:	ac 01       	movw	r20, r24
    a8ea:	65 e0       	ldi	r22, 0x05	; 5
    a8ec:	56 95       	lsr	r21
    a8ee:	47 95       	ror	r20
    a8f0:	6a 95       	dec	r22
    a8f2:	e1 f7       	brne	.-8      	; 0xa8ec <prng+0x32>
    a8f4:	24 27       	eor	r18, r20
    a8f6:	35 27       	eor	r19, r21
    a8f8:	33 27       	eor	r19, r19
    a8fa:	26 95       	lsr	r18
    a8fc:	37 95       	ror	r19
    a8fe:	22 27       	eor	r18, r18
    a900:	96 95       	lsr	r25
    a902:	87 95       	ror	r24
    a904:	28 2b       	or	r18, r24
    a906:	39 2b       	or	r19, r25
    a908:	31 83       	std	Z+1, r19	; 0x01
    a90a:	20 83       	st	Z, r18
	return lfsr[p];
}
    a90c:	c9 01       	movw	r24, r18
    a90e:	08 95       	ret

0000a910 <shuffle_prng>:
void ColumnsPrint2num(uint8_t x, uint8_t y, uint16_t val);
void ColumnsPrint3num(uint8_t x, uint8_t y, uint16_t val);

uint16_t prng(uint8_t p);
void reset_prng(){	for(uint8_t i=0;i<MAX_PLAYERS;i++)lfsr[i]=0xACE1u;}
void shuffle_prng(){for(uint8_t i=0;i<MAX_PLAYERS;i++){for(uint8_t j=0;j<4;j++){prng(i);}}}
    a910:	0f 93       	push	r16
    a912:	1f 93       	push	r17
    a914:	00 e0       	ldi	r16, 0x00	; 0
    a916:	08 c0       	rjmp	.+16     	; 0xa928 <shuffle_prng+0x18>
    a918:	80 2f       	mov	r24, r16
    a91a:	cf df       	rcall	.-98     	; 0xa8ba <prng>
    a91c:	1f 5f       	subi	r17, 0xFF	; 255
    a91e:	14 30       	cpi	r17, 0x04	; 4
    a920:	d9 f7       	brne	.-10     	; 0xa918 <shuffle_prng+0x8>
    a922:	0f 5f       	subi	r16, 0xFF	; 255
    a924:	02 30       	cpi	r16, 0x02	; 2
    a926:	11 f0       	breq	.+4      	; 0xa92c <shuffle_prng+0x1c>
    a928:	10 e0       	ldi	r17, 0x00	; 0
    a92a:	f6 cf       	rjmp	.-20     	; 0xa918 <shuffle_prng+0x8>
    a92c:	1f 91       	pop	r17
    a92e:	0f 91       	pop	r16
    a930:	08 95       	ret

0000a932 <ColumnsPrint2num>:
/////////////////////////////////////////////////////////////////////////////////////////




void ColumnsPrint2num(uint8_t x, uint8_t y, uint16_t val){
    a932:	1f 93       	push	r17
    a934:	cf 93       	push	r28
    a936:	df 93       	push	r29
    a938:	18 2f       	mov	r17, r24
    a93a:	ea 01       	movw	r28, r20
    a93c:	44 36       	cpi	r20, 0x64	; 100
    a93e:	51 05       	cpc	r21, r1
    a940:	10 f0       	brcs	.+4      	; 0xa946 <ColumnsPrint2num+0x14>
    a942:	c3 e6       	ldi	r28, 0x63	; 99
    a944:	d0 e0       	ldi	r29, 0x00	; 0

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    a946:	ee e1       	ldi	r30, 0x1E	; 30
    a948:	6e 9f       	mul	r22, r30
    a94a:	f0 01       	movw	r30, r0
    a94c:	11 24       	eor	r1, r1
    a94e:	e0 5e       	subi	r30, 0xE0	; 224
    a950:	fe 4f       	sbci	r31, 0xFE	; 254
    a952:	9f 01       	movw	r18, r30
    a954:	21 0f       	add	r18, r17
    a956:	31 1d       	adc	r19, r1
    a958:	ce 01       	movw	r24, r28
    a95a:	6a e0       	ldi	r22, 0x0A	; 10
    a95c:	70 e0       	ldi	r23, 0x00	; 0
    a95e:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    a962:	84 5b       	subi	r24, 0xB4	; 180
    a964:	d9 01       	movw	r26, r18
    a966:	8c 93       	st	X, r24
	set_vram(x--,y,(val%10)+RAM_TILES_COUNT+41);
//	if(val/10)
		set_vram(x,y,(val/10)+RAM_TILES_COUNT+41);	
//	else
//		SetTile(x,y,10);
}
    a968:	11 50       	subi	r17, 0x01	; 1
    a96a:	e1 0f       	add	r30, r17
    a96c:	f1 1d       	adc	r31, r1
    a96e:	ce 01       	movw	r24, r28
    a970:	6a e0       	ldi	r22, 0x0A	; 10
    a972:	70 e0       	ldi	r23, 0x00	; 0
    a974:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    a978:	64 5b       	subi	r22, 0xB4	; 180
    a97a:	60 83       	st	Z, r22
    a97c:	df 91       	pop	r29
    a97e:	cf 91       	pop	r28
    a980:	1f 91       	pop	r17
    a982:	08 95       	ret

0000a984 <ColumnsPrint3num>:
	set_vram(x,y,(val/100)+RAM_TILES_COUNT+41);
//	else
//		SetTile(x,y,10);
}

void ColumnsPrint3num(uint8_t x,uint8_t y, uint16_t val){
    a984:	0f 93       	push	r16
    a986:	1f 93       	push	r17
    a988:	cf 93       	push	r28
    a98a:	df 93       	push	r29
    a98c:	18 2f       	mov	r17, r24
    a98e:	9a 01       	movw	r18, r20
    a990:	8e e1       	ldi	r24, 0x1E	; 30
    a992:	68 9f       	mul	r22, r24
    a994:	e0 01       	movw	r28, r0
    a996:	11 24       	eor	r1, r1
    a998:	40 e0       	ldi	r20, 0x00	; 0
	unsigned char c,i;

	for(i=0;i<4;i++){
		c=val%10;
		if(val>0 || i==0){
    a99a:	c0 5e       	subi	r28, 0xE0	; 224
    a99c:	de 4f       	sbci	r29, 0xFE	; 254
    a99e:	03 e2       	ldi	r16, 0x23	; 35
    a9a0:	81 2f       	mov	r24, r17
    a9a2:	84 1b       	sub	r24, r20
    a9a4:	21 15       	cp	r18, r1
    a9a6:	31 05       	cpc	r19, r1
    a9a8:	11 f4       	brne	.+4      	; 0xa9ae <ColumnsPrint3num+0x2a>
    a9aa:	44 23       	and	r20, r20
    a9ac:	59 f4       	brne	.+22     	; 0xa9c4 <ColumnsPrint3num+0x40>
    a9ae:	fe 01       	movw	r30, r28
    a9b0:	e8 0f       	add	r30, r24
    a9b2:	f1 1d       	adc	r31, r1
    a9b4:	c9 01       	movw	r24, r18
    a9b6:	6a e0       	ldi	r22, 0x0A	; 10
    a9b8:	70 e0       	ldi	r23, 0x00	; 0
    a9ba:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    a9be:	84 5b       	subi	r24, 0xB4	; 180
    a9c0:	80 83       	st	Z, r24
    a9c2:	04 c0       	rjmp	.+8      	; 0xa9cc <ColumnsPrint3num+0x48>
    a9c4:	fe 01       	movw	r30, r28
    a9c6:	e8 0f       	add	r30, r24
    a9c8:	f1 1d       	adc	r31, r1
    a9ca:	00 83       	st	Z, r16
}

void ColumnsPrint3num(uint8_t x,uint8_t y, uint16_t val){
	unsigned char c,i;

	for(i=0;i<4;i++){
    a9cc:	4f 5f       	subi	r20, 0xFF	; 255
    a9ce:	44 30       	cpi	r20, 0x04	; 4
    a9d0:	39 f0       	breq	.+14     	; 0xa9e0 <ColumnsPrint3num+0x5c>
		if(val>0 || i==0){
			set_vram(x--,y,c+41+RAM_TILES_COUNT);
		}else{
				set_vram(x--,y,0+RAM_TILES_COUNT);
		}
		val=val/10;
    a9d2:	c9 01       	movw	r24, r18
    a9d4:	6a e0       	ldi	r22, 0x0A	; 10
    a9d6:	70 e0       	ldi	r23, 0x00	; 0
    a9d8:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    a9dc:	9b 01       	movw	r18, r22
    a9de:	e0 cf       	rjmp	.-64     	; 0xa9a0 <ColumnsPrint3num+0x1c>
	}
	
}
    a9e0:	df 91       	pop	r29
    a9e2:	cf 91       	pop	r28
    a9e4:	1f 91       	pop	r17
    a9e6:	0f 91       	pop	r16
    a9e8:	08 95       	ret

0000a9ea <ColumnsDrawMap>:
		c=((c&127)-32)+(offset);			
		SetTile(x++,y,c);
	}
}*/

void ColumnsDrawMap(int16_t sx, int16_t sy, uint8_t w, uint8_t h, uint16_t o, const char *map, int16_t toff){
    a9ea:	a0 e0       	ldi	r26, 0x00	; 0
    a9ec:	b0 e0       	ldi	r27, 0x00	; 0
    a9ee:	eb ef       	ldi	r30, 0xFB	; 251
    a9f0:	f4 e5       	ldi	r31, 0x54	; 84
    a9f2:	0c 94 00 74 	jmp	0xe800	; 0xe800 <__prologue_saves__+0x6>
    a9f6:	5c 01       	movw	r10, r24
    a9f8:	38 01       	movw	r6, r16
    a9fa:	f6 01       	movw	r30, r12
    a9fc:	cb 01       	movw	r24, r22
    a9fe:	88 0f       	add	r24, r24
    aa00:	99 1f       	adc	r25, r25
    aa02:	db 01       	movw	r26, r22
    aa04:	35 e0       	ldi	r19, 0x05	; 5
    aa06:	aa 0f       	add	r26, r26
    aa08:	bb 1f       	adc	r27, r27
    aa0a:	3a 95       	dec	r19
    aa0c:	e1 f7       	brne	.-8      	; 0xaa06 <ColumnsDrawMap+0x1c>
    aa0e:	a8 1b       	sub	r26, r24
    aa10:	b9 0b       	sbc	r27, r25
    aa12:	aa 0d       	add	r26, r10
    aa14:	bb 1d       	adc	r27, r11
	int16_t t;
	for(int16_t y=sy;y<sy+h;y++){
    aa16:	4b 01       	movw	r8, r22
    aa18:	82 0e       	add	r8, r18
    aa1a:	91 1c       	adc	r9, r1
		if(y > VRAM_TILES_V-1 || y < 0){
			map += w;
    aa1c:	50 e0       	ldi	r21, 0x00	; 0
			continue;
		}
		for(int16_t x=sx;x<sx+w;x++){
    aa1e:	8a 01       	movw	r16, r20
    aa20:	0a 0d       	add	r16, r10
    aa22:	1b 1d       	adc	r17, r11
			if(x < VRAM_TILES_H && x > -1){
				t = pgm_read_byte(map+o);
				if(!t)
				t = -toff;

				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+t+toff;
    aa24:	83 e2       	ldi	r24, 0x23	; 35
    aa26:	58 2e       	mov	r5, r24
    aa28:	5c 0c       	add	r5, r12
		}
		for(int16_t x=sx;x<sx+w;x++){
			if(x < VRAM_TILES_H && x > -1){
				t = pgm_read_byte(map+o);
				if(!t)
				t = -toff;
    aa2a:	cc 24       	eor	r12, r12
    aa2c:	dd 24       	eor	r13, r13
    aa2e:	ce 1a       	sub	r12, r30
    aa30:	df 0a       	sbc	r13, r31
    aa32:	25 c0       	rjmp	.+74     	; 0xaa7e <ColumnsDrawMap+0x94>
}*/

void ColumnsDrawMap(int16_t sx, int16_t sy, uint8_t w, uint8_t h, uint16_t o, const char *map, int16_t toff){
	int16_t t;
	for(int16_t y=sy;y<sy+h;y++){
		if(y > VRAM_TILES_V-1 || y < 0){
    aa34:	6a 31       	cpi	r22, 0x1A	; 26
    aa36:	71 05       	cpc	r23, r1
    aa38:	40 f4       	brcc	.+16     	; 0xaa4a <ColumnsDrawMap+0x60>
    aa3a:	ed 01       	movw	r28, r26
    aa3c:	c0 5e       	subi	r28, 0xE0	; 224
    aa3e:	de 4f       	sbci	r29, 0xFE	; 254
    aa40:	f7 01       	movw	r30, r14
    aa42:	e6 0d       	add	r30, r6
    aa44:	f7 1d       	adc	r31, r7
    aa46:	95 01       	movw	r18, r10
    aa48:	14 c0       	rjmp	.+40     	; 0xaa72 <ColumnsDrawMap+0x88>
			map += w;
    aa4a:	e4 0e       	add	r14, r20
    aa4c:	f5 1e       	adc	r15, r21
    aa4e:	14 c0       	rjmp	.+40     	; 0xaa78 <ColumnsDrawMap+0x8e>
			continue;
		}
		for(int16_t x=sx;x<sx+w;x++){
			if(x < VRAM_TILES_H && x > -1){
    aa50:	2e 31       	cpi	r18, 0x1E	; 30
    aa52:	31 05       	cpc	r19, r1
    aa54:	38 f4       	brcc	.+14     	; 0xaa64 <ColumnsDrawMap+0x7a>
				t = pgm_read_byte(map+o);
    aa56:	84 91       	lpm	r24, Z+
    aa58:	90 e0       	ldi	r25, 0x00	; 0
				if(!t)
    aa5a:	00 97       	sbiw	r24, 0x00	; 0
    aa5c:	09 f4       	brne	.+2      	; 0xaa60 <ColumnsDrawMap+0x76>
				t = -toff;
    aa5e:	c6 01       	movw	r24, r12

				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+t+toff;
    aa60:	85 0d       	add	r24, r5
    aa62:	88 83       	st	Y, r24
			}
			map++;
    aa64:	08 94       	sec
    aa66:	e1 1c       	adc	r14, r1
    aa68:	f1 1c       	adc	r15, r1
	for(int16_t y=sy;y<sy+h;y++){
		if(y > VRAM_TILES_V-1 || y < 0){
			map += w;
			continue;
		}
		for(int16_t x=sx;x<sx+w;x++){
    aa6a:	2f 5f       	subi	r18, 0xFF	; 255
    aa6c:	3f 4f       	sbci	r19, 0xFF	; 255
    aa6e:	21 96       	adiw	r28, 0x01	; 1
    aa70:	31 96       	adiw	r30, 0x01	; 1
    aa72:	20 17       	cp	r18, r16
    aa74:	31 07       	cpc	r19, r17
    aa76:	64 f3       	brlt	.-40     	; 0xaa50 <ColumnsDrawMap+0x66>
	}
}*/

void ColumnsDrawMap(int16_t sx, int16_t sy, uint8_t w, uint8_t h, uint16_t o, const char *map, int16_t toff){
	int16_t t;
	for(int16_t y=sy;y<sy+h;y++){
    aa78:	6f 5f       	subi	r22, 0xFF	; 255
    aa7a:	7f 4f       	sbci	r23, 0xFF	; 255
    aa7c:	5e 96       	adiw	r26, 0x1e	; 30
    aa7e:	68 15       	cp	r22, r8
    aa80:	79 05       	cpc	r23, r9
    aa82:	c4 f2       	brlt	.-80     	; 0xaa34 <ColumnsDrawMap+0x4a>
				vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT+t+toff;
			}
			map++;
		}
	}
}
    aa84:	cd b7       	in	r28, 0x3d	; 61
    aa86:	de b7       	in	r29, 0x3e	; 62
    aa88:	ef e0       	ldi	r30, 0x0F	; 15
    aa8a:	0c 94 1c 74 	jmp	0xe838	; 0xe838 <__epilogue_restores__+0x6>

0000aa8e <ColumnsDrawMenu>:

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
}

void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
    aa8e:	a0 e0       	ldi	r26, 0x00	; 0
    aa90:	b0 e0       	ldi	r27, 0x00	; 0
    aa92:	ed e4       	ldi	r30, 0x4D	; 77
    aa94:	f5 e5       	ldi	r31, 0x55	; 85
    aa96:	0c 94 07 74 	jmp	0xe80e	; 0xe80e <__prologue_saves__+0x14>
    aa9a:	18 2f       	mov	r17, r24
    aa9c:	e6 2e       	mov	r14, r22
    aa9e:	f4 2e       	mov	r15, r20
    aaa0:	c2 2e       	mov	r12, r18
    aaa2:	50 e0       	ldi	r21, 0x00	; 0
extern void CpuFillPad();


inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
    aaa4:	23 e2       	ldi	r18, 0x23	; 35
    aaa6:	16 c0       	rjmp	.+44     	; 0xaad4 <ColumnsDrawMenu+0x46>
    aaa8:	83 2f       	mov	r24, r19
    aaaa:	8e 0d       	add	r24, r14
    aaac:	90 e0       	ldi	r25, 0x00	; 0
    aaae:	fc 01       	movw	r30, r24
    aab0:	65 e0       	ldi	r22, 0x05	; 5
    aab2:	ee 0f       	add	r30, r30
    aab4:	ff 1f       	adc	r31, r31
    aab6:	6a 95       	dec	r22
    aab8:	e1 f7       	brne	.-8      	; 0xaab2 <ColumnsDrawMenu+0x24>
    aaba:	88 0f       	add	r24, r24
    aabc:	99 1f       	adc	r25, r25
    aabe:	e8 1b       	sub	r30, r24
    aac0:	f9 0b       	sbc	r31, r25
    aac2:	ea 0f       	add	r30, r26
    aac4:	fb 1f       	adc	r31, r27
    aac6:	e0 5e       	subi	r30, 0xE0	; 224
    aac8:	fe 4f       	sbci	r31, 0xFE	; 254
    aaca:	20 83       	st	Z, r18
	vram[(y*SCREEN_TILES_H)+x] = t;
}

void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
    aacc:	3f 5f       	subi	r19, 0xFF	; 255
    aace:	3c 15       	cp	r19, r12
    aad0:	58 f3       	brcs	.-42     	; 0xaaa8 <ColumnsDrawMenu+0x1a>
inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
}

void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
    aad2:	5f 5f       	subi	r21, 0xFF	; 255
    aad4:	5f 15       	cp	r21, r15
    aad6:	30 f4       	brcc	.+12     	; 0xaae4 <ColumnsDrawMenu+0x56>
    aad8:	30 e0       	ldi	r19, 0x00	; 0
extern void CpuFillPad();


inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
    aada:	85 2f       	mov	r24, r21
    aadc:	81 0f       	add	r24, r17
    aade:	a8 2f       	mov	r26, r24
    aae0:	b0 e0       	ldi	r27, 0x00	; 0
    aae2:	f5 cf       	rjmp	.-22     	; 0xaace <ColumnsDrawMenu+0x40>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    aae4:	9e e1       	ldi	r25, 0x1E	; 30
    aae6:	e9 9e       	mul	r14, r25
    aae8:	a0 01       	movw	r20, r0
    aaea:	11 24       	eor	r1, r1
void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
	set_tile(x+i,y+j,0);

	for(u8 i=0;i<w;i++){
    aaec:	8c 2d       	mov	r24, r12
    aaee:	8e 0d       	add	r24, r14
    aaf0:	89 9f       	mul	r24, r25
    aaf2:	b0 01       	movw	r22, r0
    aaf4:	11 24       	eor	r1, r1
    aaf6:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    aaf8:	ea 01       	movw	r28, r20
    aafa:	c0 5e       	subi	r28, 0xE0	; 224
    aafc:	de 4f       	sbci	r29, 0xFE	; 254
    aafe:	f6 e0       	ldi	r31, 0x06	; 6
    ab00:	df 2e       	mov	r13, r31
    ab02:	d0 0e       	add	r13, r16
void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
	set_tile(x+i,y+j,0);

	for(u8 i=0;i<w;i++){
    ab04:	9b 01       	movw	r18, r22
    ab06:	20 5e       	subi	r18, 0xE0	; 224
    ab08:	3e 4f       	sbci	r19, 0xFE	; 254
    ab0a:	90 2f       	mov	r25, r16
    ab0c:	99 5f       	subi	r25, 0xF9	; 249
    ab0e:	0b c0       	rjmp	.+22     	; 0xab26 <ColumnsDrawMenu+0x98>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ab10:	e8 2f       	mov	r30, r24
    ab12:	e1 0f       	add	r30, r17
    ab14:	f0 e0       	ldi	r31, 0x00	; 0
    ab16:	de 01       	movw	r26, r28
    ab18:	ae 0f       	add	r26, r30
    ab1a:	bf 1f       	adc	r27, r31
    ab1c:	dc 92       	st	X, r13
void ColumnsDrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t o){
	for(u8 i=0;i<w;i++)
	for(u8 j=0;j<h;j++)
	set_tile(x+i,y+j,0);

	for(u8 i=0;i<w;i++){
    ab1e:	e2 0f       	add	r30, r18
    ab20:	f3 1f       	adc	r31, r19
    ab22:	90 83       	st	Z, r25
    ab24:	8f 5f       	subi	r24, 0xFF	; 255
    ab26:	8f 15       	cp	r24, r15
    ab28:	98 f3       	brcs	.-26     	; 0xab10 <ColumnsDrawMenu+0x82>
    ab2a:	30 e0       	ldi	r19, 0x00	; 0
    ab2c:	81 2f       	mov	r24, r17
    ab2e:	90 e0       	ldi	r25, 0x00	; 0
    ab30:	f1 0e       	add	r15, r17
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ab32:	ee e1       	ldi	r30, 0x1E	; 30
    ab34:	de 2e       	mov	r13, r30
    ab36:	20 2f       	mov	r18, r16
    ab38:	2c 5f       	subi	r18, 0xFC	; 252

	for(u8 i=0;i<w;i++){
		SetVram(x+i,y,o+6);
		SetVram(x+i,y+h,o+7);
	}
	for(u8 i=0;i<h;i++){
    ab3a:	cf 2d       	mov	r28, r15
    ab3c:	d0 e0       	ldi	r29, 0x00	; 0
    ab3e:	10 2f       	mov	r17, r16
    ab40:	1b 5f       	subi	r17, 0xFB	; 251
    ab42:	0f c0       	rjmp	.+30     	; 0xab62 <ColumnsDrawMenu+0xd4>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ab44:	e3 2f       	mov	r30, r19
    ab46:	ee 0d       	add	r30, r14
    ab48:	ed 9d       	mul	r30, r13
    ab4a:	f0 01       	movw	r30, r0
    ab4c:	11 24       	eor	r1, r1
    ab4e:	e0 5e       	subi	r30, 0xE0	; 224
    ab50:	fe 4f       	sbci	r31, 0xFE	; 254
    ab52:	df 01       	movw	r26, r30
    ab54:	a8 0f       	add	r26, r24
    ab56:	b9 1f       	adc	r27, r25
    ab58:	2c 93       	st	X, r18

	for(u8 i=0;i<w;i++){
		SetVram(x+i,y,o+6);
		SetVram(x+i,y+h,o+7);
	}
	for(u8 i=0;i<h;i++){
    ab5a:	ec 0f       	add	r30, r28
    ab5c:	fd 1f       	adc	r31, r29
    ab5e:	10 83       	st	Z, r17
    ab60:	3f 5f       	subi	r19, 0xFF	; 255
    ab62:	3c 15       	cp	r19, r12
    ab64:	78 f3       	brcs	.-34     	; 0xab44 <ColumnsDrawMenu+0xb6>
		}
	}
}

inline void SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*SCREEN_TILES_H)+x] = t;
    ab66:	80 5e       	subi	r24, 0xE0	; 224
    ab68:	9e 4f       	sbci	r25, 0xFE	; 254
    ab6a:	fc 01       	movw	r30, r24
    ab6c:	e4 0f       	add	r30, r20
    ab6e:	f5 1f       	adc	r31, r21
    ab70:	00 83       	st	Z, r16
		}
	}*/
	SetVram(x,y+h,o+2);
	SetVram(x+w,y+h,o+3);

}
    ab72:	af 2d       	mov	r26, r15
    ab74:	b0 e0       	ldi	r27, 0x00	; 0
    ab76:	a0 5e       	subi	r26, 0xE0	; 224
    ab78:	be 4f       	sbci	r27, 0xFE	; 254
    ab7a:	fa 01       	movw	r30, r20
    ab7c:	ea 0f       	add	r30, r26
    ab7e:	fb 1f       	adc	r31, r27
    ab80:	0f 5f       	subi	r16, 0xFF	; 255
    ab82:	00 83       	st	Z, r16
    ab84:	86 0f       	add	r24, r22
    ab86:	97 1f       	adc	r25, r23
    ab88:	0f 5f       	subi	r16, 0xFF	; 255
    ab8a:	fc 01       	movw	r30, r24
    ab8c:	00 83       	st	Z, r16
    ab8e:	a6 0f       	add	r26, r22
    ab90:	b7 1f       	adc	r27, r23
    ab92:	0f 5f       	subi	r16, 0xFF	; 255
    ab94:	0c 93       	st	X, r16
    ab96:	cd b7       	in	r28, 0x3d	; 61
    ab98:	de b7       	in	r29, 0x3e	; 62
    ab9a:	e8 e0       	ldi	r30, 0x08	; 8
    ab9c:	0c 94 23 74 	jmp	0xe846	; 0xe846 <__epilogue_restores__+0x14>

0000aba0 <CpuFillPad>:
uint8_t TallestColumn(uint8_t p);

extern void CpuBufferWellAsm(uint8_t *wellstart);
inline void CpuFillPad(){

	if(!(cpustate & CPUDECIDED))
    aba0:	80 91 6b 0e 	lds	r24, 0x0E6B
    aba4:	85 ff       	sbrs	r24, 5
    aba6:	65 c0       	rjmp	.+202    	; 0xac72 <CpuFillPad+0xd2>
	return;
	if(state[0] & LOSING || state[1] & LOSING){
    aba8:	80 91 6f 0e 	lds	r24, 0x0E6F
    abac:	82 fd       	sbrc	r24, 2
    abae:	04 c0       	rjmp	.+8      	; 0xabb8 <CpuFillPad+0x18>
    abb0:	80 91 70 0e 	lds	r24, 0x0E70
    abb4:	82 ff       	sbrs	r24, 2
    abb6:	04 c0       	rjmp	.+8      	; 0xabc0 <CpuFillPad+0x20>
		cpustate = CPUEVALUATING;//don't do anything stupid!
    abb8:	88 e0       	ldi	r24, 0x08	; 8
    abba:	80 93 6b 0e 	sts	0x0E6B, r24
    abbe:	08 95       	ret
		return;
	}		
	oldpadstate[1] = padstate[1] = sideheld[1] = 0;	
    abc0:	10 92 54 0f 	sts	0x0F54, r1
    abc4:	10 92 45 0e 	sts	0x0E45, r1
    abc8:	10 92 44 0e 	sts	0x0E44, r1
    abcc:	10 92 41 0e 	sts	0x0E41, r1
    abd0:	10 92 40 0e 	sts	0x0E40, r1

	if(cpumovewait){
    abd4:	80 91 71 0e 	lds	r24, 0x0E71
    abd8:	88 23       	and	r24, r24
    abda:	21 f0       	breq	.+8      	; 0xabe4 <CpuFillPad+0x44>
		cpumovewait--;
    abdc:	81 50       	subi	r24, 0x01	; 1
    abde:	80 93 71 0e 	sts	0x0E71, r24
    abe2:	08 95       	ret
		return;
	}
	else{
		if(cpudecision[0] == piecex[1] && cpudecision[1] == piecerot[1])
    abe4:	30 91 2d 0e 	lds	r19, 0x0E2D
    abe8:	20 91 71 0f 	lds	r18, 0x0F71
    abec:	32 17       	cp	r19, r18
    abee:	69 f4       	brne	.+26     	; 0xac0a <CpuFillPad+0x6a>
    abf0:	90 91 2e 0e 	lds	r25, 0x0E2E
    abf4:	80 91 69 0f 	lds	r24, 0x0F69
    abf8:	98 17       	cp	r25, r24
    abfa:	39 f4       	brne	.+14     	; 0xac0a <CpuFillPad+0x6a>
			cpumovewait = pgm_read_byte(&CpuDropTime[cpuskill]);
    abfc:	e0 91 37 0e 	lds	r30, 0x0E37
    ac00:	f0 e0       	ldi	r31, 0x00	; 0
    ac02:	e4 58       	subi	r30, 0x84	; 132
    ac04:	f7 47       	sbci	r31, 0x77	; 119
    ac06:	e4 91       	lpm	r30, Z+
    ac08:	06 c0       	rjmp	.+12     	; 0xac16 <CpuFillPad+0x76>
		else
			cpumovewait = pgm_read_byte(&CpuMoveTime[cpuskill]);
    ac0a:	e0 91 37 0e 	lds	r30, 0x0E37
    ac0e:	f0 e0       	ldi	r31, 0x00	; 0
    ac10:	e9 57       	subi	r30, 0x79	; 121
    ac12:	f7 47       	sbci	r31, 0x77	; 119
    ac14:	e4 91       	lpm	r30, Z+
    ac16:	e0 93 71 0e 	sts	0x0E71, r30
		if(cursetype[1]&63)
    ac1a:	40 91 55 0e 	lds	r20, 0x0E55
    ac1e:	84 2f       	mov	r24, r20
    ac20:	90 e0       	ldi	r25, 0x00	; 0
    ac22:	8f 73       	andi	r24, 0x3F	; 63
    ac24:	90 70       	andi	r25, 0x00	; 0
    ac26:	89 2b       	or	r24, r25
    ac28:	29 f0       	breq	.+10     	; 0xac34 <CpuFillPad+0x94>
			cpumovewait <<=1;//go slower if cursed, except at higher levels where it's 0*2 ticks
    ac2a:	80 91 71 0e 	lds	r24, 0x0E71
    ac2e:	88 0f       	add	r24, r24
    ac30:	80 93 71 0e 	sts	0x0E71, r24
	}

	if(cpudecision[0] < piecex[1])
    ac34:	32 17       	cp	r19, r18
    ac36:	18 f4       	brcc	.+6      	; 0xac3e <CpuFillPad+0x9e>
		padstate[1] = BTN_LEFT;
    ac38:	80 e4       	ldi	r24, 0x40	; 64
    ac3a:	90 e0       	ldi	r25, 0x00	; 0
    ac3c:	0f c0       	rjmp	.+30     	; 0xac5c <CpuFillPad+0xbc>
	else if(cpudecision[0] > piecex[1])
    ac3e:	23 17       	cp	r18, r19
    ac40:	18 f4       	brcc	.+6      	; 0xac48 <CpuFillPad+0xa8>
		padstate[1] = BTN_RIGHT;
    ac42:	80 e8       	ldi	r24, 0x80	; 128
    ac44:	90 e0       	ldi	r25, 0x00	; 0
    ac46:	0a c0       	rjmp	.+20     	; 0xac5c <CpuFillPad+0xbc>
	else if((cursetype[1] != CURSENOROTATE) && (cpudecision[1] != piecerot[1]))
    ac48:	48 30       	cpi	r20, 0x08	; 8
    ac4a:	69 f0       	breq	.+26     	; 0xac66 <CpuFillPad+0xc6>
    ac4c:	90 91 2e 0e 	lds	r25, 0x0E2E
    ac50:	80 91 69 0f 	lds	r24, 0x0F69
    ac54:	98 17       	cp	r25, r24
    ac56:	39 f0       	breq	.+14     	; 0xac66 <CpuFillPad+0xc6>
		padstate[1] = BTN_Y;
    ac58:	82 e0       	ldi	r24, 0x02	; 2
    ac5a:	90 e0       	ldi	r25, 0x00	; 0
    ac5c:	90 93 45 0e 	sts	0x0E45, r25
    ac60:	80 93 44 0e 	sts	0x0E44, r24
    ac64:	08 95       	ret
	else
		padstate[1] = BTN_DOWN;
    ac66:	80 e2       	ldi	r24, 0x20	; 32
    ac68:	90 e0       	ldi	r25, 0x00	; 0
    ac6a:	90 93 45 0e 	sts	0x0E45, r25
    ac6e:	80 93 44 0e 	sts	0x0E44, r24
    ac72:	08 95       	ret

0000ac74 <CpuShouldCrash>:
}


bool CpuShouldCrash(){
	if(score[1] > 9){//can crash
    ac74:	30 91 39 0f 	lds	r19, 0x0F39
    ac78:	3a 30       	cpi	r19, 0x0A	; 10
    ac7a:	58 f1       	brcs	.+86     	; 0xacd2 <CpuShouldCrash+0x5e>
		if((wellfullness[1] > 7*6) || (wellfullness[0]>8*6) ||//if we are in trouble don't die with any unused points! if they are in trouble finish them off!
    ac7c:	80 91 5f 0f 	lds	r24, 0x0F5F
    ac80:	90 91 60 0f 	lds	r25, 0x0F60
    ac84:	8b 97       	sbiw	r24, 0x2b	; 43
    ac86:	d0 f4       	brcc	.+52     	; 0xacbc <CpuShouldCrash+0x48>
    ac88:	80 91 5d 0f 	lds	r24, 0x0F5D
    ac8c:	90 91 5e 0f 	lds	r25, 0x0F5E
    ac90:	c1 97       	sbiw	r24, 0x31	; 49
    ac92:	a0 f4       	brcc	.+40     	; 0xacbc <CpuShouldCrash+0x48>
    ac94:	20 91 e2 0f 	lds	r18, 0x0FE2
    ac98:	83 2f       	mov	r24, r19
    ac9a:	90 e0       	ldi	r25, 0x00	; 0
    ac9c:	82 0f       	add	r24, r18
    ac9e:	91 1d       	adc	r25, r1
    aca0:	4f 97       	sbiw	r24, 0x1f	; 31
    aca2:	64 f4       	brge	.+24     	; 0xacbc <CpuShouldCrash+0x48>
    aca4:	80 91 43 0f 	lds	r24, 0x0F43
    aca8:	87 30       	cpi	r24, 0x07	; 7
    acaa:	40 f4       	brcc	.+16     	; 0xacbc <CpuShouldCrash+0x48>
    acac:	83 2f       	mov	r24, r19
    acae:	6a e0       	ldi	r22, 0x0A	; 10
    acb0:	0e 94 a8 73 	call	0xe750	; 0xe750 <__udivmodqi4>
    acb4:	90 91 7f 0f 	lds	r25, 0x0F7F
    acb8:	98 17       	cp	r25, r24
    acba:	58 f0       	brcs	.+22     	; 0xacd2 <CpuShouldCrash+0x5e>
			((score[1]+cpuscoretocome) > 30) ||//don't waste points, but keep score around in case they get something good!
			(piece[0] > 6) || (crashheight[1] >= (score[1]/10))){//crash their magic jewel!
			padstate[1] |= BTN_B;
    acbc:	80 91 44 0e 	lds	r24, 0x0E44
    acc0:	90 91 45 0e 	lds	r25, 0x0E45
    acc4:	81 60       	ori	r24, 0x01	; 1
    acc6:	90 93 45 0e 	sts	0x0E45, r25
    acca:	80 93 44 0e 	sts	0x0E44, r24
    acce:	81 e0       	ldi	r24, 0x01	; 1
    acd0:	08 95       	ret
			return true;
    acd2:	80 e0       	ldi	r24, 0x00	; 0
		}		
	}
	return false;
}
    acd4:	08 95       	ret

0000acd6 <DrawTitleBG>:
void DrawTitleBG(){
    acd6:	a0 e0       	ldi	r26, 0x00	; 0
    acd8:	b0 e0       	ldi	r27, 0x00	; 0
    acda:	e1 e7       	ldi	r30, 0x71	; 113
    acdc:	f6 e5       	ldi	r31, 0x56	; 86
    acde:	0c 94 05 74 	jmp	0xe80a	; 0xe80a <__prologue_saves__+0x10>
    ace2:	e0 e2       	ldi	r30, 0x20	; 32
    ace4:	f1 e0       	ldi	r31, 0x01	; 1
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
}

void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
		vram[i] = t;
    ace6:	83 e2       	ldi	r24, 0x23	; 35
    ace8:	81 93       	st	Z+, r24
inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
}

void FillVram(uint8_t t){
	for(uint16_t i=0;i<VRAM_TILES_H*VRAM_TILES_V;i++)
    acea:	94 e0       	ldi	r25, 0x04	; 4
    acec:	ec 32       	cpi	r30, 0x2C	; 44
    acee:	f9 07       	cpc	r31, r25
    acf0:	d9 f7       	brne	.-10     	; 0xace8 <DrawTitleBG+0x12>
    acf2:	c0 e0       	ldi	r28, 0x00	; 0
    acf4:	d0 e0       	ldi	r29, 0x00	; 0
    acf6:	aa 24       	eor	r10, r10
    acf8:	bb 24       	eor	r11, r11
	FillVram(RAM_TILES_COUNT);
	for(uint8_t i=0;i<11;i++){
		ColumnsDrawMap((i*4)+0,0,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
    acfa:	ce 01       	movw	r24, r28
    acfc:	60 e0       	ldi	r22, 0x00	; 0
    acfe:	70 e0       	ldi	r23, 0x00	; 0
    ad00:	46 e0       	ldi	r20, 0x06	; 6
    ad02:	24 e0       	ldi	r18, 0x04	; 4
    ad04:	00 e0       	ldi	r16, 0x00	; 0
    ad06:	10 e0       	ldi	r17, 0x00	; 0
    ad08:	fd ee       	ldi	r31, 0xED	; 237
    ad0a:	ef 2e       	mov	r14, r31
    ad0c:	fe e0       	ldi	r31, 0x0E	; 14
    ad0e:	ff 2e       	mov	r15, r31
    ad10:	ec ed       	ldi	r30, 0xDC	; 220
    ad12:	ce 2e       	mov	r12, r30
    ad14:	ef ef       	ldi	r30, 0xFF	; 255
    ad16:	de 2e       	mov	r13, r30
    ad18:	68 de       	rcall	.-816    	; 0xa9ea <ColumnsDrawMap>
		ColumnsDrawMap((i*4)-2,22,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
    ad1a:	c5 01       	movw	r24, r10
    ad1c:	80 95       	com	r24
    ad1e:	90 95       	com	r25
    ad20:	88 0f       	add	r24, r24
    ad22:	99 1f       	adc	r25, r25
    ad24:	66 e1       	ldi	r22, 0x16	; 22
    ad26:	70 e0       	ldi	r23, 0x00	; 0
    ad28:	46 e0       	ldi	r20, 0x06	; 6
    ad2a:	24 e0       	ldi	r18, 0x04	; 4
    ad2c:	5e de       	rcall	.-836    	; 0xa9ea <ColumnsDrawMap>
    ad2e:	24 96       	adiw	r28, 0x04	; 4
    ad30:	8e ef       	ldi	r24, 0xFE	; 254
    ad32:	9f ef       	ldi	r25, 0xFF	; 255
    ad34:	a8 0e       	add	r10, r24
    ad36:	b9 1e       	adc	r11, r25
void DrawTitleBG(){
	FillVram(RAM_TILES_COUNT);
	for(uint8_t i=0;i<11;i++){
    ad38:	cc 32       	cpi	r28, 0x2C	; 44
    ad3a:	d1 05       	cpc	r29, r1
    ad3c:	f1 f6       	brne	.-68     	; 0xacfa <DrawTitleBG+0x24>
		ColumnsDrawMap((i*4)+0,0,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
		ColumnsDrawMap((i*4)-2,22,6,4,0,TitleMap,-(RAM_TILES_COUNT+1));
	}

}
    ad3e:	cd b7       	in	r28, 0x3d	; 61
    ad40:	de b7       	in	r29, 0x3e	; 62
    ad42:	ea e0       	ldi	r30, 0x0A	; 10
    ad44:	0c 94 21 74 	jmp	0xe842	; 0xe842 <__epilogue_restores__+0x10>

0000ad48 <DrawTitleBGFont>:
void DrawTitleBGFont(){
	DrawTitleBG();
    ad48:	c6 df       	rcall	.-116    	; 0xacd6 <DrawTitleBG>
	rtl_Print(11,8,PSTR("COLUMNS"));
    ad4a:	8b e0       	ldi	r24, 0x0B	; 11
    ad4c:	68 e0       	ldi	r22, 0x08	; 8
    ad4e:	42 ee       	ldi	r20, 0xE2	; 226
    ad50:	59 e8       	ldi	r21, 0x89	; 137
}
    ad52:	11 cd       	rjmp	.-1502   	; 0xa776 <rtl_Print>

0000ad54 <DrawJewel>:
void DrawJewel(uint8_t x, uint8_t y, uint8_t j){//for preview and intro, don't inline and simpler case
	uint16_t off = x+(y*VRAM_TILES_H);
    ad54:	9e e1       	ldi	r25, 0x1E	; 30
    ad56:	69 9f       	mul	r22, r25
    ad58:	f0 01       	movw	r30, r0
    ad5a:	11 24       	eor	r1, r1
    ad5c:	e8 0f       	add	r30, r24
    ad5e:	f1 1d       	adc	r31, r1
	j &= 15;
    ad60:	4f 70       	andi	r20, 0x0F	; 15
	if(j > 6){//magic jewel
    ad62:	47 30       	cpi	r20, 0x07	; 7
    ad64:	20 f0       	brcs	.+8      	; 0xad6e <DrawJewel+0x1a>
		j -= 7;
		j = FIRSTMAGICJEWELRT+(j*4);
    ad66:	47 50       	subi	r20, 0x07	; 7
    ad68:	44 0f       	add	r20, r20
    ad6a:	44 0f       	add	r20, r20
    ad6c:	03 c0       	rjmp	.+6      	; 0xad74 <DrawJewel+0x20>
	}else
		j = RAM_TILES_COUNT+(j*4)+JEWELSTART-1;
    ad6e:	44 0f       	add	r20, r20
    ad70:	44 0f       	add	r20, r20
    ad72:	40 5d       	subi	r20, 0xD0	; 208

	vram[off+0] = j++;//set_vram(x+0,y+0,t++);
    ad74:	e0 5e       	subi	r30, 0xE0	; 224
    ad76:	fe 4f       	sbci	r31, 0xFE	; 254
    ad78:	40 83       	st	Z, r20
    ad7a:	84 2f       	mov	r24, r20
    ad7c:	8f 5f       	subi	r24, 0xFF	; 255
	vram[off+1] = j++;//set_vram(x+1,y+0,t++);
    ad7e:	81 83       	std	Z+1, r24	; 0x01
    ad80:	8f 5f       	subi	r24, 0xFF	; 255
	vram[off+VRAM_TILES_H+0] = j++;//set_vram(x+0,y+1,t++);
    ad82:	86 8f       	std	Z+30, r24	; 0x1e
	vram[off+VRAM_TILES_H+1] = j;//set_vram(x+1,y+1,t);
    ad84:	8f 5f       	subi	r24, 0xFF	; 255
    ad86:	87 8f       	std	Z+31, r24	; 0x1f
}
    ad88:	08 95       	ret

0000ad8a <SetScoringSimilar>:
//PROBLEM HERE MUST BE WITH CRASHBARDOWN COPYING MAGIC JEWEL;

void SetScoringSimilar(uint8_t p, uint8_t t){//used by magic jewel to clear the color it touches from well
if(t > 6){//hit crash bar TODO MAKE SURE IT STILL DELETES THE MAGIC JEWEL
    ad8a:	67 30       	cpi	r22, 0x07	; 7
    ad8c:	10 f5       	brcc	.+68     	; 0xadd2 <SetScoringSimilar+0x48>
return;
	}		
for(uint16_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++)
    ad8e:	90 e0       	ldi	r25, 0x00	; 0
    ad90:	20 e6       	ldi	r18, 0x60	; 96
    ad92:	30 e0       	ldi	r19, 0x00	; 0
    ad94:	82 9f       	mul	r24, r18
    ad96:	a0 01       	movw	r20, r0
    ad98:	83 9f       	mul	r24, r19
    ad9a:	50 0d       	add	r21, r0
    ad9c:	92 9f       	mul	r25, r18
    ad9e:	50 0d       	add	r21, r0
    ada0:	11 24       	eor	r1, r1
    ada2:	01 96       	adiw	r24, 0x01	; 1
    ada4:	82 9f       	mul	r24, r18
    ada6:	d0 01       	movw	r26, r0
    ada8:	83 9f       	mul	r24, r19
    adaa:	b0 0d       	add	r27, r0
    adac:	92 9f       	mul	r25, r18
    adae:	b0 0d       	add	r27, r0
    adb0:	11 24       	eor	r1, r1
    adb2:	fa 01       	movw	r30, r20
    adb4:	ee 58       	subi	r30, 0x8E	; 142
    adb6:	f1 4f       	sbci	r31, 0xF1	; 241
if(well[i] == t)//shouldn't need to &0b00111111 since nothing is half step and doesnt matter if scoring?
well[i] |= SCORINGJEWEL;
    adb8:	96 2f       	mov	r25, r22
    adba:	90 68       	ori	r25, 0x80	; 128
    adbc:	07 c0       	rjmp	.+14     	; 0xadcc <SetScoringSimilar+0x42>
void SetScoringSimilar(uint8_t p, uint8_t t){//used by magic jewel to clear the color it touches from well
if(t > 6){//hit crash bar TODO MAKE SURE IT STILL DELETES THE MAGIC JEWEL
return;
	}		
for(uint16_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++)
if(well[i] == t)//shouldn't need to &0b00111111 since nothing is half step and doesnt matter if scoring?
    adbe:	80 81       	ld	r24, Z
    adc0:	86 17       	cp	r24, r22
    adc2:	09 f4       	brne	.+2      	; 0xadc6 <SetScoringSimilar+0x3c>
well[i] |= SCORINGJEWEL;
    adc4:	90 83       	st	Z, r25

void SetScoringSimilar(uint8_t p, uint8_t t){//used by magic jewel to clear the color it touches from well
if(t > 6){//hit crash bar TODO MAKE SURE IT STILL DELETES THE MAGIC JEWEL
return;
	}		
for(uint16_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++)
    adc6:	4f 5f       	subi	r20, 0xFF	; 255
    adc8:	5f 4f       	sbci	r21, 0xFF	; 255
    adca:	31 96       	adiw	r30, 0x01	; 1
    adcc:	4a 17       	cp	r20, r26
    adce:	5b 07       	cpc	r21, r27
    add0:	b0 f3       	brcs	.-20     	; 0xadbe <SetScoringSimilar+0x34>
    add2:	08 95       	ret

0000add4 <CheckLoss>:
	add_piece(p);		
}


uint8_t CheckLoss(uint8_t p){
	if(state[p] & SCORING)
    add4:	28 2f       	mov	r18, r24
    add6:	30 e0       	ldi	r19, 0x00	; 0
    add8:	f9 01       	movw	r30, r18
    adda:	e1 59       	subi	r30, 0x91	; 145
    addc:	f1 4f       	sbci	r31, 0xF1	; 241
    adde:	80 81       	ld	r24, Z
    ade0:	80 fd       	sbrc	r24, 0
    ade2:	16 c0       	rjmp	.+44     	; 0xae10 <CheckLoss+0x3c>
		return false;
	//if(CheckScore(p))
		//return false;
	//TODO WHAT ABOUT MAGIC JEWEL COMING TO REST HERE?????
	uint8_t off = p*WELLSIZE;
    ade4:	80 e6       	ldi	r24, 0x60	; 96
    ade6:	90 e0       	ldi	r25, 0x00	; 0
    ade8:	28 9f       	mul	r18, r24
    adea:	90 2d       	mov	r25, r0
    adec:	11 24       	eor	r1, r1
    adee:	20 e0       	ldi	r18, 0x00	; 0
    adf0:	30 e0       	ldi	r19, 0x00	; 0
			if(well[off]&SCORINGJEWEL)
				return false;//need to finish scoring before we determine loss
			return true;
		}			
		off++;*/
		if(well[off++])
    adf2:	e9 2f       	mov	r30, r25
    adf4:	e2 0f       	add	r30, r18
    adf6:	f0 e0       	ldi	r31, 0x00	; 0
    adf8:	ee 58       	subi	r30, 0x8E	; 142
    adfa:	f1 4f       	sbci	r31, 0xF1	; 241
    adfc:	80 81       	ld	r24, Z
    adfe:	88 23       	and	r24, r24
    ae00:	11 f0       	breq	.+4      	; 0xae06 <CheckLoss+0x32>
    ae02:	81 e0       	ldi	r24, 0x01	; 1
    ae04:	08 95       	ret
    ae06:	2f 5f       	subi	r18, 0xFF	; 255
    ae08:	3f 4f       	sbci	r19, 0xFF	; 255
		return false;
	//if(CheckScore(p))
		//return false;
	//TODO WHAT ABOUT MAGIC JEWEL COMING TO REST HERE?????
	uint8_t off = p*WELLSIZE;
	for(uint8_t i=0;i<3*6;i++){
    ae0a:	22 31       	cpi	r18, 0x12	; 18
    ae0c:	31 05       	cpc	r19, r1
    ae0e:	89 f7       	brne	.-30     	; 0xadf2 <CheckLoss+0x1e>
    ae10:	80 e0       	ldi	r24, 0x00	; 0
		off++;*/
		if(well[off++])
			return true;
	}
	return false;
}
    ae12:	08 95       	ret

0000ae14 <FlashingJewelInWell>:

	return hasmoved;
}

bool FlashingJewelInWell(uint8_t p){
	uint8_t off = p*WELLSIZE;
    ae14:	90 e6       	ldi	r25, 0x60	; 96
    ae16:	89 9f       	mul	r24, r25
    ae18:	90 2d       	mov	r25, r0
    ae1a:	11 24       	eor	r1, r1
	for(uint8_t i=0;i<WELLSIZE;i++){
    ae1c:	29 2f       	mov	r18, r25
    ae1e:	20 5a       	subi	r18, 0xA0	; 160
		if((well[off++] & FLASHINGJEWEL))
    ae20:	e9 2f       	mov	r30, r25
    ae22:	f0 e0       	ldi	r31, 0x00	; 0
    ae24:	ee 58       	subi	r30, 0x8E	; 142
    ae26:	f1 4f       	sbci	r31, 0xF1	; 241
    ae28:	80 81       	ld	r24, Z
    ae2a:	9f 5f       	subi	r25, 0xFF	; 255
    ae2c:	85 ff       	sbrs	r24, 5
    ae2e:	09 c0       	rjmp	.+18     	; 0xae42 <FlashingJewelInWell+0x2e>
			if(!(well[off-1] & SCORINGJEWEL))//will be eliminated
    ae30:	e9 2f       	mov	r30, r25
    ae32:	f0 e0       	ldi	r31, 0x00	; 0
    ae34:	ef 58       	subi	r30, 0x8F	; 143
    ae36:	f1 4f       	sbci	r31, 0xF1	; 241
    ae38:	80 81       	ld	r24, Z
    ae3a:	87 fd       	sbrc	r24, 7
    ae3c:	02 c0       	rjmp	.+4      	; 0xae42 <FlashingJewelInWell+0x2e>
    ae3e:	81 e0       	ldi	r24, 0x01	; 1
    ae40:	08 95       	ret
	return hasmoved;
}

bool FlashingJewelInWell(uint8_t p){
	uint8_t off = p*WELLSIZE;
	for(uint8_t i=0;i<WELLSIZE;i++){
    ae42:	92 17       	cp	r25, r18
    ae44:	69 f7       	brne	.-38     	; 0xae20 <FlashingJewelInWell+0xc>
    ae46:	80 e0       	ldi	r24, 0x00	; 0
		if((well[off++] & FLASHINGJEWEL))
			if(!(well[off-1] & SCORINGJEWEL))//will be eliminated
				return true;
	}
	return false;
}
    ae48:	08 95       	ret

0000ae4a <EliminateFlashingJewel>:
 void EliminateFlashingJewel(uint8_t p){
	uint8_t off = p*WELLSIZE;
    ae4a:	90 e6       	ldi	r25, 0x60	; 96
    ae4c:	89 9f       	mul	r24, r25
    ae4e:	40 2d       	mov	r20, r0
    ae50:	11 24       	eor	r1, r1
    ae52:	20 e0       	ldi	r18, 0x00	; 0
    ae54:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t i=0;i<WELLSIZE;i++){
		if(well[off++] & FLASHINGJEWEL){
    ae56:	84 2f       	mov	r24, r20
    ae58:	82 0f       	add	r24, r18
    ae5a:	e8 2f       	mov	r30, r24
    ae5c:	f0 e0       	ldi	r31, 0x00	; 0
    ae5e:	ee 58       	subi	r30, 0x8E	; 142
    ae60:	f1 4f       	sbci	r31, 0xF1	; 241
    ae62:	90 81       	ld	r25, Z
    ae64:	95 ff       	sbrs	r25, 5
    ae66:	04 c0       	rjmp	.+8      	; 0xae70 <EliminateFlashingJewel+0x26>
			well[--off] ^= FLASHINGJEWEL;
    ae68:	80 e2       	ldi	r24, 0x20	; 32
    ae6a:	98 27       	eor	r25, r24
    ae6c:	90 83       	st	Z, r25
    ae6e:	08 95       	ret
			return;
    ae70:	2f 5f       	subi	r18, 0xFF	; 255
    ae72:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	return false;
}
 void EliminateFlashingJewel(uint8_t p){
	uint8_t off = p*WELLSIZE;
	for(uint8_t i=0;i<WELLSIZE;i++){
    ae74:	20 36       	cpi	r18, 0x60	; 96
    ae76:	31 05       	cpc	r19, r1
    ae78:	71 f7       	brne	.-36     	; 0xae56 <EliminateFlashingJewel+0xc>
    ae7a:	08 95       	ret

0000ae7c <GeneratePreview>:
			return;
		}
	}		
}

void GeneratePreview(uint8_t p){//makes the preview piece the current piece, and generates a new one
    ae7c:	ef 92       	push	r14
    ae7e:	ff 92       	push	r15
    ae80:	0f 93       	push	r16
    ae82:	1f 93       	push	r17
    ae84:	cf 93       	push	r28
    ae86:	df 93       	push	r29
    ae88:	e8 2e       	mov	r14, r24
//COLUMNS 3!! ONCE A PIECE IS DONE SETTING, IT IS 32 TICKS BEFORE YOU CAN SEE THE BOTTOM HALF of the bottom jewel on screen
	if(p == 0 && (game_state & GS_DEMO)){
    ae8a:	88 23       	and	r24, r24
    ae8c:	f9 f4       	brne	.+62     	; 0xaecc <GeneratePreview+0x50>
    ae8e:	80 91 6a 0e 	lds	r24, 0x0E6A
    ae92:	81 ff       	sbrs	r24, 1
    ae94:	1b c0       	rjmp	.+54     	; 0xaecc <GeneratePreview+0x50>
		demo_inp_wait = pgm_read_byte(&DemoData[demo_off++]);
    ae96:	80 91 58 0e 	lds	r24, 0x0E58
    ae9a:	90 91 59 0e 	lds	r25, 0x0E59
    ae9e:	9c 01       	movw	r18, r24
    aea0:	2f 5f       	subi	r18, 0xFF	; 255
    aea2:	3f 4f       	sbci	r19, 0xFF	; 255
    aea4:	8d 54       	subi	r24, 0x4D	; 77
    aea6:	98 47       	sbci	r25, 0x78	; 120
    aea8:	fc 01       	movw	r30, r24
    aeaa:	84 91       	lpm	r24, Z+
    aeac:	80 93 4c 0f 	sts	0x0F4C, r24
		demo_decision = pgm_read_byte(&DemoData[demo_off++]);
    aeb0:	2f 5f       	subi	r18, 0xFF	; 255
    aeb2:	3f 4f       	sbci	r19, 0xFF	; 255
    aeb4:	30 93 59 0e 	sts	0x0E59, r19
    aeb8:	20 93 58 0e 	sts	0x0E58, r18
    aebc:	21 50       	subi	r18, 0x01	; 1
    aebe:	30 40       	sbci	r19, 0x00	; 0
    aec0:	2d 54       	subi	r18, 0x4D	; 77
    aec2:	38 47       	sbci	r19, 0x78	; 120
    aec4:	f9 01       	movw	r30, r18
    aec6:	84 91       	lpm	r24, Z+
    aec8:	80 93 7a 0f 	sts	0x0F7A, r24
	}
	if(preview[(p*3)] != 7){//don't want a flashing magic jewel
    aecc:	0e 2d       	mov	r16, r14
    aece:	10 e0       	ldi	r17, 0x00	; 0
    aed0:	e8 01       	movw	r28, r16
    aed2:	cc 0f       	add	r28, r28
    aed4:	dd 1f       	adc	r29, r29
    aed6:	c0 0f       	add	r28, r16
    aed8:	d1 1f       	adc	r29, r17
    aeda:	fe 01       	movw	r30, r28
    aedc:	ee 5c       	subi	r30, 0xCE	; 206
    aede:	f0 4f       	sbci	r31, 0xF0	; 240
    aee0:	80 81       	ld	r24, Z
    aee2:	87 30       	cpi	r24, 0x07	; 7
    aee4:	b9 f1       	breq	.+110    	; 0xaf54 <GeneratePreview+0xd8>
		if(cursetype[p] & FLASHINGJEWELCOMING){
    aee6:	f8 01       	movw	r30, r16
    aee8:	ec 5a       	subi	r30, 0xAC	; 172
    aeea:	f1 4f       	sbci	r31, 0xF1	; 241
    aeec:	80 81       	ld	r24, Z
    aeee:	f8 01       	movw	r30, r16
    aef0:	ee 58       	subi	r30, 0x8E	; 142
    aef2:	f0 4f       	sbci	r31, 0xF0	; 240
    aef4:	87 ff       	sbrs	r24, 7
    aef6:	25 c0       	rjmp	.+74     	; 0xaf42 <GeneratePreview+0xc6>
			if(flashingjeweltimer[p])
    aef8:	80 81       	ld	r24, Z
    aefa:	88 23       	and	r24, r24
    aefc:	11 f0       	breq	.+4      	; 0xaf02 <GeneratePreview+0x86>
				EliminateFlashingJewel(p);
    aefe:	8e 2d       	mov	r24, r14
    af00:	a4 df       	rcall	.-184    	; 0xae4a <EliminateFlashingJewel>
			flashingjeweltimer[p] = 3+(prng(MAX_PLAYERS)%5);
    af02:	82 e0       	ldi	r24, 0x02	; 2
    af04:	da dc       	rcall	.-1612   	; 0xa8ba <prng>
    af06:	f8 01       	movw	r30, r16
    af08:	ee 58       	subi	r30, 0x8E	; 142
    af0a:	f0 4f       	sbci	r31, 0xF0	; 240
    af0c:	65 e0       	ldi	r22, 0x05	; 5
    af0e:	70 e0       	ldi	r23, 0x00	; 0
    af10:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    af14:	8d 5f       	subi	r24, 0xFD	; 253
    af16:	80 83       	st	Z, r24
			cursetype[p] &= 127;
    af18:	f8 01       	movw	r30, r16
    af1a:	ec 5a       	subi	r30, 0xAC	; 172
    af1c:	f1 4f       	sbci	r31, 0xF1	; 241
    af1e:	80 81       	ld	r24, Z
    af20:	8f 77       	andi	r24, 0x7F	; 127
    af22:	80 83       	st	Z, r24
			preview[(p*3)+(prng(MAX_PLAYERS)%3)] |= FLASHINGJEWEL;
    af24:	82 e0       	ldi	r24, 0x02	; 2
    af26:	c9 dc       	rcall	.-1646   	; 0xa8ba <prng>
    af28:	63 e0       	ldi	r22, 0x03	; 3
    af2a:	70 e0       	ldi	r23, 0x00	; 0
    af2c:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    af30:	fc 01       	movw	r30, r24
    af32:	ec 0f       	add	r30, r28
    af34:	fd 1f       	adc	r31, r29
    af36:	ee 5c       	subi	r30, 0xCE	; 206
    af38:	f0 4f       	sbci	r31, 0xF0	; 240
    af3a:	80 81       	ld	r24, Z
    af3c:	80 62       	ori	r24, 0x20	; 32
    af3e:	80 83       	st	Z, r24
    af40:	09 c0       	rjmp	.+18     	; 0xaf54 <GeneratePreview+0xd8>
		}
		else if(flashingjeweltimer[p]){
    af42:	80 81       	ld	r24, Z
    af44:	88 23       	and	r24, r24
    af46:	31 f0       	breq	.+12     	; 0xaf54 <GeneratePreview+0xd8>
			if(!(--flashingjeweltimer[p]))
    af48:	81 50       	subi	r24, 0x01	; 1
    af4a:	80 83       	st	Z, r24
    af4c:	88 23       	and	r24, r24
    af4e:	11 f4       	brne	.+4      	; 0xaf54 <GeneratePreview+0xd8>
				EliminateFlashingJewel(p);
    af50:	8e 2d       	mov	r24, r14
    af52:	7b df       	rcall	.-266    	; 0xae4a <EliminateFlashingJewel>
		}	
	}	
	for(uint8_t i=0;i<3;i++)
		piece[(p*3)+i] = preview[(p*3)+i];
    af54:	fe 01       	movw	r30, r28
    af56:	ed 5b       	subi	r30, 0xBD	; 189
    af58:	f0 4f       	sbci	r31, 0xF0	; 240
    af5a:	9e 01       	movw	r18, r28
    af5c:	2e 5c       	subi	r18, 0xCE	; 206
    af5e:	30 4f       	sbci	r19, 0xF0	; 240
    af60:	d9 01       	movw	r26, r18
    af62:	8c 91       	ld	r24, X
    af64:	80 83       	st	Z, r24
    af66:	fe 01       	movw	r30, r28
    af68:	31 96       	adiw	r30, 0x01	; 1
    af6a:	df 01       	movw	r26, r30
    af6c:	ae 5c       	subi	r26, 0xCE	; 206
    af6e:	b0 4f       	sbci	r27, 0xF0	; 240
    af70:	8c 91       	ld	r24, X
    af72:	ed 5b       	subi	r30, 0xBD	; 189
    af74:	f0 4f       	sbci	r31, 0xF0	; 240
    af76:	80 83       	st	Z, r24
    af78:	fe 01       	movw	r30, r28
    af7a:	32 96       	adiw	r30, 0x02	; 2
    af7c:	df 01       	movw	r26, r30
    af7e:	ae 5c       	subi	r26, 0xCE	; 206
    af80:	b0 4f       	sbci	r27, 0xF0	; 240
    af82:	8c 91       	ld	r24, X
    af84:	ed 5b       	subi	r30, 0xBD	; 189
    af86:	f0 4f       	sbci	r31, 0xF0	; 240
    af88:	80 83       	st	Z, r24
    af8a:	e9 01       	movw	r28, r18
    af8c:	ff 24       	eor	r15, r15
	
	for(uint8_t i=0;i<3;i++)
		preview[(p*3)+i] = 1+(prng(p)%6);
    af8e:	8e 2d       	mov	r24, r14
    af90:	94 dc       	rcall	.-1752   	; 0xa8ba <prng>
    af92:	66 e0       	ldi	r22, 0x06	; 6
    af94:	70 e0       	ldi	r23, 0x00	; 0
    af96:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    af9a:	8f 5f       	subi	r24, 0xFF	; 255
    af9c:	89 93       	st	Y+, r24
		}	
	}	
	for(uint8_t i=0;i<3;i++)
		piece[(p*3)+i] = preview[(p*3)+i];
	
	for(uint8_t i=0;i<3;i++)
    af9e:	f3 94       	inc	r15
    afa0:	b3 e0       	ldi	r27, 0x03	; 3
    afa2:	fb 16       	cp	r15, r27
    afa4:	a1 f7       	brne	.-24     	; 0xaf8e <GeneratePreview+0x112>
		preview[(p*3)+i] = 1+(prng(p)%6);

	piecey[p] = 0;
    afa6:	f8 01       	movw	r30, r16
    afa8:	e3 59       	subi	r30, 0x93	; 147
    afaa:	f1 4f       	sbci	r31, 0xF1	; 241
    afac:	10 82       	st	Z, r1
	piecex[p] = 2;
    afae:	f8 01       	movw	r30, r16
    afb0:	e0 59       	subi	r30, 0x90	; 144
    afb2:	f0 4f       	sbci	r31, 0xF0	; 240
    afb4:	82 e0       	ldi	r24, 0x02	; 2
    afb6:	80 83       	st	Z, r24
	piecerot[p] = 0;
    afb8:	08 59       	subi	r16, 0x98	; 152
    afba:	10 4f       	sbci	r17, 0xF0	; 240
    afbc:	f8 01       	movw	r30, r16
    afbe:	10 82       	st	Z, r1
	if(p == 1 && cpustate)
    afc0:	f1 e0       	ldi	r31, 0x01	; 1
    afc2:	ef 16       	cp	r14, r31
    afc4:	39 f4       	brne	.+14     	; 0xafd4 <GeneratePreview+0x158>
    afc6:	80 91 6b 0e 	lds	r24, 0x0E6B
    afca:	88 23       	and	r24, r24
    afcc:	19 f0       	breq	.+6      	; 0xafd4 <GeneratePreview+0x158>
		cpustate = CPUFIRSTTICK;//let cpu know next move has begun
    afce:	80 e1       	ldi	r24, 0x10	; 16
    afd0:	80 93 6b 0e 	sts	0x0E6B, r24
//	downletup[p] = 0;
}
    afd4:	cd b7       	in	r28, 0x3d	; 61
    afd6:	de b7       	in	r29, 0x3e	; 62
    afd8:	e6 e0       	ldi	r30, 0x06	; 6
    afda:	0c 94 25 74 	jmp	0xe84a	; 0xe84a <__epilogue_restores__+0x18>

0000afde <RamTileStateMachine>:
#include "input.h"




void RamTileStateMachine(){//handle updating of all the ram tile graphics
    afde:	a0 e0       	ldi	r26, 0x00	; 0
    afe0:	b0 e0       	ldi	r27, 0x00	; 0
    afe2:	e5 ef       	ldi	r30, 0xF5	; 245
    afe4:	f7 e5       	ldi	r31, 0x57	; 87
    afe6:	0c 94 ff 73 	jmp	0xe7fe	; 0xe7fe <__prologue_saves__+0x4>


//TODO MAYBE RAMIFY 4 DIGITS FOR PLAYER SCORES, ELIMINATE NUMBER TILES!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		if(cursetype[i]&127)
    afea:	80 91 54 0e 	lds	r24, 0x0E54
    afee:	90 e0       	ldi	r25, 0x00	; 0
    aff0:	8f 77       	andi	r24, 0x7F	; 127
    aff2:	90 70       	andi	r25, 0x00	; 0
    aff4:	89 2b       	or	r24, r25
    aff6:	29 f0       	breq	.+10     	; 0xb002 <RamTileStateMachine+0x24>
			ramtilestate[i] |= NEEDGRIDRAMMED;
    aff8:	80 91 94 0f 	lds	r24, 0x0F94
    affc:	84 60       	ori	r24, 0x04	; 4
    affe:	80 93 94 0f 	sts	0x0F94, r24


//TODO MAYBE RAMIFY 4 DIGITS FOR PLAYER SCORES, ELIMINATE NUMBER TILES!!!!!!!!!!!!!!!!!!!!!!!!!!!
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		if(cursetype[i]&127)
    b002:	80 91 55 0e 	lds	r24, 0x0E55
    b006:	90 e0       	ldi	r25, 0x00	; 0
    b008:	8f 77       	andi	r24, 0x7F	; 127
    b00a:	90 70       	andi	r25, 0x00	; 0
    b00c:	89 2b       	or	r24, r25
    b00e:	29 f0       	breq	.+10     	; 0xb01a <RamTileStateMachine+0x3c>
			ramtilestate[i] |= NEEDGRIDRAMMED;
    b010:	80 91 95 0f 	lds	r24, 0x0F95
    b014:	84 60       	ori	r24, 0x04	; 4
    b016:	80 93 95 0f 	sts	0x0F95, r24
	}
	
	//ColumnsPrint3num(14,14,ramtilestate[1]);
	//WaitVsync(60);

	if((!ramtilestate[0] && !ramtilestate[1]) || state[0] & PAUSED)
    b01a:	90 91 94 0f 	lds	r25, 0x0F94
    b01e:	99 23       	and	r25, r25
    b020:	29 f4       	brne	.+10     	; 0xb02c <RamTileStateMachine+0x4e>
    b022:	80 91 95 0f 	lds	r24, 0x0F95
    b026:	88 23       	and	r24, r24
    b028:	09 f4       	brne	.+2      	; 0xb02c <RamTileStateMachine+0x4e>
    b02a:	6f c1       	rjmp	.+734    	; 0xb30a <RamTileStateMachine+0x32c>
    b02c:	20 91 6f 0e 	lds	r18, 0x0E6F
    b030:	26 fd       	sbrc	r18, 6
    b032:	6b c1       	rjmp	.+726    	; 0xb30a <RamTileStateMachine+0x32c>
		return;

	uint8_t t,ttoff;
	uint16_t toff,roff;
	
	if(ramtilestate[0] & NEEDALLRAMMED){//came back from pause or starting round, eliminate possible text artifacts
    b034:	97 ff       	sbrs	r25, 7
    b036:	0c c0       	rjmp	.+24     	; 0xb050 <RamTileStateMachine+0x72>
		ramtilestate[0] = ramtilestate[1] = (NEEDMAGICRAMMED|NEEDGRIDRAMMED|NEEDCRASHRAMMED|NEEDEXPLOSIONRAMMED);
    b038:	8f e0       	ldi	r24, 0x0F	; 15
    b03a:	80 93 95 0f 	sts	0x0F95, r24
    b03e:	80 93 94 0f 	sts	0x0F94, r24
    b042:	ec e2       	ldi	r30, 0x2C	; 44
    b044:	f4 e0       	ldi	r31, 0x04	; 4
		for(uint16_t i=0;i<FIRSTCRASHRT*64;i++)//black out any possible text artifacts from RamifyFont()
			ram_tiles[i] = 0;
    b046:	11 92       	st	Z+, r1
	uint8_t t,ttoff;
	uint16_t toff,roff;
	
	if(ramtilestate[0] & NEEDALLRAMMED){//came back from pause or starting round, eliminate possible text artifacts
		ramtilestate[0] = ramtilestate[1] = (NEEDMAGICRAMMED|NEEDGRIDRAMMED|NEEDCRASHRAMMED|NEEDEXPLOSIONRAMMED);
		for(uint16_t i=0;i<FIRSTCRASHRT*64;i++)//black out any possible text artifacts from RamifyFont()
    b048:	6a e0       	ldi	r22, 0x0A	; 10
    b04a:	ec 3a       	cpi	r30, 0xAC	; 172
    b04c:	f6 07       	cpc	r31, r22
    b04e:	d9 f7       	brne	.-10     	; 0xb046 <RamTileStateMachine+0x68>
			ram_tiles[i] = 0;
	//	WaitVsync(2);
	}		
		
	if(ramtilestate[0] & NEEDMAGICRAMMED){
    b050:	90 91 94 0f 	lds	r25, 0x0F94
    b054:	90 ff       	sbrs	r25, 0
    b056:	29 c0       	rjmp	.+82     	; 0xb0aa <RamTileStateMachine+0xcc>
		ramtilestate[0] ^= NEEDMAGICRAMMED;
    b058:	81 e0       	ldi	r24, 0x01	; 1
    b05a:	98 27       	eor	r25, r24
    b05c:	90 93 94 0f 	sts	0x0F94, r25
		//if(true || magicjewelsonscreen){
			uint8_t poff = 6*magiccolor;
    b060:	90 91 3d 0e 	lds	r25, 0x0E3D
    b064:	86 e0       	ldi	r24, 0x06	; 6
    b066:	98 9f       	mul	r25, r24
    b068:	90 2d       	mov	r25, r0
    b06a:	11 24       	eor	r1, r1
			uint16_t limit;
			if(state[0] == (255^PAUSED))//used for intro, save some ram tiles for text
    b06c:	2f 3b       	cpi	r18, 0xBF	; 191
    b06e:	19 f0       	breq	.+6      	; 0xb076 <RamTileStateMachine+0x98>
    b070:	40 e0       	ldi	r20, 0x00	; 0
    b072:	53 e0       	ldi	r21, 0x03	; 3
    b074:	02 c0       	rjmp	.+4      	; 0xb07a <RamTileStateMachine+0x9c>
    b076:	40 e0       	ldi	r20, 0x00	; 0
    b078:	52 e0       	ldi	r21, 0x02	; 2
    b07a:	20 e0       	ldi	r18, 0x00	; 0
    b07c:	30 e0       	ldi	r19, 0x00	; 0
				limit = (8*64);
			else
				limit = (12*64);
			
			for(uint16_t i=0;i<limit;i++)
				ram_tiles[i] = pgm_read_byte(&MagicPallet[pgm_read_byte(&MagicTiles[i])+poff]);
    b07e:	89 2f       	mov	r24, r25
    b080:	90 e0       	ldi	r25, 0x00	; 0
    b082:	f9 01       	movw	r30, r18
    b084:	e7 52       	subi	r30, 0x27	; 39
    b086:	f0 4f       	sbci	r31, 0xF0	; 240
    b088:	e4 91       	lpm	r30, Z+
    b08a:	bc 01       	movw	r22, r24
    b08c:	6e 0f       	add	r22, r30
    b08e:	71 1d       	adc	r23, r1
    b090:	fb 01       	movw	r30, r22
    b092:	eb 54       	subi	r30, 0x4B	; 75
    b094:	f0 4f       	sbci	r31, 0xF0	; 240
    b096:	e4 91       	lpm	r30, Z+
    b098:	d9 01       	movw	r26, r18
    b09a:	a4 5d       	subi	r26, 0xD4	; 212
    b09c:	bb 4f       	sbci	r27, 0xFB	; 251
    b09e:	ec 93       	st	X, r30
			if(state[0] == (255^PAUSED))//used for intro, save some ram tiles for text
				limit = (8*64);
			else
				limit = (12*64);
			
			for(uint16_t i=0;i<limit;i++)
    b0a0:	2f 5f       	subi	r18, 0xFF	; 255
    b0a2:	3f 4f       	sbci	r19, 0xFF	; 255
    b0a4:	24 17       	cp	r18, r20
    b0a6:	35 07       	cpc	r19, r21
    b0a8:	60 f3       	brcs	.-40     	; 0xb082 <RamTileStateMachine+0xa4>
				ram_tiles[i] = pgm_read_byte(&MagicPallet[pgm_read_byte(&MagicTiles[i])+poff]);
		//}	
	}

	if(ramtilestate[0] & NEEDCRASHRAMMED){
    b0aa:	90 91 94 0f 	lds	r25, 0x0F94
    b0ae:	93 fd       	sbrc	r25, 3
    b0b0:	2a c0       	rjmp	.+84     	; 0xb106 <RamTileStateMachine+0x128>
		if(ramtilestate[p] & NEEDGRIDRAMMED){
			ramtilestate[p] ^= NEEDGRIDRAMMED;
			if(cursetype[p] == 0 || cursetime[p] < 4)
				t = pgm_read_byte(&GridPallet[5+level]);
			else
				t = pgm_read_byte(&GetReadyPallet[(level*(GLOBALFLASHCOUNT+1))+(globalflashcounter)]);//pgm_read_byte(&GridPallet[3]);
    b0b2:	e0 91 4b 0f 	lds	r30, 0x0F4B
    b0b6:	f0 e0       	ldi	r31, 0x00	; 0
    b0b8:	9f 01       	movw	r18, r30
    b0ba:	14 e0       	ldi	r17, 0x04	; 4
    b0bc:	22 0f       	add	r18, r18
    b0be:	33 1f       	adc	r19, r19
    b0c0:	1a 95       	dec	r17
    b0c2:	e1 f7       	brne	.-8      	; 0xb0bc <RamTileStateMachine+0xde>
    b0c4:	80 91 01 01 	lds	r24, 0x0101
    b0c8:	28 0f       	add	r18, r24
    b0ca:	31 1d       	adc	r19, r1
    b0cc:	27 5e       	subi	r18, 0xE7	; 231
    b0ce:	35 4e       	sbci	r19, 0xE5	; 229
			ramtilestate[p] |= NEEDGRIDRAMMED;//explosion is composited onto copy of grid tiles(which could be varying shaded of red for each player depending on curse)
			
		if(ramtilestate[p] & NEEDGRIDRAMMED){
			ramtilestate[p] ^= NEEDGRIDRAMMED;
			if(cursetype[p] == 0 || cursetime[p] < 4)
				t = pgm_read_byte(&GridPallet[5+level]);
    b0d0:	e2 5b       	subi	r30, 0xB2	; 178
    b0d2:	f5 4e       	sbci	r31, 0xE5	; 229
    b0d4:	64 e9       	ldi	r22, 0x94	; 148
    b0d6:	7f e0       	ldi	r23, 0x0F	; 15
    b0d8:	bc e2       	ldi	r27, 0x2C	; 44
    b0da:	ab 2e       	mov	r10, r27
    b0dc:	b8 e0       	ldi	r27, 0x08	; 8
    b0de:	bb 2e       	mov	r11, r27
    b0e0:	a3 e6       	ldi	r26, 0x63	; 99
    b0e2:	8a 2e       	mov	r8, r26
    b0e4:	ae e0       	ldi	r26, 0x0E	; 14
    b0e6:	9a 2e       	mov	r9, r26
    b0e8:	00 e0       	ldi	r16, 0x00	; 0
    b0ea:	10 e0       	ldi	r17, 0x00	; 0
    b0ec:	c1 2c       	mov	r12, r1
    b0ee:	53 e0       	ldi	r21, 0x03	; 3
    b0f0:	d5 2e       	mov	r13, r21
    b0f2:	ee 24       	eor	r14, r14
    b0f4:	ff 24       	eor	r15, r15
	for(uint8_t p=0;p<MAX_PLAYERS;p++){
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED)
			ramtilestate[p] |= NEEDGRIDRAMMED;//explosion is composited onto copy of grid tiles(which could be varying shaded of red for each player depending on curse)
			
		if(ramtilestate[p] & NEEDGRIDRAMMED){
			ramtilestate[p] ^= NEEDGRIDRAMMED;
    b0f6:	44 e0       	ldi	r20, 0x04	; 4
    b0f8:	44 2e       	mov	r4, r20
			if(cursetype[p] == 0 || cursetime[p] < 4)
				t = pgm_read_byte(&GridPallet[5+level]);
    b0fa:	64 90       	lpm	r6, Z+
			else
				t = pgm_read_byte(&GetReadyPallet[(level*(GLOBALFLASHCOUNT+1))+(globalflashcounter)]);//pgm_read_byte(&GridPallet[3]);
    b0fc:	f9 01       	movw	r30, r18
    b0fe:	74 90       	lpm	r7, Z+
			
					
		}
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED){
			//TODO MAKE 4BPP
			ramtilestate[p] ^= NEEDEXPLOSIONRAMMED;
    b100:	32 e0       	ldi	r19, 0x02	; 2
    b102:	53 2e       	mov	r5, r19
    b104:	39 c0       	rjmp	.+114    	; 0xb178 <RamTileStateMachine+0x19a>
				ram_tiles[i] = pgm_read_byte(&MagicPallet[pgm_read_byte(&MagicTiles[i])+poff]);
		//}	
	}

	if(ramtilestate[0] & NEEDCRASHRAMMED){
		ramtilestate[0] ^= NEEDCRASHRAMMED;
    b106:	88 e0       	ldi	r24, 0x08	; 8
    b108:	98 27       	eor	r25, r24
    b10a:	90 93 94 0f 	sts	0x0F94, r25
    b10e:	b0 91 4b 0f 	lds	r27, 0x0F4B
    b112:	bb 0f       	add	r27, r27
    b114:	bb 0f       	add	r27, r27
    b116:	bb 0f       	add	r27, r27
    b118:	60 e8       	ldi	r22, 0x80	; 128
    b11a:	76 e0       	ldi	r23, 0x06	; 6
    b11c:	29 ed       	ldi	r18, 0xD9	; 217
    b11e:	32 e1       	ldi	r19, 0x12	; 18
    b120:	ab 01       	movw	r20, r22
			for(uint8_t j=0;j<64;j++){
				t = pgm_read_byte(&CrashTiles[j]);
				for(uint8_t k=0;k<4;k++){
					t2 = ((t&0b11000000)>>6);
					t <<= 2;
					ram_tiles[roff++] = pgm_read_byte(&CrashPallet[(ttoff+t2)]);
    b122:	0b 2f       	mov	r16, r27
    b124:	10 e0       	ldi	r17, 0x00	; 0
		uint8_t t2;
		for(uint8_t i=0;i<2;i++){
			ttoff = (level*8)+(i*4);

			for(uint8_t j=0;j<64;j++){
				t = pgm_read_byte(&CrashTiles[j]);
    b126:	f9 01       	movw	r30, r18
    b128:	84 91       	lpm	r24, Z+
    b12a:	ea 01       	movw	r28, r20
    b12c:	c4 5d       	subi	r28, 0xD4	; 212
    b12e:	db 4f       	sbci	r29, 0xFB	; 251
    b130:	a8 2f       	mov	r26, r24
    b132:	90 e0       	ldi	r25, 0x00	; 0
				for(uint8_t k=0;k<4;k++){
					t2 = ((t&0b11000000)>>6);
    b134:	8a 2f       	mov	r24, r26
    b136:	82 95       	swap	r24
    b138:	86 95       	lsr	r24
    b13a:	86 95       	lsr	r24
    b13c:	83 70       	andi	r24, 0x03	; 3
					t <<= 2;
    b13e:	aa 0f       	add	r26, r26
    b140:	aa 0f       	add	r26, r26
					ram_tiles[roff++] = pgm_read_byte(&CrashPallet[(ttoff+t2)]);
    b142:	f8 01       	movw	r30, r16
    b144:	e8 0f       	add	r30, r24
    b146:	f1 1d       	adc	r31, r1
    b148:	e7 5c       	subi	r30, 0xC7	; 199
    b14a:	f5 4e       	sbci	r31, 0xE5	; 229
    b14c:	e4 91       	lpm	r30, Z+
    b14e:	e9 93       	st	Y+, r30
		for(uint8_t i=0;i<2;i++){
			ttoff = (level*8)+(i*4);

			for(uint8_t j=0;j<64;j++){
				t = pgm_read_byte(&CrashTiles[j]);
				for(uint8_t k=0;k<4;k++){
    b150:	9f 5f       	subi	r25, 0xFF	; 255
    b152:	94 30       	cpi	r25, 0x04	; 4
    b154:	79 f7       	brne	.-34     	; 0xb134 <RamTileStateMachine+0x156>
    b156:	4c 5f       	subi	r20, 0xFC	; 252
    b158:	5f 4f       	sbci	r21, 0xFF	; 255
    b15a:	2f 5f       	subi	r18, 0xFF	; 255
    b15c:	3f 4f       	sbci	r19, 0xFF	; 255
		roff = FIRSTCRASHRT*64;
		uint8_t t2;
		for(uint8_t i=0;i<2;i++){
			ttoff = (level*8)+(i*4);

			for(uint8_t j=0;j<64;j++){
    b15e:	f3 e1       	ldi	r31, 0x13	; 19
    b160:	29 31       	cpi	r18, 0x19	; 25
    b162:	3f 07       	cpc	r19, r31
    b164:	01 f7       	brne	.-64     	; 0xb126 <RamTileStateMachine+0x148>
    b166:	60 50       	subi	r22, 0x00	; 0
    b168:	7f 4f       	sbci	r23, 0xFF	; 255
    b16a:	bc 5f       	subi	r27, 0xFC	; 252

	if(ramtilestate[0] & NEEDCRASHRAMMED){
		ramtilestate[0] ^= NEEDCRASHRAMMED;
		roff = FIRSTCRASHRT*64;
		uint8_t t2;
		for(uint8_t i=0;i<2;i++){
    b16c:	88 e0       	ldi	r24, 0x08	; 8
    b16e:	60 38       	cpi	r22, 0x80	; 128
    b170:	78 07       	cpc	r23, r24
    b172:	09 f4       	brne	.+2      	; 0xb176 <RamTileStateMachine+0x198>
    b174:	9e cf       	rjmp	.-196    	; 0xb0b2 <RamTileStateMachine+0xd4>
    b176:	d2 cf       	rjmp	.-92     	; 0xb11c <RamTileStateMachine+0x13e>
			}
		}
	}		

	for(uint8_t p=0;p<MAX_PLAYERS;p++){
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED)
    b178:	fb 01       	movw	r30, r22
    b17a:	80 81       	ld	r24, Z
    b17c:	81 ff       	sbrs	r24, 1
    b17e:	02 c0       	rjmp	.+4      	; 0xb184 <RamTileStateMachine+0x1a6>
			ramtilestate[p] |= NEEDGRIDRAMMED;//explosion is composited onto copy of grid tiles(which could be varying shaded of red for each player depending on curse)
    b180:	84 60       	ori	r24, 0x04	; 4
    b182:	80 83       	st	Z, r24
			
		if(ramtilestate[p] & NEEDGRIDRAMMED){
    b184:	fb 01       	movw	r30, r22
    b186:	80 81       	ld	r24, Z
    b188:	82 ff       	sbrs	r24, 2
    b18a:	64 c0       	rjmp	.+200    	; 0xb254 <RamTileStateMachine+0x276>
			ramtilestate[p] ^= NEEDGRIDRAMMED;
    b18c:	84 25       	eor	r24, r4
    b18e:	80 83       	st	Z, r24
			if(cursetype[p] == 0 || cursetime[p] < 4)
    b190:	f8 01       	movw	r30, r16
    b192:	ec 5a       	subi	r30, 0xAC	; 172
    b194:	f1 4f       	sbci	r31, 0xF1	; 241
    b196:	80 81       	ld	r24, Z
    b198:	88 23       	and	r24, r24
    b19a:	29 f0       	breq	.+10     	; 0xb1a6 <RamTileStateMachine+0x1c8>
    b19c:	f4 01       	movw	r30, r8
    b19e:	80 81       	ld	r24, Z
    b1a0:	91 81       	ldd	r25, Z+1	; 0x01
    b1a2:	04 97       	sbiw	r24, 0x04	; 4
    b1a4:	10 f4       	brcc	.+4      	; 0xb1aa <RamTileStateMachine+0x1cc>
				t = pgm_read_byte(&GridPallet[5+level]);
    b1a6:	96 2d       	mov	r25, r6
    b1a8:	01 c0       	rjmp	.+2      	; 0xb1ac <RamTileStateMachine+0x1ce>
			else
				t = pgm_read_byte(&GetReadyPallet[(level*(GLOBALFLASHCOUNT+1))+(globalflashcounter)]);//pgm_read_byte(&GridPallet[3]);
    b1aa:	97 2d       	mov	r25, r7
    b1ac:	d7 01       	movw	r26, r14
    b1ae:	a4 5d       	subi	r26, 0xD4	; 212
    b1b0:	bb 4f       	sbci	r27, 0xFB	; 251
    b1b2:	40 e0       	ldi	r20, 0x00	; 0
    b1b4:	50 e0       	ldi	r21, 0x00	; 0
				
			roff = (FIRSTGRIDRT+(p*3))*64;
			ttoff = 0;
			uint8_t t2;
			for(uint8_t i=0;i<3*64;i+=8){
				t2 = pgm_read_byte(&GridTiles[ttoff++]);//get 1bpp image data
    b1b6:	fa 01       	movw	r30, r20
    b1b8:	e3 56       	subi	r30, 0x63	; 99
    b1ba:	f0 4f       	sbci	r31, 0xF0	; 240
    b1bc:	84 91       	lpm	r24, Z+
				if(t2&128)
    b1be:	87 ff       	sbrs	r24, 7
    b1c0:	05 c0       	rjmp	.+10     	; 0xb1cc <RamTileStateMachine+0x1ee>
					ram_tiles[roff] = t;
    b1c2:	a0 50       	subi	r26, 0x00	; 0
    b1c4:	bb 4f       	sbci	r27, 0xFB	; 251
    b1c6:	9c 93       	st	X, r25
    b1c8:	a0 50       	subi	r26, 0x00	; 0
    b1ca:	b5 40       	sbci	r27, 0x05	; 5
				roff++;
				t2 <<= 1;
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b1cc:	38 2f       	mov	r19, r24
    b1ce:	33 0f       	add	r19, r19
    b1d0:	86 ff       	sbrs	r24, 6
    b1d2:	05 c0       	rjmp	.+10     	; 0xb1de <RamTileStateMachine+0x200>
    b1d4:	af 5f       	subi	r26, 0xFF	; 255
    b1d6:	ba 4f       	sbci	r27, 0xFA	; 250
    b1d8:	9c 93       	st	X, r25
    b1da:	a1 50       	subi	r26, 0x01	; 1
    b1dc:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b1de:	23 2f       	mov	r18, r19
    b1e0:	22 0f       	add	r18, r18
    b1e2:	36 ff       	sbrs	r19, 6
    b1e4:	05 c0       	rjmp	.+10     	; 0xb1f0 <RamTileStateMachine+0x212>
    b1e6:	ae 5f       	subi	r26, 0xFE	; 254
    b1e8:	ba 4f       	sbci	r27, 0xFA	; 250
    b1ea:	9c 93       	st	X, r25
    b1ec:	a2 50       	subi	r26, 0x02	; 2
    b1ee:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b1f0:	82 2f       	mov	r24, r18
    b1f2:	88 0f       	add	r24, r24
    b1f4:	26 ff       	sbrs	r18, 6
    b1f6:	05 c0       	rjmp	.+10     	; 0xb202 <RamTileStateMachine+0x224>
    b1f8:	ad 5f       	subi	r26, 0xFD	; 253
    b1fa:	ba 4f       	sbci	r27, 0xFA	; 250
    b1fc:	9c 93       	st	X, r25
    b1fe:	a3 50       	subi	r26, 0x03	; 3
    b200:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b202:	28 2f       	mov	r18, r24
    b204:	22 0f       	add	r18, r18
    b206:	86 ff       	sbrs	r24, 6
    b208:	05 c0       	rjmp	.+10     	; 0xb214 <RamTileStateMachine+0x236>
    b20a:	ac 5f       	subi	r26, 0xFC	; 252
    b20c:	ba 4f       	sbci	r27, 0xFA	; 250
    b20e:	9c 93       	st	X, r25
    b210:	a4 50       	subi	r26, 0x04	; 4
    b212:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b214:	82 2f       	mov	r24, r18
    b216:	88 0f       	add	r24, r24
    b218:	26 ff       	sbrs	r18, 6
    b21a:	05 c0       	rjmp	.+10     	; 0xb226 <RamTileStateMachine+0x248>
    b21c:	ab 5f       	subi	r26, 0xFB	; 251
    b21e:	ba 4f       	sbci	r27, 0xFA	; 250
    b220:	9c 93       	st	X, r25
    b222:	a5 50       	subi	r26, 0x05	; 5
    b224:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b226:	28 2f       	mov	r18, r24
    b228:	22 0f       	add	r18, r18
    b22a:	86 ff       	sbrs	r24, 6
    b22c:	05 c0       	rjmp	.+10     	; 0xb238 <RamTileStateMachine+0x25a>
    b22e:	aa 5f       	subi	r26, 0xFA	; 250
    b230:	ba 4f       	sbci	r27, 0xFA	; 250
    b232:	9c 93       	st	X, r25
    b234:	a6 50       	subi	r26, 0x06	; 6
    b236:	b5 40       	sbci	r27, 0x05	; 5
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
    b238:	26 ff       	sbrs	r18, 6
    b23a:	05 c0       	rjmp	.+10     	; 0xb246 <RamTileStateMachine+0x268>
    b23c:	a9 5f       	subi	r26, 0xF9	; 249
    b23e:	ba 4f       	sbci	r27, 0xFA	; 250
    b240:	9c 93       	st	X, r25
    b242:	a7 50       	subi	r26, 0x07	; 7
    b244:	b5 40       	sbci	r27, 0x05	; 5
    b246:	4f 5f       	subi	r20, 0xFF	; 255
    b248:	5f 4f       	sbci	r21, 0xFF	; 255
    b24a:	18 96       	adiw	r26, 0x08	; 8
				t = pgm_read_byte(&GetReadyPallet[(level*(GLOBALFLASHCOUNT+1))+(globalflashcounter)]);//pgm_read_byte(&GridPallet[3]);
				
			roff = (FIRSTGRIDRT+(p*3))*64;
			ttoff = 0;
			uint8_t t2;
			for(uint8_t i=0;i<3*64;i+=8){
    b24c:	48 31       	cpi	r20, 0x18	; 24
    b24e:	51 05       	cpc	r21, r1
    b250:	09 f0       	breq	.+2      	; 0xb254 <RamTileStateMachine+0x276>
    b252:	b1 cf       	rjmp	.-158    	; 0xb1b6 <RamTileStateMachine+0x1d8>
				if(t2&128){ram_tiles[roff] = t;}roff++;t2 <<= 1;
			}			
			
					
		}
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED){
    b254:	fb 01       	movw	r30, r22
    b256:	80 81       	ld	r24, Z
    b258:	81 ff       	sbrs	r24, 1
    b25a:	41 c0       	rjmp	.+130    	; 0xb2de <RamTileStateMachine+0x300>
			//TODO MAKE 4BPP
			ramtilestate[p] ^= NEEDEXPLOSIONRAMMED;
    b25c:	85 25       	eor	r24, r5
    b25e:	80 83       	st	Z, r24
    b260:	d7 01       	movw	r26, r14
    b262:	a4 5d       	subi	r26, 0xD4	; 212
    b264:	b6 4f       	sbci	r27, 0xF6	; 246
    b266:	e6 01       	movw	r28, r12
    b268:	c4 5d       	subi	r28, 0xD4	; 212
    b26a:	db 4f       	sbci	r29, 0xFB	; 251
    b26c:	fe 01       	movw	r30, r28
    b26e:	90 e0       	ldi	r25, 0x00	; 0
			toff = (uint16_t)(FIRSTGRIDRT+(p*3))*64;
			roff = (uint16_t)(FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64;i++){//first, copy over grid tiles(which could be colored from curse)
				ram_tiles[roff++] = ram_tiles[toff++];
    b270:	8c 91       	ld	r24, X
    b272:	80 83       	st	Z, r24
				ram_tiles[roff++] = ram_tiles[toff++];
    b274:	11 96       	adiw	r26, 0x01	; 1
    b276:	8c 91       	ld	r24, X
    b278:	11 97       	sbiw	r26, 0x01	; 1
    b27a:	81 83       	std	Z+1, r24	; 0x01
				ram_tiles[roff++] = ram_tiles[toff++];
    b27c:	12 96       	adiw	r26, 0x02	; 2
    b27e:	8c 91       	ld	r24, X
    b280:	12 97       	sbiw	r26, 0x02	; 2
    b282:	82 83       	std	Z+2, r24	; 0x02
		if(ramtilestate[p] & NEEDEXPLOSIONRAMMED){
			//TODO MAKE 4BPP
			ramtilestate[p] ^= NEEDEXPLOSIONRAMMED;
			toff = (uint16_t)(FIRSTGRIDRT+(p*3))*64;
			roff = (uint16_t)(FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64;i++){//first, copy over grid tiles(which could be colored from curse)
    b284:	9f 5f       	subi	r25, 0xFF	; 255
    b286:	13 96       	adiw	r26, 0x03	; 3
    b288:	33 96       	adiw	r30, 0x03	; 3
    b28a:	90 34       	cpi	r25, 0x40	; 64
    b28c:	89 f7       	brne	.-30     	; 0xb270 <RamTileStateMachine+0x292>
    b28e:	f6 01       	movw	r30, r12
    b290:	e4 51       	subi	r30, 0x14	; 20
    b292:	fb 4f       	sbci	r31, 0xFB	; 251
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
			}
			for(uint8_t i=0;i<16;i++){//because the 4th grid tile is NOT a ram tile(just a black one) copy black over old explosion data for this ram tile
				ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;
    b294:	10 82       	st	Z, r1
    b296:	11 82       	std	Z+1, r1	; 0x01
    b298:	12 82       	std	Z+2, r1	; 0x02
    b29a:	13 82       	std	Z+3, r1	; 0x03
    b29c:	34 96       	adiw	r30, 0x04	; 4
			for(uint8_t i=0;i<64;i++){//first, copy over grid tiles(which could be colored from curse)
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
				ram_tiles[roff++] = ram_tiles[toff++];
			}
			for(uint8_t i=0;i<16;i++){//because the 4th grid tile is NOT a ram tile(just a black one) copy black over old explosion data for this ram tile
    b29e:	ea 15       	cp	r30, r10
    b2a0:	fb 05       	cpc	r31, r11
    b2a2:	c1 f7       	brne	.-16     	; 0xb294 <RamTileStateMachine+0x2b6>
    b2a4:	f8 01       	movw	r30, r16
    b2a6:	e1 5a       	subi	r30, 0xA1	; 161
    b2a8:	f1 4f       	sbci	r31, 0xF1	; 241
    b2aa:	80 81       	ld	r24, Z
    b2ac:	90 e0       	ldi	r25, 0x00	; 0
    b2ae:	a0 e0       	ldi	r26, 0x00	; 0
    b2b0:	b0 e0       	ldi	r27, 0x00	; 0
    b2b2:	ba 2f       	mov	r27, r26
    b2b4:	a9 2f       	mov	r26, r25
    b2b6:	98 2f       	mov	r25, r24
    b2b8:	88 27       	eor	r24, r24
    b2ba:	fc 01       	movw	r30, r24
    b2bc:	31 96       	adiw	r30, 0x01	; 1
    b2be:	e7 5e       	subi	r30, 0xE7	; 231
    b2c0:	fc 4e       	sbci	r31, 0xEC	; 236
    b2c2:	0a c0       	rjmp	.+20     	; 0xb2d8 <RamTileStateMachine+0x2fa>
				ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;
			}			
			toff = (uint16_t)(256L*stateframe[p]);
			roff = (FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64*2;i++){
				t = pgm_read_byte(&ExplosionTiles[toff++]);
    b2c4:	31 97       	sbiw	r30, 0x01	; 1
    b2c6:	84 91       	lpm	r24, Z+
    b2c8:	31 96       	adiw	r30, 0x01	; 1
				if(t)
    b2ca:	81 11       	cpse	r24, r1
					ram_tiles[roff] = t;
    b2cc:	88 83       	st	Y, r24
				roff++;
				//inlined to avoid need for 16bit iterator(TODO CHECK ASM OUTPUT)
				t = pgm_read_byte(&ExplosionTiles[toff++]);
    b2ce:	84 91       	lpm	r24, Z+
				if(t)
    b2d0:	81 11       	cpse	r24, r1
					ram_tiles[roff] = t;
    b2d2:	89 83       	std	Y+1, r24	; 0x01
    b2d4:	32 96       	adiw	r30, 0x02	; 2
    b2d6:	22 96       	adiw	r28, 0x02	; 2
			for(uint8_t i=0;i<16;i++){//because the 4th grid tile is NOT a ram tile(just a black one) copy black over old explosion data for this ram tile
				ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;ram_tiles[roff++] = 0;
			}			
			toff = (uint16_t)(256L*stateframe[p]);
			roff = (FIRSTEXPLOSIONRT+(p*4))*64;
			for(uint8_t i=0;i<64*2;i++){
    b2d8:	ca 15       	cp	r28, r10
    b2da:	db 05       	cpc	r29, r11
    b2dc:	99 f7       	brne	.-26     	; 0xb2c4 <RamTileStateMachine+0x2e6>
    b2de:	0f 5f       	subi	r16, 0xFF	; 255
    b2e0:	1f 4f       	sbci	r17, 0xFF	; 255
    b2e2:	6f 5f       	subi	r22, 0xFF	; 255
    b2e4:	7f 4f       	sbci	r23, 0xFF	; 255
    b2e6:	80 e0       	ldi	r24, 0x00	; 0
    b2e8:	91 e0       	ldi	r25, 0x01	; 1
    b2ea:	a8 0e       	add	r10, r24
    b2ec:	b9 1e       	adc	r11, r25
    b2ee:	c8 0e       	add	r12, r24
    b2f0:	d9 1e       	adc	r13, r25
    b2f2:	e0 ec       	ldi	r30, 0xC0	; 192
    b2f4:	f0 e0       	ldi	r31, 0x00	; 0
    b2f6:	ee 0e       	add	r14, r30
    b2f8:	ff 1e       	adc	r15, r31
    b2fa:	82 e0       	ldi	r24, 0x02	; 2
    b2fc:	90 e0       	ldi	r25, 0x00	; 0
    b2fe:	88 0e       	add	r8, r24
    b300:	99 1e       	adc	r9, r25
				}				
			}
		}
	}		

	for(uint8_t p=0;p<MAX_PLAYERS;p++){
    b302:	02 30       	cpi	r16, 0x02	; 2
    b304:	11 05       	cpc	r17, r1
    b306:	09 f0       	breq	.+2      	; 0xb30a <RamTileStateMachine+0x32c>
    b308:	37 cf       	rjmp	.-402    	; 0xb178 <RamTileStateMachine+0x19a>
				roff++;
				*/
			}
		}
	}
}
    b30a:	cd b7       	in	r28, 0x3d	; 61
    b30c:	de b7       	in	r29, 0x3e	; 62
    b30e:	e0 e1       	ldi	r30, 0x10	; 16
    b310:	0c 94 1b 74 	jmp	0xe836	; 0xe836 <__epilogue_restores__+0x4>

0000b314 <DoUzenetMenu>:

uint8_t UzenetInit(){
	return 0;
}

void DoUzenetMenu(){
    b314:	0f 93       	push	r16
	uint8_t ret;
	FadeIn(6,false);
    b316:	86 e0       	ldi	r24, 0x06	; 6
    b318:	60 e0       	ldi	r22, 0x00	; 0
    b31a:	f4 d8       	rcall	.-3608   	; 0xa504 <FadeIn>
	DrawTitleBG();
    b31c:	dc dc       	rcall	.-1608   	; 0xacd6 <DrawTitleBG>
	rtl_Print(7,10,PSTR("CONNECTING..."));
    b31e:	87 e0       	ldi	r24, 0x07	; 7
    b320:	6a e0       	ldi	r22, 0x0A	; 10
    b322:	46 e8       	ldi	r20, 0x86	; 134
    b324:	59 e8       	ldi	r21, 0x89	; 137
    b326:	27 da       	rcall	.-2994   	; 0xa776 <rtl_Print>
				return;
		}
		return;
	}
	
	rtl_Print(10,0,PSTR("PLAYERS    PING"));
    b328:	8a e0       	ldi	r24, 0x0A	; 10
    b32a:	60 e0       	ldi	r22, 0x00	; 0
    b32c:	46 e7       	ldi	r20, 0x76	; 118
    b32e:	59 e8       	ldi	r21, 0x89	; 137
    b330:	22 da       	rcall	.-3004   	; 0xa776 <rtl_Print>
	ColumnsDrawMenu(0,4,11,12,10);
    b332:	80 e0       	ldi	r24, 0x00	; 0
    b334:	64 e0       	ldi	r22, 0x04	; 4
    b336:	4b e0       	ldi	r20, 0x0B	; 11
    b338:	2c e0       	ldi	r18, 0x0C	; 12
    b33a:	0a e0       	ldi	r16, 0x0A	; 10
    b33c:	a8 db       	rcall	.-2224   	; 0xaa8e <ColumnsDrawMenu>
    b33e:	ff cf       	rjmp	.-2      	; 0xb33e <DoUzenetMenu+0x2a>

0000b340 <SetInitialState>:

extern uint8_t cpustate;
extern uint8_t cpuskill;
extern uint8_t cpumovewait;

void SetInitialState(){
    b340:	a0 e0       	ldi	r26, 0x00	; 0
    b342:	b0 e0       	ldi	r27, 0x00	; 0
    b344:	e6 ea       	ldi	r30, 0xA6	; 166
    b346:	f9 e5       	ldi	r31, 0x59	; 89
    b348:	0c 94 00 74 	jmp	0xe800	; 0xe800 <__prologue_saves__+0x6>
	if(cpuskill > 9)//shouldnt be necessary? TEST WITH VICTORY AGAINST LEVEL 9 CPU!!
    b34c:	80 91 37 0e 	lds	r24, 0x0E37
    b350:	8a 30       	cpi	r24, 0x0A	; 10
    b352:	18 f0       	brcs	.+6      	; 0xb35a <SetInitialState+0x1a>
		cpuskill = 9;
    b354:	89 e0       	ldi	r24, 0x09	; 9
    b356:	80 93 37 0e 	sts	0x0E37, r24
	game_state = GS_PLAYING|GS_FIRSTTICK;
    b35a:	81 e2       	ldi	r24, 0x21	; 33
    b35c:	80 93 6a 0e 	sts	0x0E6A, r24
	masterVolume = MASTERVOLUME;
    b360:	80 e8       	ldi	r24, 0x80	; 128
    b362:	80 93 1f 0e 	sts	0x0E1F, r24
	if(game_mode == 0){
    b366:	80 91 68 0e 	lds	r24, 0x0E68
    b36a:	88 23       	and	r24, r24
    b36c:	31 f4       	brne	.+12     	; 0xb37a <SetInitialState+0x3a>
		cpustate = 16;//CPUFIRSTTICK;
    b36e:	80 e1       	ldi	r24, 0x10	; 16
    b370:	80 93 6b 0e 	sts	0x0E6B, r24
		cpumovewait = 1;
    b374:	81 e0       	ldi	r24, 0x01	; 1
    b376:	80 93 71 0e 	sts	0x0E71, r24
	}
ramtilestate[0] = NEEDALLRAMMED;
    b37a:	80 e8       	ldi	r24, 0x80	; 128
    b37c:	80 93 94 0f 	sts	0x0F94, r24
	cursetime[0] = cursetime[1] = 2;
    b380:	82 e0       	ldi	r24, 0x02	; 2
    b382:	90 e0       	ldi	r25, 0x00	; 0
    b384:	90 93 66 0e 	sts	0x0E66, r25
    b388:	80 93 65 0e 	sts	0x0E65, r24
    b38c:	90 93 64 0e 	sts	0x0E64, r25
    b390:	80 93 63 0e 	sts	0x0E63, r24
	RamTileStateMachine();
    b394:	24 de       	rcall	.-952    	; 0xafde <RamTileStateMachine>
	cursetime[0] = cursetime[1] = 0;
    b396:	10 92 66 0e 	sts	0x0E66, r1
    b39a:	10 92 65 0e 	sts	0x0E65, r1
    b39e:	10 92 64 0e 	sts	0x0E64, r1
    b3a2:	10 92 63 0e 	sts	0x0E63, r1
	
	//if(!game_mode)
	//	cpustate = CPUFIRSTTICK;
	//else
		//cpustate = 0;
	level = !level;
    b3a6:	90 e0       	ldi	r25, 0x00	; 0
    b3a8:	80 91 4b 0f 	lds	r24, 0x0F4B
    b3ac:	88 23       	and	r24, r24
    b3ae:	09 f4       	brne	.+2      	; 0xb3b2 <SetInitialState+0x72>
    b3b0:	91 e0       	ldi	r25, 0x01	; 1
    b3b2:	90 93 4b 0f 	sts	0x0F4B, r25
	vsyncs = 0;
    b3b6:	10 92 38 0e 	sts	0x0E38, r1
		speed = pgm_read_byte(&PCMSPEEDS[i-FIRSTPCMSOUND]);
	TriggerNote(4,i,speed,vol);
}

inline void DoSong(){
	if(musictrack != level){
    b3ba:	80 91 00 01 	lds	r24, 0x0100
    b3be:	89 17       	cp	r24, r25
    b3c0:	69 f0       	breq	.+26     	; 0xb3dc <SetInitialState+0x9c>
		if(level == 0)
    b3c2:	99 23       	and	r25, r25
    b3c4:	19 f4       	brne	.+6      	; 0xb3cc <SetInitialState+0x8c>
		StartSong(Song1);
    b3c6:	82 ee       	ldi	r24, 0xE2	; 226
    b3c8:	96 e7       	ldi	r25, 0x76	; 118
    b3ca:	02 c0       	rjmp	.+4      	; 0xb3d0 <SetInitialState+0x90>
		else
		StartSong(Song0);
    b3cc:	84 e1       	ldi	r24, 0x14	; 20
    b3ce:	98 e6       	ldi	r25, 0x68	; 104
    b3d0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <StartSong>
		musictrack = level;
    b3d4:	80 91 4b 0f 	lds	r24, 0x0F4B
    b3d8:	80 93 00 01 	sts	0x0100, r24
    b3dc:	57 e5       	ldi	r21, 0x57	; 87
    b3de:	e5 2e       	mov	r14, r21
    b3e0:	5f e0       	ldi	r21, 0x0F	; 15
    b3e2:	f5 2e       	mov	r15, r21
    b3e4:	87 01       	movw	r16, r14
    b3e6:	4d e5       	ldi	r20, 0x5D	; 93
    b3e8:	84 2e       	mov	r8, r20
    b3ea:	4f e0       	ldi	r20, 0x0F	; 15
    b3ec:	94 2e       	mov	r9, r20
    b3ee:	3a e6       	ldi	r19, 0x6A	; 106
    b3f0:	a3 2e       	mov	r10, r19
    b3f2:	3f e0       	ldi	r19, 0x0F	; 15
    b3f4:	b3 2e       	mov	r11, r19
    b3f6:	c0 e0       	ldi	r28, 0x00	; 0
    b3f8:	d0 e0       	ldi	r29, 0x00	; 0
    b3fa:	dd 24       	eor	r13, r13
	DoSong();
		
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		for(uint8_t j=0;j<3;j++)
			crashedtype[(i*3)+j] = 255;
    b3fc:	cc 24       	eor	r12, r12
    b3fe:	ca 94       	dec	r12
			GeneratePreview(0);
			GeneratePreview(0);
		}			
		clear_well(i);
		piecey[i] = 0;
		piecex[i] = 2;
    b400:	22 e0       	ldi	r18, 0x02	; 2
    b402:	52 2e       	mov	r5, r18
		piecerot[i] = 0;
		state[i] = GETREADY;
    b404:	90 e8       	ldi	r25, 0x80	; 128
    b406:	69 2e       	mov	r6, r25
		statetimer[i] = 0;
		stateframe[i] = 0;
		droptimer[i] = DROPTIMER;
    b408:	80 e1       	ldi	r24, 0x10	; 16
    b40a:	78 2e       	mov	r7, r24
    b40c:	89 c0       	rjmp	.+274    	; 0xb520 <SetInitialState+0x1e0>
		
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		for(uint8_t j=0;j<3;j++)
			crashedtype[(i*3)+j] = 255;
		if(i){
			lfsr[i] = lfsr[i-1];
    b40e:	80 91 61 0f 	lds	r24, 0x0F61
    b412:	90 91 62 0f 	lds	r25, 0x0F62
    b416:	90 93 64 0f 	sts	0x0F64, r25
    b41a:	80 93 63 0f 	sts	0x0F63, r24
			piece[3+0] = piece[0];
    b41e:	80 91 43 0f 	lds	r24, 0x0F43
    b422:	80 93 46 0f 	sts	0x0F46, r24
			piece[3+1] = piece[1];
    b426:	80 91 44 0f 	lds	r24, 0x0F44
    b42a:	80 93 47 0f 	sts	0x0F47, r24
			piece[3+2] = piece[2];
    b42e:	80 91 45 0f 	lds	r24, 0x0F45
    b432:	80 93 48 0f 	sts	0x0F48, r24
			preview[3+0] = preview[0];
    b436:	80 91 32 0f 	lds	r24, 0x0F32
    b43a:	80 93 35 0f 	sts	0x0F35, r24
			preview[3+1] = preview[1];
    b43e:	80 91 33 0f 	lds	r24, 0x0F33
    b442:	80 93 36 0f 	sts	0x0F36, r24
			preview[3+2] = preview[2];
    b446:	80 91 34 0f 	lds	r24, 0x0F34
    b44a:	80 93 37 0f 	sts	0x0F37, r24
    b44e:	04 c0       	rjmp	.+8      	; 0xb458 <SetInitialState+0x118>
		}else{
			GeneratePreview(0);
    b450:	80 e0       	ldi	r24, 0x00	; 0
    b452:	14 dd       	rcall	.-1496   	; 0xae7c <GeneratePreview>
			GeneratePreview(0);
    b454:	80 e0       	ldi	r24, 0x00	; 0
    b456:	12 dd       	rcall	.-1500   	; 0xae7c <GeneratePreview>
    b458:	80 e0       	ldi	r24, 0x00	; 0
    b45a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return true;
}

void GeneratePreview(uint8_t p);
void clear_well(uint8_t p){uint8_t off = p*WELLSIZE;for(uint8_t i=0;i<WELLSIZE;i++){well[off++]=0;}}//for(uint8_t y=0;y<16;y++){for(uint8_t x=0;x<6;x++){set_well(x,y,p,0);}}}
    b45c:	ed 2d       	mov	r30, r13
    b45e:	e8 0f       	add	r30, r24
    b460:	f0 e0       	ldi	r31, 0x00	; 0
    b462:	ee 58       	subi	r30, 0x8E	; 142
    b464:	f1 4f       	sbci	r31, 0xF1	; 241
    b466:	10 82       	st	Z, r1
    b468:	01 96       	adiw	r24, 0x01	; 1
    b46a:	80 36       	cpi	r24, 0x60	; 96
    b46c:	91 05       	cpc	r25, r1
    b46e:	b1 f7       	brne	.-20     	; 0xb45c <SetInitialState+0x11c>
		}			
		clear_well(i);
		piecey[i] = 0;
    b470:	fe 01       	movw	r30, r28
    b472:	e3 59       	subi	r30, 0x93	; 147
    b474:	f1 4f       	sbci	r31, 0xF1	; 241
    b476:	10 82       	st	Z, r1
		piecex[i] = 2;
    b478:	fe 01       	movw	r30, r28
    b47a:	e0 59       	subi	r30, 0x90	; 144
    b47c:	f0 4f       	sbci	r31, 0xF0	; 240
    b47e:	50 82       	st	Z, r5
		piecerot[i] = 0;
    b480:	fe 01       	movw	r30, r28
    b482:	e8 59       	subi	r30, 0x98	; 152
    b484:	f0 4f       	sbci	r31, 0xF0	; 240
    b486:	10 82       	st	Z, r1
		state[i] = GETREADY;
    b488:	fe 01       	movw	r30, r28
    b48a:	e1 59       	subi	r30, 0x91	; 145
    b48c:	f1 4f       	sbci	r31, 0xF1	; 241
    b48e:	60 82       	st	Z, r6
		statetimer[i] = 0;
    b490:	fe 01       	movw	r30, r28
    b492:	e0 5b       	subi	r30, 0xB0	; 176
    b494:	f0 4f       	sbci	r31, 0xF0	; 240
    b496:	10 82       	st	Z, r1
		stateframe[i] = 0;
    b498:	fe 01       	movw	r30, r28
    b49a:	e1 5a       	subi	r30, 0xA1	; 161
    b49c:	f1 4f       	sbci	r31, 0xF1	; 241
    b49e:	10 82       	st	Z, r1
		droptimer[i] = DROPTIMER;
    b4a0:	fe 01       	movw	r30, r28
    b4a2:	ea 5b       	subi	r30, 0xBA	; 186
    b4a4:	f1 4f       	sbci	r31, 0xF1	; 241
    b4a6:	70 82       	st	Z, r7
		crashcomingup[i] = 0;
    b4a8:	fe 01       	movw	r30, r28
    b4aa:	e0 5c       	subi	r30, 0xC0	; 192
    b4ac:	f0 4f       	sbci	r31, 0xF0	; 240
    b4ae:	10 82       	st	Z, r1
		crashcomingdown[i] = 0;
    b4b0:	fe 01       	movw	r30, r28
    b4b2:	e1 57       	subi	r30, 0x71	; 113
    b4b4:	f0 4f       	sbci	r31, 0xF0	; 240
    b4b6:	10 82       	st	Z, r1
		crashheight[i] = 0;
    b4b8:	fe 01       	movw	r30, r28
    b4ba:	e2 58       	subi	r30, 0x82	; 130
    b4bc:	f0 4f       	sbci	r31, 0xF0	; 240
    b4be:	10 82       	st	Z, r1
		wellfullness[i] = 0;
    b4c0:	f4 01       	movw	r30, r8
    b4c2:	11 92       	st	Z+, r1
    b4c4:	11 92       	st	Z+, r1
    b4c6:	4f 01       	movw	r8, r30
		sideheld[i] = 0;
    b4c8:	fe 01       	movw	r30, r28
    b4ca:	ed 5a       	subi	r30, 0xAD	; 173
    b4cc:	f0 4f       	sbci	r31, 0xF0	; 240
    b4ce:	10 82       	st	Z, r1
		halfstep[i] = 0;
    b4d0:	fe 01       	movw	r30, r28
    b4d2:	e5 58       	subi	r30, 0x85	; 133
    b4d4:	f0 4f       	sbci	r31, 0xF0	; 240
    b4d6:	10 82       	st	Z, r1
		wasmagicjewel[i] = 0;
    b4d8:	fe 01       	movw	r30, r28
    b4da:	ec 58       	subi	r30, 0x8C	; 140
    b4dc:	f0 4f       	sbci	r31, 0xF0	; 240
    b4de:	10 82       	st	Z, r1
		magicjewelssummoned[i] = 0;
    b4e0:	fe 01       	movw	r30, r28
    b4e2:	e6 5a       	subi	r30, 0xA6	; 166
    b4e4:	f1 4f       	sbci	r31, 0xF1	; 241
    b4e6:	10 82       	st	Z, r1
		chain[i] = 0;
    b4e8:	fe 01       	movw	r30, r28
    b4ea:	e2 59       	subi	r30, 0x92	; 146
    b4ec:	f0 4f       	sbci	r31, 0xF0	; 240
    b4ee:	10 82       	st	Z, r1
		score[i] = 0;
    b4f0:	fe 01       	movw	r30, r28
    b4f2:	e8 5c       	subi	r30, 0xC8	; 200
    b4f4:	f0 4f       	sbci	r31, 0xF0	; 240
    b4f6:	10 82       	st	Z, r1
		jewels[i] = 0;
    b4f8:	f5 01       	movw	r30, r10
    b4fa:	11 92       	st	Z+, r1
    b4fc:	11 92       	st	Z+, r1
    b4fe:	5f 01       	movw	r10, r30
		flashingjeweltimer[i] = 0;
    b500:	fe 01       	movw	r30, r28
    b502:	ee 58       	subi	r30, 0x8E	; 142
    b504:	f0 4f       	sbci	r31, 0xF0	; 240
    b506:	10 82       	st	Z, r1
    b508:	21 96       	adiw	r28, 0x01	; 1
    b50a:	83 e0       	ldi	r24, 0x03	; 3
    b50c:	90 e0       	ldi	r25, 0x00	; 0
    b50e:	e8 0e       	add	r14, r24
    b510:	f9 1e       	adc	r15, r25
    b512:	0d 5f       	subi	r16, 0xFD	; 253
    b514:	1f 4f       	sbci	r17, 0xFF	; 255
    b516:	90 e6       	ldi	r25, 0x60	; 96
    b518:	d9 0e       	add	r13, r25
		//cpustate = 0;
	level = !level;
	vsyncs = 0;
	DoSong();
		
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    b51a:	e0 ec       	ldi	r30, 0xC0	; 192
    b51c:	de 16       	cp	r13, r30
    b51e:	49 f0       	breq	.+18     	; 0xb532 <SetInitialState+0x1f2>
		for(uint8_t j=0;j<3;j++)
			crashedtype[(i*3)+j] = 255;
    b520:	f7 01       	movw	r30, r14
    b522:	c0 82       	st	Z, r12
    b524:	f8 01       	movw	r30, r16
    b526:	c1 82       	std	Z+1, r12	; 0x01
    b528:	c2 82       	std	Z+2, r12	; 0x02
		if(i){
    b52a:	cc 23       	and	r28, r28
    b52c:	09 f0       	breq	.+2      	; 0xb530 <SetInitialState+0x1f0>
    b52e:	6f cf       	rjmp	.-290    	; 0xb40e <SetInitialState+0xce>
    b530:	8f cf       	rjmp	.-226    	; 0xb450 <SetInitialState+0x110>
		chain[i] = 0;
		score[i] = 0;
		jewels[i] = 0;
		flashingjeweltimer[i] = 0;
	}
	magicjewelsonscreen = 0;
    b532:	10 92 2f 0e 	sts	0x0E2F, r1
	tickssincetempochange = 0;
    b536:	10 92 5d 0e 	sts	0x0E5D, r1
	musicspeed = 0;
    b53a:	10 92 42 0f 	sts	0x0F42, r1
#ifdef DEBUG
lfsr[0] = lfsr[1] = 0xA42Fl;
GeneratePreview(0);GeneratePreview(0);GeneratePreview(0);
GeneratePreview(1);GeneratePreview(1);GeneratePreview(1);
#endif
}
    b53e:	cd b7       	in	r28, 0x3d	; 61
    b540:	de b7       	in	r29, 0x3e	; 62
    b542:	ef e0       	ldi	r30, 0x0F	; 15
    b544:	0c 94 1c 74 	jmp	0xe838	; 0xe838 <__epilogue_restores__+0x6>

0000b548 <SetLosing>:
			return;
		}

}

void SetLosing(uint8_t p){
    b548:	98 2f       	mov	r25, r24
	cursetype[p] = 0;
    b54a:	a8 2f       	mov	r26, r24
    b54c:	b0 e0       	ldi	r27, 0x00	; 0
    b54e:	fd 01       	movw	r30, r26
    b550:	ec 5a       	subi	r30, 0xAC	; 172
    b552:	f1 4f       	sbci	r31, 0xF1	; 241
    b554:	10 82       	st	Z, r1
	cursetime[p] = 0;
    b556:	fd 01       	movw	r30, r26
    b558:	ee 0f       	add	r30, r30
    b55a:	ff 1f       	adc	r31, r31
    b55c:	ed 59       	subi	r30, 0x9D	; 157
    b55e:	f1 4f       	sbci	r31, 0xF1	; 241
    b560:	11 82       	std	Z+1, r1	; 0x01
    b562:	10 82       	st	Z, r1
	ramtilestate[p] = NEEDGRIDRAMMED;
    b564:	fd 01       	movw	r30, r26
    b566:	ec 56       	subi	r30, 0x6C	; 108
    b568:	f0 4f       	sbci	r31, 0xF0	; 240
    b56a:	84 e0       	ldi	r24, 0x04	; 4
    b56c:	80 83       	st	Z, r24
	if(state[p] & (LOSING|LOSING2))
    b56e:	fd 01       	movw	r30, r26
    b570:	e1 59       	subi	r30, 0x91	; 145
    b572:	f1 4f       	sbci	r31, 0xF1	; 241
    b574:	80 81       	ld	r24, Z
    b576:	8c 70       	andi	r24, 0x0C	; 12
    b578:	49 f5       	brne	.+82     	; 0xb5cc <SetLosing+0x84>
		return;

	//	clear_well(p);
	if(winner == 255)//means other player didn't lose
    b57a:	80 91 49 0f 	lds	r24, 0x0F49
    b57e:	8f 3f       	cpi	r24, 0xFF	; 255
    b580:	41 f4       	brne	.+16     	; 0xb592 <SetLosing+0x4a>
		winner = !p;
    b582:	10 92 49 0f 	sts	0x0F49, r1
    b586:	99 23       	and	r25, r25
    b588:	51 f4       	brne	.+20     	; 0xb59e <SetLosing+0x56>
    b58a:	81 e0       	ldi	r24, 0x01	; 1
    b58c:	80 93 49 0f 	sts	0x0F49, r24
    b590:	06 c0       	rjmp	.+12     	; 0xb59e <SetLosing+0x56>
	else if(winner == p){//otherwise other player lose too so draw
    b592:	89 17       	cp	r24, r25
    b594:	21 f4       	brne	.+8      	; 0xb59e <SetLosing+0x56>
		winner = 255;
    b596:	8f ef       	ldi	r24, 0xFF	; 255
    b598:	80 93 49 0f 	sts	0x0F49, r24
    b59c:	08 95       	ret
		return;
	}		
	state[p] = LOSING;
    b59e:	fd 01       	movw	r30, r26
    b5a0:	e1 59       	subi	r30, 0x91	; 145
    b5a2:	f1 4f       	sbci	r31, 0xF1	; 241
    b5a4:	84 e0       	ldi	r24, 0x04	; 4
    b5a6:	80 83       	st	Z, r24
	statetimer[p] = LOSINGWAITTICKS;
    b5a8:	a0 5b       	subi	r26, 0xB0	; 176
    b5aa:	b0 4f       	sbci	r27, 0xF0	; 240
    b5ac:	8e e1       	ldi	r24, 0x1E	; 30
    b5ae:	8c 93       	st	X, r24
	WaitVsync(2);
    b5b0:	82 e0       	ldi	r24, 0x02	; 2
    b5b2:	90 e0       	ldi	r25, 0x00	; 0
    b5b4:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
	TriggerFx(40,255,false);//trigger losing patch duet
    b5b8:	88 e2       	ldi	r24, 0x28	; 40
    b5ba:	6f ef       	ldi	r22, 0xFF	; 255
    b5bc:	40 e0       	ldi	r20, 0x00	; 0
    b5be:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <TriggerFx>
	TriggerFx(41,255,false);
    b5c2:	89 e2       	ldi	r24, 0x29	; 41
    b5c4:	6f ef       	ldi	r22, 0xFF	; 255
    b5c6:	40 e0       	ldi	r20, 0x00	; 0
    b5c8:	0c 94 5a 4e 	jmp	0x9cb4	; 0x9cb4 <TriggerFx>
    b5cc:	08 95       	ret

0000b5ce <UpdatePads>:
			
	if(score[0] > 9)
		padstate[0] |= BTN_SL;
}

void UpdatePads(){
    b5ce:	8f 92       	push	r8
    b5d0:	9f 92       	push	r9
    b5d2:	af 92       	push	r10
    b5d4:	bf 92       	push	r11
    b5d6:	cf 92       	push	r12
    b5d8:	df 92       	push	r13
    b5da:	ff 92       	push	r15
    b5dc:	0f 93       	push	r16
    b5de:	1f 93       	push	r17
    b5e0:	cf 93       	push	r28
    b5e2:	df 93       	push	r29
    b5e4:	c2 e4       	ldi	r28, 0x42	; 66
    b5e6:	de e0       	ldi	r29, 0x0E	; 14
    b5e8:	0e e3       	ldi	r16, 0x3E	; 62
    b5ea:	1e e0       	ldi	r17, 0x0E	; 14
    b5ec:	ff 24       	eor	r15, r15
	if((demo_decision/3) < piecex[0])
		padstate[0] = BTN_LEFT;
	else if((demo_decision/3) > piecex[0])
		padstate[0] = BTN_RIGHT;
	else
		padstate[0] = BTN_DOWN;
    b5ee:	f0 e2       	ldi	r31, 0x20	; 32
    b5f0:	8f 2e       	mov	r8, r31
    b5f2:	91 2c       	mov	r9, r1
ColumnsPrint2num(14,14,demo_off);
	*/
	if((demo_decision/3) < piecex[0])
		padstate[0] = BTN_LEFT;
	else if((demo_decision/3) > piecex[0])
		padstate[0] = BTN_RIGHT;
    b5f4:	e0 e8       	ldi	r30, 0x80	; 128
    b5f6:	ae 2e       	mov	r10, r30
    b5f8:	b1 2c       	mov	r11, r1
		return;
	}
ColumnsPrint2num(14,14,demo_off);
	*/
	if((demo_decision/3) < piecex[0])
		padstate[0] = BTN_LEFT;
    b5fa:	70 e4       	ldi	r23, 0x40	; 64
    b5fc:	c7 2e       	mov	r12, r23
    b5fe:	d1 2c       	mov	r13, r1
}

void UpdatePads(){
	//ReadControllers();
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
		oldpadstate[i] = padstate[i];
    b600:	88 81       	ld	r24, Y
    b602:	99 81       	ldd	r25, Y+1	; 0x01
    b604:	f8 01       	movw	r30, r16
    b606:	91 83       	std	Z+1, r25	; 0x01
    b608:	80 83       	st	Z, r24
		padstate[i] = ReadJoypad(i);
    b60a:	8f 2d       	mov	r24, r15
    b60c:	0e 94 9d 49 	call	0x933a	; 0x933a <ReadJoypad>
    b610:	99 83       	std	Y+1, r25	; 0x01
    b612:	88 83       	st	Y, r24
		if((i == 1) && (game_mode == 0)){//cpu will take care of this pad
    b614:	f1 e0       	ldi	r31, 0x01	; 1
    b616:	ff 16       	cp	r15, r31
    b618:	31 f4       	brne	.+12     	; 0xb626 <UpdatePads+0x58>
    b61a:	80 91 68 0e 	lds	r24, 0x0E68
    b61e:	88 23       	and	r24, r24
    b620:	11 f4       	brne	.+4      	; 0xb626 <UpdatePads+0x58>
			CpuFillPad();
    b622:	be da       	rcall	.-2692   	; 0xaba0 <CpuFillPad>
    b624:	2e c0       	rjmp	.+92     	; 0xb682 <UpdatePads+0xb4>
		}			
		else{		
			if(game_state & GS_DEMO)//demo mode fills in for player 1
    b626:	80 91 6a 0e 	lds	r24, 0x0E6A
    b62a:	81 ff       	sbrs	r24, 1
    b62c:	2a c0       	rjmp	.+84     	; 0xb682 <UpdatePads+0xb4>
inline void DemoFillPad(){
	oldpadstate[0] = padstate[0] = 0;
    b62e:	10 92 3f 0e 	sts	0x0E3F, r1
    b632:	10 92 3e 0e 	sts	0x0E3E, r1
		demo_decision = pgm_read_byte(&DemoData[demo_off++]);
		return;
	}
ColumnsPrint2num(14,14,demo_off);
	*/
	if((demo_decision/3) < piecex[0])
    b636:	80 91 7a 0f 	lds	r24, 0x0F7A
    b63a:	63 e0       	ldi	r22, 0x03	; 3
    b63c:	0e 94 a8 73 	call	0xe750	; 0xe750 <__udivmodqi4>
    b640:	90 91 70 0f 	lds	r25, 0x0F70
    b644:	89 17       	cp	r24, r25
    b646:	28 f4       	brcc	.+10     	; 0xb652 <UpdatePads+0x84>
		padstate[0] = BTN_LEFT;
    b648:	d0 92 43 0e 	sts	0x0E43, r13
    b64c:	c0 92 42 0e 	sts	0x0E42, r12
    b650:	0b c0       	rjmp	.+22     	; 0xb668 <UpdatePads+0x9a>
	else if((demo_decision/3) > piecex[0])
    b652:	98 17       	cp	r25, r24
    b654:	28 f4       	brcc	.+10     	; 0xb660 <UpdatePads+0x92>
		padstate[0] = BTN_RIGHT;
    b656:	b0 92 43 0e 	sts	0x0E43, r11
    b65a:	a0 92 42 0e 	sts	0x0E42, r10
    b65e:	04 c0       	rjmp	.+8      	; 0xb668 <UpdatePads+0x9a>
	else
		padstate[0] = BTN_DOWN;
    b660:	90 92 43 0e 	sts	0x0E43, r9
    b664:	80 92 42 0e 	sts	0x0E42, r8
			
	if(score[0] > 9)
    b668:	80 91 38 0f 	lds	r24, 0x0F38
    b66c:	8a 30       	cpi	r24, 0x0A	; 10
    b66e:	48 f0       	brcs	.+18     	; 0xb682 <UpdatePads+0xb4>
		padstate[0] |= BTN_SL;
    b670:	80 91 42 0e 	lds	r24, 0x0E42
    b674:	90 91 43 0e 	lds	r25, 0x0E43
    b678:	94 60       	ori	r25, 0x04	; 4
    b67a:	90 93 43 0e 	sts	0x0E43, r25
    b67e:	80 93 42 0e 	sts	0x0E42, r24
}

void UpdatePads(){
	//ReadControllers();
	for(uint8_t i=0;i<MAX_PLAYERS;i++){
    b682:	f3 94       	inc	r15
    b684:	22 96       	adiw	r28, 0x02	; 2
    b686:	0e 5f       	subi	r16, 0xFE	; 254
    b688:	1f 4f       	sbci	r17, 0xFF	; 255
    b68a:	82 e0       	ldi	r24, 0x02	; 2
    b68c:	f8 16       	cp	r15, r24
    b68e:	09 f0       	breq	.+2      	; 0xb692 <UpdatePads+0xc4>
    b690:	b7 cf       	rjmp	.-146    	; 0xb600 <UpdatePads+0x32>
		else{		
			if(game_state & GS_DEMO)//demo mode fills in for player 1
				DemoFillPad();
		}
	}
}
    b692:	df 91       	pop	r29
    b694:	cf 91       	pop	r28
    b696:	1f 91       	pop	r17
    b698:	0f 91       	pop	r16
    b69a:	ff 90       	pop	r15
    b69c:	df 90       	pop	r13
    b69e:	cf 90       	pop	r12
    b6a0:	bf 90       	pop	r11
    b6a2:	af 90       	pop	r10
    b6a4:	9f 90       	pop	r9
    b6a6:	8f 90       	pop	r8
    b6a8:	08 95       	ret

0000b6aa <DoTitle>:
}


void DoUzenetMenu();

void DoTitle(){
    b6aa:	cf 92       	push	r12
    b6ac:	ef 92       	push	r14
    b6ae:	ff 92       	push	r15
    b6b0:	0f 93       	push	r16
    b6b2:	1f 93       	push	r17
    b6b4:	cf 93       	push	r28
    b6b6:	df 93       	push	r29
		if(cpuskill > 9)
    b6b8:	80 91 37 0e 	lds	r24, 0x0E37
    b6bc:	8a 30       	cpi	r24, 0x0A	; 10
    b6be:	18 f0       	brcs	.+6      	; 0xb6c6 <DoTitle+0x1c>
			cpuskill = 9;
    b6c0:	89 e0       	ldi	r24, 0x09	; 9
    b6c2:	80 93 37 0e 	sts	0x0E37, r24
		game_state = INITIALSTATE;
		cpustate = CPUFIRSTTICK;
		return;
#endif

	FadeOut(1,true);
    b6c6:	81 e0       	ldi	r24, 0x01	; 1
    b6c8:	61 e0       	ldi	r22, 0x01	; 1
    b6ca:	0e 94 9a 52 	call	0xa534	; 0xa534 <FadeOut>
	//rtl_RamifyFontEx(10,menucharmap,charlist,compfont,0,0xFF,false);
	rtl_RamifyFontEx(10,titlecharmap,charlist,compfont,0,0x37,true);
    b6ce:	8a e0       	ldi	r24, 0x0A	; 10
    b6d0:	90 e0       	ldi	r25, 0x00	; 0
    b6d2:	6c e3       	ldi	r22, 0x3C	; 60
    b6d4:	78 e8       	ldi	r23, 0x88	; 136
    b6d6:	42 e1       	ldi	r20, 0x12	; 18
    b6d8:	5c e1       	ldi	r21, 0x1C	; 28
    b6da:	20 e5       	ldi	r18, 0x50	; 80
    b6dc:	3a e1       	ldi	r19, 0x1A	; 26
    b6de:	00 e0       	ldi	r16, 0x00	; 0
    b6e0:	e7 e3       	ldi	r30, 0x37	; 55
    b6e2:	ee 2e       	mov	r14, r30
    b6e4:	cc 24       	eor	r12, r12
    b6e6:	c3 94       	inc	r12
    b6e8:	0e 94 06 53 	call	0xa60c	; 0xa60c <rtl_RamifyFontEx>
	FadeIn(4,false);
    b6ec:	84 e0       	ldi	r24, 0x04	; 4
    b6ee:	60 e0       	ldi	r22, 0x00	; 0
    b6f0:	0e 94 82 52 	call	0xa504	; 0xa504 <FadeIn>
    b6f4:	24 ea       	ldi	r18, 0xA4	; 164
    b6f6:	3d e0       	ldi	r19, 0x0D	; 13
    b6f8:	ac e2       	ldi	r26, 0x2C	; 44
    b6fa:	b4 e0       	ldi	r27, 0x04	; 4

	uint16_t toff = 0;
	uint8_t t;
	for(uint16_t i=0;i<10*64;){//ramify banner tiles
		t = pgm_read_byte(&BannerTiles[toff++]);
    b6fc:	f9 01       	movw	r30, r18
    b6fe:	84 91       	lpm	r24, Z+
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[(t&0b01110000)>>4]);
    b700:	90 e0       	ldi	r25, 0x00	; 0
    b702:	fc 01       	movw	r30, r24
    b704:	e0 77       	andi	r30, 0x70	; 112
    b706:	f0 70       	andi	r31, 0x00	; 0
    b708:	44 e0       	ldi	r20, 0x04	; 4
    b70a:	f5 95       	asr	r31
    b70c:	e7 95       	ror	r30
    b70e:	4a 95       	dec	r20
    b710:	e1 f7       	brne	.-8      	; 0xb70a <DoTitle+0x60>
    b712:	ec 51       	subi	r30, 0x1C	; 28
    b714:	f1 4f       	sbci	r31, 0xF1	; 241
    b716:	e4 91       	lpm	r30, Z+
    b718:	ec 93       	st	X, r30
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[t&0b00001111]);
    b71a:	8f 70       	andi	r24, 0x0F	; 15
    b71c:	90 70       	andi	r25, 0x00	; 0
    b71e:	8c 51       	subi	r24, 0x1C	; 28
    b720:	91 4f       	sbci	r25, 0xF1	; 241
    b722:	fc 01       	movw	r30, r24
    b724:	84 91       	lpm	r24, Z+
    b726:	11 96       	adiw	r26, 0x01	; 1
    b728:	8c 93       	st	X, r24
    b72a:	11 97       	sbiw	r26, 0x01	; 1
    b72c:	2f 5f       	subi	r18, 0xFF	; 255
    b72e:	3f 4f       	sbci	r19, 0xFF	; 255
    b730:	12 96       	adiw	r26, 0x02	; 2
	rtl_RamifyFontEx(10,titlecharmap,charlist,compfont,0,0x37,true);
	FadeIn(4,false);

	uint16_t toff = 0;
	uint8_t t;
	for(uint16_t i=0;i<10*64;){//ramify banner tiles
    b732:	fe e0       	ldi	r31, 0x0E	; 14
    b734:	24 3e       	cpi	r18, 0xE4	; 228
    b736:	3f 07       	cpc	r19, r31
    b738:	09 f7       	brne	.-62     	; 0xb6fc <DoTitle+0x52>
		t = pgm_read_byte(&BannerTiles[toff++]);
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[(t&0b01110000)>>4]);
		ram_tiles[i++] = pgm_read_byte(&BannerPallet[t&0b00001111]);
	}		
	musicspeed = 0;
    b73a:	10 92 42 0f 	sts	0x0F42, r1
	SetSongTempo(musicspeed);
    b73e:	80 e0       	ldi	r24, 0x00	; 0
    b740:	90 e0       	ldi	r25, 0x00	; 0
    b742:	0e 94 3a 4a 	call	0x9474	; 0x9474 <SetSongTempo>
	idleticks = 0;
 

	for(int i=10*64;i<19*64;i++)
		if(ram_tiles[i])
			ram_tiles[i] = 255;
    b746:	ff 24       	eor	r15, r15
    b748:	fa 94       	dec	r15

void DoPlay();
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
    b74a:	ee 24       	eor	r14, r14
    b74c:	e3 94       	inc	r14
		if(UpDown(0)){
		//	TriggerPCM(SWAPWAVE,255,255);
			if(cursorpos)
				cursorpos--;
			else
				cursorpos = 3;
    b74e:	03 e0       	ldi	r16, 0x03	; 3
    b750:	c0 2e       	mov	r12, r16
	SetSongTempo(musicspeed);
	uint8_t flash,o;
	uint16_t idleticks;
titletop:
	flash = 30;
	cursorpos = 0;
    b752:	10 92 4d 0f 	sts	0x0F4D, r1
    b756:	ec ea       	ldi	r30, 0xAC	; 172
    b758:	f6 e0       	ldi	r31, 0x06	; 6
	o = 0;
	idleticks = 0;
 

	for(int i=10*64;i<19*64;i++)
		if(ram_tiles[i])
    b75a:	80 81       	ld	r24, Z
    b75c:	81 11       	cpse	r24, r1
			ram_tiles[i] = 255;
    b75e:	f0 82       	st	Z, r15
    b760:	31 96       	adiw	r30, 0x01	; 1
	cursorpos = 0;
	o = 0;
	idleticks = 0;
 

	for(int i=10*64;i<19*64;i++)
    b762:	88 e0       	ldi	r24, 0x08	; 8
    b764:	ec 3e       	cpi	r30, 0xEC	; 236
    b766:	f8 07       	cpc	r31, r24
    b768:	c1 f7       	brne	.-16     	; 0xb75a <DoTitle+0xb0>
		if(ram_tiles[i])
			ram_tiles[i] = 255;


	UpdatePads();
    b76a:	31 df       	rcall	.-414    	; 0xb5ce <UpdatePads>
	DrawTitleBGFont();//do here to avoid possible previous start down artifacts
    b76c:	ed da       	rcall	.-2598   	; 0xad48 <DrawTitleBGFont>
    b76e:	1e e1       	ldi	r17, 0x1E	; 30
    b770:	c0 e0       	ldi	r28, 0x00	; 0
    b772:	d0 e0       	ldi	r29, 0x00	; 0
    b774:	5f c0       	rjmp	.+190    	; 0xb834 <DoTitle+0x18a>


	while(!StartDown(0)){
		UpdatePads();
    b776:	2b df       	rcall	.-426    	; 0xb5ce <UpdatePads>
		DrawTitleBGFont();
    b778:	e7 da       	rcall	.-2610   	; 0xad48 <DrawTitleBGFont>

		if(flash < 15)
    b77a:	1f 30       	cpi	r17, 0x0F	; 15
    b77c:	30 f4       	brcc	.+12     	; 0xb78a <DoTitle+0xe0>
			rtl_Print(9,14,PSTR("PRESS START"));
    b77e:	89 e0       	ldi	r24, 0x09	; 9
    b780:	6e e0       	ldi	r22, 0x0E	; 14
    b782:	46 ed       	ldi	r20, 0xD6	; 214
    b784:	59 e8       	ldi	r21, 0x89	; 137
    b786:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>

		if(!--flash)
    b78a:	11 50       	subi	r17, 0x01	; 1
    b78c:	09 f4       	brne	.+2      	; 0xb790 <DoTitle+0xe6>
    b78e:	1e e1       	ldi	r17, 0x1E	; 30
			flash = 30;
shuffle_prng();
    b790:	bf d8       	rcall	.-3714   	; 0xa910 <shuffle_prng>
		if(padstate[0])
    b792:	80 91 42 0e 	lds	r24, 0x0E42
    b796:	90 91 43 0e 	lds	r25, 0x0E43
    b79a:	89 2b       	or	r24, r25
    b79c:	09 f0       	breq	.+2      	; 0xb7a0 <DoTitle+0xf6>
    b79e:	49 c1       	rjmp	.+658    	; 0xba32 <DoTitle+0x388>
}



bool CheckIdleTicks(uint16_t t){//if idle too long, go into demo mode
if(t > TITLEIDLETIME){
    b7a0:	e1 e0       	ldi	r30, 0x01	; 1
    b7a2:	c5 3a       	cpi	r28, 0xA5	; 165
    b7a4:	de 07       	cpc	r29, r30
    b7a6:	08 f4       	brcc	.+2      	; 0xb7aa <DoTitle+0x100>
    b7a8:	46 c1       	rjmp	.+652    	; 0xba36 <DoTitle+0x38c>
			flash = 30;
shuffle_prng();
		if(padstate[0])
			idleticks = 0;
		if(CheckIdleTicks(idleticks++)){//play demo
			FadeOut(1,true);
    b7aa:	81 e0       	ldi	r24, 0x01	; 1
    b7ac:	61 e0       	ldi	r22, 0x01	; 1
    b7ae:	0e 94 9a 52 	call	0xa534	; 0xa534 <FadeOut>
			SetInitialState();
    b7b2:	c6 dd       	rcall	.-1140   	; 0xb340 <SetInitialState>
			game_state = GS_DEMO|GS_PLAYING|GS_FIRSTTICK;
    b7b4:	83 e2       	ldi	r24, 0x23	; 35
    b7b6:	80 93 6a 0e 	sts	0x0E6A, r24
			state[0] = GOAHEAD;
    b7ba:	80 ec       	ldi	r24, 0xC0	; 192
    b7bc:	80 93 6f 0e 	sts	0x0E6F, r24
			game_mode = 0;
    b7c0:	10 92 68 0e 	sts	0x0E68, r1
			demo_off = 0;
			if(++demo_num > NUMDEMOS)
    b7c4:	80 91 56 0e 	lds	r24, 0x0E56
    b7c8:	8f 5f       	subi	r24, 0xFF	; 255
    b7ca:	80 93 56 0e 	sts	0x0E56, r24
    b7ce:	85 30       	cpi	r24, 0x05	; 5
    b7d0:	18 f0       	brcs	.+6      	; 0xb7d8 <DoTitle+0x12e>
				demo_num = 1;
    b7d2:	81 e0       	ldi	r24, 0x01	; 1
    b7d4:	80 93 56 0e 	sts	0x0E56, r24
			demo_inp_wait = 255;
    b7d8:	8f ef       	ldi	r24, 0xFF	; 255
    b7da:	80 93 4c 0f 	sts	0x0F4C, r24
			cpustate = CPUFIRSTTICK;
    b7de:	80 e1       	ldi	r24, 0x10	; 16
    b7e0:	80 93 6b 0e 	sts	0x0E6B, r24
			lfsr[0] = lfsr[1] = pgm_read_word(&DemoLfsr[demo_num]);
    b7e4:	40 91 56 0e 	lds	r20, 0x0E56
    b7e8:	e4 2f       	mov	r30, r20
    b7ea:	f0 e0       	ldi	r31, 0x00	; 0
    b7ec:	ee 0f       	add	r30, r30
    b7ee:	ff 1f       	adc	r31, r31
    b7f0:	e7 55       	subi	r30, 0x57	; 87
    b7f2:	f8 47       	sbci	r31, 0x78	; 120
    b7f4:	85 91       	lpm	r24, Z+
    b7f6:	94 91       	lpm	r25, Z+
    b7f8:	90 93 64 0f 	sts	0x0F64, r25
    b7fc:	80 93 63 0f 	sts	0x0F63, r24
    b800:	90 93 62 0f 	sts	0x0F62, r25
    b804:	80 93 61 0f 	sts	0x0F61, r24
    b808:	90 e0       	ldi	r25, 0x00	; 0
    b80a:	20 e0       	ldi	r18, 0x00	; 0
    b80c:	30 e0       	ldi	r19, 0x00	; 0
    b80e:	07 c0       	rjmp	.+14     	; 0xb81e <DoTitle+0x174>
			for(uint8_t i=0;i<demo_num;i++)//get to start of demo
    b810:	2f 5f       	subi	r18, 0xFF	; 255
    b812:	3f 4f       	sbci	r19, 0xFF	; 255
				while(pgm_read_byte(&DemoData[demo_off++]) != 255){};
    b814:	84 91       	lpm	r24, Z+
    b816:	31 96       	adiw	r30, 0x01	; 1
    b818:	8f 3f       	cpi	r24, 0xFF	; 255
    b81a:	d1 f7       	brne	.-12     	; 0xb810 <DoTitle+0x166>
			if(++demo_num > NUMDEMOS)
				demo_num = 1;
			demo_inp_wait = 255;
			cpustate = CPUFIRSTTICK;
			lfsr[0] = lfsr[1] = pgm_read_word(&DemoLfsr[demo_num]);
			for(uint8_t i=0;i<demo_num;i++)//get to start of demo
    b81c:	9f 5f       	subi	r25, 0xFF	; 255
    b81e:	94 17       	cp	r25, r20
    b820:	28 f0       	brcs	.+10     	; 0xb82c <DoTitle+0x182>
    b822:	30 93 59 0e 	sts	0x0E59, r19
    b826:	20 93 58 0e 	sts	0x0E58, r18
    b82a:	13 c1       	rjmp	.+550    	; 0xba52 <DoTitle+0x3a8>
    b82c:	f9 01       	movw	r30, r18
    b82e:	ed 54       	subi	r30, 0x4D	; 77
    b830:	f8 47       	sbci	r31, 0x78	; 120
    b832:	ee cf       	rjmp	.-36     	; 0xb810 <DoTitle+0x166>
    b834:	80 91 42 0e 	lds	r24, 0x0E42
    b838:	83 ff       	sbrs	r24, 3
    b83a:	9d cf       	rjmp	.-198    	; 0xb776 <DoTitle+0xcc>
    b83c:	80 91 3e 0e 	lds	r24, 0x0E3E
    b840:	90 91 3f 0e 	lds	r25, 0x0E3F
    b844:	b3 e0       	ldi	r27, 0x03	; 3
    b846:	96 95       	lsr	r25
    b848:	87 95       	ror	r24
    b84a:	ba 95       	dec	r27
    b84c:	e1 f7       	brne	.-8      	; 0xb846 <DoTitle+0x19c>
    b84e:	81 70       	andi	r24, 0x01	; 1

	UpdatePads();
	DrawTitleBGFont();//do here to avoid possible previous start down artifacts


	while(!StartDown(0)){
    b850:	8e 15       	cp	r24, r14
    b852:	09 f4       	brne	.+2      	; 0xb856 <DoTitle+0x1ac>
    b854:	90 cf       	rjmp	.-224    	; 0xb776 <DoTitle+0xcc>
    b856:	10 e0       	ldi	r17, 0x00	; 0
		}			
		WaitVsync(2);//keep ticks even
	}

	for(uint8_t i=0;i<12;i++){
		UpdatePads();
    b858:	ba de       	rcall	.-652    	; 0xb5ce <UpdatePads>
		ColumnsDrawMenu(9,14,11,i,10);
    b85a:	89 e0       	ldi	r24, 0x09	; 9
    b85c:	6e e0       	ldi	r22, 0x0E	; 14
    b85e:	4b e0       	ldi	r20, 0x0B	; 11
    b860:	21 2f       	mov	r18, r17
    b862:	0a e0       	ldi	r16, 0x0A	; 10
    b864:	14 d9       	rcall	.-3544   	; 0xaa8e <ColumnsDrawMenu>
		rtl_Print(12,14,PSTR("SELECT"));
    b866:	8c e0       	ldi	r24, 0x0C	; 12
    b868:	6e e0       	ldi	r22, 0x0E	; 14
    b86a:	4f ec       	ldi	r20, 0xCF	; 207
    b86c:	59 e8       	ldi	r21, 0x89	; 137
    b86e:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		if(i > 3){
    b872:	14 30       	cpi	r17, 0x04	; 4
    b874:	18 f1       	brcs	.+70     	; 0xb8bc <DoTitle+0x212>
			rtl_Print(12,17,PSTR("SINGLE"));
    b876:	8c e0       	ldi	r24, 0x0C	; 12
    b878:	61 e1       	ldi	r22, 0x11	; 17
    b87a:	48 ec       	ldi	r20, 0xC8	; 200
    b87c:	59 e8       	ldi	r21, 0x89	; 137
    b87e:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		//	rtl_Print(10,18,PSTR("<"));
		}
		if(i > 5)
    b882:	16 30       	cpi	r17, 0x06	; 6
    b884:	d8 f0       	brcs	.+54     	; 0xb8bc <DoTitle+0x212>
			rtl_Print(12,19,PSTR("VERSUS"));
    b886:	8c e0       	ldi	r24, 0x0C	; 12
    b888:	63 e1       	ldi	r22, 0x13	; 19
    b88a:	41 ec       	ldi	r20, 0xC1	; 193
    b88c:	59 e8       	ldi	r21, 0x89	; 137
    b88e:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		if(i > 7){
    b892:	18 30       	cpi	r17, 0x08	; 8
    b894:	98 f0       	brcs	.+38     	; 0xb8bc <DoTitle+0x212>
			rtl_Print(12,21,PSTR("LVL"));
    b896:	8c e0       	ldi	r24, 0x0C	; 12
    b898:	65 e1       	ldi	r22, 0x15	; 21
    b89a:	4d eb       	ldi	r20, 0xBD	; 189
    b89c:	59 e8       	ldi	r21, 0x89	; 137
    b89e:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    b8a2:	80 91 37 0e 	lds	r24, 0x0E37
    b8a6:	84 5b       	subi	r24, 0xB4	; 180
    b8a8:	80 93 a7 03 	sts	0x03A7, r24
			ColumnsPrint1num(17,21,cpuskill);
		}
		if(i > 9)
    b8ac:	1a 30       	cpi	r17, 0x0A	; 10
    b8ae:	30 f0       	brcs	.+12     	; 0xb8bc <DoTitle+0x212>
			rtl_Print(12,23,PSTR("UZENET"));
    b8b0:	8c e0       	ldi	r24, 0x0C	; 12
    b8b2:	67 e1       	ldi	r22, 0x17	; 23
    b8b4:	46 eb       	ldi	r20, 0xB6	; 182
    b8b6:	59 e8       	ldi	r21, 0x89	; 137
    b8b8:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		
		//if(i > 9)
			//rtl_Print(12,24,PSTR("UZENET"));
		WaitVsync(4);
    b8bc:	84 e0       	ldi	r24, 0x04	; 4
    b8be:	90 e0       	ldi	r25, 0x00	; 0
    b8c0:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
			return;
		}			
		WaitVsync(2);//keep ticks even
	}

	for(uint8_t i=0;i<12;i++){
    b8c4:	1f 5f       	subi	r17, 0xFF	; 255
    b8c6:	1c 30       	cpi	r17, 0x0C	; 12
    b8c8:	39 f6       	brne	.-114    	; 0xb858 <DoTitle+0x1ae>
    b8ca:	80 c0       	rjmp	.+256    	; 0xb9cc <DoTitle+0x322>
			//rtl_Print(12,24,PSTR("UZENET"));
		WaitVsync(4);
	}

	while(!StartDown(0) || cursorpos == 2){//title menu loop
		UpdatePads();
    b8cc:	80 de       	rcall	.-768    	; 0xb5ce <UpdatePads>
shuffle_prng();
    b8ce:	20 d8       	rcall	.-4032   	; 0xa910 <shuffle_prng>
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
    b8d0:	90 91 42 0e 	lds	r25, 0x0E42
    b8d4:	94 ff       	sbrs	r25, 4
    b8d6:	0e c0       	rjmp	.+28     	; 0xb8f4 <DoTitle+0x24a>
    b8d8:	80 91 3e 0e 	lds	r24, 0x0E3E
    b8dc:	84 fd       	sbrc	r24, 4
    b8de:	0a c0       	rjmp	.+20     	; 0xb8f4 <DoTitle+0x24a>
		if(UpDown(0)){
		//	TriggerPCM(SWAPWAVE,255,255);
			if(cursorpos)
    b8e0:	80 91 4d 0f 	lds	r24, 0x0F4D
    b8e4:	88 23       	and	r24, r24
    b8e6:	21 f0       	breq	.+8      	; 0xb8f0 <DoTitle+0x246>
				cursorpos--;
    b8e8:	81 50       	subi	r24, 0x01	; 1
    b8ea:	80 93 4d 0f 	sts	0x0F4D, r24
    b8ee:	02 c0       	rjmp	.+4      	; 0xb8f4 <DoTitle+0x24a>
			else
				cursorpos = 3;
    b8f0:	c0 92 4d 0f 	sts	0x0F4D, r12
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
    b8f4:	95 ff       	sbrs	r25, 5
    b8f6:	0d c0       	rjmp	.+26     	; 0xb912 <DoTitle+0x268>
    b8f8:	80 91 3e 0e 	lds	r24, 0x0E3E
    b8fc:	85 fd       	sbrc	r24, 5
    b8fe:	09 c0       	rjmp	.+18     	; 0xb912 <DoTitle+0x268>
		}
		if(DownDown(0)){
		//	TriggerPCM(SWAPWAVE,255,255);
			if(++cursorpos > 3)
    b900:	80 91 4d 0f 	lds	r24, 0x0F4D
    b904:	8f 5f       	subi	r24, 0xFF	; 255
    b906:	80 93 4d 0f 	sts	0x0F4D, r24
    b90a:	84 30       	cpi	r24, 0x04	; 4
    b90c:	10 f0       	brcs	.+4      	; 0xb912 <DoTitle+0x268>
				cursorpos = 0;
    b90e:	10 92 4d 0f 	sts	0x0F4D, r1
		}
		if(cursorpos == 2){
    b912:	80 91 4d 0f 	lds	r24, 0x0F4D
    b916:	82 30       	cpi	r24, 0x02	; 2
    b918:	d1 f4       	brne	.+52     	; 0xb94e <DoTitle+0x2a4>
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
    b91a:	96 ff       	sbrs	r25, 6
    b91c:	0b c0       	rjmp	.+22     	; 0xb934 <DoTitle+0x28a>
    b91e:	80 91 3e 0e 	lds	r24, 0x0E3E
    b922:	86 fd       	sbrc	r24, 6
    b924:	07 c0       	rjmp	.+14     	; 0xb934 <DoTitle+0x28a>
			if(LeftDown(0)  && cpuskill > 1)
    b926:	80 91 37 0e 	lds	r24, 0x0E37
    b92a:	82 30       	cpi	r24, 0x02	; 2
    b92c:	18 f0       	brcs	.+6      	; 0xb934 <DoTitle+0x28a>
				cpuskill--;
    b92e:	81 50       	subi	r24, 0x01	; 1
    b930:	80 93 37 0e 	sts	0x0E37, r24
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
    b934:	97 ff       	sbrs	r25, 7
    b936:	0b c0       	rjmp	.+22     	; 0xb94e <DoTitle+0x2a4>
    b938:	80 91 3e 0e 	lds	r24, 0x0E3E
    b93c:	87 fd       	sbrc	r24, 7
    b93e:	07 c0       	rjmp	.+14     	; 0xb94e <DoTitle+0x2a4>
			if(RightDown(0) && cpuskill < 9)
    b940:	80 91 37 0e 	lds	r24, 0x0E37
    b944:	89 30       	cpi	r24, 0x09	; 9
    b946:	18 f4       	brcc	.+6      	; 0xb94e <DoTitle+0x2a4>
				cpuskill++;
    b948:	8f 5f       	subi	r24, 0xFF	; 255
    b94a:	80 93 37 0e 	sts	0x0E37, r24
		}
		ColumnsDrawMenu(9,14,11,11,10);
    b94e:	89 e0       	ldi	r24, 0x09	; 9
    b950:	6e e0       	ldi	r22, 0x0E	; 14
    b952:	4b e0       	ldi	r20, 0x0B	; 11
    b954:	2b e0       	ldi	r18, 0x0B	; 11
    b956:	0a e0       	ldi	r16, 0x0A	; 10
    b958:	9a d8       	rcall	.-3788   	; 0xaa8e <ColumnsDrawMenu>
		rtl_Print(12,14,PSTR("SELECT"));
    b95a:	8c e0       	ldi	r24, 0x0C	; 12
    b95c:	6e e0       	ldi	r22, 0x0E	; 14
    b95e:	4f ea       	ldi	r20, 0xAF	; 175
    b960:	59 e8       	ldi	r21, 0x89	; 137
    b962:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		rtl_Print(12,17,PSTR("SINGLE"));
    b966:	8c e0       	ldi	r24, 0x0C	; 12
    b968:	61 e1       	ldi	r22, 0x11	; 17
    b96a:	48 ea       	ldi	r20, 0xA8	; 168
    b96c:	59 e8       	ldi	r21, 0x89	; 137
    b96e:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		rtl_Print(12,19,PSTR("VERSUS"));
    b972:	8c e0       	ldi	r24, 0x0C	; 12
    b974:	63 e1       	ldi	r22, 0x13	; 19
    b976:	41 ea       	ldi	r20, 0xA1	; 161
    b978:	59 e8       	ldi	r21, 0x89	; 137
    b97a:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		rtl_Print(12,21,PSTR("LVL"));ColumnsPrint1num(17,21,cpuskill);
    b97e:	8c e0       	ldi	r24, 0x0C	; 12
    b980:	65 e1       	ldi	r22, 0x15	; 21
    b982:	4d e9       	ldi	r20, 0x9D	; 157
    b984:	59 e8       	ldi	r21, 0x89	; 137
    b986:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    b98a:	80 91 37 0e 	lds	r24, 0x0E37
    b98e:	84 5b       	subi	r24, 0xB4	; 180
    b990:	80 93 a7 03 	sts	0x03A7, r24
		rtl_Print(12,23,PSTR("UZENET"));
    b994:	8c e0       	ldi	r24, 0x0C	; 12
    b996:	67 e1       	ldi	r22, 0x17	; 23
    b998:	46 e9       	ldi	r20, 0x96	; 150
    b99a:	59 e8       	ldi	r21, 0x89	; 137
    b99c:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
		//rtl_Print(12,24,PSTR("UZENET"));

		rtl_Print(10,17+(2*cursorpos),PSTR(">"));
    b9a0:	60 91 4d 0f 	lds	r22, 0x0F4D
    b9a4:	66 0f       	add	r22, r22
    b9a6:	6f 5e       	subi	r22, 0xEF	; 239
    b9a8:	8a e0       	ldi	r24, 0x0A	; 10
    b9aa:	44 e9       	ldi	r20, 0x94	; 148
    b9ac:	59 e8       	ldi	r21, 0x89	; 137
    b9ae:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>

//shuffle_prng();
		if(padstate[0])
    b9b2:	80 91 42 0e 	lds	r24, 0x0E42
    b9b6:	90 91 43 0e 	lds	r25, 0x0E43
    b9ba:	89 2b       	or	r24, r25
    b9bc:	09 f0       	breq	.+2      	; 0xb9c0 <DoTitle+0x316>
    b9be:	41 c0       	rjmp	.+130    	; 0xba42 <DoTitle+0x398>
}



bool CheckIdleTicks(uint16_t t){//if idle too long, go into demo mode
if(t > TITLEIDLETIME){
    b9c0:	f1 e0       	ldi	r31, 0x01	; 1
    b9c2:	c5 3a       	cpi	r28, 0xA5	; 165
    b9c4:	df 07       	cpc	r29, r31
    b9c6:	08 f0       	brcs	.+2      	; 0xb9ca <DoTitle+0x320>
    b9c8:	c4 ce       	rjmp	.-632    	; 0xb752 <DoTitle+0xa8>
    b9ca:	3d c0       	rjmp	.+122    	; 0xba46 <DoTitle+0x39c>

void DoPlay();
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
    b9cc:	80 91 42 0e 	lds	r24, 0x0E42
    b9d0:	83 ff       	sbrs	r24, 3
    b9d2:	7c cf       	rjmp	.-264    	; 0xb8cc <DoTitle+0x222>
    b9d4:	80 91 3e 0e 	lds	r24, 0x0E3E
    b9d8:	90 91 3f 0e 	lds	r25, 0x0E3F
    b9dc:	a3 e0       	ldi	r26, 0x03	; 3
    b9de:	96 95       	lsr	r25
    b9e0:	87 95       	ror	r24
    b9e2:	aa 95       	dec	r26
    b9e4:	e1 f7       	brne	.-8      	; 0xb9de <DoTitle+0x334>
    b9e6:	81 70       	andi	r24, 0x01	; 1
		//if(i > 9)
			//rtl_Print(12,24,PSTR("UZENET"));
		WaitVsync(4);
	}

	while(!StartDown(0) || cursorpos == 2){//title menu loop
    b9e8:	8e 15       	cp	r24, r14
    b9ea:	09 f4       	brne	.+2      	; 0xb9ee <DoTitle+0x344>
    b9ec:	6f cf       	rjmp	.-290    	; 0xb8cc <DoTitle+0x222>
    b9ee:	80 91 4d 0f 	lds	r24, 0x0F4D
    b9f2:	82 30       	cpi	r24, 0x02	; 2
    b9f4:	09 f4       	brne	.+2      	; 0xb9f8 <DoTitle+0x34e>
    b9f6:	6a cf       	rjmp	.-300    	; 0xb8cc <DoTitle+0x222>
			goto titletop;
		WaitVsync(2);//keep ticks even
	}
	

	if(cursorpos == 0){//versus cpu
    b9f8:	88 23       	and	r24, r24
    b9fa:	49 f4       	brne	.+18     	; 0xba0e <DoTitle+0x364>
	//lfsr[0] = lfsr[1] = pgm_read_word(&DemoLfsr[1]);
		game_mode = 0;
    b9fc:	10 92 68 0e 	sts	0x0E68, r1
		game_state = INITIALSTATE;
    ba00:	8f ef       	ldi	r24, 0xFF	; 255
    ba02:	80 93 6a 0e 	sts	0x0E6A, r24
		cpustate = CPUFIRSTTICK;
    ba06:	80 e1       	ldi	r24, 0x10	; 16
    ba08:	80 93 6b 0e 	sts	0x0E6B, r24
    ba0c:	0d c0       	rjmp	.+26     	; 0xba28 <DoTitle+0x37e>
	}
	else if(cursorpos == 1){
    ba0e:	81 30       	cpi	r24, 0x01	; 1
    ba10:	41 f4       	brne	.+16     	; 0xba22 <DoTitle+0x378>
		game_mode = 1;//versus
    ba12:	80 93 68 0e 	sts	0x0E68, r24
		game_state = INITIALSTATE;
    ba16:	8f ef       	ldi	r24, 0xFF	; 255
    ba18:	80 93 6a 0e 	sts	0x0E6A, r24
		cpustate = 0;
    ba1c:	10 92 6b 0e 	sts	0x0E6B, r1
    ba20:	03 c0       	rjmp	.+6      	; 0xba28 <DoTitle+0x37e>
	}
	else if(cursorpos == 3){
    ba22:	83 30       	cpi	r24, 0x03	; 3
    ba24:	09 f4       	brne	.+2      	; 0xba28 <DoTitle+0x37e>
	//	FadeOut(1,true);
		//FadeIn(1,false);

		//goto titletop;
		DoUzenetMenu();
    ba26:	76 dc       	rcall	.-1812   	; 0xb314 <DoUzenetMenu>
	}
	FadeOut(2,true);
    ba28:	82 e0       	ldi	r24, 0x02	; 2
    ba2a:	61 e0       	ldi	r22, 0x01	; 1
    ba2c:	0e 94 9a 52 	call	0xa534	; 0xa534 <FadeOut>
    ba30:	10 c0       	rjmp	.+32     	; 0xba52 <DoTitle+0x3a8>
    ba32:	c0 e0       	ldi	r28, 0x00	; 0
    ba34:	d0 e0       	ldi	r29, 0x00	; 0
		if(!--flash)
			flash = 30;
shuffle_prng();
		if(padstate[0])
			idleticks = 0;
		if(CheckIdleTicks(idleticks++)){//play demo
    ba36:	21 96       	adiw	r28, 0x01	; 1
			lfsr[0] = lfsr[1] = pgm_read_word(&DemoLfsr[demo_num]);
			for(uint8_t i=0;i<demo_num;i++)//get to start of demo
				while(pgm_read_byte(&DemoData[demo_off++]) != 255){};
			return;
		}			
		WaitVsync(2);//keep ticks even
    ba38:	82 e0       	ldi	r24, 0x02	; 2
    ba3a:	90 e0       	ldi	r25, 0x00	; 0
    ba3c:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
    ba40:	f9 ce       	rjmp	.-526    	; 0xb834 <DoTitle+0x18a>
    ba42:	c0 e0       	ldi	r28, 0x00	; 0
    ba44:	d0 e0       	ldi	r29, 0x00	; 0
		rtl_Print(10,17+(2*cursorpos),PSTR(">"));

//shuffle_prng();
		if(padstate[0])
			idleticks = 0;
		if(CheckIdleTicks(idleticks++))
    ba46:	21 96       	adiw	r28, 0x01	; 1
			goto titletop;
		WaitVsync(2);//keep ticks even
    ba48:	82 e0       	ldi	r24, 0x02	; 2
    ba4a:	90 e0       	ldi	r25, 0x00	; 0
    ba4c:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
    ba50:	bd cf       	rjmp	.-134    	; 0xb9cc <DoTitle+0x322>

		//goto titletop;
		DoUzenetMenu();
	}
	FadeOut(2,true);
}
    ba52:	df 91       	pop	r29
    ba54:	cf 91       	pop	r28
    ba56:	1f 91       	pop	r17
    ba58:	0f 91       	pop	r16
    ba5a:	ff 90       	pop	r15
    ba5c:	ef 90       	pop	r14
    ba5e:	cf 90       	pop	r12
    ba60:	08 95       	ret

0000ba62 <TriggerPCM>:
}




void TriggerPCM(uint8_t i,uint8_t speed, uint8_t vol){//TODO SCORING HIGHER PRIORITY THAN DROP
    ba62:	78 2f       	mov	r23, r24
    ba64:	36 2f       	mov	r19, r22
    ba66:	24 2f       	mov	r18, r20
	uint8_t t = pgm_read_byte(&PCMPRIORITY[i-FIRSTPCMSOUND]);
    ba68:	48 2f       	mov	r20, r24
    ba6a:	50 e0       	ldi	r21, 0x00	; 0
    ba6c:	4a 52       	subi	r20, 0x2A	; 42
    ba6e:	50 40       	sbci	r21, 0x00	; 0
    ba70:	fa 01       	movw	r30, r20
    ba72:	ee 59       	subi	r30, 0x9E	; 158
    ba74:	f9 49       	sbci	r31, 0x99	; 153
    ba76:	94 91       	lpm	r25, Z+
	if(pcm_priority > t && pcm_timeleft)//a higher priority sound is playing
    ba78:	80 91 67 0e 	lds	r24, 0x0E67
    ba7c:	98 17       	cp	r25, r24
    ba7e:	20 f4       	brcc	.+8      	; 0xba88 <TriggerPCM+0x26>
    ba80:	80 91 52 0f 	lds	r24, 0x0F52
    ba84:	88 23       	and	r24, r24
    ba86:	99 f4       	brne	.+38     	; 0xbaae <TriggerPCM+0x4c>
		return;

	pcm_priority = t;
    ba88:	90 93 67 0e 	sts	0x0E67, r25
	pcm_timeleft = pgm_read_byte(&PCMTIMES[i-FIRSTPCMSOUND]);
    ba8c:	fa 01       	movw	r30, r20
    ba8e:	e9 59       	subi	r30, 0x99	; 153
    ba90:	f9 49       	sbci	r31, 0x99	; 153
    ba92:	e4 91       	lpm	r30, Z+
    ba94:	e0 93 52 0f 	sts	0x0F52, r30

	if(speed == 255)
    ba98:	3f 3f       	cpi	r19, 0xFF	; 255
    ba9a:	21 f4       	brne	.+8      	; 0xbaa4 <TriggerPCM+0x42>
		speed = pgm_read_byte(&PCMSPEEDS[i-FIRSTPCMSOUND]);
    ba9c:	42 5b       	subi	r20, 0xB2	; 178
    ba9e:	59 49       	sbci	r21, 0x99	; 153
    baa0:	fa 01       	movw	r30, r20
    baa2:	34 91       	lpm	r19, Z+
	TriggerNote(4,i,speed,vol);
    baa4:	84 e0       	ldi	r24, 0x04	; 4
    baa6:	67 2f       	mov	r22, r23
    baa8:	43 2f       	mov	r20, r19
    baaa:	0c 94 b8 4b 	jmp	0x9770	; 0x9770 <TriggerNote>
    baae:	08 95       	ret

0000bab0 <CrashBarDown>:
	
	wellfullness[target] += 6*steps;
	return steps;
}

uint8_t CrashBarDown(uint8_t steps, uint8_t target, uint8_t silent){
    bab0:	1f 93       	push	r17
    bab2:	cf 93       	push	r28
    bab4:	df 93       	push	r29
//TODO NOT WORKING RIGHT
	if(crashheight[target] < steps)
    bab6:	c6 2f       	mov	r28, r22
    bab8:	d0 e0       	ldi	r29, 0x00	; 0
    baba:	fe 01       	movw	r30, r28
    babc:	e2 58       	subi	r30, 0x82	; 130
    babe:	f0 4f       	sbci	r31, 0xF0	; 240
    bac0:	10 81       	ld	r17, Z
    bac2:	81 17       	cp	r24, r17
    bac4:	08 f4       	brcc	.+2      	; 0xbac8 <CrashBarDown+0x18>
    bac6:	18 2f       	mov	r17, r24
		steps = crashheight[target];
		
	if(!steps)
    bac8:	11 23       	and	r17, r17
    baca:	09 f4       	brne	.+2      	; 0xbace <CrashBarDown+0x1e>
    bacc:	4b c0       	rjmp	.+150    	; 0xbb64 <CrashBarDown+0xb4>
		return 0;

	if(!silent)
    bace:	44 23       	and	r20, r20
    bad0:	21 f4       	brne	.+8      	; 0xbada <CrashBarDown+0x2a>
		TriggerPCM(CRASHWAVE,23,150);
    bad2:	8e e2       	ldi	r24, 0x2E	; 46
    bad4:	67 e1       	ldi	r22, 0x17	; 23
    bad6:	46 e9       	ldi	r20, 0x96	; 150
    bad8:	c4 df       	rcall	.-120    	; 0xba62 <TriggerPCM>
		
	crashheight[target] -= steps;
    bada:	fe 01       	movw	r30, r28
    badc:	e2 58       	subi	r30, 0x82	; 130
    bade:	f0 4f       	sbci	r31, 0xF0	; 240
    bae0:	80 81       	ld	r24, Z
    bae2:	81 1b       	sub	r24, r17
    bae4:	80 83       	st	Z, r24

	uint8_t t;
//	uint8_t off = (target*WELLSIZE);
	for(uint8_t y=15-steps;y<255;y--)
    bae6:	2f e0       	ldi	r18, 0x0F	; 15
    bae8:	21 1b       	sub	r18, r17
void reset_prng(){	for(uint8_t i=0;i<MAX_PLAYERS;i++)lfsr[i]=0xACE1u;}
void shuffle_prng(){for(uint8_t i=0;i<MAX_PLAYERS;i++){for(uint8_t j=0;j<4;j++){prng(i);}}}



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
    baea:	80 e6       	ldi	r24, 0x60	; 96
    baec:	90 e0       	ldi	r25, 0x00	; 0
    baee:	c8 9f       	mul	r28, r24
    baf0:	a0 01       	movw	r20, r0
    baf2:	c9 9f       	mul	r28, r25
    baf4:	50 0d       	add	r21, r0
    baf6:	d8 9f       	mul	r29, r24
    baf8:	50 0d       	add	r21, r0
    bafa:	11 24       	eor	r1, r1
    bafc:	3f e0       	ldi	r19, 0x0F	; 15
    bafe:	66 e0       	ldi	r22, 0x06	; 6
    bb00:	08 c0       	rjmp	.+16     	; 0xbb12 <CrashBarDown+0x62>
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    bb02:	80 81       	ld	r24, Z
    bb04:	8d 93       	st	X+, r24
	for(uint8_t x=0;x<6;x++){
    bb06:	11 92       	st	Z+, r1
    bb08:	9f 5f       	subi	r25, 0xFF	; 255
    bb0a:	96 30       	cpi	r25, 0x06	; 6
    bb0c:	d1 f7       	brne	.-12     	; 0xbb02 <CrashBarDown+0x52>
		
	crashheight[target] -= steps;

	uint8_t t;
//	uint8_t off = (target*WELLSIZE);
	for(uint8_t y=15-steps;y<255;y--)
    bb0e:	21 50       	subi	r18, 0x01	; 1
    bb10:	31 50       	subi	r19, 0x01	; 1
    bb12:	2f 3f       	cpi	r18, 0xFF	; 255
    bb14:	81 f0       	breq	.+32     	; 0xbb36 <CrashBarDown+0x86>
    bb16:	26 9f       	mul	r18, r22
    bb18:	f0 01       	movw	r30, r0
    bb1a:	11 24       	eor	r1, r1
    bb1c:	e4 0f       	add	r30, r20
    bb1e:	f5 1f       	adc	r31, r21
    bb20:	ee 58       	subi	r30, 0x8E	; 142
    bb22:	f1 4f       	sbci	r31, 0xF1	; 241
    bb24:	36 9f       	mul	r19, r22
    bb26:	d0 01       	movw	r26, r0
    bb28:	11 24       	eor	r1, r1
    bb2a:	a4 0f       	add	r26, r20
    bb2c:	b5 1f       	adc	r27, r21
    bb2e:	ae 58       	subi	r26, 0x8E	; 142
    bb30:	b1 4f       	sbci	r27, 0xF1	; 241
    bb32:	90 e0       	ldi	r25, 0x00	; 0
    bb34:	e6 cf       	rjmp	.-52     	; 0xbb02 <CrashBarDown+0x52>
		t = get_well(x,y,target);
		set_well(x,y+steps,target,t);
		set_well(x,y,target,0);	
	}

	wellfullness[target] -= 6*steps;
    bb36:	fe 01       	movw	r30, r28
    bb38:	ee 0f       	add	r30, r30
    bb3a:	ff 1f       	adc	r31, r31
    bb3c:	e3 5a       	subi	r30, 0xA3	; 163
    bb3e:	f0 4f       	sbci	r31, 0xF0	; 240
    bb40:	21 2f       	mov	r18, r17
    bb42:	30 e0       	ldi	r19, 0x00	; 0
    bb44:	8a ef       	ldi	r24, 0xFA	; 250
    bb46:	9f ef       	ldi	r25, 0xFF	; 255
    bb48:	ac 01       	movw	r20, r24
    bb4a:	24 9f       	mul	r18, r20
    bb4c:	c0 01       	movw	r24, r0
    bb4e:	25 9f       	mul	r18, r21
    bb50:	90 0d       	add	r25, r0
    bb52:	34 9f       	mul	r19, r20
    bb54:	90 0d       	add	r25, r0
    bb56:	11 24       	eor	r1, r1
    bb58:	20 81       	ld	r18, Z
    bb5a:	31 81       	ldd	r19, Z+1	; 0x01
    bb5c:	82 0f       	add	r24, r18
    bb5e:	93 1f       	adc	r25, r19
    bb60:	91 83       	std	Z+1, r25	; 0x01
    bb62:	80 83       	st	Z, r24
	return steps;
}
    bb64:	81 2f       	mov	r24, r17
    bb66:	df 91       	pop	r29
    bb68:	cf 91       	pop	r28
    bb6a:	1f 91       	pop	r17
    bb6c:	08 95       	ret

0000bb6e <CrashBarUp>:
		crashcomingup[target] += s;
		
	score[p] = score[p]%10;
}	

uint8_t CrashBarUp(uint8_t steps, uint8_t target){
    bb6e:	a0 e0       	ldi	r26, 0x00	; 0
    bb70:	b0 e0       	ldi	r27, 0x00	; 0
    bb72:	ed eb       	ldi	r30, 0xBD	; 189
    bb74:	fd e5       	ldi	r31, 0x5D	; 93
    bb76:	0c 94 03 74 	jmp	0xe806	; 0xe806 <__prologue_saves__+0xc>
    bb7a:	b8 2e       	mov	r11, r24
    bb7c:	a6 2e       	mov	r10, r22
	TriggerPCM(CRASHWAVE,23,150);
    bb7e:	8e e2       	ldi	r24, 0x2E	; 46
    bb80:	67 e1       	ldi	r22, 0x17	; 23
    bb82:	46 e9       	ldi	r20, 0x96	; 150
    bb84:	6e df       	rcall	.-292    	; 0xba62 <TriggerPCM>
	//need to check extended loss now, because otherwise we simply lose jewels that would be above
	uint8_t off = target*WELLSIZE;
    bb86:	8a 2c       	mov	r8, r10
    bb88:	99 24       	eor	r9, r9
    bb8a:	80 e6       	ldi	r24, 0x60	; 96
    bb8c:	90 e0       	ldi	r25, 0x00	; 0
    bb8e:	88 9e       	mul	r8, r24
    bb90:	60 01       	movw	r12, r0
    bb92:	89 9e       	mul	r8, r25
    bb94:	d0 0c       	add	r13, r0
    bb96:	98 9e       	mul	r9, r24
    bb98:	d0 0c       	add	r13, r0
    bb9a:	11 24       	eor	r1, r1
    bb9c:	ec 2c       	mov	r14, r12
		for(uint8_t i=0;i<6*(3+steps);i++){
    bb9e:	0b 2d       	mov	r16, r11
    bba0:	10 e0       	ldi	r17, 0x00	; 0
    bba2:	e8 01       	movw	r28, r16
    bba4:	cc 0f       	add	r28, r28
    bba6:	dd 1f       	adc	r29, r29
    bba8:	c0 0f       	add	r28, r16
    bbaa:	d1 1f       	adc	r29, r17
    bbac:	cc 0f       	add	r28, r28
    bbae:	dd 1f       	adc	r29, r29
    bbb0:	61 96       	adiw	r28, 0x11	; 17
    bbb2:	ff 24       	eor	r15, r15
    bbb4:	0b c0       	rjmp	.+22     	; 0xbbcc <CrashBarUp+0x5e>
			if(well[off++]){
    bbb6:	ee 2d       	mov	r30, r14
    bbb8:	f0 e0       	ldi	r31, 0x00	; 0
    bbba:	ee 58       	subi	r30, 0x8E	; 142
    bbbc:	f1 4f       	sbci	r31, 0xF1	; 241
    bbbe:	80 81       	ld	r24, Z
    bbc0:	88 23       	and	r24, r24
    bbc2:	11 f0       	breq	.+4      	; 0xbbc8 <CrashBarUp+0x5a>
				SetLosing(target);
    bbc4:	8a 2d       	mov	r24, r10
    bbc6:	c0 dc       	rcall	.-1664   	; 0xb548 <SetLosing>
uint8_t CrashBarUp(uint8_t steps, uint8_t target){
	TriggerPCM(CRASHWAVE,23,150);
	//need to check extended loss now, because otherwise we simply lose jewels that would be above
	uint8_t off = target*WELLSIZE;
		for(uint8_t i=0;i<6*(3+steps);i++){
			if(well[off++]){
    bbc8:	e3 94       	inc	r14

uint8_t CrashBarUp(uint8_t steps, uint8_t target){
	TriggerPCM(CRASHWAVE,23,150);
	//need to check extended loss now, because otherwise we simply lose jewels that would be above
	uint8_t off = target*WELLSIZE;
		for(uint8_t i=0;i<6*(3+steps);i++){
    bbca:	f3 94       	inc	r15
    bbcc:	8f 2d       	mov	r24, r15
    bbce:	90 e0       	ldi	r25, 0x00	; 0
    bbd0:	c8 17       	cp	r28, r24
    bbd2:	d9 07       	cpc	r29, r25
    bbd4:	84 f7       	brge	.-32     	; 0xbbb6 <CrashBarUp+0x48>
				SetLosing(target);
				//return steps;
			}
		}
	
	if((crashheight[target]+steps)>13){		
    bbd6:	f4 01       	movw	r30, r8
    bbd8:	e2 58       	subi	r30, 0x82	; 130
    bbda:	f0 4f       	sbci	r31, 0xF0	; 240
    bbdc:	e0 81       	ld	r30, Z
    bbde:	0e 0f       	add	r16, r30
    bbe0:	11 1d       	adc	r17, r1
    bbe2:	0e 30       	cpi	r16, 0x0E	; 14
    bbe4:	11 05       	cpc	r17, r1
    bbe6:	1c f0       	brlt	.+6      	; 0xbbee <CrashBarUp+0x80>
		steps = 13-crashheight[target];
    bbe8:	9d e0       	ldi	r25, 0x0D	; 13
    bbea:	b9 2e       	mov	r11, r25
    bbec:	be 1a       	sub	r11, r30
	}		

	crashheight[target] += steps;
    bbee:	5b 2d       	mov	r21, r11
    bbf0:	5e 0f       	add	r21, r30
    bbf2:	f4 01       	movw	r30, r8
    bbf4:	e2 58       	subi	r30, 0x82	; 130
    bbf6:	f0 4f       	sbci	r31, 0xF0	; 240
    bbf8:	50 83       	st	Z, r21
    bbfa:	43 e0       	ldi	r20, 0x03	; 3
    bbfc:	4b 19       	sub	r20, r11
    bbfe:	c6 01       	movw	r24, r12
    bc00:	42 96       	adiw	r24, 0x12	; 18
		//GeneratePreview(target);
	}
//	WaitVsync(1);
	uint8_t t;
	off = 3*6;
	for(uint8_t y=3;y<16;y++)
    bc02:	16 e0       	ldi	r17, 0x06	; 6
    bc04:	b6 01       	movw	r22, r12
    bc06:	60 5a       	subi	r22, 0xA0	; 160
    bc08:	7f 4f       	sbci	r23, 0xFF	; 255
    bc0a:	0d c0       	rjmp	.+26     	; 0xbc26 <CrashBarUp+0xb8>
void reset_prng(){	for(uint8_t i=0;i<MAX_PLAYERS;i++)lfsr[i]=0xACE1u;}
void shuffle_prng(){for(uint8_t i=0;i<MAX_PLAYERS;i++){for(uint8_t j=0;j<4;j++){prng(i);}}}



inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
    bc0c:	2c 91       	ld	r18, X
	for(uint8_t x=0;x<6;x++){
		t = get_well(x,y,target);
		if(!t)
    bc0e:	21 11       	cpse	r18, r1
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
    bc10:	20 83       	st	Z, r18
	}
//	WaitVsync(1);
	uint8_t t;
	off = 3*6;
	for(uint8_t y=3;y<16;y++)
	for(uint8_t x=0;x<6;x++){
    bc12:	3f 5f       	subi	r19, 0xFF	; 255
    bc14:	11 96       	adiw	r26, 0x01	; 1
    bc16:	31 96       	adiw	r30, 0x01	; 1
    bc18:	36 30       	cpi	r19, 0x06	; 6
    bc1a:	c1 f7       	brne	.-16     	; 0xbc0c <CrashBarUp+0x9e>
    bc1c:	4f 5f       	subi	r20, 0xFF	; 255
    bc1e:	06 96       	adiw	r24, 0x06	; 6
		//GeneratePreview(target);
	}
//	WaitVsync(1);
	uint8_t t;
	off = 3*6;
	for(uint8_t y=3;y<16;y++)
    bc20:	86 17       	cp	r24, r22
    bc22:	97 07       	cpc	r25, r23
    bc24:	61 f0       	breq	.+24     	; 0xbc3e <CrashBarUp+0xd0>
    bc26:	dc 01       	movw	r26, r24
    bc28:	ae 58       	subi	r26, 0x8E	; 142
    bc2a:	b1 4f       	sbci	r27, 0xF1	; 241
    bc2c:	41 9f       	mul	r20, r17
    bc2e:	f0 01       	movw	r30, r0
    bc30:	11 24       	eor	r1, r1
    bc32:	ec 0d       	add	r30, r12
    bc34:	fd 1d       	adc	r31, r13
    bc36:	ee 58       	subi	r30, 0x8E	; 142
    bc38:	f1 4f       	sbci	r31, 0xF1	; 241
    bc3a:	30 e0       	ldi	r19, 0x00	; 0
    bc3c:	e7 cf       	rjmp	.-50     	; 0xbc0c <CrashBarUp+0x9e>
			continue;
		set_well(x,y-steps,target,t);	
		//set_well(x,y,target,c--);

	}
	bool flop = target;
    bc3e:	6a 2d       	mov	r22, r10
    bc40:	a1 10       	cpse	r10, r1
    bc42:	61 e0       	ldi	r22, 0x01	; 1
	uint8_t c = 20;
	for(uint8_t y=16-crashheight[target];y<16;y++){
    bc44:	90 e1       	ldi	r25, 0x10	; 16
    bc46:	95 1b       	sub	r25, r21
    bc48:	46 e0       	ldi	r20, 0x06	; 6
		for(uint8_t x=0;x<6;x++){
			set_well(x,y,target,c+flop);
			flop = !flop;
    bc4a:	31 e0       	ldi	r19, 0x01	; 1
    bc4c:	21 e0       	ldi	r18, 0x01	; 1
    bc4e:	09 c0       	rjmp	.+18     	; 0xbc62 <CrashBarUp+0xf4>
    bc50:	6c 5e       	subi	r22, 0xEC	; 236
    bc52:	61 93       	st	Z+, r22
    bc54:	64 51       	subi	r22, 0x14	; 20
    bc56:	63 27       	eor	r22, r19

	}
	bool flop = target;
	uint8_t c = 20;
	for(uint8_t y=16-crashheight[target];y<16;y++){
		for(uint8_t x=0;x<6;x++){
    bc58:	8f 5f       	subi	r24, 0xFF	; 255
    bc5a:	86 30       	cpi	r24, 0x06	; 6
    bc5c:	c9 f7       	brne	.-14     	; 0xbc50 <CrashBarUp+0xe2>
			set_well(x,y,target,c+flop);
			flop = !flop;
		}
		flop = !flop;
    bc5e:	62 27       	eor	r22, r18
		//set_well(x,y,target,c--);

	}
	bool flop = target;
	uint8_t c = 20;
	for(uint8_t y=16-crashheight[target];y<16;y++){
    bc60:	9f 5f       	subi	r25, 0xFF	; 255
    bc62:	90 31       	cpi	r25, 0x10	; 16
    bc64:	48 f4       	brcc	.+18     	; 0xbc78 <CrashBarUp+0x10a>
    bc66:	94 9f       	mul	r25, r20
    bc68:	f0 01       	movw	r30, r0
    bc6a:	11 24       	eor	r1, r1
    bc6c:	ec 0d       	add	r30, r12
    bc6e:	fd 1d       	adc	r31, r13
    bc70:	ee 58       	subi	r30, 0x8E	; 142
    bc72:	f1 4f       	sbci	r31, 0xF1	; 241
    bc74:	80 e0       	ldi	r24, 0x00	; 0
    bc76:	ec cf       	rjmp	.-40     	; 0xbc50 <CrashBarUp+0xe2>
			flop = !flop;
		}
		flop = !flop;
	}

	WaitVsync(1);
    bc78:	81 e0       	ldi	r24, 0x01	; 1
    bc7a:	90 e0       	ldi	r25, 0x00	; 0
    bc7c:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
	
	wellfullness[target] += 6*steps;
    bc80:	f4 01       	movw	r30, r8
    bc82:	ee 0f       	add	r30, r30
    bc84:	ff 1f       	adc	r31, r31
    bc86:	e3 5a       	subi	r30, 0xA3	; 163
    bc88:	f0 4f       	sbci	r31, 0xF0	; 240
    bc8a:	86 e0       	ldi	r24, 0x06	; 6
    bc8c:	b8 9e       	mul	r11, r24
    bc8e:	c0 01       	movw	r24, r0
    bc90:	11 24       	eor	r1, r1
    bc92:	20 81       	ld	r18, Z
    bc94:	31 81       	ldd	r19, Z+1	; 0x01
    bc96:	82 0f       	add	r24, r18
    bc98:	93 1f       	adc	r25, r19
    bc9a:	91 83       	std	Z+1, r25	; 0x01
    bc9c:	80 83       	st	Z, r24
	return steps;
}
    bc9e:	8b 2d       	mov	r24, r11
    bca0:	cd b7       	in	r28, 0x3d	; 61
    bca2:	de b7       	in	r29, 0x3e	; 62
    bca4:	ec e0       	ldi	r30, 0x0C	; 12
    bca6:	0c 94 1f 74 	jmp	0xe83e	; 0xe83e <__epilogue_restores__+0xc>

0000bcaa <SummonCurse>:
	preview[(p*3)+1] = 8;
	preview[(p*3)+2] = 9;
	magicjewelsonscreen++;
}

void SummonCurse(uint8_t p){
    bcaa:	1f 93       	push	r17
    bcac:	cf 93       	push	r28
    bcae:	df 93       	push	r29
    bcb0:	18 2f       	mov	r17, r24
	TriggerPCM(CRASHWAVE,28,255);
    bcb2:	8e e2       	ldi	r24, 0x2E	; 46
    bcb4:	6c e1       	ldi	r22, 0x1C	; 28
    bcb6:	4f ef       	ldi	r20, 0xFF	; 255
    bcb8:	d4 de       	rcall	.-600    	; 0xba62 <TriggerPCM>
	uint8_t t = 1;
	t <<= prng(MAX_PLAYERS)%6;
    bcba:	82 e0       	ldi	r24, 0x02	; 2
    bcbc:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <prng>
	cursetype[p] |= t;
    bcc0:	c1 2f       	mov	r28, r17
    bcc2:	d0 e0       	ldi	r29, 0x00	; 0
    bcc4:	fe 01       	movw	r30, r28
    bcc6:	ec 5a       	subi	r30, 0xAC	; 172
    bcc8:	f1 4f       	sbci	r31, 0xF1	; 241
    bcca:	66 e0       	ldi	r22, 0x06	; 6
    bccc:	70 e0       	ldi	r23, 0x00	; 0
    bcce:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    bcd2:	21 e0       	ldi	r18, 0x01	; 1
    bcd4:	30 e0       	ldi	r19, 0x00	; 0
    bcd6:	02 c0       	rjmp	.+4      	; 0xbcdc <SummonCurse+0x32>
    bcd8:	22 0f       	add	r18, r18
    bcda:	33 1f       	adc	r19, r19
    bcdc:	8a 95       	dec	r24
    bcde:	e2 f7       	brpl	.-8      	; 0xbcd8 <SummonCurse+0x2e>
    bce0:	80 81       	ld	r24, Z
    bce2:	82 2b       	or	r24, r18
    bce4:	80 83       	st	Z, r24
	cursetime[p] = 12*30;
    bce6:	cc 0f       	add	r28, r28
    bce8:	dd 1f       	adc	r29, r29
    bcea:	cd 59       	subi	r28, 0x9D	; 157
    bcec:	d1 4f       	sbci	r29, 0xF1	; 241
    bcee:	88 e6       	ldi	r24, 0x68	; 104
    bcf0:	91 e0       	ldi	r25, 0x01	; 1
    bcf2:	99 83       	std	Y+1, r25	; 0x01
    bcf4:	88 83       	st	Y, r24
}
    bcf6:	df 91       	pop	r29
    bcf8:	cf 91       	pop	r28
    bcfa:	1f 91       	pop	r17
    bcfc:	08 95       	ret

0000bcfe <SummonMagicJewel>:
	return false;
}



void SummonMagicJewel(uint8_t p){
    bcfe:	0f 93       	push	r16
    bd00:	1f 93       	push	r17
    bd02:	08 2f       	mov	r16, r24
	TriggerPCM(MAGICWAVE,23,255);
    bd04:	8d e2       	ldi	r24, 0x2D	; 45
    bd06:	67 e1       	ldi	r22, 0x17	; 23
    bd08:	4f ef       	ldi	r20, 0xFF	; 255
    bd0a:	ab de       	rcall	.-682    	; 0xba62 <TriggerPCM>
	magicjewelssummoned[p]++;
    bd0c:	10 e0       	ldi	r17, 0x00	; 0
    bd0e:	f8 01       	movw	r30, r16
    bd10:	e6 5a       	subi	r30, 0xA6	; 166
    bd12:	f1 4f       	sbci	r31, 0xF1	; 241
    bd14:	80 81       	ld	r24, Z
    bd16:	8f 5f       	subi	r24, 0xFF	; 255
    bd18:	80 83       	st	Z, r24
	preview[(p*3)+0] = 7;
    bd1a:	f8 01       	movw	r30, r16
    bd1c:	ee 0f       	add	r30, r30
    bd1e:	ff 1f       	adc	r31, r31
    bd20:	e0 0f       	add	r30, r16
    bd22:	f1 1f       	adc	r31, r17
    bd24:	ee 5c       	subi	r30, 0xCE	; 206
    bd26:	f0 4f       	sbci	r31, 0xF0	; 240
    bd28:	87 e0       	ldi	r24, 0x07	; 7
    bd2a:	80 83       	st	Z, r24
	preview[(p*3)+1] = 8;
    bd2c:	88 e0       	ldi	r24, 0x08	; 8
    bd2e:	81 83       	std	Z+1, r24	; 0x01
	preview[(p*3)+2] = 9;
    bd30:	89 e0       	ldi	r24, 0x09	; 9
    bd32:	82 83       	std	Z+2, r24	; 0x02
	magicjewelsonscreen++;
    bd34:	80 91 2f 0e 	lds	r24, 0x0E2F
    bd38:	8f 5f       	subi	r24, 0xFF	; 255
    bd3a:	80 93 2f 0e 	sts	0x0E2F, r24
}
    bd3e:	1f 91       	pop	r17
    bd40:	0f 91       	pop	r16
    bd42:	08 95       	ret

0000bd44 <CheckScore>:
	t <<= prng(MAX_PLAYERS)%6;
	cursetype[p] |= t;
	cursetime[p] = 12*30;
}

uint16_t CheckScore(uint8_t p){
    bd44:	a0 e0       	ldi	r26, 0x00	; 0
    bd46:	b0 e0       	ldi	r27, 0x00	; 0
    bd48:	e8 ea       	ldi	r30, 0xA8	; 168
    bd4a:	fe e5       	ldi	r31, 0x5E	; 94
    bd4c:	0c 94 fd 73 	jmp	0xe7fa	; 0xe7fa <__prologue_saves__>
    bd50:	48 2e       	mov	r4, r24
	uint16_t total = 0;
	uint8_t t0,t1,t2,t3,t4;
	uint8_t off;
	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = (p*WELLSIZE)+x;
    bd52:	e8 2e       	mov	r14, r24
    bd54:	ff 24       	eor	r15, r15
    bd56:	80 e6       	ldi	r24, 0x60	; 96
    bd58:	90 e0       	ldi	r25, 0x00	; 0
    bd5a:	48 9e       	mul	r4, r24
    bd5c:	b0 2c       	mov	r11, r0
    bd5e:	11 24       	eor	r1, r1
	    for(uint8_t y=1; y<15-crashheight[p];y++){
    bd60:	f7 01       	movw	r30, r14
    bd62:	e2 58       	subi	r30, 0x82	; 130
    bd64:	f0 4f       	sbci	r31, 0xF0	; 240
    bd66:	80 81       	ld	r24, Z
    bd68:	c8 2e       	mov	r12, r24
    bd6a:	dd 24       	eor	r13, r13
    bd6c:	7f e0       	ldi	r23, 0x0F	; 15
    bd6e:	67 2e       	mov	r6, r23
    bd70:	71 2c       	mov	r7, r1
    bd72:	6c 18       	sub	r6, r12
    bd74:	7d 08       	sbc	r7, r13
    bd76:	00 e0       	ldi	r16, 0x00	; 0
    bd78:	10 e0       	ldi	r17, 0x00	; 0
    bd7a:	40 e0       	ldi	r20, 0x00	; 0
    bd7c:	50 e0       	ldi	r21, 0x00	; 0
    bd7e:	7b 2d       	mov	r23, r11
    bd80:	74 0f       	add	r23, r20
    bd82:	61 e0       	ldi	r22, 0x01	; 1
    bd84:	23 c0       	rjmp	.+70     	; 0xbdcc <CheckScore+0x88>
			off += 6;
    bd86:	7a 5f       	subi	r23, 0xFA	; 250
			t1 = (well[off]&7);//get_well_no_scoring(x,y,p);
    bd88:	87 2f       	mov	r24, r23
    bd8a:	90 e0       	ldi	r25, 0x00	; 0
    bd8c:	dc 01       	movw	r26, r24
    bd8e:	ae 58       	subi	r26, 0x8E	; 142
    bd90:	b1 4f       	sbci	r27, 0xF1	; 241
    bd92:	2c 91       	ld	r18, X
    bd94:	27 70       	andi	r18, 0x07	; 7
			if(!t1)
    bd96:	c9 f0       	breq	.+50     	; 0xbdca <CheckScore+0x86>
				continue;
			t0 = (well[off-6]&7);//get_well_no_scoring(x,y-1,p);
			t2 = (well[off+6]&7);//get_well_no_scoring(x,y+1,p);
    bd98:	ec 01       	movw	r28, r24
    bd9a:	c8 58       	subi	r28, 0x88	; 136
    bd9c:	d1 4f       	sbci	r29, 0xF1	; 241
    bd9e:	38 81       	ld	r19, Y

			if(t1==t0 && t1==t2){
    bda0:	fc 01       	movw	r30, r24
    bda2:	e4 59       	subi	r30, 0x94	; 148
    bda4:	f1 4f       	sbci	r31, 0xF1	; 241
    bda6:	80 81       	ld	r24, Z
    bda8:	87 70       	andi	r24, 0x07	; 7
    bdaa:	28 17       	cp	r18, r24
    bdac:	71 f4       	brne	.+28     	; 0xbdca <CheckScore+0x86>
    bdae:	83 2f       	mov	r24, r19
    bdb0:	87 70       	andi	r24, 0x07	; 7
    bdb2:	28 17       	cp	r18, r24
    bdb4:	51 f4       	brne	.+20     	; 0xbdca <CheckScore+0x86>
				well[off+6] |= SCORINGJEWEL;//set_scoring(x,y-1,p);
    bdb6:	30 68       	ori	r19, 0x80	; 128
    bdb8:	38 83       	st	Y, r19
				well[off+0] |= SCORINGJEWEL;//set_scoring(x,y,p);
    bdba:	8c 91       	ld	r24, X
    bdbc:	80 68       	ori	r24, 0x80	; 128
    bdbe:	8c 93       	st	X, r24
				well[off-6] |= SCORINGJEWEL;//set_scoring(x,y+1,p);
    bdc0:	80 81       	ld	r24, Z
    bdc2:	80 68       	ori	r24, 0x80	; 128
    bdc4:	80 83       	st	Z, r24
				total+=3;
    bdc6:	0d 5f       	subi	r16, 0xFD	; 253
    bdc8:	1f 4f       	sbci	r17, 0xFF	; 255
	uint8_t t0,t1,t2,t3,t4;
	uint8_t off;
	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = (p*WELLSIZE)+x;
	    for(uint8_t y=1; y<15-crashheight[p];y++){
    bdca:	6f 5f       	subi	r22, 0xFF	; 255
    bdcc:	86 2f       	mov	r24, r22
    bdce:	90 e0       	ldi	r25, 0x00	; 0
    bdd0:	86 15       	cp	r24, r6
    bdd2:	97 05       	cpc	r25, r7
    bdd4:	c4 f2       	brlt	.-80     	; 0xbd86 <CheckScore+0x42>
    bdd6:	4f 5f       	subi	r20, 0xFF	; 255
    bdd8:	5f 4f       	sbci	r21, 0xFF	; 255
uint16_t CheckScore(uint8_t p){
	uint16_t total = 0;
	uint8_t t0,t1,t2,t3,t4;
	uint8_t off;
	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
    bdda:	46 30       	cpi	r20, 0x06	; 6
    bddc:	51 05       	cpc	r21, r1
    bdde:	79 f6       	brne	.-98     	; 0xbd7e <CheckScore+0x3a>
				total+=3;
			}
	    }
	}*/
	off = (p*WELLSIZE);
	for(uint8_t y=0;y<(16-crashheight[p]);y++){
    bde0:	40 e1       	ldi	r20, 0x10	; 16
    bde2:	50 e0       	ldi	r21, 0x00	; 0
    bde4:	4c 19       	sub	r20, r12
    bde6:	5d 09       	sbc	r21, r13
    bde8:	db 2c       	mov	r13, r11
    bdea:	cc 24       	eor	r12, r12
    bdec:	33 c0       	rjmp	.+102    	; 0xbe54 <CheckScore+0x110>
    bdee:	9d 2d       	mov	r25, r13
		for(uint8_t x=0;x<4;x++){
    bdf0:	64 e0       	ldi	r22, 0x04	; 4
    bdf2:	a6 2e       	mov	r10, r22
    bdf4:	ad 0c       	add	r10, r13
			t1 = (well[off++]&7);
    bdf6:	e9 2f       	mov	r30, r25
    bdf8:	f0 e0       	ldi	r31, 0x00	; 0
    bdfa:	ee 58       	subi	r30, 0x8E	; 142
    bdfc:	f1 4f       	sbci	r31, 0xF1	; 241
    bdfe:	30 81       	ld	r19, Z
    be00:	37 70       	andi	r19, 0x07	; 7
    be02:	9f 5f       	subi	r25, 0xFF	; 255
			if(!t1)
    be04:	33 23       	and	r19, r19
    be06:	09 f1       	breq	.+66     	; 0xbe4a <CheckScore+0x106>
				continue;
			t0 = (well[off++]&7);
    be08:	69 2f       	mov	r22, r25
    be0a:	70 e0       	ldi	r23, 0x00	; 0
			t2 = (well[off]&7);
    be0c:	9f 5f       	subi	r25, 0xFF	; 255
    be0e:	a9 2f       	mov	r26, r25
    be10:	b0 e0       	ldi	r27, 0x00	; 0
    be12:	91 50       	subi	r25, 0x01	; 1
    be14:	ae 58       	subi	r26, 0x8E	; 142
    be16:	b1 4f       	sbci	r27, 0xF1	; 241
    be18:	2c 91       	ld	r18, X
			if(t1 == t0 && t1 == t2){
    be1a:	fb 01       	movw	r30, r22
    be1c:	ee 58       	subi	r30, 0x8E	; 142
    be1e:	f1 4f       	sbci	r31, 0xF1	; 241
    be20:	80 81       	ld	r24, Z
    be22:	87 70       	andi	r24, 0x07	; 7
    be24:	38 17       	cp	r19, r24
    be26:	89 f4       	brne	.+34     	; 0xbe4a <CheckScore+0x106>
    be28:	82 2f       	mov	r24, r18
    be2a:	87 70       	andi	r24, 0x07	; 7
    be2c:	38 17       	cp	r19, r24
    be2e:	69 f4       	brne	.+26     	; 0xbe4a <CheckScore+0x106>
				well[off+0] |= SCORINGJEWEL;
    be30:	20 68       	ori	r18, 0x80	; 128
    be32:	2c 93       	st	X, r18
				well[--off] |= SCORINGJEWEL;
    be34:	80 81       	ld	r24, Z
    be36:	80 68       	ori	r24, 0x80	; 128
    be38:	80 83       	st	Z, r24
				well[off-1] |= SCORINGJEWEL;
    be3a:	fb 01       	movw	r30, r22
    be3c:	ef 58       	subi	r30, 0x8F	; 143
    be3e:	f1 4f       	sbci	r31, 0xF1	; 241
    be40:	80 81       	ld	r24, Z
    be42:	80 68       	ori	r24, 0x80	; 128
    be44:	80 83       	st	Z, r24
				total += 3;
    be46:	0d 5f       	subi	r16, 0xFD	; 253
    be48:	1f 4f       	sbci	r17, 0xFF	; 255
			}
	    }
	}*/
	off = (p*WELLSIZE);
	for(uint8_t y=0;y<(16-crashheight[p]);y++){
		for(uint8_t x=0;x<4;x++){
    be4a:	9a 15       	cp	r25, r10
    be4c:	a1 f6       	brne	.-88     	; 0xbdf6 <CheckScore+0xb2>
    be4e:	26 e0       	ldi	r18, 0x06	; 6
    be50:	d2 0e       	add	r13, r18
				total+=3;
			}
	    }
	}*/
	off = (p*WELLSIZE);
	for(uint8_t y=0;y<(16-crashheight[p]);y++){
    be52:	c3 94       	inc	r12
    be54:	8c 2d       	mov	r24, r12
    be56:	90 e0       	ldi	r25, 0x00	; 0
    be58:	84 17       	cp	r24, r20
    be5a:	95 07       	cpc	r25, r21
    be5c:	44 f2       	brlt	.-112    	; 0xbdee <CheckScore+0xaa>
    be5e:	7b 2d       	mov	r23, r11
    be60:	7f 5f       	subi	r23, 0xFF	; 255
	}
*/

	// CHECK DIAGONALS
	//off = (p*WELLSIZE)+1+6;
	for(uint8_t x=1;x<5;x++) {
    be62:	55 e0       	ldi	r21, 0x05	; 5
    be64:	35 2e       	mov	r3, r21
    be66:	3b 0c       	add	r3, r11
    be68:	67 c0       	rjmp	.+206    	; 0xbf38 <CheckScore+0x1f4>
		for(uint8_t y=1;y<15-crashheight[p];y++) {
			off = (p*WELLSIZE)+(y*6)+x;
			if(!(t0 = (well[off]&7)))//(x,y,p);
    be6a:	c9 01       	movw	r24, r18
    be6c:	88 0f       	add	r24, r24
    be6e:	99 1f       	adc	r25, r25
    be70:	82 0f       	add	r24, r18
    be72:	93 1f       	adc	r25, r19
    be74:	88 0f       	add	r24, r24
    be76:	99 1f       	adc	r25, r25
    be78:	87 0f       	add	r24, r23
    be7a:	28 2f       	mov	r18, r24
    be7c:	30 e0       	ldi	r19, 0x00	; 0
    be7e:	a2 e7       	ldi	r26, 0x72	; 114
    be80:	ca 2e       	mov	r12, r26
    be82:	ae e0       	ldi	r26, 0x0E	; 14
    be84:	da 2e       	mov	r13, r26
    be86:	c2 0e       	add	r12, r18
    be88:	d3 1e       	adc	r13, r19
    be8a:	f6 01       	movw	r30, r12
    be8c:	40 81       	ld	r20, Z
    be8e:	54 2f       	mov	r21, r20
    be90:	57 70       	andi	r21, 0x07	; 7
    be92:	09 f4       	brne	.+2      	; 0xbe96 <CheckScore+0x152>
    be94:	47 c0       	rjmp	.+142    	; 0xbf24 <CheckScore+0x1e0>
				continue;
				
			t1 = (well[(off-1)+6]&7);//get_well_no_scoring(x-1,y+1,p);
			t2 = (well[(off+1)-6]&7);//get_well_no_scoring(x+1,y-1,p);
    be96:	e9 01       	movw	r28, r18
    be98:	c3 59       	subi	r28, 0x93	; 147
    be9a:	d1 4f       	sbci	r29, 0xF1	; 241
    be9c:	98 81       	ld	r25, Y
			t3 = (well[(off-1)-6]&7);//get_well_no_scoring(x-1,y-1,p);
    be9e:	f9 ef       	ldi	r31, 0xF9	; 249
    bea0:	af 2e       	mov	r10, r31
    bea2:	ff ef       	ldi	r31, 0xFF	; 255
    bea4:	bf 2e       	mov	r11, r31
    bea6:	a2 0e       	add	r10, r18
    bea8:	b3 1e       	adc	r11, r19
    beaa:	f5 01       	movw	r30, r10
    beac:	ee 58       	subi	r30, 0x8E	; 142
    beae:	f1 4f       	sbci	r31, 0xF1	; 241
    beb0:	60 81       	ld	r22, Z
			t4 = (well[(off+1)+6]&7);//get_well_no_scoring(x+1,y+1,p);
    beb2:	e7 e0       	ldi	r30, 0x07	; 7
    beb4:	8e 2e       	mov	r8, r30
    beb6:	91 2c       	mov	r9, r1
    beb8:	82 0e       	add	r8, r18
    beba:	93 1e       	adc	r9, r19
    bebc:	f4 01       	movw	r30, r8
    bebe:	ee 58       	subi	r30, 0x8E	; 142
    bec0:	f1 4f       	sbci	r31, 0xF1	; 241
    bec2:	20 80       	ld	r2, Z
			
			if(t0==t1 && t0==t2){
    bec4:	d9 01       	movw	r26, r18
    bec6:	a9 58       	subi	r26, 0x89	; 137
    bec8:	b1 4f       	sbci	r27, 0xF1	; 241
    beca:	8c 91       	ld	r24, X
    becc:	87 70       	andi	r24, 0x07	; 7
    bece:	58 17       	cp	r21, r24
    bed0:	71 f4       	brne	.+28     	; 0xbeee <CheckScore+0x1aa>
    bed2:	97 70       	andi	r25, 0x07	; 7
    bed4:	59 17       	cp	r21, r25
    bed6:	59 f4       	brne	.+22     	; 0xbeee <CheckScore+0x1aa>
				well[(off+0)+0] |= SCORINGJEWEL;//set_scoring(x,y,p);
    bed8:	40 68       	ori	r20, 0x80	; 128
    beda:	f6 01       	movw	r30, r12
    bedc:	40 83       	st	Z, r20
				well[(off-1)+6] |= SCORINGJEWEL;//set_scoring(x-1,y+1,p);
    bede:	8c 91       	ld	r24, X
    bee0:	80 68       	ori	r24, 0x80	; 128
    bee2:	8c 93       	st	X, r24
				well[(off+1)-6] |= SCORINGJEWEL;//set_scoring(x+1,y-1,p);
    bee4:	88 81       	ld	r24, Y
    bee6:	80 68       	ori	r24, 0x80	; 128
    bee8:	88 83       	st	Y, r24
				total+=3;
    beea:	0d 5f       	subi	r16, 0xFD	; 253
    beec:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			if(t0==t3 && t0==t4){
    beee:	67 70       	andi	r22, 0x07	; 7
    bef0:	56 17       	cp	r21, r22
    bef2:	c1 f4       	brne	.+48     	; 0xbf24 <CheckScore+0x1e0>
    bef4:	f7 e0       	ldi	r31, 0x07	; 7
    bef6:	2f 22       	and	r2, r31
    bef8:	52 15       	cp	r21, r2
    befa:	a1 f4       	brne	.+40     	; 0xbf24 <CheckScore+0x1e0>
				well[(off+0)+0] |= SCORINGJEWEL;//set_scoring(x,y,p);
    befc:	f9 01       	movw	r30, r18
    befe:	ee 58       	subi	r30, 0x8E	; 142
    bf00:	f1 4f       	sbci	r31, 0xF1	; 241
    bf02:	80 81       	ld	r24, Z
    bf04:	80 68       	ori	r24, 0x80	; 128
    bf06:	80 83       	st	Z, r24
				well[(off-1)-6] |= SCORINGJEWEL;//set_scoring(x-1,y-1,p);
    bf08:	f5 01       	movw	r30, r10
    bf0a:	ee 58       	subi	r30, 0x8E	; 142
    bf0c:	f1 4f       	sbci	r31, 0xF1	; 241
    bf0e:	80 81       	ld	r24, Z
    bf10:	80 68       	ori	r24, 0x80	; 128
    bf12:	80 83       	st	Z, r24
				well[(off+1)+6] |= SCORINGJEWEL;//set_scoring(x+1,y+1,p);
    bf14:	f4 01       	movw	r30, r8
    bf16:	ee 58       	subi	r30, 0x8E	; 142
    bf18:	f1 4f       	sbci	r31, 0xF1	; 241
    bf1a:	80 81       	ld	r24, Z
    bf1c:	80 68       	ori	r24, 0x80	; 128
    bf1e:	80 83       	st	Z, r24
				total+=3;
    bf20:	0d 5f       	subi	r16, 0xFD	; 253
    bf22:	1f 4f       	sbci	r17, 0xFF	; 255
*/

	// CHECK DIAGONALS
	//off = (p*WELLSIZE)+1+6;
	for(uint8_t x=1;x<5;x++) {
		for(uint8_t y=1;y<15-crashheight[p];y++) {
    bf24:	53 94       	inc	r5
    bf26:	25 2d       	mov	r18, r5
    bf28:	30 e0       	ldi	r19, 0x00	; 0
    bf2a:	26 15       	cp	r18, r6
    bf2c:	37 05       	cpc	r19, r7
    bf2e:	0c f4       	brge	.+2      	; 0xbf32 <CheckScore+0x1ee>
    bf30:	9c cf       	rjmp	.-200    	; 0xbe6a <CheckScore+0x126>
    bf32:	7f 5f       	subi	r23, 0xFF	; 255
	}
*/

	// CHECK DIAGONALS
	//off = (p*WELLSIZE)+1+6;
	for(uint8_t x=1;x<5;x++) {
    bf34:	73 15       	cp	r23, r3
    bf36:	19 f0       	breq	.+6      	; 0xbf3e <CheckScore+0x1fa>
    bf38:	55 24       	eor	r5, r5
    bf3a:	53 94       	inc	r5
    bf3c:	f4 cf       	rjmp	.-24     	; 0xbf26 <CheckScore+0x1e2>
				total+=3;
			}
		}
	}
	
	if(!total)
    bf3e:	01 15       	cp	r16, r1
    bf40:	11 05       	cpc	r17, r1
    bf42:	09 f4       	brne	.+2      	; 0xbf46 <CheckScore+0x202>
    bf44:	53 c0       	rjmp	.+166    	; 0xbfec <CheckScore+0x2a8>
		return 0;
		
	if(!wasmagicjewel[p]){
    bf46:	f7 01       	movw	r30, r14
    bf48:	ec 58       	subi	r30, 0x8C	; 140
    bf4a:	f0 4f       	sbci	r31, 0xF0	; 240
    bf4c:	80 81       	ld	r24, Z
    bf4e:	88 23       	and	r24, r24
    bf50:	09 f0       	breq	.+2      	; 0xbf54 <CheckScore+0x210>
    bf52:	4c c0       	rjmp	.+152    	; 0xbfec <CheckScore+0x2a8>
		chain[p]++;
    bf54:	f7 01       	movw	r30, r14
    bf56:	e2 59       	subi	r30, 0x92	; 146
    bf58:	f0 4f       	sbci	r31, 0xF0	; 240
    bf5a:	80 81       	ld	r24, Z
    bf5c:	8f 5f       	subi	r24, 0xFF	; 255
    bf5e:	80 83       	st	Z, r24
		total *= chain[p];
    bf60:	90 e0       	ldi	r25, 0x00	; 0
    bf62:	98 01       	movw	r18, r16
    bf64:	28 9f       	mul	r18, r24
    bf66:	80 01       	movw	r16, r0
    bf68:	29 9f       	mul	r18, r25
    bf6a:	10 0d       	add	r17, r0
    bf6c:	38 9f       	mul	r19, r24
    bf6e:	10 0d       	add	r17, r0
    bf70:	11 24       	eor	r1, r1
		if(score[p]+total > 30)//I guess we will just update the score here...
    bf72:	f7 01       	movw	r30, r14
    bf74:	e8 5c       	subi	r30, 0xC8	; 200
    bf76:	f0 4f       	sbci	r31, 0xF0	; 240
    bf78:	20 81       	ld	r18, Z
    bf7a:	c8 01       	movw	r24, r16
    bf7c:	82 0f       	add	r24, r18
    bf7e:	91 1d       	adc	r25, r1
    bf80:	4f 97       	sbiw	r24, 0x1f	; 31
    bf82:	18 f0       	brcs	.+6      	; 0xbf8a <CheckScore+0x246>
			score[p] = 30;
    bf84:	8e e1       	ldi	r24, 0x1E	; 30
    bf86:	80 83       	st	Z, r24
    bf88:	02 c0       	rjmp	.+4      	; 0xbf8e <CheckScore+0x24a>
		else
			score[p] += total;
    bf8a:	20 0f       	add	r18, r16
    bf8c:	20 83       	st	Z, r18
		
		jewels[p] += total/3;
    bf8e:	c8 01       	movw	r24, r16
    bf90:	63 e0       	ldi	r22, 0x03	; 3
    bf92:	70 e0       	ldi	r23, 0x00	; 0
    bf94:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    bf98:	cb 01       	movw	r24, r22
    bf9a:	f7 01       	movw	r30, r14
    bf9c:	ee 0f       	add	r30, r30
    bf9e:	ff 1f       	adc	r31, r31
    bfa0:	e6 59       	subi	r30, 0x96	; 150
    bfa2:	f0 4f       	sbci	r31, 0xF0	; 240
    bfa4:	20 81       	ld	r18, Z
    bfa6:	31 81       	ldd	r19, Z+1	; 0x01
    bfa8:	82 0f       	add	r24, r18
    bfaa:	93 1f       	adc	r25, r19
    bfac:	91 83       	std	Z+1, r25	; 0x01
    bfae:	80 83       	st	Z, r24
		
		if(jewels[p]/20 > magicjewelssummoned[p])
    bfb0:	64 e1       	ldi	r22, 0x14	; 20
    bfb2:	70 e0       	ldi	r23, 0x00	; 0
    bfb4:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    bfb8:	f7 01       	movw	r30, r14
    bfba:	e6 5a       	subi	r30, 0xA6	; 166
    bfbc:	f1 4f       	sbci	r31, 0xF1	; 241
    bfbe:	80 81       	ld	r24, Z
    bfc0:	90 e0       	ldi	r25, 0x00	; 0
    bfc2:	86 17       	cp	r24, r22
    bfc4:	97 07       	cpc	r25, r23
    bfc6:	10 f4       	brcc	.+4      	; 0xbfcc <CheckScore+0x288>
			SummonMagicJewel(p);
    bfc8:	84 2d       	mov	r24, r4
    bfca:	99 de       	rcall	.-718    	; 0xbcfe <SummonMagicJewel>

		//see if we eliminated a flashing jewel
		if(flashingjeweltimer[p] && !(FlashingJewelInWell(p))){
    bfcc:	e7 01       	movw	r28, r14
    bfce:	ce 58       	subi	r28, 0x8E	; 142
    bfd0:	d0 4f       	sbci	r29, 0xF0	; 240
    bfd2:	88 81       	ld	r24, Y
    bfd4:	88 23       	and	r24, r24
    bfd6:	51 f0       	breq	.+20     	; 0xbfec <CheckScore+0x2a8>
    bfd8:	84 2d       	mov	r24, r4
    bfda:	0e 94 0a 57 	call	0xae14	; 0xae14 <FlashingJewelInWell>
    bfde:	88 23       	and	r24, r24
    bfe0:	29 f4       	brne	.+10     	; 0xbfec <CheckScore+0x2a8>
			flashingjeweltimer[p] = 0;
    bfe2:	18 82       	st	Y, r1
			SummonCurse(!p);
    bfe4:	44 20       	and	r4, r4
    bfe6:	09 f4       	brne	.+2      	; 0xbfea <CheckScore+0x2a6>
    bfe8:	81 e0       	ldi	r24, 0x01	; 1
    bfea:	5f de       	rcall	.-834    	; 0xbcaa <SummonCurse>
		return total;
	}
	else{	
		return total;
	}
}
    bfec:	c8 01       	movw	r24, r16
    bfee:	cd b7       	in	r28, 0x3d	; 61
    bff0:	de b7       	in	r29, 0x3e	; 62
    bff2:	e2 e1       	ldi	r30, 0x12	; 18
    bff4:	0c 94 19 74 	jmp	0xe832	; 0xe832 <__epilogue_restores__>

0000bff8 <DoPlay>:


inline void DoPlay(){
    bff8:	a3 e2       	ldi	r26, 0x23	; 35
    bffa:	b0 e0       	ldi	r27, 0x00	; 0
    bffc:	e2 e0       	ldi	r30, 0x02	; 2
    bffe:	f0 e6       	ldi	r31, 0x60	; 96
    c000:	0c 94 fd 73 	jmp	0xe7fa	; 0xe7fa <__prologue_saves__>
	if(game_state == INITIALSTATE)
    c004:	80 91 6a 0e 	lds	r24, 0x0E6A
    c008:	8f 3f       	cpi	r24, 0xFF	; 255
    c00a:	09 f4       	brne	.+2      	; 0xc00e <DoPlay+0x16>
		SetInitialState();//game_state |= GS_FIRSTTICK;
    c00c:	99 d9       	rcall	.-3278   	; 0xb340 <SetInitialState>

	if(game_state & GS_FIRSTTICK){
    c00e:	80 91 6a 0e 	lds	r24, 0x0E6A
    c012:	85 ff       	sbrs	r24, 5
    c014:	17 c0       	rjmp	.+46     	; 0xc044 <DoPlay+0x4c>
		WaitVsync(1);
    c016:	81 e0       	ldi	r24, 0x01	; 1
    c018:	90 e0       	ldi	r25, 0x00	; 0
    c01a:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
		ramtilestate[0] = ramtilestate[1] = NEEDALLRAMMED;//MAKE GRID/CRASHBLOCKS GET DRAWN;
    c01e:	80 e8       	ldi	r24, 0x80	; 128
    c020:	80 93 95 0f 	sts	0x0F95, r24
    c024:	80 93 94 0f 	sts	0x0F94, r24
		RamTileStateMachine();
    c028:	0e 94 ef 57 	call	0xafde	; 0xafde <RamTileStateMachine>
		ramtilestate[0] = ramtilestate[1] = 0;
    c02c:	10 92 95 0f 	sts	0x0F95, r1
    c030:	10 92 94 0f 	sts	0x0F94, r1
		WaitVsync(1);
    c034:	81 e0       	ldi	r24, 0x01	; 1
    c036:	90 e0       	ldi	r25, 0x00	; 0
    c038:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
		FadeIn(2,false);
    c03c:	82 e0       	ldi	r24, 0x02	; 2
    c03e:	60 e0       	ldi	r22, 0x00	; 0
    c040:	0e 94 82 52 	call	0xa504	; 0xa504 <FadeIn>
	

/////////////////////////////////////////////////////////////////////////////////////
//PROCESS 1 GAME TICK (30HZ)
/////////////////////////////////////////////////////////////////////////////////////
		UpdatePads();
    c044:	c4 da       	rcall	.-2680   	; 0xb5ce <UpdatePads>
    c046:	bb 24       	eor	r11, r11
		RotatePiece(p);
		//CrashBarUp(3,0);
	}

	if(BDown(p) || RSDown(p) || LSDown(p)){
		Attack(!p);
    c048:	aa 24       	eor	r10, r10
    c04a:	a3 94       	inc	r10
		for(uint8_t p=0;p<MAX_PLAYERS;p++){
			if(state[p] == GOAHEAD){
    c04c:	2b 2d       	mov	r18, r11
    c04e:	30 e0       	ldi	r19, 0x00	; 0
    c050:	39 a3       	std	Y+33, r19	; 0x21
    c052:	28 a3       	std	Y+32, r18	; 0x20
    c054:	8f e6       	ldi	r24, 0x6F	; 111
    c056:	c8 2e       	mov	r12, r24
    c058:	8e e0       	ldi	r24, 0x0E	; 14
    c05a:	d8 2e       	mov	r13, r24
    c05c:	c2 0e       	add	r12, r18
    c05e:	d3 1e       	adc	r13, r19
    c060:	d6 01       	movw	r26, r12
    c062:	8c 91       	ld	r24, X
    c064:	80 3c       	cpi	r24, 0xC0	; 192
    c066:	99 f4       	brne	.+38     	; 0xc08e <DoPlay+0x96>
				//while(true){};
				state[0] = 0;
    c068:	10 92 6f 0e 	sts	0x0E6F, r1
				state[1] = 0;
    c06c:	10 92 70 0e 	sts	0x0E70, r1
				//game_state |= GS_FIRSTTICK;
				GeneratePreview(0);
    c070:	80 e0       	ldi	r24, 0x00	; 0
    c072:	0e 94 3e 57 	call	0xae7c	; 0xae7c <GeneratePreview>
				GeneratePreview(1);
    c076:	81 e0       	ldi	r24, 0x01	; 1
    c078:	0e 94 3e 57 	call	0xae7c	; 0xae7c <GeneratePreview>
				ramtilestate[0] = NEEDALLRAMMED;
    c07c:	80 e8       	ldi	r24, 0x80	; 128
    c07e:	80 93 94 0f 	sts	0x0F94, r24
				ramtilestate[1] = NEEDALLRAMMED;
    c082:	80 93 95 0f 	sts	0x0F95, r24
				masterVolume = MASTERVOLUME;//needed for quick start presses during gameover
    c086:	80 93 1f 0e 	sts	0x0E1F, r24
    c08a:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
				return;
			}
			
			if(state[p] & PAUSED || state[p] & GETREADY){
    c08e:	28 2f       	mov	r18, r24
    c090:	30 e0       	ldi	r19, 0x00	; 0
    c092:	86 fd       	sbrc	r24, 6
    c094:	80 c3       	rjmp	.+1792   	; 0xc796 <DoPlay+0x79e>
    c096:	87 fd       	sbrc	r24, 7
    c098:	7e c3       	rjmp	.+1788   	; 0xc796 <DoPlay+0x79e>
			}				

/////////////////////////////////////////////////////////////////////////////////////
//GAME OVER STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & GAMEOVER){
    c09a:	84 ff       	sbrs	r24, 4
    c09c:	3a c0       	rjmp	.+116    	; 0xc112 <DoPlay+0x11a>
				musicspeed = 0;
    c09e:	10 92 42 0f 	sts	0x0F42, r1
				SetSongTempo(musicspeed);
    c0a2:	80 e0       	ldi	r24, 0x00	; 0
    c0a4:	90 e0       	ldi	r25, 0x00	; 0
    c0a6:	0e 94 3a 4a 	call	0x9474	; 0x9474 <SetSongTempo>
				if(!playSong){// && musictrack){
    c0aa:	80 91 a4 0d 	lds	r24, 0x0DA4
    c0ae:	88 23       	and	r24, r24
    c0b0:	21 f4       	brne	.+8      	; 0xc0ba <DoPlay+0xc2>
					masterVolume = 0;
    c0b2:	10 92 1f 0e 	sts	0x0E1F, r1
					ResumeSong();
    c0b6:	0e 94 eb 4a 	call	0x95d6	; 0x95d6 <ResumeSong>
				}
				if(masterVolume < MASTERVOLUME){
    c0ba:	80 91 1f 0e 	lds	r24, 0x0E1F
    c0be:	87 fd       	sbrc	r24, 7
    c0c0:	08 c0       	rjmp	.+16     	; 0xc0d2 <DoPlay+0xda>
					masterVolume+=2;
    c0c2:	8e 5f       	subi	r24, 0xFE	; 254
    c0c4:	80 93 1f 0e 	sts	0x0E1F, r24
					if(masterVolume > MASTERVOLUME)
    c0c8:	81 38       	cpi	r24, 0x81	; 129
    c0ca:	18 f0       	brcs	.+6      	; 0xc0d2 <DoPlay+0xda>
						masterVolume = MASTERVOLUME;
    c0cc:	b0 e8       	ldi	r27, 0x80	; 128
    c0ce:	b0 93 1f 0e 	sts	0x0E1F, r27
	}
	return true;
}

void GeneratePreview(uint8_t p);
void clear_well(uint8_t p){uint8_t off = p*WELLSIZE;for(uint8_t i=0;i<WELLSIZE;i++){well[off++]=0;}}//for(uint8_t y=0;y<16;y++){for(uint8_t x=0;x<6;x++){set_well(x,y,p,0);}}}
    c0d2:	80 e6       	ldi	r24, 0x60	; 96
    c0d4:	90 e0       	ldi	r25, 0x00	; 0
    c0d6:	e8 a1       	ldd	r30, Y+32	; 0x20
    c0d8:	e8 9f       	mul	r30, r24
    c0da:	20 2d       	mov	r18, r0
    c0dc:	11 24       	eor	r1, r1
    c0de:	80 e0       	ldi	r24, 0x00	; 0
    c0e0:	90 e0       	ldi	r25, 0x00	; 0
    c0e2:	e2 2f       	mov	r30, r18
    c0e4:	e8 0f       	add	r30, r24
    c0e6:	f0 e0       	ldi	r31, 0x00	; 0
    c0e8:	ee 58       	subi	r30, 0x8E	; 142
    c0ea:	f1 4f       	sbci	r31, 0xF1	; 241
    c0ec:	10 82       	st	Z, r1
    c0ee:	01 96       	adiw	r24, 0x01	; 1
    c0f0:	80 36       	cpi	r24, 0x60	; 96
    c0f2:	91 05       	cpc	r25, r1
    c0f4:	b1 f7       	brne	.-20     	; 0xc0e2 <DoPlay+0xea>
				}					
				clear_well(p);
				piecey[p] = 0;
    c0f6:	e8 a1       	ldd	r30, Y+32	; 0x20
    c0f8:	f9 a1       	ldd	r31, Y+33	; 0x21
    c0fa:	e3 59       	subi	r30, 0x93	; 147
    c0fc:	f1 4f       	sbci	r31, 0xF1	; 241
    c0fe:	10 82       	st	Z, r1
				halfstep[p] = 0;
    c100:	e8 a1       	ldd	r30, Y+32	; 0x20
    c102:	f9 a1       	ldd	r31, Y+33	; 0x21
    c104:	e5 58       	subi	r30, 0x85	; 133
    c106:	f0 4f       	sbci	r31, 0xF0	; 240
    c108:	10 82       	st	Z, r1
				blank_piece(p);
    c10a:	8b 2d       	mov	r24, r11
    c10c:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
    c110:	42 c3       	rjmp	.+1668   	; 0xc796 <DoPlay+0x79e>
			}

/////////////////////////////////////////////////////////////////////////////////////
//LOSING/2 STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & (LOSING|LOSING2)){
    c112:	c9 01       	movw	r24, r18
    c114:	8c 70       	andi	r24, 0x0C	; 12
    c116:	90 70       	andi	r25, 0x00	; 0
    c118:	89 2b       	or	r24, r25
    c11a:	09 f4       	brne	.+2      	; 0xc11e <DoPlay+0x126>
    c11c:	cb c0       	rjmp	.+406    	; 0xc2b4 <DoPlay+0x2bc>
//	AdjustEvalWeights();	
	SetInitialState();
			
		return;
	#endif
				crashcomingup[p] = 0;
    c11e:	e8 a1       	ldd	r30, Y+32	; 0x20
    c120:	f9 a1       	ldd	r31, Y+33	; 0x21
    c122:	e0 5c       	subi	r30, 0xC0	; 192
    c124:	f0 4f       	sbci	r31, 0xF0	; 240
    c126:	10 82       	st	Z, r1
				crashcomingdown[p] = 0;
    c128:	e8 a1       	ldd	r30, Y+32	; 0x20
    c12a:	f9 a1       	ldd	r31, Y+33	; 0x21
    c12c:	e1 57       	subi	r30, 0x71	; 113
    c12e:	f0 4f       	sbci	r31, 0xF0	; 240
    c130:	10 82       	st	Z, r1
				cpustate = 0;
    c132:	10 92 6b 0e 	sts	0x0E6B, r1
				blank_piece(p);
    c136:	8b 2d       	mov	r24, r11
    c138:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
				piecey[p] = 0;
    c13c:	e8 a1       	ldd	r30, Y+32	; 0x20
    c13e:	f9 a1       	ldd	r31, Y+33	; 0x21
    c140:	e3 59       	subi	r30, 0x93	; 147
    c142:	f1 4f       	sbci	r31, 0xF1	; 241
    c144:	10 82       	st	Z, r1
				if(statetimer[p]){
    c146:	e8 a1       	ldd	r30, Y+32	; 0x20
    c148:	f9 a1       	ldd	r31, Y+33	; 0x21
    c14a:	e0 5b       	subi	r30, 0xB0	; 176
    c14c:	f0 4f       	sbci	r31, 0xF0	; 240
    c14e:	80 81       	ld	r24, Z
    c150:	88 23       	and	r24, r24
    c152:	11 f0       	breq	.+4      	; 0xc158 <DoPlay+0x160>
					statetimer[p]--;
    c154:	81 50       	subi	r24, 0x01	; 1
    c156:	be c1       	rjmp	.+892    	; 0xc4d4 <DoPlay+0x4dc>
					continue;
				}					
				//statetimer[p] = 0;
				
				if(state[p] & LOSING){
    c158:	d6 01       	movw	r26, r12
    c15a:	8c 91       	ld	r24, X
    c15c:	82 ff       	sbrs	r24, 2
    c15e:	85 c0       	rjmp	.+266    	; 0xc26a <DoPlay+0x272>
#ifdef DEBUG
while(true){};
#endif
					if(game_state & GS_DEMO){
    c160:	80 91 6a 0e 	lds	r24, 0x0E6A
    c164:	81 ff       	sbrs	r24, 1
    c166:	04 c0       	rjmp	.+8      	; 0xc170 <DoPlay+0x178>
						game_state = 0;
    c168:	10 92 6a 0e 	sts	0x0E6A, r1
    c16c:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
						return;
					}
					if(crashheight[p] < 13){//still going up
    c170:	e8 a1       	ldd	r30, Y+32	; 0x20
    c172:	f9 a1       	ldd	r31, Y+33	; 0x21
    c174:	e2 58       	subi	r30, 0x82	; 130
    c176:	f0 4f       	sbci	r31, 0xF0	; 240
    c178:	80 81       	ld	r24, Z
    c17a:	8d 30       	cpi	r24, 0x0D	; 13
    c17c:	20 f4       	brcc	.+8      	; 0xc186 <DoPlay+0x18e>
						CrashBarUp(1,p);
    c17e:	81 e0       	ldi	r24, 0x01	; 1
    c180:	6b 2d       	mov	r22, r11
    c182:	f5 dc       	rcall	.-1558   	; 0xbb6e <CrashBarUp>
    c184:	fb c5       	rjmp	.+3062   	; 0xcd7c <DoPlay+0xd84>
						continue;	
					}else{//done going up, wait until other player is up then go down
						state[!p] = LOSING;
    c186:	a0 e0       	ldi	r26, 0x00	; 0
    c188:	b0 e0       	ldi	r27, 0x00	; 0
    c18a:	bb 20       	and	r11, r11
    c18c:	11 f4       	brne	.+4      	; 0xc192 <DoPlay+0x19a>
    c18e:	a1 e0       	ldi	r26, 0x01	; 1
    c190:	b0 e0       	ldi	r27, 0x00	; 0
    c192:	fd 01       	movw	r30, r26
    c194:	e1 59       	subi	r30, 0x91	; 145
    c196:	f1 4f       	sbci	r31, 0xF1	; 241
    c198:	84 e0       	ldi	r24, 0x04	; 4
    c19a:	80 83       	st	Z, r24
    c19c:	80 e6       	ldi	r24, 0x60	; 96
    c19e:	90 e0       	ldi	r25, 0x00	; 0
    c1a0:	28 a1       	ldd	r18, Y+32	; 0x20
    c1a2:	39 a1       	ldd	r19, Y+33	; 0x21
    c1a4:	28 9f       	mul	r18, r24
    c1a6:	f0 01       	movw	r30, r0
    c1a8:	29 9f       	mul	r18, r25
    c1aa:	f0 0d       	add	r31, r0
    c1ac:	38 9f       	mul	r19, r24
    c1ae:	f0 0d       	add	r31, r0
    c1b0:	11 24       	eor	r1, r1
    c1b2:	ee 58       	subi	r30, 0x8E	; 142
    c1b4:	f1 4f       	sbci	r31, 0xF1	; 241
    c1b6:	80 e0       	ldi	r24, 0x00	; 0



void ClearTopRows(uint8_t p){
	for(uint8_t i=0;i<3*6;i++)
		well[(p*WELLSIZE)+i] = 0;
    c1b8:	11 92       	st	Z+, r1
}



void ClearTopRows(uint8_t p){
	for(uint8_t i=0;i<3*6;i++)
    c1ba:	8f 5f       	subi	r24, 0xFF	; 255
    c1bc:	82 31       	cpi	r24, 0x12	; 18
    c1be:	e1 f7       	brne	.-8      	; 0xc1b8 <DoPlay+0x1c0>
						//SetLosing(p);
						//winner = !p;
						ClearTopRows(p);//make sure no jewels are dragged back down
						if(crashheight[!p] > 12){//other player is there								
    c1c0:	a2 58       	subi	r26, 0x82	; 130
    c1c2:	b0 4f       	sbci	r27, 0xF0	; 240
    c1c4:	8c 91       	ld	r24, X
    c1c6:	8d 30       	cpi	r24, 0x0D	; 13
    c1c8:	08 f4       	brcc	.+2      	; 0xc1cc <DoPlay+0x1d4>
    c1ca:	d8 c5       	rjmp	.+2992   	; 0xcd7c <DoPlay+0xd84>
							magicjewelsonscreen = 0;
    c1cc:	10 92 2f 0e 	sts	0x0E2F, r1
							if(!p){//only do once
    c1d0:	bb 20       	and	r11, r11
    c1d2:	09 f0       	breq	.+2      	; 0xc1d6 <DoPlay+0x1de>
    c1d4:	d3 c5       	rjmp	.+2982   	; 0xcd7c <DoPlay+0xd84>
								state[0] = LOSING2;
    c1d6:	88 e0       	ldi	r24, 0x08	; 8
    c1d8:	80 93 6f 0e 	sts	0x0E6F, r24
								state[1] = LOSING2;
    c1dc:	80 93 70 0e 	sts	0x0E70, r24
    c1e0:	80 e0       	ldi	r24, 0x00	; 0
    c1e2:	90 e0       	ldi	r25, 0x00	; 0
    c1e4:	09 c0       	rjmp	.+18     	; 0xc1f8 <DoPlay+0x200>
								for(uint8_t jj=0;jj<2;jj++)
								for(uint8_t ii=0;ii<3*6;ii++)
									well[(jj*WELLSIZE)+ii] = 0;
    c1e6:	11 92       	st	Z+, r1
							magicjewelsonscreen = 0;
							if(!p){//only do once
								state[0] = LOSING2;
								state[1] = LOSING2;
								for(uint8_t jj=0;jj<2;jj++)
								for(uint8_t ii=0;ii<3*6;ii++)
    c1e8:	2f 5f       	subi	r18, 0xFF	; 255
    c1ea:	22 31       	cpi	r18, 0x12	; 18
    c1ec:	e1 f7       	brne	.-8      	; 0xc1e6 <DoPlay+0x1ee>
    c1ee:	80 5a       	subi	r24, 0xA0	; 160
    c1f0:	9f 4f       	sbci	r25, 0xFF	; 255
						if(crashheight[!p] > 12){//other player is there								
							magicjewelsonscreen = 0;
							if(!p){//only do once
								state[0] = LOSING2;
								state[1] = LOSING2;
								for(uint8_t jj=0;jj<2;jj++)
    c1f2:	80 3c       	cpi	r24, 0xC0	; 192
    c1f4:	91 05       	cpc	r25, r1
    c1f6:	29 f0       	breq	.+10     	; 0xc202 <DoPlay+0x20a>
    c1f8:	fc 01       	movw	r30, r24
    c1fa:	ee 58       	subi	r30, 0x8E	; 142
    c1fc:	f1 4f       	sbci	r31, 0xF1	; 241
    c1fe:	20 e0       	ldi	r18, 0x00	; 0
    c200:	f2 cf       	rjmp	.-28     	; 0xc1e6 <DoPlay+0x1ee>
								for(uint8_t ii=0;ii<3*6;ii++)
									well[(jj*WELLSIZE)+ii] = 0;
								statetimer[0] = 2;
    c202:	82 e0       	ldi	r24, 0x02	; 2
    c204:	80 93 50 0f 	sts	0x0F50, r24
								statetimer[1] = 2;
    c208:	80 93 51 0f 	sts	0x0F51, r24
								rtl_RamifyFontEx(0,gameovercharmap,charlist,compfont,0,0x37,true);
    c20c:	80 e0       	ldi	r24, 0x00	; 0
    c20e:	90 e0       	ldi	r25, 0x00	; 0
    c210:	69 e6       	ldi	r22, 0x69	; 105
    c212:	78 e8       	ldi	r23, 0x88	; 136
    c214:	42 e1       	ldi	r20, 0x12	; 18
    c216:	5c e1       	ldi	r21, 0x1C	; 28
    c218:	20 e5       	ldi	r18, 0x50	; 80
    c21a:	3a e1       	ldi	r19, 0x1A	; 26
    c21c:	00 e0       	ldi	r16, 0x00	; 0
    c21e:	b7 e3       	ldi	r27, 0x37	; 55
    c220:	eb 2e       	mov	r14, r27
    c222:	cc 24       	eor	r12, r12
    c224:	c3 94       	inc	r12
    c226:	0e 94 06 53 	call	0xa60c	; 0xa60c <rtl_RamifyFontEx>
								WaitVsync(2-vsyncs);//TODO MAKE SURE EVERYTHING ALWAYS LINES ON ON 2 TICK INTERVALS(CPU PLAYER GOES HALF DROP SPEED SOMETIMES?)
    c22a:	20 91 38 0e 	lds	r18, 0x0E38
    c22e:	82 e0       	ldi	r24, 0x02	; 2
    c230:	90 e0       	ldi	r25, 0x00	; 0
    c232:	82 1b       	sub	r24, r18
    c234:	91 09       	sbc	r25, r1
    c236:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
								if(game_mode == 0){//adjust cpu skill
    c23a:	80 91 68 0e 	lds	r24, 0x0E68
    c23e:	88 23       	and	r24, r24
    c240:	89 f4       	brne	.+34     	; 0xc264 <DoPlay+0x26c>
									if(winner == 1 && cpuskill > 1)
    c242:	80 91 49 0f 	lds	r24, 0x0F49
    c246:	81 30       	cpi	r24, 0x01	; 1
    c248:	31 f4       	brne	.+12     	; 0xc256 <DoPlay+0x25e>
    c24a:	80 91 37 0e 	lds	r24, 0x0E37
    c24e:	82 30       	cpi	r24, 0x02	; 2
    c250:	48 f0       	brcs	.+18     	; 0xc264 <DoPlay+0x26c>
										cpuskill--;
    c252:	81 50       	subi	r24, 0x01	; 1
    c254:	05 c0       	rjmp	.+10     	; 0xc260 <DoPlay+0x268>
									else if(winner == 0)// && cpuskill < 9)skill will be adjusted back to 9, used to determine if player just beat 9 or only got to it(for DoDraw())
    c256:	88 23       	and	r24, r24
    c258:	29 f4       	brne	.+10     	; 0xc264 <DoPlay+0x26c>
										cpuskill++;
    c25a:	80 91 37 0e 	lds	r24, 0x0E37
    c25e:	8f 5f       	subi	r24, 0xFF	; 255
    c260:	80 93 37 0e 	sts	0x0E37, r24
    c264:	bb 24       	eor	r11, r11
    c266:	ba 94       	dec	r11
    c268:	89 c5       	rjmp	.+2834   	; 0xcd7c <DoPlay+0xd84>
					continue;							
				}	
				
									
				//else LOSING2
				if(crashheight[p])
    c26a:	e8 a1       	ldd	r30, Y+32	; 0x20
    c26c:	f9 a1       	ldd	r31, Y+33	; 0x21
    c26e:	e2 58       	subi	r30, 0x82	; 130
    c270:	f0 4f       	sbci	r31, 0xF0	; 240
    c272:	80 81       	ld	r24, Z
    c274:	88 23       	and	r24, r24
    c276:	29 f0       	breq	.+10     	; 0xc282 <DoPlay+0x28a>
					CrashBarDown(1,p,1);
    c278:	81 e0       	ldi	r24, 0x01	; 1
    c27a:	6b 2d       	mov	r22, r11
    c27c:	41 e0       	ldi	r20, 0x01	; 1
    c27e:	18 dc       	rcall	.-2000   	; 0xbab0 <CrashBarDown>
    c280:	7d c5       	rjmp	.+2810   	; 0xcd7c <DoPlay+0xd84>
				else{
					state[p] = GAMEOVER;
    c282:	80 e1       	ldi	r24, 0x10	; 16
    c284:	d6 01       	movw	r26, r12
    c286:	8c 93       	st	X, r24
    c288:	80 e6       	ldi	r24, 0x60	; 96
    c28a:	90 e0       	ldi	r25, 0x00	; 0
    c28c:	b8 a1       	ldd	r27, Y+32	; 0x20
    c28e:	b8 9f       	mul	r27, r24
    c290:	00 2d       	mov	r16, r0
    c292:	11 24       	eor	r1, r1
    c294:	20 e0       	ldi	r18, 0x00	; 0
    c296:	30 e0       	ldi	r19, 0x00	; 0
    c298:	e0 2f       	mov	r30, r16
    c29a:	e2 0f       	add	r30, r18
    c29c:	f0 e0       	ldi	r31, 0x00	; 0
    c29e:	ee 58       	subi	r30, 0x8E	; 142
    c2a0:	f1 4f       	sbci	r31, 0xF1	; 241
    c2a2:	10 82       	st	Z, r1
    c2a4:	2f 5f       	subi	r18, 0xFF	; 255
    c2a6:	3f 4f       	sbci	r19, 0xFF	; 255
    c2a8:	20 36       	cpi	r18, 0x60	; 96
    c2aa:	31 05       	cpc	r19, r1
    c2ac:	a9 f7       	brne	.-22     	; 0xc298 <DoPlay+0x2a0>
					clear_well(p);
					globalflashcounter = 0;
    c2ae:	10 92 01 01 	sts	0x0101, r1
    c2b2:	64 c5       	rjmp	.+2760   	; 0xcd7c <DoPlay+0xd84>
			}				
								
/////////////////////////////////////////////////////////////////////////////////////
//APPLY GRAVITY STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & APPLYGRAVITY){
    c2b4:	25 ff       	sbrs	r18, 5
    c2b6:	7c c0       	rjmp	.+248    	; 0xc3b0 <DoPlay+0x3b8>
				blank_piece(p);//TODO IS THIS NECESSARY???
    c2b8:	8b 2d       	mov	r24, r11
    c2ba:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
	}
	*/

	for(uint8_t x=0;x<6;x++){
		moved = false;
		off = (x+(p*WELLSIZE))-6;
    c2be:	80 e6       	ldi	r24, 0x60	; 96
    c2c0:	90 e0       	ldi	r25, 0x00	; 0
    c2c2:	e8 a1       	ldd	r30, Y+32	; 0x20
    c2c4:	e8 9f       	mul	r30, r24
    c2c6:	f0 2c       	mov	r15, r0
    c2c8:	11 24       	eor	r1, r1
    c2ca:	4f 2d       	mov	r20, r15
    c2cc:	46 50       	subi	r20, 0x06	; 6
    c2ce:	50 e0       	ldi	r21, 0x00	; 0
		//off -= 6;
		for(uint8_t y=0;y<15-crashheight[p];y++){
    c2d0:	08 a1       	ldd	r16, Y+32	; 0x20
    c2d2:	19 a1       	ldd	r17, Y+33	; 0x21
    c2d4:	02 58       	subi	r16, 0x82	; 130
    c2d6:	10 4f       	sbci	r17, 0xF0	; 240
	}
	*/

	for(uint8_t x=0;x<6;x++){
		moved = false;
		off = (x+(p*WELLSIZE))-6;
    c2d8:	74 2f       	mov	r23, r20
    c2da:	60 e0       	ldi	r22, 0x00	; 0
    c2dc:	1a c0       	rjmp	.+52     	; 0xc312 <DoPlay+0x31a>
		//off -= 6;
		for(uint8_t y=0;y<15-crashheight[p];y++){
			//off = ((y*6)+x)+(p*WELLSIZE);
			off += 6;
    c2de:	7a 5f       	subi	r23, 0xFA	; 250
			if(!(t = well[off]))//get_well(x,y,p);//if(!t)	
    c2e0:	27 2f       	mov	r18, r23
    c2e2:	30 e0       	ldi	r19, 0x00	; 0
    c2e4:	f9 01       	movw	r30, r18
    c2e6:	ee 58       	subi	r30, 0x8E	; 142
    c2e8:	f1 4f       	sbci	r31, 0xF1	; 241
    c2ea:	90 81       	ld	r25, Z
    c2ec:	99 23       	and	r25, r25
    c2ee:	81 f0       	breq	.+32     	; 0xc310 <DoPlay+0x318>
				continue;
			//t2 = well[off+6];
			if(well[off+6]){//get_well(x,y+1,p);//check below
    c2f0:	d9 01       	movw	r26, r18
    c2f2:	a8 58       	subi	r26, 0x88	; 136
    c2f4:	b1 4f       	sbci	r27, 0xF1	; 241
    c2f6:	8c 91       	ld	r24, X
    c2f8:	88 23       	and	r24, r24
    c2fa:	51 f4       	brne	.+20     	; 0xc310 <DoPlay+0x318>
			}				

			//we are here so we have a block to drop
			moved = true;
			hasmoved = true;
			if(t & HALFSTEP){
    c2fc:	96 ff       	sbrs	r25, 6
    c2fe:	05 c0       	rjmp	.+10     	; 0xc30a <DoPlay+0x312>
				t ^= HALFSTEP;
				well[off+6] = t;//set_well(x,y+1,p,t);
    c300:	20 e4       	ldi	r18, 0x40	; 64
    c302:	92 27       	eor	r25, r18
    c304:	9c 93       	st	X, r25
				well[off+0] = 0;//set_well(x,y,p,0);
    c306:	10 82       	st	Z, r1
    c308:	02 c0       	rjmp	.+4      	; 0xc30e <DoPlay+0x316>
			}
			else{
				t |= HALFSTEP;
				well[off] = t;//set_well(x,y,p,t);
    c30a:	90 64       	ori	r25, 0x40	; 64
    c30c:	90 83       	st	Z, r25
    c30e:	51 e0       	ldi	r21, 0x01	; 1

	for(uint8_t x=0;x<6;x++){
		moved = false;
		off = (x+(p*WELLSIZE))-6;
		//off -= 6;
		for(uint8_t y=0;y<15-crashheight[p];y++){
    c310:	6f 5f       	subi	r22, 0xFF	; 255
    c312:	26 2f       	mov	r18, r22
    c314:	30 e0       	ldi	r19, 0x00	; 0
    c316:	d8 01       	movw	r26, r16
    c318:	8c 91       	ld	r24, X
    c31a:	ef e0       	ldi	r30, 0x0F	; 15
    c31c:	f0 e0       	ldi	r31, 0x00	; 0
    c31e:	e8 1b       	sub	r30, r24
    c320:	f1 09       	sbc	r31, r1
    c322:	2e 17       	cp	r18, r30
    c324:	3f 07       	cpc	r19, r31
    c326:	dc f2       	brlt	.-74     	; 0xc2de <DoPlay+0x2e6>
    c328:	4f 5f       	subi	r20, 0xFF	; 255
		//if(moved)
		//	x--;//do this column again
	}
	*/

	for(uint8_t x=0;x<6;x++){
    c32a:	4f 15       	cp	r20, r15
    c32c:	a9 f6       	brne	.-86     	; 0xc2d8 <DoPlay+0x2e0>
				if(!ApplyGravity(p)){
    c32e:	55 23       	and	r21, r21
    c330:	09 f0       	breq	.+2      	; 0xc334 <DoPlay+0x33c>
    c332:	21 c5       	rjmp	.+2626   	; 0xcd76 <DoPlay+0xd7e>
					if(CheckScore(p)){
    c334:	8b 2d       	mov	r24, r11
    c336:	06 dd       	rcall	.-1524   	; 0xbd44 <CheckScore>
    c338:	a8 a1       	ldd	r26, Y+32	; 0x20
    c33a:	b9 a1       	ldd	r27, Y+33	; 0x21
    c33c:	a1 59       	subi	r26, 0x91	; 145
    c33e:	b1 4f       	sbci	r27, 0xF1	; 241
    c340:	89 2b       	or	r24, r25
    c342:	69 f0       	breq	.+26     	; 0xc35e <DoPlay+0x366>
						state[p] = SCORING;
    c344:	ac 92       	st	X, r10
						statetimer[p] = SCOREFLASHTIME;
    c346:	e8 a1       	ldd	r30, Y+32	; 0x20
    c348:	f9 a1       	ldd	r31, Y+33	; 0x21
    c34a:	e0 5b       	subi	r30, 0xB0	; 176
    c34c:	f0 4f       	sbci	r31, 0xF0	; 240
    c34e:	a0 82       	st	Z, r10
						stateframe[p] = 0;
    c350:	28 a1       	ldd	r18, Y+32	; 0x20
    c352:	39 a1       	ldd	r19, Y+33	; 0x21
    c354:	21 5a       	subi	r18, 0xA1	; 161
    c356:	31 4f       	sbci	r19, 0xF1	; 241
    c358:	d9 01       	movw	r26, r18
    c35a:	1c 92       	st	X, r1
    c35c:	0c c5       	rjmp	.+2584   	; 0xcd76 <DoPlay+0xd7e>
					}else{
						wasmagicjewel[p] = 0;//enable scoring again, in case was a magic jewel
    c35e:	e8 a1       	ldd	r30, Y+32	; 0x20
    c360:	f9 a1       	ldd	r31, Y+33	; 0x21
    c362:	ec 58       	subi	r30, 0x8C	; 140
    c364:	f0 4f       	sbci	r31, 0xF0	; 240
    c366:	10 82       	st	Z, r1
						state[p] = DROPPING;
    c368:	1c 92       	st	X, r1
						if(chain[p] > 3)
    c36a:	e8 a1       	ldd	r30, Y+32	; 0x20
    c36c:	f9 a1       	ldd	r31, Y+33	; 0x21
    c36e:	e2 59       	subi	r30, 0x92	; 146
    c370:	f0 4f       	sbci	r31, 0xF0	; 240
    c372:	80 81       	ld	r24, Z
    c374:	84 30       	cpi	r24, 0x04	; 4
    c376:	38 f0       	brcs	.+14     	; 0xc386 <DoPlay+0x38e>
							cursetype[p] |= FLASHINGJEWELCOMING;//SummonMagicJewel(p);
    c378:	e8 a1       	ldd	r30, Y+32	; 0x20
    c37a:	f9 a1       	ldd	r31, Y+33	; 0x21
    c37c:	ec 5a       	subi	r30, 0xAC	; 172
    c37e:	f1 4f       	sbci	r31, 0xF1	; 241
    c380:	80 81       	ld	r24, Z
    c382:	80 68       	ori	r24, 0x80	; 128
    c384:	80 83       	st	Z, r24
						chain[p] = 0;
    c386:	e8 a1       	ldd	r30, Y+32	; 0x20
    c388:	f9 a1       	ldd	r31, Y+33	; 0x21
    c38a:	e2 59       	subi	r30, 0x92	; 146
    c38c:	f0 4f       	sbci	r31, 0xF0	; 240
    c38e:	10 82       	st	Z, r1
						droptimer[p] = DROPTIMER;
    c390:	e8 a1       	ldd	r30, Y+32	; 0x20
    c392:	f9 a1       	ldd	r31, Y+33	; 0x21
    c394:	ea 5b       	subi	r30, 0xBA	; 186
    c396:	f1 4f       	sbci	r31, 0xF1	; 241
    c398:	80 e1       	ldi	r24, 0x10	; 16
    c39a:	80 83       	st	Z, r24
	
						if(CheckLoss(p)){//see if there are any jewels in the invisible top 3 rows, if so lose
    c39c:	8b 2d       	mov	r24, r11
    c39e:	0e 94 ea 56 	call	0xadd4	; 0xadd4 <CheckLoss>
    c3a2:	88 23       	and	r24, r24
    c3a4:	09 f4       	brne	.+2      	; 0xc3a8 <DoPlay+0x3b0>
    c3a6:	e7 c4       	rjmp	.+2510   	; 0xcd76 <DoPlay+0xd7e>
							SetLosing(p);
    c3a8:	8b 2d       	mov	r24, r11
    c3aa:	ce d8       	rcall	.-3684   	; 0xb548 <SetLosing>
    c3ac:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
			}

/////////////////////////////////////////////////////////////////////////////////////
//SCORING STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & SCORING){
    c3b0:	20 ff       	sbrs	r18, 0
    c3b2:	3d c0       	rjmp	.+122    	; 0xc42e <DoPlay+0x436>
#ifdef DEBUG 
	stateframe[p] = SCOREFLASHITERATIONS*2;
	goto NOSCOREFLASH;
#endif
				if(statetimer[p])
    c3b4:	08 a1       	ldd	r16, Y+32	; 0x20
    c3b6:	19 a1       	ldd	r17, Y+33	; 0x21
    c3b8:	00 5b       	subi	r16, 0xB0	; 176
    c3ba:	10 4f       	sbci	r17, 0xF0	; 240
    c3bc:	d8 01       	movw	r26, r16
    c3be:	8c 91       	ld	r24, X
    c3c0:	88 23       	and	r24, r24
    c3c2:	19 f0       	breq	.+6      	; 0xc3ca <DoPlay+0x3d2>
					statetimer[p]--;
    c3c4:	81 50       	subi	r24, 0x01	; 1
    c3c6:	8c 93       	st	X, r24
    c3c8:	d9 c4       	rjmp	.+2482   	; 0xcd7c <DoPlay+0xd84>
				else{
#ifdef DEBUG
NOSCOREFLASH:
#endif
					if(++stateframe[p] > SCOREFLASHITERATIONS*2){//done flashing, switch to exploding
    c3ca:	af e5       	ldi	r26, 0x5F	; 95
    c3cc:	ea 2e       	mov	r14, r26
    c3ce:	ae e0       	ldi	r26, 0x0E	; 14
    c3d0:	fa 2e       	mov	r15, r26
    c3d2:	e8 a1       	ldd	r30, Y+32	; 0x20
    c3d4:	f9 a1       	ldd	r31, Y+33	; 0x21
    c3d6:	ee 0e       	add	r14, r30
    c3d8:	ff 1e       	adc	r15, r31
    c3da:	d7 01       	movw	r26, r14
    c3dc:	8c 91       	ld	r24, X
    c3de:	8f 5f       	subi	r24, 0xFF	; 255
    c3e0:	8c 93       	st	X, r24
    c3e2:	89 30       	cpi	r24, 0x09	; 9
    c3e4:	08 f1       	brcs	.+66     	; 0xc428 <DoPlay+0x430>
						TriggerPCM(SCOREWAVE,(chain[p]*2)+23,190+(chain[p]*5));
    c3e6:	e2 59       	subi	r30, 0x92	; 146
    c3e8:	f0 4f       	sbci	r31, 0xF0	; 240
    c3ea:	80 81       	ld	r24, Z
    c3ec:	90 e0       	ldi	r25, 0x00	; 0
    c3ee:	bc 01       	movw	r22, r24
    c3f0:	66 0f       	add	r22, r22
    c3f2:	77 1f       	adc	r23, r23
    c3f4:	69 5e       	subi	r22, 0xE9	; 233
    c3f6:	ac 01       	movw	r20, r24
    c3f8:	44 0f       	add	r20, r20
    c3fa:	55 1f       	adc	r21, r21
    c3fc:	44 0f       	add	r20, r20
    c3fe:	55 1f       	adc	r21, r21
    c400:	48 0f       	add	r20, r24
    c402:	59 1f       	adc	r21, r25
    c404:	42 54       	subi	r20, 0x42	; 66
    c406:	8c e2       	ldi	r24, 0x2C	; 44
    c408:	2c db       	rcall	.-2472   	; 0xba62 <TriggerPCM>
						state[p] = EXPLODING;
    c40a:	82 e0       	ldi	r24, 0x02	; 2
    c40c:	f6 01       	movw	r30, r12
    c40e:	80 83       	st	Z, r24
						ramtilestate[p] |= NEEDEXPLOSIONRAMMED;//make sure ram tiles get updated for explosion graphics
    c410:	e8 a1       	ldd	r30, Y+32	; 0x20
    c412:	f9 a1       	ldd	r31, Y+33	; 0x21
    c414:	ec 56       	subi	r30, 0x6C	; 108
    c416:	f0 4f       	sbci	r31, 0xF0	; 240
    c418:	80 81       	ld	r24, Z
    c41a:	82 60       	ori	r24, 0x02	; 2
    c41c:	80 83       	st	Z, r24
						statetimer[p] = 0;
    c41e:	d8 01       	movw	r26, r16
    c420:	1c 92       	st	X, r1
						stateframe[p] = 0;
    c422:	f7 01       	movw	r30, r14
    c424:	10 82       	st	Z, r1
    c426:	aa c4       	rjmp	.+2388   	; 0xcd7c <DoPlay+0xd84>
					}else
						statetimer[p] = SCOREFLASHTIME;//still in scoring phase
    c428:	d8 01       	movw	r26, r16
    c42a:	ac 92       	st	X, r10
    c42c:	a7 c4       	rjmp	.+2382   	; 0xcd7c <DoPlay+0xd84>


/////////////////////////////////////////////////////////////////////////////////////
//EXPLODING STATE
/////////////////////////////////////////////////////////////////////////////////////
			if(state[p] & EXPLODING){
    c42e:	21 ff       	sbrs	r18, 1
    c430:	53 c0       	rjmp	.+166    	; 0xc4d8 <DoPlay+0x4e0>
#ifdef DEBUG
stateframe[p] = 6;
statetimer[p] = 0;
#endif
				if(!statetimer[p]){
    c432:	e8 a1       	ldd	r30, Y+32	; 0x20
    c434:	f9 a1       	ldd	r31, Y+33	; 0x21
    c436:	e0 5b       	subi	r30, 0xB0	; 176
    c438:	f0 4f       	sbci	r31, 0xF0	; 240
    c43a:	80 81       	ld	r24, Z
    c43c:	88 23       	and	r24, r24
    c43e:	09 f0       	breq	.+2      	; 0xc442 <DoPlay+0x44a>
    c440:	41 c0       	rjmp	.+130    	; 0xc4c4 <DoPlay+0x4cc>
					if(++stateframe[p] > 6){//done exploding
    c442:	e8 a1       	ldd	r30, Y+32	; 0x20
    c444:	f9 a1       	ldd	r31, Y+33	; 0x21
    c446:	e1 5a       	subi	r30, 0xA1	; 161
    c448:	f1 4f       	sbci	r31, 0xF1	; 241
    c44a:	80 81       	ld	r24, Z
    c44c:	8f 5f       	subi	r24, 0xFF	; 255
    c44e:	80 83       	st	Z, r24
    c450:	87 30       	cpi	r24, 0x07	; 7
    c452:	90 f1       	brcs	.+100    	; 0xc4b8 <DoPlay+0x4c0>
		cpustate = CPUFIRSTTICK;//let cpu know next move has begun
//	downletup[p] = 0;
}

inline void ClearScoredJewels(uint8_t p){
	for(uint8_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++){
    c454:	80 e6       	ldi	r24, 0x60	; 96
    c456:	90 e0       	ldi	r25, 0x00	; 0
    c458:	b8 a1       	ldd	r27, Y+32	; 0x20
    c45a:	b8 9f       	mul	r27, r24
    c45c:	20 2d       	mov	r18, r0
    c45e:	11 24       	eor	r1, r1
    c460:	e8 a1       	ldd	r30, Y+32	; 0x20
    c462:	f9 a1       	ldd	r31, Y+33	; 0x21
    c464:	31 96       	adiw	r30, 0x01	; 1
    c466:	e8 9f       	mul	r30, r24
    c468:	a0 01       	movw	r20, r0
    c46a:	e9 9f       	mul	r30, r25
    c46c:	50 0d       	add	r21, r0
    c46e:	f8 9f       	mul	r31, r24
    c470:	50 0d       	add	r21, r0
    c472:	11 24       	eor	r1, r1
    c474:	31 97       	sbiw	r30, 0x01	; 1
    c476:	f9 a3       	std	Y+33, r31	; 0x21
    c478:	e8 a3       	std	Y+32, r30	; 0x20
		if(well[i] & SCORINGJEWEL){
			well[i] = 0;
			wellfullness[p]--;
    c47a:	ee 0f       	add	r30, r30
    c47c:	ff 1f       	adc	r31, r31
    c47e:	e3 5a       	subi	r30, 0xA3	; 163
    c480:	f0 4f       	sbci	r31, 0xF0	; 240
    c482:	0d c0       	rjmp	.+26     	; 0xc49e <DoPlay+0x4a6>
//	downletup[p] = 0;
}

inline void ClearScoredJewels(uint8_t p){
	for(uint8_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++){
		if(well[i] & SCORINGJEWEL){
    c484:	dc 01       	movw	r26, r24
    c486:	ae 58       	subi	r26, 0x8E	; 142
    c488:	b1 4f       	sbci	r27, 0xF1	; 241
    c48a:	8c 91       	ld	r24, X
    c48c:	87 ff       	sbrs	r24, 7
    c48e:	06 c0       	rjmp	.+12     	; 0xc49c <DoPlay+0x4a4>
			well[i] = 0;
    c490:	1c 92       	st	X, r1
			wellfullness[p]--;
    c492:	80 81       	ld	r24, Z
    c494:	91 81       	ldd	r25, Z+1	; 0x01
    c496:	01 97       	sbiw	r24, 0x01	; 1
    c498:	91 83       	std	Z+1, r25	; 0x01
    c49a:	80 83       	st	Z, r24
		cpustate = CPUFIRSTTICK;//let cpu know next move has begun
//	downletup[p] = 0;
}

inline void ClearScoredJewels(uint8_t p){
	for(uint8_t i=p*WELLSIZE;i<(p*WELLSIZE)+WELLSIZE;i++){
    c49c:	2f 5f       	subi	r18, 0xFF	; 255
    c49e:	82 2f       	mov	r24, r18
    c4a0:	90 e0       	ldi	r25, 0x00	; 0
    c4a2:	84 17       	cp	r24, r20
    c4a4:	95 07       	cpc	r25, r21
    c4a6:	74 f3       	brlt	.-36     	; 0xc484 <DoPlay+0x48c>
						ClearScoredJewels(p);
						state[p] = APPLYGRAVITY;
    c4a8:	e8 a1       	ldd	r30, Y+32	; 0x20
    c4aa:	f9 a1       	ldd	r31, Y+33	; 0x21
    c4ac:	e1 59       	subi	r30, 0x91	; 145
    c4ae:	f1 4f       	sbci	r31, 0xF1	; 241
    c4b0:	60 e2       	ldi	r22, 0x20	; 32
    c4b2:	f6 2e       	mov	r15, r22
    c4b4:	f0 82       	st	Z, r15
    c4b6:	08 c0       	rjmp	.+16     	; 0xc4c8 <DoPlay+0x4d0>
					}else{
						statetimer[p] = 1;//TODO FIX ME
    c4b8:	e8 a1       	ldd	r30, Y+32	; 0x20
    c4ba:	f9 a1       	ldd	r31, Y+33	; 0x21
    c4bc:	e0 5b       	subi	r30, 0xB0	; 176
    c4be:	f0 4f       	sbci	r31, 0xF0	; 240
    c4c0:	a0 82       	st	Z, r10
    c4c2:	02 c0       	rjmp	.+4      	; 0xc4c8 <DoPlay+0x4d0>
					}				
				}else
					statetimer[p]--;
    c4c4:	81 50       	subi	r24, 0x01	; 1
    c4c6:	80 83       	st	Z, r24
				
				ramtilestate[p] |= NEEDEXPLOSIONRAMMED;//make sure explosion ram tiles get updated TODO ONLY WHEN UPDATED
    c4c8:	e8 a1       	ldd	r30, Y+32	; 0x20
    c4ca:	f9 a1       	ldd	r31, Y+33	; 0x21
    c4cc:	ec 56       	subi	r30, 0x6C	; 108
    c4ce:	f0 4f       	sbci	r31, 0xF0	; 240
    c4d0:	80 81       	ld	r24, Z
    c4d2:	82 60       	ori	r24, 0x02	; 2
    c4d4:	80 83       	st	Z, r24
    c4d6:	52 c4       	rjmp	.+2212   	; 0xcd7c <DoPlay+0xd84>
/////////////////////////////////////////////////////////////////////////////////////
//DROPPING STATE(FALLS THROUGH)
/////////////////////////////////////////////////////////////////////////////////////
			if(true){//state[p] & DROPPING){
				//blank_piece(p);//blank piece for piece movement code process from ProcessInputState and MovePieceDown()
				if(!droptimer[p]){
    c4d8:	e8 a1       	ldd	r30, Y+32	; 0x20
    c4da:	f9 a1       	ldd	r31, Y+33	; 0x21
    c4dc:	ea 5b       	subi	r30, 0xBA	; 186
    c4de:	f1 4f       	sbci	r31, 0xF1	; 241
    c4e0:	80 81       	ld	r24, Z
    c4e2:	88 23       	and	r24, r24
    c4e4:	09 f0       	breq	.+2      	; 0xc4e8 <DoPlay+0x4f0>
    c4e6:	38 c1       	rjmp	.+624    	; 0xc758 <DoPlay+0x760>
					droptimer[p] = DROPTIMER;
    c4e8:	80 e1       	ldi	r24, 0x10	; 16
    c4ea:	80 83       	st	Z, r24

inline void MovePieceDown(uint8_t p){
#ifdef DEBUG
if(!p)return;
#endif
	blank_piece(p);
    c4ec:	8b 2d       	mov	r24, r11
    c4ee:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
	if((piecey[p]<13) && (!get_well(piecex[p],piecey[p]+3,p))){//can move down
    c4f2:	e8 a1       	ldd	r30, Y+32	; 0x20
    c4f4:	f9 a1       	ldd	r31, Y+33	; 0x21
    c4f6:	e3 59       	subi	r30, 0x93	; 147
    c4f8:	f1 4f       	sbci	r31, 0xF1	; 241
    c4fa:	20 81       	ld	r18, Z
    c4fc:	2d 30       	cpi	r18, 0x0D	; 13
    c4fe:	a8 f5       	brcc	.+106    	; 0xc56a <DoPlay+0x572>
    c500:	e8 a1       	ldd	r30, Y+32	; 0x20
    c502:	f9 a1       	ldd	r31, Y+33	; 0x21
    c504:	e0 59       	subi	r30, 0x90	; 144
    c506:	f0 4f       	sbci	r31, 0xF0	; 240
    c508:	40 81       	ld	r20, Z
    c50a:	2d 5f       	subi	r18, 0xFD	; 253
    c50c:	30 e0       	ldi	r19, 0x00	; 0
    c50e:	80 e6       	ldi	r24, 0x60	; 96
    c510:	90 e0       	ldi	r25, 0x00	; 0
    c512:	68 a1       	ldd	r22, Y+32	; 0x20
    c514:	79 a1       	ldd	r23, Y+33	; 0x21
    c516:	68 9f       	mul	r22, r24
    c518:	f0 01       	movw	r30, r0
    c51a:	69 9f       	mul	r22, r25
    c51c:	f0 0d       	add	r31, r0
    c51e:	78 9f       	mul	r23, r24
    c520:	f0 0d       	add	r31, r0
    c522:	11 24       	eor	r1, r1
    c524:	c9 01       	movw	r24, r18
    c526:	88 0f       	add	r24, r24
    c528:	99 1f       	adc	r25, r25
    c52a:	82 0f       	add	r24, r18
    c52c:	93 1f       	adc	r25, r19
    c52e:	88 0f       	add	r24, r24
    c530:	99 1f       	adc	r25, r25
    c532:	e8 0f       	add	r30, r24
    c534:	f9 1f       	adc	r31, r25
    c536:	ee 58       	subi	r30, 0x8E	; 142
    c538:	f1 4f       	sbci	r31, 0xF1	; 241
    c53a:	e4 0f       	add	r30, r20
    c53c:	f1 1d       	adc	r31, r1
    c53e:	80 81       	ld	r24, Z
    c540:	88 23       	and	r24, r24
    c542:	99 f4       	brne	.+38     	; 0xc56a <DoPlay+0x572>
		if(halfstep[p]){
    c544:	fb 01       	movw	r30, r22
    c546:	e5 58       	subi	r30, 0x85	; 133
    c548:	f0 4f       	sbci	r31, 0xF0	; 240
    c54a:	80 81       	ld	r24, Z
    c54c:	88 23       	and	r24, r24
    c54e:	41 f0       	breq	.+16     	; 0xc560 <DoPlay+0x568>
			halfstep[p] = false;
    c550:	10 82       	st	Z, r1
			piecey[p]++;
    c552:	fb 01       	movw	r30, r22
    c554:	e3 59       	subi	r30, 0x93	; 147
    c556:	f1 4f       	sbci	r31, 0xF1	; 241
    c558:	80 81       	ld	r24, Z
    c55a:	8f 5f       	subi	r24, 0xFF	; 255
    c55c:	80 83       	st	Z, r24
    c55e:	01 c0       	rjmp	.+2      	; 0xc562 <DoPlay+0x56a>
		}
		else
			halfstep[p] = true;
    c560:	a0 82       	st	Z, r10
	add_piece(p);
    c562:	8b 2d       	mov	r24, r11
    c564:	0e 94 c8 53 	call	0xa790	; 0xa790 <add_piece>
    c568:	f9 c0       	rjmp	.+498    	; 0xc75c <DoPlay+0x764>
	return;
	}
	//else move down failed
	add_piece(p);
    c56a:	8b 2d       	mov	r24, r11
    c56c:	0e 94 c8 53 	call	0xa790	; 0xa790 <add_piece>
	wellfullness[p] += 3;
    c570:	e8 a1       	ldd	r30, Y+32	; 0x20
    c572:	f9 a1       	ldd	r31, Y+33	; 0x21
    c574:	ee 0f       	add	r30, r30
    c576:	ff 1f       	adc	r31, r31
    c578:	df 01       	movw	r26, r30
    c57a:	a3 5a       	subi	r26, 0xA3	; 163
    c57c:	b0 4f       	sbci	r27, 0xF0	; 240
    c57e:	8d 91       	ld	r24, X+
    c580:	9c 91       	ld	r25, X
    c582:	11 97       	sbiw	r26, 0x01	; 1
    c584:	03 96       	adiw	r24, 0x03	; 3
    c586:	8d 93       	st	X+, r24
    c588:	9c 93       	st	X, r25

	if((piece[(p*3)+2]&0x0F) > 6){//is it a magic jewel? TODO - NO POINTS CAN BE SCORED FROM MAGIC JEWEL EVEN THE CHAINS RESULTING FROM IT!!!!!!!!!
    c58a:	88 a1       	ldd	r24, Y+32	; 0x20
    c58c:	99 a1       	ldd	r25, Y+33	; 0x21
    c58e:	e8 0f       	add	r30, r24
    c590:	f9 1f       	adc	r31, r25
    c592:	ed 5b       	subi	r30, 0xBD	; 189
    c594:	f0 4f       	sbci	r31, 0xF0	; 240
    c596:	22 81       	ldd	r18, Z+2	; 0x02
    c598:	82 2f       	mov	r24, r18
    c59a:	90 e0       	ldi	r25, 0x00	; 0
    c59c:	8f 70       	andi	r24, 0x0F	; 15
    c59e:	90 70       	andi	r25, 0x00	; 0
    c5a0:	07 97       	sbiw	r24, 0x07	; 7
    c5a2:	0c f4       	brge	.+2      	; 0xc5a6 <DoPlay+0x5ae>
    c5a4:	88 c0       	rjmp	.+272    	; 0xc6b6 <DoPlay+0x6be>
		uint8_t t = piece[(p*3)+2]&0x0f;
    c5a6:	2f 70       	andi	r18, 0x0F	; 15
    c5a8:	2c 8f       	std	Y+28, r18	; 0x1c


inline uint8_t get_well(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)];}
inline uint8_t get_well_no_scoring(uint8_t x, uint8_t y, uint8_t p){return 		well[(p*WELLSIZE)+x+(y*6)]&0b00001111;}
inline void set_well(uint8_t x, uint8_t y, uint8_t p, uint8_t t){		well[(p*WELLSIZE)+x+(y*6)]=t;};
inline void set_scoring(uint8_t x, uint8_t y, uint8_t p){	well[(p*WELLSIZE)+x+(y*6)]|= 	0b10000000;}
    c5aa:	80 e6       	ldi	r24, 0x60	; 96
    c5ac:	90 e0       	ldi	r25, 0x00	; 0
    c5ae:	a8 a1       	ldd	r26, Y+32	; 0x20
    c5b0:	b9 a1       	ldd	r27, Y+33	; 0x21
    c5b2:	a8 9f       	mul	r26, r24
    c5b4:	80 01       	movw	r16, r0
    c5b6:	a9 9f       	mul	r26, r25
    c5b8:	10 0d       	add	r17, r0
    c5ba:	b8 9f       	mul	r27, r24
    c5bc:	10 0d       	add	r17, r0
    c5be:	11 24       	eor	r1, r1
    c5c0:	20 e0       	ldi	r18, 0x00	; 0
    c5c2:	ad 01       	movw	r20, r26
    c5c4:	40 59       	subi	r20, 0x90	; 144
    c5c6:	50 4f       	sbci	r21, 0xF0	; 240
    c5c8:	a3 59       	subi	r26, 0x93	; 147
    c5ca:	b1 4f       	sbci	r27, 0xF1	; 241
    c5cc:	fa 01       	movw	r30, r20
    c5ce:	80 81       	ld	r24, Z
    c5d0:	68 2f       	mov	r22, r24
    c5d2:	70 e0       	ldi	r23, 0x00	; 0
    c5d4:	fb 01       	movw	r30, r22
    c5d6:	e0 0f       	add	r30, r16
    c5d8:	f1 1f       	adc	r31, r17
    c5da:	3c 91       	ld	r19, X
    c5dc:	82 2f       	mov	r24, r18
    c5de:	83 0f       	add	r24, r19
    c5e0:	96 e0       	ldi	r25, 0x06	; 6
    c5e2:	f9 2e       	mov	r15, r25
    c5e4:	8f 9d       	mul	r24, r15
    c5e6:	c0 01       	movw	r24, r0
    c5e8:	11 24       	eor	r1, r1
    c5ea:	e8 0f       	add	r30, r24
    c5ec:	f9 1f       	adc	r31, r25
    c5ee:	ee 58       	subi	r30, 0x8E	; 142
    c5f0:	f1 4f       	sbci	r31, 0xF1	; 241
    c5f2:	80 81       	ld	r24, Z
    c5f4:	80 68       	ori	r24, 0x80	; 128
    c5f6:	80 83       	st	Z, r24

		for(uint8_t i=0;i<3;i++)
    c5f8:	2f 5f       	subi	r18, 0xFF	; 255
    c5fa:	23 30       	cpi	r18, 0x03	; 3
    c5fc:	39 f7       	brne	.-50     	; 0xc5cc <DoPlay+0x5d4>
			set_scoring(piecex[p],piecey[p]+i,p);

		if(t == 7){//up arrow
    c5fe:	2c 8d       	ldd	r18, Y+28	; 0x1c
    c600:	27 30       	cpi	r18, 0x07	; 7
    c602:	49 f4       	brne	.+18     	; 0xc616 <DoPlay+0x61e>
		//Columns 3 the amount is 2 up or 2 down for arrows
			crashcomingup[!p] += 2;
    c604:	e0 e0       	ldi	r30, 0x00	; 0
    c606:	f0 e0       	ldi	r31, 0x00	; 0
    c608:	bb 20       	and	r11, r11
    c60a:	11 f4       	brne	.+4      	; 0xc610 <DoPlay+0x618>
    c60c:	e1 e0       	ldi	r30, 0x01	; 1
    c60e:	f0 e0       	ldi	r31, 0x00	; 0
    c610:	e0 5c       	subi	r30, 0xC0	; 192
    c612:	f0 4f       	sbci	r31, 0xF0	; 240
    c614:	38 c0       	rjmp	.+112    	; 0xc686 <DoPlay+0x68e>
		}
		else if(t == 8){//delete other jewels of same color
    c616:	4c 8d       	ldd	r20, Y+28	; 0x1c
    c618:	48 30       	cpi	r20, 0x08	; 8
    c61a:	09 f5       	brne	.+66     	; 0xc65e <DoPlay+0x666>
			chain[p] = 1;//make the sound right, no score from magic jewel
    c61c:	e8 a1       	ldd	r30, Y+32	; 0x20
    c61e:	f9 a1       	ldd	r31, Y+33	; 0x21
    c620:	e2 59       	subi	r30, 0x92	; 146
    c622:	f0 4f       	sbci	r31, 0xF0	; 240
    c624:	a0 82       	st	Z, r10
			wasmagicjewel[p] = 1;//make sure we dont score for this
    c626:	e8 a1       	ldd	r30, Y+32	; 0x20
    c628:	f9 a1       	ldd	r31, Y+33	; 0x21
    c62a:	ec 58       	subi	r30, 0x8C	; 140
    c62c:	f0 4f       	sbci	r31, 0xF0	; 240
    c62e:	a0 82       	st	Z, r10
			if(piecey[p] < 13)//didn't hit floor
    c630:	3d 30       	cpi	r19, 0x0D	; 13
    c632:	60 f5       	brcc	.+88     	; 0xc68c <DoPlay+0x694>
				SetScoringSimilar(p,get_well(piecex[p],piecey[p]+3,p));
    c634:	3d 5f       	subi	r19, 0xFD	; 253
    c636:	83 2f       	mov	r24, r19
    c638:	90 e0       	ldi	r25, 0x00	; 0
    c63a:	fc 01       	movw	r30, r24
    c63c:	ee 0f       	add	r30, r30
    c63e:	ff 1f       	adc	r31, r31
    c640:	e8 0f       	add	r30, r24
    c642:	f9 1f       	adc	r31, r25
    c644:	ee 0f       	add	r30, r30
    c646:	ff 1f       	adc	r31, r31
    c648:	ee 58       	subi	r30, 0x8E	; 142
    c64a:	f1 4f       	sbci	r31, 0xF1	; 241
    c64c:	e0 0f       	add	r30, r16
    c64e:	f1 1f       	adc	r31, r17
    c650:	e6 0f       	add	r30, r22
    c652:	f7 1f       	adc	r31, r23
    c654:	8b 2d       	mov	r24, r11
    c656:	60 81       	ld	r22, Z
    c658:	0e 94 c5 56 	call	0xad8a	; 0xad8a <SetScoringSimilar>
    c65c:	17 c0       	rjmp	.+46     	; 0xc68c <DoPlay+0x694>
		}
		else{//down
			if(crashheight[p] == 1)
    c65e:	e8 a1       	ldd	r30, Y+32	; 0x20
    c660:	f9 a1       	ldd	r31, Y+33	; 0x21
    c662:	e2 58       	subi	r30, 0x82	; 130
    c664:	f0 4f       	sbci	r31, 0xF0	; 240
    c666:	e0 81       	ld	r30, Z
    c668:	e1 30       	cpi	r30, 0x01	; 1
    c66a:	39 f4       	brne	.+14     	; 0xc67a <DoPlay+0x682>
				crashcomingdown[p]++;
    c66c:	e8 a1       	ldd	r30, Y+32	; 0x20
    c66e:	f9 a1       	ldd	r31, Y+33	; 0x21
    c670:	e1 57       	subi	r30, 0x71	; 113
    c672:	f0 4f       	sbci	r31, 0xF0	; 240
    c674:	80 81       	ld	r24, Z
    c676:	8f 5f       	subi	r24, 0xFF	; 255
    c678:	08 c0       	rjmp	.+16     	; 0xc68a <DoPlay+0x692>
			else if(crashheight[p])//>1
    c67a:	ee 23       	and	r30, r30
    c67c:	39 f0       	breq	.+14     	; 0xc68c <DoPlay+0x694>
				crashcomingdown[p] += 2;
    c67e:	e8 a1       	ldd	r30, Y+32	; 0x20
    c680:	f9 a1       	ldd	r31, Y+33	; 0x21
    c682:	e1 57       	subi	r30, 0x71	; 113
    c684:	f0 4f       	sbci	r31, 0xF0	; 240
    c686:	80 81       	ld	r24, Z
    c688:	8e 5f       	subi	r24, 0xFE	; 254
    c68a:	80 83       	st	Z, r24
		}
		state[p] = SCORING;
    c68c:	e8 a1       	ldd	r30, Y+32	; 0x20
    c68e:	f9 a1       	ldd	r31, Y+33	; 0x21
    c690:	e1 59       	subi	r30, 0x91	; 145
    c692:	f1 4f       	sbci	r31, 0xF1	; 241
    c694:	a0 82       	st	Z, r10
		statetimer[p] = SCOREFLASHTIME;
    c696:	e8 a1       	ldd	r30, Y+32	; 0x20
    c698:	f9 a1       	ldd	r31, Y+33	; 0x21
    c69a:	e0 5b       	subi	r30, 0xB0	; 176
    c69c:	f0 4f       	sbci	r31, 0xF0	; 240
    c69e:	a0 82       	st	Z, r10
		stateframe[p] = 0;
    c6a0:	e8 a1       	ldd	r30, Y+32	; 0x20
    c6a2:	f9 a1       	ldd	r31, Y+33	; 0x21
    c6a4:	e1 5a       	subi	r30, 0xA1	; 161
    c6a6:	f1 4f       	sbci	r31, 0xF1	; 241
    c6a8:	10 82       	st	Z, r1
		magicjewelsonscreen--;
    c6aa:	80 91 2f 0e 	lds	r24, 0x0E2F
    c6ae:	81 50       	subi	r24, 0x01	; 1
    c6b0:	80 93 2f 0e 	sts	0x0E2F, r24
    c6b4:	20 c0       	rjmp	.+64     	; 0xc6f6 <DoPlay+0x6fe>
		goto MOVEPIECEDOWNBOTTOM;
	}
		//else not magic jewel

	//HACK HACK HACK THIS IS DONE IN 2 PLACES?????
	if(CheckScore(p)){
    c6b6:	8b 2d       	mov	r24, r11
    c6b8:	45 db       	rcall	.-2422   	; 0xbd44 <CheckScore>
    c6ba:	89 2b       	or	r24, r25
    c6bc:	79 f0       	breq	.+30     	; 0xc6dc <DoPlay+0x6e4>
		//chain[p]++;
		state[p] = SCORING;
    c6be:	e8 a1       	ldd	r30, Y+32	; 0x20
    c6c0:	f9 a1       	ldd	r31, Y+33	; 0x21
    c6c2:	e1 59       	subi	r30, 0x91	; 145
    c6c4:	f1 4f       	sbci	r31, 0xF1	; 241
    c6c6:	a0 82       	st	Z, r10
		statetimer[p] = SCOREFLASHTIME;
    c6c8:	e8 a1       	ldd	r30, Y+32	; 0x20
    c6ca:	f9 a1       	ldd	r31, Y+33	; 0x21
    c6cc:	e0 5b       	subi	r30, 0xB0	; 176
    c6ce:	f0 4f       	sbci	r31, 0xF0	; 240
    c6d0:	a0 82       	st	Z, r10
		stateframe[p] = 0;
    c6d2:	e8 a1       	ldd	r30, Y+32	; 0x20
    c6d4:	f9 a1       	ldd	r31, Y+33	; 0x21
    c6d6:	e1 5a       	subi	r30, 0xA1	; 161
    c6d8:	f1 4f       	sbci	r31, 0xF1	; 241
    c6da:	04 c0       	rjmp	.+8      	; 0xc6e4 <DoPlay+0x6ec>
	}
	else{
		chain[p] = 0;
    c6dc:	e8 a1       	ldd	r30, Y+32	; 0x20
    c6de:	f9 a1       	ldd	r31, Y+33	; 0x21
    c6e0:	e2 59       	subi	r30, 0x92	; 146
    c6e2:	f0 4f       	sbci	r31, 0xF0	; 240
    c6e4:	10 82       	st	Z, r1
		
	//	else
		//	winner = 255;
	}
	
	if(CheckLoss(p)){//see if there are any jewels in the invisible top 3 rows, if so lose
    c6e6:	8b 2d       	mov	r24, r11
    c6e8:	0e 94 ea 56 	call	0xadd4	; 0xadd4 <CheckLoss>
    c6ec:	88 23       	and	r24, r24
    c6ee:	19 f0       	breq	.+6      	; 0xc6f6 <DoPlay+0x6fe>
		SetLosing(p);
    c6f0:	8b 2d       	mov	r24, r11
    c6f2:	0e 94 a4 5a 	call	0xb548	; 0xb548 <SetLosing>
	}
	
MOVEPIECEDOWNBOTTOM:
		TriggerPCM(DROPWAVE,255,138);
    c6f6:	8b e2       	ldi	r24, 0x2B	; 43
    c6f8:	6f ef       	ldi	r22, 0xFF	; 255
    c6fa:	4a e8       	ldi	r20, 0x8A	; 138
    c6fc:	b2 d9       	rcall	.-3228   	; 0xba62 <TriggerPCM>
	if((cursetype[p]&CURSESWAPWELL))//SWAP JEWELS AROUND FOR CURSE(TODO MAGIC JEWEL GLITCHES)
    c6fe:	e8 a1       	ldd	r30, Y+32	; 0x20
    c700:	f9 a1       	ldd	r31, Y+33	; 0x21
    c702:	ec 5a       	subi	r30, 0xAC	; 172
    c704:	f1 4f       	sbci	r31, 0xF1	; 241
    c706:	80 81       	ld	r24, Z
    c708:	80 ff       	sbrs	r24, 0
    c70a:	22 c0       	rjmp	.+68     	; 0xc750 <DoPlay+0x758>
if(well[i] == t)//shouldn't need to &0b00111111 since nothing is half step and doesnt matter if scoring?
well[i] |= SCORINGJEWEL;
}

inline void MirrorWell(uint8_t p){
	uint16_t welloff = p*WELLSIZE;
    c70c:	80 e6       	ldi	r24, 0x60	; 96
    c70e:	90 e0       	ldi	r25, 0x00	; 0
    c710:	68 a1       	ldd	r22, Y+32	; 0x20
    c712:	79 a1       	ldd	r23, Y+33	; 0x21
    c714:	dc 01       	movw	r26, r24
    c716:	6a 9f       	mul	r22, r26
    c718:	c0 01       	movw	r24, r0
    c71a:	6b 9f       	mul	r22, r27
    c71c:	90 0d       	add	r25, r0
    c71e:	7a 9f       	mul	r23, r26
    c720:	90 0d       	add	r25, r0
    c722:	11 24       	eor	r1, r1
    c724:	fc 01       	movw	r30, r24
    c726:	ee 58       	subi	r30, 0x8E	; 142
    c728:	f1 4f       	sbci	r31, 0xF1	; 241
	uint8_t t;
	for(uint8_t y=0;y<16;y++){
    c72a:	9c 01       	movw	r18, r24
    c72c:	2e 52       	subi	r18, 0x2E	; 46
    c72e:	31 4f       	sbci	r19, 0xF1	; 241
		t = well[welloff+0];
    c730:	90 81       	ld	r25, Z
		well[welloff+0] = well[welloff+5];
    c732:	85 81       	ldd	r24, Z+5	; 0x05
    c734:	80 83       	st	Z, r24
		well[welloff+5] = t;
    c736:	95 83       	std	Z+5, r25	; 0x05

		t = well[welloff+1];
    c738:	91 81       	ldd	r25, Z+1	; 0x01
		well[welloff+1] = well[welloff+4];
    c73a:	84 81       	ldd	r24, Z+4	; 0x04
    c73c:	81 83       	std	Z+1, r24	; 0x01
		well[welloff+4] = t;
    c73e:	94 83       	std	Z+4, r25	; 0x04
		
		t = well[welloff+2];
    c740:	92 81       	ldd	r25, Z+2	; 0x02
		well[welloff+2] = well[welloff+3];
    c742:	83 81       	ldd	r24, Z+3	; 0x03
    c744:	82 83       	std	Z+2, r24	; 0x02
		well[welloff+3] = t;
    c746:	93 83       	std	Z+3, r25	; 0x03
    c748:	36 96       	adiw	r30, 0x06	; 6
}

inline void MirrorWell(uint8_t p){
	uint16_t welloff = p*WELLSIZE;
	uint8_t t;
	for(uint8_t y=0;y<16;y++){
    c74a:	e2 17       	cp	r30, r18
    c74c:	f3 07       	cpc	r31, r19
    c74e:	81 f7       	brne	.-32     	; 0xc730 <DoPlay+0x738>
	
MOVEPIECEDOWNBOTTOM:
		TriggerPCM(DROPWAVE,255,138);
	if((cursetype[p]&CURSESWAPWELL))//SWAP JEWELS AROUND FOR CURSE(TODO MAGIC JEWEL GLITCHES)
		MirrorWell(p);
	GeneratePreview(p);//set the next piece in motion
    c750:	8b 2d       	mov	r24, r11
    c752:	0e 94 3e 57 	call	0xae7c	; 0xae7c <GeneratePreview>
    c756:	02 c0       	rjmp	.+4      	; 0xc75c <DoPlay+0x764>
					//blank_piece(p);
					MovePieceDown(p);//todo it is possible to LOSE by having a piece down and moving sideways. it ends up looking like the piece didnt land. MIGHT HAVE FIXED NOW SEE INPUTSTATE:
					//add_piece(p);
				}else
					droptimer[p]--;
    c758:	81 50       	subi	r24, 0x01	; 1
    c75a:	80 83       	st	Z, r24
				if(cursetime[p]){
    c75c:	e8 a1       	ldd	r30, Y+32	; 0x20
    c75e:	f9 a1       	ldd	r31, Y+33	; 0x21
    c760:	ee 0f       	add	r30, r30
    c762:	ff 1f       	adc	r31, r31
    c764:	ed 59       	subi	r30, 0x9D	; 157
    c766:	f1 4f       	sbci	r31, 0xF1	; 241
    c768:	80 81       	ld	r24, Z
    c76a:	91 81       	ldd	r25, Z+1	; 0x01
    c76c:	00 97       	sbiw	r24, 0x00	; 0
    c76e:	99 f0       	breq	.+38     	; 0xc796 <DoPlay+0x79e>
					if(!(--cursetime[p])){
    c770:	01 97       	sbiw	r24, 0x01	; 1
    c772:	91 83       	std	Z+1, r25	; 0x01
    c774:	80 83       	st	Z, r24
    c776:	89 2b       	or	r24, r25
    c778:	71 f4       	brne	.+28     	; 0xc796 <DoPlay+0x79e>
						cursetype[p] = cursetype[p]&128;//keep FLASHINGJEWELCOMING bit
    c77a:	e8 a1       	ldd	r30, Y+32	; 0x20
    c77c:	f9 a1       	ldd	r31, Y+33	; 0x21
    c77e:	ec 5a       	subi	r30, 0xAC	; 172
    c780:	f1 4f       	sbci	r31, 0xF1	; 241
    c782:	80 81       	ld	r24, Z
    c784:	80 78       	andi	r24, 0x80	; 128
    c786:	80 83       	st	Z, r24
						ramtilestate[p] |= NEEDGRIDRAMMED;//make sure the grid is back to normal
    c788:	e8 a1       	ldd	r30, Y+32	; 0x20
    c78a:	f9 a1       	ldd	r31, Y+33	; 0x21
    c78c:	ec 56       	subi	r30, 0x6C	; 108
    c78e:	f0 4f       	sbci	r31, 0xF0	; 240
    c790:	80 81       	ld	r24, Z
    c792:	84 60       	ori	r24, 0x04	; 4
    c794:	80 83       	st	Z, r24

/////////////////////////////////////////////////////////////////////////////////////
//END OF STATE CODE ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/////////////////////////////////////////////////////////////////////////////////////
PROCESSINPUT:
			if(!(state[p] & LOSING)){//don't let piece move sideways the tick after LOSING was set
    c796:	08 a1       	ldd	r16, Y+32	; 0x20
    c798:	19 a1       	ldd	r17, Y+33	; 0x21
    c79a:	01 59       	subi	r16, 0x91	; 145
    c79c:	11 4f       	sbci	r17, 0xF1	; 241
    c79e:	f8 01       	movw	r30, r16
    c7a0:	80 81       	ld	r24, Z
    c7a2:	82 fd       	sbrc	r24, 2
    c7a4:	da c1       	rjmp	.+948    	; 0xcb5a <DoPlay+0xb62>
				blank_piece(p);
    c7a6:	8b 2d       	mov	r24, r11
    c7a8:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>

#ifdef DEBUG
if(state[0] & GETREADY)
	padstate[0] = BTN_START;
#endif
countsss[p]++;
    c7ac:	e8 a1       	ldd	r30, Y+32	; 0x20
    c7ae:	f9 a1       	ldd	r31, Y+33	; 0x21
    c7b0:	e3 57       	subi	r30, 0x73	; 115
    c7b2:	f0 4f       	sbci	r31, 0xF0	; 240
    c7b4:	80 81       	ld	r24, Z
    c7b6:	8f 5f       	subi	r24, 0xFF	; 255
    c7b8:	80 83       	st	Z, r24
for(uint8_t i=0;i<2;i++)
ColumnsPrint3num(14,9+i,countsss[i]);
    c7ba:	40 91 8d 0f 	lds	r20, 0x0F8D
    c7be:	8e e0       	ldi	r24, 0x0E	; 14
    c7c0:	69 e0       	ldi	r22, 0x09	; 9
    c7c2:	50 e0       	ldi	r21, 0x00	; 0
    c7c4:	0e 94 c2 54 	call	0xa984	; 0xa984 <ColumnsPrint3num>
    c7c8:	40 91 8e 0f 	lds	r20, 0x0F8E
    c7cc:	8e e0       	ldi	r24, 0x0E	; 14
    c7ce:	6a e0       	ldi	r22, 0x0A	; 10
    c7d0:	50 e0       	ldi	r21, 0x00	; 0
    c7d2:	0e 94 c2 54 	call	0xa984	; 0xa984 <ColumnsPrint3num>

void DoPlay();
void DoTitle();
void DoDebugMenu();

bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
    c7d6:	a8 a1       	ldd	r26, Y+32	; 0x20
    c7d8:	b9 a1       	ldd	r27, Y+33	; 0x21
    c7da:	aa 0f       	add	r26, r26
    c7dc:	bb 1f       	adc	r27, r27
    c7de:	fd 01       	movw	r30, r26
    c7e0:	ee 5b       	subi	r30, 0xBE	; 190
    c7e2:	f1 4f       	sbci	r31, 0xF1	; 241
    c7e4:	20 81       	ld	r18, Z
    c7e6:	23 fd       	sbrc	r18, 3
    c7e8:	02 c0       	rjmp	.+4      	; 0xc7ee <DoPlay+0x7f6>
    c7ea:	0c 94 0b 73 	jmp	0xe616	; 0xe616 <DoPlay+0x261e>
    c7ee:	a2 5c       	subi	r26, 0xC2	; 194
    c7f0:	b1 4f       	sbci	r27, 0xF1	; 241
    c7f2:	8c 91       	ld	r24, X
    c7f4:	83 ff       	sbrs	r24, 3
    c7f6:	02 c0       	rjmp	.+4      	; 0xc7fc <DoPlay+0x804>
    c7f8:	0c 94 0b 73 	jmp	0xe616	; 0xe616 <DoPlay+0x261e>

	if(StartDown(p)){
		if(state[0]&LOSING || state[1]&LOSING)
    c7fc:	80 91 6f 0e 	lds	r24, 0x0E6F
    c800:	82 fd       	sbrc	r24, 2
    c802:	a8 c1       	rjmp	.+848    	; 0xcb54 <DoPlay+0xb5c>
    c804:	80 91 70 0e 	lds	r24, 0x0E70
    c808:	82 fd       	sbrc	r24, 2
    c80a:	a4 c1       	rjmp	.+840    	; 0xcb54 <DoPlay+0xb5c>
			return;
			
		if(game_state & GS_DEMO){
    c80c:	80 91 6a 0e 	lds	r24, 0x0E6A
    c810:	81 fd       	sbrc	r24, 1
    c812:	4a c0       	rjmp	.+148    	; 0xc8a8 <DoPlay+0x8b0>
			game_state = GS_TITLE;
			return;
		}
		
		if(state[p] & GETREADY || state[p] == GOAHEAD){
    c814:	d8 01       	movw	r26, r16
    c816:	9c 91       	ld	r25, X
    c818:	97 ff       	sbrs	r25, 7
    c81a:	0c c0       	rjmp	.+24     	; 0xc834 <DoPlay+0x83c>
			state[p] = GOAHEAD;
    c81c:	80 ec       	ldi	r24, 0xC0	; 192
    c81e:	8c 93       	st	X, r24
			state[!p] = GOAHEAD;
    c820:	e0 e0       	ldi	r30, 0x00	; 0
    c822:	f0 e0       	ldi	r31, 0x00	; 0
    c824:	bb 20       	and	r11, r11
    c826:	11 f4       	brne	.+4      	; 0xc82c <DoPlay+0x834>
    c828:	e1 e0       	ldi	r30, 0x01	; 1
    c82a:	f0 e0       	ldi	r31, 0x00	; 0
    c82c:	e1 59       	subi	r30, 0x91	; 145
    c82e:	f1 4f       	sbci	r31, 0xF1	; 241
    c830:	80 ec       	ldi	r24, 0xC0	; 192
    c832:	4c c0       	rjmp	.+152    	; 0xc8cc <DoPlay+0x8d4>
			return;
		}

		if(state[p] & GAMEOVER){
    c834:	94 ff       	sbrs	r25, 4
    c836:	11 c0       	rjmp	.+34     	; 0xc85a <DoPlay+0x862>
			game_state = INITIALSTATE;
    c838:	8f ef       	ldi	r24, 0xFF	; 255
    c83a:	80 93 6a 0e 	sts	0x0E6A, r24
			for(uint8_t i=0;i<MAX_PLAYERS;i++)
				state[i] = GETREADY;
    c83e:	b0 e8       	ldi	r27, 0x80	; 128
    c840:	b0 93 6f 0e 	sts	0x0E6F, r27
    c844:	b0 93 70 0e 	sts	0x0E70, r27
				//GeneratePreview(i);
				//level = !level;
				FadeOut(1,true);
    c848:	81 e0       	ldi	r24, 0x01	; 1
    c84a:	61 e0       	ldi	r22, 0x01	; 1
    c84c:	0e 94 9a 52 	call	0xa534	; 0xa534 <FadeOut>
				FadeIn(2,false);
    c850:	82 e0       	ldi	r24, 0x02	; 2
    c852:	60 e0       	ldi	r22, 0x00	; 0
    c854:	0e 94 82 52 	call	0xa504	; 0xa504 <FadeIn>
    c858:	7d c1       	rjmp	.+762    	; 0xcb54 <DoPlay+0xb5c>
				//DoSong();

			return;
		}

		if(state[p] & PAUSED){
    c85a:	96 ff       	sbrs	r25, 6
    c85c:	28 c0       	rjmp	.+80     	; 0xc8ae <DoPlay+0x8b6>
			if(cursorpos == 0){//BACK
    c85e:	80 91 4d 0f 	lds	r24, 0x0F4D
    c862:	88 23       	and	r24, r24
    c864:	09 f5       	brne	.+66     	; 0xc8a8 <DoPlay+0x8b0>
				state[p] ^= PAUSED;
    c866:	e8 a1       	ldd	r30, Y+32	; 0x20
    c868:	f9 a1       	ldd	r31, Y+33	; 0x21
    c86a:	e1 59       	subi	r30, 0x91	; 145
    c86c:	f1 4f       	sbci	r31, 0xF1	; 241
    c86e:	20 e4       	ldi	r18, 0x40	; 64
    c870:	f2 2e       	mov	r15, r18
    c872:	9f 25       	eor	r25, r15
    c874:	90 83       	st	Z, r25
				state[!p] |= PAUSED;
    c876:	e0 e0       	ldi	r30, 0x00	; 0
    c878:	f0 e0       	ldi	r31, 0x00	; 0
    c87a:	bb 20       	and	r11, r11
    c87c:	11 f4       	brne	.+4      	; 0xc882 <DoPlay+0x88a>
    c87e:	e1 e0       	ldi	r30, 0x01	; 1
    c880:	f0 e0       	ldi	r31, 0x00	; 0
    c882:	e1 59       	subi	r30, 0x91	; 145
    c884:	f1 4f       	sbci	r31, 0xF1	; 241
    c886:	80 81       	ld	r24, Z
				state[!p] ^= PAUSED;
    c888:	80 64       	ori	r24, 0x40	; 64
    c88a:	20 e4       	ldi	r18, 0x40	; 64
    c88c:	82 27       	eor	r24, r18
    c88e:	80 83       	st	Z, r24
			return;
		}

	//if(debug){
		//piece[(p*3)+0] = 7;piece[(p*3)+1]=8;piece[(p*3)+2]=9;//make magic jewel
		score[p] = 30;
    c890:	e8 a1       	ldd	r30, Y+32	; 0x20
    c892:	f9 a1       	ldd	r31, Y+33	; 0x21
    c894:	e8 5c       	subi	r30, 0xC8	; 200
    c896:	f0 4f       	sbci	r31, 0xF0	; 240
    c898:	3e e1       	ldi	r19, 0x1E	; 30
    c89a:	30 83       	st	Z, r19
		cursetype[1] = FLASHINGJEWELCOMING;
    c89c:	40 e8       	ldi	r20, 0x80	; 128
    c89e:	40 93 55 0e 	sts	0x0E55, r20
		SummonMagicJewel(p);
    c8a2:	8b 2d       	mov	r24, r11
    c8a4:	2c da       	rcall	.-2984   	; 0xbcfe <SummonMagicJewel>
    c8a6:	56 c1       	rjmp	.+684    	; 0xcb54 <DoPlay+0xb5c>
				state[p] ^= PAUSED;
				state[!p] |= PAUSED;
				state[!p] ^= PAUSED;
			}
			else{
				game_state = GS_TITLE;
    c8a8:	10 92 6a 0e 	sts	0x0E6A, r1
    c8ac:	53 c1       	rjmp	.+678    	; 0xcb54 <DoPlay+0xb5c>
				return;
			}
		}
		else{
			cursorpos = 0;
    c8ae:	10 92 4d 0f 	sts	0x0F4D, r1
			state[p] |= PAUSED;
    c8b2:	90 64       	ori	r25, 0x40	; 64
    c8b4:	d8 01       	movw	r26, r16
    c8b6:	9c 93       	st	X, r25
			state[!p] |= PAUSED;
    c8b8:	e0 e0       	ldi	r30, 0x00	; 0
    c8ba:	f0 e0       	ldi	r31, 0x00	; 0
    c8bc:	bb 20       	and	r11, r11
    c8be:	11 f4       	brne	.+4      	; 0xc8c4 <DoPlay+0x8cc>
    c8c0:	e1 e0       	ldi	r30, 0x01	; 1
    c8c2:	f0 e0       	ldi	r31, 0x00	; 0
    c8c4:	e1 59       	subi	r30, 0x91	; 145
    c8c6:	f1 4f       	sbci	r31, 0xF1	; 241
    c8c8:	80 81       	ld	r24, Z
    c8ca:	80 64       	ori	r24, 0x40	; 64
    c8cc:	80 83       	st	Z, r24
    c8ce:	42 c1       	rjmp	.+644    	; 0xcb54 <DoPlay+0xb5c>
	}

	if(state[p] & (GAMEOVER|GETREADY))
		return;
		
	if((state[p] & PAUSED)){
    c8d0:	96 ff       	sbrs	r25, 6
    c8d2:	1d c0       	rjmp	.+58     	; 0xc90e <DoPlay+0x916>
		if(!p && (UpDown(0) || DownDown(0)))
    c8d4:	bb 20       	and	r11, r11
    c8d6:	09 f0       	breq	.+2      	; 0xc8da <DoPlay+0x8e2>
    c8d8:	3d c1       	rjmp	.+634    	; 0xcb54 <DoPlay+0xb5c>
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
    c8da:	90 91 42 0e 	lds	r25, 0x0E42
    c8de:	94 fd       	sbrc	r25, 4
    c8e0:	02 c0       	rjmp	.+4      	; 0xc8e6 <DoPlay+0x8ee>
    c8e2:	0c 94 17 73 	jmp	0xe62e	; 0xe62e <DoPlay+0x2636>
    c8e6:	80 91 3e 0e 	lds	r24, 0x0E3E
    c8ea:	84 ff       	sbrs	r24, 4
    c8ec:	02 c0       	rjmp	.+4      	; 0xc8f2 <DoPlay+0x8fa>
    c8ee:	0c 94 17 73 	jmp	0xe62e	; 0xe62e <DoPlay+0x2636>
    c8f2:	04 c0       	rjmp	.+8      	; 0xc8fc <DoPlay+0x904>
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
    c8f4:	80 91 3e 0e 	lds	r24, 0x0E3E
    c8f8:	85 fd       	sbrc	r24, 5
    c8fa:	2c c1       	rjmp	.+600    	; 0xcb54 <DoPlay+0xb5c>
			cursorpos = !cursorpos;
    c8fc:	90 e0       	ldi	r25, 0x00	; 0
    c8fe:	80 91 4d 0f 	lds	r24, 0x0F4D
    c902:	88 23       	and	r24, r24
    c904:	09 f4       	brne	.+2      	; 0xc908 <DoPlay+0x910>
    c906:	91 e0       	ldi	r25, 0x01	; 1
    c908:	90 93 4d 0f 	sts	0x0F4D, r25
    c90c:	23 c1       	rjmp	.+582    	; 0xcb54 <DoPlay+0xb5c>
		return;
	}

	if(!(cursetype[p]&CURSENOROTATE) && YDown(p)){
    c90e:	e8 a1       	ldd	r30, Y+32	; 0x20
    c910:	f9 a1       	ldd	r31, Y+33	; 0x21
    c912:	ec 5a       	subi	r30, 0xAC	; 172
    c914:	f1 4f       	sbci	r31, 0xF1	; 241
    c916:	80 81       	ld	r24, Z
    c918:	83 fd       	sbrc	r24, 3
    c91a:	2c c0       	rjmp	.+88     	; 0xc974 <DoPlay+0x97c>
bool RightHeld(uint8_t p){return (padstate[p] & BTN_RIGHT);}
bool DownHeld(uint8_t p){return (padstate[p] & BTN_DOWN);}
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
bool XDown(uint8_t p){return ((padstate[p] & BTN_X) && !(oldpadstate[p] & BTN_X));}
bool YDown(uint8_t p){return ((padstate[p] & BTN_Y) && !(oldpadstate[p] & BTN_Y));}
    c91c:	21 ff       	sbrs	r18, 1
    c91e:	2a c0       	rjmp	.+84     	; 0xc974 <DoPlay+0x97c>
    c920:	28 a1       	ldd	r18, Y+32	; 0x20
    c922:	39 a1       	ldd	r19, Y+33	; 0x21
    c924:	22 0f       	add	r18, r18
    c926:	33 1f       	adc	r19, r19
    c928:	f9 01       	movw	r30, r18
    c92a:	e2 5c       	subi	r30, 0xC2	; 194
    c92c:	f1 4f       	sbci	r31, 0xF1	; 241
    c92e:	80 81       	ld	r24, Z
    c930:	81 fd       	sbrc	r24, 1
    c932:	20 c0       	rjmp	.+64     	; 0xc974 <DoPlay+0x97c>
	piecex[p]++;
	return true;
}

inline void RotatePiece(uint8_t p){
	uint8_t t = piece[(p*3)];
    c934:	e8 a1       	ldd	r30, Y+32	; 0x20
    c936:	f9 a1       	ldd	r31, Y+33	; 0x21
    c938:	e2 0f       	add	r30, r18
    c93a:	f3 1f       	adc	r31, r19
    c93c:	af 01       	movw	r20, r30
    c93e:	4d 5b       	subi	r20, 0xBD	; 189
    c940:	50 4f       	sbci	r21, 0xF0	; 240
    c942:	da 01       	movw	r26, r20
    c944:	9c 91       	ld	r25, X
	piece[(p*3)] = piece[(p*3)+2];
    c946:	9f 01       	movw	r18, r30
    c948:	2b 5b       	subi	r18, 0xBB	; 187
    c94a:	30 4f       	sbci	r19, 0xF0	; 240
    c94c:	d9 01       	movw	r26, r18
    c94e:	8c 91       	ld	r24, X
    c950:	da 01       	movw	r26, r20
    c952:	8c 93       	st	X, r24
	piece[(p*3)+2] = piece[(p*3)+1];
    c954:	ec 5b       	subi	r30, 0xBC	; 188
    c956:	f0 4f       	sbci	r31, 0xF0	; 240
    c958:	80 81       	ld	r24, Z
    c95a:	d9 01       	movw	r26, r18
    c95c:	8c 93       	st	X, r24
	piece[(p*3)+1] = t; 
    c95e:	90 83       	st	Z, r25
	if(++piecerot[p] > 2)
    c960:	e8 a1       	ldd	r30, Y+32	; 0x20
    c962:	f9 a1       	ldd	r31, Y+33	; 0x21
    c964:	e8 59       	subi	r30, 0x98	; 152
    c966:	f0 4f       	sbci	r31, 0xF0	; 240
    c968:	80 81       	ld	r24, Z
    c96a:	8f 5f       	subi	r24, 0xFF	; 255
    c96c:	80 83       	st	Z, r24
    c96e:	83 30       	cpi	r24, 0x03	; 3
    c970:	08 f0       	brcs	.+2      	; 0xc974 <DoPlay+0x97c>
		piecerot[p] = 0;
    c972:	10 82       	st	Z, r1
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
bool LeftHeld(uint8_t p){return (padstate[p] & BTN_LEFT);}
bool RightHeld(uint8_t p){return (padstate[p] & BTN_RIGHT);}
bool DownHeld(uint8_t p){return (padstate[p] & BTN_DOWN);}
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
    c974:	a8 a1       	ldd	r26, Y+32	; 0x20
    c976:	b9 a1       	ldd	r27, Y+33	; 0x21
    c978:	aa 0f       	add	r26, r26
    c97a:	bb 1f       	adc	r27, r27
    c97c:	fd 01       	movw	r30, r26
    c97e:	ee 5b       	subi	r30, 0xBE	; 190
    c980:	f1 4f       	sbci	r31, 0xF1	; 241
    c982:	20 81       	ld	r18, Z
    c984:	31 81       	ldd	r19, Z+1	; 0x01
    c986:	20 fd       	sbrc	r18, 0
    c988:	02 c0       	rjmp	.+4      	; 0xc98e <DoPlay+0x996>
    c98a:	0c 94 1d 73 	jmp	0xe63a	; 0xe63a <DoPlay+0x2642>
    c98e:	a2 5c       	subi	r26, 0xC2	; 194
    c990:	b1 4f       	sbci	r27, 0xF1	; 241
    c992:	8c 91       	ld	r24, X
    c994:	80 ff       	sbrs	r24, 0
    c996:	02 c0       	rjmp	.+4      	; 0xc99c <DoPlay+0x9a4>
    c998:	0c 94 1d 73 	jmp	0xe63a	; 0xe63a <DoPlay+0x2642>
    c99c:	17 c0       	rjmp	.+46     	; 0xc9cc <DoPlay+0x9d4>
bool XDown(uint8_t p){return ((padstate[p] & BTN_X) && !(oldpadstate[p] & BTN_X));}
bool YDown(uint8_t p){return ((padstate[p] & BTN_Y) && !(oldpadstate[p] & BTN_Y));}
bool LSDown(uint8_t p){return ((padstate[p] & BTN_SL) && !(oldpadstate[p] & BTN_SL));}
bool RSDown(uint8_t p){return ((padstate[p] & BTN_SR) && !(oldpadstate[p] & BTN_SR));}
    c99e:	e8 a1       	ldd	r30, Y+32	; 0x20
    c9a0:	f9 a1       	ldd	r31, Y+33	; 0x21
    c9a2:	ee 0f       	add	r30, r30
    c9a4:	ff 1f       	adc	r31, r31
    c9a6:	e2 5c       	subi	r30, 0xC2	; 194
    c9a8:	f1 4f       	sbci	r31, 0xF1	; 241
    c9aa:	80 81       	ld	r24, Z
    c9ac:	91 81       	ldd	r25, Z+1	; 0x01
    c9ae:	93 ff       	sbrs	r25, 3
    c9b0:	02 c0       	rjmp	.+4      	; 0xc9b6 <DoPlay+0x9be>
    c9b2:	0c 94 21 73 	jmp	0xe642	; 0xe642 <DoPlay+0x264a>
    c9b6:	0a c0       	rjmp	.+20     	; 0xc9cc <DoPlay+0x9d4>
bool DownHeld(uint8_t p){return (padstate[p] & BTN_DOWN);}
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
bool XDown(uint8_t p){return ((padstate[p] & BTN_X) && !(oldpadstate[p] & BTN_X));}
bool YDown(uint8_t p){return ((padstate[p] & BTN_Y) && !(oldpadstate[p] & BTN_Y));}
bool LSDown(uint8_t p){return ((padstate[p] & BTN_SL) && !(oldpadstate[p] & BTN_SL));}
    c9b8:	e8 a1       	ldd	r30, Y+32	; 0x20
    c9ba:	f9 a1       	ldd	r31, Y+33	; 0x21
    c9bc:	ee 0f       	add	r30, r30
    c9be:	ff 1f       	adc	r31, r31
    c9c0:	e2 5c       	subi	r30, 0xC2	; 194
    c9c2:	f1 4f       	sbci	r31, 0xF1	; 241
    c9c4:	80 81       	ld	r24, Z
    c9c6:	91 81       	ldd	r25, Z+1	; 0x01
    c9c8:	92 fd       	sbrc	r25, 2
    c9ca:	34 c0       	rjmp	.+104    	; 0xca34 <DoPlay+0xa3c>
		RotatePiece(p);
		//CrashBarUp(3,0);
	}

	if(BDown(p) || RSDown(p) || LSDown(p)){
		Attack(!p);
    c9cc:	40 e0       	ldi	r20, 0x00	; 0
    c9ce:	bb 20       	and	r11, r11
    c9d0:	09 f4       	brne	.+2      	; 0xc9d4 <DoPlay+0x9dc>
    c9d2:	41 e0       	ldi	r20, 0x01	; 1
}

inline void Attack(uint8_t target){
	uint8_t p = !target;
	uint8_t s = score[p]/10;
    c9d4:	20 e0       	ldi	r18, 0x00	; 0
    c9d6:	30 e0       	ldi	r19, 0x00	; 0
    c9d8:	44 23       	and	r20, r20
    c9da:	11 f4       	brne	.+4      	; 0xc9e0 <DoPlay+0x9e8>
    c9dc:	21 e0       	ldi	r18, 0x01	; 1
    c9de:	30 e0       	ldi	r19, 0x00	; 0
    c9e0:	f9 01       	movw	r30, r18
    c9e2:	e8 5c       	subi	r30, 0xC8	; 200
    c9e4:	f0 4f       	sbci	r31, 0xF0	; 240
    c9e6:	80 81       	ld	r24, Z
    c9e8:	6a e0       	ldi	r22, 0x0A	; 10
    c9ea:	0e 94 a8 73 	call	0xe750	; 0xe750 <__udivmodqi4>
    c9ee:	98 2f       	mov	r25, r24
	
	if(crashheight[p]){
    c9f0:	f9 01       	movw	r30, r18
    c9f2:	e2 58       	subi	r30, 0x82	; 130
    c9f4:	f0 4f       	sbci	r31, 0xF0	; 240
    c9f6:	e0 81       	ld	r30, Z
    c9f8:	ee 23       	and	r30, r30
    c9fa:	59 f0       	breq	.+22     	; 0xca12 <DoPlay+0xa1a>
    c9fc:	d9 01       	movw	r26, r18
    c9fe:	a1 57       	subi	r26, 0x71	; 113
    ca00:	b0 4f       	sbci	r27, 0xF0	; 240
		if(crashheight[p] >= s){
    ca02:	e8 17       	cp	r30, r24
    ca04:	20 f0       	brcs	.+8      	; 0xca0e <DoPlay+0xa16>
			crashcomingdown[p] += s;
    ca06:	8c 91       	ld	r24, X
    ca08:	89 0f       	add	r24, r25
    ca0a:	8c 93       	st	X, r24
    ca0c:	0b c0       	rjmp	.+22     	; 0xca24 <DoPlay+0xa2c>
			s = 0;
		}else{//crashheight is less
			crashcomingdown[p] = crashheight[p];
    ca0e:	ec 93       	st	X, r30
			s -= crashheight[p];
    ca10:	9e 1b       	sub	r25, r30
		}
	}
	if(s)
    ca12:	99 23       	and	r25, r25
    ca14:	39 f0       	breq	.+14     	; 0xca24 <DoPlay+0xa2c>
		crashcomingup[target] += s;
    ca16:	e4 2f       	mov	r30, r20
    ca18:	f0 e0       	ldi	r31, 0x00	; 0
    ca1a:	e0 5c       	subi	r30, 0xC0	; 192
    ca1c:	f0 4f       	sbci	r31, 0xF0	; 240
    ca1e:	80 81       	ld	r24, Z
    ca20:	89 0f       	add	r24, r25
    ca22:	80 83       	st	Z, r24
		
	score[p] = score[p]%10;
    ca24:	f9 01       	movw	r30, r18
    ca26:	e8 5c       	subi	r30, 0xC8	; 200
    ca28:	f0 4f       	sbci	r31, 0xF0	; 240
    ca2a:	80 81       	ld	r24, Z
    ca2c:	6a e0       	ldi	r22, 0x0A	; 10
    ca2e:	0e 94 a8 73 	call	0xe750	; 0xe750 <__udivmodqi4>
    ca32:	90 83       	st	Z, r25
	}

	uint16_t oldp = padstate[p];
    ca34:	a8 a1       	ldd	r26, Y+32	; 0x20
    ca36:	b9 a1       	ldd	r27, Y+33	; 0x21
    ca38:	aa 0f       	add	r26, r26
    ca3a:	bb 1f       	adc	r27, r27
    ca3c:	ae 5b       	subi	r26, 0xBE	; 190
    ca3e:	b1 4f       	sbci	r27, 0xF1	; 241
    ca40:	ed 90       	ld	r14, X+
    ca42:	fc 90       	ld	r15, X
    ca44:	11 97       	sbiw	r26, 0x01	; 1
	if((cursetype[p]&CURSESWAPCONTROLS)){
    ca46:	e8 a1       	ldd	r30, Y+32	; 0x20
    ca48:	f9 a1       	ldd	r31, Y+33	; 0x21
    ca4a:	ec 5a       	subi	r30, 0xAC	; 172
    ca4c:	f1 4f       	sbci	r31, 0xF1	; 241
    ca4e:	80 81       	ld	r24, Z
    ca50:	81 ff       	sbrs	r24, 1
    ca52:	11 c0       	rjmp	.+34     	; 0xca76 <DoPlay+0xa7e>
		if(padstate[p] & BTN_LEFT){
    ca54:	e6 fe       	sbrs	r14, 6
    ca56:	06 c0       	rjmp	.+12     	; 0xca64 <DoPlay+0xa6c>
			padstate[p] ^= BTN_LEFT;
    ca58:	80 e4       	ldi	r24, 0x40	; 64
    ca5a:	90 e0       	ldi	r25, 0x00	; 0
    ca5c:	8e 25       	eor	r24, r14
    ca5e:	9f 25       	eor	r25, r15
			padstate[p] |= BTN_RIGHT;
    ca60:	80 68       	ori	r24, 0x80	; 128
    ca62:	07 c0       	rjmp	.+14     	; 0xca72 <DoPlay+0xa7a>
		}
		else if(padstate[p] & BTN_RIGHT){
    ca64:	e7 fe       	sbrs	r14, 7
    ca66:	07 c0       	rjmp	.+14     	; 0xca76 <DoPlay+0xa7e>
			padstate[p] ^= BTN_RIGHT;
    ca68:	80 e8       	ldi	r24, 0x80	; 128
    ca6a:	90 e0       	ldi	r25, 0x00	; 0
    ca6c:	8e 25       	eor	r24, r14
    ca6e:	9f 25       	eor	r25, r15
			padstate[p] |= BTN_LEFT;
    ca70:	80 64       	ori	r24, 0x40	; 64
    ca72:	8d 93       	st	X+, r24
    ca74:	9c 93       	st	X, r25
		}
	}
	if(padstate[p] & BTN_LEFT){
    ca76:	e8 a1       	ldd	r30, Y+32	; 0x20
    ca78:	f9 a1       	ldd	r31, Y+33	; 0x21
    ca7a:	ee 0f       	add	r30, r30
    ca7c:	ff 1f       	adc	r31, r31
    ca7e:	ee 5b       	subi	r30, 0xBE	; 190
    ca80:	f1 4f       	sbci	r31, 0xF1	; 241
    ca82:	80 81       	ld	r24, Z
    ca84:	86 ff       	sbrs	r24, 6
    ca86:	25 c0       	rjmp	.+74     	; 0xcad2 <DoPlay+0xada>
		if(++sideheld[p] == 1 || sideheld[p] == 5 || sideheld[p] > 8)
    ca88:	e8 a1       	ldd	r30, Y+32	; 0x20
    ca8a:	f9 a1       	ldd	r31, Y+33	; 0x21
    ca8c:	ed 5a       	subi	r30, 0xAD	; 173
    ca8e:	f0 4f       	sbci	r31, 0xF0	; 240
    ca90:	80 81       	ld	r24, Z
    ca92:	8f 5f       	subi	r24, 0xFF	; 255
    ca94:	80 83       	st	Z, r24
    ca96:	81 30       	cpi	r24, 0x01	; 1
    ca98:	29 f0       	breq	.+10     	; 0xcaa4 <DoPlay+0xaac>
    ca9a:	85 30       	cpi	r24, 0x05	; 5
    ca9c:	19 f0       	breq	.+6      	; 0xcaa4 <DoPlay+0xaac>
    ca9e:	89 30       	cpi	r24, 0x09	; 9
    caa0:	08 f4       	brcc	.+2      	; 0xcaa4 <DoPlay+0xaac>
    caa2:	49 c0       	rjmp	.+146    	; 0xcb36 <DoPlay+0xb3e>
	for(uint8_t i=0;i<3*6;i++)
		well[(p*WELLSIZE)+i] = 0;
}

inline bool MovePieceLeft(uint8_t p){
	if(!piecex[p] || !open_for_piece(piecex[p]-1,piecey[p],p)){
    caa4:	08 a1       	ldd	r16, Y+32	; 0x20
    caa6:	19 a1       	ldd	r17, Y+33	; 0x21
    caa8:	00 59       	subi	r16, 0x90	; 144
    caaa:	10 4f       	sbci	r17, 0xF0	; 240
    caac:	f8 01       	movw	r30, r16
    caae:	80 81       	ld	r24, Z
    cab0:	88 23       	and	r24, r24
    cab2:	89 f1       	breq	.+98     	; 0xcb16 <DoPlay+0xb1e>
    cab4:	e8 a1       	ldd	r30, Y+32	; 0x20
    cab6:	f9 a1       	ldd	r31, Y+33	; 0x21
    cab8:	e3 59       	subi	r30, 0x93	; 147
    caba:	f1 4f       	sbci	r31, 0xF1	; 241
    cabc:	81 50       	subi	r24, 0x01	; 1
    cabe:	60 81       	ld	r22, Z
    cac0:	4b 2d       	mov	r20, r11
    cac2:	0e 94 2f 54 	call	0xa85e	; 0xa85e <open_for_piece>
    cac6:	88 23       	and	r24, r24
    cac8:	31 f1       	breq	.+76     	; 0xcb16 <DoPlay+0xb1e>
		if(p && cpustate)
			cpustate |= CPUMOVEBLOCKED;
		return false;
	}		
//	blank_piece(p);piece is blanked before function is called
	piecex[p]--;
    caca:	d8 01       	movw	r26, r16
    cacc:	8c 91       	ld	r24, X
    cace:	81 50       	subi	r24, 0x01	; 1
    cad0:	2f c0       	rjmp	.+94     	; 0xcb30 <DoPlay+0xb38>
    cad2:	e8 a1       	ldd	r30, Y+32	; 0x20
    cad4:	f9 a1       	ldd	r31, Y+33	; 0x21
    cad6:	ed 5a       	subi	r30, 0xAD	; 173
    cad8:	f0 4f       	sbci	r31, 0xF0	; 240
			MovePieceLeft(p);
	}
	else if(padstate[p] & BTN_RIGHT){
    cada:	87 ff       	sbrs	r24, 7
    cadc:	2b c0       	rjmp	.+86     	; 0xcb34 <DoPlay+0xb3c>
		if(++sideheld[p] == 1 || sideheld[p] == 5 || sideheld[p] > 8)
    cade:	80 81       	ld	r24, Z
    cae0:	8f 5f       	subi	r24, 0xFF	; 255
    cae2:	80 83       	st	Z, r24
    cae4:	81 30       	cpi	r24, 0x01	; 1
    cae6:	21 f0       	breq	.+8      	; 0xcaf0 <DoPlay+0xaf8>
    cae8:	85 30       	cpi	r24, 0x05	; 5
    caea:	11 f0       	breq	.+4      	; 0xcaf0 <DoPlay+0xaf8>
    caec:	89 30       	cpi	r24, 0x09	; 9
    caee:	18 f1       	brcs	.+70     	; 0xcb36 <DoPlay+0xb3e>
	return true;
}

inline bool MovePieceRight(uint8_t p){
	if(piecex[p] == 5 || !open_for_piece(piecex[p]+1,piecey[p],p)){
    caf0:	08 a1       	ldd	r16, Y+32	; 0x20
    caf2:	19 a1       	ldd	r17, Y+33	; 0x21
    caf4:	00 59       	subi	r16, 0x90	; 144
    caf6:	10 4f       	sbci	r17, 0xF0	; 240
    caf8:	f8 01       	movw	r30, r16
    cafa:	80 81       	ld	r24, Z
    cafc:	85 30       	cpi	r24, 0x05	; 5
    cafe:	59 f0       	breq	.+22     	; 0xcb16 <DoPlay+0xb1e>
    cb00:	e8 a1       	ldd	r30, Y+32	; 0x20
    cb02:	f9 a1       	ldd	r31, Y+33	; 0x21
    cb04:	e3 59       	subi	r30, 0x93	; 147
    cb06:	f1 4f       	sbci	r31, 0xF1	; 241
    cb08:	8f 5f       	subi	r24, 0xFF	; 255
    cb0a:	60 81       	ld	r22, Z
    cb0c:	4b 2d       	mov	r20, r11
    cb0e:	0e 94 2f 54 	call	0xa85e	; 0xa85e <open_for_piece>
    cb12:	88 23       	and	r24, r24
    cb14:	51 f4       	brne	.+20     	; 0xcb2a <DoPlay+0xb32>
		if(p && cpustate)
    cb16:	bb 20       	and	r11, r11
    cb18:	71 f0       	breq	.+28     	; 0xcb36 <DoPlay+0xb3e>
    cb1a:	80 91 6b 0e 	lds	r24, 0x0E6B
    cb1e:	88 23       	and	r24, r24
    cb20:	51 f0       	breq	.+20     	; 0xcb36 <DoPlay+0xb3e>
			cpustate |= CPUMOVEBLOCKED;
    cb22:	80 64       	ori	r24, 0x40	; 64
    cb24:	80 93 6b 0e 	sts	0x0E6B, r24
    cb28:	06 c0       	rjmp	.+12     	; 0xcb36 <DoPlay+0xb3e>
		return false;
	}		
//	blank_piece(p);piece is blanked before function is called
	piecex[p]++;
    cb2a:	d8 01       	movw	r26, r16
    cb2c:	8c 91       	ld	r24, X
    cb2e:	8f 5f       	subi	r24, 0xFF	; 255
    cb30:	8c 93       	st	X, r24
    cb32:	01 c0       	rjmp	.+2      	; 0xcb36 <DoPlay+0xb3e>
			MovePieceRight(p);
	}
	else
		sideheld[p] = 0;
    cb34:	10 82       	st	Z, r1
		
	padstate[p] = oldp;//undo curse control changes
    cb36:	e8 a1       	ldd	r30, Y+32	; 0x20
    cb38:	f9 a1       	ldd	r31, Y+33	; 0x21
    cb3a:	ee 0f       	add	r30, r30
    cb3c:	ff 1f       	adc	r31, r31
    cb3e:	ee 5b       	subi	r30, 0xBE	; 190
    cb40:	f1 4f       	sbci	r31, 0xF1	; 241
    cb42:	f1 82       	std	Z+1, r15	; 0x01
    cb44:	e0 82       	st	Z, r14

	if(DownHeld(p)){
    cb46:	e5 fe       	sbrs	r14, 5
    cb48:	05 c0       	rjmp	.+10     	; 0xcb54 <DoPlay+0xb5c>
		//if(downletup[p])
			droptimer[p] = 0;
    cb4a:	e8 a1       	ldd	r30, Y+32	; 0x20
    cb4c:	f9 a1       	ldd	r31, Y+33	; 0x21
    cb4e:	ea 5b       	subi	r30, 0xBA	; 186
    cb50:	f1 4f       	sbci	r31, 0xF1	; 241
    cb52:	10 82       	st	Z, r1
				ProcessInputState(p);
				add_piece(p);
    cb54:	8b 2d       	mov	r24, r11
    cb56:	0e 94 c8 53 	call	0xa790	; 0xa790 <add_piece>
			}			

			if(game_state == INITIALSTATE)//we were in game over and start was pushed
    cb5a:	80 91 6a 0e 	lds	r24, 0x0E6A
    cb5e:	8f 3f       	cpi	r24, 0xFF	; 255
    cb60:	11 f4       	brne	.+4      	; 0xcb66 <DoPlay+0xb6e>
    cb62:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
		MirrorWell(p);
	GeneratePreview(p);//set the next piece in motion
}

inline void ProcessCrash(uint8_t p){
	blank_piece(p);
    cb66:	8b 2d       	mov	r24, r11
    cb68:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
	
	//TODO SUBTRACT THE TWO FIRST...
	if(crashcomingup[p]){
    cb6c:	a8 a1       	ldd	r26, Y+32	; 0x20
    cb6e:	b9 a1       	ldd	r27, Y+33	; 0x21
    cb70:	a0 5c       	subi	r26, 0xC0	; 192
    cb72:	b0 4f       	sbci	r27, 0xF0	; 240
    cb74:	8c 91       	ld	r24, X
    cb76:	88 23       	and	r24, r24
    cb78:	91 f0       	breq	.+36     	; 0xcb9e <DoPlay+0xba6>
		if(crashcomingdown[p] > crashcomingup[p]){
    cb7a:	e8 a1       	ldd	r30, Y+32	; 0x20
    cb7c:	f9 a1       	ldd	r31, Y+33	; 0x21
    cb7e:	e1 57       	subi	r30, 0x71	; 113
    cb80:	f0 4f       	sbci	r31, 0xF0	; 240
    cb82:	90 81       	ld	r25, Z
    cb84:	89 17       	cp	r24, r25
    cb86:	18 f4       	brcc	.+6      	; 0xcb8e <DoPlay+0xb96>
			crashcomingdown[p] -= crashcomingup[p];
    cb88:	98 1b       	sub	r25, r24
    cb8a:	90 83       	st	Z, r25
    cb8c:	07 c0       	rjmp	.+14     	; 0xcb9c <DoPlay+0xba4>
			crashcomingup[p] = 0;
		}
		else if(crashcomingup[p] > crashcomingdown[p]){
    cb8e:	98 17       	cp	r25, r24
    cb90:	20 f4       	brcc	.+8      	; 0xcb9a <DoPlay+0xba2>
			crashcomingup[p] -= crashcomingdown[p];
    cb92:	89 1b       	sub	r24, r25
    cb94:	8c 93       	st	X, r24
			crashcomingdown[p] = 0;
    cb96:	10 82       	st	Z, r1
    cb98:	02 c0       	rjmp	.+4      	; 0xcb9e <DoPlay+0xba6>
		}
		else{
			crashcomingup[p] = crashcomingdown[p] = 0;
    cb9a:	10 82       	st	Z, r1
    cb9c:	1c 92       	st	X, r1
		}
	}
	
	if(crashheight[p] && crashcomingdown[p]){
    cb9e:	e8 a1       	ldd	r30, Y+32	; 0x20
    cba0:	f9 a1       	ldd	r31, Y+33	; 0x21
    cba2:	e2 58       	subi	r30, 0x82	; 130
    cba4:	f0 4f       	sbci	r31, 0xF0	; 240
    cba6:	80 81       	ld	r24, Z
    cba8:	88 23       	and	r24, r24
    cbaa:	89 f0       	breq	.+34     	; 0xcbce <DoPlay+0xbd6>
    cbac:	08 a1       	ldd	r16, Y+32	; 0x20
    cbae:	19 a1       	ldd	r17, Y+33	; 0x21
    cbb0:	01 57       	subi	r16, 0x71	; 113
    cbb2:	10 4f       	sbci	r17, 0xF0	; 240
    cbb4:	f8 01       	movw	r30, r16
    cbb6:	80 81       	ld	r24, Z
    cbb8:	88 23       	and	r24, r24
    cbba:	49 f0       	breq	.+18     	; 0xcbce <DoPlay+0xbd6>
		CrashBarDown(crashcomingdown[p],p,0);
    cbbc:	6b 2d       	mov	r22, r11
    cbbe:	40 e0       	ldi	r20, 0x00	; 0
    cbc0:	0e 94 58 5d 	call	0xbab0	; 0xbab0 <CrashBarDown>
		crashcomingdown[p] = 0;
    cbc4:	d8 01       	movw	r26, r16
    cbc6:	1c 92       	st	X, r1
		add_piece(p);
    cbc8:	8b 2d       	mov	r24, r11
    cbca:	0e 94 c8 53 	call	0xa790	; 0xa790 <add_piece>
	}
	if(crashcomingup[p]){
    cbce:	e8 a1       	ldd	r30, Y+32	; 0x20
    cbd0:	f9 a1       	ldd	r31, Y+33	; 0x21
    cbd2:	e0 5c       	subi	r30, 0xC0	; 192
    cbd4:	f0 4f       	sbci	r31, 0xF0	; 240
    cbd6:	80 81       	ld	r24, Z
    cbd8:	88 23       	and	r24, r24
    cbda:	09 f4       	brne	.+2      	; 0xcbde <DoPlay+0xbe6>
    cbdc:	cc c0       	rjmp	.+408    	; 0xcd76 <DoPlay+0xd7e>
		for(uint8_t i=0;i<3;i++){
			if(piece[i+(p*3)] & FLASHINGJEWEL){//eliminate flashing jewels correctly
    cbde:	28 a1       	ldd	r18, Y+32	; 0x20
    cbe0:	39 a1       	ldd	r19, Y+33	; 0x21
    cbe2:	22 0f       	add	r18, r18
    cbe4:	33 1f       	adc	r19, r19
    cbe6:	e8 a1       	ldd	r30, Y+32	; 0x20
    cbe8:	f9 a1       	ldd	r31, Y+33	; 0x21
    cbea:	2e 0f       	add	r18, r30
    cbec:	3f 1f       	adc	r19, r31
    cbee:	f9 01       	movw	r30, r18
    cbf0:	ed 5b       	subi	r30, 0xBD	; 189
    cbf2:	f0 4f       	sbci	r31, 0xF0	; 240
    cbf4:	90 e0       	ldi	r25, 0x00	; 0
				piece[i+(p*3)] ^= FLASHINGJEWEL;
				flashingjeweltimer[p] = 0;
    cbf6:	a8 a1       	ldd	r26, Y+32	; 0x20
    cbf8:	b9 a1       	ldd	r27, Y+33	; 0x21
    cbfa:	ae 58       	subi	r26, 0x8E	; 142
    cbfc:	b0 4f       	sbci	r27, 0xF0	; 240
		crashcomingdown[p] = 0;
		add_piece(p);
	}
	if(crashcomingup[p]){
		for(uint8_t i=0;i<3;i++){
			if(piece[i+(p*3)] & FLASHINGJEWEL){//eliminate flashing jewels correctly
    cbfe:	80 81       	ld	r24, Z
    cc00:	85 ff       	sbrs	r24, 5
    cc02:	05 c0       	rjmp	.+10     	; 0xcc0e <DoPlay+0xc16>
				piece[i+(p*3)] ^= FLASHINGJEWEL;
    cc04:	30 e2       	ldi	r19, 0x20	; 32
    cc06:	f3 2e       	mov	r15, r19
    cc08:	8f 25       	eor	r24, r15
    cc0a:	80 83       	st	Z, r24
				flashingjeweltimer[p] = 0;
    cc0c:	1c 92       	st	X, r1
		CrashBarDown(crashcomingdown[p],p,0);
		crashcomingdown[p] = 0;
		add_piece(p);
	}
	if(crashcomingup[p]){
		for(uint8_t i=0;i<3;i++){
    cc0e:	9f 5f       	subi	r25, 0xFF	; 255
    cc10:	31 96       	adiw	r30, 0x01	; 1
    cc12:	93 30       	cpi	r25, 0x03	; 3
    cc14:	a1 f7       	brne	.-24     	; 0xcbfe <DoPlay+0xc06>



inline void SetCrashedPieces(uint8_t p){
	//flashing jewel flag is already eliminated by the time we get here
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
    cc16:	4d e2       	ldi	r20, 0x2D	; 45
    cc18:	40 93 55 0f 	sts	0x0F55, r20
	for(uint8_t i=p*3;i<(p*3)+3;i++){
    cc1c:	d2 2e       	mov	r13, r18
    cc1e:	88 a1       	ldd	r24, Y+32	; 0x20
    cc20:	99 a1       	ldd	r25, Y+33	; 0x21
    cc22:	01 96       	adiw	r24, 0x01	; 1
    cc24:	7c 01       	movw	r14, r24
    cc26:	ee 0c       	add	r14, r14
    cc28:	ff 1c       	adc	r15, r15
    cc2a:	e8 0e       	add	r14, r24
    cc2c:	f9 1e       	adc	r15, r25
		crashedpiecex[i] = (piecex[p]<<4)+(p*(16<<3));
    cc2e:	68 a1       	ldd	r22, Y+32	; 0x20
    cc30:	79 a1       	ldd	r23, Y+33	; 0x21
    cc32:	76 95       	lsr	r23
    cc34:	76 2f       	mov	r23, r22
    cc36:	66 27       	eor	r22, r22
    cc38:	77 95       	ror	r23
    cc3a:	67 95       	ror	r22
    cc3c:	7b 8f       	std	Y+27, r23	; 0x1b
    cc3e:	6a 8f       	std	Y+26, r22	; 0x1a
		crashedpiecey[i] = ((((piecey[p]-2)<<1)+((bool)halfstep[p]))<<3)+((i-(p*3))*2);
    cc40:	88 a1       	ldd	r24, Y+32	; 0x20
    cc42:	99 a1       	ldd	r25, Y+33	; 0x21
    cc44:	88 0f       	add	r24, r24
    cc46:	99 1f       	adc	r25, r25
    cc48:	a8 a1       	ldd	r26, Y+32	; 0x20
    cc4a:	b9 a1       	ldd	r27, Y+33	; 0x21
    cc4c:	8a 0f       	add	r24, r26
    cc4e:	9b 1f       	adc	r25, r27
    cc50:	22 24       	eor	r2, r2
    cc52:	33 24       	eor	r3, r3
    cc54:	28 1a       	sub	r2, r24
    cc56:	39 0a       	sbc	r3, r25

inline void SetCrashedPieces(uint8_t p){
	//flashing jewel flag is already eliminated by the time we get here
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
	for(uint8_t i=p*3;i<(p*3)+3;i++){
		crashedpiecex[i] = (piecex[p]<<4)+(p*(16<<3));
    cc58:	10 e7       	ldi	r17, 0x70	; 112
    cc5a:	41 2e       	mov	r4, r17
    cc5c:	1f e0       	ldi	r17, 0x0F	; 15
    cc5e:	51 2e       	mov	r5, r17
    cc60:	4a 0e       	add	r4, r26
    cc62:	5b 1e       	adc	r5, r27
		crashedpiecey[i] = ((((piecey[p]-2)<<1)+((bool)halfstep[p]))<<3)+((i-(p*3))*2);
    cc64:	fd e6       	ldi	r31, 0x6D	; 109
    cc66:	6f 2e       	mov	r6, r31
    cc68:	fe e0       	ldi	r31, 0x0E	; 14
    cc6a:	7f 2e       	mov	r7, r31
    cc6c:	6a 0e       	add	r6, r26
    cc6e:	7b 1e       	adc	r7, r27
    cc70:	eb e7       	ldi	r30, 0x7B	; 123
    cc72:	8e 2e       	mov	r8, r30
    cc74:	ef e0       	ldi	r30, 0x0F	; 15
    cc76:	9e 2e       	mov	r9, r30
    cc78:	8a 0e       	add	r8, r26
    cc7a:	9b 1e       	adc	r9, r27
    cc7c:	5d c0       	rjmp	.+186    	; 0xcd38 <DoPlay+0xd40>

inline void SetCrashedPieces(uint8_t p){
	//flashing jewel flag is already eliminated by the time we get here
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
	for(uint8_t i=p*3;i<(p*3)+3;i++){
		crashedpiecex[i] = (piecex[p]<<4)+(p*(16<<3));
    cc7e:	f8 01       	movw	r30, r16
    cc80:	ee 0f       	add	r30, r30
    cc82:	ff 1f       	adc	r31, r31
    cc84:	af 01       	movw	r20, r30
    cc86:	48 5b       	subi	r20, 0xB8	; 184
    cc88:	51 4f       	sbci	r21, 0xF1	; 241
    cc8a:	d2 01       	movw	r26, r4
    cc8c:	8c 91       	ld	r24, X
    cc8e:	90 e0       	ldi	r25, 0x00	; 0
    cc90:	64 e0       	ldi	r22, 0x04	; 4
    cc92:	88 0f       	add	r24, r24
    cc94:	99 1f       	adc	r25, r25
    cc96:	6a 95       	dec	r22
    cc98:	e1 f7       	brne	.-8      	; 0xcc92 <DoPlay+0xc9a>
    cc9a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    cc9c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    cc9e:	82 0f       	add	r24, r18
    cca0:	93 1f       	adc	r25, r19
    cca2:	da 01       	movw	r26, r20
    cca4:	8d 93       	st	X+, r24
    cca6:	9c 93       	st	X, r25
		crashedpiecey[i] = ((((piecey[p]-2)<<1)+((bool)halfstep[p]))<<3)+((i-(p*3))*2);
    cca8:	ef 57       	subi	r30, 0x7F	; 127
    ccaa:	f0 4f       	sbci	r31, 0xF0	; 240
    ccac:	98 01       	movw	r18, r16
    ccae:	22 0d       	add	r18, r2
    ccb0:	33 1d       	adc	r19, r3
    ccb2:	22 0f       	add	r18, r18
    ccb4:	33 1f       	adc	r19, r19
    ccb6:	d3 01       	movw	r26, r6
    ccb8:	8c 91       	ld	r24, X
    ccba:	90 e0       	ldi	r25, 0x00	; 0
    ccbc:	02 97       	sbiw	r24, 0x02	; 2
    ccbe:	88 0f       	add	r24, r24
    ccc0:	99 1f       	adc	r25, r25
    ccc2:	d4 01       	movw	r26, r8
    ccc4:	4c 91       	ld	r20, X
    ccc6:	84 0f       	add	r24, r20
    ccc8:	91 1d       	adc	r25, r1
    ccca:	b3 e0       	ldi	r27, 0x03	; 3
    cccc:	88 0f       	add	r24, r24
    ccce:	99 1f       	adc	r25, r25
    ccd0:	ba 95       	dec	r27
    ccd2:	e1 f7       	brne	.-8      	; 0xcccc <DoPlay+0xcd4>
    ccd4:	28 0f       	add	r18, r24
    ccd6:	39 1f       	adc	r19, r25
    ccd8:	31 83       	std	Z+1, r19	; 0x01
    ccda:	20 83       	st	Z, r18
		
		crashedxvel[i] = -7+(prng(MAX_PLAYERS)%14);
    ccdc:	82 e0       	ldi	r24, 0x02	; 2
    ccde:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <prng>
    cce2:	f8 01       	movw	r30, r16
    cce4:	e7 51       	subi	r30, 0x17	; 23
    cce6:	f0 4f       	sbci	r31, 0xF0	; 240
    cce8:	6e e0       	ldi	r22, 0x0E	; 14
    ccea:	70 e0       	ldi	r23, 0x00	; 0
    ccec:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    ccf0:	87 50       	subi	r24, 0x07	; 7
    ccf2:	80 83       	st	Z, r24
		crashedyvel[i] = -14+(prng(MAX_PLAYERS)%20);
    ccf4:	82 e0       	ldi	r24, 0x02	; 2
    ccf6:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <prng>
    ccfa:	f8 01       	movw	r30, r16
    ccfc:	ef 5c       	subi	r30, 0xCF	; 207
    ccfe:	f1 4f       	sbci	r31, 0xF1	; 241
    cd00:	64 e1       	ldi	r22, 0x14	; 20
    cd02:	70 e0       	ldi	r23, 0x00	; 0
    cd04:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    cd08:	8e 50       	subi	r24, 0x0E	; 14
    cd0a:	80 83       	st	Z, r24
		if((piece[i]) < 7)//normal jewel
    cd0c:	f8 01       	movw	r30, r16
    cd0e:	ed 5b       	subi	r30, 0xBD	; 189
    cd10:	f0 4f       	sbci	r31, 0xF0	; 240
    cd12:	80 81       	ld	r24, Z
    cd14:	f8 01       	movw	r30, r16
    cd16:	e9 5a       	subi	r30, 0xA9	; 169
    cd18:	f0 4f       	sbci	r31, 0xF0	; 240
    cd1a:	28 2f       	mov	r18, r24
    cd1c:	30 e0       	ldi	r19, 0x00	; 0
    cd1e:	87 30       	cpi	r24, 0x07	; 7
    cd20:	18 f4       	brcc	.+6      	; 0xcd28 <DoPlay+0xd30>
			crashedtype[i] = (JEWELSTART+((piece[i])*4)-1)+RAM_TILES_COUNT;
    cd22:	24 5f       	subi	r18, 0xF4	; 244
    cd24:	3f 4f       	sbci	r19, 0xFF	; 255
    cd26:	02 c0       	rjmp	.+4      	; 0xcd2c <DoPlay+0xd34>
		else//magic jewel
			crashedtype[i] = ((piece[i])-7)*4;
    cd28:	27 50       	subi	r18, 0x07	; 7
    cd2a:	30 40       	sbci	r19, 0x00	; 0
    cd2c:	22 0f       	add	r18, r18
    cd2e:	33 1f       	adc	r19, r19
    cd30:	22 0f       	add	r18, r18
    cd32:	33 1f       	adc	r19, r19
    cd34:	20 83       	st	Z, r18


inline void SetCrashedPieces(uint8_t p){
	//flashing jewel flag is already eliminated by the time we get here
	crashedredrawtime = 45;//longest possible number of ticks fallings pieces could be over drawing things. after that save some cycles for cpu player
	for(uint8_t i=p*3;i<(p*3)+3;i++){
    cd36:	d3 94       	inc	r13
    cd38:	0d 2d       	mov	r16, r13
    cd3a:	10 e0       	ldi	r17, 0x00	; 0
    cd3c:	0e 15       	cp	r16, r14
    cd3e:	1f 05       	cpc	r17, r15
    cd40:	0c f4       	brge	.+2      	; 0xcd44 <DoPlay+0xd4c>
    cd42:	9d cf       	rjmp	.-198    	; 0xcc7e <DoPlay+0xc86>
				piece[i+(p*3)] ^= FLASHINGJEWEL;
				flashingjeweltimer[p] = 0;
			}
		}
		SetCrashedPieces(p);
		blank_piece(p);
    cd44:	8b 2d       	mov	r24, r11
    cd46:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
		GeneratePreview(p);
    cd4a:	8b 2d       	mov	r24, r11
    cd4c:	0e 94 3e 57 	call	0xae7c	; 0xae7c <GeneratePreview>
		CrashBarUp(crashcomingup[p],p);
    cd50:	08 a1       	ldd	r16, Y+32	; 0x20
    cd52:	19 a1       	ldd	r17, Y+33	; 0x21
    cd54:	00 5c       	subi	r16, 0xC0	; 192
    cd56:	10 4f       	sbci	r17, 0xF0	; 240
    cd58:	f8 01       	movw	r30, r16
    cd5a:	80 81       	ld	r24, Z
    cd5c:	6b 2d       	mov	r22, r11
    cd5e:	0e 94 b7 5d 	call	0xbb6e	; 0xbb6e <CrashBarUp>
		crashcomingup[p] = 0;
    cd62:	d8 01       	movw	r26, r16
    cd64:	1c 92       	st	X, r1
		if(CheckLoss(p))
    cd66:	8b 2d       	mov	r24, r11
    cd68:	0e 94 ea 56 	call	0xadd4	; 0xadd4 <CheckLoss>
    cd6c:	88 23       	and	r24, r24
    cd6e:	19 f0       	breq	.+6      	; 0xcd76 <DoPlay+0xd7e>
			SetLosing(p);
    cd70:	8b 2d       	mov	r24, r11
    cd72:	0e 94 a4 5a 	call	0xb548	; 0xb548 <SetLosing>
	}
	add_piece(p);		
    cd76:	8b 2d       	mov	r24, r11
    cd78:	0e 94 c8 53 	call	0xa790	; 0xa790 <add_piece>

/////////////////////////////////////////////////////////////////////////////////////
//PROCESS 1 GAME TICK (30HZ)
/////////////////////////////////////////////////////////////////////////////////////
		UpdatePads();
		for(uint8_t p=0;p<MAX_PLAYERS;p++){
    cd7c:	b3 94       	inc	r11
    cd7e:	b1 e0       	ldi	r27, 0x01	; 1
    cd80:	bb 15       	cp	r27, r11
    cd82:	08 f0       	brcs	.+2      	; 0xcd86 <DoPlay+0xd8e>
    cd84:	63 c9       	rjmp	.-3386   	; 0xc04c <DoPlay+0x54>
inline void CalculateMusicTempo(){
	if(++tickssincetempochange < 4)
    cd86:	80 91 5d 0e 	lds	r24, 0x0E5D
    cd8a:	8f 5f       	subi	r24, 0xFF	; 255
    cd8c:	80 93 5d 0e 	sts	0x0E5D, r24
    cd90:	84 30       	cpi	r24, 0x04	; 4
    cd92:	08 f4       	brcc	.+2      	; 0xcd96 <DoPlay+0xd9e>
    cd94:	56 c0       	rjmp	.+172    	; 0xce42 <DoPlay+0xe4a>
	return;
	tickssincetempochange = 0;
    cd96:	10 92 5d 0e 	sts	0x0E5D, r1
	
	if((state[0] & (SCORING|APPLYGRAVITY|EXPLODING)) && (state[1] & (SCORING|APPLYGRAVITY|EXPLODING)))
    cd9a:	80 91 6f 0e 	lds	r24, 0x0E6F
    cd9e:	83 72       	andi	r24, 0x23	; 35
    cda0:	29 f0       	breq	.+10     	; 0xcdac <DoPlay+0xdb4>
    cda2:	80 91 70 0e 	lds	r24, 0x0E70
    cda6:	83 72       	andi	r24, 0x23	; 35
    cda8:	09 f0       	breq	.+2      	; 0xcdac <DoPlay+0xdb4>
    cdaa:	4b c0       	rjmp	.+150    	; 0xce42 <DoPlay+0xe4a>
	return;
	uint16_t mt = (wellfullness[0] > wellfullness[1]) ? wellfullness[0]:wellfullness[1];
    cdac:	20 91 5f 0f 	lds	r18, 0x0F5F
    cdb0:	30 91 60 0f 	lds	r19, 0x0F60
    cdb4:	80 91 5d 0f 	lds	r24, 0x0F5D
    cdb8:	90 91 5e 0f 	lds	r25, 0x0F5E
    cdbc:	82 17       	cp	r24, r18
    cdbe:	93 07       	cpc	r25, r19
    cdc0:	08 f4       	brcc	.+2      	; 0xcdc4 <DoPlay+0xdcc>
    cdc2:	c9 01       	movw	r24, r18


	if(mt < 6*5)
    cdc4:	8e 31       	cpi	r24, 0x1E	; 30
    cdc6:	91 05       	cpc	r25, r1
    cdc8:	18 f4       	brcc	.+6      	; 0xcdd0 <DoPlay+0xdd8>
    cdca:	20 e0       	ldi	r18, 0x00	; 0
    cdcc:	30 e0       	ldi	r19, 0x00	; 0
    cdce:	0c c0       	rjmp	.+24     	; 0xcde8 <DoPlay+0xdf0>
	mt = 0;
	else{
		mt -= 6*5;
    cdd0:	9c 01       	movw	r18, r24
    cdd2:	2e 51       	subi	r18, 0x1E	; 30
    cdd4:	30 40       	sbci	r19, 0x00	; 0
		mt *= 4;//5 points for every jewel above 5*6
    cdd6:	22 0f       	add	r18, r18
    cdd8:	33 1f       	adc	r19, r19
    cdda:	22 0f       	add	r18, r18
    cddc:	33 1f       	adc	r19, r19
	}
	
	if(mt > MAXTEMPO)
    cdde:	2f 36       	cpi	r18, 0x6F	; 111
    cde0:	31 05       	cpc	r19, r1
    cde2:	10 f0       	brcs	.+4      	; 0xcde8 <DoPlay+0xdf0>
    cde4:	2e e6       	ldi	r18, 0x6E	; 110
    cde6:	30 e0       	ldi	r19, 0x00	; 0
	mt = MAXTEMPO;
	
	if(musicspeed < mt)
    cde8:	80 91 42 0f 	lds	r24, 0x0F42
    cdec:	48 2f       	mov	r20, r24
    cdee:	50 e0       	ldi	r21, 0x00	; 0
    cdf0:	42 17       	cp	r20, r18
    cdf2:	53 07       	cpc	r21, r19
    cdf4:	10 f4       	brcc	.+4      	; 0xcdfa <DoPlay+0xe02>
	musicspeed++;
    cdf6:	8f 5f       	subi	r24, 0xFF	; 255
    cdf8:	04 c0       	rjmp	.+8      	; 0xce02 <DoPlay+0xe0a>
	else if(musicspeed > mt)
    cdfa:	24 17       	cp	r18, r20
    cdfc:	35 07       	cpc	r19, r21
    cdfe:	18 f4       	brcc	.+6      	; 0xce06 <DoPlay+0xe0e>
	musicspeed--;
    ce00:	81 50       	subi	r24, 0x01	; 1
    ce02:	80 93 42 0f 	sts	0x0F42, r24
	if(musicspeed > mt+10)
    ce06:	40 91 42 0f 	lds	r20, 0x0F42
    ce0a:	84 2f       	mov	r24, r20
    ce0c:	90 e0       	ldi	r25, 0x00	; 0
    ce0e:	26 5f       	subi	r18, 0xF6	; 246
    ce10:	3f 4f       	sbci	r19, 0xFF	; 255
    ce12:	28 17       	cp	r18, r24
    ce14:	39 07       	cpc	r19, r25
    ce16:	18 f4       	brcc	.+6      	; 0xce1e <DoPlay+0xe26>
	musicspeed -= 10;//respond quickly to chain action
    ce18:	4a 50       	subi	r20, 0x0A	; 10
    ce1a:	40 93 42 0f 	sts	0x0F42, r20

	SetSongTempo((uint32_t)((musicspeed*musicspeed*2)/32));
    ce1e:	80 91 42 0f 	lds	r24, 0x0F42
    ce22:	90 e0       	ldi	r25, 0x00	; 0
    ce24:	fc 01       	movw	r30, r24
    ce26:	ee 9f       	mul	r30, r30
    ce28:	c0 01       	movw	r24, r0
    ce2a:	ef 9f       	mul	r30, r31
    ce2c:	90 0d       	add	r25, r0
    ce2e:	fe 9f       	mul	r31, r30
    ce30:	90 0d       	add	r25, r0
    ce32:	11 24       	eor	r1, r1
    ce34:	e4 e0       	ldi	r30, 0x04	; 4
    ce36:	95 95       	asr	r25
    ce38:	87 95       	ror	r24
    ce3a:	ea 95       	dec	r30
    ce3c:	e1 f7       	brne	.-8      	; 0xce36 <DoPlay+0xe3e>
    ce3e:	0e 94 3a 4a 	call	0x9474	; 0x9474 <SetSongTempo>


inline void DoDraw(){
//need to redraw preview jewels when gameover because crashedtiles overdraw them
	//Draw field map
	if(game_state & GS_FIRSTTICK || crashedredrawtime)// || state[0] & (LOSING|LOSING2|GAMEOVER))
    ce42:	80 91 6a 0e 	lds	r24, 0x0E6A
    ce46:	85 fd       	sbrc	r24, 5
    ce48:	2d c0       	rjmp	.+90     	; 0xcea4 <DoPlay+0xeac>
    ce4a:	80 91 55 0f 	lds	r24, 0x0F55
    ce4e:	88 23       	and	r24, r24
    ce50:	49 f5       	brne	.+82     	; 0xcea4 <DoPlay+0xeac>
    ce52:	24 e5       	ldi	r18, 0x54	; 84
    ce54:	3e e0       	ldi	r19, 0x0E	; 14
    ce56:	3d 8b       	std	Y+21, r19	; 0x15
    ce58:	2c 8b       	std	Y+20, r18	; 0x14
    ce5a:	7f e6       	ldi	r23, 0x6F	; 111
    ce5c:	27 2e       	mov	r2, r23
    ce5e:	7e e0       	ldi	r23, 0x0E	; 14
    ce60:	37 2e       	mov	r3, r23
    ce62:	6e e7       	ldi	r22, 0x7E	; 126
    ce64:	46 2e       	mov	r4, r22
    ce66:	6f e0       	ldi	r22, 0x0F	; 15
    ce68:	56 2e       	mov	r5, r22
    ce6a:	4f e9       	ldi	r20, 0x9F	; 159
    ce6c:	53 e0       	ldi	r21, 0x03	; 3
    ce6e:	59 8b       	std	Y+17, r21	; 0x11
    ce70:	48 8b       	std	Y+16, r20	; 0x10
    ce72:	6f e5       	ldi	r22, 0x5F	; 95
    ce74:	7e e0       	ldi	r23, 0x0E	; 14
    ce76:	79 87       	std	Y+9, r23	; 0x09
    ce78:	68 87       	std	Y+8, r22	; 0x08
    ce7a:	1f 8a       	std	Y+23, r1	; 0x17
    ce7c:	1e 8a       	std	Y+22, r1	; 0x16
    ce7e:	1b 8a       	std	Y+19, r1	; 0x13
    ce80:	74 e0       	ldi	r23, 0x04	; 4
    ce82:	7a 8b       	std	Y+18, r23	; 0x12
    ce84:	53 e0       	ldi	r21, 0x03	; 3
    ce86:	75 2e       	mov	r7, r21
    ce88:	1f 86       	std	Y+15, r1	; 0x0f
    ce8a:	1e 86       	std	Y+14, r1	; 0x0e
    ce8c:	82 e0       	ldi	r24, 0x02	; 2
    ce8e:	8d 87       	std	Y+13, r24	; 0x0d
    ce90:	88 24       	eor	r8, r8
    ce92:	99 24       	eor	r9, r9
    ce94:	94 e1       	ldi	r25, 0x14	; 20
    ce96:	9c 87       	std	Y+12, r25	; 0x0c
    ce98:	a5 e1       	ldi	r26, 0x15	; 21
    ce9a:	ab 87       	std	Y+11, r26	; 0x0b
    ce9c:	1a 86       	std	Y+10, r1	; 0x0a
    ce9e:	1f 82       	std	Y+7, r1	; 0x07
    cea0:	1e 82       	std	Y+6, r1	; 0x06
    cea2:	35 c0       	rjmp	.+106    	; 0xcf0e <DoPlay+0xf16>
		set_vram(x,y,RAM_TILES_COUNT);
	}
}

inline void OneTimeDraw(){
	ColumnsDrawMap(13,7,4,26,0,FieldMap+(19*4*level),0);//draw even if just crashredrawtime
    cea4:	e0 91 4b 0f 	lds	r30, 0x0F4B
    cea8:	8c e4       	ldi	r24, 0x4C	; 76
    ceaa:	e8 9f       	mul	r30, r24
    ceac:	f0 01       	movw	r30, r0
    ceae:	11 24       	eor	r1, r1
    ceb0:	eb 5f       	subi	r30, 0xFB	; 251
    ceb2:	f0 4f       	sbci	r31, 0xF0	; 240
    ceb4:	8d e0       	ldi	r24, 0x0D	; 13
    ceb6:	90 e0       	ldi	r25, 0x00	; 0
    ceb8:	67 e0       	ldi	r22, 0x07	; 7
    ceba:	70 e0       	ldi	r23, 0x00	; 0
    cebc:	44 e0       	ldi	r20, 0x04	; 4
    cebe:	2a e1       	ldi	r18, 0x1A	; 26
    cec0:	00 e0       	ldi	r16, 0x00	; 0
    cec2:	10 e0       	ldi	r17, 0x00	; 0
    cec4:	7f 01       	movw	r14, r30
    cec6:	cc 24       	eor	r12, r12
    cec8:	dd 24       	eor	r13, r13
    ceca:	0e 94 f5 54 	call	0xa9ea	; 0xa9ea <ColumnsDrawMap>
    cece:	e0 e2       	ldi	r30, 0x20	; 32
    ced0:	f1 e0       	ldi	r31, 0x01	; 1
    ced2:	2f ef       	ldi	r18, 0xFF	; 255
    ced4:	31 e0       	ldi	r19, 0x01	; 1
    ced6:	d9 01       	movw	r26, r18
	for(uint8_t i=0;i<19;i++){
		vram[(i*VRAM_TILES_H)+0] = vram[((i+7)*VRAM_TILES_H)+16];
    ced8:	13 96       	adiw	r26, 0x03	; 3
    ceda:	8c 91       	ld	r24, X
    cedc:	13 97       	sbiw	r26, 0x03	; 3
    cede:	80 83       	st	Z, r24
		vram[(i*VRAM_TILES_H)+29] = vram[((i+7)*VRAM_TILES_H)+13];
    cee0:	8c 91       	ld	r24, X
    cee2:	85 8f       	std	Z+29, r24	; 0x1d
    cee4:	7e 96       	adiw	r30, 0x1e	; 30
    cee6:	5e 96       	adiw	r26, 0x1e	; 30
	}
}

inline void OneTimeDraw(){
	ColumnsDrawMap(13,7,4,26,0,FieldMap+(19*4*level),0);//draw even if just crashredrawtime
	for(uint8_t i=0;i<19;i++){
    cee8:	43 e0       	ldi	r20, 0x03	; 3
    ceea:	ea 35       	cpi	r30, 0x5A	; 90
    ceec:	f4 07       	cpc	r31, r20
    ceee:	a1 f7       	brne	.-24     	; 0xced8 <DoPlay+0xee0>
		vram[(i*VRAM_TILES_H)+0] = vram[((i+7)*VRAM_TILES_H)+16];
		vram[(i*VRAM_TILES_H)+29] = vram[((i+7)*VRAM_TILES_H)+13];
	}		
	for(uint8_t i=19;i<26;i++){
		vram[(i*VRAM_TILES_H)+0] = vram[((i-12)*VRAM_TILES_H)+16];
    cef0:	d9 01       	movw	r26, r18
    cef2:	13 96       	adiw	r26, 0x03	; 3
    cef4:	8c 91       	ld	r24, X
    cef6:	13 97       	sbiw	r26, 0x03	; 3
    cef8:	80 83       	st	Z, r24
		vram[(i*VRAM_TILES_H)+29] = vram[((i-12)*VRAM_TILES_H)+13];
    cefa:	8c 91       	ld	r24, X
    cefc:	85 8f       	std	Z+29, r24	; 0x1d
    cefe:	7e 96       	adiw	r30, 0x1e	; 30
    cf00:	22 5e       	subi	r18, 0xE2	; 226
    cf02:	3f 4f       	sbci	r19, 0xFF	; 255
	ColumnsDrawMap(13,7,4,26,0,FieldMap+(19*4*level),0);//draw even if just crashredrawtime
	for(uint8_t i=0;i<19;i++){
		vram[(i*VRAM_TILES_H)+0] = vram[((i+7)*VRAM_TILES_H)+16];
		vram[(i*VRAM_TILES_H)+29] = vram[((i+7)*VRAM_TILES_H)+13];
	}		
	for(uint8_t i=19;i<26;i++){
    cf04:	b4 e0       	ldi	r27, 0x04	; 4
    cf06:	ec 32       	cpi	r30, 0x2C	; 44
    cf08:	fb 07       	cpc	r31, r27
    cf0a:	91 f7       	brne	.-28     	; 0xcef0 <DoPlay+0xef8>
    cf0c:	a2 cf       	rjmp	.-188    	; 0xce52 <DoPlay+0xe5a>
    cf0e:	be 88       	ldd	r11, Y+22	; 0x16
		}
	}
}


inline void DoPlay(){
    cf10:	9e 85       	ldd	r25, Y+14	; 0x0e
    cf12:	69 2e       	mov	r6, r25
    cf14:	63 94       	inc	r6

		uint16_t woffset = (p*WELLSIZE)+WELLSIZE-1;//start at last jewel spot
		uint8_t t;
	//	ox = p*18;//not needed
		//Draw actual well
		if(cursetype[p]&CURSEUPSIDEDOWN){
    cf16:	ec 89       	ldd	r30, Y+20	; 0x14
    cf18:	fd 89       	ldd	r31, Y+21	; 0x15
    cf1a:	80 81       	ld	r24, Z
    cf1c:	82 fd       	sbrc	r24, 2
    cf1e:	ee c0       	rjmp	.+476    	; 0xd0fc <DoPlay+0x1104>
    cf20:	84 01       	movw	r16, r8
    cf22:	01 5a       	subi	r16, 0xA1	; 161
    cf24:	1f 4f       	sbci	r17, 0xFF	; 255
    cf26:	fe 81       	ldd	r31, Y+6	; 0x06
    cf28:	fa 5e       	subi	r31, 0xEA	; 234
    cf2a:	fb 83       	std	Y+3, r31	; 0x03
    cf2c:	2a 85       	ldd	r18, Y+10	; 0x0a
    cf2e:	24 5f       	subi	r18, 0xF4	; 244
    cf30:	29 83       	std	Y+1, r18	; 0x01
    cf32:	3a 85       	ldd	r19, Y+10	; 0x0a
    cf34:	33 5f       	subi	r19, 0xF3	; 243
    cf36:	3a 83       	std	Y+2, r19	; 0x02
    cf38:	4a 85       	ldd	r20, Y+10	; 0x0a
    cf3a:	42 5f       	subi	r20, 0xF2	; 242
    cf3c:	4c 83       	std	Y+4, r20	; 0x04
    cf3e:	5a 85       	ldd	r21, Y+10	; 0x0a
    cf40:	51 5f       	subi	r21, 0xF1	; 241
    cf42:	5d 83       	std	Y+5, r21	; 0x05
    cf44:	4a e5       	ldi	r20, 0x5A	; 90
    cf46:	c4 2e       	mov	r12, r20
    cf48:	d1 2c       	mov	r13, r1
    cf4a:	c8 0c       	add	r12, r8
    cf4c:	d9 1c       	adc	r13, r9
    cf4e:	a8 e1       	ldi	r26, 0x18	; 24
    cf50:	b0 e0       	ldi	r27, 0x00	; 0
    cf52:	30 ed       	ldi	r19, 0xD0	; 208
    cf54:	e3 2e       	mov	r14, r19
    cf56:	32 e0       	ldi	r19, 0x02	; 2
    cf58:	f3 2e       	mov	r15, r19
					//if(cursetype[p] & CURSEUPSIDEDOWN)
						//InlineDrawJewelUpsidedown(ox+(x*2),24-((y-3)*2),t,p);	
		}
		else{
		for(int8_t y=15;y>1;y--){
    cf5a:	95 5f       	subi	r25, 0xF5	; 245
    cf5c:	9f 8f       	std	Y+31, r25	; 0x1f
    cf5e:	bd c0       	rjmp	.+378    	; 0xd0da <DoPlay+0x10e2>
			for(int8_t x=5;x>-1;x--){
				if((state[p]&SCORING) && (stateframe[p]&1) && get_scoring(x,y,p))				
    cf60:	f1 01       	movw	r30, r2
    cf62:	80 81       	ld	r24, Z
    cf64:	98 2f       	mov	r25, r24
    cf66:	80 ff       	sbrs	r24, 0
    cf68:	0d c0       	rjmp	.+26     	; 0xcf84 <DoPlay+0xf8c>
    cf6a:	e8 85       	ldd	r30, Y+8	; 0x08
    cf6c:	f9 85       	ldd	r31, Y+9	; 0x09
    cf6e:	80 81       	ld	r24, Z
    cf70:	80 ff       	sbrs	r24, 0
    cf72:	08 c0       	rjmp	.+16     	; 0xcf84 <DoPlay+0xf8c>
    cf74:	4d 8d       	ldd	r20, Y+29	; 0x1d
    cf76:	5e 8d       	ldd	r21, Y+30	; 0x1e
    cf78:	43 0f       	add	r20, r19
    cf7a:	51 1d       	adc	r21, r1
    cf7c:	fa 01       	movw	r30, r20
    cf7e:	80 81       	ld	r24, Z
    cf80:	87 fd       	sbrc	r24, 7
    cf82:	14 c0       	rjmp	.+40     	; 0xcfac <DoPlay+0xfb4>
					t = 0;//flash on and off
				else if((state[p]&EXPLODING) && (well[woffset]&SCORINGJEWEL))
    cf84:	91 ff       	sbrs	r25, 1
    cf86:	0a c0       	rjmp	.+20     	; 0xcf9c <DoPlay+0xfa4>
    cf88:	e8 a1       	ldd	r30, Y+32	; 0x20
    cf8a:	f9 a1       	ldd	r31, Y+33	; 0x21
    cf8c:	80 81       	ld	r24, Z
    cf8e:	87 ff       	sbrs	r24, 7
    cf90:	05 c0       	rjmp	.+10     	; 0xcf9c <DoPlay+0xfa4>
					t = 10+stateframe[p];//>10 IS EXPLODING FRAMES
    cf92:	e8 85       	ldd	r30, Y+8	; 0x08
    cf94:	f9 85       	ldd	r31, Y+9	; 0x09
    cf96:	90 81       	ld	r25, Z
    cf98:	96 5f       	subi	r25, 0xF6	; 246
    cf9a:	09 c0       	rjmp	.+18     	; 0xcfae <DoPlay+0xfb6>
				else{
					t = well[woffset];
    cf9c:	e8 a1       	ldd	r30, Y+32	; 0x20
    cf9e:	f9 a1       	ldd	r31, Y+33	; 0x21
    cfa0:	90 81       	ld	r25, Z
					if((t & FLASHINGJEWEL) && (globalflashcounter&4))
    cfa2:	95 ff       	sbrs	r25, 5
    cfa4:	04 c0       	rjmp	.+8      	; 0xcfae <DoPlay+0xfb6>
    cfa6:	80 91 01 01 	lds	r24, 0x0101
    cfaa:	82 fd       	sbrc	r24, 2
    cfac:	90 e0       	ldi	r25, 0x00	; 0
vram[off+VRAM_TILES_H+0] = t++;//set_vram(x+0,y+1,t++);
vram[off+VRAM_TILES_H+1] = t;//set_vram(x+1,y+1,t);
}

inline void InlineDrawJewel(uint8_t x, int16_t y, uint8_t t, uint8_t p){
	uint16_t off = x+(y*VRAM_TILES_H);
    cfae:	a7 01       	movw	r20, r14
    cfb0:	4a 0d       	add	r20, r10
    cfb2:	51 1d       	adc	r21, r1

	if(t == 0){
    cfb4:	99 23       	and	r25, r25
    cfb6:	59 f4       	brne	.+22     	; 0xcfce <DoPlay+0xfd6>
		t = FIRSTGRIDRT+(p*3);
		vram[off+0] = t++;
    cfb8:	40 5e       	subi	r20, 0xE0	; 224
    cfba:	5e 4f       	sbci	r21, 0xFE	; 254
    cfbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    cfbe:	fa 01       	movw	r30, r20
    cfc0:	20 83       	st	Z, r18
		vram[off+1] = t++;
    cfc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    cfc4:	61 83       	std	Z+1, r22	; 0x01
		vram[off+VRAM_TILES_H+0] = t;
    cfc6:	7b 81       	ldd	r23, Y+3	; 0x03
    cfc8:	76 8f       	std	Z+30, r23	; 0x1e
		vram[off+VRAM_TILES_H+1] = RAM_TILES_COUNT;
    cfca:	83 e2       	ldi	r24, 0x23	; 35
    cfcc:	28 c0       	rjmp	.+80     	; 0xd01e <DoPlay+0x1026>
		return;
	}

	if(t & HALFSTEP){//is a half step down, so draw y+1
    cfce:	96 ff       	sbrs	r25, 6
    cfd0:	0f c0       	rjmp	.+30     	; 0xcff0 <DoPlay+0xff8>
		//BLANK ABOVE THIS JEWEL
		if(y > -1){
    cfd2:	b7 fd       	sbrc	r27, 7
    cfd4:	08 c0       	rjmp	.+16     	; 0xcfe6 <DoPlay+0xfee>
			vram[off+0] = FIRSTGRIDRT+(p*3);
    cfd6:	ba 01       	movw	r22, r20
    cfd8:	60 5e       	subi	r22, 0xE0	; 224
    cfda:	7e 4f       	sbci	r23, 0xFE	; 254
    cfdc:	2c 85       	ldd	r18, Y+12	; 0x0c
    cfde:	fb 01       	movw	r30, r22
    cfe0:	20 83       	st	Z, r18
			vram[off+1] = FIRSTGRIDRT+(p*3)+1;
    cfe2:	8b 85       	ldd	r24, Y+11	; 0x0b
    cfe4:	81 83       	std	Z+1, r24	; 0x01
		}
		off += VRAM_TILES_H;
    cfe6:	42 5e       	subi	r20, 0xE2	; 226
    cfe8:	5f 4f       	sbci	r21, 0xFF	; 255
    cfea:	68 8d       	ldd	r22, Y+24	; 0x18
    cfec:	79 8d       	ldd	r23, Y+25	; 0x19
    cfee:	06 c0       	rjmp	.+12     	; 0xcffc <DoPlay+0x1004>
		y++;		
	}

	if(y < -1)
    cff0:	ef ef       	ldi	r30, 0xFF	; 255
    cff2:	af 3f       	cpi	r26, 0xFF	; 255
    cff4:	be 07       	cpc	r27, r30
    cff6:	0c f4       	brge	.+2      	; 0xcffa <DoPlay+0x1002>
    cff8:	52 c0       	rjmp	.+164    	; 0xd09e <DoPlay+0x10a6>
    cffa:	bd 01       	movw	r22, r26
		return;

t &= 0b00011111;//get rid of status bits	
    cffc:	89 2f       	mov	r24, r25
    cffe:	8f 71       	andi	r24, 0x1F	; 31

if(t>19){//crash bar
    d000:	84 31       	cpi	r24, 0x14	; 20
    d002:	78 f0       	brcs	.+30     	; 0xd022 <DoPlay+0x102a>
t -= 20;
t *= 4;
    d004:	84 51       	subi	r24, 0x14	; 20
    d006:	88 0f       	add	r24, r24
    d008:	88 0f       	add	r24, r24
t += FIRSTCRASHRT;
    d00a:	86 5e       	subi	r24, 0xE6	; 230
vram[off+0] = t++;//set_vram(x+0,y+0,t++);
    d00c:	fa 01       	movw	r30, r20
    d00e:	e0 5e       	subi	r30, 0xE0	; 224
    d010:	fe 4f       	sbci	r31, 0xFE	; 254
    d012:	80 83       	st	Z, r24
    d014:	8f 5f       	subi	r24, 0xFF	; 255
vram[off+1] = t++;//set_vram(x+1,y+0,t++);
    d016:	81 83       	std	Z+1, r24	; 0x01
    d018:	8f 5f       	subi	r24, 0xFF	; 255
vram[off+VRAM_TILES_H+0] = t++;//set_vram(x+0,y+1,t++);
    d01a:	86 8f       	std	Z+30, r24	; 0x1e
vram[off+VRAM_TILES_H+1] = t++;//set_vram(x+1,y+1,t);
    d01c:	8f 5f       	subi	r24, 0xFF	; 255
    d01e:	87 8f       	std	Z+31, r24	; 0x1f
    d020:	3e c0       	rjmp	.+124    	; 0xd09e <DoPlay+0x10a6>
return;

	}
	if(t>9){//explosion
    d022:	8a 30       	cpi	r24, 0x0A	; 10
    d024:	58 f0       	brcs	.+22     	; 0xd03c <DoPlay+0x1044>
		t = FIRSTEXPLOSIONRT+(p*4);
vram[off+0] = t++;//set_vram(x+0,y+0,t++);
    d026:	40 5e       	subi	r20, 0xE0	; 224
    d028:	5e 4f       	sbci	r21, 0xFE	; 254
    d02a:	29 81       	ldd	r18, Y+1	; 0x01
    d02c:	fa 01       	movw	r30, r20
    d02e:	20 83       	st	Z, r18
vram[off+1] = t++;//set_vram(x+1,y+0,t++);
    d030:	6a 81       	ldd	r22, Y+2	; 0x02
    d032:	61 83       	std	Z+1, r22	; 0x01
vram[off+VRAM_TILES_H+0] = t++;//set_vram(x+0,y+1,t++);
    d034:	7c 81       	ldd	r23, Y+4	; 0x04
    d036:	76 8f       	std	Z+30, r23	; 0x1e
vram[off+VRAM_TILES_H+1] = t;//set_vram(x+1,y+1,t);
    d038:	8d 81       	ldd	r24, Y+5	; 0x05
    d03a:	f1 cf       	rjmp	.-30     	; 0xd01e <DoPlay+0x1026>
		return;
	}
	if(t>6){//flashing jewel
    d03c:	87 30       	cpi	r24, 0x07	; 7
    d03e:	c8 f0       	brcs	.+50     	; 0xd072 <DoPlay+0x107a>
		t -= 7;
		t *= 4;
    d040:	87 50       	subi	r24, 0x07	; 7
    d042:	90 e0       	ldi	r25, 0x00	; 0
    d044:	88 0f       	add	r24, r24
    d046:	99 1f       	adc	r25, r25
    d048:	88 0f       	add	r24, r24
    d04a:	99 1f       	adc	r25, r25
    d04c:	28 2f       	mov	r18, r24

		if(y > -1){
    d04e:	6f 5f       	subi	r22, 0xFF	; 255
    d050:	7f 4f       	sbci	r23, 0xFF	; 255
    d052:	39 f0       	breq	.+14     	; 0xd062 <DoPlay+0x106a>
			vram[off+0] = t+0;//set_vram(x+0,y+0,t+0);//set to ram tile indices
    d054:	fa 01       	movw	r30, r20
    d056:	e0 5e       	subi	r30, 0xE0	; 224
    d058:	fe 4f       	sbci	r31, 0xFE	; 254
    d05a:	80 83       	st	Z, r24
			vram[off+1] = t+1;//set_vram(x+1,y+0,t+1);
    d05c:	2f 5f       	subi	r18, 0xFF	; 255
    d05e:	21 83       	std	Z+1, r18	; 0x01
    d060:	21 50       	subi	r18, 0x01	; 1
		}
		vram[off+VRAM_TILES_H+0] = t+2;//set_vram(x+0,y+1,t+2);
    d062:	fa 01       	movw	r30, r20
    d064:	e0 5e       	subi	r30, 0xE0	; 224
    d066:	fe 4f       	sbci	r31, 0xFE	; 254
    d068:	2e 5f       	subi	r18, 0xFE	; 254
    d06a:	26 8f       	std	Z+30, r18	; 0x1e
		vram[off+VRAM_TILES_H+1] = t+3;//set_vram(x+1,y+1,t+3);	
    d06c:	2f 5f       	subi	r18, 0xFF	; 255
    d06e:	27 8f       	std	Z+31, r18	; 0x1f
    d070:	16 c0       	rjmp	.+44     	; 0xd09e <DoPlay+0x10a6>
		return;
	}else{//normal jewel
		t--;
		t *= 4;
    d072:	81 50       	subi	r24, 0x01	; 1
    d074:	88 0f       	add	r24, r24
    d076:	88 0f       	add	r24, r24
		t += 3;
	}
	t += JEWELSTART+RAM_TILES_COUNT;
    d078:	28 2f       	mov	r18, r24
    d07a:	2c 5c       	subi	r18, 0xCC	; 204
    d07c:	98 2f       	mov	r25, r24
    d07e:	9a 5c       	subi	r25, 0xCA	; 202
	if(y >= 0){
    d080:	6f 5f       	subi	r22, 0xFF	; 255
    d082:	7f 4f       	sbci	r23, 0xFF	; 255
    d084:	31 f0       	breq	.+12     	; 0xd092 <DoPlay+0x109a>
vram[off+0] = t++;//set_vram(x+0,y+0,t++);
    d086:	fa 01       	movw	r30, r20
    d088:	e0 5e       	subi	r30, 0xE0	; 224
    d08a:	fe 4f       	sbci	r31, 0xFE	; 254
    d08c:	20 83       	st	Z, r18
    d08e:	8b 5c       	subi	r24, 0xCB	; 203
vram[off+1] = t++;//set_vram(x+1,y+0,t++);
    d090:	81 83       	std	Z+1, r24	; 0x01
	}
	else
		t+= 2;
vram[off+VRAM_TILES_H+0] = t++;//set_vram(x+0,y+1,t++);
    d092:	fa 01       	movw	r30, r20
    d094:	e0 5e       	subi	r30, 0xE0	; 224
    d096:	fe 4f       	sbci	r31, 0xFE	; 254
    d098:	96 8f       	std	Z+30, r25	; 0x1e
vram[off+VRAM_TILES_H+1] = t;//set_vram(x+1,y+1,t);
    d09a:	9f 5f       	subi	r25, 0xFF	; 255
    d09c:	97 8f       	std	Z+31, r25	; 0x1f

				InlineDrawJewel(ox+(x*2),((y-3)*2),t,p);
				
				
				
				if(woffset == (p*WELLSIZE)){
    d09e:	08 15       	cp	r16, r8
    d0a0:	19 05       	cpc	r17, r9
    d0a2:	61 f1       	breq	.+88     	; 0xd0fc <DoPlay+0x1104>
					goto wellend;
					//y = -33;
					//break;
				}
				woffset--;
    d0a4:	01 50       	subi	r16, 0x01	; 1
    d0a6:	10 40       	sbci	r17, 0x00	; 0
					//if(cursetype[p] & CURSEUPSIDEDOWN)
						//InlineDrawJewelUpsidedown(ox+(x*2),24-((y-3)*2),t,p);	
		}
		else{
		for(int8_t y=15;y>1;y--){
			for(int8_t x=5;x>-1;x--){
    d0a8:	31 50       	subi	r19, 0x01	; 1
    d0aa:	2e ef       	ldi	r18, 0xFE	; 254
    d0ac:	a2 0e       	add	r10, r18
    d0ae:	48 a1       	ldd	r20, Y+32	; 0x20
    d0b0:	59 a1       	ldd	r21, Y+33	; 0x21
    d0b2:	41 50       	subi	r20, 0x01	; 1
    d0b4:	50 40       	sbci	r21, 0x00	; 0
    d0b6:	59 a3       	std	Y+33, r21	; 0x21
    d0b8:	48 a3       	std	Y+32, r20	; 0x20
    d0ba:	3f 3f       	cpi	r19, 0xFF	; 255
    d0bc:	09 f0       	breq	.+2      	; 0xd0c0 <DoPlay+0x10c8>
    d0be:	50 cf       	rjmp	.-352    	; 0xcf60 <DoPlay+0xf68>
    d0c0:	12 97       	sbiw	r26, 0x02	; 2
    d0c2:	64 ec       	ldi	r22, 0xC4	; 196
    d0c4:	7f ef       	ldi	r23, 0xFF	; 255
    d0c6:	e6 0e       	add	r14, r22
    d0c8:	f7 1e       	adc	r15, r23
    d0ca:	8a ef       	ldi	r24, 0xFA	; 250
    d0cc:	9f ef       	ldi	r25, 0xFF	; 255
    d0ce:	c8 0e       	add	r12, r24
    d0d0:	d9 1e       	adc	r13, r25
		if(cursetype[p]&CURSEUPSIDEDOWN){
					//if(cursetype[p] & CURSEUPSIDEDOWN)
						//InlineDrawJewelUpsidedown(ox+(x*2),24-((y-3)*2),t,p);	
		}
		else{
		for(int8_t y=15;y>1;y--){
    d0d2:	9f ef       	ldi	r25, 0xFF	; 255
    d0d4:	ac 3f       	cpi	r26, 0xFC	; 252
    d0d6:	b9 07       	cpc	r27, r25
    d0d8:	89 f0       	breq	.+34     	; 0xd0fc <DoPlay+0x1104>
    d0da:	fd 01       	movw	r30, r26
    d0dc:	31 96       	adiw	r30, 0x01	; 1
    d0de:	f9 8f       	std	Y+25, r31	; 0x19
    d0e0:	e8 8f       	std	Y+24, r30	; 0x18
    d0e2:	af 8c       	ldd	r10, Y+31	; 0x1f
    d0e4:	98 01       	movw	r18, r16
    d0e6:	2e 58       	subi	r18, 0x8E	; 142
    d0e8:	31 4f       	sbci	r19, 0xF1	; 241
    d0ea:	39 a3       	std	Y+33, r19	; 0x21
    d0ec:	28 a3       	std	Y+32, r18	; 0x20
    d0ee:	35 e0       	ldi	r19, 0x05	; 5
			for(int8_t x=5;x>-1;x--){
				if((state[p]&SCORING) && (stateframe[p]&1) && get_scoring(x,y,p))				
    d0f0:	a6 01       	movw	r20, r12
    d0f2:	4e 58       	subi	r20, 0x8E	; 142
    d0f4:	51 4f       	sbci	r21, 0xF1	; 241
    d0f6:	5e 8f       	std	Y+30, r21	; 0x1e
    d0f8:	4d 8f       	std	Y+29, r20	; 0x1d
    d0fa:	32 cf       	rjmp	.-412    	; 0xcf60 <DoPlay+0xf68>


inline void StateDraw(uint8_t p){
		uint8_t ox = (p*16)+1;

		if(state[p] == GETREADY){
    d0fc:	d1 01       	movw	r26, r2
    d0fe:	8c 91       	ld	r24, X
    d100:	80 38       	cpi	r24, 0x80	; 128
    d102:	19 f5       	brne	.+70     	; 0xd14a <DoPlay+0x1152>
			if(p == 0){
    d104:	bb 20       	and	r11, r11
    d106:	e1 f4       	brne	.+56     	; 0xd140 <DoPlay+0x1148>
				uint8_t color = pgm_read_byte(&GetReadyPallet[(level*(GLOBALFLASHCOUNT+1))+(globalflashcounter)]);
    d108:	e0 91 4b 0f 	lds	r30, 0x0F4B
    d10c:	f0 e0       	ldi	r31, 0x00	; 0
    d10e:	b4 e0       	ldi	r27, 0x04	; 4
    d110:	ee 0f       	add	r30, r30
    d112:	ff 1f       	adc	r31, r31
    d114:	ba 95       	dec	r27
    d116:	e1 f7       	brne	.-8      	; 0xd110 <DoPlay+0x1118>
    d118:	80 91 01 01 	lds	r24, 0x0101
    d11c:	e8 0f       	add	r30, r24
    d11e:	f1 1d       	adc	r31, r1
    d120:	e7 5e       	subi	r30, 0xE7	; 231
    d122:	f5 4e       	sbci	r31, 0xE5	; 229
    d124:	e4 91       	lpm	r30, Z+
				rtl_RamifyFontEx(0,readycharmap,charlist,compfont,0,color,false);
    d126:	80 e0       	ldi	r24, 0x00	; 0
    d128:	90 e0       	ldi	r25, 0x00	; 0
    d12a:	66 e5       	ldi	r22, 0x56	; 86
    d12c:	78 e8       	ldi	r23, 0x88	; 136
    d12e:	42 e1       	ldi	r20, 0x12	; 18
    d130:	5c e1       	ldi	r21, 0x1C	; 28
    d132:	20 e5       	ldi	r18, 0x50	; 80
    d134:	3a e1       	ldi	r19, 0x1A	; 26
    d136:	00 e0       	ldi	r16, 0x00	; 0
    d138:	ee 2e       	mov	r14, r30
    d13a:	cc 24       	eor	r12, r12
    d13c:	0e 94 06 53 	call	0xa60c	; 0xa60c <rtl_RamifyFontEx>
			 }
			 rtl_Print(ox+3,6,PSTR("READY!"));
    d140:	8a 89       	ldd	r24, Y+18	; 0x12
    d142:	66 e0       	ldi	r22, 0x06	; 6
    d144:	4f e6       	ldi	r20, 0x6F	; 111
    d146:	59 e8       	ldi	r21, 0x89	; 137
    d148:	4c c0       	rjmp	.+152    	; 0xd1e2 <DoPlay+0x11ea>
			return;
		}

		if(state[p] & PAUSED){
    d14a:	90 e0       	ldi	r25, 0x00	; 0
    d14c:	86 fd       	sbrc	r24, 6
    d14e:	09 c0       	rjmp	.+18     	; 0xd162 <DoPlay+0x116a>
    d150:	4b c0       	rjmp	.+150    	; 0xd1e8 <DoPlay+0x11f0>

void DropPiece(uint8_t p);

inline void Intro();

inline void set_vram(uint8_t x, uint8_t y, uint8_t t){vram[(y*VRAM_TILES_H)+x] = t;}
    d152:	b3 e2       	ldi	r27, 0x23	; 35
    d154:	b0 83       	st	Z, r27
    d156:	7e 96       	adiw	r30, 0x1e	; 30

inline void BlankDrawWell(uint8_t p){
	//Draw blank grid
	uint8_t ox = p*16;
	for(uint8_t x=1+ox;x<13+ox;x++)
	for(uint8_t y=0;y<26;y++){
    d158:	e8 17       	cp	r30, r24
    d15a:	f9 07       	cpc	r31, r25
    d15c:	d1 f7       	brne	.-12     	; 0xd152 <DoPlay+0x115a>


inline void BlankDrawWell(uint8_t p){
	//Draw blank grid
	uint8_t ox = p*16;
	for(uint8_t x=1+ox;x<13+ox;x++)
    d15e:	63 94       	inc	r6
    d160:	04 c0       	rjmp	.+8      	; 0xd16a <DoPlay+0x1172>
    d162:	2e 85       	ldd	r18, Y+14	; 0x0e
    d164:	3f 85       	ldd	r19, Y+15	; 0x0f
    d166:	24 5f       	subi	r18, 0xF4	; 244
    d168:	3f 4f       	sbci	r19, 0xFF	; 255
    d16a:	86 2d       	mov	r24, r6
    d16c:	90 e0       	ldi	r25, 0x00	; 0
    d16e:	28 17       	cp	r18, r24
    d170:	39 07       	cpc	r19, r25
    d172:	34 f0       	brlt	.+12     	; 0xd180 <DoPlay+0x1188>
    d174:	fc 01       	movw	r30, r24
    d176:	e0 5e       	subi	r30, 0xE0	; 224
    d178:	fe 4f       	sbci	r31, 0xFE	; 254
	for(uint8_t y=0;y<26;y++){
    d17a:	84 5d       	subi	r24, 0xD4	; 212
    d17c:	9b 4f       	sbci	r25, 0xFB	; 251
    d17e:	e9 cf       	rjmp	.-46     	; 0xd152 <DoPlay+0x115a>
		//	for(uint8_t y=0;y<7;y++){//blank preview(done in dodraw())
			//	set_tile(13+(p*2),y,0);
		//		set_tile(14+(p*2),y,0);
		//	}
			BlankDrawWell(p);
			if(p == 0){
    d180:	bb 20       	and	r11, r11
    d182:	31 f5       	brne	.+76     	; 0xd1d0 <DoPlay+0x11d8>

				rtl_RamifyFontEx(0,pausecharmap,charlist,compfont,0,255,true);
    d184:	80 e0       	ldi	r24, 0x00	; 0
    d186:	90 e0       	ldi	r25, 0x00	; 0
    d188:	6d e5       	ldi	r22, 0x5D	; 93
    d18a:	78 e8       	ldi	r23, 0x88	; 136
    d18c:	42 e1       	ldi	r20, 0x12	; 18
    d18e:	5c e1       	ldi	r21, 0x1C	; 28
    d190:	20 e5       	ldi	r18, 0x50	; 80
    d192:	3a e1       	ldi	r19, 0x1A	; 26
    d194:	00 e0       	ldi	r16, 0x00	; 0
    d196:	ee 24       	eor	r14, r14
    d198:	ea 94       	dec	r14
    d19a:	cc 24       	eor	r12, r12
    d19c:	c3 94       	inc	r12
    d19e:	0e 94 06 53 	call	0xa60c	; 0xa60c <rtl_RamifyFontEx>
				rtl_Print(3,13+cursorpos,PSTR(">"));
    d1a2:	60 91 4d 0f 	lds	r22, 0x0F4D
    d1a6:	63 5f       	subi	r22, 0xF3	; 243
    d1a8:	83 e0       	ldi	r24, 0x03	; 3
    d1aa:	4d e6       	ldi	r20, 0x6D	; 109
    d1ac:	59 e8       	ldi	r21, 0x89	; 137
    d1ae:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
				rtl_Print(4,13,PSTR("RESUME"));
    d1b2:	84 e0       	ldi	r24, 0x04	; 4
    d1b4:	6d e0       	ldi	r22, 0x0D	; 13
    d1b6:	46 e6       	ldi	r20, 0x66	; 102
    d1b8:	59 e8       	ldi	r21, 0x89	; 137
    d1ba:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
				rtl_Print(4,14,PSTR("QUIT"));
    d1be:	84 e0       	ldi	r24, 0x04	; 4
    d1c0:	6e e0       	ldi	r22, 0x0E	; 14
    d1c2:	41 e6       	ldi	r20, 0x61	; 97
    d1c4:	59 e8       	ldi	r21, 0x89	; 137
    d1c6:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
				ramtilestate[0] = NEEDALLRAMMED;//MAKE SURE EVERYTHING IS SET BACK UP AFTER PAUSE
    d1ca:	80 e8       	ldi	r24, 0x80	; 128
    d1cc:	80 93 94 0f 	sts	0x0F94, r24
			}				
			if(globalflashcounter < (GLOBALFLASHCOUNT/2)){
    d1d0:	80 91 01 01 	lds	r24, 0x0101
    d1d4:	87 30       	cpi	r24, 0x07	; 7
    d1d6:	08 f0       	brcs	.+2      	; 0xd1da <DoPlay+0x11e2>
    d1d8:	6e c0       	rjmp	.+220    	; 0xd2b6 <DoPlay+0x12be>
				rtl_Print(ox+3,10,PSTR("PAUSE"));
    d1da:	8a 89       	ldd	r24, Y+18	; 0x12
    d1dc:	6a e0       	ldi	r22, 0x0A	; 10
    d1de:	4b e5       	ldi	r20, 0x5B	; 91
    d1e0:	59 e8       	ldi	r21, 0x89	; 137
    d1e2:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
    d1e6:	67 c0       	rjmp	.+206    	; 0xd2b6 <DoPlay+0x12be>
		*/
		return;
		}
		
		
		if(state[p] & (GAMEOVER|LOSING2)){
    d1e8:	88 71       	andi	r24, 0x18	; 24
    d1ea:	90 70       	andi	r25, 0x00	; 0
    d1ec:	89 2b       	or	r24, r25
    d1ee:	09 f4       	brne	.+2      	; 0xd1f2 <DoPlay+0x11fa>
    d1f0:	62 c0       	rjmp	.+196    	; 0xd2b6 <DoPlay+0x12be>
			if(globalflashcounter < (GLOBALFLASHCOUNT)/2 && crashheight[p] < 8){
    d1f2:	80 91 01 01 	lds	r24, 0x0101
    d1f6:	87 30       	cpi	r24, 0x07	; 7
    d1f8:	d0 f4       	brcc	.+52     	; 0xd22e <DoPlay+0x1236>
    d1fa:	f2 01       	movw	r30, r4
    d1fc:	80 81       	ld	r24, Z
    d1fe:	88 30       	cpi	r24, 0x08	; 8
    d200:	b0 f4       	brcc	.+44     	; 0xd22e <DoPlay+0x1236>
				if(p == winner){
    d202:	80 91 49 0f 	lds	r24, 0x0F49
    d206:	b8 16       	cp	r11, r24
    d208:	29 f4       	brne	.+10     	; 0xd214 <DoPlay+0x121c>
					rtl_Print(ox+2,10,PSTR("WINNER!!"));
    d20a:	87 2d       	mov	r24, r7
    d20c:	6a e0       	ldi	r22, 0x0A	; 10
    d20e:	42 e5       	ldi	r20, 0x52	; 82
    d210:	59 e8       	ldi	r21, 0x89	; 137
    d212:	0b c0       	rjmp	.+22     	; 0xd22a <DoPlay+0x1232>
				}
				else if(winner == 255){//draw
    d214:	8f 3f       	cpi	r24, 0xFF	; 255
    d216:	29 f4       	brne	.+10     	; 0xd222 <DoPlay+0x122a>
					rtl_Print(ox+3,10,PSTR("DRAW!!"));
    d218:	8a 89       	ldd	r24, Y+18	; 0x12
    d21a:	6a e0       	ldi	r22, 0x0A	; 10
    d21c:	4b e4       	ldi	r20, 0x4B	; 75
    d21e:	59 e8       	ldi	r21, 0x89	; 137
    d220:	04 c0       	rjmp	.+8      	; 0xd22a <DoPlay+0x1232>
				else{
				//	if(!game_mode && ox>10){//cpu spot
					//	rtl_Print(ox+1,10,PSTR("CPU FAIL!!"));
				//	}
					//else
						rtl_Print(ox+1,10,PSTR("TRY AGAIN!"));
    d222:	8d 85       	ldd	r24, Y+13	; 0x0d
    d224:	6a e0       	ldi	r22, 0x0A	; 10
    d226:	40 e4       	ldi	r20, 0x40	; 64
    d228:	59 e8       	ldi	r21, 0x89	; 137
    d22a:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
				}
			}
			if(p == winner && !game_mode){
    d22e:	90 91 49 0f 	lds	r25, 0x0F49
    d232:	b9 16       	cp	r11, r25
    d234:	11 f5       	brne	.+68     	; 0xd27a <DoPlay+0x1282>
    d236:	80 91 68 0e 	lds	r24, 0x0E68
    d23a:	88 23       	and	r24, r24
    d23c:	f1 f4       	brne	.+60     	; 0xd27a <DoPlay+0x1282>
				if(!p){//only draw this for human player, or never in 2 player
    d23e:	bb 20       	and	r11, r11
    d240:	d1 f5       	brne	.+116    	; 0xd2b6 <DoPlay+0x12be>
					if(cpuskill < 10){
    d242:	80 91 37 0e 	lds	r24, 0x0E37
    d246:	8a 30       	cpi	r24, 0x0A	; 10
    d248:	78 f4       	brcc	.+30     	; 0xd268 <DoPlay+0x1270>
						if(crashheight[p] < 3){
    d24a:	d2 01       	movw	r26, r4
    d24c:	8c 91       	ld	r24, X
    d24e:	83 30       	cpi	r24, 0x03	; 3
    d250:	90 f5       	brcc	.+100    	; 0xd2b6 <DoPlay+0x12be>
							rtl_Print(ox+2,20,PSTR("NOW TRY"));
    d252:	87 2d       	mov	r24, r7
    d254:	64 e1       	ldi	r22, 0x14	; 20
    d256:	48 e3       	ldi	r20, 0x38	; 56
    d258:	59 e8       	ldi	r21, 0x89	; 137
    d25a:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
							rtl_Print(ox+2,21,PSTR("LEVEL"));
    d25e:	87 2d       	mov	r24, r7
    d260:	65 e1       	ldi	r22, 0x15	; 21
    d262:	42 e3       	ldi	r20, 0x32	; 50
    d264:	59 e8       	ldi	r21, 0x89	; 137
    d266:	1f c0       	rjmp	.+62     	; 0xd2a6 <DoPlay+0x12ae>
							ColumnsPrint1num(ox+8,21,cpuskill);
						}					
					}else{
						if(crashheight[0] < 3)
    d268:	80 91 7e 0f 	lds	r24, 0x0F7E
    d26c:	83 30       	cpi	r24, 0x03	; 3
    d26e:	18 f5       	brcc	.+70     	; 0xd2b6 <DoPlay+0x12be>
							rtl_Print(ox+1,20,PSTR("INCREDIBLE!"));
    d270:	8d 85       	ldd	r24, Y+13	; 0x0d
    d272:	64 e1       	ldi	r22, 0x14	; 20
    d274:	46 e2       	ldi	r20, 0x26	; 38
    d276:	59 e8       	ldi	r21, 0x89	; 137
    d278:	b4 cf       	rjmp	.-152    	; 0xd1e2 <DoPlay+0x11ea>
						//rtl_Print(ox+1,21,PSTR("COLUMNS"));
						//rtl_Print(ox+1,22,PSTR("MASTER!!!"));
					}
				}
			}
			else if(game_mode == 0 && p == 0){
    d27a:	80 91 68 0e 	lds	r24, 0x0E68
    d27e:	88 23       	and	r24, r24
    d280:	d1 f4       	brne	.+52     	; 0xd2b6 <DoPlay+0x12be>
    d282:	bb 20       	and	r11, r11
    d284:	c1 f4       	brne	.+48     	; 0xd2b6 <DoPlay+0x12be>
				if(winner != 255 && crashheight[p] < 3){
    d286:	9f 3f       	cpi	r25, 0xFF	; 255
    d288:	b1 f0       	breq	.+44     	; 0xd2b6 <DoPlay+0x12be>
    d28a:	d2 01       	movw	r26, r4
    d28c:	8c 91       	ld	r24, X
    d28e:	83 30       	cpi	r24, 0x03	; 3
    d290:	90 f4       	brcc	.+36     	; 0xd2b6 <DoPlay+0x12be>
					rtl_Print(ox+2,20,PSTR("BACK TO"));
    d292:	87 2d       	mov	r24, r7
    d294:	64 e1       	ldi	r22, 0x14	; 20
    d296:	4e e1       	ldi	r20, 0x1E	; 30
    d298:	59 e8       	ldi	r21, 0x89	; 137
    d29a:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
					rtl_Print(ox+2,21,PSTR("LEVEL"));
    d29e:	87 2d       	mov	r24, r7
    d2a0:	65 e1       	ldi	r22, 0x15	; 21
    d2a2:	48 e1       	ldi	r20, 0x18	; 24
    d2a4:	59 e8       	ldi	r21, 0x89	; 137
    d2a6:	0e 94 bb 53 	call	0xa776	; 0xa776 <rtl_Print>
    d2aa:	80 91 37 0e 	lds	r24, 0x0E37
    d2ae:	84 5b       	subi	r24, 0xB4	; 180
    d2b0:	e8 89       	ldd	r30, Y+16	; 0x10
    d2b2:	f9 89       	ldd	r31, Y+17	; 0x11
    d2b4:	80 83       	st	Z, r24
		}		
wellend:
		ox = 13+(p*2);

		StateDraw(p);
		if(!(state[p] & (LOSING|LOSING2|GAMEOVER|PAUSED))){
    d2b6:	d1 01       	movw	r26, r2
    d2b8:	8c 91       	ld	r24, X
    d2ba:	8c 75       	andi	r24, 0x5C	; 92
    d2bc:	19 f0       	breq	.+6      	; 0xd2c4 <DoPlay+0x12cc>
    d2be:	8d e0       	ldi	r24, 0x0D	; 13
    d2c0:	90 e0       	ldi	r25, 0x00	; 0
    d2c2:	4a c0       	rjmp	.+148    	; 0xd358 <DoPlay+0x1360>
    d2c4:	1b 89       	ldd	r17, Y+19	; 0x13
    d2c6:	13 5f       	subi	r17, 0xF3	; 243

			if(cursetype[p] != CURSENOPREVIEW){
    d2c8:	ec 89       	ldd	r30, Y+20	; 0x14
    d2ca:	fd 89       	ldd	r31, Y+21	; 0x15
    d2cc:	80 81       	ld	r24, Z
    d2ce:	80 32       	cpi	r24, 0x20	; 32
    d2d0:	d9 f0       	breq	.+54     	; 0xd308 <DoPlay+0x1310>
    d2d2:	ee 80       	ldd	r14, Y+6	; 0x06
    d2d4:	ff 80       	ldd	r15, Y+7	; 0x07
    d2d6:	22 e3       	ldi	r18, 0x32	; 50
    d2d8:	3f e0       	ldi	r19, 0x0F	; 15
    d2da:	e2 0e       	add	r14, r18
    d2dc:	f3 1e       	adc	r15, r19
    d2de:	00 e0       	ldi	r16, 0x00	; 0
				for(uint8_t i=0;i<3;i++){
					if(!(preview[(p*3)+i] & FLASHINGJEWEL) || (globalflashcounter&4))
    d2e0:	d7 01       	movw	r26, r14
    d2e2:	4c 91       	ld	r20, X
    d2e4:	45 ff       	sbrs	r20, 5
    d2e6:	04 c0       	rjmp	.+8      	; 0xd2f0 <DoPlay+0x12f8>
    d2e8:	80 91 01 01 	lds	r24, 0x0101
    d2ec:	82 ff       	sbrs	r24, 2
    d2ee:	40 e0       	ldi	r20, 0x00	; 0
						t = preview[(p*3)+i];
					else
						t = 0;
					
					DrawJewel(ox,oy+(i<<1),t);
    d2f0:	60 2f       	mov	r22, r16
    d2f2:	66 0f       	add	r22, r22
    d2f4:	81 2f       	mov	r24, r17
    d2f6:	0e 94 aa 56 	call	0xad54	; 0xad54 <DrawJewel>

		StateDraw(p);
		if(!(state[p] & (LOSING|LOSING2|GAMEOVER|PAUSED))){

			if(cursetype[p] != CURSENOPREVIEW){
				for(uint8_t i=0;i<3;i++){
    d2fa:	0f 5f       	subi	r16, 0xFF	; 255
    d2fc:	08 94       	sec
    d2fe:	e1 1c       	adc	r14, r1
    d300:	f1 1c       	adc	r15, r1
    d302:	03 30       	cpi	r16, 0x03	; 3
    d304:	69 f7       	brne	.-38     	; 0xd2e0 <DoPlay+0x12e8>
    d306:	11 c0       	rjmp	.+34     	; 0xd32a <DoPlay+0x1332>
					DrawJewel(ox,oy+(i<<1),t);
				}				
			}
			else{
				uint8_t off = ox+(oy*VRAM_TILES_H);
				for(uint8_t i=0;i<6;i++){
    d308:	8b 89       	ldd	r24, Y+19	; 0x13
    d30a:	8f 53       	subi	r24, 0x3F	; 63
					vram[off++] = RAM_TILES_COUNT;
    d30c:	e1 2f       	mov	r30, r17
    d30e:	f0 e0       	ldi	r31, 0x00	; 0
    d310:	e0 5e       	subi	r30, 0xE0	; 224
    d312:	fe 4f       	sbci	r31, 0xFE	; 254
    d314:	b3 e2       	ldi	r27, 0x23	; 35
    d316:	b0 83       	st	Z, r27
					vram[off] = RAM_TILES_COUNT;
    d318:	1f 5f       	subi	r17, 0xFF	; 255
    d31a:	e1 2f       	mov	r30, r17
    d31c:	f0 e0       	ldi	r31, 0x00	; 0
    d31e:	e0 5e       	subi	r30, 0xE0	; 224
    d320:	fe 4f       	sbci	r31, 0xFE	; 254
    d322:	b0 83       	st	Z, r27
    d324:	13 5e       	subi	r17, 0xE3	; 227
					DrawJewel(ox,oy+(i<<1),t);
				}				
			}
			else{
				uint8_t off = ox+(oy*VRAM_TILES_H);
				for(uint8_t i=0;i<6;i++){
    d326:	18 17       	cp	r17, r24
    d328:	89 f7       	brne	.-30     	; 0xd30c <DoPlay+0x1314>
					off += VRAM_TILES_H-1;
				}
			}				
					
			//draw score
			ColumnsPrint2num(14+(p*2),6,score[p]);
    d32a:	ee 89       	ldd	r30, Y+22	; 0x16
    d32c:	ff 89       	ldd	r31, Y+23	; 0x17
    d32e:	e8 5c       	subi	r30, 0xC8	; 200
    d330:	f0 4f       	sbci	r31, 0xF0	; 240
    d332:	40 81       	ld	r20, Z
    d334:	8b 89       	ldd	r24, Y+19	; 0x13
    d336:	82 5f       	subi	r24, 0xF2	; 242
    d338:	66 e0       	ldi	r22, 0x06	; 6
    d33a:	50 e0       	ldi	r21, 0x00	; 0
    d33c:	0e 94 99 54 	call	0xa932	; 0xa932 <ColumnsPrint2num>
    d340:	12 c0       	rjmp	.+36     	; 0xd366 <DoPlay+0x136e>
extern void CpuFillPad();


inline void set_tile(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t+RAM_TILES_COUNT;
    d342:	a3 e2       	ldi	r26, 0x23	; 35
    d344:	fa 2e       	mov	r15, r26
    d346:	f0 82       	st	Z, r15
    d348:	7e 96       	adiw	r30, 0x1e	; 30

		}
		else{
			for(uint8_t i=13+0;i<13+4;i++)
			for(uint8_t j=0;j<7;j++)
    d34a:	e2 17       	cp	r30, r18
    d34c:	f3 07       	cpc	r31, r19
    d34e:	c9 f7       	brne	.-14     	; 0xd342 <DoPlay+0x134a>
    d350:	01 96       	adiw	r24, 0x01	; 1
			//draw score
			ColumnsPrint2num(14+(p*2),6,score[p]);

		}
		else{
			for(uint8_t i=13+0;i<13+4;i++)
    d352:	81 31       	cpi	r24, 0x11	; 17
    d354:	91 05       	cpc	r25, r1
    d356:	39 f0       	breq	.+14     	; 0xd366 <DoPlay+0x136e>
    d358:	fc 01       	movw	r30, r24
    d35a:	e0 5e       	subi	r30, 0xE0	; 224
    d35c:	fe 4f       	sbci	r31, 0xFE	; 254
			for(uint8_t j=0;j<7;j++)
    d35e:	9c 01       	movw	r18, r24
    d360:	2e 50       	subi	r18, 0x0E	; 14
    d362:	3e 4f       	sbci	r19, 0xFE	; 254
    d364:	ee cf       	rjmp	.-36     	; 0xd342 <DoPlay+0x134a>
			//draw score
			ColumnsPrint2num(14+(p*2),6,score[p]);

		}
		else{
			for(uint8_t i=13+0;i<13+4;i++)
    d366:	2e 89       	ldd	r18, Y+22	; 0x16
    d368:	3f 89       	ldd	r19, Y+23	; 0x17
    d36a:	2f 5f       	subi	r18, 0xFF	; 255
    d36c:	3f 4f       	sbci	r19, 0xFF	; 255
    d36e:	3f 8b       	std	Y+23, r19	; 0x17
    d370:	2e 8b       	std	Y+22, r18	; 0x16
    d372:	4c 89       	ldd	r20, Y+20	; 0x14
    d374:	5d 89       	ldd	r21, Y+21	; 0x15
    d376:	4f 5f       	subi	r20, 0xFF	; 255
    d378:	5f 4f       	sbci	r21, 0xFF	; 255
    d37a:	5d 8b       	std	Y+21, r21	; 0x15
    d37c:	4c 8b       	std	Y+20, r20	; 0x14
    d37e:	5b 89       	ldd	r21, Y+19	; 0x13
    d380:	5e 5f       	subi	r21, 0xFE	; 254
    d382:	5b 8b       	std	Y+19, r21	; 0x13
    d384:	08 94       	sec
    d386:	21 1c       	adc	r2, r1
    d388:	31 1c       	adc	r3, r1
    d38a:	6a 89       	ldd	r22, Y+18	; 0x12
    d38c:	60 5f       	subi	r22, 0xF0	; 240
    d38e:	6a 8b       	std	Y+18, r22	; 0x12
    d390:	08 94       	sec
    d392:	41 1c       	adc	r4, r1
    d394:	51 1c       	adc	r5, r1
    d396:	70 e1       	ldi	r23, 0x10	; 16
    d398:	77 0e       	add	r7, r23
    d39a:	88 89       	ldd	r24, Y+16	; 0x10
    d39c:	99 89       	ldd	r25, Y+17	; 0x11
    d39e:	40 96       	adiw	r24, 0x10	; 16
    d3a0:	99 8b       	std	Y+17, r25	; 0x11
    d3a2:	88 8b       	std	Y+16, r24	; 0x10
    d3a4:	ae 85       	ldd	r26, Y+14	; 0x0e
    d3a6:	bf 85       	ldd	r27, Y+15	; 0x0f
    d3a8:	50 96       	adiw	r26, 0x10	; 16
    d3aa:	bf 87       	std	Y+15, r27	; 0x0f
    d3ac:	ae 87       	std	Y+14, r26	; 0x0e
    d3ae:	bd 85       	ldd	r27, Y+13	; 0x0d
    d3b0:	b0 5f       	subi	r27, 0xF0	; 240
    d3b2:	bd 87       	std	Y+13, r27	; 0x0d
    d3b4:	e0 e6       	ldi	r30, 0x60	; 96
    d3b6:	f0 e0       	ldi	r31, 0x00	; 0
    d3b8:	8e 0e       	add	r8, r30
    d3ba:	9f 1e       	adc	r9, r31
    d3bc:	fc 85       	ldd	r31, Y+12	; 0x0c
    d3be:	fd 5f       	subi	r31, 0xFD	; 253
    d3c0:	fc 87       	std	Y+12, r31	; 0x0c
    d3c2:	2b 85       	ldd	r18, Y+11	; 0x0b
    d3c4:	2d 5f       	subi	r18, 0xFD	; 253
    d3c6:	2b 87       	std	Y+11, r18	; 0x0b
    d3c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    d3ca:	3c 5f       	subi	r19, 0xFC	; 252
    d3cc:	3a 87       	std	Y+10, r19	; 0x0a
    d3ce:	48 85       	ldd	r20, Y+8	; 0x08
    d3d0:	59 85       	ldd	r21, Y+9	; 0x09
    d3d2:	4f 5f       	subi	r20, 0xFF	; 255
    d3d4:	5f 4f       	sbci	r21, 0xFF	; 255
    d3d6:	59 87       	std	Y+9, r21	; 0x09
    d3d8:	48 87       	std	Y+8, r20	; 0x08
    d3da:	6e 81       	ldd	r22, Y+6	; 0x06
    d3dc:	7f 81       	ldd	r23, Y+7	; 0x07
    d3de:	6d 5f       	subi	r22, 0xFD	; 253
    d3e0:	7f 4f       	sbci	r23, 0xFF	; 255
    d3e2:	7f 83       	std	Y+7, r23	; 0x07
    d3e4:	6e 83       	std	Y+6, r22	; 0x06
	//Draw field map
	if(game_state & GS_FIRSTTICK || crashedredrawtime)// || state[0] & (LOSING|LOSING2|GAMEOVER))
		OneTimeDraw();

	//Draw well
	for(uint8_t p=0;p<MAX_PLAYERS;p++){
    d3e6:	7b 89       	ldd	r23, Y+19	; 0x13
    d3e8:	74 30       	cpi	r23, 0x04	; 4
    d3ea:	09 f0       	breq	.+2      	; 0xd3ee <DoPlay+0x13f6>
    d3ec:	90 cd       	rjmp	.-1248   	; 0xcf0e <DoPlay+0xf16>
	crashedredrawtime--;
}

inline void UpdateTimers(){
//HANDLE TIMERS AND PRIORITIES FOR PCM CHANNEL
		if(pcm_timeleft)
    d3ee:	80 91 52 0f 	lds	r24, 0x0F52
    d3f2:	88 23       	and	r24, r24
    d3f4:	19 f0       	breq	.+6      	; 0xd3fc <DoPlay+0x1404>
			pcm_timeleft--;
    d3f6:	81 50       	subi	r24, 0x01	; 1
    d3f8:	80 93 52 0f 	sts	0x0F52, r24

		if(globalflashcounter)
    d3fc:	80 91 01 01 	lds	r24, 0x0101
    d400:	88 23       	and	r24, r24
    d402:	11 f0       	breq	.+4      	; 0xd408 <DoPlay+0x1410>
			globalflashcounter--;
    d404:	81 50       	subi	r24, 0x01	; 1
    d406:	01 c0       	rjmp	.+2      	; 0xd40a <DoPlay+0x1412>
		else
			globalflashcounter = GLOBALFLASHCOUNT;
    d408:	8f e0       	ldi	r24, 0x0F	; 15
    d40a:	80 93 01 01 	sts	0x0101, r24

		flashcount++;
    d40e:	80 91 67 0f 	lds	r24, 0x0F67
    d412:	8f 5f       	subi	r24, 0xFF	; 255
    d414:	80 93 67 0f 	sts	0x0F67, r24
		
		if(flashcount > 12)//TODO  / 2
    d418:	8d 30       	cpi	r24, 0x0D	; 13
    d41a:	18 f0       	brcs	.+6      	; 0xd422 <DoPlay+0x142a>
			flashcount = 7;
    d41c:	87 e0       	ldi	r24, 0x07	; 7
    d41e:	80 93 67 0f 	sts	0x0F67, r24

		if(magicjewelsonscreen){
    d422:	80 91 2f 0e 	lds	r24, 0x0E2F
    d426:	88 23       	and	r24, r24
    d428:	d1 f0       	breq	.+52     	; 0xd45e <DoPlay+0x1466>
			if(!magiccolorwait){
    d42a:	80 91 30 0e 	lds	r24, 0x0E30
    d42e:	88 23       	and	r24, r24
    d430:	99 f4       	brne	.+38     	; 0xd458 <DoPlay+0x1460>
				magiccolorwait = 6/2;
    d432:	83 e0       	ldi	r24, 0x03	; 3
    d434:	80 93 30 0e 	sts	0x0E30, r24
			if(magiccolor < 5)
    d438:	80 91 3d 0e 	lds	r24, 0x0E3D
    d43c:	85 30       	cpi	r24, 0x05	; 5
    d43e:	20 f4       	brcc	.+8      	; 0xd448 <DoPlay+0x1450>
				magiccolor++;
    d440:	8f 5f       	subi	r24, 0xFF	; 255
    d442:	80 93 3d 0e 	sts	0x0E3D, r24
    d446:	02 c0       	rjmp	.+4      	; 0xd44c <DoPlay+0x1454>
			else
				magiccolor = 0;
    d448:	10 92 3d 0e 	sts	0x0E3D, r1
			ramtilestate[0] |= NEEDMAGICRAMMED;
    d44c:	80 91 94 0f 	lds	r24, 0x0F94
    d450:	81 60       	ori	r24, 0x01	; 1
    d452:	80 93 94 0f 	sts	0x0F94, r24
    d456:	03 c0       	rjmp	.+6      	; 0xd45e <DoPlay+0x1466>
		}
		else
			magiccolorwait--;
    d458:	81 50       	subi	r24, 0x01	; 1
    d45a:	80 93 30 0e 	sts	0x0E30, r24
		}

		if((game_state & GS_DEMO) && ++demotime > DEMOLENGTH){
    d45e:	80 91 6a 0e 	lds	r24, 0x0E6A
    d462:	81 ff       	sbrs	r24, 1
    d464:	12 c0       	rjmp	.+36     	; 0xd48a <DoPlay+0x1492>
    d466:	80 91 ef 0f 	lds	r24, 0x0FEF
    d46a:	90 91 f0 0f 	lds	r25, 0x0FF0
    d46e:	01 96       	adiw	r24, 0x01	; 1
    d470:	90 93 f0 0f 	sts	0x0FF0, r25
    d474:	80 93 ef 0f 	sts	0x0FEF, r24
    d478:	81 59       	subi	r24, 0x91	; 145
    d47a:	96 40       	sbci	r25, 0x06	; 6
    d47c:	30 f0       	brcs	.+12     	; 0xd48a <DoPlay+0x1492>
			demotime = 0;
    d47e:	10 92 f0 0f 	sts	0x0FF0, r1
    d482:	10 92 ef 0f 	sts	0x0FEF, r1
			game_state = GS_TITLE;
    d486:	10 92 6a 0e 	sts	0x0E6A, r1
		
		CalculateMusicTempo();
		DoDraw();
		UpdateTimers();
		
		if(game_state & GS_FIRSTTICK)
    d48a:	90 91 6a 0e 	lds	r25, 0x0E6A
    d48e:	95 ff       	sbrs	r25, 5
    d490:	04 c0       	rjmp	.+8      	; 0xd49a <DoPlay+0x14a2>
			game_state ^= GS_FIRSTTICK;
    d492:	80 e2       	ldi	r24, 0x20	; 32
    d494:	98 27       	eor	r25, r24
    d496:	90 93 6a 0e 	sts	0x0E6A, r25
}

inline void UpdateCrashedPieces(){
	//x/y values most significant 5 bits are used as tile coords, lowest 3 bits are used for subposition
	//TODO CRASHED MAGIC JEWELS DONT WORK RIGHT
	if(!crashedredrawtime)
    d49a:	80 91 55 0f 	lds	r24, 0x0F55
    d49e:	88 23       	and	r24, r24
    d4a0:	09 f4       	brne	.+2      	; 0xd4a4 <DoPlay+0x14ac>
    d4a2:	89 c0       	rjmp	.+274    	; 0xd5b6 <DoPlay+0x15be>
    d4a4:	77 e5       	ldi	r23, 0x57	; 87
    d4a6:	67 2e       	mov	r6, r23
    d4a8:	7f e0       	ldi	r23, 0x0F	; 15
    d4aa:	77 2e       	mov	r7, r23
    d4ac:	61 e8       	ldi	r22, 0x81	; 129
    d4ae:	c6 2e       	mov	r12, r22
    d4b0:	6f e0       	ldi	r22, 0x0F	; 15
    d4b2:	d6 2e       	mov	r13, r22
    d4b4:	58 e4       	ldi	r21, 0x48	; 72
    d4b6:	e5 2e       	mov	r14, r21
    d4b8:	5e e0       	ldi	r21, 0x0E	; 14
    d4ba:	f5 2e       	mov	r15, r21
    d4bc:	49 ee       	ldi	r20, 0xE9	; 233
    d4be:	a4 2e       	mov	r10, r20
    d4c0:	4f e0       	ldi	r20, 0x0F	; 15
    d4c2:	b4 2e       	mov	r11, r20
    d4c4:	01 e3       	ldi	r16, 0x31	; 49
    d4c6:	1e e0       	ldi	r17, 0x0E	; 14
    d4c8:	3e e1       	ldi	r19, 0x1E	; 30
    d4ca:	93 2e       	mov	r9, r19
		crashedpiecex[i] += crashedxvel[i];
		crashedpiecey[i] += crashedyvel[i];
		crashedyvel[i] += 2;
		
		if(crashedpiecex[i] > (26<<3)){
			crashedtype[i] = 255;//disabled
    d4cc:	88 24       	eor	r8, r8
    d4ce:	8a 94       	dec	r8
	//x/y values most significant 5 bits are used as tile coords, lowest 3 bits are used for subposition
	//TODO CRASHED MAGIC JEWELS DONT WORK RIGHT
	if(!crashedredrawtime)
		return;
	for(uint8_t i=0;i<MAX_PLAYERS*3;i++){
		if(crashedtype[i] == 255)//not active
    d4d0:	f3 01       	movw	r30, r6
    d4d2:	30 81       	ld	r19, Z
    d4d4:	3f 3f       	cpi	r19, 0xFF	; 255
    d4d6:	09 f4       	brne	.+2      	; 0xd4da <DoPlay+0x14e2>
    d4d8:	55 c0       	rjmp	.+170    	; 0xd584 <DoPlay+0x158c>
			continue;
		
		//apply velocity
		crashedpiecex[i] += crashedxvel[i];
    d4da:	d5 01       	movw	r26, r10
    d4dc:	8c 91       	ld	r24, X
    d4de:	99 27       	eor	r25, r25
    d4e0:	87 fd       	sbrc	r24, 7
    d4e2:	90 95       	com	r25
    d4e4:	f7 01       	movw	r30, r14
    d4e6:	a0 81       	ld	r26, Z
    d4e8:	b1 81       	ldd	r27, Z+1	; 0x01
    d4ea:	a8 0f       	add	r26, r24
    d4ec:	b9 1f       	adc	r27, r25
    d4ee:	b1 83       	std	Z+1, r27	; 0x01
    d4f0:	a0 83       	st	Z, r26
		crashedpiecey[i] += crashedyvel[i];
    d4f2:	f8 01       	movw	r30, r16
    d4f4:	20 81       	ld	r18, Z
    d4f6:	82 2f       	mov	r24, r18
    d4f8:	99 27       	eor	r25, r25
    d4fa:	87 fd       	sbrc	r24, 7
    d4fc:	90 95       	com	r25
    d4fe:	f6 01       	movw	r30, r12
    d500:	40 81       	ld	r20, Z
    d502:	51 81       	ldd	r21, Z+1	; 0x01
    d504:	48 0f       	add	r20, r24
    d506:	59 1f       	adc	r21, r25
    d508:	51 83       	std	Z+1, r21	; 0x01
    d50a:	40 83       	st	Z, r20
		crashedyvel[i] += 2;
    d50c:	2e 5f       	subi	r18, 0xFE	; 254
    d50e:	f8 01       	movw	r30, r16
    d510:	20 83       	st	Z, r18
		
		if(crashedpiecex[i] > (26<<3)){
    d512:	a1 3d       	cpi	r26, 0xD1	; 209
    d514:	b1 05       	cpc	r27, r1
    d516:	18 f0       	brcs	.+6      	; 0xd51e <DoPlay+0x1526>
			crashedtype[i] = 255;//disabled
    d518:	d3 01       	movw	r26, r6
    d51a:	8c 92       	st	X, r8
    d51c:	33 c0       	rjmp	.+102    	; 0xd584 <DoPlay+0x158c>
			continue;
		}
		if(crashedpiecey[i] > (26<<3))
    d51e:	41 3d       	cpi	r20, 0xD1	; 209
    d520:	51 05       	cpc	r21, r1
    d522:	80 f5       	brcc	.+96     	; 0xd584 <DoPlay+0x158c>
			continue;
		
		uint8_t x = crashedpiecex[i]>>3;
    d524:	23 e0       	ldi	r18, 0x03	; 3
    d526:	b6 95       	lsr	r27
    d528:	a7 95       	ror	r26
    d52a:	2a 95       	dec	r18
    d52c:	e1 f7       	brne	.-8      	; 0xd526 <DoPlay+0x152e>
		uint8_t y = crashedpiecey[i]>>3;
    d52e:	93 e0       	ldi	r25, 0x03	; 3
    d530:	56 95       	lsr	r21
    d532:	47 95       	ror	r20
    d534:	9a 95       	dec	r25
    d536:	e1 f7       	brne	.-8      	; 0xd530 <DoPlay+0x1538>
    d538:	24 2f       	mov	r18, r20
		uint8_t t = crashedtype[i];
		set_vram(x+0,y+0,t++);
    d53a:	73 2f       	mov	r23, r19
    d53c:	7f 5f       	subi	r23, 0xFF	; 255
    d53e:	49 9d       	mul	r20, r9
    d540:	c0 01       	movw	r24, r0
    d542:	11 24       	eor	r1, r1
    d544:	4a 2f       	mov	r20, r26
    d546:	50 e0       	ldi	r21, 0x00	; 0
    d548:	40 5e       	subi	r20, 0xE0	; 224
    d54a:	5e 4f       	sbci	r21, 0xFE	; 254
    d54c:	fa 01       	movw	r30, r20
    d54e:	e8 0f       	add	r30, r24
    d550:	f9 1f       	adc	r31, r25
    d552:	30 83       	st	Z, r19
		set_vram(x+1,y+0,t++);
    d554:	67 2f       	mov	r22, r23
    d556:	6f 5f       	subi	r22, 0xFF	; 255
    d558:	af 5f       	subi	r26, 0xFF	; 255
    d55a:	b0 e0       	ldi	r27, 0x00	; 0
    d55c:	80 5e       	subi	r24, 0xE0	; 224
    d55e:	9e 4f       	sbci	r25, 0xFE	; 254
    d560:	8a 0f       	add	r24, r26
    d562:	9b 1f       	adc	r25, r27
    d564:	fc 01       	movw	r30, r24
    d566:	70 83       	st	Z, r23
inline void UpdateCrashedPieces(){
	//x/y values most significant 5 bits are used as tile coords, lowest 3 bits are used for subposition
	//TODO CRASHED MAGIC JEWELS DONT WORK RIGHT
	if(!crashedredrawtime)
		return;
	for(uint8_t i=0;i<MAX_PLAYERS*3;i++){
    d568:	2f 5f       	subi	r18, 0xFF	; 255
    d56a:	29 9d       	mul	r18, r9
    d56c:	90 01       	movw	r18, r0
    d56e:	11 24       	eor	r1, r1
    d570:	42 0f       	add	r20, r18
    d572:	53 1f       	adc	r21, r19
    d574:	fa 01       	movw	r30, r20
    d576:	60 83       	st	Z, r22
    d578:	a0 5e       	subi	r26, 0xE0	; 224
    d57a:	be 4f       	sbci	r27, 0xFE	; 254
    d57c:	a2 0f       	add	r26, r18
    d57e:	b3 1f       	adc	r27, r19
    d580:	6f 5f       	subi	r22, 0xFF	; 255
    d582:	6c 93       	st	X, r22
    d584:	08 94       	sec
    d586:	61 1c       	adc	r6, r1
    d588:	71 1c       	adc	r7, r1
    d58a:	22 e0       	ldi	r18, 0x02	; 2
    d58c:	30 e0       	ldi	r19, 0x00	; 0
    d58e:	c2 0e       	add	r12, r18
    d590:	d3 1e       	adc	r13, r19
    d592:	e2 0e       	add	r14, r18
    d594:	f3 1e       	adc	r15, r19
    d596:	08 94       	sec
    d598:	a1 1c       	adc	r10, r1
    d59a:	b1 1c       	adc	r11, r1
    d59c:	0f 5f       	subi	r16, 0xFF	; 255
    d59e:	1f 4f       	sbci	r17, 0xFF	; 255
    d5a0:	3d e5       	ldi	r19, 0x5D	; 93
    d5a2:	63 16       	cp	r6, r19
    d5a4:	3f e0       	ldi	r19, 0x0F	; 15
    d5a6:	73 06       	cpc	r7, r19
    d5a8:	09 f0       	breq	.+2      	; 0xd5ac <DoPlay+0x15b4>
    d5aa:	92 cf       	rjmp	.-220    	; 0xd4d0 <DoPlay+0x14d8>
		set_vram(x+0,y+0,t++);
		set_vram(x+1,y+0,t++);
		set_vram(x+0,y+1,t++);
		set_vram(x+1,y+1,t++);
	}
	crashedredrawtime--;
    d5ac:	80 91 55 0f 	lds	r24, 0x0F55
    d5b0:	81 50       	subi	r24, 0x01	; 1
    d5b2:	80 93 55 0f 	sts	0x0F55, r24
//	}
//UPDATECRASHEDPIECES://TODO, IF CRASHED PIECES ARE STILL ON SCREEN WHEN GAME OVER COMES, THEY GET STUCK
		UpdateCrashedPieces();
		RamTileStateMachine();//take care of all gameplay ram tile updates
    d5b6:	0e 94 ef 57 	call	0xafde	; 0xafde <RamTileStateMachine>

inline void CpuThink(){//TODO USE LOCAL VARIABLES FOR ANYTHING POSSIBLE
	//TODO FIND SOME RANDOM INITIAL SEEDS THE CPU PLAYS GOOD GAMES WITH AND STORE ~200 IN ARRAY FOR "GUARANTEED" GOOD CPU PLAYER
	//TODO SEE IF ALL EVALUATION CAN BE DONE WITH 8 BIT
	//FOR EACH INITIAL MOVE, ONLY ADD SCORE FOR BEST SECOND MOVE NOT ALL. 
	oldpadstate[1] = padstate[1] = 0;		
    d5ba:	10 92 45 0e 	sts	0x0E45, r1
    d5be:	10 92 44 0e 	sts	0x0E44, r1
    d5c2:	10 92 41 0e 	sts	0x0E41, r1
    d5c6:	10 92 40 0e 	sts	0x0E40, r1
	if((game_state & GS_FIRSTTICK) || !cpustate || state[1] & (APPLYGRAVITY|SCORING|EXPLODING|LOSING|LOSING2|GAMEOVER|GETREADY))
    d5ca:	80 91 6a 0e 	lds	r24, 0x0E6A
    d5ce:	85 ff       	sbrs	r24, 5
    d5d0:	02 c0       	rjmp	.+4      	; 0xd5d6 <DoPlay+0x15de>
    d5d2:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
    d5d6:	90 91 6b 0e 	lds	r25, 0x0E6B
    d5da:	99 23       	and	r25, r25
    d5dc:	11 f4       	brne	.+4      	; 0xd5e2 <DoPlay+0x15ea>
    d5de:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
    d5e2:	80 91 70 0e 	lds	r24, 0x0E70
    d5e6:	8f 7b       	andi	r24, 0xBF	; 191
    d5e8:	11 f0       	breq	.+4      	; 0xd5ee <DoPlay+0x15f6>
    d5ea:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
		return;
	
	if(cpustate & CPUMOVEBLOCKED){
    d5ee:	96 ff       	sbrs	r25, 6
    d5f0:	39 c0       	rjmp	.+114    	; 0xd664 <DoPlay+0x166c>
		cpudecision[1] = 2;//attack!
}


inline void CpuHandleBlocked(){
	if(piecex[1] > cpudecision[0]){//we tried to go left but it was blocked, so eliminate all choices to the left
    d5f2:	80 91 71 0f 	lds	r24, 0x0F71
    d5f6:	90 91 2d 0e 	lds	r25, 0x0E2D
    d5fa:	98 17       	cp	r25, r24
    d5fc:	c8 f4       	brcc	.+50     	; 0xd630 <DoPlay+0x1638>
    d5fe:	20 e0       	ldi	r18, 0x00	; 0
		for(uint8_t i=0;i<piecex[1]*3;i++)
    d600:	33 e0       	ldi	r19, 0x03	; 3
    d602:	0b c0       	rjmp	.+22     	; 0xd61a <DoPlay+0x1622>
			cpueval[i] = 0;
    d604:	ee 0f       	add	r30, r30
    d606:	ff 1f       	adc	r31, r31
    d608:	ee 0f       	add	r30, r30
    d60a:	ff 1f       	adc	r31, r31
    d60c:	ea 56       	subi	r30, 0x6A	; 106
    d60e:	f0 4f       	sbci	r31, 0xF0	; 240
    d610:	10 82       	st	Z, r1
    d612:	11 82       	std	Z+1, r1	; 0x01
    d614:	12 82       	std	Z+2, r1	; 0x02
    d616:	13 82       	std	Z+3, r1	; 0x03
}


inline void CpuHandleBlocked(){
	if(piecex[1] > cpudecision[0]){//we tried to go left but it was blocked, so eliminate all choices to the left
		for(uint8_t i=0;i<piecex[1]*3;i++)
    d618:	2f 5f       	subi	r18, 0xFF	; 255
    d61a:	e2 2f       	mov	r30, r18
    d61c:	f0 e0       	ldi	r31, 0x00	; 0
    d61e:	80 91 71 0f 	lds	r24, 0x0F71
    d622:	83 9f       	mul	r24, r19
    d624:	c0 01       	movw	r24, r0
    d626:	11 24       	eor	r1, r1
    d628:	e8 17       	cp	r30, r24
    d62a:	f9 07       	cpc	r31, r25
    d62c:	5c f3       	brlt	.-42     	; 0xd604 <DoPlay+0x160c>
    d62e:	9f c7       	rjmp	.+3902   	; 0xe56e <DoPlay+0x2576>
			cpueval[i] = 0;
	}
	else if(piecex[1] < cpudecision[0]){//eliminate choices to the right
    d630:	89 17       	cp	r24, r25
    d632:	08 f0       	brcs	.+2      	; 0xd636 <DoPlay+0x163e>
    d634:	9c c7       	rjmp	.+3896   	; 0xe56e <DoPlay+0x2576>
		for(uint8_t i=(piecex[1]+1)*3;i<3*6;i++)
    d636:	90 e0       	ldi	r25, 0x00	; 0
    d638:	01 96       	adiw	r24, 0x01	; 1
    d63a:	9c 01       	movw	r18, r24
    d63c:	22 0f       	add	r18, r18
    d63e:	33 1f       	adc	r19, r19
    d640:	28 0f       	add	r18, r24
    d642:	0d c0       	rjmp	.+26     	; 0xd65e <DoPlay+0x1666>
		cpueval[i] = 0;
    d644:	e2 2f       	mov	r30, r18
    d646:	f0 e0       	ldi	r31, 0x00	; 0
    d648:	ee 0f       	add	r30, r30
    d64a:	ff 1f       	adc	r31, r31
    d64c:	ee 0f       	add	r30, r30
    d64e:	ff 1f       	adc	r31, r31
    d650:	ea 56       	subi	r30, 0x6A	; 106
    d652:	f0 4f       	sbci	r31, 0xF0	; 240
    d654:	10 82       	st	Z, r1
    d656:	11 82       	std	Z+1, r1	; 0x01
    d658:	12 82       	std	Z+2, r1	; 0x02
    d65a:	13 82       	std	Z+3, r1	; 0x03
	if(piecex[1] > cpudecision[0]){//we tried to go left but it was blocked, so eliminate all choices to the left
		for(uint8_t i=0;i<piecex[1]*3;i++)
			cpueval[i] = 0;
	}
	else if(piecex[1] < cpudecision[0]){//eliminate choices to the right
		for(uint8_t i=(piecex[1]+1)*3;i<3*6;i++)
    d65c:	2f 5f       	subi	r18, 0xFF	; 255
    d65e:	22 31       	cpi	r18, 0x12	; 18
    d660:	88 f3       	brcs	.-30     	; 0xd644 <DoPlay+0x164c>
    d662:	85 c7       	rjmp	.+3850   	; 0xe56e <DoPlay+0x2576>
		return;
	
	if(cpustate & CPUMOVEBLOCKED){
		CpuHandleBlocked();
		goto CPUPICKMOVE;
	}else if(cpustate & CPUDECIDED)//done thinking, implement decision
    d664:	95 ff       	sbrs	r25, 5
    d666:	02 c0       	rjmp	.+4      	; 0xd66c <DoPlay+0x1674>
    d668:	0c 94 3d 73 	jmp	0xe67a	; 0xe67a <DoPlay+0x2682>
		return;

	if(CpuShouldCrash())//besides anything else, could and should we crash the enemy
    d66c:	0e 94 3a 56 	call	0xac74	; 0xac74 <CpuShouldCrash>
    d670:	88 23       	and	r24, r24
    d672:	49 f0       	breq	.+18     	; 0xd686 <DoPlay+0x168e>
		padstate[1] |= BTN_SL;
    d674:	80 91 44 0e 	lds	r24, 0x0E44
    d678:	90 91 45 0e 	lds	r25, 0x0E45
    d67c:	94 60       	ori	r25, 0x04	; 4
    d67e:	90 93 45 0e 	sts	0x0E45, r25
    d682:	80 93 44 0e 	sts	0x0E44, r24
	
	if(cpustate == CPUFIRSTTICK){//last move is done, start new one
    d686:	80 91 6b 0e 	lds	r24, 0x0E6B
    d68a:	80 31       	cpi	r24, 0x10	; 16
    d68c:	09 f0       	breq	.+2      	; 0xd690 <DoPlay+0x1698>
    d68e:	26 c1       	rjmp	.+588    	; 0xd8dc <DoPlay+0x18e4>



inline void CpuHandleFirstTick(){
	
	cpuflashingjeweloffset = 255;
    d690:	8f ef       	ldi	r24, 0xFF	; 255
    d692:	80 93 5c 0e 	sts	0x0E5C, r24
	if(flashingjeweltimer[1]){
    d696:	80 91 73 0f 	lds	r24, 0x0F73
    d69a:	88 23       	and	r24, r24
    d69c:	69 f0       	breq	.+26     	; 0xd6b8 <DoPlay+0x16c0>
    d69e:	e4 e4       	ldi	r30, 0x44	; 68
    d6a0:	fd e0       	ldi	r31, 0x0D	; 13
    d6a2:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t i=0;i<16*6;i++)
			if(cpubuffer[i] & FLASHINGJEWEL){
    d6a4:	80 81       	ld	r24, Z
    d6a6:	85 ff       	sbrs	r24, 5
    d6a8:	03 c0       	rjmp	.+6      	; 0xd6b0 <DoPlay+0x16b8>
				cpuflashingjeweloffset = i;	
    d6aa:	90 93 5c 0e 	sts	0x0E5C, r25
    d6ae:	04 c0       	rjmp	.+8      	; 0xd6b8 <DoPlay+0x16c0>

inline void CpuHandleFirstTick(){
	
	cpuflashingjeweloffset = 255;
	if(flashingjeweltimer[1]){
		for(uint8_t i=0;i<16*6;i++)
    d6b0:	9f 5f       	subi	r25, 0xFF	; 255
    d6b2:	31 96       	adiw	r30, 0x01	; 1
    d6b4:	90 36       	cpi	r25, 0x60	; 96
    d6b6:	b1 f7       	brne	.-20     	; 0xd6a4 <DoPlay+0x16ac>
			if(cpubuffer[i] & FLASHINGJEWEL){
				cpuflashingjeweloffset = i;	
				break;
			}				
	}
	if(wellfullness[1] < 3){//start off with a random move
    d6b8:	80 91 5f 0f 	lds	r24, 0x0F5F
    d6bc:	90 91 60 0f 	lds	r25, 0x0F60
    d6c0:	03 97       	sbiw	r24, 0x03	; 3
    d6c2:	c0 f4       	brcc	.+48     	; 0xd6f4 <DoPlay+0x16fc>
		cpustate = CPUDECIDED;
    d6c4:	80 e2       	ldi	r24, 0x20	; 32
    d6c6:	80 93 6b 0e 	sts	0x0E6B, r24
		cpudecision[1] = (prng(MAX_PLAYERS)+3)%3;
    d6ca:	82 e0       	ldi	r24, 0x02	; 2
    d6cc:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <prng>
    d6d0:	03 96       	adiw	r24, 0x03	; 3
    d6d2:	63 e0       	ldi	r22, 0x03	; 3
    d6d4:	70 e0       	ldi	r23, 0x00	; 0
    d6d6:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    d6da:	80 93 2e 0e 	sts	0x0E2E, r24
		cpudecision[0] = (prng(MAX_PLAYERS)+6)%6;
    d6de:	82 e0       	ldi	r24, 0x02	; 2
    d6e0:	0e 94 5d 54 	call	0xa8ba	; 0xa8ba <prng>
    d6e4:	06 96       	adiw	r24, 0x06	; 6
    d6e6:	66 e0       	ldi	r22, 0x06	; 6
    d6e8:	70 e0       	ldi	r23, 0x00	; 0
    d6ea:	0e 94 b4 73 	call	0xe768	; 0xe768 <__udivmodhi4>
    d6ee:	80 93 2d 0e 	sts	0x0E2D, r24
    d6f2:	f4 c0       	rjmp	.+488    	; 0xd8dc <DoPlay+0x18e4>
		return;
	}
		
	cpumovepos[0] = 0;
    d6f4:	10 92 3b 0e 	sts	0x0E3B, r1
	cpumovepos[1] = 0;
    d6f8:	10 92 3c 0e 	sts	0x0E3C, r1
	cpuscoretocome = 0;
    d6fc:	10 92 e2 0f 	sts	0x0FE2, r1
    d700:	e6 e9       	ldi	r30, 0x96	; 150
    d702:	ff e0       	ldi	r31, 0x0F	; 15
	for(uint8_t i=0;i<6*3;i++)
		cpueval[i] = 800L;
    d704:	80 e2       	ldi	r24, 0x20	; 32
    d706:	93 e0       	ldi	r25, 0x03	; 3
    d708:	a0 e0       	ldi	r26, 0x00	; 0
    d70a:	b0 e0       	ldi	r27, 0x00	; 0
    d70c:	81 93       	st	Z+, r24
    d70e:	91 93       	st	Z+, r25
    d710:	a1 93       	st	Z+, r26
    d712:	b1 93       	st	Z+, r27
	}
		
	cpumovepos[0] = 0;
	cpumovepos[1] = 0;
	cpuscoretocome = 0;
	for(uint8_t i=0;i<6*3;i++)
    d714:	4f e0       	ldi	r20, 0x0F	; 15
    d716:	ee 3d       	cpi	r30, 0xDE	; 222
    d718:	f4 07       	cpc	r31, r20
    d71a:	c1 f7       	brne	.-16     	; 0xd70c <DoPlay+0x1714>
		cpueval[i] = 800L;
	if(piece[(1*3)] > 6){//magic jewel, see which one to use and set decision
    d71c:	90 91 46 0f 	lds	r25, 0x0F46
    d720:	97 30       	cpi	r25, 0x07	; 7
    d722:	e0 f1       	brcs	.+120    	; 0xd79c <DoPlay+0x17a4>
    d724:	e6 e5       	ldi	r30, 0x56	; 86
    d726:	fd e0       	ldi	r31, 0x0D	; 13
    d728:	22 e1       	ldi	r18, 0x12	; 18
		cpueval[i] = pgm_read_byte(&CpuBaseWeights[i])*cpubasemultiplier;
}
*/
inline void CpuFindHighestColumn(){//speed irrelevant
	for(uint8_t i=3*6;i<WELLSIZE;i++){
		if(cpubuffer[i]){
    d72a:	80 81       	ld	r24, Z
    d72c:	88 23       	and	r24, r24
    d72e:	71 f0       	breq	.+28     	; 0xd74c <DoPlay+0x1754>
			cpuhighestcolumn = i%6;
    d730:	82 2f       	mov	r24, r18
    d732:	66 e0       	ldi	r22, 0x06	; 6
    d734:	0e 94 a8 73 	call	0xe750	; 0xe750 <__udivmodqi4>
    d738:	90 93 2c 0e 	sts	0x0E2C, r25
			cpuhighestcolumnmag = 16-(i/6);
    d73c:	82 2f       	mov	r24, r18
    d73e:	0e 94 a8 73 	call	0xe750	; 0xe750 <__udivmodqi4>
    d742:	90 e1       	ldi	r25, 0x10	; 16
    d744:	98 1b       	sub	r25, r24
    d746:	90 93 7d 0f 	sts	0x0F7D, r25
    d74a:	04 c0       	rjmp	.+8      	; 0xd754 <DoPlay+0x175c>
	for(uint8_t i=0;i<3*6;i++)
		cpueval[i] = pgm_read_byte(&CpuBaseWeights[i])*cpubasemultiplier;
}
*/
inline void CpuFindHighestColumn(){//speed irrelevant
	for(uint8_t i=3*6;i<WELLSIZE;i++){
    d74c:	2f 5f       	subi	r18, 0xFF	; 255
    d74e:	31 96       	adiw	r30, 0x01	; 1
    d750:	20 36       	cpi	r18, 0x60	; 96
    d752:	59 f7       	brne	.-42     	; 0xd72a <DoPlay+0x1732>
	}		
}

inline void CpuDecideMagicUsage(){
	CpuFindHighestColumn();
	cpudecision[0] = cpuhighestcolumn;
    d754:	80 91 2c 0e 	lds	r24, 0x0E2C
    d758:	80 93 2d 0e 	sts	0x0E2D, r24
	
	if(wellfullness[1] > 8*6 && crashheight[1] < 3)
    d75c:	80 91 5f 0f 	lds	r24, 0x0F5F
    d760:	90 91 60 0f 	lds	r25, 0x0F60
    d764:	c1 97       	sbiw	r24, 0x31	; 49
    d766:	30 f0       	brcs	.+12     	; 0xd774 <DoPlay+0x177c>
    d768:	80 91 7f 0f 	lds	r24, 0x0F7F
    d76c:	83 30       	cpi	r24, 0x03	; 3
    d76e:	10 f4       	brcc	.+4      	; 0xd774 <DoPlay+0x177c>
		cpudecision[1] = 1;
    d770:	81 e0       	ldi	r24, 0x01	; 1
    d772:	10 c0       	rjmp	.+32     	; 0xd794 <DoPlay+0x179c>
	else if(crashheight[1] > 1){//might consider down jewel
    d774:	80 91 7f 0f 	lds	r24, 0x0F7F
    d778:	82 30       	cpi	r24, 0x02	; 2
    d77a:	58 f0       	brcs	.+22     	; 0xd792 <DoPlay+0x179a>
		if(cpuhighestcolumnmag > 7 && crashheight[0] < 4)//we are on defense, consider down jewel(a little variety I guess...if not the best strategy)
    d77c:	80 91 7d 0f 	lds	r24, 0x0F7D
    d780:	88 30       	cpi	r24, 0x08	; 8
    d782:	50 f0       	brcs	.+20     	; 0xd798 <DoPlay+0x17a0>
    d784:	80 91 7e 0f 	lds	r24, 0x0F7E
    d788:	84 30       	cpi	r24, 0x04	; 4
    d78a:	30 f4       	brcc	.+12     	; 0xd798 <DoPlay+0x17a0>
			cpudecision[1] = 0;
    d78c:	10 92 2e 0e 	sts	0x0E2E, r1
    d790:	03 c0       	rjmp	.+6      	; 0xd798 <DoPlay+0x17a0>
	}
	else
		cpudecision[1] = 2;//attack!
    d792:	82 e0       	ldi	r24, 0x02	; 2
    d794:	80 93 2e 0e 	sts	0x0E2E, r24
	cpuscoretocome = 0;
	for(uint8_t i=0;i<6*3;i++)
		cpueval[i] = 800L;
	if(piece[(1*3)] > 6){//magic jewel, see which one to use and set decision
		CpuDecideMagicUsage();
		cpustate = CPUDECIDED;
    d798:	80 e2       	ldi	r24, 0x20	; 32
    d79a:	9e c0       	rjmp	.+316    	; 0xd8d8 <DoPlay+0x18e0>
		return;
	}else if((piece[3+0] == piece[3+1]) && (piece[3+1] == piece[3+2])){//all same color
    d79c:	80 91 47 0f 	lds	r24, 0x0F47
    d7a0:	98 17       	cp	r25, r24
    d7a2:	79 f4       	brne	.+30     	; 0xd7c2 <DoPlay+0x17ca>
    d7a4:	80 91 48 0f 	lds	r24, 0x0F48
    d7a8:	98 17       	cp	r25, r24
    d7aa:	59 f4       	brne	.+22     	; 0xd7c2 <DoPlay+0x17ca>
		cpuevalmultiplier = 1;
    d7ac:	81 e0       	ldi	r24, 0x01	; 1
    d7ae:	80 93 3a 0f 	sts	0x0F3A, r24
		cpuscoremultiplier = 16;//just override base values
    d7b2:	80 e1       	ldi	r24, 0x10	; 16
    d7b4:	80 93 f1 0f 	sts	0x0FF1, r24
		cpusecondmovemultiplier = 0;
    d7b8:	10 92 80 0f 	sts	0x0F80, r1
		cpubasemultiplier = 0;
    d7bc:	10 92 91 0f 	sts	0x0F91, r1
    d7c0:	8a c0       	rjmp	.+276    	; 0xd8d6 <DoPlay+0x18de>
	}else{//normal, not all same color or magic jewel
		cpuheightmultiplier = 1;
    d7c2:	21 e0       	ldi	r18, 0x01	; 1
    d7c4:	20 93 57 0e 	sts	0x0E57, r18
		cpuscoremultiplier = 5;//1+((wellfullness[1]/4));//8;
		cpuevalmultiplier = 1;
		cpusecondmovemultiplier = 10;//8;
		cpubasemultiplier = 1;
    d7c8:	20 93 91 0f 	sts	0x0F91, r18
			
		//if(wellfullness[1] < 5*6){
			if(wellfullness[1] > 4*6){
    d7cc:	80 91 5f 0f 	lds	r24, 0x0F5F
    d7d0:	90 91 60 0f 	lds	r25, 0x0F60
    d7d4:	49 97       	sbiw	r24, 0x19	; 25
    d7d6:	40 f0       	brcs	.+16     	; 0xd7e8 <DoPlay+0x17f0>
				cpuheightmultiplier = 1;
				cpuscoremultiplier = 1;
    d7d8:	20 93 f1 0f 	sts	0x0FF1, r18
				cpusecondmovemultiplier = 2;
    d7dc:	82 e0       	ldi	r24, 0x02	; 2
    d7de:	80 93 80 0f 	sts	0x0F80, r24
				cpuevalmultiplier = 2;
    d7e2:	80 93 3a 0f 	sts	0x0F3A, r24
    d7e6:	08 c0       	rjmp	.+16     	; 0xd7f8 <DoPlay+0x1800>
			}
			else{
				cpuscoremultiplier = 5;
    d7e8:	85 e0       	ldi	r24, 0x05	; 5
    d7ea:	80 93 f1 0f 	sts	0x0FF1, r24
				cpuevalmultiplier = 10;
    d7ee:	8a e0       	ldi	r24, 0x0A	; 10
    d7f0:	80 93 3a 0f 	sts	0x0F3A, r24
				cpusecondmovemultiplier = 0;
    d7f4:	10 92 80 0f 	sts	0x0F80, r1
			}*/
			//else if(wellfullness[1] > 5*6){
				//cpuevalmultiplier = 0;
			//}
			
		if(cpuevalmultiplier)
    d7f8:	80 91 3a 0f 	lds	r24, 0x0F3A
    d7fc:	88 23       	and	r24, r24
    d7fe:	09 f4       	brne	.+2      	; 0xd802 <DoPlay+0x180a>
    d800:	6a c0       	rjmp	.+212    	; 0xd8d6 <DoPlay+0x18de>
    d802:	28 ee       	ldi	r18, 0xE8	; 232
    d804:	33 e0       	ldi	r19, 0x03	; 3
    d806:	4c e0       	ldi	r20, 0x0C	; 12
    d808:	50 e0       	ldi	r21, 0x00	; 0
    d80a:	4c c0       	rjmp	.+152    	; 0xd8a4 <DoPlay+0x18ac>
		for(uint8_t x=1;x<5;x++){
			/*if(padstate[0] & BTN_A){
				set_vram(18+(x*2),(y-3)*2,111);
				WaitVsync(2);
			}*/
			t = cpubuffer[off++];
    d80c:	97 81       	ldd	r25, Z+7	; 0x07
			if(!t){
    d80e:	99 23       	and	r25, r25
    d810:	19 f4       	brne	.+6      	; 0xd818 <DoPlay+0x1820>
				score++;
    d812:	2f 5f       	subi	r18, 0xFF	; 255
    d814:	3f 4f       	sbci	r19, 0xFF	; 255
    d816:	3c c0       	rjmp	.+120    	; 0xd890 <DoPlay+0x1898>
				continue;
			}				
			if(t == cpubuffer[off-2])//left
    d818:	66 81       	ldd	r22, Z+6	; 0x06
    d81a:	96 17       	cp	r25, r22
    d81c:	19 f4       	brne	.+6      	; 0xd824 <DoPlay+0x182c>
				score += 2;
    d81e:	2e 5f       	subi	r18, 0xFE	; 254
    d820:	3f 4f       	sbci	r19, 0xFF	; 255
    d822:	04 c0       	rjmp	.+8      	; 0xd82c <DoPlay+0x1834>
			else if(cpubuffer[off-2])
    d824:	66 23       	and	r22, r22
    d826:	11 f0       	breq	.+4      	; 0xd82c <DoPlay+0x1834>
				score -= 1;
    d828:	21 50       	subi	r18, 0x01	; 1
    d82a:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off])//right
    d82c:	80 85       	ldd	r24, Z+8	; 0x08
    d82e:	98 17       	cp	r25, r24
    d830:	19 f4       	brne	.+6      	; 0xd838 <DoPlay+0x1840>
				score += 2;
    d832:	2e 5f       	subi	r18, 0xFE	; 254
    d834:	3f 4f       	sbci	r19, 0xFF	; 255
    d836:	04 c0       	rjmp	.+8      	; 0xd840 <DoPlay+0x1848>
			else if(cpubuffer[off])
    d838:	88 23       	and	r24, r24
    d83a:	11 f0       	breq	.+4      	; 0xd840 <DoPlay+0x1848>
				score -= 1;
    d83c:	21 50       	subi	r18, 0x01	; 1
    d83e:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off-7])//up
    d840:	81 81       	ldd	r24, Z+1	; 0x01
    d842:	98 17       	cp	r25, r24
    d844:	19 f4       	brne	.+6      	; 0xd84c <DoPlay+0x1854>
				score += 2;
    d846:	2e 5f       	subi	r18, 0xFE	; 254
    d848:	3f 4f       	sbci	r19, 0xFF	; 255
    d84a:	04 c0       	rjmp	.+8      	; 0xd854 <DoPlay+0x185c>
			else if(cpubuffer[off-7])
    d84c:	88 23       	and	r24, r24
    d84e:	11 f0       	breq	.+4      	; 0xd854 <DoPlay+0x185c>
				score -= 1;
    d850:	21 50       	subi	r18, 0x01	; 1
    d852:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off+5])//down
    d854:	85 85       	ldd	r24, Z+13	; 0x0d
    d856:	98 17       	cp	r25, r24
    d858:	19 f4       	brne	.+6      	; 0xd860 <DoPlay+0x1868>
				score += 2;
    d85a:	2e 5f       	subi	r18, 0xFE	; 254
    d85c:	3f 4f       	sbci	r19, 0xFF	; 255
    d85e:	04 c0       	rjmp	.+8      	; 0xd868 <DoPlay+0x1870>
			else if(cpubuffer[off+5])
    d860:	88 23       	and	r24, r24
    d862:	11 f0       	breq	.+4      	; 0xd868 <DoPlay+0x1870>
				score -= 1;
    d864:	21 50       	subi	r18, 0x01	; 1
    d866:	30 40       	sbci	r19, 0x00	; 0

			if(t == cpubuffer[off-8])//up left
    d868:	80 81       	ld	r24, Z
    d86a:	98 17       	cp	r25, r24
    d86c:	19 f4       	brne	.+6      	; 0xd874 <DoPlay+0x187c>
				score += 3;
    d86e:	2d 5f       	subi	r18, 0xFD	; 253
    d870:	3f 4f       	sbci	r19, 0xFF	; 255
    d872:	04 c0       	rjmp	.+8      	; 0xd87c <DoPlay+0x1884>
			else if(cpubuffer[off-2])
    d874:	66 23       	and	r22, r22
    d876:	11 f0       	breq	.+4      	; 0xd87c <DoPlay+0x1884>
				score -= 1;
    d878:	21 50       	subi	r18, 0x01	; 1
    d87a:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off-6])//up right
    d87c:	82 81       	ldd	r24, Z+2	; 0x02
    d87e:	98 17       	cp	r25, r24
    d880:	19 f4       	brne	.+6      	; 0xd888 <DoPlay+0x1890>
				score += 3;
    d882:	2d 5f       	subi	r18, 0xFD	; 253
    d884:	3f 4f       	sbci	r19, 0xFF	; 255
    d886:	04 c0       	rjmp	.+8      	; 0xd890 <DoPlay+0x1898>
			else if(cpubuffer[off-6])
    d888:	88 23       	and	r24, r24
    d88a:	11 f0       	breq	.+4      	; 0xd890 <DoPlay+0x1898>
				score -= 1;
    d88c:	21 50       	subi	r18, 0x01	; 1
    d88e:	30 40       	sbci	r19, 0x00	; 0
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	uint16_t off = (3*6)+1;	
	for(uint8_t y=3;y<15;y++){
		for(uint8_t x=1;x<5;x++){
    d890:	7f 5f       	subi	r23, 0xFF	; 255
    d892:	31 96       	adiw	r30, 0x01	; 1
    d894:	75 30       	cpi	r23, 0x05	; 5
    d896:	09 f0       	breq	.+2      	; 0xd89a <DoPlay+0x18a2>
    d898:	b9 cf       	rjmp	.-142    	; 0xd80c <DoPlay+0x1814>
    d89a:	4b 5f       	subi	r20, 0xFB	; 251
    d89c:	5f 4f       	sbci	r21, 0xFF	; 255
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	uint16_t off = (3*6)+1;	
	for(uint8_t y=3;y<15;y++){
    d89e:	48 34       	cpi	r20, 0x48	; 72
    d8a0:	51 05       	cpc	r21, r1
    d8a2:	29 f0       	breq	.+10     	; 0xd8ae <DoPlay+0x18b6>
    d8a4:	fa 01       	movw	r30, r20
    d8a6:	ec 5b       	subi	r30, 0xBC	; 188
    d8a8:	f2 4f       	sbci	r31, 0xF2	; 242
    d8aa:	71 e0       	ldi	r23, 0x01	; 1
    d8ac:	af cf       	rjmp	.-162    	; 0xd80c <DoPlay+0x1814>
	*/
		}//x
		off += 1;
	}//y
	
	if(score > 1000)
    d8ae:	53 e0       	ldi	r21, 0x03	; 3
    d8b0:	29 3e       	cpi	r18, 0xE9	; 233
    d8b2:	35 07       	cpc	r19, r21
    d8b4:	18 f4       	brcc	.+6      	; 0xd8bc <DoPlay+0x18c4>
    d8b6:	80 e0       	ldi	r24, 0x00	; 0
    d8b8:	90 e0       	ldi	r25, 0x00	; 0
    d8ba:	03 c0       	rjmp	.+6      	; 0xd8c2 <DoPlay+0x18ca>
		score -= 1000;
    d8bc:	c9 01       	movw	r24, r18
    d8be:	88 5e       	subi	r24, 0xE8	; 232
    d8c0:	93 40       	sbci	r25, 0x03	; 3
			//else if(wellfullness[1] > 5*6){
				//cpuevalmultiplier = 0;
			//}
			
		if(cpuevalmultiplier)
			(int32_t)(cpubaseval = CpuEvaluate());
    d8c2:	a0 e0       	ldi	r26, 0x00	; 0
    d8c4:	b0 e0       	ldi	r27, 0x00	; 0
    d8c6:	80 93 de 0f 	sts	0x0FDE, r24
    d8ca:	90 93 df 0f 	sts	0x0FDF, r25
    d8ce:	a0 93 e0 0f 	sts	0x0FE0, r26
    d8d2:	b0 93 e1 0f 	sts	0x0FE1, r27
	}			
	//CpuApplyBaseWeights();
	cpustate = CPUEVALUATING;
    d8d6:	88 e0       	ldi	r24, 0x08	; 8
    d8d8:	80 93 6b 0e 	sts	0x0E6B, r24
	
	if(cpustate == CPUFIRSTTICK){//last move is done, start new one
		CpuHandleFirstTick();
	}

	if(cpustate & CPUEVALUATING){//lets get down to the numbers!!!
    d8dc:	80 91 6b 0e 	lds	r24, 0x0E6B
    d8e0:	83 ff       	sbrs	r24, 3
    d8e2:	cb c6       	rjmp	.+3478   	; 0xe67a <DoPlay+0x2682>
		if(halfstep[1]){
    d8e4:	80 91 7c 0f 	lds	r24, 0x0F7C
    d8e8:	88 23       	and	r24, r24
    d8ea:	b1 f0       	breq	.+44     	; 0xd918 <DoPlay+0x1920>
			if(well[WELLSIZE+piecex[1]+((piecey[1]+3)*6)])//about to land piece, choose the  best move we have so far
    d8ec:	20 91 71 0f 	lds	r18, 0x0F71
    d8f0:	80 91 6e 0e 	lds	r24, 0x0E6E
    d8f4:	90 e0       	ldi	r25, 0x00	; 0
    d8f6:	fc 01       	movw	r30, r24
    d8f8:	ee 0f       	add	r30, r30
    d8fa:	ff 1f       	adc	r31, r31
    d8fc:	e8 0f       	add	r30, r24
    d8fe:	f9 1f       	adc	r31, r25
    d900:	ee 0f       	add	r30, r30
    d902:	ff 1f       	adc	r31, r31
    d904:	ee 58       	subi	r30, 0x8E	; 142
    d906:	f1 4f       	sbci	r31, 0xF1	; 241
    d908:	e2 0f       	add	r30, r18
    d90a:	f1 1d       	adc	r31, r1
    d90c:	ee 58       	subi	r30, 0x8E	; 142
    d90e:	ff 4f       	sbci	r31, 0xFF	; 255
    d910:	80 81       	ld	r24, Z
    d912:	88 23       	and	r24, r24
    d914:	09 f0       	breq	.+2      	; 0xd918 <DoPlay+0x1920>
    d916:	2b c6       	rjmp	.+3158   	; 0xe56e <DoPlay+0x2576>
//TODO GET RID OF ALL THESE DOUBLE LOOPS!!!!

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = x;
	    for(uint8_t y=1; y<16-crashheight[1];y++){//1
    d918:	60 e1       	ldi	r22, 0x10	; 16
    d91a:	86 2e       	mov	r8, r22
    d91c:	91 2c       	mov	r9, r1
	}while(--off);
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
		off = x;
		for(uint8_t y=1;y<15-crashheight[1]-1;y++) {
    d91e:	5e e0       	ldi	r21, 0x0E	; 14
    d920:	65 2e       	mov	r6, r21
    d922:	71 2c       	mov	r7, r1
	}
	

		
	if(total){
		for(uint8_t i=0;i<WELLSIZE-(crashheight[1]*6);i++)
    d924:	4a ef       	ldi	r20, 0xFA	; 250
    d926:	44 2e       	mov	r4, r20
    d928:	4f ef       	ldi	r20, 0xFF	; 255
    d92a:	54 2e       	mov	r5, r20
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
CPUGRAVITYTOP:
		off = x;
		for(uint8_t y=0;y<15-crashheight[1];y++){
    d92c:	3f e0       	ldi	r19, 0x0F	; 15
    d92e:	23 2e       	mov	r2, r19
    d930:	31 2c       	mov	r3, r1
state[1] |= PAUSED;state[1] ^= PAUSED;
#endif
//TODO IF WE HAVE A 3+ CHAIN AVAILABLE, DO NOT EVALUATE
//TODO CPU IS WASTING CRASHPOINTS!!!!! NOT CORRECTLY CALCULATING POINTS TO COME
		while(true){
			if(vsync_flag){
    d932:	80 91 f0 0c 	lds	r24, 0x0CF0
    d936:	88 23       	and	r24, r24
    d938:	99 f0       	breq	.+38     	; 0xd960 <DoPlay+0x1968>
				vsync_flag = 0;
    d93a:	10 92 f0 0c 	sts	0x0CF0, r1
				totalvsyncs++;
    d93e:	80 91 39 0e 	lds	r24, 0x0E39
    d942:	90 91 3a 0e 	lds	r25, 0x0E3A
    d946:	01 96       	adiw	r24, 0x01	; 1
    d948:	90 93 3a 0e 	sts	0x0E3A, r25
    d94c:	80 93 39 0e 	sts	0x0E39, r24
				if(++vsyncs > 1)
    d950:	80 91 38 0e 	lds	r24, 0x0E38
    d954:	8f 5f       	subi	r24, 0xFF	; 255
    d956:	80 93 38 0e 	sts	0x0E38, r24
    d95a:	82 30       	cpi	r24, 0x02	; 2
    d95c:	08 f0       	brcs	.+2      	; 0xd960 <DoPlay+0x1968>
    d95e:	8d c6       	rjmp	.+3354   	; 0xe67a <DoPlay+0x2682>
					return;//TODO, IF WE ARE LEAVING BEFORE A DECISION, SEE IF WE ARE ABOUT TO MOVEPIECEDOWN() ONTO A BLOCK. IF SO CHOOSE CURRENT BEST MOVE.
			}
		//	if(cpueval[cpumovepos[0]] == 0)//first move is a losing move, don't check 18 second move variations
			//	goto cpunextmove;
			cputotal = 0;
    d960:	10 92 f2 0f 	sts	0x0FF2, r1
    d964:	10 92 f3 0f 	sts	0x0FF3, r1
    d968:	10 92 f4 0f 	sts	0x0FF4, r1
    d96c:	10 92 f5 0f 	sts	0x0FF5, r1
			blank_piece(1);
    d970:	81 e0       	ldi	r24, 0x01	; 1
    d972:	0e 94 06 54 	call	0xa80c	; 0xa80c <blank_piece>
			CpuBufferWellAsm(&well[WELLSIZE]);
    d976:	82 ed       	ldi	r24, 0xD2	; 210
    d978:	9e e0       	ldi	r25, 0x0E	; 14
    d97a:	0e 94 90 48 	call	0x9120	; 0x9120 <CpuBufferWellAsm>
			add_piece(1);
    d97e:	81 e0       	ldi	r24, 0x01	; 1
    d980:	0e 94 c8 53 	call	0xa790	; 0xa790 <add_piece>
		//	cpueval[cpumovepos[0]] = 1000L;
		//	cputotal = (int32_t)(800L);
			uint8_t bufferreturn;
			if(true){//CpuBufferMove(cpumovepos[0],false)){
				bufferreturn = CpuBufferMove(cpumovepos[0],false);
    d984:	20 91 3b 0e 	lds	r18, 0x0E3B
//		evalweights[cpulastevalchange]--;
//	else goto reroll;
}*/
#endif
inline bool CpuBufferMove(uint8_t m, bool prvw){
	uint8_t c = m/3;
    d988:	82 2f       	mov	r24, r18
    d98a:	63 e0       	ldi	r22, 0x03	; 3
    d98c:	e1 d6       	rcall	.+3522   	; 0xe750 <__udivmodqi4>
    d98e:	48 2f       	mov	r20, r24
	uint8_t r = m%3;
    d990:	82 2f       	mov	r24, r18
    d992:	de d6       	rcall	.+3516   	; 0xe750 <__udivmodqi4>
    d994:	69 2f       	mov	r22, r25
    d996:	94 2f       	mov	r25, r20
    d998:	30 e0       	ldi	r19, 0x00	; 0


inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
		if(cpubuffer[off])
    d99a:	e9 2f       	mov	r30, r25
    d99c:	f0 e0       	ldi	r31, 0x00	; 0
    d99e:	ec 5b       	subi	r30, 0xBC	; 188
    d9a0:	f2 4f       	sbci	r31, 0xF2	; 242
    d9a2:	80 81       	ld	r24, Z
    d9a4:	88 23       	and	r24, r24
    d9a6:	29 f4       	brne	.+10     	; 0xd9b2 <DoPlay+0x19ba>
}


inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
    d9a8:	3f 5f       	subi	r19, 0xFF	; 255
    d9aa:	30 31       	cpi	r19, 0x10	; 16
    d9ac:	41 f0       	breq	.+16     	; 0xd9be <DoPlay+0x19c6>
		if(cpubuffer[off])
			return i;
		off += 6;
    d9ae:	9a 5f       	subi	r25, 0xFA	; 250
    d9b0:	f4 cf       	rjmp	.-24     	; 0xd99a <DoPlay+0x19a2>
	bool ret = true;
	//how high are the jewels in this column?
	//we want to set the jewel down without slowing CpuScoreAndGravity()
	uint8_t h = buffer_column_height(c);
	if(h < 6 || (h<9 && c == 2)){//HACK WAS h<6 losing move
    d9b2:	36 30       	cpi	r19, 0x06	; 6
    d9b4:	38 f0       	brcs	.+14     	; 0xd9c4 <DoPlay+0x19cc>
    d9b6:	39 30       	cpi	r19, 0x09	; 9
    d9b8:	10 f4       	brcc	.+4      	; 0xd9be <DoPlay+0x19c6>
    d9ba:	42 30       	cpi	r20, 0x02	; 2
    d9bc:	19 f0       	breq	.+6      	; 0xd9c4 <DoPlay+0x19cc>
    d9be:	cc 24       	eor	r12, r12
    d9c0:	c3 94       	inc	r12
    d9c2:	01 c0       	rjmp	.+2      	; 0xd9c6 <DoPlay+0x19ce>
    d9c4:	cc 24       	eor	r12, r12
		//else if(!prvw && ((piece[(1*3)+0] == piece[(1*3)+1]) && (piece[(1*3)+1] == piece[(1*3)+2]))){}
		//else
		ret = false;//	return false;
	}		
//NOW JUST PUT PIECE AT TOP AND LET CPUSCOREANDGRAVITY() DO THE REST
	uint8_t offset = (((h-3)*6)+c);
    d9c6:	24 2f       	mov	r18, r20
    d9c8:	22 51       	subi	r18, 0x12	; 18
    d9ca:	76 e0       	ldi	r23, 0x06	; 6
    d9cc:	37 9f       	mul	r19, r23
    d9ce:	c0 01       	movw	r24, r0
    d9d0:	11 24       	eor	r1, r1
    d9d2:	28 0f       	add	r18, r24
	uint8_t pt[3];
	
	if(!prvw){//not the preview piece
		for(uint8_t i=0;i<3;i++)
			pt[i] = piece[(1*3)+i];
    d9d4:	30 91 46 0f 	lds	r19, 0x0F46
    d9d8:	40 91 47 0f 	lds	r20, 0x0F47
    d9dc:	50 91 48 0f 	lds	r21, 0x0F48
    d9e0:	90 e0       	ldi	r25, 0x00	; 0
    d9e2:	05 c0       	rjmp	.+10     	; 0xd9ee <DoPlay+0x19f6>
			pt[i] = preview[(1*3)+i];
	}
	
//	if(pt[0] == pt[1] && pt[1] == pt[2])//don't need consideration
//		return false;
	for(uint8_t i=0;i<r;i++){
    d9e4:	9f 5f       	subi	r25, 0xFF	; 255
    d9e6:	85 2f       	mov	r24, r21
    d9e8:	54 2f       	mov	r21, r20
    d9ea:	43 2f       	mov	r20, r19
    d9ec:	38 2f       	mov	r19, r24
    d9ee:	96 17       	cp	r25, r22
    d9f0:	c8 f3       	brcs	.-14     	; 0xd9e4 <DoPlay+0x19ec>
		pt[2] = pt[1];
		pt[1] = pt[0];
		pt[0] = t;
	}
	
	cpulastbufferoff = offset;
    d9f2:	20 93 4a 0f 	sts	0x0F4A, r18
	cpubuffer[offset] = pt[0];
    d9f6:	e2 2f       	mov	r30, r18
    d9f8:	f0 e0       	ldi	r31, 0x00	; 0
    d9fa:	ec 5b       	subi	r30, 0xBC	; 188
    d9fc:	f2 4f       	sbci	r31, 0xF2	; 242
    d9fe:	30 83       	st	Z, r19
	offset += 6;
    da00:	2a 5f       	subi	r18, 0xFA	; 250
	cpubuffer[offset] = pt[1];
    da02:	e2 2f       	mov	r30, r18
    da04:	f0 e0       	ldi	r31, 0x00	; 0
    da06:	ec 5b       	subi	r30, 0xBC	; 188
    da08:	f2 4f       	sbci	r31, 0xF2	; 242
    da0a:	40 83       	st	Z, r20
	offset += 6;
	cpubuffer[offset] = pt[2];
    da0c:	2a 5f       	subi	r18, 0xFA	; 250
    da0e:	e2 2f       	mov	r30, r18
    da10:	f0 e0       	ldi	r31, 0x00	; 0
    da12:	ec 5b       	subi	r30, 0xBC	; 188
    da14:	f2 4f       	sbci	r31, 0xF2	; 242
    da16:	50 83       	st	Z, r21
    da18:	ff 24       	eor	r15, r15
    da1a:	dd 24       	eor	r13, r13
	//register uint8_t off;
goto CPUSCORETOP;
CPUFULLSCORECHECK:
quickcheck = true;
*/
CPUSCORETOP:
    da1c:	70 e0       	ldi	r23, 0x00	; 0
    da1e:	00 e0       	ldi	r16, 0x00	; 0
    da20:	ee 24       	eor	r14, r14
    da22:	3e c0       	rjmp	.+124    	; 0xdaa0 <DoPlay+0x1aa8>

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = x;
	    for(uint8_t y=1; y<16-crashheight[1];y++){//1
			off += 6;//
    da24:	7a 5f       	subi	r23, 0xFA	; 250
			if(!(t = (cpubuffer[off]&15))){//get_buffer(x,y);
    da26:	47 2f       	mov	r20, r23
    da28:	50 e0       	ldi	r21, 0x00	; 0
    da2a:	da 01       	movw	r26, r20
    da2c:	ac 5b       	subi	r26, 0xBC	; 188
    da2e:	b2 4f       	sbci	r27, 0xF2	; 242
    da30:	8c 91       	ld	r24, X
    da32:	8f 70       	andi	r24, 0x0F	; 15
    da34:	29 f1       	breq	.+74     	; 0xda80 <DoPlay+0x1a88>
				continue;
			}				
			//t0 = cpubuffer[off-6];//get_buffer(x,y-1);
			//t2 = cpubuffer[off+6];//get_buffer(x,y+1);

			if(((cpubuffer[off-6]&15) == t) && (t == (cpubuffer[off+6]&15))){//t1==t0 && t1==t2){
    da36:	2e e3       	ldi	r18, 0x3E	; 62
    da38:	a2 2e       	mov	r10, r18
    da3a:	2d e0       	ldi	r18, 0x0D	; 13
    da3c:	b2 2e       	mov	r11, r18
    da3e:	a4 0e       	add	r10, r20
    da40:	b5 1e       	adc	r11, r21
    da42:	f5 01       	movw	r30, r10
    da44:	60 81       	ld	r22, Z
    da46:	26 2f       	mov	r18, r22
    da48:	30 e0       	ldi	r19, 0x00	; 0
    da4a:	2f 70       	andi	r18, 0x0F	; 15
    da4c:	30 70       	andi	r19, 0x00	; 0
    da4e:	90 e0       	ldi	r25, 0x00	; 0
    da50:	28 17       	cp	r18, r24
    da52:	39 07       	cpc	r19, r25
    da54:	a9 f4       	brne	.+42     	; 0xda80 <DoPlay+0x1a88>
    da56:	46 5b       	subi	r20, 0xB6	; 182
    da58:	52 4f       	sbci	r21, 0xF2	; 242
    da5a:	fa 01       	movw	r30, r20
    da5c:	80 81       	ld	r24, Z
    da5e:	90 e0       	ldi	r25, 0x00	; 0
    da60:	8f 70       	andi	r24, 0x0F	; 15
    da62:	90 70       	andi	r25, 0x00	; 0
    da64:	28 17       	cp	r18, r24
    da66:	39 07       	cpc	r19, r25
    da68:	59 f4       	brne	.+22     	; 0xda80 <DoPlay+0x1a88>
				cpubuffer[off-6] |= SCORINGJEWEL;//set_buffer_scoring(x,y-1);
    da6a:	60 68       	ori	r22, 0x80	; 128
    da6c:	f5 01       	movw	r30, r10
    da6e:	60 83       	st	Z, r22
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    da70:	8c 91       	ld	r24, X
    da72:	80 68       	ori	r24, 0x80	; 128
    da74:	8c 93       	st	X, r24
				cpubuffer[off+6] |= SCORINGJEWEL;//set_buffer_scoring(x,y+1);
    da76:	da 01       	movw	r26, r20
    da78:	8c 91       	ld	r24, X
    da7a:	80 68       	ori	r24, 0x80	; 128
    da7c:	8c 93       	st	X, r24
				total+=3;
    da7e:	0d 5f       	subi	r16, 0xFD	; 253
//TODO GET RID OF ALL THESE DOUBLE LOOPS!!!!

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = x;
	    for(uint8_t y=1; y<16-crashheight[1];y++){//1
    da80:	1f 5f       	subi	r17, 0xFF	; 255
    da82:	21 2f       	mov	r18, r17
    da84:	30 e0       	ldi	r19, 0x00	; 0
    da86:	80 91 7f 0f 	lds	r24, 0x0F7F
    da8a:	f4 01       	movw	r30, r8
    da8c:	e8 1b       	sub	r30, r24
    da8e:	f1 09       	sbc	r31, r1
    da90:	2e 17       	cp	r18, r30
    da92:	3f 07       	cpc	r19, r31
    da94:	3c f2       	brlt	.-114    	; 0xda24 <DoPlay+0x1a2c>
*/
CPUSCORETOP:
//TODO GET RID OF ALL THESE DOUBLE LOOPS!!!!

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
    da96:	7e 2d       	mov	r23, r14
    da98:	7f 5f       	subi	r23, 0xFF	; 255
    da9a:	76 30       	cpi	r23, 0x06	; 6
    da9c:	19 f0       	breq	.+6      	; 0xdaa4 <DoPlay+0x1aac>
    da9e:	e7 2e       	mov	r14, r23
    daa0:	11 e0       	ldi	r17, 0x01	; 1
    daa2:	ef cf       	rjmp	.-34     	; 0xda82 <DoPlay+0x1a8a>
				total+=3;
			}
	    }
	}

	if(vsync_flag)
    daa4:	80 91 f0 0c 	lds	r24, 0x0CF0
    daa8:	88 23       	and	r24, r24
    daaa:	09 f0       	breq	.+2      	; 0xdaae <DoPlay+0x1ab6>
    daac:	2f c1       	rjmp	.+606    	; 0xdd0c <DoPlay+0x1d14>
    daae:	81 e0       	ldi	r24, 0x01	; 1
    dab0:	ee 24       	eor	r14, r14
    dab2:	e3 94       	inc	r14
    dab4:	48 c0       	rjmp	.+144    	; 0xdb46 <DoPlay+0x1b4e>
		return 0;
	// CHECK HORIZONTAL
	for(uint8_t x=1;x<5;x++) {//TODO ELIMINATE DOUBLE LOOPS JUST SCAN THROUGH BUFFER INLINED CASES FOR ENTIRE ROW
		off = x;//
	    for(uint8_t y=0; y<16-crashheight[1];y++){
			if(!(t = (cpubuffer[off]&15))){//get_buffer(x,y);
    dab6:	50 e0       	ldi	r21, 0x00	; 0
    dab8:	da 01       	movw	r26, r20
    daba:	ac 5b       	subi	r26, 0xBC	; 188
    dabc:	b2 4f       	sbci	r27, 0xF2	; 242
    dabe:	8c 91       	ld	r24, X
    dac0:	8f 70       	andi	r24, 0x0F	; 15
    dac2:	29 f1       	breq	.+74     	; 0xdb0e <DoPlay+0x1b16>
				continue;
			}				
			//t0 = cpubuffer[off-1];//get_buffer(x-1,y);
			//t2 = cpubuffer[off+1];//get_buffer(x+1,y);

			if(((cpubuffer[off-1]&15) == t) && (t == (cpubuffer[off+1]&15))){//t1==t0 && t1==t2){
    dac4:	93 e4       	ldi	r25, 0x43	; 67
    dac6:	a9 2e       	mov	r10, r25
    dac8:	9d e0       	ldi	r25, 0x0D	; 13
    daca:	b9 2e       	mov	r11, r25
    dacc:	a4 0e       	add	r10, r20
    dace:	b5 1e       	adc	r11, r21
    dad0:	f5 01       	movw	r30, r10
    dad2:	60 81       	ld	r22, Z
    dad4:	26 2f       	mov	r18, r22
    dad6:	30 e0       	ldi	r19, 0x00	; 0
    dad8:	2f 70       	andi	r18, 0x0F	; 15
    dada:	30 70       	andi	r19, 0x00	; 0
    dadc:	90 e0       	ldi	r25, 0x00	; 0
    dade:	28 17       	cp	r18, r24
    dae0:	39 07       	cpc	r19, r25
    dae2:	a9 f4       	brne	.+42     	; 0xdb0e <DoPlay+0x1b16>
    dae4:	4b 5b       	subi	r20, 0xBB	; 187
    dae6:	52 4f       	sbci	r21, 0xF2	; 242
    dae8:	fa 01       	movw	r30, r20
    daea:	80 81       	ld	r24, Z
    daec:	90 e0       	ldi	r25, 0x00	; 0
    daee:	8f 70       	andi	r24, 0x0F	; 15
    daf0:	90 70       	andi	r25, 0x00	; 0
    daf2:	28 17       	cp	r18, r24
    daf4:	39 07       	cpc	r19, r25
    daf6:	59 f4       	brne	.+22     	; 0xdb0e <DoPlay+0x1b16>
				cpubuffer[off-1] |= SCORINGJEWEL;//set_buffer_scoring(x-1,y);
    daf8:	60 68       	ori	r22, 0x80	; 128
    dafa:	f5 01       	movw	r30, r10
    dafc:	60 83       	st	Z, r22
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    dafe:	8c 91       	ld	r24, X
    db00:	80 68       	ori	r24, 0x80	; 128
    db02:	8c 93       	st	X, r24
				cpubuffer[off+1] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y);
    db04:	da 01       	movw	r26, r20
    db06:	8c 91       	ld	r24, X
    db08:	80 68       	ori	r24, 0x80	; 128
    db0a:	8c 93       	st	X, r24
				total+=3;
    db0c:	0d 5f       	subi	r16, 0xFD	; 253
	if(vsync_flag)
		return 0;
	// CHECK HORIZONTAL
	for(uint8_t x=1;x<5;x++) {//TODO ELIMINATE DOUBLE LOOPS JUST SCAN THROUGH BUFFER INLINED CASES FOR ENTIRE ROW
		off = x;//
	    for(uint8_t y=0; y<16-crashheight[1];y++){
    db0e:	7f 5f       	subi	r23, 0xFF	; 255
    db10:	1a 5f       	subi	r17, 0xFA	; 250
    db12:	41 2f       	mov	r20, r17
    db14:	46 50       	subi	r20, 0x06	; 6
    db16:	27 2f       	mov	r18, r23
    db18:	30 e0       	ldi	r19, 0x00	; 0
    db1a:	80 91 7f 0f 	lds	r24, 0x0F7F
    db1e:	f4 01       	movw	r30, r8
    db20:	e8 1b       	sub	r30, r24
    db22:	f1 09       	sbc	r31, r1
    db24:	2e 17       	cp	r18, r30
    db26:	3f 07       	cpc	r19, r31
    db28:	34 f2       	brlt	.-116    	; 0xdab6 <DoPlay+0x1abe>
				cpubuffer[off+1] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y);
				total+=3;
			}
			off += 6;//
	    }
		if(vsync_flag)
    db2a:	80 91 f0 0c 	lds	r24, 0x0CF0
    db2e:	88 23       	and	r24, r24
    db30:	09 f0       	breq	.+2      	; 0xdb34 <DoPlay+0x1b3c>
    db32:	ec c0       	rjmp	.+472    	; 0xdd0c <DoPlay+0x1d14>
	}

	if(vsync_flag)
		return 0;
	// CHECK HORIZONTAL
	for(uint8_t x=1;x<5;x++) {//TODO ELIMINATE DOUBLE LOOPS JUST SCAN THROUGH BUFFER INLINED CASES FOR ENTIRE ROW
    db34:	8e 2d       	mov	r24, r14
    db36:	8f 5f       	subi	r24, 0xFF	; 255
    db38:	85 30       	cpi	r24, 0x05	; 5
    db3a:	21 f4       	brne	.+8      	; 0xdb44 <DoPlay+0x1b4c>
    db3c:	51 e0       	ldi	r21, 0x01	; 1
    db3e:	ee 24       	eor	r14, r14
    db40:	e3 94       	inc	r14
    db42:	73 c0       	rjmp	.+230    	; 0xdc2a <DoPlay+0x1c32>
    db44:	e8 2e       	mov	r14, r24
    db46:	18 2f       	mov	r17, r24
    db48:	1a 5f       	subi	r17, 0xFA	; 250
    db4a:	70 e0       	ldi	r23, 0x00	; 0
    db4c:	e2 cf       	rjmp	.-60     	; 0xdb12 <DoPlay+0x1b1a>
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
		off = x;
		for(uint8_t y=1;y<15-crashheight[1]-1;y++) {
			off += 6;
    db4e:	5a 5f       	subi	r21, 0xFA	; 250
			if(!(t = (cpubuffer[off]&15)))//get_buffer(x,y);
    db50:	e5 2f       	mov	r30, r21
    db52:	f0 e0       	ldi	r31, 0x00	; 0
    db54:	bf 01       	movw	r22, r30
    db56:	6c 5b       	subi	r22, 0xBC	; 188
    db58:	72 4f       	sbci	r23, 0xF2	; 242
    db5a:	db 01       	movw	r26, r22
    db5c:	4c 91       	ld	r20, X
    db5e:	84 2f       	mov	r24, r20
    db60:	8f 70       	andi	r24, 0x0F	; 15
    db62:	09 f4       	brne	.+2      	; 0xdb66 <DoPlay+0x1b6e>
    db64:	4c c0       	rjmp	.+152    	; 0xdbfe <DoPlay+0x1c06>
			//t1 = cpubuffer[(off-1)+6];//get_buffer(x-1,y+1);
			//t2 = cpubuffer[(off+1)-6];//get_buffer(x+1,y-1);
			//t3 = cpubuffer[(off-1)-6];//get_buffer(x-1,y-1);
			//t4 = cpubuffer[(off+1)+6];//get_buffer(x+1,y+1);
			
			if((t == (cpubuffer[(off-1)+6]&15)) && (t == (cpubuffer[(off+1)-6]&15))){//t0==t1 && t0==t2){
    db66:	28 2f       	mov	r18, r24
    db68:	30 e0       	ldi	r19, 0x00	; 0
    db6a:	a9 e4       	ldi	r26, 0x49	; 73
    db6c:	aa 2e       	mov	r10, r26
    db6e:	ad e0       	ldi	r26, 0x0D	; 13
    db70:	ba 2e       	mov	r11, r26
    db72:	ae 0e       	add	r10, r30
    db74:	bf 1e       	adc	r11, r31
    db76:	d5 01       	movw	r26, r10
    db78:	8c 91       	ld	r24, X
    db7a:	90 e0       	ldi	r25, 0x00	; 0
    db7c:	8f 70       	andi	r24, 0x0F	; 15
    db7e:	90 70       	andi	r25, 0x00	; 0
    db80:	28 17       	cp	r18, r24
    db82:	39 07       	cpc	r19, r25
    db84:	d1 f4       	brne	.+52     	; 0xdbba <DoPlay+0x1bc2>
    db86:	cf 01       	movw	r24, r30
    db88:	81 5c       	subi	r24, 0xC1	; 193
    db8a:	92 4f       	sbci	r25, 0xF2	; 242
    db8c:	9b a3       	std	Y+35, r25	; 0x23
    db8e:	8a a3       	std	Y+34, r24	; 0x22
    db90:	dc 01       	movw	r26, r24
    db92:	8c 91       	ld	r24, X
    db94:	90 e0       	ldi	r25, 0x00	; 0
    db96:	8f 70       	andi	r24, 0x0F	; 15
    db98:	90 70       	andi	r25, 0x00	; 0
    db9a:	28 17       	cp	r18, r24
    db9c:	39 07       	cpc	r19, r25
    db9e:	69 f4       	brne	.+26     	; 0xdbba <DoPlay+0x1bc2>
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    dba0:	40 68       	ori	r20, 0x80	; 128
    dba2:	db 01       	movw	r26, r22
    dba4:	4c 93       	st	X, r20
				cpubuffer[(off-1)+6]|= SCORINGJEWEL;//set_buffer_scoring(x-1,y+1);
    dba6:	d5 01       	movw	r26, r10
    dba8:	8c 91       	ld	r24, X
    dbaa:	80 68       	ori	r24, 0x80	; 128
    dbac:	8c 93       	st	X, r24
				cpubuffer[(off+1)-6] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y-1);
    dbae:	aa a1       	ldd	r26, Y+34	; 0x22
    dbb0:	bb a1       	ldd	r27, Y+35	; 0x23
    dbb2:	8c 91       	ld	r24, X
    dbb4:	80 68       	ori	r24, 0x80	; 128
    dbb6:	8c 93       	st	X, r24
				total+=3;
    dbb8:	0d 5f       	subi	r16, 0xFD	; 253
			}
			if((t == (cpubuffer[(off-1)-6]&15)) && (t == (cpubuffer[(off+1)+6]&15))){//t0==t3 && t0==t4){
    dbba:	bf 01       	movw	r22, r30
    dbbc:	63 5c       	subi	r22, 0xC3	; 195
    dbbe:	72 4f       	sbci	r23, 0xF2	; 242
    dbc0:	db 01       	movw	r26, r22
    dbc2:	8c 91       	ld	r24, X
    dbc4:	90 e0       	ldi	r25, 0x00	; 0
    dbc6:	8f 70       	andi	r24, 0x0F	; 15
    dbc8:	90 70       	andi	r25, 0x00	; 0
    dbca:	28 17       	cp	r18, r24
    dbcc:	39 07       	cpc	r19, r25
    dbce:	b9 f4       	brne	.+46     	; 0xdbfe <DoPlay+0x1c06>
    dbd0:	df 01       	movw	r26, r30
    dbd2:	a5 5b       	subi	r26, 0xB5	; 181
    dbd4:	b2 4f       	sbci	r27, 0xF2	; 242
    dbd6:	8c 91       	ld	r24, X
    dbd8:	90 e0       	ldi	r25, 0x00	; 0
    dbda:	8f 70       	andi	r24, 0x0F	; 15
    dbdc:	90 70       	andi	r25, 0x00	; 0
    dbde:	28 17       	cp	r18, r24
    dbe0:	39 07       	cpc	r19, r25
    dbe2:	69 f4       	brne	.+26     	; 0xdbfe <DoPlay+0x1c06>
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    dbe4:	ec 5b       	subi	r30, 0xBC	; 188
    dbe6:	f2 4f       	sbci	r31, 0xF2	; 242
    dbe8:	80 81       	ld	r24, Z
    dbea:	80 68       	ori	r24, 0x80	; 128
    dbec:	80 83       	st	Z, r24
				cpubuffer[(off-1)-6] |= SCORINGJEWEL;//set_buffer_scoring(x-1,y-1);
    dbee:	fb 01       	movw	r30, r22
    dbf0:	80 81       	ld	r24, Z
    dbf2:	80 68       	ori	r24, 0x80	; 128
    dbf4:	80 83       	st	Z, r24
				cpubuffer[(off+1)+6] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y+1);
    dbf6:	8c 91       	ld	r24, X
    dbf8:	80 68       	ori	r24, 0x80	; 128
    dbfa:	8c 93       	st	X, r24
				total+=3;
    dbfc:	0d 5f       	subi	r16, 0xFD	; 253
	}while(--off);
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
		off = x;
		for(uint8_t y=1;y<15-crashheight[1]-1;y++) {
    dbfe:	1f 5f       	subi	r17, 0xFF	; 255
    dc00:	21 2f       	mov	r18, r17
    dc02:	30 e0       	ldi	r19, 0x00	; 0
    dc04:	80 91 7f 0f 	lds	r24, 0x0F7F
    dc08:	b3 01       	movw	r22, r6
    dc0a:	68 1b       	sub	r22, r24
    dc0c:	71 09       	sbc	r23, r1
    dc0e:	26 17       	cp	r18, r22
    dc10:	37 07       	cpc	r19, r23
    dc12:	0c f4       	brge	.+2      	; 0xdc16 <DoPlay+0x1c1e>
    dc14:	9c cf       	rjmp	.-200    	; 0xdb4e <DoPlay+0x1b56>
				cpubuffer[(off-1)-6] |= SCORINGJEWEL;//set_buffer_scoring(x-1,y-1);
				cpubuffer[(off+1)+6] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y+1);
				total+=3;
			}
		}
		if(vsync_flag)
    dc16:	80 91 f0 0c 	lds	r24, 0x0CF0
    dc1a:	88 23       	and	r24, r24
    dc1c:	09 f0       	breq	.+2      	; 0xdc20 <DoPlay+0x1c28>
    dc1e:	76 c0       	rjmp	.+236    	; 0xdd0c <DoPlay+0x1d14>
		}
		
	}while(--off);
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
    dc20:	5e 2d       	mov	r21, r14
    dc22:	5f 5f       	subi	r21, 0xFF	; 255
    dc24:	55 30       	cpi	r21, 0x05	; 5
    dc26:	19 f0       	breq	.+6      	; 0xdc2e <DoPlay+0x1c36>
    dc28:	e5 2e       	mov	r14, r21
    dc2a:	11 e0       	ldi	r17, 0x01	; 1
    dc2c:	e9 cf       	rjmp	.-46     	; 0xdc00 <DoPlay+0x1c08>
			return 0;
	}
	

		
	if(total){
    dc2e:	00 23       	and	r16, r16
    dc30:	d1 f0       	breq	.+52     	; 0xdc66 <DoPlay+0x1c6e>
    dc32:	20 e0       	ldi	r18, 0x00	; 0
    dc34:	04 c0       	rjmp	.+8      	; 0xdc3e <DoPlay+0x1c46>
		for(uint8_t i=0;i<WELLSIZE-(crashheight[1]*6);i++)
			cpubuffer[i] = 0;		
    dc36:	ec 5b       	subi	r30, 0xBC	; 188
    dc38:	f2 4f       	sbci	r31, 0xF2	; 242
    dc3a:	10 82       	st	Z, r1
	}
	

		
	if(total){
		for(uint8_t i=0;i<WELLSIZE-(crashheight[1]*6);i++)
    dc3c:	2f 5f       	subi	r18, 0xFF	; 255
    dc3e:	e2 2f       	mov	r30, r18
    dc40:	f0 e0       	ldi	r31, 0x00	; 0
    dc42:	80 91 7f 0f 	lds	r24, 0x0F7F
    dc46:	90 e0       	ldi	r25, 0x00	; 0
    dc48:	dc 01       	movw	r26, r24
    dc4a:	a4 9d       	mul	r26, r4
    dc4c:	c0 01       	movw	r24, r0
    dc4e:	a5 9d       	mul	r26, r5
    dc50:	90 0d       	add	r25, r0
    dc52:	b4 9d       	mul	r27, r4
    dc54:	90 0d       	add	r25, r0
    dc56:	11 24       	eor	r1, r1
    dc58:	81 5a       	subi	r24, 0xA1	; 161
    dc5a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc5c:	8e 17       	cp	r24, r30
    dc5e:	9f 07       	cpc	r25, r31
    dc60:	54 f7       	brge	.-44     	; 0xdc36 <DoPlay+0x1c3e>
    dc62:	50 e0       	ldi	r21, 0x00	; 0
    dc64:	05 c0       	rjmp	.+10     	; 0xdc70 <DoPlay+0x1c78>
		total = 0;//<--
		if(vsync_flag)
			return 0;
		goto CPUSCORETOP;
	}
	if(overall > cpuscoretocome)//for CpuShouldCrash()
    dc66:	80 91 e2 0f 	lds	r24, 0x0FE2
    dc6a:	8f 15       	cp	r24, r15
    dc6c:	28 f1       	brcs	.+74     	; 0xdcb8 <DoPlay+0x1cc0>
    dc6e:	26 c0       	rjmp	.+76     	; 0xdcbc <DoPlay+0x1cc4>
    dc70:	35 2f       	mov	r19, r21
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
CPUGRAVITYTOP:
		off = x;
		for(uint8_t y=0;y<15-crashheight[1];y++){
    dc72:	80 91 7f 0f 	lds	r24, 0x0F7F
    dc76:	b1 01       	movw	r22, r2
    dc78:	68 1b       	sub	r22, r24
    dc7a:	71 09       	sbc	r23, r1
    dc7c:	20 e0       	ldi	r18, 0x00	; 0
    dc7e:	13 c0       	rjmp	.+38     	; 0xdca6 <DoPlay+0x1cae>
			if(cpubuffer[off]){
    dc80:	83 2f       	mov	r24, r19
    dc82:	90 e0       	ldi	r25, 0x00	; 0
    dc84:	dc 01       	movw	r26, r24
    dc86:	ac 5b       	subi	r26, 0xBC	; 188
    dc88:	b2 4f       	sbci	r27, 0xF2	; 242
    dc8a:	4c 91       	ld	r20, X
    dc8c:	44 23       	and	r20, r20
    dc8e:	49 f0       	breq	.+18     	; 0xdca2 <DoPlay+0x1caa>
				if(!cpubuffer[off+6]){//!t1){
    dc90:	fc 01       	movw	r30, r24
    dc92:	e6 5b       	subi	r30, 0xB6	; 182
    dc94:	f2 4f       	sbci	r31, 0xF2	; 242
    dc96:	80 81       	ld	r24, Z
    dc98:	88 23       	and	r24, r24
    dc9a:	19 f4       	brne	.+6      	; 0xdca2 <DoPlay+0x1caa>
					cpubuffer[off+6] = cpubuffer[off];
    dc9c:	40 83       	st	Z, r20
					cpubuffer[off] = 0;
    dc9e:	1c 92       	st	X, r1
    dca0:	e7 cf       	rjmp	.-50     	; 0xdc70 <DoPlay+0x1c78>
					goto CPUGRAVITYTOP;//rescan the column
				}
			}
			off+=6;
    dca2:	3a 5f       	subi	r19, 0xFA	; 250
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
CPUGRAVITYTOP:
		off = x;
		for(uint8_t y=0;y<15-crashheight[1];y++){
    dca4:	2f 5f       	subi	r18, 0xFF	; 255
    dca6:	82 2f       	mov	r24, r18
    dca8:	90 e0       	ldi	r25, 0x00	; 0
    dcaa:	86 17       	cp	r24, r22
    dcac:	97 07       	cpc	r25, r23
    dcae:	44 f3       	brlt	.-48     	; 0xdc80 <DoPlay+0x1c88>
	//start from the top of the well

//CPUGRAVITYTOP:
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
    dcb0:	5f 5f       	subi	r21, 0xFF	; 255
    dcb2:	56 30       	cpi	r21, 0x06	; 6
    dcb4:	e9 f6       	brne	.-70     	; 0xdc70 <DoPlay+0x1c78>
    dcb6:	cb c4       	rjmp	.+2454   	; 0xe64e <DoPlay+0x2656>
		if(vsync_flag)
			return 0;
		goto CPUSCORETOP;
	}
	if(overall > cpuscoretocome)//for CpuShouldCrash()
		cpuscoretocome = overall;
    dcb8:	f0 92 e2 0f 	sts	0x0FE2, r15
	
	cpulastchain = chain;
    dcbc:	d0 92 3b 0f 	sts	0x0F3B, r13
	if(flashingjeweltimer[1] && !(cpubuffer[cpuflashingjeweloffset]&FLASHINGJEWEL))//eliminated flashing jewel, worth a lot
    dcc0:	80 91 73 0f 	lds	r24, 0x0F73
    dcc4:	88 23       	and	r24, r24
    dcc6:	51 f0       	breq	.+20     	; 0xdcdc <DoPlay+0x1ce4>
    dcc8:	e0 91 5c 0e 	lds	r30, 0x0E5C
    dccc:	f0 e0       	ldi	r31, 0x00	; 0
    dcce:	ec 5b       	subi	r30, 0xBC	; 188
    dcd0:	f2 4f       	sbci	r31, 0xF2	; 242
    dcd2:	80 81       	ld	r24, Z
    dcd4:	85 fd       	sbrc	r24, 5
    dcd6:	02 c0       	rjmp	.+4      	; 0xdcdc <DoPlay+0x1ce4>
		overall += 12;
    dcd8:	bc e0       	ldi	r27, 0x0C	; 12
    dcda:	fb 0e       	add	r15, r27
	return overall*overall*overall*overall;
    dcdc:	8f 2d       	mov	r24, r15
    dcde:	90 e0       	ldi	r25, 0x00	; 0
    dce0:	fc 01       	movw	r30, r24
    dce2:	ee 9f       	mul	r30, r30
    dce4:	c0 01       	movw	r24, r0
    dce6:	ef 9f       	mul	r30, r31
    dce8:	90 0d       	add	r25, r0
    dcea:	fe 9f       	mul	r31, r30
    dcec:	90 0d       	add	r25, r0
    dcee:	11 24       	eor	r1, r1
    dcf0:	9c 01       	movw	r18, r24
    dcf2:	22 9f       	mul	r18, r18
    dcf4:	c0 01       	movw	r24, r0
    dcf6:	23 9f       	mul	r18, r19
    dcf8:	90 0d       	add	r25, r0
    dcfa:	32 9f       	mul	r19, r18
    dcfc:	90 0d       	add	r25, r0
    dcfe:	11 24       	eor	r1, r1
    dd00:	7c 01       	movw	r14, r24
    dd02:	00 27       	eor	r16, r16
    dd04:	f7 fc       	sbrc	r15, 7
    dd06:	00 95       	com	r16
    dd08:	10 2f       	mov	r17, r16
    dd0a:	03 c0       	rjmp	.+6      	; 0xdd12 <DoPlay+0x1d1a>
    dd0c:	ee 24       	eor	r14, r14
    dd0e:	ff 24       	eor	r15, r15
    dd10:	87 01       	movw	r16, r14
		//	cpueval[cpumovepos[0]] = 1000L;
		//	cputotal = (int32_t)(800L);
			uint8_t bufferreturn;
			if(true){//CpuBufferMove(cpumovepos[0],false)){
				bufferreturn = CpuBufferMove(cpumovepos[0],false);
				cpulastscore = CpuScoreAndGravity(cpumovepos[0]/3);
    dd12:	e0 92 76 0f 	sts	0x0F76, r14
    dd16:	f0 92 77 0f 	sts	0x0F77, r15
    dd1a:	00 93 78 0f 	sts	0x0F78, r16
    dd1e:	10 93 79 0f 	sts	0x0F79, r17
				//ColumnsPrint3num(14,7+cpumovepos[0],cpulastscore);
				//if(cpulastscore)
				//	WaitVsync(60);
				if(!bufferreturn){
    dd22:	cc 20       	and	r12, r12
    dd24:	71 f4       	brne	.+28     	; 0xdd42 <DoPlay+0x1d4a>
				
					if(!cpulastscore){//move is a loss if it didn't score
    dd26:	e1 14       	cp	r14, r1
    dd28:	f1 04       	cpc	r15, r1
    dd2a:	01 05       	cpc	r16, r1
    dd2c:	11 05       	cpc	r17, r1
    dd2e:	49 f4       	brne	.+18     	; 0xdd42 <DoPlay+0x1d4a>
						cputotal = 0;
    dd30:	10 92 f2 0f 	sts	0x0FF2, r1
    dd34:	10 92 f3 0f 	sts	0x0FF3, r1
    dd38:	10 92 f4 0f 	sts	0x0FF4, r1
    dd3c:	10 92 f5 0f 	sts	0x0FF5, r1
    dd40:	e1 c3       	rjmp	.+1986   	; 0xe504 <DoPlay+0x250c>
				//cpulastscore = cpulastscore*cpulastscore*cpulastscore*cpulastscore;
			//	if(cpulastscore){
					//ColumnsPrint3num(16,16,cpulastscore);
				//	while(true){};
			//	}
				if(cpuscoremultiplier)
    dd42:	20 91 f1 0f 	lds	r18, 0x0FF1
    dd46:	22 23       	and	r18, r18
    dd48:	d1 f0       	breq	.+52     	; 0xdd7e <DoPlay+0x1d86>
					cputotal += (int32_t)(cpulastscore*cpuscoremultiplier);
    dd4a:	30 e0       	ldi	r19, 0x00	; 0
    dd4c:	40 e0       	ldi	r20, 0x00	; 0
    dd4e:	50 e0       	ldi	r21, 0x00	; 0
    dd50:	c8 01       	movw	r24, r16
    dd52:	b7 01       	movw	r22, r14
    dd54:	de d4       	rcall	.+2492   	; 0xe712 <__mulsi3>
    dd56:	20 91 f2 0f 	lds	r18, 0x0FF2
    dd5a:	30 91 f3 0f 	lds	r19, 0x0FF3
    dd5e:	40 91 f4 0f 	lds	r20, 0x0FF4
    dd62:	50 91 f5 0f 	lds	r21, 0x0FF5
    dd66:	26 0f       	add	r18, r22
    dd68:	37 1f       	adc	r19, r23
    dd6a:	48 1f       	adc	r20, r24
    dd6c:	59 1f       	adc	r21, r25
    dd6e:	20 93 f2 0f 	sts	0x0FF2, r18
    dd72:	30 93 f3 0f 	sts	0x0FF3, r19
    dd76:	40 93 f4 0f 	sts	0x0FF4, r20
    dd7a:	50 93 f5 0f 	sts	0x0FF5, r21
				if(cpulastchain > 1){//good chain, we will take these all day long!
    dd7e:	80 91 3b 0f 	lds	r24, 0x0F3B
    dd82:	82 30       	cpi	r24, 0x02	; 2
    dd84:	68 f0       	brcs	.+26     	; 0xdda0 <DoPlay+0x1da8>
					cpustate = CPUDECIDED;
    dd86:	80 e2       	ldi	r24, 0x20	; 32
    dd88:	80 93 6b 0e 	sts	0x0E6B, r24
					cpudecision[0] = cpumovepos[0]/3;
    dd8c:	20 91 3b 0e 	lds	r18, 0x0E3B
    dd90:	82 2f       	mov	r24, r18
    dd92:	63 e0       	ldi	r22, 0x03	; 3
    dd94:	dd d4       	rcall	.+2490   	; 0xe750 <__udivmodqi4>
    dd96:	80 93 2d 0e 	sts	0x0E2D, r24
					cpudecision[1] = (cpumovepos[0]+3)%3;
    dd9a:	30 e0       	ldi	r19, 0x00	; 0
    dd9c:	c9 01       	movw	r24, r18
    dd9e:	34 c4       	rjmp	.+2152   	; 0xe608 <DoPlay+0x2610>
					return;
				}
				
				if(!cpusecondmovemultiplier){//not thinking about second move, see if we are still doing evaluation
    dda0:	80 91 80 0f 	lds	r24, 0x0F80
    dda4:	88 23       	and	r24, r24
    dda6:	09 f0       	breq	.+2      	; 0xddaa <DoPlay+0x1db2>
    dda8:	d8 c0       	rjmp	.+432    	; 0xdf5a <DoPlay+0x1f62>
					if(cpuevalmultiplier){
    ddaa:	80 91 3a 0f 	lds	r24, 0x0F3A
    ddae:	88 23       	and	r24, r24
    ddb0:	09 f4       	brne	.+2      	; 0xddb4 <DoPlay+0x1dbc>
    ddb2:	95 c0       	rjmp	.+298    	; 0xdede <DoPlay+0x1ee6>
    ddb4:	28 ee       	ldi	r18, 0xE8	; 232
    ddb6:	33 e0       	ldi	r19, 0x03	; 3
    ddb8:	4c e0       	ldi	r20, 0x0C	; 12
    ddba:	50 e0       	ldi	r21, 0x00	; 0
    ddbc:	4c c0       	rjmp	.+152    	; 0xde56 <DoPlay+0x1e5e>
		for(uint8_t x=1;x<5;x++){
			/*if(padstate[0] & BTN_A){
				set_vram(18+(x*2),(y-3)*2,111);
				WaitVsync(2);
			}*/
			t = cpubuffer[off++];
    ddbe:	97 81       	ldd	r25, Z+7	; 0x07
			if(!t){
    ddc0:	99 23       	and	r25, r25
    ddc2:	19 f4       	brne	.+6      	; 0xddca <DoPlay+0x1dd2>
				score++;
    ddc4:	2f 5f       	subi	r18, 0xFF	; 255
    ddc6:	3f 4f       	sbci	r19, 0xFF	; 255
    ddc8:	3c c0       	rjmp	.+120    	; 0xde42 <DoPlay+0x1e4a>
				continue;
			}				
			if(t == cpubuffer[off-2])//left
    ddca:	66 81       	ldd	r22, Z+6	; 0x06
    ddcc:	96 17       	cp	r25, r22
    ddce:	19 f4       	brne	.+6      	; 0xddd6 <DoPlay+0x1dde>
				score += 2;
    ddd0:	2e 5f       	subi	r18, 0xFE	; 254
    ddd2:	3f 4f       	sbci	r19, 0xFF	; 255
    ddd4:	04 c0       	rjmp	.+8      	; 0xddde <DoPlay+0x1de6>
			else if(cpubuffer[off-2])
    ddd6:	66 23       	and	r22, r22
    ddd8:	11 f0       	breq	.+4      	; 0xddde <DoPlay+0x1de6>
				score -= 1;
    ddda:	21 50       	subi	r18, 0x01	; 1
    dddc:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off])//right
    ddde:	80 85       	ldd	r24, Z+8	; 0x08
    dde0:	98 17       	cp	r25, r24
    dde2:	19 f4       	brne	.+6      	; 0xddea <DoPlay+0x1df2>
				score += 2;
    dde4:	2e 5f       	subi	r18, 0xFE	; 254
    dde6:	3f 4f       	sbci	r19, 0xFF	; 255
    dde8:	04 c0       	rjmp	.+8      	; 0xddf2 <DoPlay+0x1dfa>
			else if(cpubuffer[off])
    ddea:	88 23       	and	r24, r24
    ddec:	11 f0       	breq	.+4      	; 0xddf2 <DoPlay+0x1dfa>
				score -= 1;
    ddee:	21 50       	subi	r18, 0x01	; 1
    ddf0:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off-7])//up
    ddf2:	81 81       	ldd	r24, Z+1	; 0x01
    ddf4:	98 17       	cp	r25, r24
    ddf6:	19 f4       	brne	.+6      	; 0xddfe <DoPlay+0x1e06>
				score += 2;
    ddf8:	2e 5f       	subi	r18, 0xFE	; 254
    ddfa:	3f 4f       	sbci	r19, 0xFF	; 255
    ddfc:	04 c0       	rjmp	.+8      	; 0xde06 <DoPlay+0x1e0e>
			else if(cpubuffer[off-7])
    ddfe:	88 23       	and	r24, r24
    de00:	11 f0       	breq	.+4      	; 0xde06 <DoPlay+0x1e0e>
				score -= 1;
    de02:	21 50       	subi	r18, 0x01	; 1
    de04:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off+5])//down
    de06:	85 85       	ldd	r24, Z+13	; 0x0d
    de08:	98 17       	cp	r25, r24
    de0a:	19 f4       	brne	.+6      	; 0xde12 <DoPlay+0x1e1a>
				score += 2;
    de0c:	2e 5f       	subi	r18, 0xFE	; 254
    de0e:	3f 4f       	sbci	r19, 0xFF	; 255
    de10:	04 c0       	rjmp	.+8      	; 0xde1a <DoPlay+0x1e22>
			else if(cpubuffer[off+5])
    de12:	88 23       	and	r24, r24
    de14:	11 f0       	breq	.+4      	; 0xde1a <DoPlay+0x1e22>
				score -= 1;
    de16:	21 50       	subi	r18, 0x01	; 1
    de18:	30 40       	sbci	r19, 0x00	; 0

			if(t == cpubuffer[off-8])//up left
    de1a:	80 81       	ld	r24, Z
    de1c:	98 17       	cp	r25, r24
    de1e:	19 f4       	brne	.+6      	; 0xde26 <DoPlay+0x1e2e>
				score += 3;
    de20:	2d 5f       	subi	r18, 0xFD	; 253
    de22:	3f 4f       	sbci	r19, 0xFF	; 255
    de24:	04 c0       	rjmp	.+8      	; 0xde2e <DoPlay+0x1e36>
			else if(cpubuffer[off-2])
    de26:	66 23       	and	r22, r22
    de28:	11 f0       	breq	.+4      	; 0xde2e <DoPlay+0x1e36>
				score -= 1;
    de2a:	21 50       	subi	r18, 0x01	; 1
    de2c:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off-6])//up right
    de2e:	82 81       	ldd	r24, Z+2	; 0x02
    de30:	98 17       	cp	r25, r24
    de32:	19 f4       	brne	.+6      	; 0xde3a <DoPlay+0x1e42>
				score += 3;
    de34:	2d 5f       	subi	r18, 0xFD	; 253
    de36:	3f 4f       	sbci	r19, 0xFF	; 255
    de38:	04 c0       	rjmp	.+8      	; 0xde42 <DoPlay+0x1e4a>
			else if(cpubuffer[off-6])
    de3a:	88 23       	and	r24, r24
    de3c:	11 f0       	breq	.+4      	; 0xde42 <DoPlay+0x1e4a>
				score -= 1;
    de3e:	21 50       	subi	r18, 0x01	; 1
    de40:	30 40       	sbci	r19, 0x00	; 0
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	uint16_t off = (3*6)+1;	
	for(uint8_t y=3;y<15;y++){
		for(uint8_t x=1;x<5;x++){
    de42:	7f 5f       	subi	r23, 0xFF	; 255
    de44:	31 96       	adiw	r30, 0x01	; 1
    de46:	75 30       	cpi	r23, 0x05	; 5
    de48:	09 f0       	breq	.+2      	; 0xde4c <DoPlay+0x1e54>
    de4a:	b9 cf       	rjmp	.-142    	; 0xddbe <DoPlay+0x1dc6>
    de4c:	4b 5f       	subi	r20, 0xFB	; 251
    de4e:	5f 4f       	sbci	r21, 0xFF	; 255
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	uint16_t off = (3*6)+1;	
	for(uint8_t y=3;y<15;y++){
    de50:	48 34       	cpi	r20, 0x48	; 72
    de52:	51 05       	cpc	r21, r1
    de54:	29 f0       	breq	.+10     	; 0xde60 <DoPlay+0x1e68>
    de56:	fa 01       	movw	r30, r20
    de58:	ec 5b       	subi	r30, 0xBC	; 188
    de5a:	f2 4f       	sbci	r31, 0xF2	; 242
    de5c:	71 e0       	ldi	r23, 0x01	; 1
    de5e:	af cf       	rjmp	.-162    	; 0xddbe <DoPlay+0x1dc6>
	*/
		}//x
		off += 1;
	}//y
	
	if(score > 1000)
    de60:	43 e0       	ldi	r20, 0x03	; 3
    de62:	29 3e       	cpi	r18, 0xE9	; 233
    de64:	34 07       	cpc	r19, r20
    de66:	18 f4       	brcc	.+6      	; 0xde6e <DoPlay+0x1e76>
    de68:	60 e0       	ldi	r22, 0x00	; 0
    de6a:	70 e0       	ldi	r23, 0x00	; 0
    de6c:	03 c0       	rjmp	.+6      	; 0xde74 <DoPlay+0x1e7c>
		score -= 1000;
    de6e:	b9 01       	movw	r22, r18
    de70:	68 5e       	subi	r22, 0xE8	; 232
    de72:	73 40       	sbci	r23, 0x03	; 3
	else
		score = 0;
	return score;
    de74:	80 e0       	ldi	r24, 0x00	; 0
    de76:	90 e0       	ldi	r25, 0x00	; 0
					return;
				}
				
				if(!cpusecondmovemultiplier){//not thinking about second move, see if we are still doing evaluation
					if(cpuevalmultiplier){
						(int32_t)(cpulasteval = CpuEvaluate());
    de78:	60 93 3c 0f 	sts	0x0F3C, r22
    de7c:	70 93 3d 0f 	sts	0x0F3D, r23
    de80:	80 93 3e 0f 	sts	0x0F3E, r24
    de84:	90 93 3f 0f 	sts	0x0F3F, r25
						if(cpulasteval > cpubaseval)
    de88:	20 91 de 0f 	lds	r18, 0x0FDE
    de8c:	30 91 df 0f 	lds	r19, 0x0FDF
    de90:	40 91 e0 0f 	lds	r20, 0x0FE0
    de94:	50 91 e1 0f 	lds	r21, 0x0FE1
    de98:	26 17       	cp	r18, r22
    de9a:	37 07       	cpc	r19, r23
    de9c:	48 07       	cpc	r20, r24
    de9e:	59 07       	cpc	r21, r25
    dea0:	f4 f4       	brge	.+60     	; 0xdede <DoPlay+0x1ee6>
							cputotal += (int32_t)((cpulasteval-cpubaseval)*cpuevalmultiplier);	
    dea2:	62 1b       	sub	r22, r18
    dea4:	73 0b       	sbc	r23, r19
    dea6:	84 0b       	sbc	r24, r20
    dea8:	95 0b       	sbc	r25, r21
    deaa:	20 91 3a 0f 	lds	r18, 0x0F3A
    deae:	30 e0       	ldi	r19, 0x00	; 0
    deb0:	40 e0       	ldi	r20, 0x00	; 0
    deb2:	50 e0       	ldi	r21, 0x00	; 0
    deb4:	2e d4       	rcall	.+2140   	; 0xe712 <__mulsi3>
    deb6:	20 91 f2 0f 	lds	r18, 0x0FF2
    deba:	30 91 f3 0f 	lds	r19, 0x0FF3
    debe:	40 91 f4 0f 	lds	r20, 0x0FF4
    dec2:	50 91 f5 0f 	lds	r21, 0x0FF5
    dec6:	26 0f       	add	r18, r22
    dec8:	37 1f       	adc	r19, r23
    deca:	48 1f       	adc	r20, r24
    decc:	59 1f       	adc	r21, r25
    dece:	20 93 f2 0f 	sts	0x0FF2, r18
    ded2:	30 93 f3 0f 	sts	0x0FF3, r19
    ded6:	40 93 f4 0f 	sts	0x0FF4, r20
    deda:	50 93 f5 0f 	sts	0x0FF5, r21
					}						
					(int32_t)(cputotal += (int32_t)(CpuEvaluateHeight()*cpuheightmultiplier));
    dede:	a0 90 f2 0f 	lds	r10, 0x0FF2
    dee2:	b0 90 f3 0f 	lds	r11, 0x0FF3
    dee6:	c0 90 f4 0f 	lds	r12, 0x0FF4
    deea:	d0 90 f5 0f 	lds	r13, 0x0FF5
		score = 0;
	return score;
}

inline int32_t CpuEvaluateHeight(){
	TriggerFx(0,255,true);
    deee:	80 e0       	ldi	r24, 0x00	; 0
    def0:	6f ef       	ldi	r22, 0xFF	; 255
    def2:	41 e0       	ldi	r20, 0x01	; 1
    def4:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <TriggerFx>
    def8:	e4 e4       	ldi	r30, 0x44	; 68
    defa:	fd e0       	ldi	r31, 0x0D	; 13
    defc:	90 e0       	ldi	r25, 0x00	; 0
	int16_t total = 0;
	for(uint8_t i=0;i<16*6;i++){
		if(cpubuffer[i])
    defe:	80 81       	ld	r24, Z
    df00:	88 23       	and	r24, r24
    df02:	69 f0       	breq	.+26     	; 0xdf1e <DoPlay+0x1f26>
			return (int32_t)(10*(i/6));
    df04:	89 2f       	mov	r24, r25
    df06:	66 e0       	ldi	r22, 0x06	; 6
    df08:	23 d4       	rcall	.+2118   	; 0xe750 <__udivmodqi4>
    df0a:	9a e0       	ldi	r25, 0x0A	; 10
    df0c:	89 9f       	mul	r24, r25
    df0e:	c0 01       	movw	r24, r0
    df10:	11 24       	eor	r1, r1
    df12:	7c 01       	movw	r14, r24
    df14:	00 27       	eor	r16, r16
    df16:	f7 fc       	sbrc	r15, 7
    df18:	00 95       	com	r16
    df1a:	10 2f       	mov	r17, r16
    df1c:	09 c0       	rjmp	.+18     	; 0xdf30 <DoPlay+0x1f38>
}

inline int32_t CpuEvaluateHeight(){
	TriggerFx(0,255,true);
	int16_t total = 0;
	for(uint8_t i=0;i<16*6;i++){
    df1e:	9f 5f       	subi	r25, 0xFF	; 255
    df20:	31 96       	adiw	r30, 0x01	; 1
    df22:	90 36       	cpi	r25, 0x60	; 96
    df24:	61 f7       	brne	.-40     	; 0xdefe <DoPlay+0x1f06>
    df26:	30 ea       	ldi	r19, 0xA0	; 160
    df28:	e3 2e       	mov	r14, r19
    df2a:	f1 2c       	mov	r15, r1
    df2c:	01 2d       	mov	r16, r1
    df2e:	11 2d       	mov	r17, r1
					if(cpuevalmultiplier){
						(int32_t)(cpulasteval = CpuEvaluate());
						if(cpulasteval > cpubaseval)
							cputotal += (int32_t)((cpulasteval-cpubaseval)*cpuevalmultiplier);	
					}						
					(int32_t)(cputotal += (int32_t)(CpuEvaluateHeight()*cpuheightmultiplier));
    df30:	20 91 57 0e 	lds	r18, 0x0E57
    df34:	30 e0       	ldi	r19, 0x00	; 0
    df36:	40 e0       	ldi	r20, 0x00	; 0
    df38:	50 e0       	ldi	r21, 0x00	; 0
    df3a:	c8 01       	movw	r24, r16
    df3c:	b7 01       	movw	r22, r14
    df3e:	e9 d3       	rcall	.+2002   	; 0xe712 <__mulsi3>
    df40:	a6 0e       	add	r10, r22
    df42:	b7 1e       	adc	r11, r23
    df44:	c8 1e       	adc	r12, r24
    df46:	d9 1e       	adc	r13, r25
    df48:	a0 92 f2 0f 	sts	0x0FF2, r10
    df4c:	b0 92 f3 0f 	sts	0x0FF3, r11
    df50:	c0 92 f4 0f 	sts	0x0FF4, r12
    df54:	d0 92 f5 0f 	sts	0x0FF5, r13
    df58:	d5 c2       	rjmp	.+1450   	; 0xe504 <DoPlay+0x250c>
					goto CPUNEXTMOVE;
				}else if(CpuBufferMove(cpumovepos[1],true)){//do second move
    df5a:	20 91 3c 0e 	lds	r18, 0x0E3C
//		evalweights[cpulastevalchange]--;
//	else goto reroll;
}*/
#endif
inline bool CpuBufferMove(uint8_t m, bool prvw){
	uint8_t c = m/3;
    df5e:	82 2f       	mov	r24, r18
    df60:	63 e0       	ldi	r22, 0x03	; 3
    df62:	f6 d3       	rcall	.+2028   	; 0xe750 <__udivmodqi4>
    df64:	48 2f       	mov	r20, r24
	uint8_t r = m%3;
    df66:	82 2f       	mov	r24, r18
    df68:	f3 d3       	rcall	.+2022   	; 0xe750 <__udivmodqi4>
    df6a:	79 2f       	mov	r23, r25
    df6c:	94 2f       	mov	r25, r20
    df6e:	30 e0       	ldi	r19, 0x00	; 0


inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
		if(cpubuffer[off])
    df70:	e9 2f       	mov	r30, r25
    df72:	f0 e0       	ldi	r31, 0x00	; 0
    df74:	ec 5b       	subi	r30, 0xBC	; 188
    df76:	f2 4f       	sbci	r31, 0xF2	; 242
    df78:	80 81       	ld	r24, Z
    df7a:	88 23       	and	r24, r24
    df7c:	29 f4       	brne	.+10     	; 0xdf88 <DoPlay+0x1f90>
}


inline uint8_t buffer_column_height(uint8_t c){
	uint8_t off = c;
	for(uint8_t i=0;i<16;i++){
    df7e:	3f 5f       	subi	r19, 0xFF	; 255
    df80:	30 31       	cpi	r19, 0x10	; 16
    df82:	41 f0       	breq	.+16     	; 0xdf94 <DoPlay+0x1f9c>
		if(cpubuffer[off])
			return i;
		off += 6;
    df84:	9a 5f       	subi	r25, 0xFA	; 250
    df86:	f4 cf       	rjmp	.-24     	; 0xdf70 <DoPlay+0x1f78>
	bool ret = true;
	//how high are the jewels in this column?
	//we want to set the jewel down without slowing CpuScoreAndGravity()
	uint8_t h = buffer_column_height(c);
	if(h < 6 || (h<9 && c == 2)){//HACK WAS h<6 losing move
    df88:	36 30       	cpi	r19, 0x06	; 6
    df8a:	30 f0       	brcs	.+12     	; 0xdf98 <DoPlay+0x1fa0>
    df8c:	39 30       	cpi	r19, 0x09	; 9
    df8e:	10 f4       	brcc	.+4      	; 0xdf94 <DoPlay+0x1f9c>
    df90:	42 30       	cpi	r20, 0x02	; 2
    df92:	11 f0       	breq	.+4      	; 0xdf98 <DoPlay+0x1fa0>
    df94:	61 e0       	ldi	r22, 0x01	; 1
    df96:	01 c0       	rjmp	.+2      	; 0xdf9a <DoPlay+0x1fa2>
    df98:	60 e0       	ldi	r22, 0x00	; 0
		//else if(!prvw && ((piece[(1*3)+0] == piece[(1*3)+1]) && (piece[(1*3)+1] == piece[(1*3)+2]))){}
		//else
		ret = false;//	return false;
	}		
//NOW JUST PUT PIECE AT TOP AND LET CPUSCOREANDGRAVITY() DO THE REST
	uint8_t offset = (((h-3)*6)+c);
    df9a:	24 2f       	mov	r18, r20
    df9c:	22 51       	subi	r18, 0x12	; 18
    df9e:	56 e0       	ldi	r21, 0x06	; 6
    dfa0:	35 9f       	mul	r19, r21
    dfa2:	c0 01       	movw	r24, r0
    dfa4:	11 24       	eor	r1, r1
    dfa6:	28 0f       	add	r18, r24
		for(uint8_t i=0;i<3;i++)
			pt[i] = piece[(1*3)+i];
	}
	else{//the preview piece
		for(uint8_t i=0;i<3;i++)
			pt[i] = preview[(1*3)+i];
    dfa8:	30 91 35 0f 	lds	r19, 0x0F35
    dfac:	40 91 36 0f 	lds	r20, 0x0F36
    dfb0:	50 91 37 0f 	lds	r21, 0x0F37
    dfb4:	90 e0       	ldi	r25, 0x00	; 0
    dfb6:	05 c0       	rjmp	.+10     	; 0xdfc2 <DoPlay+0x1fca>
	}
	
//	if(pt[0] == pt[1] && pt[1] == pt[2])//don't need consideration
//		return false;
	for(uint8_t i=0;i<r;i++){
    dfb8:	9f 5f       	subi	r25, 0xFF	; 255
    dfba:	85 2f       	mov	r24, r21
    dfbc:	54 2f       	mov	r21, r20
    dfbe:	43 2f       	mov	r20, r19
    dfc0:	38 2f       	mov	r19, r24
    dfc2:	97 17       	cp	r25, r23
    dfc4:	c8 f3       	brcs	.-14     	; 0xdfb8 <DoPlay+0x1fc0>
		pt[2] = pt[1];
		pt[1] = pt[0];
		pt[0] = t;
	}
	
	cpulastbufferoff = offset;
    dfc6:	20 93 4a 0f 	sts	0x0F4A, r18
	cpubuffer[offset] = pt[0];
    dfca:	e2 2f       	mov	r30, r18
    dfcc:	f0 e0       	ldi	r31, 0x00	; 0
    dfce:	ec 5b       	subi	r30, 0xBC	; 188
    dfd0:	f2 4f       	sbci	r31, 0xF2	; 242
    dfd2:	30 83       	st	Z, r19
	offset += 6;
    dfd4:	2a 5f       	subi	r18, 0xFA	; 250
	cpubuffer[offset] = pt[1];
    dfd6:	e2 2f       	mov	r30, r18
    dfd8:	f0 e0       	ldi	r31, 0x00	; 0
    dfda:	ec 5b       	subi	r30, 0xBC	; 188
    dfdc:	f2 4f       	sbci	r31, 0xF2	; 242
    dfde:	40 83       	st	Z, r20
	offset += 6;
	cpubuffer[offset] = pt[2];
    dfe0:	2a 5f       	subi	r18, 0xFA	; 250
    dfe2:	e2 2f       	mov	r30, r18
    dfe4:	f0 e0       	ldi	r31, 0x00	; 0
    dfe6:	ec 5b       	subi	r30, 0xBC	; 188
    dfe8:	f2 4f       	sbci	r31, 0xF2	; 242
    dfea:	50 83       	st	Z, r21
						if(cpulasteval > cpubaseval)
							cputotal += (int32_t)((cpulasteval-cpubaseval)*cpuevalmultiplier);	
					}						
					(int32_t)(cputotal += (int32_t)(CpuEvaluateHeight()*cpuheightmultiplier));
					goto CPUNEXTMOVE;
				}else if(CpuBufferMove(cpumovepos[1],true)){//do second move
    dfec:	66 23       	and	r22, r22
    dfee:	09 f4       	brne	.+2      	; 0xdff2 <DoPlay+0x1ffa>
    dff0:	89 c2       	rjmp	.+1298   	; 0xe504 <DoPlay+0x250c>
					//cputotal += 100;
					if(vsync_flag){//todo get rid of last score/eval calculated since we will redo it next time
    dff2:	80 91 f0 0c 	lds	r24, 0x0CF0
    dff6:	88 23       	and	r24, r24
    dff8:	99 f0       	breq	.+38     	; 0xe020 <DoPlay+0x2028>
						vsync_flag = 0;
    dffa:	10 92 f0 0c 	sts	0x0CF0, r1
						totalvsyncs++;
    dffe:	80 91 39 0e 	lds	r24, 0x0E39
    e002:	90 91 3a 0e 	lds	r25, 0x0E3A
    e006:	01 96       	adiw	r24, 0x01	; 1
    e008:	90 93 3a 0e 	sts	0x0E3A, r25
    e00c:	80 93 39 0e 	sts	0x0E39, r24
						if(++vsyncs > 1)
    e010:	80 91 38 0e 	lds	r24, 0x0E38
    e014:	8f 5f       	subi	r24, 0xFF	; 255
    e016:	80 93 38 0e 	sts	0x0E38, r24
    e01a:	82 30       	cpi	r24, 0x02	; 2
    e01c:	08 f0       	brcs	.+2      	; 0xe020 <DoPlay+0x2028>
    e01e:	2d c3       	rjmp	.+1626   	; 0xe67a <DoPlay+0x2682>
    e020:	ff 24       	eor	r15, r15
    e022:	dd 24       	eor	r13, r13
    e024:	70 e0       	ldi	r23, 0x00	; 0
    e026:	00 e0       	ldi	r16, 0x00	; 0
    e028:	ee 24       	eor	r14, r14
    e02a:	3e c0       	rjmp	.+124    	; 0xe0a8 <DoPlay+0x20b0>

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = x;
	    for(uint8_t y=1; y<16-crashheight[1];y++){//1
			off += 6;//
    e02c:	7a 5f       	subi	r23, 0xFA	; 250
			if(!(t = (cpubuffer[off]&15))){//get_buffer(x,y);
    e02e:	47 2f       	mov	r20, r23
    e030:	50 e0       	ldi	r21, 0x00	; 0
    e032:	da 01       	movw	r26, r20
    e034:	ac 5b       	subi	r26, 0xBC	; 188
    e036:	b2 4f       	sbci	r27, 0xF2	; 242
    e038:	8c 91       	ld	r24, X
    e03a:	8f 70       	andi	r24, 0x0F	; 15
    e03c:	29 f1       	breq	.+74     	; 0xe088 <DoPlay+0x2090>
				continue;
			}				
			//t0 = cpubuffer[off-6];//get_buffer(x,y-1);
			//t2 = cpubuffer[off+6];//get_buffer(x,y+1);

			if(((cpubuffer[off-6]&15) == t) && (t == (cpubuffer[off+6]&15))){//t1==t0 && t1==t2){
    e03e:	2e e3       	ldi	r18, 0x3E	; 62
    e040:	a2 2e       	mov	r10, r18
    e042:	2d e0       	ldi	r18, 0x0D	; 13
    e044:	b2 2e       	mov	r11, r18
    e046:	a4 0e       	add	r10, r20
    e048:	b5 1e       	adc	r11, r21
    e04a:	f5 01       	movw	r30, r10
    e04c:	60 81       	ld	r22, Z
    e04e:	26 2f       	mov	r18, r22
    e050:	30 e0       	ldi	r19, 0x00	; 0
    e052:	2f 70       	andi	r18, 0x0F	; 15
    e054:	30 70       	andi	r19, 0x00	; 0
    e056:	90 e0       	ldi	r25, 0x00	; 0
    e058:	28 17       	cp	r18, r24
    e05a:	39 07       	cpc	r19, r25
    e05c:	a9 f4       	brne	.+42     	; 0xe088 <DoPlay+0x2090>
    e05e:	46 5b       	subi	r20, 0xB6	; 182
    e060:	52 4f       	sbci	r21, 0xF2	; 242
    e062:	fa 01       	movw	r30, r20
    e064:	80 81       	ld	r24, Z
    e066:	90 e0       	ldi	r25, 0x00	; 0
    e068:	8f 70       	andi	r24, 0x0F	; 15
    e06a:	90 70       	andi	r25, 0x00	; 0
    e06c:	28 17       	cp	r18, r24
    e06e:	39 07       	cpc	r19, r25
    e070:	59 f4       	brne	.+22     	; 0xe088 <DoPlay+0x2090>
				cpubuffer[off-6] |= SCORINGJEWEL;//set_buffer_scoring(x,y-1);
    e072:	60 68       	ori	r22, 0x80	; 128
    e074:	f5 01       	movw	r30, r10
    e076:	60 83       	st	Z, r22
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    e078:	8c 91       	ld	r24, X
    e07a:	80 68       	ori	r24, 0x80	; 128
    e07c:	8c 93       	st	X, r24
				cpubuffer[off+6] |= SCORINGJEWEL;//set_buffer_scoring(x,y+1);
    e07e:	da 01       	movw	r26, r20
    e080:	8c 91       	ld	r24, X
    e082:	80 68       	ori	r24, 0x80	; 128
    e084:	8c 93       	st	X, r24
				total+=3;
    e086:	0d 5f       	subi	r16, 0xFD	; 253
//TODO GET RID OF ALL THESE DOUBLE LOOPS!!!!

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
		off = x;
	    for(uint8_t y=1; y<16-crashheight[1];y++){//1
    e088:	1f 5f       	subi	r17, 0xFF	; 255
    e08a:	21 2f       	mov	r18, r17
    e08c:	30 e0       	ldi	r19, 0x00	; 0
    e08e:	80 91 7f 0f 	lds	r24, 0x0F7F
    e092:	f4 01       	movw	r30, r8
    e094:	e8 1b       	sub	r30, r24
    e096:	f1 09       	sbc	r31, r1
    e098:	2e 17       	cp	r18, r30
    e09a:	3f 07       	cpc	r19, r31
    e09c:	3c f2       	brlt	.-114    	; 0xe02c <DoPlay+0x2034>
*/
CPUSCORETOP:
//TODO GET RID OF ALL THESE DOUBLE LOOPS!!!!

	// CHECK VERTICAL
	for(uint8_t x=0;x<6;x++) {
    e09e:	7e 2d       	mov	r23, r14
    e0a0:	7f 5f       	subi	r23, 0xFF	; 255
    e0a2:	76 30       	cpi	r23, 0x06	; 6
    e0a4:	19 f0       	breq	.+6      	; 0xe0ac <DoPlay+0x20b4>
    e0a6:	e7 2e       	mov	r14, r23
    e0a8:	11 e0       	ldi	r17, 0x01	; 1
    e0aa:	ef cf       	rjmp	.-34     	; 0xe08a <DoPlay+0x2092>
				total+=3;
			}
	    }
	}

	if(vsync_flag)
    e0ac:	80 91 f0 0c 	lds	r24, 0x0CF0
    e0b0:	88 23       	and	r24, r24
    e0b2:	09 f0       	breq	.+2      	; 0xe0b6 <DoPlay+0x20be>
    e0b4:	2f c1       	rjmp	.+606    	; 0xe314 <DoPlay+0x231c>
    e0b6:	81 e0       	ldi	r24, 0x01	; 1
    e0b8:	ee 24       	eor	r14, r14
    e0ba:	e3 94       	inc	r14
    e0bc:	48 c0       	rjmp	.+144    	; 0xe14e <DoPlay+0x2156>
		return 0;
	// CHECK HORIZONTAL
	for(uint8_t x=1;x<5;x++) {//TODO ELIMINATE DOUBLE LOOPS JUST SCAN THROUGH BUFFER INLINED CASES FOR ENTIRE ROW
		off = x;//
	    for(uint8_t y=0; y<16-crashheight[1];y++){
			if(!(t = (cpubuffer[off]&15))){//get_buffer(x,y);
    e0be:	50 e0       	ldi	r21, 0x00	; 0
    e0c0:	da 01       	movw	r26, r20
    e0c2:	ac 5b       	subi	r26, 0xBC	; 188
    e0c4:	b2 4f       	sbci	r27, 0xF2	; 242
    e0c6:	8c 91       	ld	r24, X
    e0c8:	8f 70       	andi	r24, 0x0F	; 15
    e0ca:	29 f1       	breq	.+74     	; 0xe116 <DoPlay+0x211e>
				continue;
			}				
			//t0 = cpubuffer[off-1];//get_buffer(x-1,y);
			//t2 = cpubuffer[off+1];//get_buffer(x+1,y);

			if(((cpubuffer[off-1]&15) == t) && (t == (cpubuffer[off+1]&15))){//t1==t0 && t1==t2){
    e0cc:	93 e4       	ldi	r25, 0x43	; 67
    e0ce:	a9 2e       	mov	r10, r25
    e0d0:	9d e0       	ldi	r25, 0x0D	; 13
    e0d2:	b9 2e       	mov	r11, r25
    e0d4:	a4 0e       	add	r10, r20
    e0d6:	b5 1e       	adc	r11, r21
    e0d8:	f5 01       	movw	r30, r10
    e0da:	60 81       	ld	r22, Z
    e0dc:	26 2f       	mov	r18, r22
    e0de:	30 e0       	ldi	r19, 0x00	; 0
    e0e0:	2f 70       	andi	r18, 0x0F	; 15
    e0e2:	30 70       	andi	r19, 0x00	; 0
    e0e4:	90 e0       	ldi	r25, 0x00	; 0
    e0e6:	28 17       	cp	r18, r24
    e0e8:	39 07       	cpc	r19, r25
    e0ea:	a9 f4       	brne	.+42     	; 0xe116 <DoPlay+0x211e>
    e0ec:	4b 5b       	subi	r20, 0xBB	; 187
    e0ee:	52 4f       	sbci	r21, 0xF2	; 242
    e0f0:	fa 01       	movw	r30, r20
    e0f2:	80 81       	ld	r24, Z
    e0f4:	90 e0       	ldi	r25, 0x00	; 0
    e0f6:	8f 70       	andi	r24, 0x0F	; 15
    e0f8:	90 70       	andi	r25, 0x00	; 0
    e0fa:	28 17       	cp	r18, r24
    e0fc:	39 07       	cpc	r19, r25
    e0fe:	59 f4       	brne	.+22     	; 0xe116 <DoPlay+0x211e>
				cpubuffer[off-1] |= SCORINGJEWEL;//set_buffer_scoring(x-1,y);
    e100:	60 68       	ori	r22, 0x80	; 128
    e102:	f5 01       	movw	r30, r10
    e104:	60 83       	st	Z, r22
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    e106:	8c 91       	ld	r24, X
    e108:	80 68       	ori	r24, 0x80	; 128
    e10a:	8c 93       	st	X, r24
				cpubuffer[off+1] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y);
    e10c:	da 01       	movw	r26, r20
    e10e:	8c 91       	ld	r24, X
    e110:	80 68       	ori	r24, 0x80	; 128
    e112:	8c 93       	st	X, r24
				total+=3;
    e114:	0d 5f       	subi	r16, 0xFD	; 253
	if(vsync_flag)
		return 0;
	// CHECK HORIZONTAL
	for(uint8_t x=1;x<5;x++) {//TODO ELIMINATE DOUBLE LOOPS JUST SCAN THROUGH BUFFER INLINED CASES FOR ENTIRE ROW
		off = x;//
	    for(uint8_t y=0; y<16-crashheight[1];y++){
    e116:	7f 5f       	subi	r23, 0xFF	; 255
    e118:	1a 5f       	subi	r17, 0xFA	; 250
    e11a:	41 2f       	mov	r20, r17
    e11c:	46 50       	subi	r20, 0x06	; 6
    e11e:	27 2f       	mov	r18, r23
    e120:	30 e0       	ldi	r19, 0x00	; 0
    e122:	80 91 7f 0f 	lds	r24, 0x0F7F
    e126:	f4 01       	movw	r30, r8
    e128:	e8 1b       	sub	r30, r24
    e12a:	f1 09       	sbc	r31, r1
    e12c:	2e 17       	cp	r18, r30
    e12e:	3f 07       	cpc	r19, r31
    e130:	34 f2       	brlt	.-116    	; 0xe0be <DoPlay+0x20c6>
				cpubuffer[off+1] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y);
				total+=3;
			}
			off += 6;//
	    }
		if(vsync_flag)
    e132:	80 91 f0 0c 	lds	r24, 0x0CF0
    e136:	88 23       	and	r24, r24
    e138:	09 f0       	breq	.+2      	; 0xe13c <DoPlay+0x2144>
    e13a:	ec c0       	rjmp	.+472    	; 0xe314 <DoPlay+0x231c>
	}

	if(vsync_flag)
		return 0;
	// CHECK HORIZONTAL
	for(uint8_t x=1;x<5;x++) {//TODO ELIMINATE DOUBLE LOOPS JUST SCAN THROUGH BUFFER INLINED CASES FOR ENTIRE ROW
    e13c:	8e 2d       	mov	r24, r14
    e13e:	8f 5f       	subi	r24, 0xFF	; 255
    e140:	85 30       	cpi	r24, 0x05	; 5
    e142:	21 f4       	brne	.+8      	; 0xe14c <DoPlay+0x2154>
    e144:	51 e0       	ldi	r21, 0x01	; 1
    e146:	ee 24       	eor	r14, r14
    e148:	e3 94       	inc	r14
    e14a:	73 c0       	rjmp	.+230    	; 0xe232 <DoPlay+0x223a>
    e14c:	e8 2e       	mov	r14, r24
    e14e:	18 2f       	mov	r17, r24
    e150:	1a 5f       	subi	r17, 0xFA	; 250
    e152:	70 e0       	ldi	r23, 0x00	; 0
    e154:	e2 cf       	rjmp	.-60     	; 0xe11a <DoPlay+0x2122>
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
		off = x;
		for(uint8_t y=1;y<15-crashheight[1]-1;y++) {
			off += 6;
    e156:	5a 5f       	subi	r21, 0xFA	; 250
			if(!(t = (cpubuffer[off]&15)))//get_buffer(x,y);
    e158:	e5 2f       	mov	r30, r21
    e15a:	f0 e0       	ldi	r31, 0x00	; 0
    e15c:	bf 01       	movw	r22, r30
    e15e:	6c 5b       	subi	r22, 0xBC	; 188
    e160:	72 4f       	sbci	r23, 0xF2	; 242
    e162:	db 01       	movw	r26, r22
    e164:	4c 91       	ld	r20, X
    e166:	84 2f       	mov	r24, r20
    e168:	8f 70       	andi	r24, 0x0F	; 15
    e16a:	09 f4       	brne	.+2      	; 0xe16e <DoPlay+0x2176>
    e16c:	4c c0       	rjmp	.+152    	; 0xe206 <DoPlay+0x220e>
			//t1 = cpubuffer[(off-1)+6];//get_buffer(x-1,y+1);
			//t2 = cpubuffer[(off+1)-6];//get_buffer(x+1,y-1);
			//t3 = cpubuffer[(off-1)-6];//get_buffer(x-1,y-1);
			//t4 = cpubuffer[(off+1)+6];//get_buffer(x+1,y+1);
			
			if((t == (cpubuffer[(off-1)+6]&15)) && (t == (cpubuffer[(off+1)-6]&15))){//t0==t1 && t0==t2){
    e16e:	28 2f       	mov	r18, r24
    e170:	30 e0       	ldi	r19, 0x00	; 0
    e172:	89 e4       	ldi	r24, 0x49	; 73
    e174:	a8 2e       	mov	r10, r24
    e176:	8d e0       	ldi	r24, 0x0D	; 13
    e178:	b8 2e       	mov	r11, r24
    e17a:	ae 0e       	add	r10, r30
    e17c:	bf 1e       	adc	r11, r31
    e17e:	d5 01       	movw	r26, r10
    e180:	8c 91       	ld	r24, X
    e182:	90 e0       	ldi	r25, 0x00	; 0
    e184:	8f 70       	andi	r24, 0x0F	; 15
    e186:	90 70       	andi	r25, 0x00	; 0
    e188:	28 17       	cp	r18, r24
    e18a:	39 07       	cpc	r19, r25
    e18c:	d1 f4       	brne	.+52     	; 0xe1c2 <DoPlay+0x21ca>
    e18e:	cf 01       	movw	r24, r30
    e190:	81 5c       	subi	r24, 0xC1	; 193
    e192:	92 4f       	sbci	r25, 0xF2	; 242
    e194:	9b a3       	std	Y+35, r25	; 0x23
    e196:	8a a3       	std	Y+34, r24	; 0x22
    e198:	dc 01       	movw	r26, r24
    e19a:	8c 91       	ld	r24, X
    e19c:	90 e0       	ldi	r25, 0x00	; 0
    e19e:	8f 70       	andi	r24, 0x0F	; 15
    e1a0:	90 70       	andi	r25, 0x00	; 0
    e1a2:	28 17       	cp	r18, r24
    e1a4:	39 07       	cpc	r19, r25
    e1a6:	69 f4       	brne	.+26     	; 0xe1c2 <DoPlay+0x21ca>
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    e1a8:	40 68       	ori	r20, 0x80	; 128
    e1aa:	db 01       	movw	r26, r22
    e1ac:	4c 93       	st	X, r20
				cpubuffer[(off-1)+6]|= SCORINGJEWEL;//set_buffer_scoring(x-1,y+1);
    e1ae:	d5 01       	movw	r26, r10
    e1b0:	8c 91       	ld	r24, X
    e1b2:	80 68       	ori	r24, 0x80	; 128
    e1b4:	8c 93       	st	X, r24
				cpubuffer[(off+1)-6] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y-1);
    e1b6:	aa a1       	ldd	r26, Y+34	; 0x22
    e1b8:	bb a1       	ldd	r27, Y+35	; 0x23
    e1ba:	8c 91       	ld	r24, X
    e1bc:	80 68       	ori	r24, 0x80	; 128
    e1be:	8c 93       	st	X, r24
				total+=3;
    e1c0:	0d 5f       	subi	r16, 0xFD	; 253
			}
			if((t == (cpubuffer[(off-1)-6]&15)) && (t == (cpubuffer[(off+1)+6]&15))){//t0==t3 && t0==t4){
    e1c2:	bf 01       	movw	r22, r30
    e1c4:	63 5c       	subi	r22, 0xC3	; 195
    e1c6:	72 4f       	sbci	r23, 0xF2	; 242
    e1c8:	db 01       	movw	r26, r22
    e1ca:	8c 91       	ld	r24, X
    e1cc:	90 e0       	ldi	r25, 0x00	; 0
    e1ce:	8f 70       	andi	r24, 0x0F	; 15
    e1d0:	90 70       	andi	r25, 0x00	; 0
    e1d2:	28 17       	cp	r18, r24
    e1d4:	39 07       	cpc	r19, r25
    e1d6:	b9 f4       	brne	.+46     	; 0xe206 <DoPlay+0x220e>
    e1d8:	df 01       	movw	r26, r30
    e1da:	a5 5b       	subi	r26, 0xB5	; 181
    e1dc:	b2 4f       	sbci	r27, 0xF2	; 242
    e1de:	8c 91       	ld	r24, X
    e1e0:	90 e0       	ldi	r25, 0x00	; 0
    e1e2:	8f 70       	andi	r24, 0x0F	; 15
    e1e4:	90 70       	andi	r25, 0x00	; 0
    e1e6:	28 17       	cp	r18, r24
    e1e8:	39 07       	cpc	r19, r25
    e1ea:	69 f4       	brne	.+26     	; 0xe206 <DoPlay+0x220e>
				cpubuffer[off] |= SCORINGJEWEL;//set_buffer_scoring(x,y);
    e1ec:	ec 5b       	subi	r30, 0xBC	; 188
    e1ee:	f2 4f       	sbci	r31, 0xF2	; 242
    e1f0:	80 81       	ld	r24, Z
    e1f2:	80 68       	ori	r24, 0x80	; 128
    e1f4:	80 83       	st	Z, r24
				cpubuffer[(off-1)-6] |= SCORINGJEWEL;//set_buffer_scoring(x-1,y-1);
    e1f6:	fb 01       	movw	r30, r22
    e1f8:	80 81       	ld	r24, Z
    e1fa:	80 68       	ori	r24, 0x80	; 128
    e1fc:	80 83       	st	Z, r24
				cpubuffer[(off+1)+6] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y+1);
    e1fe:	8c 91       	ld	r24, X
    e200:	80 68       	ori	r24, 0x80	; 128
    e202:	8c 93       	st	X, r24
				total+=3;
    e204:	0d 5f       	subi	r16, 0xFD	; 253
	}while(--off);
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
		off = x;
		for(uint8_t y=1;y<15-crashheight[1]-1;y++) {
    e206:	1f 5f       	subi	r17, 0xFF	; 255
    e208:	21 2f       	mov	r18, r17
    e20a:	30 e0       	ldi	r19, 0x00	; 0
    e20c:	80 91 7f 0f 	lds	r24, 0x0F7F
    e210:	b3 01       	movw	r22, r6
    e212:	68 1b       	sub	r22, r24
    e214:	71 09       	sbc	r23, r1
    e216:	26 17       	cp	r18, r22
    e218:	37 07       	cpc	r19, r23
    e21a:	0c f4       	brge	.+2      	; 0xe21e <DoPlay+0x2226>
    e21c:	9c cf       	rjmp	.-200    	; 0xe156 <DoPlay+0x215e>
				cpubuffer[(off-1)-6] |= SCORINGJEWEL;//set_buffer_scoring(x-1,y-1);
				cpubuffer[(off+1)+6] |= SCORINGJEWEL;//set_buffer_scoring(x+1,y+1);
				total+=3;
			}
		}
		if(vsync_flag)
    e21e:	80 91 f0 0c 	lds	r24, 0x0CF0
    e222:	88 23       	and	r24, r24
    e224:	09 f0       	breq	.+2      	; 0xe228 <DoPlay+0x2230>
    e226:	76 c0       	rjmp	.+236    	; 0xe314 <DoPlay+0x231c>
		}
		
	}while(--off);
	*/
	// CHECK DIAGONALS
	for(uint8_t x=1;x<5;x++) {
    e228:	5e 2d       	mov	r21, r14
    e22a:	5f 5f       	subi	r21, 0xFF	; 255
    e22c:	55 30       	cpi	r21, 0x05	; 5
    e22e:	19 f0       	breq	.+6      	; 0xe236 <DoPlay+0x223e>
    e230:	e5 2e       	mov	r14, r21
    e232:	11 e0       	ldi	r17, 0x01	; 1
    e234:	e9 cf       	rjmp	.-46     	; 0xe208 <DoPlay+0x2210>
			return 0;
	}
	

		
	if(total){
    e236:	00 23       	and	r16, r16
    e238:	d1 f0       	breq	.+52     	; 0xe26e <DoPlay+0x2276>
    e23a:	20 e0       	ldi	r18, 0x00	; 0
    e23c:	04 c0       	rjmp	.+8      	; 0xe246 <DoPlay+0x224e>
		for(uint8_t i=0;i<WELLSIZE-(crashheight[1]*6);i++)
			cpubuffer[i] = 0;		
    e23e:	ec 5b       	subi	r30, 0xBC	; 188
    e240:	f2 4f       	sbci	r31, 0xF2	; 242
    e242:	10 82       	st	Z, r1
	}
	

		
	if(total){
		for(uint8_t i=0;i<WELLSIZE-(crashheight[1]*6);i++)
    e244:	2f 5f       	subi	r18, 0xFF	; 255
    e246:	e2 2f       	mov	r30, r18
    e248:	f0 e0       	ldi	r31, 0x00	; 0
    e24a:	80 91 7f 0f 	lds	r24, 0x0F7F
    e24e:	90 e0       	ldi	r25, 0x00	; 0
    e250:	dc 01       	movw	r26, r24
    e252:	a4 9d       	mul	r26, r4
    e254:	c0 01       	movw	r24, r0
    e256:	a5 9d       	mul	r26, r5
    e258:	90 0d       	add	r25, r0
    e25a:	b4 9d       	mul	r27, r4
    e25c:	90 0d       	add	r25, r0
    e25e:	11 24       	eor	r1, r1
    e260:	81 5a       	subi	r24, 0xA1	; 161
    e262:	9f 4f       	sbci	r25, 0xFF	; 255
    e264:	8e 17       	cp	r24, r30
    e266:	9f 07       	cpc	r25, r31
    e268:	54 f7       	brge	.-44     	; 0xe23e <DoPlay+0x2246>
    e26a:	50 e0       	ldi	r21, 0x00	; 0
    e26c:	05 c0       	rjmp	.+10     	; 0xe278 <DoPlay+0x2280>
		total = 0;//<--
		if(vsync_flag)
			return 0;
		goto CPUSCORETOP;
	}
	if(overall > cpuscoretocome)//for CpuShouldCrash()
    e26e:	80 91 e2 0f 	lds	r24, 0x0FE2
    e272:	8f 15       	cp	r24, r15
    e274:	28 f1       	brcs	.+74     	; 0xe2c0 <DoPlay+0x22c8>
    e276:	26 c0       	rjmp	.+76     	; 0xe2c4 <DoPlay+0x22cc>
    e278:	35 2f       	mov	r19, r21
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
CPUGRAVITYTOP:
		off = x;
		for(uint8_t y=0;y<15-crashheight[1];y++){
    e27a:	80 91 7f 0f 	lds	r24, 0x0F7F
    e27e:	b1 01       	movw	r22, r2
    e280:	68 1b       	sub	r22, r24
    e282:	71 09       	sbc	r23, r1
    e284:	20 e0       	ldi	r18, 0x00	; 0
    e286:	13 c0       	rjmp	.+38     	; 0xe2ae <DoPlay+0x22b6>
			if(cpubuffer[off]){
    e288:	83 2f       	mov	r24, r19
    e28a:	90 e0       	ldi	r25, 0x00	; 0
    e28c:	dc 01       	movw	r26, r24
    e28e:	ac 5b       	subi	r26, 0xBC	; 188
    e290:	b2 4f       	sbci	r27, 0xF2	; 242
    e292:	4c 91       	ld	r20, X
    e294:	44 23       	and	r20, r20
    e296:	49 f0       	breq	.+18     	; 0xe2aa <DoPlay+0x22b2>
				if(!cpubuffer[off+6]){//!t1){
    e298:	fc 01       	movw	r30, r24
    e29a:	e6 5b       	subi	r30, 0xB6	; 182
    e29c:	f2 4f       	sbci	r31, 0xF2	; 242
    e29e:	80 81       	ld	r24, Z
    e2a0:	88 23       	and	r24, r24
    e2a2:	19 f4       	brne	.+6      	; 0xe2aa <DoPlay+0x22b2>
					cpubuffer[off+6] = cpubuffer[off];
    e2a4:	40 83       	st	Z, r20
					cpubuffer[off] = 0;
    e2a6:	1c 92       	st	X, r1
    e2a8:	e7 cf       	rjmp	.-50     	; 0xe278 <DoPlay+0x2280>
					goto CPUGRAVITYTOP;//rescan the column
				}
			}
			off+=6;
    e2aa:	3a 5f       	subi	r19, 0xFA	; 250
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
CPUGRAVITYTOP:
		off = x;
		for(uint8_t y=0;y<15-crashheight[1];y++){
    e2ac:	2f 5f       	subi	r18, 0xFF	; 255
    e2ae:	82 2f       	mov	r24, r18
    e2b0:	90 e0       	ldi	r25, 0x00	; 0
    e2b2:	86 17       	cp	r24, r22
    e2b4:	97 07       	cpc	r25, r23
    e2b6:	44 f3       	brlt	.-48     	; 0xe288 <DoPlay+0x2290>
	//start from the top of the well

//CPUGRAVITYTOP:
//	bool moved;
	if(total){
	for(int8_t x=0;x<6;x++){
    e2b8:	5f 5f       	subi	r21, 0xFF	; 255
    e2ba:	56 30       	cpi	r21, 0x06	; 6
    e2bc:	e9 f6       	brne	.-70     	; 0xe278 <DoPlay+0x2280>
    e2be:	d2 c1       	rjmp	.+932    	; 0xe664 <DoPlay+0x266c>
		if(vsync_flag)
			return 0;
		goto CPUSCORETOP;
	}
	if(overall > cpuscoretocome)//for CpuShouldCrash()
		cpuscoretocome = overall;
    e2c0:	f0 92 e2 0f 	sts	0x0FE2, r15
	
	cpulastchain = chain;
    e2c4:	d0 92 3b 0f 	sts	0x0F3B, r13
	if(flashingjeweltimer[1] && !(cpubuffer[cpuflashingjeweloffset]&FLASHINGJEWEL))//eliminated flashing jewel, worth a lot
    e2c8:	80 91 73 0f 	lds	r24, 0x0F73
    e2cc:	88 23       	and	r24, r24
    e2ce:	51 f0       	breq	.+20     	; 0xe2e4 <DoPlay+0x22ec>
    e2d0:	e0 91 5c 0e 	lds	r30, 0x0E5C
    e2d4:	f0 e0       	ldi	r31, 0x00	; 0
    e2d6:	ec 5b       	subi	r30, 0xBC	; 188
    e2d8:	f2 4f       	sbci	r31, 0xF2	; 242
    e2da:	80 81       	ld	r24, Z
    e2dc:	85 fd       	sbrc	r24, 5
    e2de:	02 c0       	rjmp	.+4      	; 0xe2e4 <DoPlay+0x22ec>
		overall += 12;
    e2e0:	bc e0       	ldi	r27, 0x0C	; 12
    e2e2:	fb 0e       	add	r15, r27
	return overall*overall*overall*overall;
    e2e4:	8f 2d       	mov	r24, r15
    e2e6:	90 e0       	ldi	r25, 0x00	; 0
    e2e8:	fc 01       	movw	r30, r24
    e2ea:	ee 9f       	mul	r30, r30
    e2ec:	c0 01       	movw	r24, r0
    e2ee:	ef 9f       	mul	r30, r31
    e2f0:	90 0d       	add	r25, r0
    e2f2:	fe 9f       	mul	r31, r30
    e2f4:	90 0d       	add	r25, r0
    e2f6:	11 24       	eor	r1, r1
    e2f8:	9c 01       	movw	r18, r24
    e2fa:	22 9f       	mul	r18, r18
    e2fc:	c0 01       	movw	r24, r0
    e2fe:	23 9f       	mul	r18, r19
    e300:	90 0d       	add	r25, r0
    e302:	32 9f       	mul	r19, r18
    e304:	90 0d       	add	r25, r0
    e306:	11 24       	eor	r1, r1
    e308:	7c 01       	movw	r14, r24
    e30a:	00 27       	eor	r16, r16
    e30c:	f7 fc       	sbrc	r15, 7
    e30e:	00 95       	com	r16
    e310:	10 2f       	mov	r17, r16
    e312:	03 c0       	rjmp	.+6      	; 0xe31a <DoPlay+0x2322>
    e314:	ee 24       	eor	r14, r14
    e316:	ff 24       	eor	r15, r15
    e318:	87 01       	movw	r16, r14
							return;
				
					}
					//TODO DONT CALCULATE IF SECOND JEWEL IS MAGIC OR ALL SAME
					//cpubestscore[cpubestoff] += 1;//better than a losing move...
					(int32_t)(cpulastscore = CpuScoreAndGravity(cpumovepos[1]/3));
    e31a:	e0 92 76 0f 	sts	0x0F76, r14
    e31e:	f0 92 77 0f 	sts	0x0F77, r15
    e322:	00 93 78 0f 	sts	0x0F78, r16
    e326:	10 93 79 0f 	sts	0x0F79, r17
					(int32_t)(cputotal += (cpulastscore*cpusecondmovemultiplier));
    e32a:	20 91 80 0f 	lds	r18, 0x0F80
    e32e:	30 e0       	ldi	r19, 0x00	; 0
    e330:	40 e0       	ldi	r20, 0x00	; 0
    e332:	50 e0       	ldi	r21, 0x00	; 0
    e334:	c8 01       	movw	r24, r16
    e336:	b7 01       	movw	r22, r14
    e338:	ec d1       	rcall	.+984    	; 0xe712 <__mulsi3>
    e33a:	5b 01       	movw	r10, r22
    e33c:	6c 01       	movw	r12, r24
    e33e:	80 91 f2 0f 	lds	r24, 0x0FF2
    e342:	90 91 f3 0f 	lds	r25, 0x0FF3
    e346:	a0 91 f4 0f 	lds	r26, 0x0FF4
    e34a:	b0 91 f5 0f 	lds	r27, 0x0FF5
    e34e:	a8 0e       	add	r10, r24
    e350:	b9 1e       	adc	r11, r25
    e352:	ca 1e       	adc	r12, r26
    e354:	db 1e       	adc	r13, r27
    e356:	a0 92 f2 0f 	sts	0x0FF2, r10
    e35a:	b0 92 f3 0f 	sts	0x0FF3, r11
    e35e:	c0 92 f4 0f 	sts	0x0FF4, r12
    e362:	d0 92 f5 0f 	sts	0x0FF5, r13
		score = 0;
	return score;
}

inline int32_t CpuEvaluateHeight(){
	TriggerFx(0,255,true);
    e366:	80 e0       	ldi	r24, 0x00	; 0
    e368:	6f ef       	ldi	r22, 0xFF	; 255
    e36a:	41 e0       	ldi	r20, 0x01	; 1
    e36c:	0e 94 5a 4e 	call	0x9cb4	; 0x9cb4 <TriggerFx>
    e370:	e4 e4       	ldi	r30, 0x44	; 68
    e372:	fd e0       	ldi	r31, 0x0D	; 13
    e374:	90 e0       	ldi	r25, 0x00	; 0
	int16_t total = 0;
	for(uint8_t i=0;i<16*6;i++){
		if(cpubuffer[i])
    e376:	80 81       	ld	r24, Z
    e378:	88 23       	and	r24, r24
    e37a:	69 f0       	breq	.+26     	; 0xe396 <DoPlay+0x239e>
			return (int32_t)(10*(i/6));
    e37c:	89 2f       	mov	r24, r25
    e37e:	66 e0       	ldi	r22, 0x06	; 6
    e380:	e7 d1       	rcall	.+974    	; 0xe750 <__udivmodqi4>
    e382:	9a e0       	ldi	r25, 0x0A	; 10
    e384:	89 9f       	mul	r24, r25
    e386:	c0 01       	movw	r24, r0
    e388:	11 24       	eor	r1, r1
    e38a:	7c 01       	movw	r14, r24
    e38c:	00 27       	eor	r16, r16
    e38e:	f7 fc       	sbrc	r15, 7
    e390:	00 95       	com	r16
    e392:	10 2f       	mov	r17, r16
    e394:	09 c0       	rjmp	.+18     	; 0xe3a8 <DoPlay+0x23b0>
}

inline int32_t CpuEvaluateHeight(){
	TriggerFx(0,255,true);
	int16_t total = 0;
	for(uint8_t i=0;i<16*6;i++){
    e396:	9f 5f       	subi	r25, 0xFF	; 255
    e398:	31 96       	adiw	r30, 0x01	; 1
    e39a:	90 36       	cpi	r25, 0x60	; 96
    e39c:	61 f7       	brne	.-40     	; 0xe376 <DoPlay+0x237e>
    e39e:	b0 ea       	ldi	r27, 0xA0	; 160
    e3a0:	eb 2e       	mov	r14, r27
    e3a2:	f1 2c       	mov	r15, r1
    e3a4:	01 2d       	mov	r16, r1
    e3a6:	11 2d       	mov	r17, r1
					}
					//TODO DONT CALCULATE IF SECOND JEWEL IS MAGIC OR ALL SAME
					//cpubestscore[cpubestoff] += 1;//better than a losing move...
					(int32_t)(cpulastscore = CpuScoreAndGravity(cpumovepos[1]/3));
					(int32_t)(cputotal += (cpulastscore*cpusecondmovemultiplier));
					(int32_t)(cputotal += (int32_t)(CpuEvaluateHeight()*cpuheightmultiplier));
    e3a8:	20 91 57 0e 	lds	r18, 0x0E57
    e3ac:	30 e0       	ldi	r19, 0x00	; 0
    e3ae:	40 e0       	ldi	r20, 0x00	; 0
    e3b0:	50 e0       	ldi	r21, 0x00	; 0
    e3b2:	c8 01       	movw	r24, r16
    e3b4:	b7 01       	movw	r22, r14
    e3b6:	ad d1       	rcall	.+858    	; 0xe712 <__mulsi3>
    e3b8:	a6 0e       	add	r10, r22
    e3ba:	b7 1e       	adc	r11, r23
    e3bc:	c8 1e       	adc	r12, r24
    e3be:	d9 1e       	adc	r13, r25
    e3c0:	a0 92 f2 0f 	sts	0x0FF2, r10
    e3c4:	b0 92 f3 0f 	sts	0x0FF3, r11
    e3c8:	c0 92 f4 0f 	sts	0x0FF4, r12
    e3cc:	d0 92 f5 0f 	sts	0x0FF5, r13
					if(cpuevalmultiplier){
    e3d0:	80 91 3a 0f 	lds	r24, 0x0F3A
    e3d4:	88 23       	and	r24, r24
    e3d6:	09 f4       	brne	.+2      	; 0xe3da <DoPlay+0x23e2>
    e3d8:	95 c0       	rjmp	.+298    	; 0xe504 <DoPlay+0x250c>
    e3da:	28 ee       	ldi	r18, 0xE8	; 232
    e3dc:	33 e0       	ldi	r19, 0x03	; 3
    e3de:	4c e0       	ldi	r20, 0x0C	; 12
    e3e0:	50 e0       	ldi	r21, 0x00	; 0
    e3e2:	4c c0       	rjmp	.+152    	; 0xe47c <DoPlay+0x2484>
		for(uint8_t x=1;x<5;x++){
			/*if(padstate[0] & BTN_A){
				set_vram(18+(x*2),(y-3)*2,111);
				WaitVsync(2);
			}*/
			t = cpubuffer[off++];
    e3e4:	97 81       	ldd	r25, Z+7	; 0x07
			if(!t){
    e3e6:	99 23       	and	r25, r25
    e3e8:	19 f4       	brne	.+6      	; 0xe3f0 <DoPlay+0x23f8>
				score++;
    e3ea:	2f 5f       	subi	r18, 0xFF	; 255
    e3ec:	3f 4f       	sbci	r19, 0xFF	; 255
    e3ee:	3c c0       	rjmp	.+120    	; 0xe468 <DoPlay+0x2470>
				continue;
			}				
			if(t == cpubuffer[off-2])//left
    e3f0:	66 81       	ldd	r22, Z+6	; 0x06
    e3f2:	96 17       	cp	r25, r22
    e3f4:	19 f4       	brne	.+6      	; 0xe3fc <DoPlay+0x2404>
				score += 2;
    e3f6:	2e 5f       	subi	r18, 0xFE	; 254
    e3f8:	3f 4f       	sbci	r19, 0xFF	; 255
    e3fa:	04 c0       	rjmp	.+8      	; 0xe404 <DoPlay+0x240c>
			else if(cpubuffer[off-2])
    e3fc:	66 23       	and	r22, r22
    e3fe:	11 f0       	breq	.+4      	; 0xe404 <DoPlay+0x240c>
				score -= 1;
    e400:	21 50       	subi	r18, 0x01	; 1
    e402:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off])//right
    e404:	80 85       	ldd	r24, Z+8	; 0x08
    e406:	98 17       	cp	r25, r24
    e408:	19 f4       	brne	.+6      	; 0xe410 <DoPlay+0x2418>
				score += 2;
    e40a:	2e 5f       	subi	r18, 0xFE	; 254
    e40c:	3f 4f       	sbci	r19, 0xFF	; 255
    e40e:	04 c0       	rjmp	.+8      	; 0xe418 <DoPlay+0x2420>
			else if(cpubuffer[off])
    e410:	88 23       	and	r24, r24
    e412:	11 f0       	breq	.+4      	; 0xe418 <DoPlay+0x2420>
				score -= 1;
    e414:	21 50       	subi	r18, 0x01	; 1
    e416:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off-7])//up
    e418:	81 81       	ldd	r24, Z+1	; 0x01
    e41a:	98 17       	cp	r25, r24
    e41c:	19 f4       	brne	.+6      	; 0xe424 <DoPlay+0x242c>
				score += 2;
    e41e:	2e 5f       	subi	r18, 0xFE	; 254
    e420:	3f 4f       	sbci	r19, 0xFF	; 255
    e422:	04 c0       	rjmp	.+8      	; 0xe42c <DoPlay+0x2434>
			else if(cpubuffer[off-7])
    e424:	88 23       	and	r24, r24
    e426:	11 f0       	breq	.+4      	; 0xe42c <DoPlay+0x2434>
				score -= 1;
    e428:	21 50       	subi	r18, 0x01	; 1
    e42a:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off+5])//down
    e42c:	85 85       	ldd	r24, Z+13	; 0x0d
    e42e:	98 17       	cp	r25, r24
    e430:	19 f4       	brne	.+6      	; 0xe438 <DoPlay+0x2440>
				score += 2;
    e432:	2e 5f       	subi	r18, 0xFE	; 254
    e434:	3f 4f       	sbci	r19, 0xFF	; 255
    e436:	04 c0       	rjmp	.+8      	; 0xe440 <DoPlay+0x2448>
			else if(cpubuffer[off+5])
    e438:	88 23       	and	r24, r24
    e43a:	11 f0       	breq	.+4      	; 0xe440 <DoPlay+0x2448>
				score -= 1;
    e43c:	21 50       	subi	r18, 0x01	; 1
    e43e:	30 40       	sbci	r19, 0x00	; 0

			if(t == cpubuffer[off-8])//up left
    e440:	80 81       	ld	r24, Z
    e442:	98 17       	cp	r25, r24
    e444:	19 f4       	brne	.+6      	; 0xe44c <DoPlay+0x2454>
				score += 3;
    e446:	2d 5f       	subi	r18, 0xFD	; 253
    e448:	3f 4f       	sbci	r19, 0xFF	; 255
    e44a:	04 c0       	rjmp	.+8      	; 0xe454 <DoPlay+0x245c>
			else if(cpubuffer[off-2])
    e44c:	66 23       	and	r22, r22
    e44e:	11 f0       	breq	.+4      	; 0xe454 <DoPlay+0x245c>
				score -= 1;
    e450:	21 50       	subi	r18, 0x01	; 1
    e452:	30 40       	sbci	r19, 0x00	; 0
			
			if(t == cpubuffer[off-6])//up right
    e454:	82 81       	ldd	r24, Z+2	; 0x02
    e456:	98 17       	cp	r25, r24
    e458:	19 f4       	brne	.+6      	; 0xe460 <DoPlay+0x2468>
				score += 3;
    e45a:	2d 5f       	subi	r18, 0xFD	; 253
    e45c:	3f 4f       	sbci	r19, 0xFF	; 255
    e45e:	04 c0       	rjmp	.+8      	; 0xe468 <DoPlay+0x2470>
			else if(cpubuffer[off-6])
    e460:	88 23       	and	r24, r24
    e462:	11 f0       	breq	.+4      	; 0xe468 <DoPlay+0x2470>
				score -= 1;
    e464:	21 50       	subi	r18, 0x01	; 1
    e466:	30 40       	sbci	r19, 0x00	; 0
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	uint16_t off = (3*6)+1;	
	for(uint8_t y=3;y<15;y++){
		for(uint8_t x=1;x<5;x++){
    e468:	7f 5f       	subi	r23, 0xFF	; 255
    e46a:	31 96       	adiw	r30, 0x01	; 1
    e46c:	75 30       	cpi	r23, 0x05	; 5
    e46e:	09 f0       	breq	.+2      	; 0xe472 <DoPlay+0x247a>
    e470:	b9 cf       	rjmp	.-142    	; 0xe3e4 <DoPlay+0x23ec>
    e472:	4b 5f       	subi	r20, 0xFB	; 251
    e474:	5f 4f       	sbci	r21, 0xFF	; 255
{ -8}{ -7}{ -6}{ -5}{ -4}{ -3}
{ -2}{ -1}{ X }{ +1}{ +2}{ +3}

*/
	uint16_t off = (3*6)+1;	
	for(uint8_t y=3;y<15;y++){
    e476:	48 34       	cpi	r20, 0x48	; 72
    e478:	51 05       	cpc	r21, r1
    e47a:	29 f0       	breq	.+10     	; 0xe486 <DoPlay+0x248e>
    e47c:	fa 01       	movw	r30, r20
    e47e:	ec 5b       	subi	r30, 0xBC	; 188
    e480:	f2 4f       	sbci	r31, 0xF2	; 242
    e482:	71 e0       	ldi	r23, 0x01	; 1
    e484:	af cf       	rjmp	.-162    	; 0xe3e4 <DoPlay+0x23ec>
	*/
		}//x
		off += 1;
	}//y
	
	if(score > 1000)
    e486:	43 e0       	ldi	r20, 0x03	; 3
    e488:	29 3e       	cpi	r18, 0xE9	; 233
    e48a:	34 07       	cpc	r19, r20
    e48c:	18 f4       	brcc	.+6      	; 0xe494 <DoPlay+0x249c>
    e48e:	60 e0       	ldi	r22, 0x00	; 0
    e490:	70 e0       	ldi	r23, 0x00	; 0
    e492:	03 c0       	rjmp	.+6      	; 0xe49a <DoPlay+0x24a2>
		score -= 1000;
    e494:	b9 01       	movw	r22, r18
    e496:	68 5e       	subi	r22, 0xE8	; 232
    e498:	73 40       	sbci	r23, 0x03	; 3
	else
		score = 0;
	return score;
    e49a:	80 e0       	ldi	r24, 0x00	; 0
    e49c:	90 e0       	ldi	r25, 0x00	; 0
					//cpubestscore[cpubestoff] += 1;//better than a losing move...
					(int32_t)(cpulastscore = CpuScoreAndGravity(cpumovepos[1]/3));
					(int32_t)(cputotal += (cpulastscore*cpusecondmovemultiplier));
					(int32_t)(cputotal += (int32_t)(CpuEvaluateHeight()*cpuheightmultiplier));
					if(cpuevalmultiplier){
						(int32_t)(cpulasteval = CpuEvaluate());
    e49e:	60 93 3c 0f 	sts	0x0F3C, r22
    e4a2:	70 93 3d 0f 	sts	0x0F3D, r23
    e4a6:	80 93 3e 0f 	sts	0x0F3E, r24
    e4aa:	90 93 3f 0f 	sts	0x0F3F, r25
						if(cpulasteval > cpubaseval)
    e4ae:	20 91 de 0f 	lds	r18, 0x0FDE
    e4b2:	30 91 df 0f 	lds	r19, 0x0FDF
    e4b6:	40 91 e0 0f 	lds	r20, 0x0FE0
    e4ba:	50 91 e1 0f 	lds	r21, 0x0FE1
    e4be:	26 17       	cp	r18, r22
    e4c0:	37 07       	cpc	r19, r23
    e4c2:	48 07       	cpc	r20, r24
    e4c4:	59 07       	cpc	r21, r25
    e4c6:	f4 f4       	brge	.+60     	; 0xe504 <DoPlay+0x250c>
							(int32_t)(cputotal += ((cpulasteval-cpubaseval)*cpuevalmultiplier));
    e4c8:	62 1b       	sub	r22, r18
    e4ca:	73 0b       	sbc	r23, r19
    e4cc:	84 0b       	sbc	r24, r20
    e4ce:	95 0b       	sbc	r25, r21
    e4d0:	20 91 3a 0f 	lds	r18, 0x0F3A
    e4d4:	30 e0       	ldi	r19, 0x00	; 0
    e4d6:	40 e0       	ldi	r20, 0x00	; 0
    e4d8:	50 e0       	ldi	r21, 0x00	; 0
    e4da:	1b d1       	rcall	.+566    	; 0xe712 <__mulsi3>
    e4dc:	20 91 f2 0f 	lds	r18, 0x0FF2
    e4e0:	30 91 f3 0f 	lds	r19, 0x0FF3
    e4e4:	40 91 f4 0f 	lds	r20, 0x0FF4
    e4e8:	50 91 f5 0f 	lds	r21, 0x0FF5
    e4ec:	26 0f       	add	r18, r22
    e4ee:	37 1f       	adc	r19, r23
    e4f0:	48 1f       	adc	r20, r24
    e4f2:	59 1f       	adc	r21, r25
    e4f4:	20 93 f2 0f 	sts	0x0FF2, r18
    e4f8:	30 93 f3 0f 	sts	0x0FF3, r19
    e4fc:	40 93 f4 0f 	sts	0x0FF4, r20
    e500:	50 93 f5 0f 	sts	0x0FF5, r21
				cpueval[cpumovepos[0]] = 0;
				
				goto CPUNEXTMOVE;
			}
CPUNEXTMOVE:
			cpueval[cpumovepos[0]] += cputotal;
    e504:	60 91 3b 0e 	lds	r22, 0x0E3B
    e508:	e6 2f       	mov	r30, r22
    e50a:	f0 e0       	ldi	r31, 0x00	; 0
    e50c:	ee 0f       	add	r30, r30
    e50e:	ff 1f       	adc	r31, r31
    e510:	ee 0f       	add	r30, r30
    e512:	ff 1f       	adc	r31, r31
    e514:	ea 56       	subi	r30, 0x6A	; 106
    e516:	f0 4f       	sbci	r31, 0xF0	; 240
    e518:	80 81       	ld	r24, Z
    e51a:	91 81       	ldd	r25, Z+1	; 0x01
    e51c:	a2 81       	ldd	r26, Z+2	; 0x02
    e51e:	b3 81       	ldd	r27, Z+3	; 0x03
    e520:	20 91 f2 0f 	lds	r18, 0x0FF2
    e524:	30 91 f3 0f 	lds	r19, 0x0FF3
    e528:	40 91 f4 0f 	lds	r20, 0x0FF4
    e52c:	50 91 f5 0f 	lds	r21, 0x0FF5
    e530:	82 0f       	add	r24, r18
    e532:	93 1f       	adc	r25, r19
    e534:	a4 1f       	adc	r26, r20
    e536:	b5 1f       	adc	r27, r21
    e538:	80 83       	st	Z, r24
    e53a:	91 83       	std	Z+1, r25	; 0x01
    e53c:	a2 83       	std	Z+2, r26	; 0x02
    e53e:	b3 83       	std	Z+3, r27	; 0x03

			if(++cpumovepos[0] > 17){
    e540:	6f 5f       	subi	r22, 0xFF	; 255
    e542:	60 93 3b 0e 	sts	0x0E3B, r22
    e546:	62 31       	cpi	r22, 0x12	; 18
    e548:	08 f4       	brcc	.+2      	; 0xe54c <DoPlay+0x2554>
    e54a:	f3 c9       	rjmp	.-3098   	; 0xd932 <DoPlay+0x193a>
				cpumovepos[0] = 0;
    e54c:	10 92 3b 0e 	sts	0x0E3B, r1
				if(!cpusecondmovemultiplier)
    e550:	80 91 80 0f 	lds	r24, 0x0F80
    e554:	88 23       	and	r24, r24
    e556:	19 f4       	brne	.+6      	; 0xe55e <DoPlay+0x2566>
					cpumovepos[1] = 17;
    e558:	81 e1       	ldi	r24, 0x11	; 17
    e55a:	80 93 3c 0e 	sts	0x0E3C, r24
				if(++cpumovepos[1] > 17){//tried all moves, use the best
    e55e:	80 91 3c 0e 	lds	r24, 0x0E3C
    e562:	8f 5f       	subi	r24, 0xFF	; 255
    e564:	80 93 3c 0e 	sts	0x0E3C, r24
    e568:	82 31       	cpi	r24, 0x12	; 18
    e56a:	08 f4       	brcc	.+2      	; 0xe56e <DoPlay+0x2576>
    e56c:	e2 c9       	rjmp	.-3132   	; 0xd932 <DoPlay+0x193a>
CPUPICKMOVE:			cpumovepos[1] = 0;
    e56e:	10 92 3c 0e 	sts	0x0E3C, r1
    e572:	e6 e9       	ldi	r30, 0x96	; 150
    e574:	ee 2e       	mov	r14, r30
    e576:	ef e0       	ldi	r30, 0x0F	; 15
    e578:	fe 2e       	mov	r15, r30
    e57a:	f7 01       	movw	r30, r14
    e57c:	60 e0       	ldi	r22, 0x00	; 0
    e57e:	80 e0       	ldi	r24, 0x00	; 0
    e580:	90 e0       	ldi	r25, 0x00	; 0
    e582:	a0 e0       	ldi	r26, 0x00	; 0
    e584:	b0 e0       	ldi	r27, 0x00	; 0
    e586:	0f ef       	ldi	r16, 0xFF	; 255

					uint8_t best = 255;
					int32_t mag = 0;
					for(uint8_t i=0;i<18;i++){
//ColumnsPrint3num(16,8+i,cpueval[i]/10);
						if((int32_t)(cpueval[i] > mag)){
    e588:	20 81       	ld	r18, Z
    e58a:	31 81       	ldd	r19, Z+1	; 0x01
    e58c:	42 81       	ldd	r20, Z+2	; 0x02
    e58e:	53 81       	ldd	r21, Z+3	; 0x03
    e590:	82 17       	cp	r24, r18
    e592:	93 07       	cpc	r25, r19
    e594:	a4 07       	cpc	r26, r20
    e596:	b5 07       	cpc	r27, r21
    e598:	1c f0       	brlt	.+6      	; 0xe5a0 <DoPlay+0x25a8>
    e59a:	9c 01       	movw	r18, r24
    e59c:	ad 01       	movw	r20, r26
    e59e:	01 c0       	rjmp	.+2      	; 0xe5a2 <DoPlay+0x25aa>
    e5a0:	06 2f       	mov	r16, r22
				if(++cpumovepos[1] > 17){//tried all moves, use the best
CPUPICKMOVE:			cpumovepos[1] = 0;

					uint8_t best = 255;
					int32_t mag = 0;
					for(uint8_t i=0;i<18;i++){
    e5a2:	6f 5f       	subi	r22, 0xFF	; 255
    e5a4:	34 96       	adiw	r30, 0x04	; 4
    e5a6:	62 31       	cpi	r22, 0x12	; 18
    e5a8:	19 f0       	breq	.+6      	; 0xe5b0 <DoPlay+0x25b8>
    e5aa:	da 01       	movw	r26, r20
    e5ac:	c9 01       	movw	r24, r18
    e5ae:	ec cf       	rjmp	.-40     	; 0xe588 <DoPlay+0x2590>
						if((int32_t)(cpueval[i] > mag)){
							best = i;
							(int32_t)(mag = cpueval[i]);
						}
					}
cpumovenum++;
    e5b0:	80 91 61 0e 	lds	r24, 0x0E61
    e5b4:	90 91 62 0e 	lds	r25, 0x0E62
    e5b8:	01 96       	adiw	r24, 0x01	; 1
    e5ba:	90 93 62 0e 	sts	0x0E62, r25
    e5be:	80 93 61 0e 	sts	0x0E61, r24
				//	if(best == 255)//could not make a move that doesn't lose, don't make a suicide move run out the time(maybe they will lose first)
					//	return;   //DOESNT WORK!!!
					if(padstate[0] & BTN_A){
    e5c2:	80 91 42 0e 	lds	r24, 0x0E42
    e5c6:	90 91 43 0e 	lds	r25, 0x0E43
    e5ca:	90 ff       	sbrs	r25, 0
    e5cc:	13 c0       	rjmp	.+38     	; 0xe5f4 <DoPlay+0x25fc>
    e5ce:	18 e0       	ldi	r17, 0x08	; 8
						for(uint8_t i=0;i<18;i++)
							ColumnsPrint3num(16,8+i,cpueval[i]);
    e5d0:	d7 01       	movw	r26, r14
    e5d2:	4d 91       	ld	r20, X+
    e5d4:	5c 91       	ld	r21, X
    e5d6:	80 e1       	ldi	r24, 0x10	; 16
    e5d8:	61 2f       	mov	r22, r17
    e5da:	0e 94 c2 54 	call	0xa984	; 0xa984 <ColumnsPrint3num>
    e5de:	e4 e0       	ldi	r30, 0x04	; 4
    e5e0:	f0 e0       	ldi	r31, 0x00	; 0
    e5e2:	ee 0e       	add	r14, r30
    e5e4:	ff 1e       	adc	r15, r31
    e5e6:	1f 5f       	subi	r17, 0xFF	; 255
					}
cpumovenum++;
				//	if(best == 255)//could not make a move that doesn't lose, don't make a suicide move run out the time(maybe they will lose first)
					//	return;   //DOESNT WORK!!!
					if(padstate[0] & BTN_A){
						for(uint8_t i=0;i<18;i++)
    e5e8:	1a 31       	cpi	r17, 0x1A	; 26
    e5ea:	91 f7       	brne	.-28     	; 0xe5d0 <DoPlay+0x25d8>
							ColumnsPrint3num(16,8+i,cpueval[i]);
						
						WaitVsync(180);
    e5ec:	84 eb       	ldi	r24, 0xB4	; 180
    e5ee:	90 e0       	ldi	r25, 0x00	; 0
    e5f0:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
						
					}
					cpustate = CPUDECIDED;
    e5f4:	80 e2       	ldi	r24, 0x20	; 32
    e5f6:	80 93 6b 0e 	sts	0x0E6B, r24
					cpudecision[0] = best/3;
    e5fa:	80 2f       	mov	r24, r16
    e5fc:	63 e0       	ldi	r22, 0x03	; 3
    e5fe:	a8 d0       	rcall	.+336    	; 0xe750 <__udivmodqi4>
    e600:	80 93 2d 0e 	sts	0x0E2D, r24
					cpudecision[1] = (best+3)%3;//HACK? WHAT IS WRONG HERE!
    e604:	80 2f       	mov	r24, r16
    e606:	90 e0       	ldi	r25, 0x00	; 0
    e608:	03 96       	adiw	r24, 0x03	; 3
    e60a:	63 e0       	ldi	r22, 0x03	; 3
    e60c:	70 e0       	ldi	r23, 0x00	; 0
    e60e:	c0 d0       	rcall	.+384    	; 0xe790 <__divmodhi4>
    e610:	80 93 2e 0e 	sts	0x0E2E, r24
    e614:	32 c0       	rjmp	.+100    	; 0xe67a <DoPlay+0x2682>

	//}
		return;
	}

	if(state[p] & (GAMEOVER|GETREADY))
    e616:	e8 a1       	ldd	r30, Y+32	; 0x20
    e618:	f9 a1       	ldd	r31, Y+33	; 0x21
    e61a:	e1 59       	subi	r30, 0x91	; 145
    e61c:	f1 4f       	sbci	r31, 0xF1	; 241
    e61e:	80 81       	ld	r24, Z
    e620:	98 2f       	mov	r25, r24
    e622:	80 79       	andi	r24, 0x90	; 144
    e624:	11 f0       	breq	.+4      	; 0xe62a <DoPlay+0x2632>
    e626:	0c 94 aa 65 	jmp	0xcb54	; 0xcb54 <DoPlay+0xb5c>
    e62a:	0c 94 68 64 	jmp	0xc8d0	; 0xc8d0 <DoPlay+0x8d8>
bool StartDown(uint8_t p){return ((padstate[p] & BTN_START) && !(oldpadstate[p] & BTN_START));}
bool SelectDown(uint8_t p){return ((padstate[p] & BTN_SELECT) && !(oldpadstate[p] & BTN_SELECT));}
bool UpDown(uint8_t p){return ((padstate[p] & BTN_UP) && !(oldpadstate[p] & BTN_UP));}
bool LeftDown(uint8_t p){return ((padstate[p] & BTN_LEFT) && !(oldpadstate[p] & BTN_LEFT));}
bool RightDown(uint8_t p){return ((padstate[p] & BTN_RIGHT) && !(oldpadstate[p] & BTN_RIGHT));}
bool DownDown(uint8_t p){return ((padstate[p] & BTN_DOWN) && !(oldpadstate[p] & BTN_DOWN));}
    e62e:	95 fd       	sbrc	r25, 5
    e630:	02 c0       	rjmp	.+4      	; 0xe636 <DoPlay+0x263e>
    e632:	0c 94 aa 65 	jmp	0xcb54	; 0xcb54 <DoPlay+0xb5c>
    e636:	0c 94 7a 64 	jmp	0xc8f4	; 0xc8f4 <DoPlay+0x8fc>
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
bool XDown(uint8_t p){return ((padstate[p] & BTN_X) && !(oldpadstate[p] & BTN_X));}
bool YDown(uint8_t p){return ((padstate[p] & BTN_Y) && !(oldpadstate[p] & BTN_Y));}
bool LSDown(uint8_t p){return ((padstate[p] & BTN_SL) && !(oldpadstate[p] & BTN_SL));}
bool RSDown(uint8_t p){return ((padstate[p] & BTN_SR) && !(oldpadstate[p] & BTN_SR));}
    e63a:	33 ff       	sbrs	r19, 3
    e63c:	02 c0       	rjmp	.+4      	; 0xe642 <DoPlay+0x264a>
    e63e:	0c 94 cf 64 	jmp	0xc99e	; 0xc99e <DoPlay+0x9a6>
bool DownHeld(uint8_t p){return (padstate[p] & BTN_DOWN);}
bool ADown(uint8_t p){return ((padstate[p] & BTN_A) && !(oldpadstate[p] & BTN_A));}
bool BDown(uint8_t p){return ((padstate[p] & BTN_B) && !(oldpadstate[p] & BTN_B));}
bool XDown(uint8_t p){return ((padstate[p] & BTN_X) && !(oldpadstate[p] & BTN_X));}
bool YDown(uint8_t p){return ((padstate[p] & BTN_Y) && !(oldpadstate[p] & BTN_Y));}
bool LSDown(uint8_t p){return ((padstate[p] & BTN_SL) && !(oldpadstate[p] & BTN_SL));}
    e642:	32 fd       	sbrc	r19, 2
    e644:	02 c0       	rjmp	.+4      	; 0xe64a <DoPlay+0x2652>
    e646:	0c 94 1a 65 	jmp	0xca34	; 0xca34 <DoPlay+0xa3c>
    e64a:	0c 94 dc 64 	jmp	0xc9b8	; 0xc9b8 <DoPlay+0x9c0>
	}		
	if(total){
		chain++;
		overall += (total*chain);
		total = 0;//<--
		if(vsync_flag)
    e64e:	80 91 f0 0c 	lds	r24, 0x0CF0
    e652:	88 23       	and	r24, r24
    e654:	09 f0       	breq	.+2      	; 0xe658 <DoPlay+0x2660>
    e656:	5a cb       	rjmp	.-2380   	; 0xdd0c <DoPlay+0x1d14>
			off+=6;
		}
	}
	}		
	if(total){
		chain++;
    e658:	d3 94       	inc	r13
		overall += (total*chain);
    e65a:	0d 9d       	mul	r16, r13
    e65c:	80 2d       	mov	r24, r0
    e65e:	11 24       	eor	r1, r1
    e660:	f8 0e       	add	r15, r24
    e662:	dc c9       	rjmp	.-3144   	; 0xda1c <DoPlay+0x1a24>
		total = 0;//<--
		if(vsync_flag)
    e664:	80 91 f0 0c 	lds	r24, 0x0CF0
    e668:	88 23       	and	r24, r24
    e66a:	09 f0       	breq	.+2      	; 0xe66e <DoPlay+0x2676>
    e66c:	53 ce       	rjmp	.-858    	; 0xe314 <DoPlay+0x231c>
			off+=6;
		}
	}
	}		
	if(total){
		chain++;
    e66e:	d3 94       	inc	r13
		overall += (total*chain);
    e670:	0d 9d       	mul	r16, r13
    e672:	80 2d       	mov	r24, r0
    e674:	11 24       	eor	r1, r1
    e676:	f8 0e       	add	r15, r24
    e678:	d5 cc       	rjmp	.-1622   	; 0xe024 <DoPlay+0x202c>
#ifdef DEBUG
WaitVsync(1);
#endif
		CpuThink();//all extra time goes to cpu player, he is expensive!
}
    e67a:	a3 96       	adiw	r28, 0x23	; 35
    e67c:	e2 e1       	ldi	r30, 0x12	; 18
    e67e:	d9 c0       	rjmp	.+434    	; 0xe832 <__epilogue_restores__>

0000e680 <main>:


//Boot loader limit 61440
//void main() __attribute__ ((noreturn));//gcc already knows it doesn't return...
void main(){
	InitMusicPlayer(patches);
    e680:	8d e6       	ldi	r24, 0x6D	; 109
    e682:	96 e6       	ldi	r25, 0x66	; 102
    e684:	0e 94 a5 4a 	call	0x954a	; 0x954a <InitMusicPlayer>
	SetTileTable(ColumnsTiles);
    e688:	84 ee       	ldi	r24, 0xE4	; 228
    e68a:	90 e0       	ldi	r25, 0x00	; 0
    e68c:	0e 94 91 49 	call	0x9322	; 0x9322 <SetTileTable>
    e690:	e0 e2       	ldi	r30, 0x20	; 32
    e692:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = RAM_TILES_COUNT;
    e694:	83 e2       	ldi	r24, 0x23	; 35
    e696:	81 93       	st	Z+, r24
//Boot loader limit 61440
//void main() __attribute__ ((noreturn));//gcc already knows it doesn't return...
void main(){
	InitMusicPlayer(patches);
	SetTileTable(ColumnsTiles);
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    e698:	94 e0       	ldi	r25, 0x04	; 4
    e69a:	ec 32       	cpi	r30, 0x2C	; 44
    e69c:	f9 07       	cpc	r31, r25
    e69e:	d9 f7       	brne	.-10     	; 0xe696 <main+0x16>
		else
			ColumnsPrint1num(10,10,0);
		WaitVsync(1);	
	}		
		*/
	lfsr[0] = lfsr[1] = lfsr[2] = 0x2A46l;//0xACE1;
    e6a0:	86 e4       	ldi	r24, 0x46	; 70
    e6a2:	9a e2       	ldi	r25, 0x2A	; 42
    e6a4:	90 93 66 0f 	sts	0x0F66, r25
    e6a8:	80 93 65 0f 	sts	0x0F65, r24
    e6ac:	90 93 64 0f 	sts	0x0F64, r25
    e6b0:	80 93 63 0f 	sts	0x0F63, r24
    e6b4:	90 93 62 0f 	sts	0x0F62, r25
    e6b8:	80 93 61 0f 	sts	0x0F61, r24
	cpuskill = 9;
    e6bc:	89 e0       	ldi	r24, 0x09	; 9
    e6be:	80 93 37 0e 	sts	0x0E37, r24
	level = 1;
    e6c2:	81 e0       	ldi	r24, 0x01	; 1
    e6c4:	80 93 4b 0f 	sts	0x0F4B, r24
	musictrack = !level;
    e6c8:	10 92 00 01 	sts	0x0100, r1
	StartSong(Song1);//StartSong(Song0);
    e6cc:	82 ee       	ldi	r24, 0xE2	; 226
    e6ce:	96 e7       	ldi	r25, 0x76	; 118
    e6d0:	0e 94 c0 4a 	call	0x9580	; 0x9580 <StartSong>
	SetMasterVolume(MASTERVOLUME);
    e6d4:	80 e8       	ldi	r24, 0x80	; 128
    e6d6:	0e 94 13 4b 	call	0x9626	; 0x9626 <SetMasterVolume>
	//while(1){};
	//Intro();
	game_state = GS_TITLE;
    e6da:	10 92 6a 0e 	sts	0x0E6A, r1
    e6de:	09 c0       	rjmp	.+18     	; 0xe6f2 <main+0x72>
	
MAINTOP:
	while(vsyncs < 2){
		WaitVsync(1);
    e6e0:	81 e0       	ldi	r24, 0x01	; 1
    e6e2:	90 e0       	ldi	r25, 0x00	; 0
    e6e4:	0e 94 d9 52 	call	0xa5b2	; 0xa5b2 <WaitVsync>
		vsyncs++;
    e6e8:	80 91 38 0e 	lds	r24, 0x0E38
    e6ec:	8f 5f       	subi	r24, 0xFF	; 255
    e6ee:	80 93 38 0e 	sts	0x0E38, r24
	//while(1){};
	//Intro();
	game_state = GS_TITLE;
	
MAINTOP:
	while(vsyncs < 2){
    e6f2:	80 91 38 0e 	lds	r24, 0x0E38
    e6f6:	82 30       	cpi	r24, 0x02	; 2
    e6f8:	98 f3       	brcs	.-26     	; 0xe6e0 <main+0x60>
		WaitVsync(1);
		vsyncs++;
	}
	vsyncs = 0;
    e6fa:	10 92 38 0e 	sts	0x0E38, r1
	
	if(game_state == GS_TITLE)
    e6fe:	80 91 6a 0e 	lds	r24, 0x0E6A
    e702:	88 23       	and	r24, r24
    e704:	19 f4       	brne	.+6      	; 0xe70c <main+0x8c>
		DoTitle();
    e706:	0e 94 55 5b 	call	0xb6aa	; 0xb6aa <DoTitle>
    e70a:	f3 cf       	rjmp	.-26     	; 0xe6f2 <main+0x72>
	else
		DoPlay();
    e70c:	0e 94 fc 5f 	call	0xbff8	; 0xbff8 <DoPlay>
    e710:	f0 cf       	rjmp	.-32     	; 0xe6f2 <main+0x72>

0000e712 <__mulsi3>:
    e712:	62 9f       	mul	r22, r18
    e714:	d0 01       	movw	r26, r0
    e716:	73 9f       	mul	r23, r19
    e718:	f0 01       	movw	r30, r0
    e71a:	82 9f       	mul	r24, r18
    e71c:	e0 0d       	add	r30, r0
    e71e:	f1 1d       	adc	r31, r1
    e720:	64 9f       	mul	r22, r20
    e722:	e0 0d       	add	r30, r0
    e724:	f1 1d       	adc	r31, r1
    e726:	92 9f       	mul	r25, r18
    e728:	f0 0d       	add	r31, r0
    e72a:	83 9f       	mul	r24, r19
    e72c:	f0 0d       	add	r31, r0
    e72e:	74 9f       	mul	r23, r20
    e730:	f0 0d       	add	r31, r0
    e732:	65 9f       	mul	r22, r21
    e734:	f0 0d       	add	r31, r0
    e736:	99 27       	eor	r25, r25
    e738:	72 9f       	mul	r23, r18
    e73a:	b0 0d       	add	r27, r0
    e73c:	e1 1d       	adc	r30, r1
    e73e:	f9 1f       	adc	r31, r25
    e740:	63 9f       	mul	r22, r19
    e742:	b0 0d       	add	r27, r0
    e744:	e1 1d       	adc	r30, r1
    e746:	f9 1f       	adc	r31, r25
    e748:	bd 01       	movw	r22, r26
    e74a:	cf 01       	movw	r24, r30
    e74c:	11 24       	eor	r1, r1
    e74e:	08 95       	ret

0000e750 <__udivmodqi4>:
    e750:	99 1b       	sub	r25, r25
    e752:	79 e0       	ldi	r23, 0x09	; 9
    e754:	04 c0       	rjmp	.+8      	; 0xe75e <__udivmodqi4_ep>

0000e756 <__udivmodqi4_loop>:
    e756:	99 1f       	adc	r25, r25
    e758:	96 17       	cp	r25, r22
    e75a:	08 f0       	brcs	.+2      	; 0xe75e <__udivmodqi4_ep>
    e75c:	96 1b       	sub	r25, r22

0000e75e <__udivmodqi4_ep>:
    e75e:	88 1f       	adc	r24, r24
    e760:	7a 95       	dec	r23
    e762:	c9 f7       	brne	.-14     	; 0xe756 <__udivmodqi4_loop>
    e764:	80 95       	com	r24
    e766:	08 95       	ret

0000e768 <__udivmodhi4>:
    e768:	aa 1b       	sub	r26, r26
    e76a:	bb 1b       	sub	r27, r27
    e76c:	51 e1       	ldi	r21, 0x11	; 17
    e76e:	07 c0       	rjmp	.+14     	; 0xe77e <__udivmodhi4_ep>

0000e770 <__udivmodhi4_loop>:
    e770:	aa 1f       	adc	r26, r26
    e772:	bb 1f       	adc	r27, r27
    e774:	a6 17       	cp	r26, r22
    e776:	b7 07       	cpc	r27, r23
    e778:	10 f0       	brcs	.+4      	; 0xe77e <__udivmodhi4_ep>
    e77a:	a6 1b       	sub	r26, r22
    e77c:	b7 0b       	sbc	r27, r23

0000e77e <__udivmodhi4_ep>:
    e77e:	88 1f       	adc	r24, r24
    e780:	99 1f       	adc	r25, r25
    e782:	5a 95       	dec	r21
    e784:	a9 f7       	brne	.-22     	; 0xe770 <__udivmodhi4_loop>
    e786:	80 95       	com	r24
    e788:	90 95       	com	r25
    e78a:	bc 01       	movw	r22, r24
    e78c:	cd 01       	movw	r24, r26
    e78e:	08 95       	ret

0000e790 <__divmodhi4>:
    e790:	97 fb       	bst	r25, 7
    e792:	09 2e       	mov	r0, r25
    e794:	07 26       	eor	r0, r23
    e796:	0a d0       	rcall	.+20     	; 0xe7ac <__divmodhi4_neg1>
    e798:	77 fd       	sbrc	r23, 7
    e79a:	04 d0       	rcall	.+8      	; 0xe7a4 <__divmodhi4_neg2>
    e79c:	e5 df       	rcall	.-54     	; 0xe768 <__udivmodhi4>
    e79e:	06 d0       	rcall	.+12     	; 0xe7ac <__divmodhi4_neg1>
    e7a0:	00 20       	and	r0, r0
    e7a2:	1a f4       	brpl	.+6      	; 0xe7aa <__divmodhi4_exit>

0000e7a4 <__divmodhi4_neg2>:
    e7a4:	70 95       	com	r23
    e7a6:	61 95       	neg	r22
    e7a8:	7f 4f       	sbci	r23, 0xFF	; 255

0000e7aa <__divmodhi4_exit>:
    e7aa:	08 95       	ret

0000e7ac <__divmodhi4_neg1>:
    e7ac:	f6 f7       	brtc	.-4      	; 0xe7aa <__divmodhi4_exit>
    e7ae:	90 95       	com	r25
    e7b0:	81 95       	neg	r24
    e7b2:	9f 4f       	sbci	r25, 0xFF	; 255
    e7b4:	08 95       	ret

0000e7b6 <__udivmodsi4>:
    e7b6:	a1 e2       	ldi	r26, 0x21	; 33
    e7b8:	1a 2e       	mov	r1, r26
    e7ba:	aa 1b       	sub	r26, r26
    e7bc:	bb 1b       	sub	r27, r27
    e7be:	fd 01       	movw	r30, r26
    e7c0:	0d c0       	rjmp	.+26     	; 0xe7dc <__udivmodsi4_ep>

0000e7c2 <__udivmodsi4_loop>:
    e7c2:	aa 1f       	adc	r26, r26
    e7c4:	bb 1f       	adc	r27, r27
    e7c6:	ee 1f       	adc	r30, r30
    e7c8:	ff 1f       	adc	r31, r31
    e7ca:	a2 17       	cp	r26, r18
    e7cc:	b3 07       	cpc	r27, r19
    e7ce:	e4 07       	cpc	r30, r20
    e7d0:	f5 07       	cpc	r31, r21
    e7d2:	20 f0       	brcs	.+8      	; 0xe7dc <__udivmodsi4_ep>
    e7d4:	a2 1b       	sub	r26, r18
    e7d6:	b3 0b       	sbc	r27, r19
    e7d8:	e4 0b       	sbc	r30, r20
    e7da:	f5 0b       	sbc	r31, r21

0000e7dc <__udivmodsi4_ep>:
    e7dc:	66 1f       	adc	r22, r22
    e7de:	77 1f       	adc	r23, r23
    e7e0:	88 1f       	adc	r24, r24
    e7e2:	99 1f       	adc	r25, r25
    e7e4:	1a 94       	dec	r1
    e7e6:	69 f7       	brne	.-38     	; 0xe7c2 <__udivmodsi4_loop>
    e7e8:	60 95       	com	r22
    e7ea:	70 95       	com	r23
    e7ec:	80 95       	com	r24
    e7ee:	90 95       	com	r25
    e7f0:	9b 01       	movw	r18, r22
    e7f2:	ac 01       	movw	r20, r24
    e7f4:	bd 01       	movw	r22, r26
    e7f6:	cf 01       	movw	r24, r30
    e7f8:	08 95       	ret

0000e7fa <__prologue_saves__>:
    e7fa:	2f 92       	push	r2
    e7fc:	3f 92       	push	r3
    e7fe:	4f 92       	push	r4
    e800:	5f 92       	push	r5
    e802:	6f 92       	push	r6
    e804:	7f 92       	push	r7
    e806:	8f 92       	push	r8
    e808:	9f 92       	push	r9
    e80a:	af 92       	push	r10
    e80c:	bf 92       	push	r11
    e80e:	cf 92       	push	r12
    e810:	df 92       	push	r13
    e812:	ef 92       	push	r14
    e814:	ff 92       	push	r15
    e816:	0f 93       	push	r16
    e818:	1f 93       	push	r17
    e81a:	cf 93       	push	r28
    e81c:	df 93       	push	r29
    e81e:	cd b7       	in	r28, 0x3d	; 61
    e820:	de b7       	in	r29, 0x3e	; 62
    e822:	ca 1b       	sub	r28, r26
    e824:	db 0b       	sbc	r29, r27
    e826:	0f b6       	in	r0, 0x3f	; 63
    e828:	f8 94       	cli
    e82a:	de bf       	out	0x3e, r29	; 62
    e82c:	0f be       	out	0x3f, r0	; 63
    e82e:	cd bf       	out	0x3d, r28	; 61
    e830:	09 94       	ijmp

0000e832 <__epilogue_restores__>:
    e832:	2a 88       	ldd	r2, Y+18	; 0x12
    e834:	39 88       	ldd	r3, Y+17	; 0x11
    e836:	48 88       	ldd	r4, Y+16	; 0x10
    e838:	5f 84       	ldd	r5, Y+15	; 0x0f
    e83a:	6e 84       	ldd	r6, Y+14	; 0x0e
    e83c:	7d 84       	ldd	r7, Y+13	; 0x0d
    e83e:	8c 84       	ldd	r8, Y+12	; 0x0c
    e840:	9b 84       	ldd	r9, Y+11	; 0x0b
    e842:	aa 84       	ldd	r10, Y+10	; 0x0a
    e844:	b9 84       	ldd	r11, Y+9	; 0x09
    e846:	c8 84       	ldd	r12, Y+8	; 0x08
    e848:	df 80       	ldd	r13, Y+7	; 0x07
    e84a:	ee 80       	ldd	r14, Y+6	; 0x06
    e84c:	fd 80       	ldd	r15, Y+5	; 0x05
    e84e:	0c 81       	ldd	r16, Y+4	; 0x04
    e850:	1b 81       	ldd	r17, Y+3	; 0x03
    e852:	aa 81       	ldd	r26, Y+2	; 0x02
    e854:	b9 81       	ldd	r27, Y+1	; 0x01
    e856:	ce 0f       	add	r28, r30
    e858:	d1 1d       	adc	r29, r1
    e85a:	0f b6       	in	r0, 0x3f	; 63
    e85c:	f8 94       	cli
    e85e:	de bf       	out	0x3e, r29	; 62
    e860:	0f be       	out	0x3f, r0	; 63
    e862:	cd bf       	out	0x3d, r28	; 61
    e864:	ed 01       	movw	r28, r26
    e866:	08 95       	ret

0000e868 <_exit>:
    e868:	f8 94       	cli

0000e86a <__stop_program>:
    e86a:	ff cf       	rjmp	.-2      	; 0xe86a <__stop_program>
