
snowpunkz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  0000ee56  0000ef56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ee56  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f08  00800120  00800120  0000ef80  2**5
                  ALLOC
  3 .debug_aranges 000005a8  00000000  00000000  0000ef68  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000ea2  00000000  00000000  0000f510  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006c50  00000000  00000000  000103b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010bf  00000000  00000000  00017002  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005868  00000000  00000000  000180c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000850  00000000  00000000  0001d92c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000161c  00000000  00000000  0001e17c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000048bd  00000000  00000000  0001f798  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a80  00000000  00000000  00024058  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 6d 4e 	jmp	0x9cda	; 0x9cda <__ctors_end>
	lastStatus=0;
	songSpeed=0;
	playSong=true;
}

void RestartSong(){	
       4:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}


	void SetSpriteVisibility(bool visible){
       8:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
		return pos+rtl_FontStartOffset;
	}
}


uint8_t rtl_SearchCharList(int8_t ch, const int8_t *chrlst){
       c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      10:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      14:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      18:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      1c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      20:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      24:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      28:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      2c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      30:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      34:	0c 94 a4 50 	jmp	0xa148	; 0xa148 <__vector_13>
      38:	0c 94 e1 50 	jmp	0xa1c2	; 0xa1c2 <__vector_14>
      3c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      40:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      44:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      48:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      4c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      50:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      54:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      58:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      5c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      60:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      64:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      68:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>
      6c:	0c 94 cf 4e 	jmp	0x9d9e	; 0x9d9e <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	c7 53 ca 53 07 58 c1 54 bb 54 d3 53 d8 53 dd 53     .S.S.X.T.T.S.S.S
      ce:	aa 54 e0 53 e3 53 e6 53 2a 54                       .T.S.S.S*T

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <TitleTiles>:
      e4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
      f4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     104:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     114:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     124:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     134:	d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 00 00     ................
     144:	d0 00 00 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a     ...*****..******
     154:	00 00 2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a     ..******..******
     164:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
	...
     184:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     194:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1a4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 00     ................
     1b4:	00 00 00 00 00 20 20 20 2a 2a 2a 2a 2a 2a 2a 2a     .....   ********
     1c4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1d4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     1e4:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0     ................
     1f4:	00 00 00 00 d0 d0 d0 d0 2a 20 20 00 00 d0 d0 d0     ........*  .....
     204:	2a 2a 20 20 00 00 d0 d0 2a 2a 2a 20 00 00 00 d0     **  ....*** ....
     214:	2a 2a 2a 2a 2a 00 00 d0 2a 2a 2a 2a 2a 2a 00 00     *****...******..
     224:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     234:	00 00 00 d0 d0 d0 d0 d0 20 00 00 00 d0 d0 d0 d0     ........ .......
     244:	2a 20 20 00 00 d0 d0 d0 2a 2a 20 20 00 00 d0 d0     *  .....**  ....
     254:	2a 2a 2a 20 00 00 00 d0 2a 2a 2a 2a 2a 00 00 d0     *** ....*****...
     264:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     274:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     284:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     294:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     2a4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2b4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2c4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2d4:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     2e4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     2f4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     304:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 00 00 00 00 00     **********......
	...
     324:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     334:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     344:	2a 2a 2a 2a 2a 2a 00 00 00 00 00 00 00 00 d0 d0     ******..........
     354:	00 00 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     364:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     374:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     384:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     394:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     3a4:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     3b4:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     3c4:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 2a 2a     ******..********
     3d4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     3e4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     3f4:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 00 d0 d0     ................
	...
     40c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     41c:	2a 2a 2a 2a 2a 2a 2a 2a d0 d0 d0 d0 d0 d0 d0 d0     ********........
     42c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     43c:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     44c:	00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     45c:	00 00 d0 d0 d0 d0 d0 d0 00 2a 2a 2a 2a 00 00 d0     .........****...
     46c:	00 2a 2a 2a 00 00 d0 d0 00 2a 2a 00 00 d0 d0 d0     .***.....**.....
     47c:	00 2a 2a 00 d0 d0 d0 d0 2a 2a 00 d0 d0 d0 d0 d0     .**.....**......
     48c:	2a 00 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     *...............
     49c:	00 d0 d0 d0 d0 d0 d0 d0 2a 2a 2a 2a 2a 2a 00 00     ........******..
     4ac:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     4bc:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     4cc:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     4dc:	2a 2a 2a 2a 2a 2a 00 d0 d0 d0 d0 d0 d0 d0 d0 d0     ******..........
     4ec:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     4fc:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     50c:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     51c:	d0 d0 d0 d0 d0 d0 d0 00 2a 2a 2a 2a 2a 2a 00 00     ........******..
     52c:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     53c:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     54c:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     55c:	2a 2a 2a 2a 2a 2a 2a 00 00 00 00 2a 2a 2a 2a 2a     *******....*****
     56c:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     57c:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     58c:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     59c:	d0 00 00 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ...*************
     5ac:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5bc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5cc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     5dc:	2a 2a 2a 2a 2a 2a 2a 2a 00 d0 d0 d0 d0 d0 d0 d0     ********........
     5ec:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     5fc:	00 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     60c:	00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     61c:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     62c:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     63c:	00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     64c:	2a 00 d0 d0 d0 d0 d0 d0 2a 2a 00 d0 d0 d0 d0 d0     *.......**......
     65c:	2a 2a 00 00 d0 d0 d0 d0 00 00 00 2a 2a 2a 2a 2a     **.........*****
     66c:	00 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     67c:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     68c:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     69c:	d0 00 00 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 d0     ...***********..
     6ac:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     6bc:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     6cc:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     6dc:	2a 2a 2a 2a 2a 2a 00 d0 d0 d0 d0 d0 d0 d0 d0 00     ******..........
     6ec:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     6fc:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     70c:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     71c:	d0 d0 d0 d0 d0 d0 d0 00 2a 2a 2a 2a 2a 2a 2a 00     ........*******.
     72c:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     73c:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     74c:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     75c:	2a 2a 2a 2a 2a 2a 2a 00 d0 d0 d0 d0 d0 d0 d0 d0     *******.........
     76c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00     ................
     77c:	d0 00 00 00 00 00 20 20 d0 00 2a 2a 2a 2a 2a 2a     ......  ..******
     78c:	d0 00 2a 2a 2a 2a 2a 2a d0 00 2a 2a 2a 2a 2a 2a     ..******..******
     79c:	d0 00 00 2a 2a 2a 2a 2a d0 d0 d0 d0 d0 d0 d0 d0     ...*****........
     7ac:	00 00 00 d0 d0 d0 d0 d0 00 00 00 00 d0 d0 d0 d0     ................
     7bc:	20 20 00 00 00 d0 d0 d0 2a 2a 20 20 00 00 d0 d0       ......**  ....
     7cc:	2a 2a 2a 20 20 00 00 d0 2a 2a 2a 2a 20 00 00 00     ***  ...**** ...
     7dc:	2a 2a 2a 2a 2a 2a 00 00 d0 00 00 2a 2a 2a 2a 2a     ******.....*****
     7ec:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     7fc:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     80c:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     81c:	d0 00 00 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00     ...************.
     82c:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     83c:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     84c:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00     ******..******..
     85c:	2a 2a 2a 2a 2a 2a 2a 00 00 00 00 00 00 00 00 00     *******.........
	...
     878:	00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     888:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     898:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0     ................
     8a8:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     8b8:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     8c8:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     8d8:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 2a 2a 2a 2a     ............****
     8e8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     8f8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     908:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a     ************.***
     918:	2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 00     ****.*********..
     928:	d0 d0 d0 d0 2a 2a 2a 00 00 d0 d0 d0 2a 2a 2a 2a     ....***.....****
     938:	00 d0 d0 d0 2a 2a 2a 2a 00 00 d0 d0 2a 2a 2a 2a     ....****....****
     948:	2a 00 00 d0 2a 2a 2a 2a 2a 00 00 d0 2a 2a 2a 2a     *...*****...****
     958:	2a 00 00 d0 2a 2a 2a 2a 2a 2a 00 d0 d0 d0 d0 00     *...******......
     968:	00 00 00 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0     ................
     978:	d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0     ................
     988:	d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0     ................
     998:	d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 00 2a 2a 2a     .............***
     9a8:	2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00 2a 2a     ****..******..**
     9b8:	2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a d0 00 00 2a     ****...*****...*
     9c8:	2a 2a 2a 2a d0 00 00 00 2a 2a 2a 2a d0 00 00 00     ****....****....
     9d8:	2a 2a 2a 2a d0 d0 00 00 2a 2a 2a 2a 2a 2a 2a 2a     ****....********
     9e8:	2a 2a 00 00 2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a     **..******..****
     9f8:	2a 00 00 d0 2a 2a 2a 2a 00 00 00 d0 2a 2a 2a 2a     *...****....****
     a08:	00 d0 d0 d0 2a 2a 2a 00 00 d0 d0 d0 2a 2a 00 00     ....***.....**..
     a18:	d0 d0 d0 d0 2a 2a 00 00 d0 d0 d0 d0 2a 2a 2a 2a     ....**......****
     a28:	2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a     ***.*******.****
     a38:	2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ***.************
     a48:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a58:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a d0 d0 d0 d0     ************....
     a68:	d0 d0 d0 00 d0 d0 00 00 00 00 00 00 00 00 00 00     ................
     a78:	00 20 20 20 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     .   ************
     a88:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     a98:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a d0 00 00 2a     ************...*
     aa8:	2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a     ****...*****...*
     ab8:	2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a     ****...*****...*
     ac8:	2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a 00 00 00 2a     ****...*****...*
	...
     ae4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     af4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     b04:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 00 00 00 00     ***********.....
	...
     b24:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     b34:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     b44:	00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     b54:	00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     b64:	00 d0 00 00 2a 2a 2a 2a 00 d0 d0 00 00 2a 2a 2a     ....****.....***
     b74:	00 d0 d0 00 00 00 2a 2a 00 d0 d0 00 00 00 2a 2a     ......**......**
     b84:	00 00 d0 d0 00 00 2a 00 00 00 d0 d0 00 00 00 00     ......*.........
     b94:	00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     ba4:	2a 00 00 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     *...............
     bb4:	00 00 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     bc4:	00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     bd4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     be4:	2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 00 00 00     ******..*****...
     bf4:	2a 2a 2a 2a 2a 00 00 d0 2a 2a 2a 20 00 00 00 d0     *****...*** ....
     c04:	2a 2a 20 20 00 00 d0 d0 2a 20 20 00 00 d0 d0 d0     **  ....*  .....
     c14:	20 00 00 00 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0      ...............
     c24:	2a 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a 2a 00     ******...******.
     c34:	00 2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 00     .******..******.
     c44:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     c54:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     c64:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     c74:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     c84:	00 00 00 2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a     ...*****...*****
     c94:	00 00 00 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a     ...*****..******
     ca4:	2a 2a 2a 2a 2a 2a 00 d0 2a 2a 2a 2a 2a 2a 00 d0     ******..******..
     cb4:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 2a     *******.********
     cc4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     cd4:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
	...
     cfc:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     d0c:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     d1c:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 00 00 00 00     ................
     d2c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     d3c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     d4c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     d5c:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 00 00 00     ................
     d6c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     d7c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     d8c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     d9c:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 00 00 00     ................
     dac:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     dbc:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     dcc:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
     ddc:	d0 d0 d0 d0 d0 d0 d0 00 2a 2a 2a 2a 2a 2a 2a 00     ........*******.
     dec:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 2a 2a 00     *******.*******.
     dfc:	2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a 2a 00 00 00     *******.*****...
     e0c:	2a 2a 2a 2a 2a 00 00 00 2a 2a 2a 2a 2a 00 a4 00     *****...*****...
     e1c:	2a 2a 2a 2a 2a 00 f6 5b d0 d0 d0 d0 d0 d0 d0 d0     *****..[........
     e2c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     e3c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     e4c:	d0 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
     e5c:	00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     e6c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00     ................
     e7c:	d0 d0 d0 00 00 00 2a 2a d0 d0 00 00 00 2a 2a 2a     ......**.....***
     e8c:	d0 00 00 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a     ...*****..******
     e9c:	00 2a 2a 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     .*******...*****
     eac:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     ebc:	d0 00 00 2a 2a 2a 2a 2a d0 00 00 2a 2a 2a 2a 2a     ...*****...*****
     ecc:	d0 00 00 2a 2a 2a 00 09 d0 00 00 2a 2a 00 00 00     ...***.....**...
     edc:	d0 00 00 2a 00 00 ff ff 2a 2a 2a 2a 2a 00 ad ff     ...*....*****...
     eec:	2a 2a 2a 2a 2a 00 5b ff 2a 2a 2a 2a 2a 00 00 f6     *****.[.*****...
     efc:	2a 2a 2a 2a 2a 5b 00 5b 2a 2a 2a 2a 2a 2a 00 00     *****[.[******..
     f0c:	2a 2a 2a 2a 2a 2a 00 00 00 00 00 00 00 00 00 00     ******..........
     f1c:	52 00 00 00 00 00 00 00 00 00 d0 d0 d0 d0 d0 d0     R...............
     f2c:	00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
     f3c:	5b 00 00 d0 d0 d0 d0 d0 ad 00 00 d0 d0 d0 d0 52     [..............R
     f4c:	ff 00 00 d0 d0 d0 d0 00 ad 00 00 d0 d0 d0 00 00     ................
     f5c:	00 00 00 d0 d0 09 00 a4 d0 d0 d0 d0 d0 d0 d0 d0     ................
     f6c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
     f7c:	d0 09 00 00 00 d0 d0 d0 00 00 00 09 09 00 d0 d0     ................
     f8c:	00 09 f6 ff ff 09 d0 d0 5b ff ff ff f6 52 d0 d0     ........[....R..
     f9c:	ff ff 5b 09 09 00 d0 d0 2a 2a 2a 2a 2a 2a 2a 2a     ..[.....********
     fac:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     fbc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
	...
     fdc:	d0 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 00     ................
     fec:	00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 00     ................
     ffc:	00 d0 d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00     ................
    100c:	00 00 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
    101c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 2a 00 00 ff ff     ...........*....
    102c:	d0 00 00 00 00 ff 52 ff d0 00 00 00 00 ff 00 ff     ......R.........
    103c:	d0 00 00 00 00 ff 00 00 d0 00 00 00 00 ff ff 00     ................
    104c:	00 00 00 00 00 ff ff 09 00 00 00 00 00 ff ff ff     ................
    105c:	00 00 00 00 00 00 ff ff ff 00 00 00 ff ff ff 00     ................
    106c:	ff 00 00 ff ff ff ff ff ff 00 ff ff ff ff ff ff     ................
    107c:	ff 00 ff ff 00 00 00 09 ff 00 ff 00 ff ff ff ff     ................
    108c:	00 00 00 ff ff ff ff ff 00 09 ff ff ff ff ff ff     ................
    109c:	ff 09 ff ff ff ff ff ff 00 00 00 d0 52 00 00 f6     ............R...
    10ac:	00 00 00 d0 00 00 09 00 00 00 00 00 00 00 00 ad     ................
    10bc:	00 00 00 00 00 00 a4 ff 00 00 00 00 00 ad ff ff     ................
    10cc:	00 00 00 00 00 09 a4 ff 00 00 00 00 00 00 00 00     ................
	...
    10e4:	5b 00 5b ad ff 09 d0 d0 09 ad ff ff ad 00 d0 d0     [.[.............
    10f4:	ff ff ff f6 00 00 d0 d0 ff ff ff 09 00 d0 d0 d0     ................
    1104:	ff ff 00 00 d0 d0 d0 d0 ad 09 09 d0 d0 d0 d0 d0     ................
    1114:	00 09 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1124:	d0 d0 d0 d0 00 00 00 00 d0 d0 d0 d0 d0 00 00 00     ................
    1134:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1144:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1154:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 00 d0 d0     ................
    1164:	00 00 00 ff ff ff ff ff 00 00 00 00 ff ff ff 00     ................
	...
    117c:	09 00 00 00 00 00 00 00 d0 00 00 00 00 00 00 00     ................
    118c:	d0 00 09 d0 00 00 00 d0 d0 00 d0 d0 00 09 d0 d0     ................
    119c:	00 d0 d0 09 09 d0 d0 d0 00 00 00 00 00 00 00 00     ................
	...
    11e0:	00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    11f0:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1200:	d0 d0 d0 00 d0 d0 d0 d0 d0 09 00 00 d0 d0 d0 d0     ................
    1210:	00 00 00 00 d0 d0 d0 00 00 00 00 00 d0 d0 09 00     ................
    1220:	00 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00     ................
    1230:	00 00 00 00 09 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1250:	00 00 09 09 00 00 09 ff ff ff ff ff 00 ff ff ff     ................
    1260:	ff ff ff ff d0 d0 d0 d0 d0 d0 d0 d0 00 00 00 09     ................
    1270:	d0 d0 d0 d0 00 00 00 00 00 00 09 d0 00 00 00 00     ................
	...
    128c:	09 00 00 00 00 00 00 00 ff ff ff 5b 00 00 00 00     ...........[....
    129c:	ff ff ff ff ff 52 00 00 d0 d0 d0 d0 d0 d0 d0 d0     .....R..........
    12ac:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    12bc:	d0 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
    12cc:	00 00 00 d0 d0 d0 d0 d0 00 00 00 00 d0 d0 d0 d0     ................
    12dc:	00 00 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    12ec:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    12fc:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00     ................
    130c:	d0 d0 d0 d0 00 00 00 00 d0 d0 d0 00 00 00 00 00     ................
    131c:	d0 d0 00 00 00 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0     ................
    132c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
	...
    135c:	00 00 09 ff ff ff ff ff d0 d0 d0 d0 d0 d0 d0 d0     ................
    136c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    137c:	00 09 d0 d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0     ................
    138c:	00 00 00 00 00 d0 d0 d0 00 00 00 00 00 00 d0 d0     ................
    139c:	09 00 00 00 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    13ac:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    13bc:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    13cc:	d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 00 00 00 d0     ................
    13dc:	d0 d0 d0 00 00 00 00 d0 d0 00 00 00 00 00 d0 d0     ................
    13ec:	d0 00 00 00 00 00 52 00 d0 d0 d0 d0 d0 d0 00 00     ......R.........
    13fc:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 00 00     ................
    140c:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 00 00     ................
    141c:	d0 d0 d0 d0 d0 d0 00 00 00 d0 d0 00 d0 d0 d0 d0     ................
    142c:	00 d0 00 00 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 00     ................
    143c:	00 00 d0 d0 d0 d0 d0 00 00 09 d0 d0 d0 d0 d0 00     ................
    144c:	00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 00     ................
    145c:	d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 00 00 00 d0     ................
    146c:	00 00 00 00 00 00 00 d0 00 00 d0 d0 00 d0 d0 00     ................
    147c:	d0 00 d0 d0 00 d0 d0 00 d0 00 d0 d0 00 00 d0 00     ................
    148c:	d0 00 d0 d0 d0 00 d0 d0 d0 00 00 d0 d0 00 d0 d0     ................
    149c:	d0 d0 00 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    14ac:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    14bc:	d0 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
    14cc:	00 00 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0     ................
    14dc:	d0 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    14ec:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    14fc:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
    150c:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 00 00     ................
    151c:	d0 d0 d0 d0 d0 00 00 00 d0 d0 00 00 00 00 00 ff     ................
    152c:	d0 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff ff     ................
    153c:	00 00 00 00 ff ff ff ff 00 00 00 ff ff ff ff ff     ................
    154c:	00 00 09 ff ff ff ff ff 00 00 ff ff ff ff ff ff     ................
    155c:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    156c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    157c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    158c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    159c:	ff ff ff 00 00 00 00 00 ff ff ff ff ff ff ff 09     ................
    15ac:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    15dc:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 d0 d0     ................
    15ec:	00 00 00 00 00 00 00 d0 ff 5b 00 00 00 00 00 00     .........[......
    15fc:	ff ff ff 00 00 00 00 00 ff ff ff 09 00 00 00 00     ................
    160c:	ff ff ff ff 52 00 00 00 ff ff ff ff ff 5b 00 00     ....R........[..
    161c:	ff ff ff ff ff ff 52 00 d0 00 00 00 00 00 00 00     ......R.........
    162c:	00 00 00 00 00 00 09 ff 00 00 00 00 00 00 ff ff     ................
    163c:	00 00 00 00 00 ff ff ff 00 00 00 00 ff ff ff ff     ................
    164c:	00 00 00 ff ff ff ff ff 00 00 52 ff ff ff ff ff     ..........R.....
    165c:	00 00 ff ff ff ff ff ff 09 ff ff ff ff ff ff ff     ................
    166c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    167c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    168c:	ff 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff ff     ................
    169c:	00 00 00 00 00 ff ff ff ff ff ff 00 00 00 00 00     ................
    16ac:	ff ff ff ff 00 00 00 00 ff ff ff ff ff 09 00 00     ................
    16bc:	ff ff ff ff ff ff 09 00 ff ff ff ff ff ff ff 00     ................
    16cc:	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff ff     ................
    16dc:	ff ff ff ff ff ff ff ff d0 d0 d0 d0 d0 d0 d0 d0     ................
    16ec:	00 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
    16fc:	00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0     ................
    170c:	00 00 09 d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0     ................
    171c:	ff 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    172c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    173c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    174c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    175c:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 00 00 00 00 d0     ................
    176c:	d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 00     ................
    177c:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
    178c:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00     ................
    179c:	00 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 00 00 d0     ................
    17ac:	d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0     ................
    17bc:	d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 09 00 d0 d0     ................
    17cc:	d0 d0 d0 d0 00 d0 d0 d0 00 d0 d0 00 00 d0 d0 d0     ................
    17dc:	00 00 00 00 00 d0 d0 00 d0 d0 d0 d0 d0 d0 00 00     ................
    17ec:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 d0 d0     ................
    17fc:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0     ................
    180c:	d0 00 00 00 d0 d0 d0 d0 00 ad ff ad 00 d0 d0 d0     ................
    181c:	09 a4 5b 09 09 d0 d0 d0 d0 d0 00 d0 d0 d0 00 d0     ..[.............
    182c:	d0 d0 00 d0 d0 d0 00 00 d0 00 00 d0 d0 d0 00 00     ................
    183c:	d0 00 00 d0 d0 d0 d0 00 d0 00 00 d0 d0 d0 d0 00     ................
    184c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    185c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0     ................
    186c:	d0 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
    187c:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
    188c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    189c:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00     ................
    18ac:	d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 00 00     ................
    18bc:	d0 d0 d0 d0 00 00 00 ff d0 d0 d0 d0 00 00 00 ff     ................
    18cc:	d0 d0 d0 09 00 00 00 ff d0 d0 d0 00 00 00 ff ff     ................
    18dc:	d0 d0 d0 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    18ec:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    18fc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    190c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    191c:	ff ff ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
    192c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    193c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    194c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    195c:	ff ff 00 00 00 00 00 00 00 ff ff ff ff ff ff ff     ................
    196c:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    197c:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    198c:	00 ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff     ................
    199c:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00     ................
    19ac:	ff ff ff ff ff ff ff 00 ff ff ff ff ff ff ff ff     ................
    19bc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19cc:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    19dc:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff ff ff     ................
    19ec:	00 00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff     ................
    19fc:	00 00 09 ff ff ff ff ff 52 00 00 ff ff ff ff ff     ........R.......
    1a0c:	ff 00 00 ff ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    1a1c:	ff 00 00 ff ff ff ff ff 00 00 00 00 00 ff ff ff     ................
    1a2c:	00 00 00 00 00 ff ff ff 00 00 00 00 09 ff ff ff     ................
    1a3c:	09 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a4c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a5c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a8c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1a9c:	ff ff ff ff 00 00 00 00 ff 00 00 d0 d0 d0 d0 d0     ................
    1aac:	ff ff 00 00 d0 d0 d0 d0 ff ff 00 00 d0 d0 d0 d0     ................
    1abc:	ff ff 00 00 d0 d0 d0 d0 ff ff 00 00 d0 d0 d0 d0     ................
    1acc:	ff ff 00 00 d0 d0 d0 d0 ff ff 00 00 d0 d0 d0 d0     ................
	...
    1ae4:	d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 5b ff     ..............[.
    1af4:	d0 d0 d0 d0 d0 00 52 ff d0 d0 d0 d0 d0 00 00 52     ......R........R
    1b04:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 d0     ................
	...
    1b24:	00 00 00 d0 d0 d0 d0 00 00 09 09 00 d0 d0 09 00     ................
    1b34:	ad 00 5b 00 00 00 00 00 ff f6 09 ff 09 00 00 00     ..[.............
    1b44:	00 52 5b a4 f6 09 00 00 00 00 00 00 09 00 00 00     .R[.............
	...
    1b68:	d0 d0 00 00 00 00 00 00 d0 d0 00 09 00 00 00 00     ................
    1b78:	00 00 ad ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    1b88:	00 00 5b 00 00 00 00 00 00 00 00 00 00 00 00 00     ..[.............
	...
    1ba4:	09 52 09 00 d0 d0 d0 d0 ad ad 00 00 d0 d0 d0 d0     .R..............
    1bb4:	ff 00 00 d0 d0 d0 d0 d0 52 00 d0 d0 d0 d0 d0 d0     ........R.......
	...
    1be4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1bf4:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1c04:	00 00 00 d0 d0 d0 d0 d0 00 00 00 00 00 d0 d0 d0     ................
    1c14:	00 00 00 00 00 00 d0 d0 00 00 00 00 00 00 00 d0     ................
    1c24:	d0 d0 d0 00 00 00 ff ff d0 d0 d0 00 00 00 ff ff     ................
    1c34:	d0 d0 d0 00 00 ff ff ff d0 d0 d0 00 00 ff ff ff     ................
    1c44:	d0 d0 d0 00 00 ff ff ff d0 d0 d0 00 00 ff ff ff     ................
    1c54:	d0 d0 d0 00 00 ff ff ff d0 d0 d0 00 00 ff ff ff     ................
    1c64:	ff ff ff 09 00 00 00 09 ff ff ff ff ff ff ff ff     ................
    1c74:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c84:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1c94:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1ca4:	ff 09 00 ff ff ff ff ff ff ff 00 ff ff ff ff ff     ................
    1cb4:	ff ff 00 ff ff ff ff 00 ff ff 00 ff ff 00 00 00     ................
    1cc4:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 08 10     ................
    1cd4:	ff 00 00 10 18 18 20 20 ff 00 00 20 20 20 20 20     ......  ...     
    1ce4:	ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00 00     ................
	...
    1d00:	00 00 00 08 00 00 08 10 10 18 20 20 10 20 20 20     ..........  .   
    1d10:	20 20 20 10 20 20 20 20 08 00 00 00 20 10 08 00        .    .... ...
	...
    1d38:	00 00 08 08 10 10 10 18 18 18 10 08 20 20 18 08     ............  ..
    1d48:	00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d60:	00 10 2a 2a 00 00 00 00 00 00 00 00 00 00 00 00     ..**............
    1d70:	00 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d88:	00 00 08 10 00 00 00 08 11 2a 2a 2a 10 2a 2a 2a     .........***.***
    1d98:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 00 00 00     ************....
	...
    1dbc:	00 00 08 10 19 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     .....***********
    1dcc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1ddc:	2a 2a 2a 2a 2a 2a 2a 2a 00 00 00 00 00 00 00 00     ********........
    1dec:	00 00 00 00 08 10 11 2a 10 11 2a 2a 2a 2a 2a 2a     .......*..******
    1dfc:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e0c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e1c:	2a 2a 2a 2a 2a 2a 2a 2a 00 08 10 10 11 2a 2a 2a     ********.....***
    1e2c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e3c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e4c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e5c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e6c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e7c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e8c:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    1e9c:	2a 2a 2a 2a 2a 2a 2a 2a 08 00 00 00 00 00 00 d0     ********........
    1eac:	2a 2a 00 00 00 00 00 d0 2a 2a 2a 00 00 00 00 d0     **......***.....
    1ebc:	2a 2a 10 00 00 00 00 d0 2a 2a 00 00 00 00 00 d0     **......**......
    1ecc:	2a 2a 00 00 00 00 00 d0 2a 11 00 00 00 00 00 d0     **......*.......
    1edc:	2a 08 00 00 00 00 00 d0 d0 d0 d0 d0 d0 d0 d0 d0     *...............
    1eec:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    1efc:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00     ................
    1f0c:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 00 00 00 00     ................
    1f1c:	d0 d0 d0 00 00 00 00 00 d0 d0 d0 00 00 ff ff ff     ................
    1f2c:	d0 d0 d0 00 00 ff ff ff d0 d0 d0 00 00 ff ff ff     ................
    1f3c:	d0 d0 d0 00 00 ff ff ff 00 00 00 00 00 00 ff ff     ................
    1f4c:	00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00 ff     ................
    1f5c:	00 00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff     ................
    1f6c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1f7c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00     ................
    1f8c:	ff ff ff ff ff ff 08 00 ff ff ff ff ff 00 00 00     ................
    1f9c:	ff ff ff ff 00 00 00 00 ff 00 08 20 20 20 10 08     ...........   ..
    1fac:	ff 00 10 18 10 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fc8:	00 00 00 08 00 00 00 00 00 2a 2a 2a 00 00 10 2a     .........***...*
    1fd8:	2a 2a 2a 2a 08 2a 2a 2a 2a 2a 2a 2a 00 00 00 00     ****.*******....
	...
    1ff0:	00 00 00 08 00 00 00 00 08 2a 2a 2a 00 08 2a 2a     .........***..**
    2000:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2010:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2020:	2a 2a 2a 2a 00 00 08 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****...*********
    2030:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2040:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2050:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2060:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2070:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2080:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2090:	2a 2a 2a 19 2a 2a 2a 2a 2a 2a 2a 00 2a 2a 2a 2a     ***.*******.****
    20a0:	2a 2a 11 00 2a 00 00 00 00 00 d0 d0 2a 00 00 00     **..*.......*...
    20b0:	00 00 d0 d0 00 00 00 00 00 00 d0 d0 00 00 00 00     ................
    20c0:	00 d0 d0 d0 00 00 00 00 00 d0 d0 d0 00 00 00 00     ................
    20d0:	d0 d0 d0 d0 00 00 00 00 d0 d0 d0 d0 00 00 00 d0     ................
    20e0:	d0 d0 d0 d0 d0 d0 00 00 00 00 00 00 d0 d0 00 00     ................
    20f0:	00 00 00 00 d0 d0 00 00 00 00 00 08 d0 d0 00 00     ................
    2100:	00 00 08 20 d0 d0 00 00 00 00 20 20 d0 d0 00 00     ... ......  ....
    2110:	00 00 20 20 d0 d0 00 00 00 00 20 20 d0 d0 00 00     ..  ......  ....
    2120:	00 00 20 20 00 00 00 00 00 00 00 ff 00 20 20 00     ..  .........  .
    2130:	00 00 00 00 20 20 20 20 00 00 00 00 20 20 20 20     ....    ....    
    2140:	08 00 00 00 20 20 20 20 20 00 00 00 20 20 20 20     ....     ...    
    2150:	20 00 00 00 20 20 20 20 20 20 00 00 20 20 20 20      ...      ..    
    2160:	20 20 08 00 ff ff ff ff ff ff ff ff ff ff ff ff       ..............
    2170:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2180:	ff ff ff ff 00 ff ff ff ff ff ff ff 00 ff ff ff     ................
    2190:	ff ff ff ff 00 00 ff ff ff ff ff ff 00 00 00 ff     ................
    21a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    21b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    21c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    21d0:	ff ff ff ff ff ff ff ff ff ff ff 09 ff ff ff ff     ................
    21e0:	ff ff 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    21f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2200:	ff ff 00 00 ff ff ff ff 00 08 2a 2a ff 00 00 00     ..........**....
    2210:	2a 2a 2a 2a 00 00 11 2a 2a 2a 2a 2a 00 2a 2a 2a     ****...*****.***
    2220:	2a 2a 2a 2a ff ff ff 00 00 00 08 2a ff 09 00 08     ****.......*....
    2230:	2a 2a 2a 2a 00 00 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****..**********
    2240:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2250:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2260:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a     **********..****
    2270:	2a 08 00 00 2a 2a 2a 2a 11 00 00 00 2a 2a 2a 2a     *...****....****
    2280:	00 00 00 00 2a 2a 2a 2a 00 00 00 00 2a 2a 2a 08     ....****....***.
    2290:	00 00 00 00 2a 2a 11 00 00 00 00 00 2a 19 00 00     ....**......*...
    22a0:	00 00 00 00 00 00 00 d0 d0 d0 d0 d0 00 00 00 d0     ................
    22b0:	d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 00 d0 d0     ................
    22c0:	d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0     ................
    22d0:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    22e0:	d0 d0 d0 d0 d0 d0 00 00 00 00 20 20 d0 d0 00 00     ..........  ....
    22f0:	00 00 20 20 d0 d0 00 00 00 00 00 20 d0 d0 00 00     ..  ....... ....
    2300:	00 00 00 20 d0 d0 00 00 00 00 00 08 d0 d0 00 00     ... ............
    2310:	00 00 00 00 d0 d0 00 00 00 00 00 00 d0 d0 d0 00     ................
    2320:	00 00 00 00 20 20 20 20 20 20 20 00 20 20 20 20     ....       .    
    2330:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2340:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2350:	20 20 20 20 20 20 20 20 20 20 20 20 00 20 20 20                 .   
    2360:	20 20 20 20 00 00 00 ff ff ff ff ff 00 00 00 00         ............
    2370:	ff ff ff ff 00 00 00 00 00 00 00 00 20 00 00 00     ............ ...
    2380:	00 00 00 00 20 20 00 00 00 00 00 11 20 20 00 00     ....  ......  ..
    2390:	00 00 10 2a 20 00 00 00 10 2a 2a 2a 00 00 00 20     ...* ....***... 
    23a0:	20 2a 2a 2a ff ff ff ff 00 00 08 2a ff ff 00 00      ***.......*....
    23b0:	00 2a 2a 2a 00 00 08 2a 2a 2a 2a 2a 00 10 2a 2a     .***...*****..**
    23c0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23d0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23e0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    23f0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 22 2a 2a 2a 2a     ***********"****
    2400:	2a 2a 22 00 2a 2a 2a 2a 2a 2a 00 00 2a 2a 2a 2a     **".******..****
    2410:	2a 19 00 00 2a 2a 2a 2a 11 00 00 00 2a 2a 2a 10     *...****....***.
    2420:	00 00 00 00 2a 00 00 00 00 00 00 d0 22 00 00 00     ....*......."...
    2430:	00 00 00 d0 00 00 00 00 00 00 d0 d0 00 00 00 00     ................
    2440:	00 d0 d0 d0 00 00 00 00 d0 d0 d0 d0 00 00 00 00     ................
    2450:	d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 00 d0 d0     ................
    2460:	d0 d0 d0 d0 d0 d0 d0 00 00 00 00 00 d0 d0 d0 00     ................
    2470:	00 00 00 00 d0 d0 d0 d0 00 00 00 00 d0 d0 d0 d0     ................
    2480:	00 00 00 00 d0 d0 d0 d0 00 00 00 00 d0 d0 d0 d0     ................
    2490:	d0 00 00 00 d0 d0 d0 d0 d0 00 00 00 d0 d0 d0 d0     ................
    24a0:	d0 d0 00 00 00 20 20 20 20 20 20 20 00 20 20 20     .....       .   
    24b0:	20 20 20 00 00 20 20 20 20 20 00 20 00 20 20 20        ..     . .   
    24c0:	20 10 20 20 00 08 20 20 20 20 20 20 00 00 20 20      .  ..      ..  
    24d0:	20 20 20 20 00 00 08 20 20 20 20 20 00 00 00 20         ...     ... 
    24e0:	20 20 20 20 00 08 20 20 2a 2a 2a 2a 20 20 20 2a         ..  ****   *
    24f0:	2a 2a 2a 2a 20 20 20 2a 2a 2a 2a 2a 20 20 20 2a     ****   *****   *
    2500:	2a 2a 2a 2a 20 20 20 2a 2a 2a 2a 2a 20 20 20 2a     ****   *****   *
    2510:	2a 2a 2a 2a 20 20 20 2a 2a 2a 2a 2a 20 20 20 2a     ****   *****   *
    2520:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2530:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2540:	2a 2a 2a 00 2a 2a 2a 2a 2a 2a 11 00 2a 2a 2a 2a     ***.******..****
    2550:	19 00 00 00 2a 2a 2a 08 00 00 00 00 2a 2a 10 00     ....***.....**..
    2560:	00 00 00 00 2a 2a 08 00 00 00 00 00 2a 19 00 00     ....**......*...
    2570:	00 00 00 00 10 00 00 00 00 00 00 d0 00 00 00 00     ................
    2580:	00 00 d0 d0 00 00 00 00 00 d0 d0 d0 00 00 00 00     ................
    2590:	d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 00 d0 d0     ................
    25a0:	d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    25b0:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    25c0:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    25d0:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    25e0:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0     ................
    25f0:	d0 d0 00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0     ................
    2600:	d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0     ................
    2610:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    2620:	d0 d0 d0 d0 00 00 00 08 20 20 20 20 00 00 00 00     ........    ....
    2630:	20 20 20 20 00 00 00 00 20 20 20 20 00 00 00 00         ....    ....
    2640:	20 20 20 20 00 00 00 00 00 20 20 20 00 00 00 00         .....   ....
    2650:	00 10 20 20 d0 00 00 00 00 00 20 20 d0 00 00 00     ..  ......  ....
    2660:	00 00 00 20 20 20 20 2a 2a 2a 2a 2a 20 20 20 2a     ...    *****   *
    2670:	2a 2a 2a 2a 20 20 20 20 2a 2a 2a 2a 20 20 20 20     ****    ****    
    2680:	2a 2a 2a 2a 20 20 20 20 21 2a 2a 2a 20 20 20 20     ****    !***    
    2690:	20 2a 2a 2a 20 20 20 20 20 20 2a 2a 20 20 20 20      ***      **    
    26a0:	20 20 21 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a       !*************
    26b0:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 08 2a 2a 2a 2a     ***********.****
    26c0:	2a 2a 00 00 2a 2a 2a 2a 10 00 00 00 2a 2a 2a 19     **..****....***.
    26d0:	00 00 00 00 2a 2a 08 00 00 00 00 00 2a 00 00 00     ....**......*...
    26e0:	00 00 00 00 2a 00 00 00 00 00 00 00 00 00 00 00     ....*...........
	...
    26f8:	00 00 00 d0 00 00 00 00 00 00 d0 d0 00 00 00 00     ................
    2708:	d0 d0 d0 d0 00 00 00 d0 d0 d0 d0 d0 00 d0 d0 d0     ................
    2718:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 00 00 00     ................
    2728:	00 00 00 08 d0 d0 00 00 00 00 00 00 d0 d0 d0 00     ................
    2738:	00 00 00 00 d0 d0 d0 00 00 00 00 00 d0 d0 d0 d0     ................
    2748:	00 00 00 00 d0 d0 d0 00 00 00 00 00 d0 d0 00 00     ................
    2758:	00 00 00 00 d0 00 00 00 00 00 00 08 20 20 20 20     ............    
    2768:	20 20 20 2a 20 20 20 20 20 20 20 2a 00 20 20 20        *       *.   
    2778:	20 20 20 20 00 00 08 20 20 20 20 20 00 00 00 20         ...     ... 
    2788:	20 20 20 20 00 00 00 00 00 20 20 20 00 00 00 00         .....   ....
    2798:	00 00 20 20 00 00 00 00 00 00 00 20 2a 2a 2a 2a     ..  ....... ****
    27a8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    27b8:	2a 2a 2a 2a 20 2a 2a 2a 2a 2a 2a 2a 20 20 2a 2a     **** *******  **
    27c8:	2a 2a 2a 2a 20 20 2a 2a 2a 2a 2a 2a 20 20 20 20     ****  ******    
    27d8:	2a 2a 2a 2a 20 20 20 20 20 2a 2a 2a 2a 2a 2a 2a     ****     *******
    27e8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    27f8:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2808:	2a 2a 2a 19 2a 2a 2a 2a 2a 2a 10 00 2a 2a 2a 2a     ***.******..****
    2818:	00 00 00 00 2a 2a 08 00 00 00 00 00 2a 2a 2a 2a     ....**......****
    2828:	2a 2a 2a 19 2a 2a 2a 2a 2a 2a 08 00 2a 2a 2a 2a     ***.******..****
    2838:	11 00 00 00 2a 2a 08 00 00 00 00 00 00 00 00 00     ....**..........
	...
    285c:	00 00 08 20 20 00 00 00 00 00 00 00 00 00 00 d0     ...  ...........
    286c:	00 00 00 00 00 d0 d0 d0 00 00 00 00 d0 d0 d0 d0     ................
    287c:	00 00 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
    288c:	00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0     ................
    289c:	00 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    28ac:	d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 00 00     ................
    28bc:	d0 d0 d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 00 00 00     ................
    28cc:	d0 d0 d0 d0 00 00 00 00 d0 d0 d0 00 00 00 00 00     ................
    28dc:	d0 d0 08 00 00 00 00 00 00 00 00 00 00 00 08 20     ............... 
    28ec:	00 00 00 00 00 10 20 20 00 00 00 00 20 20 20 20     ......  ....    
    28fc:	00 00 00 00 20 20 20 20 00 00 00 20 20 20 20 20     ....    ...     
    290c:	00 00 08 20 20 20 20 20 00 08 20 20 20 20 20 20     ...     ..      
    291c:	00 20 20 20 20 20 20 20 00 00 00 00 00 00 00 00     .       ........
    292c:	20 08 00 00 00 00 00 00 20 20 20 00 00 00 00 00      .......   .....
    293c:	20 20 20 20 08 00 00 00 20 20 20 20 20 20 10 00         ....      ..
    294c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    295c:	20 20 20 20 20 20 20 20 00 10 20 20 20 20 20 2a             ..     *
    296c:	00 00 00 10 20 20 20 20 00 00 00 00 00 00 20 20     ....    ......  
	...
    298c:	20 08 00 00 00 00 00 00 20 20 20 20 20 08 00 00      .......     ...
    299c:	20 20 20 20 20 20 20 20 2a 2a 2a 2a 2a 2a 2a 2a             ********
    29ac:	20 2a 2a 2a 2a 2a 2a 2a 20 18 2a 2a 2a 2a 2a 2a      ******* .******
    29bc:	00 00 00 08 10 10 2a 2a 00 00 00 00 00 00 00 00     ......**........
	...
    29dc:	20 08 00 00 00 00 00 00 2a 2a 2a 2a 2a 2a 2a 2a      .......********
    29ec:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    29fc:	2a 2a 2a 2a 2a 2a 2a 2a 00 08 08 10 2a 2a 2a 2a     ********....****
	...
    2a24:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
    2a34:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 11 08 00     *************...
    2a44:	08 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a60:	00 00 00 08 2a 2a 2a 2a 2a 2a 2a 11 2a 2a 2a 2a     ....*******.****
    2a70:	10 00 00 00 2a 10 08 00 00 00 00 00 00 00 00 00     ....*...........
	...
    2a90:	00 10 20 20 00 00 08 20 20 20 20 20 20 20 20 20     ..  ...         
    2aa0:	20 20 20 20 00 00 00 00 00 00 00 00 00 00 00 00         ............
    2ab0:	00 00 00 20 00 00 00 00 08 20 20 20 00 00 08 20     ... .....   ... 
    2ac0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2ad0:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    2ae0:	20 20 20 20 00 08 20 20 20 08 00 00 20 20 20 20         ..   ...    
    2af0:	20 08 00 00 20 20 20 20 20 20 00 00 20 20 20 20      ...      ..    
    2b00:	20 20 00 00 20 20 20 20 20 20 00 00 20 20 20 20       ..      ..    
    2b10:	20 20 00 00 20 20 20 20 20 20 00 00 20 20 20 20       ..      ..    
    2b20:	20 20 00 00 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0       ..............
    2b30:	d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 d0 d0 d0     ................
    2b40:	d0 d0 d0 d0 00 d0 d0 d0 d0 d0 d0 d0 00 00 d0 d0     ................
    2b50:	d0 d0 d0 d0 00 00 d0 d0 d0 d0 d0 d0 00 00 d0 d0     ................
    2b60:	d0 d0 d0 d0                                         ....

00002b64 <TitleMap>:
    2b64:	1e 1a 00 00 00 00 00 01 02 03 04 00 01 02 03 04     ................
    2b74:	00 01 02 03 05 00 01 02 03 04 00 00 00 00 00 00     ................
    2b84:	00 00 00 00 00 06 07 08 09 00 06 07 08 0a 00 06     ................
    2b94:	07 08 0a 00 06 07 08 09 00 00 00 00 00 00 00 00     ................
    2ba4:	00 00 00 06 0b 0c 0d 00 06 0b 0c 0e 00 06 0f 10     ................
    2bb4:	11 00 06 0f 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bc4:	00 12 13 13 14 00 12 13 13 15 00 16 17 18 19 00     ................
    2bd4:	16 17 1a 1b 00 00 00 00 00 00 00 00 00 00 00 1c     ................
    2be4:	1d 1e 1f 00 1c 1d 20 21 00 1c 1d 18 19 00 1c 1d     ...... !........
    2bf4:	22 19 00 00 00 00 00 00 00 00 00 00 00 1c 19 00     "...............
    2c04:	00 00 1c 19 23 24 00 1c 25 26 19 00 1c 25 26 19     ....#$..%&...%&.
	...
    2c1c:	00 00 00 27 28 29 00 00 27 28 2a 2b 00 27 28 08     ...'()..'(*+.'(.
    2c2c:	2c 00 27 28 08 2c 00 00 00 00 00 00 00 00 00 01     ,.'(.,..........
    2c3c:	02 03 04 00 01 02 03 04 00 01 02 03 05 00 01 02     ................
    2c4c:	03 04 00 01 02 03 04 00 00 00 00 00 00 06 07 08     ................
    2c5c:	09 00 06 07 08 09 00 06 07 08 0a 00 06 07 08 09     ................
    2c6c:	00 27 07 08 09 00 00 00 00 00 00 06 0b 0c 0d 00     .'..............
    2c7c:	06 0b 0c 0d 00 06 0b 0c 2d 00 2e 0f 00 00 00 00     ........-.......
    2c8c:	1c 19 00 00 00 00 00 00 00 12 13 13 14 00 12 13     ................
    2c9c:	13 14 00 12 13 13 19 00 23 2f 03 04 00 00 1c 19     ........#/......
    2cac:	00 00 00 00 00 00 00 1c 1d 1e 1f 00 1c 1d 1e 1f     ................
    2cbc:	00 1c 1d 30 19 00 31 32 33 19 00 00 1c 34 35 00     ...0..123....45.
    2ccc:	00 00 00 00 00 1c 19 00 00 00 1c 19 36 04 00 1c     ............6...
    2cdc:	19 18 19 00 36 02 26 19 00 00 37 38 39 3a 00 00     ....6.&...789:..
    2cec:	00 00 00 27 28 29 00 00 27 28 3b 09 00 27 28 3c     ...'()..'(;..'(<
    2cfc:	09 00 27 28 08 09 00 00 3d 3e 3f 40 00 00 00 00     ..'(....=>?@....
	...
    2d20:	00 00 41 42 43 00 00 00 00 00 00 00 00 00 00 00     ..ABC...........
    2d30:	00 00 00 00 00 00 44 45 46 47 48 49 4a 00 00 4b     ......DEFGHIJ..K
    2d40:	4c 4d 4e 4f 00 00 00 00 00 00 00 00 00 00 00 00     LMNO............
    2d50:	00 00 00 50 51 52 53 54 55 56 57 58 59 5a 5b 5c     ...PQRSTUVWXYZ[\
    2d60:	5d 5e 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ]^..............
    2d70:	00 5f 60 61 62 63 64 65 66 67 68 69 6a 6b 6c 00     ._`abcdefghijkl.
	...
    2d8c:	00 00 00 6d 60 6e 60 60 6f 70 71 72 73 74 75 76     ...m`n``opqrstuv
    2d9c:	77 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     w...............
    2dac:	78 79 60 60 60 7a 7b 7c 7d 76 76 76 76 7e 7f 00     xy```z{|}vvvv~..
	...
    2dc8:	00 00 80 81 82 83 84 85 76 76 76 76 76 76 76 86     ........vvvvvvv.
    2dd8:	87 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2de8:	88 89 8a 8b 76 76 76 76 76 76 76 76 8c 8d 00 00     ....vvvvvvvv....
	...
    2e04:	00 00 8e 8f 90 76 76 76 76 76 76 76 76 91 92 93     .....vvvvvvvv...
	...
    2e24:	94 95 96 76 76 76 76 76 76 76 97 98 93 00 00 00     ...vvvvvvv......
	...
    2e40:	00 00 00 99 9a 9b 76 76 76 76 9c 9d 9e 00 00 00     ......vvvv......
	...
    2e60:	9f a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 00 00 00 00 00     ................
	...

00002e72 <StageTiles>:
    2e72:	31 31 31 21 31 21 21 31 31 21 21 31 31 21 31 31     111!1!!11!!11!11
    2e82:	31 21 31 31 31 21 21 31 21 31 31 31 31 21 31 21     1!111!!1!1111!1!
    2e92:	21 31 31 31 21 31 31 31 21 31 31 21 21 31 31 31     !111!111!11!!111
    2ea2:	31 21 21 31 21 31 31 21 31 31 31 31 21 21 21 31     1!!1!11!1111!!!1
    2eb2:	31 31 31 21 31 21 21 31 31 21 21 31 31 31 31 31     111!1!!11!!11111
    2ec2:	31 21 31 31 31 31 21 31 21 31 31 31 31 31 31 21     1!1111!1!111111!
    2ed2:	21 31 31 31 31 31 31 31 21 31 31 31 31 31 31 31     !1111111!1111111
    2ee2:	31 31 31 31 31 31 31 21 31 31 31 31 21 21 21 31     1111111!1111!!!1
    2ef2:	31 21 21 31 21 31 31 31 31 31 21 31 31 21 21 31     1!!1!11111!11!!1
    2f02:	31 21 21 31 31 31 21 31 21 31 21 31 31 31 31 21     1!!111!1!1!1111!
    2f12:	31 31 31 21 31 31 31 21 31 31 31 21 21 31 31 21     111!111!111!!11!
    2f22:	21 31 31 21 31 21 21 31 31 21 21 21 31 31 31 31     !11!1!!11!!!1111
    2f32:	31 21 21 31 21 31 31 31 31 31 21 31 31 21 21 31     1!!1!11111!11!!1
    2f42:	31 21 21 31 31 31 21 31 21 31 21 31 31 21 31 21     1!!111!1!1!11!1!
    2f52:	31 31 31 00 31 31 21 21 31 31 31 21 00 21 21 21     111.11!!111!.!!!
    2f62:	21 31 31 21 21 00 00 21 31 21 21 21 21 21 21 21     !11!!..!1!!!!!!!
    2f72:	31 31 31 21 21 21 21 31 31 21 21 31 31 21 00 31     111!!!!11!!11!.1
    2f82:	31 21 31 31 31 21 00 31 21 31 21 31 31 21 00 21     1!111!.1!1!11!.!
    2f92:	21 21 31 31 21 21 21 21 21 21 31 21 21 00 21 21     !!11!!!!!!1!!.!!
    2fa2:	00 21 21 00 00 21 21 21 31 00 00 21 21 21 21 31     .!!..!!!1..!!!!1
    2fb2:	21 00 21 00 21 00 21 21 21 21 00 21 00 21 00 21     !.!.!.!!!!.!.!.!
    2fc2:	21 00 21 00 21 21 21 21 21 21 21 21 21 00 21 21     !.!.!!!!!!!!!.!!
    2fd2:	21 21 21 00 21 21 21 21 21 21 21 21 21 21 21 21     !!!.!!!!!!!!!!!!
    2fe2:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    2ff2:	31 31 31 31 21 21 31 31 31 31 31 00 21 31 31 31     1111!!11111.!111
    3002:	31 31 31 00 31 31 31 00 00 31 00 00 31 31 31 00     111.111..1..111.
    3012:	21 00 21 31 31 31 21 00 00 21 00 31 31 21 00 21     !.!111!..!.11!.!
    3022:	21 00 21 00 00 00 21 00 21 21 00 21 00 21 00 21     !.!...!.!!.!.!.!
    3032:	21 31 21 31 31 31 31 31 00 21 31 31 31 31 21 31     !1!11111.!1111!1
    3042:	21 31 31 31 31 31 31 31 00 31 31 31 00 21 31 31     !1111111.111.!11
    3052:	00 21 21 00 21 31 31 31 21 00 00 21 00 31 31 31     .!!.!111!..!.111
    3062:	00 21 00 00 00 00 31 00 21 00 21 21 00 00 21 00     .!....1.!.!!..!.
    3072:	31 31 31 31 21 21 31 31 31 31 31 ea 21 31 31 31     1111!!11111.!111
    3082:	31 31 31 ea 31 31 31 ea ea 31 ea ea 31 31 31 ea     111.111..1..111.
    3092:	ea ea ea ea 31 31 31 ea ea ea ea ea 31 31 31 ea     ....111.....111.
    30a2:	ea ea ea ea ea 31 ea ea ea ea ea ea ea ea ea ea     .....1..........
    30b2:	31 31 31 31 21 21 31 31 31 31 31 00 21 31 31 31     1111!!11111.!111
    30c2:	31 31 31 00 31 31 31 ea 00 31 00 00 31 31 31 ea     111.111..1..111.
    30d2:	21 00 21 31 31 31 21 ea 00 21 00 31 31 21 00 21     !.!111!..!.11!.!
    30e2:	21 00 21 00 00 00 21 ea 21 21 00 21 00 21 00 21     !.!...!.!!.!.!.!
    30f2:	21 21 21 21 21 21 21 21 21 00 21 21 21 21 21 21     !!!!!!!!!.!!!!!!
    3102:	00 21 21 21 00 21 21 21 00 21 21 00 21 21 21 21     .!!!.!!!.!!.!!!!
    3112:	21 00 00 21 00 21 21 21 00 21 21 21 00 21 21 00     !..!.!!!.!!!.!!.
    3122:	00 21 21 00 00 21 21 00 21 00 00 21 21 00 00 21     .!!..!!.!..!!..!
    3132:	21 21 21 21 21 21 21 21 21 00 00 00 21 21 21 21     !!!!!!!!!...!!!!
    3142:	21 00 21 21 21 00 21 21 21 00 21 00 21 21 21 21     !.!!!.!!!.!.!!!!
    3152:	21 00 21 21 00 21 21 21 21 21 00 21 21 21 00 21     !.!!.!!!!!.!!!.!
    3162:	21 00 21 00 21 21 00 21 21 21 21 21 00 00 00 21     !.!.!!.!!!!!...!
    3172:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3182:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3192:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    31a2:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    31b2:	21 21 21 31 31 31 31 31 ea 21 31 31 31 31 00 31     !!!11111.!1111.1
    31c2:	21 31 31 31 31 00 21 31 ea 31 31 31 00 21 31 31     !1111.!1.111.!11
    31d2:	ea 21 21 00 21 31 31 31 ea ea ea 21 ea 31 31 31     .!!.!111...!.111
    31e2:	ea ea ea ea ea ea 31 ea ea ea ea ea ea ea 21 ea     ......1.......!.
    31f2:	31 21 31 31 21 31 31 00 31 21 31 31 21 31 31 00     1!11!11.1!11!11.
    3202:	00 31 31 21 21 31 ea 21 31 ea 31 31 31 21 ea ea     .11!!1.!1.111!..
    3212:	31 ea 21 31 31 21 ea ea ea ea ea 31 31 ea ea ea     1.!11!.....11...
    3222:	ea ea ea ea 31 ea ea ea ea ea ea ea ea ea ea ea     ....1...........
    3232:	ea 21 21 21 21 21 21 21 ea 21 21 ea 21 21 21 00     .!!!!!!!.!!.!!!.
    3242:	ea 21 21 ea 21 21 21 21 ea 21 ea ea 21 21 21 ea     .!!.!!!!.!..!!!.
    3252:	ea ea ea ea 21 21 21 ea ea ea ea ea 21 21 21 ea     ....!!!.....!!!.
    3262:	ea ea ea ea ea 21 ea ea ea ea ea ea ea ea ea ea     .....!..........
    3272:	21 21 00 21 21 21 00 00 21 21 21 00 21 21 21 00     !!.!!!..!!!.!!!.
    3282:	ea 21 21 00 21 21 21 00 ea 21 21 21 00 21 21 00     .!!.!!!..!!!.!!.
    3292:	ea 21 21 00 21 00 00 21 21 00 00 21 21 21 21 21     .!!.!..!!..!!!!!
    32a2:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    32b2:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    32c2:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    32d2:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    32e2:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    32f2:	21 21 00 21 21 21 00 00 21 21 21 00 21 21 21 00     !!.!!!..!!!.!!!.
    3302:	00 21 21 00 21 21 21 00 00 21 21 21 00 21 21 00     .!!.!!!..!!!.!!.
    3312:	00 21 21 00 21 00 00 21 21 00 00 21 21 21 21 21     .!!.!..!!..!!!!!
    3322:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    3332:	31 21 31 31 21 31 31 00 31 21 31 31 21 31 31 00     1!11!11.1!11!11.
    3342:	00 31 31 21 21 31 00 21 31 00 31 31 31 21 00 00     .11!!1.!1.111!..
    3352:	31 00 21 31 31 21 00 21 00 00 00 31 31 00 21 00     1.!11!.!...11.!.
    3362:	00 21 00 00 31 00 00 21 21 00 21 00 00 00 21 00     .!..1..!!.!...!.
    3372:	ea 21 21 21 21 21 21 21 ea 21 21 ea 21 21 21 ea     .!!!!!!!.!!.!!!.
    3382:	ea 21 21 ea 21 21 21 21 ea 21 ea ea 21 21 21 ea     .!!.!!!!.!..!!!.
    3392:	ea ea ea ea 21 21 21 ea ea ea ea ea 21 21 21 ea     ....!!!.....!!!.
    33a2:	ea ea ea ea ea 21 ea ea ea ea ea ea ea ea ea ea     .....!..........
    33b2:	31 31 31 31 21 21 31 31 31 31 31 00 21 31 31 31     1111!!11111.!111
    33c2:	31 31 31 00 31 31 31 ea 00 31 00 00 31 31 31 ea     111.111..1..111.
    33d2:	21 00 21 31 31 31 21 ea 00 21 00 31 31 21 00 21     !.!111!..!.11!.!
    33e2:	21 00 21 00 00 00 21 ea 21 21 00 21 00 21 ea 21     !.!...!.!!.!.!.!
    33f2:	21 21 00 21 21 21 ea ea 21 21 21 00 21 21 21 ea     !!.!!!..!!!.!!!.
    3402:	00 21 21 00 21 21 21 ea 00 21 21 21 00 21 21 ea     .!!.!!!..!!!.!!.
    3412:	00 21 21 00 21 00 00 21 21 00 00 21 21 21 21 21     .!!.!..!!..!!!!!
    3422:	21 21 21 21 21 21 21 21 21 21 21 21 21 21 21 21     !!!!!!!!!!!!!!!!
    3432:	ea ea ea 33 ea ea ea ea ea ea ea 21 ea ea ea ea     ...3.......!....
    3442:	ea ea 0a 0a 0a ea ea ea ea 0a 5c 5c 5c 0a ea ea     ..........\\\...
    3452:	0a 5c 5c 13 0a 13 0a ea 0a 5c 0a 13 13 13 0a ea     .\\......\......
    3462:	0a 5c 13 0a 13 13 0a ea 0a 5c 13 13 13 53 0a ea     .\.......\...S..
    3472:	21 21 21 21 21 21 21 21 21 00 21 21 21 21 21 21     !!!!!!!!!.!!!!!!
    3482:	ea 21 21 21 00 21 21 21 ea 21 21 00 21 21 21 21     .!!!.!!!.!!.!!!!
    3492:	21 00 00 21 00 21 21 21 ea 21 21 21 00 21 21 00     !..!.!!!.!!!.!!.
    34a2:	ea 21 21 00 00 21 21 00 21 00 00 21 21 00 00 21     .!!..!!.!..!!..!
    34b2:	0a 5c 13 13 13 13 0a ea 0a 5c 13 0a 13 13 0a ea     .\.......\......
    34c2:	0a 0a 13 13 13 0a 0a ea 0a 5c 13 13 13 13 0a ea     .........\......
    34d2:	0a 5c 13 13 13 13 0a ea 0a 5c 13 0a 13 13 0a ea     .\.......\......
    34e2:	0a 5c 13 13 0a 13 0a ea 0a 0a 13 13 13 13 0a ea     .\..............
    34f2:	0a 5c 13 13 13 13 0a ea 0a 5c 13 0a 13 13 0a ea     .\.......\......
    3502:	0a 5c 13 13 13 0a 0a ea 0a 5c 13 13 13 0a 0a ea     .\.......\......
    3512:	0a 0a 13 13 0a 0a 0a ea ea 0a 0a 0a 0a 0a ea ea     ................
    3522:	ea ea 0a 0a 0a ea ea ea ea ea ea 10 ea ea ea ea     ................
    3532:	ea ea ea 21 ea ea ea ea ea ea ea 21 ea ea ea ea     ...!.......!....
    3542:	ea ea ea 21 ea ea ea ea ea ea ea 21 ea ea ea ea     ...!.......!....
    3552:	ea ea ea 21 ea ea ea ea ea ea ea 21 ea ea ea ea     ...!.......!....
    3562:	ea ea ea 21 ea ea ea ea ea ea ea 21 ea ea ea ea     ...!.......!....
    3572:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3582:	ea ea ea ea ea 20 ea ea ea ea ea ea 20 20 ea ea     ..... ......  ..
    3592:	20 20 ea ea 20 ea ea 20 ea ea 20 ea 20 ea ea 20       .. .. .. . .. 
    35a2:	ea ea 20 ea ea ea 20 ea ea ea ea 20 ea 20 20 ea     .. ... .... .  .
    35b2:	ea ea ea 21 ea ea ea ea ea ea ea 21 ea ea ea ea     ...!.......!....
    35c2:	ea ea ea 21 ea ea ea ea ea ea ea 21 20 ea ea ea     ...!.......! ...
    35d2:	72 ea ea 21 20 ea ea ea 20 72 72 21 20 ea ea ea     r..! ... rr! ...
    35e2:	ea 20 20 21 ea 20 ea ea ea ea 20 21 ea 20 ea ea     .  !. .... !. ..
    35f2:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3602:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3612:	ea ea 20 20 ea ea 20 20 ea 20 20 ea ea ea ea ea     ..  ..  .  .....
    3622:	ea 20 ea ea ea ea ea ea 20 20 ea ea ea ea ea ea     . ......  ......
    3632:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3642:	ea ea ea 20 ea ea ea ea ea ea ea ea 20 ea ea ea     ... ........ ...
    3652:	72 ea ea ea 20 ea ea ea 20 72 72 ea 20 ea ea ea     r... ... rr. ...
    3662:	ea 20 20 72 ea 20 ea ea ea ea 20 72 ea 20 ea ea     .  r. .... r. ..
    3672:	ea ea ea 20 ea 20 ea ea ea ea ea 20 ea 20 ea ea     ... . ..... . ..
    3682:	ea ea ea 20 ea ea ea ea ea ea ea ea 20 ea ea ea     ... ........ ...
    3692:	72 ea ea ea 20 ea ea ea 20 72 72 ea 20 ea ea ea     r... ... rr. ...
    36a2:	ea 20 20 72 ea 20 ea ea ea ea 20 72 ea 20 ea ea     .  r. .... r. ..
    36b2:	ea ea 20 20 72 20 ea ea ea ea ea 20 72 20 ea ea     ..  r ..... r ..
    36c2:	72 ea ea 20 20 72 ea ea 20 72 ea 20 20 72 ea 20     r..  r.. r.  r. 
    36d2:	20 72 ea 20 20 72 72 20 20 72 20 20 20 72 72 20      r.  rr  r   rr 
    36e2:	20 ea 72 20 20 20 72 20 ea ea 72 20 20 20 72 20      .r   r ..r   r 
    36f2:	20 ea ea ea ea 20 72 ea 20 ea ea ea ea ea 20 72      .... r. ..... r
    3702:	20 ea 20 72 72 20 ea 20 ea 20 72 20 ea ea ea 20      . rr . . r ... 
    3712:	ea 72 20 ea ea ea 72 20 20 72 20 ea ea 72 20 20     .r ...r  r ..r  
    3722:	20 20 ea 20 72 72 20 20 20 72 20 20 72 20 20 20       . rr   r  r   
    3732:	ea ea 20 21 72 20 ea ea ea ea ea 21 72 20 ea ea     .. !r .....!r ..
    3742:	72 ea ea 21 20 72 ea ea 20 72 ea 21 20 72 ea 20     r..! r.. r.! r. 
    3752:	20 72 ea 21 20 72 72 20 20 72 20 21 20 72 72 20      r.! rr  r ! rr 
    3762:	20 ea 72 21 20 20 72 20 ea ea 72 21 20 20 72 20      .r!  r ..r!  r 
    3772:	ea ea 20 20 72 20 ea ea ea ea ea 20 72 20 ea ea     ..  r ..... r ..
    3782:	28 28 20 20 20 20 72 72 28 20 72 72 72 20 72 20     ((    rr( rrr r 
    3792:	20 72 72 20 72 20 72 20 20 72 20 72 72 20 72 20      rr r r  r rr r 
    37a2:	20 20 72 72 20 20 20 20 20 72 20 20 20 20 72 20       rr     r    r 
    37b2:	ea ea ea 20 ea 20 ea ea ea ea ea 20 ea 20 ea ea     ... . ..... . ..
    37c2:	20 20 20 20 20 20 ea 72 28 72 72 20 72 20 20 20           .r(rr r   
    37d2:	20 72 28 28 20 72 20 20 20 72 28 20 20 20 72 20      r(( r   r(   r 
    37e2:	72 20 20 20 28 20 72 72 72 28 20 72 72 28 20 72     r   ( rrr( rr( r
    37f2:	ea 20 72 20 20 20 72 72 ea 20 20 20 20 20 72 72     . r   rr.     rr
    3802:	ea ea 20 20 20 20 72 72 ea 20 72 72 72 20 72 20     ..    rr. rrr r 
    3812:	20 72 72 20 72 20 72 20 20 72 20 72 72 20 72 20      rr r r  r rr r 
    3822:	20 20 72 72 20 20 20 20 20 72 20 20 20 20 72 20       rr     r    r 
    3832:	20 20 20 20 72 20 20 ea 20 20 20 72 20 20 20 ea         r  .   r   .
    3842:	20 20 20 20 20 20 ea 72 ea 72 72 20 72 20 20 20           .r.rr r   
    3852:	20 72 28 28 20 72 20 20 20 72 28 20 20 20 72 20      r(( r   r(   r 
    3862:	72 20 20 20 28 20 72 72 72 28 20 72 72 28 20 72     r   ( rrr( rr( r
    3872:	ea 20 72 20 20 20 72 72 ea 20 20 20 20 20 72 72     . r   rr.     rr
    3882:	ea ea 20 20 20 20 72 72 28 20 72 72 72 20 72 20     ..    rr( rrr r 
    3892:	20 72 72 20 72 20 72 20 20 72 20 72 72 20 72 20      rr r r  r rr r 
    38a2:	20 20 72 72 20 20 20 20 20 72 20 20 20 20 72 20       rr     r    r 
    38b2:	20 20 20 20 72 20 20 ea 20 20 20 72 20 20 20 ea         r  .   r   .
    38c2:	20 20 20 20 20 20 ea 72 28 72 72 20 72 20 20 20           .r(rr r   
    38d2:	20 72 28 28 20 72 20 20 20 72 28 20 20 20 72 20      r(( r   r(   r 
    38e2:	72 20 20 20 28 20 72 72 72 28 20 72 72 28 20 72     r   ( rrr( rr( r
    38f2:	ea ea 20 20 72 20 ea ea ea ea ea 20 72 20 ea ea     ..  r ..... r ..
    3902:	ea ea 20 20 20 20 72 72 ea 20 72 72 72 20 72 20     ..    rr. rrr r 
    3912:	20 72 72 20 72 20 72 20 20 72 20 72 72 20 72 20      rr r r  r rr r 
    3922:	20 20 72 72 20 20 20 20 20 72 20 20 20 20 72 20       rr     r    r 
    3932:	ea ea ea 20 ea 20 ea ea ea ea ea 20 ea 20 ea ea     ... . ..... . ..
    3942:	20 ea 20 72 72 20 ea 20 ea 20 72 20 ea ea ea 20      . rr . . r ... 
    3952:	28 72 20 28 ea ea 72 20 20 72 20 28 28 72 20 20     (r (..r  r ((r  
    3962:	20 20 28 20 72 72 20 20 20 72 20 20 72 20 20 20       ( rr   r  r   
    3972:	ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea ea     ................
    3982:	ea ea ea 20 ea ea ea ea ea ea ea ea 20 ea ea ea     ... ........ ...
    3992:	72 ea ea ea 20 ea ea ea 20 72 72 ea 20 ea ea ea     r... ... rr. ...
    39a2:	28 20 20 72 ea 20 ea ea 28 28 20 72 28 20 ea ea     (  r. ..(( r( ..
    39b2:	ea ea ea 20 ea 20 ea ea ea ea ea 20 ea 20 ea ea     ... . ..... . ..
    39c2:	20 ea 20 72 72 20 ea 20 ea 20 72 20 ea ea ea 20      . rr . . r ... 
    39d2:	ea 72 20 ea ea ea 72 20 20 72 20 ea ea 72 20 20     .r ...r  r ..r  
    39e2:	20 20 ea 20 72 72 20 20 20 72 20 20 72 20 20 20       . rr   r  r   
    39f2:	20 20 20 20 72 20 20 ea 20 20 20 72 20 20 20 ea         r  .   r   .
    3a02:	20 20 20 20 20 20 ea 72 ea 72 72 20 72 20 20 20           .r.rr r   
    3a12:	20 72 ea ea 20 72 20 20 20 72 ea 20 20 20 72 20      r.. r   r.   r 
    3a22:	72 20 20 20 ea 20 72 72 72 ea 20 72 72 ea 20 72     r   . rrr. rr. r
    3a32:	20 20 20 20 72 20 20 ea 20 20 20 72 20 20 20 ea         r  .   r   .
    3a42:	20 20 20 20 20 20 ea 72 ea 72 72 20 72 20 20 20           .r.rr r   
    3a52:	20 72 ea ea 20 72 20 20 20 72 28 20 20 20 72 20      r.. r   r(   r 
    3a62:	72 20 20 20 28 20 72 72 72 28 20 72 72 28 20 72     r   ( rrr( rr( r
    3a72:	ea ea ea 20 ea 20 ea ea ea ea ea 20 ea 20 ea ea     ... . ..... . ..
    3a82:	20 20 20 20 20 20 ea 72 ea 72 72 20 72 20 20 20           .r.rr r   
    3a92:	20 72 ea ea 20 72 20 20 20 72 ea 20 20 20 72 20      r.. r   r.   r 
    3aa2:	72 20 20 20 28 20 72 72 72 28 20 72 72 28 20 72     r   ( rrr( rr( r
    3ab2:	72 20 20 20 72 20 20 28 72 20 20 20 20 20 20 28     r   r  (r      (
    3ac2:	72 72 20 72 20 20 28 28 20 72 20 20 72 20 28 20     rr r  (( r  r ( 
    3ad2:	20 72 20 20 72 20 20 20 20 20 72 20 20 72 20 20      r  r     r  r  
    3ae2:	20 20 72 20 20 72 20 20 28 20 72 20 20 20 72 20       r  r  ( r   r 
    3af2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 72                    r
    3b02:	20 20 72 20 20 20 72 72 20 20 72 20 20 72 72 20       r   rr  r  rr 
    3b12:	20 20 72 20 20 72 72 20 20 72 72 20 72 72 72 20       r  rr  rr rrr 
    3b22:	20 72 72 20 72 72 20 20 20 72 20 72 72 72 20 72      rr rr   r rrr r
    3b32:	20 20 72 20 28 20 20 72 28 72 20 20 28 20 20 20       r (  r(r  (   
    3b42:	20 20 20 72 72 20 28 20 20 20 20 72 72 72 20 20        rr (    rrr  
    3b52:	20 72 20 72 20 20 72 20 20 72 20 72 72 72 20 72      r r  r  r rrr r
    3b62:	20 72 20 20 20 72 72 72 72 20 20 20 72 20 20 20      r   rrrr   r   
    3b72:	72 20 20 20 20 20 20 20 20 20 20 20 20 72 20 20     r            r  
    3b82:	20 20 20 20 20 72 20 20 20 20 20 20 72 72 20 20          r      rr  
    3b92:	20 20 20 20 72 72 20 20 20 72 20 72 20 72 72 20         rr   r r rr 
    3ba2:	72 72 20 72 72 20 72 20 72 20 20 20 72 72 20 20     rr rr r r   rr  
    3bb2:	28 28 20 20 72 20 ea ea 28 28 28 20 72 20 28 ea     ((  r ..((( r (.
    3bc2:	72 28 28 20 20 72 28 28 20 72 28 20 20 72 28 20     r((  r(( r(  r( 
    3bd2:	20 72 28 20 20 72 72 20 20 72 20 20 20 72 72 20      r(  rr  r   rr 
    3be2:	20 28 72 20 20 20 72 20 28 28 72 20 20 20 72 20      (r   r ((r   r 
    3bf2:	20 ea ea ea ea 20 72 ea 20 ea ea ea ea ea 20 72      .... r. ..... r
    3c02:	20 ea 20 72 72 20 ea 20 28 20 72 20 ea ea ea 20      . rr . ( r ... 
    3c12:	28 72 20 ea ea ea 72 20 20 72 20 28 28 72 20 20     (r ...r  r ((r  
    3c22:	20 20 28 20 72 72 20 20 20 72 20 20 72 20 20 20       ( rr   r  r   
    3c32:	20 20 20 20 72 20 20 ea 20 20 20 72 20 20 20 ea         r  .   r   .
    3c42:	20 20 20 72 72 20 ea 20 20 20 20 72 72 72 20 20        rr .    rrr  
    3c52:	20 72 20 72 20 20 72 20 20 72 20 72 72 72 20 72      r r  r  r rrr r
    3c62:	20 72 20 20 20 72 72 72 72 20 20 20 72 20 20 20      r   rrrr   r   
    3c72:	20 20 72 20 ea 20 20 72 ea 72 20 20 ea 20 20 20       r .  r.r  .   
    3c82:	20 20 20 72 72 20 ea 20 20 20 20 72 72 72 20 20        rr .    rrr  
    3c92:	20 72 20 72 20 20 72 20 20 72 20 72 72 72 20 72      r r  r  r rrr r
    3ca2:	20 72 20 20 20 72 72 72 72 20 20 20 72 20 20 20      r   rrrr   r   
    3cb2:	72 20 20 20 72 20 20 ea 72 20 20 20 20 20 20 ea     r   r  .r      .
    3cc2:	72 72 20 72 20 20 ea ea 20 72 20 20 72 20 ea 20     rr r  .. r  r . 
    3cd2:	20 72 20 20 72 20 20 20 20 20 72 20 20 72 20 20      r  r     r  r  
    3ce2:	20 20 72 20 20 72 20 20 ea 20 72 20 20 20 72 20       r  r  . r   r 
    3cf2:	20 ea ea ea ea 20 72 ea 20 ea ea ea ea ea 20 72      .... r. ..... r
    3d02:	20 ea 20 72 72 20 ea 20 ea 20 72 20 ea ea ea 20      . rr . . r ... 
    3d12:	ea 72 20 ea ea ea 72 20 20 72 20 ea ea 72 20 20     .r ...r  r ..r  
    3d22:	20 20 28 20 72 72 20 20 20 72 20 20 72 20 20 20       ( rr   r  r   
    3d32:	ea ea 20 21 72 20 ea ea ea ea ea 21 72 20 ea ea     .. !r .....!r ..
    3d42:	72 ea ea 21 20 72 ea ea 20 72 ea 21 20 72 ea 20     r..! r.. r.! r. 
    3d52:	20 72 ea 21 20 72 72 20 20 72 20 21 20 72 72 20      r.! rr  r ! rr 
    3d62:	20 28 72 21 20 20 72 20 28 28 72 21 20 20 72 20      (r!  r ((r!  r 
    3d72:	20 20 20 20 72 20 20 28 20 20 20 72 20 20 20 28         r  (   r   (
    3d82:	20 20 20 72 72 20 28 20 20 20 20 72 72 72 20 20        rr (    rrr  
    3d92:	20 72 20 72 20 20 72 20 20 72 20 72 72 72 20 72      r r  r  r rrr r
    3da2:	20 72 20 20 20 72 72 72 72 20 20 20 72 20 20 20      r   rrrr   r   
    3db2:	72 72 20 72 72 72 20 72 72 20 20 72 72 20 20 72     rr rrr rr  rr  r
    3dc2:	72 20 72 72 72 20 72 72 72 20 72 72 20 20 72 72     r rrr rrr rr  rr
    3dd2:	20 72 72 72 20 20 72 72 20 72 72 72 20 72 72 20      rrr  rr rrr rr 
    3de2:	72 72 72 20 20 72 72 20 72 72 20 20 72 20 72 20     rrr  rr rr  r r 
    3df2:	28 20 20 20 20 20 20 20 20 20 20 20 20 20 20 72     (              r
    3e02:	20 20 72 20 20 20 72 72 20 20 72 20 20 72 72 20       r   rr  r  rr 
    3e12:	20 20 72 20 20 72 72 20 20 72 72 20 72 72 72 20       r  rr  rr rrr 
    3e22:	20 72 72 20 72 72 20 20 20 72 20 72 72 72 20 72      rr rr   r rrr r
    3e32:	20 72 72 20 72 20 72 72 20 20 20 20 20 20 72 72      rr r rr      rr
    3e42:	20 72 72 72 72 20 20 72 20 72 72 72 20 72 20 72      rrrr  r rrr r r
    3e52:	20 20 72 72 72 20 72 20 72 20 20 20 72 72 72 20       rrr r r   rrr 
    3e62:	20 72 20 20 20 20 20 72 20 72 20 20 72 20 72 20      r     r r  r r 
    3e72:	20 72 72 20 20 72 72 72 20 20 72 72 72 20 72 72      rr  rrr  rrr rr
    3e82:	20 20 20 72 72 20 72 72 20 20 20 20 72 72 20 72        rr rr    rr r
    3e92:	20 72 72 20 72 72 20 72 20 72 72 20 20 72 20 20      rr rr r rr  r  
    3ea2:	20 72 72 72 20 72 72 20 20 72 72 20 20 72 72 20      rrr rr  rr  rr 
    3eb2:	20 72 20 72 20 20 72 20 72 20 72 72 20 20 10 10      r r  r r rr  ..
    3ec2:	72 20 72 72 10 10 10 d0 72 20 72 20 10 10 d0 d0     r rr....r r ....
    3ed2:	20 72 20 10 10 d0 d0 d0 20 72 20 10 d0 d0 d0 d0      r ..... r .....
    3ee2:	20 20 10 d0 d0 d0 d0 d0 72 20 10 d0 d0 d0 d0 d0       ......r ......
    3ef2:	10 20 72 72 20 72 20 20 10 20 72 72 20 20 20 72     . rr r  . rr   r
    3f02:	10 10 72 20 10 10 20 72 d0 10 72 10 10 10 20 72     ..r .. r..r... r
    3f12:	d0 10 72 10 10 d0 10 72 d0 d0 10 10 d0 d0 10 72     ..r....r.......r
    3f22:	d0 d0 10 d0 d0 d0 10 72 d0 d0 d0 d0 d0 d0 d0 10     .......r........
    3f32:	72 20 20 20 20 72 20 10 72 20 10 20 20 72 20 10     r    r .r .  r .
    3f42:	72 10 10 10 20 72 10 10 20 10 10 10 10 72 10 10     r... r.. ....r..
    3f52:	20 10 10 d0 10 72 10 d0 10 10 d0 d0 d0 10 10 d0      ....r..........
    3f62:	10 d0 d0 d0 d0 10 d0 d0 10 d0 d0 d0 d0 d0 d0 d0     ................
    3f72:	72 20 72 72 20 20 20 72 72 20 72 72 20 20 20 72     r rr   rr rr   r
    3f82:	72 20 72 20 10 10 20 72 20 72 20 10 10 10 20 72     r r .. r r ... r
    3f92:	20 72 20 10 10 d0 10 72 20 20 10 10 d0 d0 10 72      r ....r  .....r
    3fa2:	72 20 10 d0 d0 d0 10 72 10 10 d0 d0 d0 d0 d0 10     r .....r........
    3fb2:	20 72 72 72 72 20 20 10 20 72 72 72 20 20 10 10      rrrr  . rrr  ..
    3fc2:	20 72 72 72 20 20 10 10 20 72 72 72 72 20 10 10      rrr  .. rrrr ..
    3fd2:	20 72 72 72 20 20 10 10 20 20 72 20 20 20 10 d0      rrr  ..  r   ..
    3fe2:	10 20 72 72 20 10 10 d0 10 10 10 10 10 10 d0 d0     . rr ...........
    3ff2:	20 72 20 20 72 20 72 20 10 10 20 20 72 72 20 72      r  r r ..  rr r
    4002:	d0 10 10 10 72 72 20 72 d0 d0 10 10 20 72 20 72     ....rr r.... r r
    4012:	d0 d0 d0 10 10 20 72 20 d0 d0 d0 d0 10 20 72 20     ..... r ..... r 
    4022:	d0 d0 d0 d0 d0 10 20 20 d0 d0 d0 d0 d0 10 20 72     ......  ...... r
    4032:	72 72 72 20 20 72 72 20 72 72 20 72 72 72 20 20     rrr  rr rr rrr  
    4042:	72 72 20 72 72 20 20 20 72 20 72 72 20 20 20 20     rr rr   r rr    
    4052:	72 20 72 72 20 72 72 20 20 20 72 20 20 72 72 20     r rr rr   r  rr 
    4062:	20 72 72 20 72 72 72 20 20 72 72 20 20 72 72 20      rr rrr  rr  rr 
    4072:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4082:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4092:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    40a2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    40b2:	10 10 20 20 72 72 20 72 d0 10 10 10 72 72 20 72     ..  rr r....rr r
    40c2:	d0 d0 10 10 20 72 20 72 d0 d0 d0 10 10 20 72 20     .... r r..... r 
    40d2:	d0 d0 d0 d0 10 20 72 20 d0 d0 d0 d0 d0 10 20 20     ..... r ......  
    40e2:	d0 d0 d0 d0 d0 10 20 72 d0 d0 d0 d0 d0 d0 10 10     ...... r........
    40f2:	d0 d0 d0 d0 d0 d0 10 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4102:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4112:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4122:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4132:	10 20 20 72 72 72 72 20 10 10 20 20 72 72 72 20     .  rrrr ..  rrr 
    4142:	10 10 20 20 72 72 72 20 10 10 20 72 72 72 72 20     ..  rrr .. rrrr 
    4152:	10 10 20 20 72 72 72 20 d0 10 20 20 20 72 20 20     ..  rrr ..   r  
    4162:	d0 10 10 20 72 72 20 10 d0 d0 10 10 10 10 10 10     ... rr .........
    4172:	72 72 20 72 72 72 20 72 72 20 20 72 72 20 20 72     rr rrr rr  rr  r
    4182:	72 20 72 72 72 20 72 72 72 20 72 72 20 20 72 72     r rrr rrr rr  rr
    4192:	20 72 72 72 20 20 72 72 20 72 72 72 20 72 72 20      rrr  rr rrr rr 
    41a2:	72 72 72 20 20 72 72 20 20 72 20 20 72 20 72 20     rrr  rr  r  r r 
    41b2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    41c2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    41d2:	d0 d0 d0 d0 d0 d0 d0 72 d0 d0 d0 d0 72 72 72 20     .......r....rrr 
    41e2:	d0 d0 72 72 20 20 20 20 72 72 20 20 20 20 20 20     ..rr    rr      
    41f2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4202:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72     ...........rrrrr
    4212:	72 72 72 20 20 20 20 20 20 20 20 20 20 20 20 20     rrr             
    4222:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4232:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4242:	d0 72 72 72 72 72 72 72 72 20 20 20 20 20 20 20     .rrrrrrrr       
    4252:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4262:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4272:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4282:	72 72 72 72 72 72 72 90 20 20 20 20 20 20 20 72     rrrrrrr.       r
    4292:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    42a2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    42b2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    42c2:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72 72 d0     ........rrrrrrr.
    42d2:	20 20 20 20 20 20 20 72 20 20 20 20 20 20 20 20            r        
    42e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    42f2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4302:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4312:	72 72 d0 d0 d0 d0 d0 d0 20 20 72 72 72 d0 d0 d0     rr......  rrr...
    4322:	20 20 20 20 20 72 72 72 20 20 20 20 20 20 20 90          rrr       .
    4332:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4342:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4352:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4362:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 d0 d0 d0 d0 d0     ........rrr.....
    4372:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4382:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4392:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    43a2:	d0 d0 d0 d0 d0 d0 d0 72 d0 d0 d0 d0 d0 72 72 20     .......r.....rr 
    43b2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    43c2:	d0 d0 d0 d0 d0 d0 d0 72 d0 d0 d0 d0 72 72 72 20     .......r....rrr 
    43d2:	d0 d0 72 72 20 20 20 20 d0 72 20 20 20 20 20 20     ..rr    .r      
    43e2:	72 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     r               
    43f2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72     ..........rrrrrr
    4402:	72 72 20 20 20 20 20 20 20 20 20 20 20 20 20 20     rr              
    4412:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4422:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4432:	d0 d0 d0 d0 d0 d0 d0 90 72 72 72 72 72 72 72 72     ........rrrrrrrr
    4442:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4452:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4462:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4472:	72 72 72 72 72 72 72 72 20 20 20 20 20 20 20 20     rrrrrrrr        
    4482:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4492:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    44a2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    44b2:	72 72 72 72 72 72 d0 d0 20 20 20 20 20 20 72 72     rrrrrr..      rr
    44c2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    44d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    44e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    44f2:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72 72 72     ........rrrrrrrr
    4502:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4512:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4522:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4532:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 d0 d0 d0 d0 d0     ........rrr.....
    4542:	20 20 20 72 72 d0 d0 d0 20 20 20 20 20 72 72 d0        rr...     rr.
    4552:	20 20 20 20 20 20 20 72 20 20 20 20 20 20 20 20            r        
    4562:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4572:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4582:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4592:	72 d0 d0 d0 d0 d0 d0 d0 20 72 d0 d0 d0 d0 d0 d0     r....... r......
    45a2:	20 20 72 72 d0 d0 d0 d0 20 20 20 20 72 d0 d0 d0       rr....    r...
    45b2:	10 20 72 20 20 20 20 72 10 20 72 20 20 10 20 72     . r    r. r  . r
    45c2:	10 10 72 20 10 10 10 72 10 10 72 10 10 10 10 20     ..r ...r..r.... 
    45d2:	d0 10 72 10 d0 10 10 20 d0 10 10 d0 d0 d0 10 10     ..r.... ........
    45e2:	d0 d0 10 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0 10     ................
    45f2:	72 20 20 20 72 72 20 72 72 20 20 20 72 72 20 72     r   rr rr   rr r
    4602:	72 20 10 10 20 72 20 72 72 20 10 10 10 20 72 20     r .. r rr ... r 
    4612:	72 10 d0 10 10 20 72 20 72 10 d0 d0 10 10 20 20     r.... r r.....  
    4622:	72 10 d0 d0 d0 10 20 72 10 d0 d0 d0 d0 d0 10 10     r..... r........
    4632:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4642:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4652:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 72     ...............r
    4662:	d0 d0 d0 d0 d0 d0 72 20 d0 d0 d0 d0 d0 72 20 20     ......r .....r  
    4672:	d0 d0 d0 d0 d0 d0 72 72 d0 d0 d0 72 72 72 20 20     ......rr...rrr  
    4682:	d0 d0 72 20 20 20 20 20 d0 72 20 20 20 20 20 20     ..r     .r      
    4692:	72 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20     r               
    46a2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    46b2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    46c2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    46d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    46e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    46f2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4702:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4712:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4722:	20 20 20 20 20 20 20 20 20 20 10 20 20 20 20 20               .     
    4732:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4742:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4752:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4762:	20 10 20 20 20 20 20 20 20 10 10 20 20 20 20 20      .       ..     
    4772:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4782:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4792:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    47a2:	20 10 20 20 20 20 20 20 20 10 20 20 20 20 20 20      .       .      
    47b2:	20 20 20 72 72 d0 d0 d0 20 20 20 20 20 72 d0 d0        rr...     r..
    47c2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    47d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    47e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    47f2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4802:	72 72 d0 d0 d0 d0 d0 d0 20 20 72 d0 d0 d0 d0 d0     rr......  r.....
    4812:	20 20 20 72 72 d0 d0 d0 20 20 20 20 20 72 d0 d0        rr...     r..
    4822:	20 20 20 20 20 20 72 d0 20 20 20 20 20 20 20 72           r.       r
    4832:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4842:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4852:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4862:	d0 d0 d0 d0 d0 d0 d0 d0 72 d0 d0 d0 d0 d0 d0 d0     ........r.......
    4872:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4882:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4892:	d0 d0 d0 d0 d0 d0 72 72 d0 d0 d0 d0 d0 72 20 20     ......rr.....r  
    48a2:	d0 d0 d0 d0 72 20 20 20 d0 d0 d0 d0 10 10 10 20     ....r   ....... 
    48b2:	d0 d0 d0 d0 72 20 20 20 d0 d0 72 72 20 20 20 20     ....r   ..rr    
    48c2:	d0 72 20 20 20 20 20 20 72 20 20 20 20 20 20 20     .r      r       
    48d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    48e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    48f2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4902:	20 20 20 20 20 20 20 20 20 20 20 20 20 10 20 20                  .  
    4912:	20 20 20 20 20 10 20 20 10 20 20 20 20 10 20 20          .  .    .  
    4922:	10 20 20 20 20 10 20 20 10 20 20 20 20 10 20 20     .    .  .    .  
    4932:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4942:	20 20 20 20 20 20 20 20 20 20 20 20 20 10 20 20                  .  
    4952:	20 20 20 20 10 10 20 20 20 20 20 20 10 20 20 20         ..      .   
    4962:	20 20 20 20 10 20 20 20 20 20 20 20 10 20 20 20         .       .   
    4972:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4982:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4992:	20 20 20 20 10 20 20 20 20 20 20 10 10 20 20 20         .      ..   
    49a2:	20 10 10 20 20 20 20 20 10 10 20 20 20 20 20 20      ..     ..      
    49b2:	20 20 20 20 20 72 d0 d0 20 20 20 20 20 20 72 d0          r..      r.
    49c2:	20 20 20 20 20 20 20 72 20 20 20 20 20 20 20 20            r        
    49d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    49e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    49f2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4a02:	d0 d0 d0 d0 d0 d0 d0 d0 72 d0 d0 d0 d0 d0 d0 d0     ........r.......
    4a12:	20 72 d0 d0 d0 d0 d0 d0 20 20 72 d0 d0 d0 d0 d0      r......  r.....
    4a22:	20 20 d0 72 d0 d0 d0 d0 20 20 20 72 d0 d0 d0 d0       .r....   r....
    4a32:	d0 d0 d0 d0 72 20 20 20 d0 d0 d0 72 20 20 20 20     ....r   ...r    
    4a42:	d0 d0 d0 72 20 20 20 20 d0 d0 72 20 20 20 20 20     ...r    ..r     
    4a52:	d0 d0 72 20 20 20 20 20 d0 72 20 20 20 20 20 20     ..r     .r      
    4a62:	d0 72 20 20 20 20 20 20 d0 72 20 20 20 20 20 20     .r      .r      
    4a72:	20 20 10 10 20 20 20 20 20 20 20 20 10 10 20 20       ..        ..  
    4a82:	20 20 20 20 20 10 10 20 20 20 20 20 20 20 20 10          ..        .
    4a92:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4aa2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4ab2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4ac2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4ad2:	10 10 20 20 20 20 20 20 20 20 10 20 20 20 20 20     ..        .     
    4ae2:	20 20 10 10 20 20 20 20 20 20 20 20 10 20 20 20       ..        .   
    4af2:	20 20 10 20 20 20 20 20 20 20 10 20 20 20 20 20       .       .     
    4b02:	20 20 10 20 20 20 20 20 20 20 10 20 20 20 20 20       .       .     
    4b12:	20 20 10 10 20 20 20 20 20 20 20 10 20 20 20 20       ..       .    
    4b22:	20 20 20 10 20 20 20 20 20 20 20 20 10 20 20 20        .        .   
    4b32:	20 10 20 20 20 20 10 20 20 10 20 20 20 20 10 20      .    .  .    . 
    4b42:	20 10 20 20 20 20 10 20 20 10 20 20 20 10 10 20      .    .  .   .. 
    4b52:	20 10 20 20 20 10 20 20 20 10 20 20 20 10 20 20      .   .   .   .  
    4b62:	10 20 20 20 10 10 20 20 10 20 20 20 10 20 20 20     .   ..  .   .   
    4b72:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4b82:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4b92:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4ba2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10                    .
    4bb2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4bc2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4bd2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10                    .
    4be2:	20 20 20 10 10 10 10 d0 10 10 10 d0 d0 d0 d0 d0        .............
    4bf2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4c02:	20 20 20 20 20 20 20 20 20 20 20 20 20 10 10 10                  ...
    4c12:	20 20 10 10 10 d0 d0 d0 10 10 d0 d0 d0 d0 d0 d0       ..............
    4c22:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4c32:	20 72 d0 d0 d0 d0 d0 d0 20 20 72 d0 d0 d0 d0 d0      r......  r.....
    4c42:	10 10 10 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4c52:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4c62:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4c72:	d0 d0 d0 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4c82:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4c92:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4ca2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 72     ...............r
    4cb2:	10 10 20 20 20 20 20 20 d0 d0 10 10 10 20 20 20     ..      .....   
    4cc2:	d0 d0 d0 d0 d0 10 10 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4cd2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4ce2:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72 72 72     ........rrrrrrrr
    4cf2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4d02:	20 20 20 20 20 20 20 20 10 10 10 10 20 20 20 20             ....    
    4d12:	d0 d0 d0 d0 10 10 10 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    4d22:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72 72 72     ........rrrrrrrr
    4d32:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4d42:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4d52:	20 20 20 20 20 20 20 20 10 10 10 20 20 20 20 20             ...     
    4d62:	d0 d0 d0 10 10 10 10 20 72 72 72 72 72 72 72 72     ....... rrrrrrrr
    4d72:	10 10 20 20 20 10 20 20 20 10 20 20 20 10 20 20     ..   .   .   .  
    4d82:	20 10 20 20 20 10 20 20 20 10 10 20 20 20 10 20      .   .   ..   . 
    4d92:	20 20 10 20 20 20 10 20 20 20 10 20 20 20 10 20       .   .   .   . 
    4da2:	20 20 10 10 20 20 10 20 72 72 10 10 20 20 10 20       ..  . rr..  . 
    4db2:	20 20 20 20 10 20 20 20 20 20 20 10 10 20 20 20         .      ..   
    4dc2:	20 20 20 10 20 20 20 20 20 20 20 10 20 20 20 20        .       .    
    4dd2:	20 20 10 20 20 20 20 20 20 20 10 20 20 20 20 20       .       .     
    4de2:	20 20 10 20 20 20 20 20 10 10 20 20 20 20 10 10       .     ..    ..
    4df2:	20 20 20 20 20 20 20 10 20 20 20 20 20 10 10 20            .     .. 
    4e02:	20 20 20 20 10 20 20 20 20 20 20 10 10 20 20 20         .      ..   
    4e12:	20 20 10 20 20 20 20 20 20 10 20 20 20 20 20 20       .      .      
    4e22:	10 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10     .              .
    4e32:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4e42:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4e52:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4e62:	20 20 20 20 20 20 20 20 10 10 10 10 10 10 10 10             ........
    4e72:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4e82:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4e92:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4ea2:	20 20 20 20 20 20 20 20 10 10 10 10 10 10 10 20             ....... 
    4eb2:	20 20 20 20 72 d0 d0 d0 20 20 20 20 72 d0 d0 d0         r...    r...
    4ec2:	20 20 20 20 20 72 d0 d0 20 20 20 20 20 72 d0 d0          r..     r..
    4ed2:	20 20 20 20 20 72 d0 d0 20 20 20 20 20 20 72 d0          r..      r.
    4ee2:	20 20 20 20 20 20 10 d0 20 20 20 20 20 20 10 d0           ..      ..
    4ef2:	72 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20     r       .       
    4f02:	10 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20     .       .       
    4f12:	10 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20     .       .       
    4f22:	10 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20     .       .       
    4f32:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f42:	20 20 20 20 20 20 20 20 10 10 10 10 10 10 10 10             ........
    4f52:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f62:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    4f72:	20 20 20 20 20 10 20 20 20 20 20 20 20 20 10 20          .        . 
    4f82:	20 20 20 20 20 20 10 10 20 20 20 20 20 20 20 10           ..       .
    4f92:	10 10 10 10 10 10 20 20 20 20 20 20 20 10 10 10     ......       ...
    4fa2:	20 20 20 20 20 20 20 10 20 20 20 20 10 10 10 20            .    ... 
    4fb2:	20 20 20 20 10 20 20 20 20 20 20 20 10 20 20 20         .       .   
    4fc2:	20 20 20 20 20 10 20 20 10 20 20 20 20 10 10 20          .  .    .. 
    4fd2:	20 10 10 20 20 20 10 10 20 10 10 10 10 10 10 20      ..   .. ...... 
    4fe2:	10 10 10 20 20 20 20 10 20 20 20 20 20 20 10 10     ...    .      ..
    4ff2:	10 20 20 20 10 20 20 20 10 20 20 10 10 20 20 20     .   .   .  ..   
    5002:	10 20 20 10 20 20 10 10 10 20 20 10 10 72 72 72     .  .  ...  ..rrr
    5012:	10 10 10 10 10 20 20 20 20 20 20 20 20 10 10 20     .....        .. 
    5022:	20 20 20 10 10 20 10 10 20 10 20 20 10 10 20 20        .. .. .  ..  
    5032:	20 20 20 20 10 10 10 d0 10 10 10 10 d0 d0 d0 d0         ............
    5042:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72 72 72     ........rrrrrrrr
    5052:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5062:	10 20 20 20 20 20 20 20 10 10 10 20 20 20 20 20     .       ...     
    5072:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5082:	d0 d0 d0 d0 d0 d0 d0 d0 72 72 72 72 72 72 72 72     ........rrrrrrrr
    5092:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    50a2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    50b2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    50c2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    50d2:	72 72 72 72 72 72 d0 d0 20 20 20 20 20 20 10 d0     rrrrrr..      ..
    50e2:	20 20 20 20 20 20 10 d0 20 20 20 20 20 10 d0 d0           ..     ...
    50f2:	d0 72 72 72 72 72 72 20 10 20 20 20 20 20 20 20     .rrrrrr .       
    5102:	10 20 20 20 20 20 20 20 d0 10 20 20 20 20 20 20     .       ..      
    5112:	d0 10 20 20 20 20 20 20 d0 10 20 20 20 20 20 20     ..      ..      
    5122:	d0 d0 10 20 20 20 20 20 d0 d0 10 20 20 20 20 20     ...     ...     
    5132:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5142:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5152:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5162:	20 20 20 20 20 20 20 10 20 20 20 20 20 10 10 10            .     ...
    5172:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5182:	20 20 20 20 20 20 10 10 20 20 20 20 10 10 10 20           ..    ... 
    5192:	20 20 10 10 10 20 20 20 10 10 10 20 20 20 20 20       ...   ...     
    51a2:	10 20 20 20 20 20 20 10 20 20 20 20 20 20 20 10     .      .       .
    51b2:	20 20 10 10 10 10 10 10 10 10 20 20 20 20 20 20       ........      
    51c2:	10 20 10 10 20 20 20 10 20 10 10 20 20 10 20 10     . ..   . ..  . .
    51d2:	20 10 20 20 10 20 20 20 10 20 20 20 10 20 20 20      .  .   .   .   
    51e2:	10 20 20 20 10 20 20 20 20 20 20 20 10 20 20 20     .   .       .   
    51f2:	10 20 20 20 10 10 20 20 10 10 10 10 10 10 20 10     .   ..  ...... .
    5202:	20 20 20 20 10 10 10 10 10 20 20 20 20 20 20 20         .....       
    5212:	10 20 20 20 20 20 20 20 20 10 20 20 20 20 20 20     .        .      
    5222:	20 10 20 20 20 20 20 20 20 20 10 20 20 20 20 20      .        .     
    5232:	20 10 10 10 10 10 10 20 10 10 20 20 20 20 20 20      ...... ..      
    5242:	20 20 20 20 20 20 20 20 10 10 10 20 20 20 20 20             ...     
    5252:	20 20 20 10 10 10 20 20 20 20 20 20 20 20 10 10        ...        ..
    5262:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5272:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5282:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5292:	20 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20             .       
    52a2:	10 10 20 20 20 20 20 20 20 10 10 10 20 20 20 20     ..       ...    
    52b2:	20 20 20 20 20 20 10 d0 20 20 20 20 20 20 10 d0           ..      ..
    52c2:	20 20 20 20 20 20 10 d0 20 20 20 20 20 20 10 d0           ..      ..
    52d2:	20 20 20 20 20 20 10 d0 20 20 20 20 20 10 d0 d0           ..     ...
    52e2:	20 20 20 20 20 10 d0 d0 20 20 20 20 20 10 d0 d0          ...     ...
    52f2:	d0 10 20 20 20 20 20 20 d0 10 20 20 20 20 20 20     ..      ..      
    5302:	d0 10 20 20 20 20 20 20 d0 d0 10 20 20 20 20 20     ..      ...     
    5312:	d0 d0 10 d0 20 20 20 20 d0 d0 d0 10 20 20 20 20     ....    ....    
    5322:	d0 d0 d0 d0 10 20 20 20 d0 d0 d0 d0 d0 10 20 20     .....   ......  
    5332:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 10 10                   ..
    5342:	20 20 20 20 20 10 10 20 20 20 20 10 10 10 20 20          ..    ...  
    5352:	20 20 10 10 20 20 20 20 20 20 20 20 20 20 20 20       ..            
    5362:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5372:	20 10 10 10 20 20 20 20 10 20 20 20 20 20 20 20      ...    .       
    5382:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5392:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    53a2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    53b2:	20 20 20 20 20 20 10 20 20 20 20 20 20 10 20 20           .      .  
    53c2:	20 20 20 20 20 10 20 20 20 20 20 20 10 20 20 20          .      .   
    53d2:	20 20 20 20 10 20 20 20 20 20 20 10 10 20 20 20         .      ..   
    53e2:	20 20 20 10 20 20 20 20 20 20 10 10 20 20 20 20        .      ..    
    53f2:	20 20 10 20 20 10 20 20 20 20 10 20 20 20 10 20       .  .    .   . 
    5402:	20 20 10 20 20 20 10 10 20 20 10 20 20 20 20 10       .   ..  .    .
    5412:	20 20 10 20 20 20 20 10 20 20 10 20 20 20 20 20       .    .  .     
    5422:	20 20 20 10 20 20 20 20 20 20 20 10 20 20 20 20        .       .    
    5432:	20 20 10 10 10 20 20 20 20 20 20 20 10 10 10 20       ...       ... 
    5442:	20 20 20 20 20 20 10 10 20 20 20 20 20 20 20 10           ..       .
    5452:	10 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20     .       .       
    5462:	10 10 20 20 20 20 20 20 20 10 10 20 20 20 20 20     ..       ..     
    5472:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5482:	20 20 20 20 20 20 20 20 10 10 20 20 20 20 20 20             ..      
    5492:	20 10 10 20 20 20 20 20 20 20 10 20 20 20 20 20      ..       .     
    54a2:	20 20 10 10 20 20 20 20 20 20 20 20 20 20 20 20       ..            
    54b2:	20 20 20 20 20 10 d0 d0 20 20 20 20 20 10 d0 d0          ...     ...
    54c2:	20 20 20 20 10 d0 d0 d0 20 20 20 20 10 d0 d0 d0         ....    ....
    54d2:	20 20 20 20 10 d0 d0 d0 20 20 20 20 10 d0 d0 d0         ....    ....
    54e2:	20 20 20 10 d0 d0 d0 d0 20 20 20 10 d0 d0 d0 d0        .....   .....
    54f2:	d0 d0 10 20 20 20 20 20 d0 d0 10 20 20 20 20 20     ...     ...     
    5502:	d0 d0 d0 10 20 20 20 20 d0 d0 d0 10 20 20 20 20     ....    ....    
    5512:	d0 d0 d0 d0 10 20 20 20 d0 d0 d0 d0 10 20 20 20     .....   .....   
    5522:	d0 d0 d0 d0 d0 10 20 20 d0 d0 d0 d0 d0 d0 10 20     ......  ....... 
    5532:	20 20 20 20 10 10 20 20 20 20 20 20 10 20 20 20         ..      .   
    5542:	20 20 20 10 10 20 20 20 20 20 20 20 20 20 20 20        ..           
    5552:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5562:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5572:	20 20 20 20 20 20 10 10 20 20 20 20 20 20 10 20           ..      . 
    5582:	20 20 20 20 20 10 10 20 20 20 20 20 10 10 20 20          ..     ..  
    5592:	20 20 20 20 10 20 20 20 20 20 20 20 20 20 20 20         .           
    55a2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    55b2:	20 20 20 20 10 20 20 20 20 20 20 20 10 20 20 20         .       .   
    55c2:	20 20 20 10 20 20 20 20 20 20 20 10 20 20 20 20        .       .    
    55d2:	20 20 20 10 20 20 20 20 20 20 20 10 20 20 20 20        .       .    
    55e2:	20 20 20 10 20 20 20 20 20 20 20 20 20 20 20 20        .            
    55f2:	20 20 10 20 20 20 20 20 20 20 10 10 20 20 20 20       .       ..    
    5602:	20 20 20 10 20 20 20 20 20 20 20 10 10 20 20 20        .       ..   
    5612:	20 20 20 20 10 20 20 20 20 20 20 20 10 20 20 20         .       .   
    5622:	20 20 20 20 10 10 20 20 20 20 20 20 20 20 20 20         ..          
    5632:	20 20 20 10 10 20 20 20 20 20 20 20 20 20 20 20        ..           
    5642:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5652:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5662:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5672:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5682:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5692:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10                    .
    56a2:	20 20 20 20 20 20 10 10 20 20 20 20 20 10 d0 d0           ..     ...
    56b2:	20 20 20 20 10 d0 d0 d0 20 20 20 20 10 d0 d0 d0         ....    ....
    56c2:	20 20 20 10 d0 d0 d0 d0 20 20 10 d0 d0 d0 d0 d0        .....  ......
    56d2:	d0 10 d0 d0 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0     ................
    56e2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    56f2:	d0 d0 d0 d0 d0 d0 10 10 d0 d0 d0 d0 d0 d0 d0 10     ................
    5702:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5712:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5722:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5732:	20 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20             .       
    5742:	d0 10 20 20 20 20 20 20 d0 d0 10 10 20 20 20 20     ..      ....    
    5752:	d0 d0 d0 d0 10 20 20 20 d0 d0 d0 d0 d0 10 10 20     .....   ....... 
    5762:	d0 d0 d0 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5772:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5782:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5792:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    57a2:	10 10 20 20 20 20 20 20 d0 d0 10 10 20 20 20 20     ..      ....    
    57b2:	20 20 10 20 20 20 20 20 20 20 10 20 20 20 20 20       .       .     
    57c2:	20 10 10 20 20 20 20 20 20 20 20 20 20 20 20 20      ..             
    57d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    57e2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    57f2:	20 20 20 10 20 20 20 20 20 20 20 10 20 20 20 20        .       .    
    5802:	20 20 20 10 20 20 20 20 20 20 20 20 20 20 20 20        .            
    5812:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5822:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5832:	20 20 10 20 20 20 20 20 20 20 20 20 20 20 20 20       .             
    5842:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5852:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5862:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5872:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5882:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5892:	20 20 20 20 20 20 20 10 20 20 20 20 20 20 10 d0            .      ..
    58a2:	20 20 20 20 20 10 d0 d0 20 20 20 20 10 d0 d0 d0          ...    ....
    58b2:	20 20 10 d0 d0 d0 d0 d0 20 20 10 d0 d0 d0 d0 d0       ......  ......
    58c2:	20 10 d0 d0 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0      ...............
    58d2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    58e2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    58f2:	d0 d0 d0 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5902:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5912:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5922:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5932:	20 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20             .       
    5942:	10 20 20 20 20 20 20 20 d0 10 20 20 20 20 20 20     .       ..      
    5952:	d0 d0 10 20 20 20 20 20 d0 d0 d0 10 10 20 20 20     ...     .....   
    5962:	d0 d0 d0 d0 d0 10 10 20 d0 d0 d0 d0 d0 d0 d0 10     ....... ........
    5972:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5982:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5992:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    59a2:	20 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20             .       
    59b2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    59c2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    59d2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10                    .
    59e2:	20 20 20 20 10 10 10 d0 10 10 10 10 d0 d0 d0 d0         ............
    59f2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5a02:	20 20 20 20 20 20 20 20 20 20 20 20 20 10 10 10                  ...
    5a12:	20 20 20 10 10 d0 d0 d0 10 10 10 d0 d0 d0 d0 d0        .............
    5a22:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5a32:	20 20 20 10 10 d0 d0 d0 20 20 10 d0 d0 d0 d0 d0        .....  ......
    5a42:	10 10 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5a52:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5a62:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5a72:	d0 d0 d0 d0 10 10 10 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5a82:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5a92:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5aa2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5ab2:	20 20 20 20 20 20 20 20 10 10 10 20 20 20 20 20             ...     
    5ac2:	d0 d0 d0 10 10 10 10 20 d0 d0 d0 d0 d0 d0 d0 10     ....... ........
    5ad2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5ae2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5af2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5b02:	20 20 20 20 20 20 20 20 10 20 20 20 20 20 20 20             .       
    5b12:	d0 10 10 10 10 10 10 20 d0 d0 d0 d0 d0 d0 d0 10     ....... ........
    5b22:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5b32:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5b42:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5b52:	20 20 20 20 20 20 20 20 10 10 10 10 10 10 10 20             ....... 
    5b62:	d0 d0 d0 d0 d0 d0 d0 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5b72:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5b82:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5b92:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 10                    .
    5ba2:	10 10 10 10 10 10 10 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5bb2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5bc2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5bd2:	20 20 20 20 20 20 20 10 10 10 10 10 10 10 10 d0            .........
    5be2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5bf2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5c02:	20 20 20 20 20 20 10 10 20 20 10 10 10 10 d0 d0           ..  ......
    5c12:	10 10 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5c22:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5c32:	20 20 10 10 d0 d0 d0 d0 10 10 d0 d0 d0 d0 d0 d0       ..............
    5c42:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5c52:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5c62:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5c72:	d0 10 10 10 10 20 20 20 d0 d0 d0 d0 d0 10 10 10     .....   ........
    5c82:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5c92:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5ca2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5cb2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5cc2:	10 10 10 10 10 10 10 10 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5cd2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5ce2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5cf2:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20                     
    5d02:	20 20 20 20 20 20 20 20 10 10 10 10 10 10 10 10             ........
    5d12:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5d22:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5d32:	20 20 20 20 20 20 10 10 10 10 10 10 10 10 d0 d0           ..........
    5d42:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5d52:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5d62:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5d72:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 ff ff d0 d0 d0 d0     ................
    5d82:	d0 d0 ff ff d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................
    5d92:	d0 d0 ff ff d0 d0 d0 d0 d0 d0 ff ff d0 d0 d0 d0     ................
    5da2:	d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0 d0     ................

00005db2 <NumTiles>:
    5db2:	d0 ff ff ff ff ff d0 d0 ff ff d0 d0 ff ff ff d0     ................
    5dc2:	ff ff d0 ff d0 ff ff d0 ff ff ff d0 d0 ff ff d0     ................
    5dd2:	ff ff d0 d0 d0 ff ff d0 ff ff ff ff ff ff ff d0     ................
    5de2:	ff ff ff ff ff ff ff d0 d0 ff ff ff ff ff d0 d0     ................
    5df2:	d0 d0 ff ff ff d0 d0 d0 d0 ff ff ff ff d0 d0 d0     ................
    5e02:	d0 d0 ff ff ff d0 d0 d0 d0 d0 ff ff ff d0 d0 d0     ................
    5e12:	d0 d0 ff ff ff d0 d0 d0 ff ff ff ff ff ff ff d0     ................
    5e22:	ff ff ff ff ff ff ff d0 ff ff ff ff ff ff ff d0     ................
    5e32:	d0 ff ff ff ff ff d0 d0 ff ff d0 d0 d0 ff ff d0     ................
    5e42:	d0 d0 d0 ff ff ff d0 d0 d0 ff ff ff d0 d0 d0 d0     ................
    5e52:	d0 ff ff ff d0 d0 d0 d0 ff ff ff ff ff ff ff d0     ................
    5e62:	ff ff ff ff ff ff ff d0 ff ff ff ff ff ff ff d0     ................
    5e72:	ff ff ff ff ff ff d0 d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5e82:	d0 d0 ff ff ff ff d0 d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5e92:	d0 d0 d0 d0 d0 ff ff d0 ff ff ff ff ff ff ff d0     ................
    5ea2:	ff ff ff ff ff ff ff d0 ff ff ff ff ff ff d0 d0     ................
    5eb2:	ff ff d0 d0 d0 ff ff d0 ff ff d0 d0 d0 ff ff d0     ................
    5ec2:	d0 ff ff ff ff ff ff d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5ed2:	d0 d0 d0 d0 d0 ff ff d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5ee2:	d0 d0 d0 d0 d0 ff ff d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5ef2:	ff ff ff ff ff ff ff d0 ff ff d0 d0 d0 d0 d0 d0     ................
    5f02:	ff ff ff ff ff ff d0 d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5f12:	d0 d0 d0 d0 d0 ff ff d0 ff ff ff ff ff ff ff d0     ................
    5f22:	ff ff ff ff ff ff ff d0 ff ff ff ff ff ff d0 d0     ................
    5f32:	d0 ff ff ff ff ff d0 d0 ff ff d0 d0 d0 d0 d0 d0     ................
    5f42:	ff ff ff ff ff ff d0 d0 ff ff d0 d0 d0 ff ff d0     ................
    5f52:	ff ff d0 d0 d0 ff ff d0 ff ff ff ff ff ff ff d0     ................
    5f62:	ff ff ff ff ff ff ff d0 d0 ff ff ff ff ff d0 d0     ................
    5f72:	ff ff ff ff ff ff ff d0 d0 d0 d0 d0 d0 ff ff d0     ................
    5f82:	d0 d0 d0 d0 ff ff d0 d0 d0 d0 d0 ff ff d0 d0 d0     ................
    5f92:	d0 d0 ff ff d0 d0 d0 d0 d0 d0 ff ff d0 d0 d0 d0     ................
    5fa2:	d0 d0 ff ff d0 d0 d0 d0 d0 d0 ff ff d0 d0 d0 d0     ................
    5fb2:	d0 ff ff ff ff ff d0 d0 ff ff d0 d0 d0 ff ff d0     ................
    5fc2:	d0 ff ff ff ff ff d0 d0 ff ff d0 d0 d0 ff ff d0     ................
    5fd2:	ff ff d0 d0 d0 ff ff d0 ff ff ff ff ff ff ff d0     ................
    5fe2:	ff ff ff ff ff ff ff d0 d0 ff ff ff ff ff d0 d0     ................
    5ff2:	d0 ff ff ff ff ff d0 d0 ff ff d0 d0 d0 ff ff d0     ................
    6002:	d0 ff ff ff ff ff ff d0 d0 d0 d0 d0 d0 ff ff d0     ................
    6012:	d0 d0 d0 d0 d0 ff ff d0 ff ff ff ff ff ff ff d0     ................
    6022:	ff ff ff ff ff ff ff d0 ff ff ff ff ff ff d0 d0     ................

00006032 <MenuTiles>:
    6032:	ea ea ff ff ff ff ff ff ea ff ff ff ff ff ff ff     ................
    6042:	ff ff ff ff 5b 5b 5b 5b ff ff ff 5b 80 80 80 80     ....[[[[...[....
    6052:	ff ff 5b 5b 80 80 80 80 ff ff 5b 80 80 c0 c0 c0     ..[[......[.....
    6062:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    6072:	ff ff ff ff ff ff ea ea ff ff ff ff ff ff ff ea     ................
    6082:	5b 5b 5b 5b ff ff ff ff 80 80 80 80 5b ff ff ff     [[[[........[...
    6092:	80 80 80 80 5b 5b ff ff c0 c0 c0 80 80 5b ff ff     ....[[.......[..
    60a2:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    60b2:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    60c2:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    60d2:	ff ff ff 5b 80 c0 c0 c0 ff ff ff ff ff ff ff ff     ...[............
    60e2:	10 ff ff ff ff ff ff ff 10 20 5b 5b 5b 5b 5b 5b     ......... [[[[[[
    60f2:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    6102:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    6112:	c0 c0 c0 80 5b ff ff ff ff ff ff ff ff ff ff ff     ....[...........
    6122:	ff ff ff ff ff ff ff 20 5b 5b 5b 5b 5b 5b 10 20     ....... [[[[[[. 
    6132:	ff ff 00 80 c0 c0 c0 c0 ff 00 f6 00 c0 c0 c0 c0     ................
    6142:	ff 00 f6 f6 00 c0 c0 c0 ff 00 f6 f6 f6 00 c0 c0     ................
    6152:	ff 00 f6 f6 00 c0 c0 c0 ff 00 f6 00 c0 c0 c0 c0     ................
    6162:	ff ff 00 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..........[.....
    6172:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    6182:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    6192:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    61a2:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    61b2:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    61c2:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    61d2:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    61e2:	ff ff 5b 80 c0 c0 c0 c0 ff ff 5b 80 c0 c0 c0 c0     ..[.......[.....
    61f2:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    6202:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    6212:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    6222:	c0 c0 c0 c0 80 5b ff ff c0 c0 c0 c0 80 5b ff ff     .....[.......[..
    6232:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6242:	5b 5b 5b 5b 5b 5b 5b 5b 80 80 80 80 80 80 80 80     [[[[[[[[........
    6252:	80 80 80 80 80 80 80 80 c0 c0 c0 c0 c0 c0 c0 c0     ................
    6262:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    6272:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    6282:	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0     ................
    6292:	c0 c0 c0 c0 c0 c0 c0 c0 ff ff ff ff ff ff ff ff     ................
    62a2:	ff ff ff ff ff ff ff ff 5b 5b 5b 5b 5b 5b 5b 5b     ........[[[[[[[[

000062b2 <StageMap>:
    62b2:	1e 1a 00 01 00 02 03 02 04 05 06 04 07 08 03 00     ................
    62c2:	03 08 03 00 00 01 00 03 00 03 02 04 00 01 00 03     ................
    62d2:	04 00 03 00 02 00 09 0a 05 09 0b 0c 0d 0e 08 0c     ................
    62e2:	0d 07 03 00 04 02 04 02 00 03 03 00 04 02 02 03     ................
    62f2:	00 02 00 04 0f 10 11 12 0f 0c 0c 0c 0c 0c 0c 0b     ................
    6302:	07 03 02 04 04 00 02 04 00 03 02 04 00 13 07 00     ................
    6312:	04 08 0c 14 14 0f 0c 0c 0c 0c 0c 0c 0c 0f 11 13     ................
    6322:	00 03 02 04 00 03 07 13 00 03 06 05 11 03 08 0c     ................
    6332:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0b 05 06 15     ................
    6342:	03 08 03 00 11 05 06 04 05 0a 0b 0d 0c 0c 0c 0c     ................
    6352:	0c 0c 0c 0c 0c 0c 0c 0c 0c 0c 0f 0a 05 16 08 0c     ................
    6362:	0d 0e 0b 0a 05 06 0b 10 0f 0c 17 0c 0c 0c 0c 0c     ................
    6372:	0c 0c 0c 0c 0c 0c 0c 0c 0c 10 11 14 0c 0c 0c 0c     ................
    6382:	0f 10 0b 12 18 0f 17 0c 19 0c 0c 0c 0c 0c 0c 0c     ................
    6392:	0c 0c 0c 17 0c 0c 0c 14 14 0c 0c 0c 0c 17 0c 0f     ................
    63a2:	18 11 11 0c 19 0c 1a 0c 0c 0c 0c 0c 17 0c 0c 0c     ................
    63b2:	0c 19 0c 0c 0c 0c 0c 0c 0c 0c 0c 19 0c 0c 11 12     ................
    63c2:	14 0c 1a 0c 1b 0c 0c 0c 0c 0c 19 0c 17 0c 0c 1a     ................
    63d2:	0c 0c 0c 0c 0c 17 0c 0c 0c 1a 0c 0c 14 0f 1c 0c     ................
    63e2:	1d 1e 1d 1e 1c 0c 0c 0c 1a 0c 19 0c 1e 1d 1e 1c     ................
    63f2:	0c 0c 0c 19 0c 1c 1e 1d 1e 1f 0c 1c 20 1c 21 22     ............ .!"
    6402:	21 22 20 1c 0c 0c 1b 0c 1a 1c 22 21 22 20 1c 0c     !" ......."!" ..
    6412:	0c 1a 1c 20 22 23 22 21 1c 20 24 25 26 27 28 29     ... "#"!. $%&'()
    6422:	2a 2b 2c 1e 1d 1e 1d 2d 2e 26 2e 2a 2d 1f 1e 1d     *+,....-.&.*-...
    6432:	2d 2a 2f 26 2f 26 30 2a 31 32 31 33 31 33 32 34     -*/&/&0*12131324
    6442:	35 36 21 22 23 37 38 32 38 39 37 21 3a 3b 3c 31     56!"#782897!:;<1
    6452:	32 34 33 31 33 31 32 3d 32 34 3e 34 3d 3f 32 34     2431312=24>4=?24
    6462:	32 3d 32 34 40 3d 3d 3f 32 34 40 34 3e 34 3d 3f     2=24@==?24@4>4=?
    6472:	32 34 32 34 3d 3f 3d 3d 3d 40 41 42 42 43 44 42     2424=?===@ABBCDB
    6482:	43 44 3f 40 44 42 43 44 45 43 46 47 3f 40 3d 40     CD?@DBCDECFG?@=@
    6492:	3d 40 3d 3f 3d 3f 3d 45 48 48 48 48 48 48 48 48     =@=?=?=EHHHHHHHH
    64a2:	49 45 48 48 48 48 48 48 4a 4b 4c 3d 3d 3f 3d 3d     IEHHHHHHJKL==?==
    64b2:	3f 40 44 42 43 48 48 48 48 48 48 48 48 48 48 48     ?@DBCHHHHHHHHHHH
    64c2:	48 48 48 48 48 48 48 48 49 44 42 43 3d 3f 44 43     HHHHHHHHIDBC=?DC
    64d2:	48 48 48 48 4d 4e 4f 50 51 52 53 48 48 48 48 54     HHHHMNOPQRSHHHHT
    64e2:	55 56 57 58 59 5a 5b 5c 48 48 5d 5e 48 48 48 48     UVWXYZ[\HH]^HHHH
    64f2:	5f 60 61 62 61 63 64 61 65 66 67 48 68 69 61 61     _`abacdaefgHhiaa
    6502:	6a 6b 61 6c 61 6d 6e 48 48 48 48 48 48 48 6f 61     jkalamnHHHHHHHoa
    6512:	61 70 71 72 73 74 75 76 77 48 78 79 7a 7b 7c 7d     apqrstuvwHxyz{|}
    6522:	7e 7f 80 61 81 48 48 48 48 48 48 48 82 61 83 83     ~..a.HHHHHHH.a..
    6532:	84 85 86 87 88 88 89 48 8a 61 8b 8c 8d 8e 8f 90     .......H.a......
    6542:	61 61 91 48 48 48 48 48 48 48 92 61 61 93 94 95     aa.HHHHHHH.aa...
    6552:	96 97 98 61 99 48 9a 61 9b 9c 9d 9e 61 9f 61 a0     ...a.H.a....a.a.
    6562:	a1 48 48 48 48 48 48 48 a2 a3 a4 61 61 a5 a6 a7     .HHHHHHH...aa...
    6572:	61 a8 a9 48 aa ab ac 61 61 61 61 ad ae af 48 48     a..H...aaaa...HH
    6582:	48 48 48 48 48 48 48 48 b0 b1 b2 b3 b4 b5 b6 b7     HHHHHHHH........
    6592:	48 48 48 48 b8 b9 ba b9 bb 48 48 48 48 48 48 48     HHHH.....HHHHHHH
    65a2:	48 48 48 48 48 48 48 48 48 48 48 48 48 48 bc 48     HHHHHHHHHHHHHH.H
    65b2:	48 48 48 48 48 48 48 48 48 48 48 48 48 48           HHHHHHHHHHHHHH

000065c0 <SpriteTiles>:
    65c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    65d0:	fe fe fe fe 08 08 f6 08 fe fe fe 08 08 08 08 08     ................
    65e0:	fe 08 08 20 08 08 f6 08 08 20 b3 20 10 08 ff 10     ... ..... . ....
    65f0:	08 20 20 20 20 10 10 20 fe 08 10 10 20 20 20 20     .    .. ....    
    6600:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6610:	fe fe fe fe fe fe fe fe fe 08 08 08 fe fe fe fe     ................
    6620:	08 20 20 20 08 fe fe fe 20 10 10 20 08 fe fe fe     .   .... .. ....
    6630:	b3 b3 20 10 10 08 fe fe 20 20 b3 b3 20 08 fe fe     .. .....  .. ...
    6640:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    6650:	fe fe fe fe 08 08 f6 08 fe fe 08 08 08 08 08 08     ................
    6660:	fe 08 20 b3 08 08 f6 08 08 20 b3 20 10 08 ff 10     .. ...... . ....
    6670:	08 10 10 20 20 10 10 20 fe 08 3f 10 10 20 20 20     ...  .. ..?..   
    6680:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6690:	fe fe fe fe fe fe fe fe 08 08 08 fe fe fe fe fe     ................
    66a0:	b3 b3 20 08 08 fe fe fe 20 20 20 b3 b3 08 fe fe     .. .....   .....
    66b0:	b3 b3 20 20 20 b3 08 fe 20 20 20 b3 20 20 b3 08     ..   ...   .  ..
    66c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    66d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    66e0:	fe fe fe fe 08 08 f6 08 fe fe 08 08 08 08 08 08     ................
    66f0:	fe 08 20 b3 08 08 f6 08 08 20 b3 20 10 08 ff 10     .. ...... . ....
    6700:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6710:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6720:	fe fe fe fe fe fe fe fe 08 08 08 fe fe fe fe fe     ................
    6730:	b3 b3 20 08 08 fe fe fe 20 20 20 b3 b3 08 fe fe     .. .....   .....
    6740:	fe fe 08 3f 10 10 20 20 fe fe fe 08 3f 10 10 10     ...?..  ....?...
    6750:	fe fe fe 08 08 08 20 08 fe fe fe 08 08 20 20 08     ...... ......  .
    6760:	fe fe 08 20 20 20 08 08 fe fe 08 08 08 08 08 20     ...   ......... 
    6770:	fe fe fe fe fe fe 08 08 fe fe fe fe fe fe fe fe     ................
    6780:	10 10 10 20 b3 08 fe fe 20 20 20 10 20 20 08 fe     ... ....   .  ..
    6790:	20 20 20 20 20 b3 08 fe 20 20 20 20 20 20 08 fe          ...      ..
    67a0:	08 20 20 20 08 20 b3 08 20 20 20 20 08 08 08 fe     .   . ..    ....
    67b0:	08 08 08 08 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    67c0:	fe fe 08 3f 10 10 10 10 fe fe fe 08 20 20 10 10     ...?........  ..
    67d0:	fe 08 08 20 20 08 08 20 08 20 20 08 08 fe fe 08     ...  .. .  .....
    67e0:	08 08 08 fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    67f0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6800:	10 10 10 20 20 20 20 08 10 10 20 20 20 10 10 08     ...    ...   ...
    6810:	20 20 20 20 10 10 08 fe 08 20 20 20 20 20 08 fe         .....     ..
    6820:	fe 08 20 20 08 20 20 08 fe fe 08 08 08 20 20 08     ..  .  ......  .
    6830:	fe fe fe fe fe 08 20 08 fe fe fe fe fe fe 08 08     ...... .........
    6840:	08 10 10 20 20 10 10 20 fe 08 3f 10 10 20 20 20     ...  .. ..?..   
    6850:	fe fe 08 3f 10 10 10 10 fe fe fe 08 10 20 10 10     ...?......... ..
    6860:	fe fe fe fe fe 10 10 10 fe fe fe fe fe fe fe fe     ................
    6870:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6880:	b3 b3 20 20 20 b3 08 fe 20 20 20 b3 20 20 b3 08     ..   ...   .  ..
    6890:	10 10 10 20 20 20 20 08 10 10 20 20 20 10 10 fe     ...    ...   ...
    68a0:	10 10 10 10 10 fe fe fe fe fe fe fe fe fe fe fe     ................
    68b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    68c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    68d0:	fe fe fe fe 08 08 f6 08 fe fe fe 08 08 08 08 08     ................
    68e0:	fe 08 08 18 08 08 f6 08 08 18 b3 18 10 08 ff 10     ................
    68f0:	08 18 18 18 18 10 10 18 fe 08 10 10 18 18 18 18     ................
    6900:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6910:	fe fe fe fe fe fe fe fe fe 08 08 08 fe fe fe fe     ................
    6920:	08 18 18 18 08 fe fe fe 18 10 10 18 08 fe fe fe     ................
    6930:	b3 b3 18 10 10 08 fe fe 18 18 b3 b3 18 08 fe fe     ................
    6940:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    6950:	fe fe fe fe 08 08 f6 08 fe fe 08 08 08 08 08 08     ................
    6960:	fe 08 18 b3 08 08 f6 08 08 18 b3 18 10 08 ff 10     ................
    6970:	08 10 10 18 18 10 10 18 fe 08 3f 10 10 18 18 18     ..........?.....
    6980:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6990:	fe fe fe fe fe fe fe fe 08 08 08 fe fe fe fe fe     ................
    69a0:	b3 b3 18 08 08 fe fe fe 18 18 18 b3 b3 08 fe fe     ................
    69b0:	b3 b3 18 18 18 b3 08 fe 18 18 18 b3 18 18 b3 08     ................
    69c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    69d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    69e0:	fe fe fe fe 08 08 f6 08 fe fe 08 08 08 08 08 08     ................
    69f0:	fe 08 18 b3 08 08 f6 08 08 18 b3 18 10 08 ff 10     ................
    6a00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6a10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6a20:	fe fe fe fe fe fe fe fe 08 08 08 fe fe fe fe fe     ................
    6a30:	b3 b3 18 08 08 fe fe fe 18 18 18 b3 b3 08 fe fe     ................
    6a40:	fe fe 08 3f 10 10 18 18 fe fe fe 08 3f 10 10 10     ...?........?...
    6a50:	fe fe fe 08 08 08 18 08 fe fe fe 08 08 18 18 08     ................
    6a60:	fe fe 08 18 18 18 08 08 fe fe 08 08 08 08 08 18     ................
    6a70:	fe fe fe fe fe fe 08 08 fe fe fe fe fe fe fe fe     ................
    6a80:	10 10 10 18 b3 08 fe fe 18 18 18 10 18 18 08 fe     ................
    6a90:	18 18 18 18 18 b3 08 fe 18 18 18 18 18 18 08 fe     ................
    6aa0:	08 18 18 18 08 18 b3 08 18 18 18 18 08 08 08 fe     ................
    6ab0:	08 08 08 08 fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6ac0:	fe fe 08 3f 10 10 10 10 fe fe fe 08 18 18 10 10     ...?............
    6ad0:	fe 08 08 18 18 08 08 18 08 18 18 08 08 fe fe 08     ................
    6ae0:	08 08 08 fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6af0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6b00:	10 10 10 18 18 18 18 08 10 10 18 18 18 10 10 08     ................
    6b10:	18 18 18 18 10 10 08 fe 08 18 18 18 18 18 08 fe     ................
    6b20:	fe 08 18 18 08 18 18 08 fe fe 08 08 08 18 18 08     ................
    6b30:	fe fe fe fe fe 08 18 08 fe fe fe fe fe fe 08 08     ................
    6b40:	08 10 10 18 18 10 10 18 fe 08 3f 10 10 18 18 18     ..........?.....
    6b50:	fe fe 08 3f 10 10 10 10 fe fe fe 08 10 18 10 10     ...?............
    6b60:	fe fe fe fe fe 10 10 10 fe fe fe fe fe fe fe fe     ................
    6b70:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6b80:	b3 b3 18 18 18 b3 08 fe 18 18 18 b3 18 18 b3 08     ................
    6b90:	10 10 10 18 18 18 18 08 10 10 18 18 18 10 10 fe     ................
    6ba0:	10 10 10 10 10 fe fe fe fe fe fe fe fe fe fe fe     ................
    6bb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6bc0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6bd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe 08 fe     ................
    6be0:	fe fe fe fe fe 08 07 08 fe fe fe fe fe fe 08 07     ................
    6bf0:	fe fe fe fe fe fe fe 08 fe fe fe fe fe fe fe fe     ................
    6c00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6c10:	fe fe fe fe fe fe fe fe fe fe fe fe 08 fe fe fe     ................
    6c20:	fe fe fe 08 07 08 08 08 fe fe fe fe 08 07 07 07     ................
    6c30:	fe fe fe fe fe 08 08 08 fe fe fe fe fe fe fe fe     ................
    6c40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6c50:	fe fe fe fe fe fe fe fe fe fe 08 fe fe fe fe fe     ................
    6c60:	fe 08 07 08 08 08 08 08 fe fe 08 07 07 07 07 07     ................
    6c70:	fe fe fe 08 08 08 08 08 fe fe fe fe fe fe fe fe     ................
    6c80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6c90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6ca0:	fe fe fe fe fe fe fe 08 fe fe fe fe fe fe fe fe     ................
    6cb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6cc0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6cd0:	fe fe fe fe fe fe fe fe 08 fe fe fe fe fe fe fe     ................
    6ce0:	07 08 08 08 08 08 08 08 08 07 07 07 07 07 07 07     ................
    6cf0:	fe 08 08 08 08 08 08 08 fe fe fe fe fe fe fe fe     ................
    6d00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6d10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6d20:	fe fe fe fe fe fe ca ca fe fe fe fe ca ca fe fe     ................
    6d30:	fe fe fe ca fe fe fe ca fe fe ca fe fe fe ca ca     ................
    6d40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6d50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6d60:	ca fe fe fe fe fe fe fe fe fe ca ca ca ca ca fe     ................
    6d70:	ca ca fe fe fe fe fe ca fe fe fe ca ca ca fe fe     ................
    6d80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6d90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6da0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6db0:	ca ca fe fe fe fe fe fe fe fe ca fe fe fe fe fe     ................
    6dc0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6dd0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6de0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe ca ca     ................
    6df0:	fe fe fe fe fe fe fe fe fe fe fe fe ca fe fe fe     ................
    6e00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6e10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6e20:	ca ca ca ca ca ca ca ca fe fe fe fe fe fe fe fe     ................
    6e30:	fe fe ca ca ca ca ca ca ca ca fe fe fe fe fe fe     ................
    6e40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6e50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6e60:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6e70:	ca fe fe fe fe fe fe fe ca fe ca fe fe fe fe fe     ................
    6e80:	fe fe ca fe fe fe ca fe fe fe fe fe fe fe ca fe     ................
    6e90:	fe fe fe fe fe fe fe ca fe fe fe fe fe fe fe fe     ................
    6ea0:	ca fe fe fe fe fe fe fe fe ca ca fe fe fe fe fe     ................
    6eb0:	fe fe fe ca ca ca fe fe fe fe fe fe fe fe fe fe     ................
    6ec0:	fe ca ca ca ca ca ca fe fe fe fe ca ca ca fe fe     ................
    6ed0:	ca fe fe fe fe fe fe fe ca ca ca ca ca ca ca ca     ................
    6ee0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6ef0:	fe fe fe fe fe fe fe fe ca ca ca ca ca ca ca ca     ................
    6f00:	fe fe ca fe fe fe fe fe fe fe ca fe fe fe fe fe     ................
    6f10:	ca ca fe fe fe fe fe fe fe fe fe fe fe fe ca fe     ................
    6f20:	fe fe fe fe fe fe ca fe fe fe fe fe fe ca fe fe     ................
    6f30:	fe fe ca ca ca fe fe fe ca ca fe fe fe fe fe fe     ................
    6f40:	fe fe fe fe ca fe fe fe fe fe fe ca fe fe fe fe     ................
    6f50:	fe fe fe ca fe fe fe fe fe fe fe fe ca fe fe fe     ................
    6f60:	fe fe fe fe fe ca ca ca fe fe fe fe fe fe fe fe     ................
    6f70:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6f80:	ca ca fe fe fe fe fe fe fe ca ca ca ca ca ca fe     ................
    6f90:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6fa0:	fe fe fe fe fe fe fe fe ca ca ca ca ca ca ca ca     ................
    6fb0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    6fc0:	fe fe ca fe fe fe fe fe fe ca fe fe fe fe fe fe     ................
    6fd0:	fe fe fe fe fe fe fe fe fe fe fe fe ca fe fe fe     ................
    6fe0:	ca ca ca fe fe fe fe fe ca fe fe fe fe fe fe fe     ................
    6ff0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7000:	fe fe fe fe fe fe fe fe fe ad ad fe fe ad ad fe     ................
    7010:	ad ff ff fe fe ff ff ad ad ff ff fe fe ff ff ad     ................
    7020:	fe ad ff fe fe ff ad fe fe fe ad 00 00 ad fe fe     ................
    7030:	fe fe fe 00 00 fe fe fe fe fe fe fe fe fe fe fe     ................
    7040:	fe fe fe fe fe fe fe fe fe fe fe 00 00 fe fe fe     ................
    7050:	fe fe ad 00 00 ad fe fe fe ad ff fe fe ff ad fe     ................
    7060:	ad ff ff fe fe ff ff ad ad ff ff fe fe ff ff ad     ................
    7070:	fe ad ad fe fe ad ad fe fe fe fe fe fe fe fe fe     ................
    7080:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    7090:	fe fe fe fe 08 08 20 08 fe fe fe 08 08 08 08 08     ...... .........
    70a0:	fe 08 08 20 08 08 20 08 08 20 b3 20 10 08 08 10     ... .. .. . ....
    70b0:	08 20 20 20 20 10 10 20 fe 08 10 10 20 20 20 20     .    .. ....    
    70c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    70d0:	fe fe fe fe 08 08 20 08 fe fe 08 08 08 08 08 08     ...... .........
    70e0:	fe 08 20 b3 08 08 20 08 08 20 b3 20 10 08 08 10     .. ... .. . ....
    70f0:	08 10 10 20 20 10 10 20 fe 08 3f 10 10 20 20 20     ...  .. ..?..   
    7100:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7110:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    7120:	fe fe fe fe 08 08 20 08 fe fe 08 08 08 08 08 08     ...... .........
    7130:	fe 08 20 b3 08 08 20 08 08 20 b3 20 10 08 08 10     .. ... .. . ....
    7140:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    7150:	fe fe fe fe 08 08 18 08 fe fe fe 08 08 08 08 08     ................
    7160:	fe 08 08 18 08 08 18 08 08 18 b3 18 10 08 08 10     ................
    7170:	08 18 18 18 18 10 10 18 fe 08 10 10 18 18 18 18     ................
    7180:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    7190:	fe fe fe fe 08 08 18 08 fe fe 08 08 08 08 08 08     ................
    71a0:	fe 08 18 b3 08 08 18 08 08 18 b3 18 10 08 08 10     ................
    71b0:	08 10 10 18 18 10 10 18 fe 08 3f 10 10 18 18 18     ..........?.....
    71c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    71d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    71e0:	fe fe fe fe 08 08 18 08 fe fe 08 08 08 08 08 08     ................
    71f0:	fe 08 18 b3 08 08 18 08 08 18 b3 18 10 08 08 10     ................
    7200:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7210:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7220:	08 08 08 08 08 08 08 08 07 07 07 07 07 07 07 07     ................
    7230:	08 08 08 08 08 08 08 08 fe fe fe fe fe fe fe fe     ................
    7240:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7250:	fe ff fe fe fe fe fe fe ff ff ff fe 08 08 fe fe     ................
    7260:	fe ff fe fe 08 20 08 fe fe fe fe 08 08 08 08 08     ..... ..........
    7270:	fe 08 08 08 08 20 08 20 08 08 20 08 08 08 10 b3     ..... . .. .....
    7280:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7290:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    72a0:	fe 08 08 08 ff fe fe fe 08 20 20 ff ff ff fe fe     .........  .....
    72b0:	20 08 08 20 ff fe fe fe 20 b3 20 08 08 08 fe fe      .. .... . .....
    72c0:	fe fe fe fe fe fe ff fe fe fe fe fe fe ff ff ff     ................
    72d0:	fe fe fe fe fe fe ff fe fe fe fe fe 08 08 fe fe     ................
    72e0:	fe fe fe fe 08 20 08 fe fe fe fe 08 08 08 08 08     ..... ..........
    72f0:	fe 08 08 08 08 20 08 ff 08 08 20 08 08 08 10 b3     ..... .... .....
    7300:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7310:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7320:	fe 08 08 08 fe fe fe fe ff 20 20 20 08 fe fe fe     .........   ....
    7330:	ff ff 08 20 08 fe fe fe ff b3 20 08 08 08 fe fe     ... ...... .....
    7340:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7350:	fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe fe     ................
    7360:	fe fe fe fe 08 20 08 fe fe ff fe 08 08 08 08 08     ..... ..........
    7370:	ff ff ff 08 08 20 08 20 08 ff 20 08 08 08 10 b3     ..... . .. .....
    7380:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7390:	fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe fe     ................
    73a0:	fe 08 ff 08 fe fe fe fe 08 20 20 20 08 fe fe fe     .........   ....
    73b0:	20 08 08 20 08 fe fe fe 20 b3 20 08 08 08 fe fe      .. .... . .....
    73c0:	08 b3 20 10 10 10 20 20 08 20 20 20 10 20 20 20     .. ...  .   .   
    73d0:	08 10 3f 10 10 10 10 10 fe 08 08 3f 10 20 20 08     ..?........?.  .
    73e0:	fe fe 08 08 08 20 20 08 fe fe 08 08 20 20 08 08     .....  .....  ..
    73f0:	fe 08 20 20 20 20 08 20 fe 08 08 08 08 08 08 08     ..    . ........
    7400:	20 20 b3 b3 20 08 fe fe 10 10 10 20 b3 08 fe fe       .. ...... ....
    7410:	20 20 20 10 20 20 08 fe 20 20 20 20 20 b3 08 fe        .  ..     ...
    7420:	20 20 20 20 20 20 08 fe 08 20 20 20 08 20 b3 08           ...   . ..
    7430:	20 20 20 20 08 08 08 fe 08 08 08 08 fe fe fe fe         ............
    7440:	fe fe fe 08 08 fe fe fe fe fe 08 59 b4 08 08 08     ...........Y....
    7450:	fe fe 08 08 08 08 20 20 fe fe 08 08 f6 08 08 b3     ......  ........
    7460:	fe 08 19 08 08 10 20 20 08 b3 21 10 10 20 20 08     ......  ..!..  .
    7470:	10 20 20 20 20 20 20 08 08 20 10 10 10 10 19 20     .      .. ..... 
    7480:	08 08 08 fe fe fe fe fe 20 20 b3 08 fe fe fe fe     ........  ......
    7490:	b3 b3 20 b3 08 fe fe fe 20 20 20 20 b3 08 fe fe     .. .....    ....
    74a0:	b3 b3 20 20 20 b3 08 fe 20 20 20 20 20 20 08 fe     ..   ...      ..
    74b0:	20 20 08 20 20 20 08 08 20 20 00 21 20 08 20 08       .   ..  .! . .
    74c0:	fe fe fe 08 10 08 fe 08 fe fe 08 20 20 20 08 20     ...........   . 
    74d0:	fe fe fe 08 20 08 3f 10 fe 08 20 08 08 3f 3f 10     .... .?... ..??.
    74e0:	08 20 20 08 08 3f 3f 10 fe 08 20 20 08 3f 3f 10     .  ..??...  .??.
    74f0:	fe fe 08 20 20 08 10 08 fe fe fe 08 08 20 20 20     ...  ........   
    7500:	10 08 fe fe fe fe fe fe 20 b3 08 fe fe fe fe fe     ........ .......
    7510:	20 21 19 08 08 08 fe fe 20 10 08 08 08 59 08 fe      !...... ....Y..
    7520:	20 10 08 f6 08 b4 08 fe 20 20 10 08 08 08 fe fe      .......  ......
    7530:	20 20 20 08 20 08 fe fe 08 08 20 b3 20 08 fe fe        . ..... . ...
    7540:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7550:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    7560:	fe fe fe fe 08 ac ac 08 fe fe fe fe 10 ff 08 20     ............... 
    7570:	fe fe fe 08 10 ff 08 b3 fe fe fe 08 20 20 20 20     ............    
    7580:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7590:	fe fe fe fe fe fe fe fe fe 08 08 fe fe fe fe fe     ................
    75a0:	08 ac ac 08 fe fe fe fe 20 08 ff 10 fe fe fe fe     ........ .......
    75b0:	b3 08 ff 10 08 fe fe fe 20 20 20 20 08 fe fe fe     ........    ....
    75c0:	fe 08 3f 3f 3f 3f 10 20 08 20 08 3f 3f 3f 08 20     ..????. . .???. 
    75d0:	20 20 20 08 08 08 20 08 08 20 08 08 08 20 20 08        ... .. ...  .
    75e0:	fe 08 fe 20 20 20 08 fe fe fe fe 08 20 08 fe fe     ...   ...... ...
    75f0:	fe fe fe fe 08 fe fe fe fe fe fe fe fe fe fe fe     ................
    7600:	20 00 3f 08 08 20 20 08 08 3f 08 08 fe 08 20 08      .?..  ..?.... .
    7610:	08 08 fe fe fe fe 08 fe fe fe fe fe fe fe fe fe     ................
    7620:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7630:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7640:	fe fe fe fe 08 08 20 20 fe fe fe fe 08 10 08 20     ......  ....... 
    7650:	fe fe fe fe 08 10 3f 08 fe fe fe fe 08 3f 08 21     ......?......?.!
    7660:	fe fe fe fe fe 08 08 20 fe fe fe fe 08 10 20 20     ....... ......  
    7670:	fe fe fe 08 20 20 20 20 fe fe fe fe 08 08 08 08     ....    ........
    7680:	20 20 b3 20 b3 20 08 fe 20 20 b3 20 b3 20 08 fe       . . ..  . . ..
    7690:	08 20 20 20 20 b3 08 fe 20 20 20 b3 20 08 fe fe     .    ...   . ...
    76a0:	20 20 20 b3 08 fe fe fe 20 20 b3 08 fe fe fe fe        .....  ......
    76b0:	20 08 08 fe fe fe fe fe 08 fe fe fe fe fe fe fe      ...............
    76c0:	fe fe 08 08 10 20 20 20 fe 08 20 08 20 10 10 10     .....   .. . ...
    76d0:	fe 08 21 21 10 3f 3f 3f fe 08 20 08 08 3f 3f 3f     ..!!.???.. ..???
    76e0:	fe fe 08 20 20 10 3f 3f fe fe 08 20 21 20 3f 3f     ...  .??... ! ??
    76f0:	fe 08 20 20 21 08 20 20 fe 08 08 08 08 fe 08 08     ..  !.  ........
    7700:	20 20 20 10 08 08 fe fe 10 10 10 20 08 20 08 fe        ........ . ..
    7710:	3f 3f 3f 10 21 21 08 fe 3f 3f 3f 08 08 20 08 fe     ???.!!..???.. ..
    7720:	3f 3f 10 20 20 08 fe fe 3f 3f 20 21 20 08 fe fe     ??.  ...?? ! ...
    7730:	20 20 08 21 20 20 08 fe 08 08 fe 08 08 08 08 fe       .!  ..........
    7740:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7750:	fe ff fe fe fe fe fe fe ff ff ff fe 08 08 fe fe     ................
    7760:	fe ff fe fe 08 18 08 fe fe fe fe 08 08 08 08 08     ................
    7770:	fe 08 08 08 08 18 08 18 08 08 18 08 08 08 10 b3     ................
    7780:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7790:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    77a0:	fe 08 08 08 ff fe fe fe 08 18 18 ff ff ff fe fe     ................
    77b0:	18 08 08 18 ff fe fe fe 18 b3 18 08 08 08 fe fe     ................
    77c0:	fe fe fe fe fe fe ff fe fe fe fe fe fe ff ff ff     ................
    77d0:	fe fe fe fe fe fe ff fe fe fe fe fe 08 08 fe fe     ................
    77e0:	fe fe fe fe 08 18 08 fe fe fe fe 08 08 08 08 08     ................
    77f0:	fe 08 08 08 08 18 08 ff 08 08 18 08 08 08 10 b3     ................
    7800:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7810:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7820:	fe 08 08 08 fe fe fe fe ff 18 18 18 08 fe fe fe     ................
    7830:	ff ff 08 18 08 fe fe fe ff b3 18 08 08 08 fe fe     ................
    7840:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7850:	fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe fe     ................
    7860:	fe fe fe fe 08 18 08 fe fe ff fe 08 08 08 08 08     ................
    7870:	ff ff ff 08 08 18 08 18 08 ff 18 08 08 08 10 b3     ................
    7880:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7890:	fe fe ff fe fe fe fe fe fe ff ff ff fe fe fe fe     ................
    78a0:	fe 08 ff 08 fe fe fe fe 08 18 18 18 08 fe fe fe     ................
    78b0:	18 08 08 18 08 fe fe fe 18 b3 18 08 08 08 fe fe     ................
    78c0:	08 b3 18 10 10 10 18 18 08 18 18 18 10 18 18 18     ................
    78d0:	08 10 3f 10 10 10 10 10 fe 08 08 3f 10 18 18 08     ..?........?....
    78e0:	fe fe 08 08 08 18 18 08 fe fe 08 08 18 18 08 08     ................
    78f0:	fe 08 18 18 18 18 08 18 fe 08 08 08 08 08 08 08     ................
    7900:	18 18 b3 b3 18 08 fe fe 10 10 10 18 b3 08 fe fe     ................
    7910:	18 18 18 10 18 18 08 fe 18 18 18 18 18 b3 08 fe     ................
    7920:	18 18 18 18 18 18 08 fe 08 18 18 18 08 18 b3 08     ................
    7930:	18 18 18 18 08 08 08 fe 08 08 08 08 fe fe fe fe     ................
    7940:	fe fe fe 08 08 fe fe fe fe fe 08 59 b4 08 08 08     ...........Y....
    7950:	fe fe 08 08 08 08 18 18 fe fe 08 08 f6 08 08 b3     ................
    7960:	fe 08 19 08 08 10 18 18 08 b3 18 10 10 18 18 08     ................
    7970:	10 18 18 18 18 18 18 08 08 18 10 10 10 10 18 18     ................
    7980:	08 08 08 fe fe fe fe fe 18 18 b3 08 fe fe fe fe     ................
    7990:	b3 b3 18 b3 08 fe fe fe 18 18 18 18 b3 08 fe fe     ................
    79a0:	b3 b3 18 18 18 b3 08 fe 18 18 18 18 18 18 08 fe     ................
    79b0:	18 18 08 18 18 18 08 08 18 18 00 18 18 08 18 08     ................
    79c0:	fe fe fe 08 10 08 fe 08 fe fe 08 18 18 18 08 18     ................
    79d0:	fe fe fe 08 18 08 3f 10 fe 08 18 08 08 3f 3f 10     ......?......??.
    79e0:	08 18 18 08 08 3f 3f 10 fe 08 18 18 08 3f 3f 10     .....??......??.
    79f0:	fe fe 08 18 18 08 10 08 fe fe fe 08 08 18 18 18     ................
    7a00:	10 08 fe fe fe fe fe fe 18 b3 08 fe fe fe fe fe     ................
    7a10:	18 18 19 08 08 08 fe fe 18 10 08 08 08 59 08 fe     .............Y..
    7a20:	18 10 08 f6 08 b4 08 fe 18 18 10 08 08 08 fe fe     ................
    7a30:	18 18 18 08 18 08 fe fe 08 08 18 b3 18 08 fe fe     ................
    7a40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7a50:	fe fe fe fe fe fe fe fe fe fe fe fe fe 08 08 fe     ................
    7a60:	fe fe fe fe 08 ac ac 08 fe fe fe fe 10 ff 08 18     ................
    7a70:	fe fe fe 08 10 ff 08 b3 fe fe fe 08 18 18 18 18     ................
    7a80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7a90:	fe fe fe fe fe fe fe fe fe 08 08 fe fe fe fe fe     ................
    7aa0:	08 ac ac 08 fe fe fe fe 18 08 ff 10 fe fe fe fe     ................
    7ab0:	b3 08 ff 10 08 fe fe fe 18 18 18 18 08 fe fe fe     ................
    7ac0:	fe 08 3f 3f 3f 3f 10 18 08 18 08 3f 3f 3f 08 18     ..????.....???..
    7ad0:	18 18 18 08 08 08 18 08 08 18 08 08 08 18 18 08     ................
    7ae0:	fe 08 fe 18 18 18 08 fe fe fe fe 08 18 08 fe fe     ................
    7af0:	fe fe fe fe 08 fe fe fe fe fe fe fe fe fe fe fe     ................
    7b00:	18 00 3f 08 08 18 18 08 08 3f 08 08 fe 08 18 08     ..?......?......
    7b10:	08 08 fe fe fe fe 08 fe fe fe fe fe fe fe fe fe     ................
    7b20:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7b30:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    7b40:	fe fe fe fe 08 08 18 18 fe fe fe fe 08 10 08 18     ................
    7b50:	fe fe fe fe 08 10 3f 08 fe fe fe fe 08 3f 08 18     ......?......?..
    7b60:	fe fe fe fe fe 08 08 18 fe fe fe fe 08 10 18 18     ................
    7b70:	fe fe fe 08 18 18 18 18 fe fe fe fe 08 08 08 08     ................
    7b80:	18 18 b3 18 b3 18 08 fe 18 18 b3 18 b3 18 08 fe     ................
    7b90:	08 18 18 18 18 b3 08 fe 18 18 18 b3 18 08 fe fe     ................
    7ba0:	18 18 18 b3 08 fe fe fe 18 18 b3 08 fe fe fe fe     ................
    7bb0:	18 08 08 fe fe fe fe fe 08 fe fe fe fe fe fe fe     ................
    7bc0:	fe fe 08 08 10 18 18 18 fe 08 18 08 18 10 10 10     ................
    7bd0:	fe 08 18 21 10 3f 3f 3f fe 08 18 08 08 3f 3f 3f     ...!.???.....???
    7be0:	fe fe 08 18 18 10 3f 3f fe fe 08 18 21 18 3f 3f     ......??....!.??
    7bf0:	fe 08 18 18 21 08 18 18 fe 08 08 08 08 fe 08 08     ....!...........
    7c00:	18 18 18 10 08 08 fe fe 10 10 10 18 08 18 08 fe     ................
    7c10:	3f 3f 3f 10 21 18 08 fe 3f 3f 3f 08 08 18 08 fe     ???.!...???.....
    7c20:	3f 3f 10 18 18 08 fe fe 3f 3f 18 21 18 08 fe fe     ??......??.!....
    7c30:	18 18 08 21 18 18 08 fe 08 08 fe 08 08 08 08 fe     ...!............

00007c40 <compfont>:
    7c40:	30 30 30 30 30 00 30 30 38 7c 6c c6 c6 de de de     00000.008|l.....
    7c50:	f8 cc f8 cc ce fe fe fc 7c c6 c0 c6 c6 fe fe 7c     ........|......|
    7c60:	f8 cc c6 c6 c6 fe fe fc 7e c0 f8 c0 c0 fe fe 7e     ........~......~
    7c70:	7e c0 f8 c0 c0 c0 c0 c0 7c c0 ce c6 c6 fe fe 7c     ~.......|......|
    7c80:	c6 c6 fe c6 c6 c6 c6 c6 fe 38 38 38 38 fe fe fe     .........8888...
    7c90:	06 06 06 c6 c6 fe fe 7c cc d8 f0 d8 cc cc c6 c6     .......|........
    7ca0:	c0 c0 c0 c0 c0 fe fe 7e c6 ee fe d6 c6 c6 c6 c6     .......~........
    7cb0:	c6 e6 f6 de ce c6 c6 c6 7c c6 c6 c6 c6 fe fe 7c     ........|......|
    7cc0:	fc c6 fc c0 c0 c0 c0 c0 7c c6 c6 c6 d6 fc fe 76     ........|......v
    7cd0:	fc c6 fc c6 c6 c6 c6 c6 7c c0 7c 06 06 fe fe fc     ........|.|.....
    7ce0:	fe 38 38 38 38 38 38 38 c6 c6 c6 c6 c6 fe fe 7c     .8888888.......|
    7cf0:	c6 c6 c6 ee 6c 7c 38 38 c6 c6 c6 d6 d6 fe ee c6     ....l|88........
    7d00:	c6 6c 38 6c c6 c6 c6 c6 c6 c6 7c 38 38 38 38 38     .l8l......|88888
    7d10:	fe 1c 38 70 60 fe fe fe 7c ce d6 e6 c6 fe fe 7c     ..8p`...|......|
    7d20:	38 78 38 38 38 fe fe fe 7c c6 1c 30 70 fe fe fe     8x888...|..0p...
    7d30:	fc 06 3c 06 06 fe fe fc c6 c6 7e 06 06 06 06 06     ..<.......~.....
    7d40:	fe c0 fc 06 06 fe fe fc 7c c0 fc c6 c6 fe fe 7c     ........|......|
    7d50:	fe 06 0c 18 30 30 30 30 7c c6 7c c6 c6 fe fe 7c     ....0000|.|....|
    7d60:	7c c6 7e 06 06 fe fe fc 00 30 30 00 30 30 00 00     |.~......00.00..
    7d70:	00 36 7f 7f 3e 1c 08 00 00 00 00 00 00 00 00 00     .6..>...........

00007d80 <charlist>:
    7d80:	21 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f     !ABCDEFGHIJKLMNO
    7d90:	50 51 52 53 54 55 56 57 58 59 5a 30 31 32 33 34     PQRSTUVWXYZ01234
    7da0:	35 36 37 38 39 3a 2a 20 00                          56789:* .

00007da9 <HighScoreTiles>:
    7da9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7db9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7dc9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7dd9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7de9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7df9:	69 69 69 69 69 69 00 00 69 69 69 69 69 00 bb bb     iiiiii..iiiii...
    7e09:	69 69 69 69 00 bb bb bb 69 69 69 00 bb bb bb bb     iiii....iii.....
    7e19:	69 69 00 bb bb bb bb bb 69 00 bb bb bb bb bb bb     ii......i.......
    7e29:	69 69 00 00 00 00 00 69 00 08 bb bb bb bb bb 00     ii.....i........
    7e39:	bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb     ................
    7e49:	bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb 00     ................
    7e59:	bb bb bb bb bb bb 00 00 bb bb bb bb bb 00 bb bb     ................
    7e69:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7e79:	00 69 69 69 69 00 00 00 00 69 69 00 00 bb bb bb     .iiii....ii.....
    7e89:	00 00 00 bb bb bb bb bb 00 bb bb bb bb bb bb bb     ................
    7e99:	bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb     ................
    7ea9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7eb9:	00 00 00 00 00 69 69 69 bb bb bb bb bb 00 69 69     .....iii......ii
    7ec9:	bb bb bb bb bb bb 00 69 bb bb bb bb bb bb bb 00     .......i........
    7ed9:	bb bb bb bb bb bb bb 00 bb bb bb bb bb bb bb 00     ................
    7ee9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    7ef9:	69 69 69 69 69 69 69 00 69 69 69 69 69 69 69 00     iiiiiii.iiiiiii.
    7f09:	69 69 69 69 69 69 00 bb 69 69 69 69 69 69 00 bb     iiiiii..iiiiii..
    7f19:	69 69 69 69 69 00 b3 bb 69 69 69 69 69 00 bb bb     iiiii...iiiii...
    7f29:	00 00 bb bb bb bb bb bb 00 bb bb bb bb bb bb bb     ................
    7f39:	bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb bb     ................
    7f49:	bb bb bb bb bb 00 00 bb bb bb bb bb 00 00 bb bb     ................
    7f59:	bb bb 00 00 00 00 bb 00 bb 00 00 00 00 08 59 00     ..............Y.
    7f69:	bb bb bb bb 00 bb bb bb bb bb bb 00 b3 bb bb bb     ................
    7f79:	bb b3 00 bb bb 00 00 00 bb 00 bb 00 00 00 00 00     ................
    7f89:	00 b3 00 00 00 00 bb 00 00 bb 00 00 00 bb 51 00     ..............Q.
    7f99:	bb 00 00 00 62 bb 00 62 bb 00 00 00 bb 00 bb bb     ....b..b........
    7fa9:	00 bb bb bb bb bb bb bb 00 bb bb bb bb bb bb bb     ................
    7fb9:	00 00 00 00 00 00 08 bb 00 00 00 00 00 00 00 00     ................
    7fc9:	00 00 08 bb 00 00 00 00 00 bb bb 00 00 00 00 00     ................
    7fd9:	bb aa 00 00 00 00 00 00 00 00 00 00 00 00 00 bb     ................
    7fe9:	bb bb bb bb bb bb bb 00 bb bb bb bb bb bb 00 69     ...............i
    7ff9:	bb bb bb bb bb 00 69 69 00 bb bb bb bb 00 69 69     ......ii......ii
    8009:	00 00 bb bb 00 69 69 69 00 bb bb 00 69 69 69 69     .....iii....iiii
    8019:	b3 bb 00 69 69 69 69 69 00 00 ff 69 69 69 69 69     ...iiiii...iiiii
    8029:	69 69 69 69 69 00 00 00 69 69 69 69 00 d9 d9 d9     iiiii...iiii....
    8039:	69 69 69 00 d9 d9 d9 d9 69 69 69 00 d9 00 00 d9     iii.....iii.....
    8049:	69 69 00 d9 d9 00 00 d9 69 69 00 d9 d9 d9 d9 d9     ii......ii......
    8059:	69 69 00 d9 d9 d9 d9 d9 69 69 00 d9 d9 d9 d9 d9     ii......ii......
    8069:	00 00 00 69 69 00 bb bb d9 d9 d9 00 69 00 bb 00     ...ii.......i...
    8079:	d9 d9 d9 d9 00 bb 00 00 d9 d9 d9 d9 d9 00 00 d9     ................
    8089:	d9 d9 d9 d9 00 d9 d9 d9 d9 d9 d9 00 d9 d9 d9 d9     ................
    8099:	d9 d9 d9 00 d9 00 00 d9 d9 d9 00 d9 d9 00 00 d9     ................
    80a9:	00 00 00 00 00 00 00 bb 00 00 00 00 00 00 00 00     ................
	...
    80c1:	d9 d9 d9 00 00 00 00 00 d9 d9 d9 d9 d9 00 00 00     ................
    80d1:	d9 d9 d9 d9 d9 00 00 00 d9 d9 d9 d9 d9 d9 00 00     ................
    80e1:	d9 d9 d9 d9 d9 d9 00 00 00 00 00 bb 00 bb 51 00     ..............Q.
    80f1:	00 00 b2 00 bb 00 00 00 00 00 00 00 00 00 00 00     ................
    8101:	00 00 00 00 00 00 bb bb 00 00 00 bb bb bb 00 00     ................
    8111:	00 00 00 00 00 00 f6 ff 00 00 00 00 ff ff 00 00     ................
	...
    812d:	00 bb b3 00 00 00 00 bb bb 00 00 00 bb bb bb bb     ................
    813d:	00 00 ff ff b3 00 00 00 f6 ff 00 00 00 00 ff ff     ................
    814d:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    8169:	00 ff ff 00 69 69 69 69 ff ff 00 00 69 69 69 69     ....iiii....iiii
    8179:	00 00 00 00 69 69 69 69 00 00 00 00 69 69 69 69     ....iiii....iiii
    8189:	00 00 00 00 69 69 69 69 00 00 00 69 69 69 69 69     ....iiii...iiiii
    8199:	00 00 00 69 69 69 69 69 00 00 69 69 69 69 69 69     ...iiiii..iiiiii
    81a9:	69 69 69 00 d9 d9 d9 d9 69 69 69 00 d9 d9 d9 d9     iii.....iii.....
    81b9:	69 69 69 69 00 00 d9 d9 69 69 69 69 69 69 00 00     iiii....iiiiii..
    81c9:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 00 00     iiiiiiiiiiiiii..
    81d9:	69 00 00 00 00 00 69 00 00 00 69 69 69 69 69 00     i.....i...iiiii.
    81e9:	d9 d9 00 d9 d9 d9 d9 d9 d9 d9 00 d9 d9 d9 d9 d9     ................
    81f9:	d9 d9 00 d9 d9 d9 d9 d9 00 00 00 d9 d9 d9 d9 d9     ................
    8209:	00 00 00 00 d9 d9 d9 d9 00 00 00 69 00 d9 d9 d9     ...........i....
    8219:	00 00 00 69 69 00 d9 d9 69 69 00 69 69 69 00 00     ...ii...ii.iii..
    8229:	d9 d9 d9 d9 d9 d9 00 00 d9 d9 d9 d9 d9 d9 00 00     ................
    8239:	d9 d9 d9 d9 d9 d9 00 00 d9 d9 d9 d9 d9 d9 00 00     ................
    8249:	d9 d9 d9 d9 d9 00 00 00 d9 d9 d9 d9 00 00 00 69     ...............i
    8259:	d9 d9 00 00 69 69 69 69 00 00 69 69 00 69 69 69     ....iiii..ii.iii
	...
    8291:	69 69 00 00 00 00 00 00 69 69 00 69 69 00 69 69     ii......ii.ii.ii
    82a1:	69 69 00 69 69 00 69 69 00 00 00 00 00 00 00 00     ii.ii.ii........
	...
    82bd:	00 00 00 69 00 00 00 00 00 00 69 69 00 00 00 00     ...i......ii....
    82cd:	69 00 69 69 00 69 00 69 69 00 69 69 69 69 00 69     i.ii.i.ii.iiii.i
    82dd:	69 69 00 69 69 69 00 69 69 69 00 69 00 69 69 69     ii.iii.iii.i.iii
    82ed:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    82fd:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    830d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    831d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    832d:	69 69 00 00 69 69 69 69 69 69 00 69 69 69 69 69     ii..iiiiii.iiiii
    833d:	69 69 00 69 69 69 69 69 69 69 69 69 69 69 69 69     ii.iiiiiiiiiiiii
    834d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    835d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 00 69     iiiiiiiiiiiiii.i
    836d:	69 69 69 69 69 69 00 69 69 69 69 69 69 69 69 00     iiiiii.iiiiiiii.
    837d:	69 69 69 69 69 69 69 00 69 69 69 69 69 69 69 69     iiiiiii.iiiiiiii
    838d:	69 69 69 00 69 69 69 69 69 69 00 00 69 69 69 69     iii.iiiiii..iiii
    839d:	69 00 69 69 69 69 69 69 69 69 69 69 69 00 69 69     i.iiiiiiiiiii.ii
    83ad:	00 69 69 69 69 00 69 69 00 69 69 69 00 69 69 00     .iiii.ii.iii.ii.
    83bd:	69 69 69 69 00 69 69 00 69 69 69 69 69 69 69 00     iiii.ii.iiiiiii.
    83cd:	69 69 69 69 69 69 00 69 69 69 69 69 69 00 00 69     iiiiii.iiiiii..i
    83dd:	69 69 69 69 00 69 69 69 69 69 69 69 69 00 69 69     iiii.iiiiiiii.ii
    83ed:	00 00 69 00 69 00 69 69 00 69 69 69 69 00 69 69     ..i.i.ii.iiii.ii
    83fd:	00 69 69 69 00 69 69 69 00 69 69 69 00 69 69 69     .iii.iii.iii.iii
    840d:	00 69 69 69 00 69 69 69 69 69 69 69 69 69 69 69     .iii.iiiiiiiiiii
    841d:	69 69 69 69 69 69 69 69 69 69 69 69 00 00 69 69     iiiiiiiiiiii..ii
    842d:	69 69 69 00 69 69 69 69 69 69 69 00 69 69 69 69     iii.iiiiiii.iiii
    843d:	69 69 69 00 69 69 69 69 69 69 69 69 69 69 69 69     iii.iiiiiiiiiiii
    844d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    845d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    846d:	69 69 69 69 69 69 69 69 69 69 69 69 00 00 69 69     iiiiiiiiiiii..ii
    847d:	69 69 69 69 69 00 00 69 69 69 69 69 69 69 69 69     iiiii..iiiiiiiii
    848d:	69 69 69 69 69 69 69 69 69 69 69 69 69 69 69 69     iiiiiiiiiiiiiiii
    849d:	69 69 69 69 69 69 69 69 69 69 69 69                 iiiiiiiiiiii

000084a9 <HighScoreMap>:
    84a9:	06 05 00 00 01 02 03 04 00 05 06 07 08 09 0a 0b     ................
    84b9:	0c 0d 0e 0f 10 11 12 13 14 15 16 17 18 19 1a 1b     ................

000084c9 <FrameTable>:
    84c9:	00 00 01 06 07 00 02 03 08 09 00 04 05 0a 0b 00     ................
    84d9:	2b 01 06 07 00 2c 03 08 09 00 2d 05 0a 0b 00 32     +....,....-....2
    84e9:	33 38 39 00 34 35 38 39 00 36 37 38 39 00 08 08     389.4589.6789...
    84f9:	08 08 00 3e 3f 44 45 01 08 08 08 08 00 3a 3b 40     ...>?DE......:;@
    8509:	41 00 3c 3d 42 43 03 41 40 3b 3a 03 43 42 3d 3c     A.<=BC.A@;:.CB=<
    8519:	01 01 00 07 06 01 03 02 09 08 01 05 04 0b 0a 01     ................
    8529:	01 2b 07 06 01 03 2c 09 08 01 05 2d 0b 0a 01 33     .+....,....-...3
    8539:	32 39 38 01 35 34 39 38 01 37 36 39 38 01 3f 3e     298.5498.7698.?>
    8549:	47 46 01 3f 3e 45 44 00 3e 3f 46 47 01 3b 3a 41     GF.?>ED.>?FG.;:A
    8559:	40 01 3d 3c 43 42 02 40 41 3a 3b 02 42 43 3c 3d     @.=<CB.@A:;.BC<=
    8569:	00 0c 0d 12 13 00 0e 0f 14 15 00 10 11 16 17 00     ................
    8579:	2e 0d 12 13 00 2f 0f 14 15 00 30 11 16 17 00 46     ...../....0....F
    8589:	47 4c 4d 00 48 49 4c 4d 00 4a 4b 4c 4d 00 08 08     GLM.HILM.JKLM...
    8599:	08 08 00 52 53 58 59 01 08 08 08 08 00 4e 4f 54     ...RSXY......NOT
    85a9:	55 00 50 51 56 57 03 55 54 4f 4e 03 57 56 51 50     U.PQVW.UTON.WVQP
    85b9:	01 0d 0c 13 12 01 0f 0e 15 14 01 11 10 17 16 01     ................
    85c9:	0d 2e 13 12 01 0f 2f 15 14 01 11 30 17 16 01 47     ....../....0...G
    85d9:	46 4d 4c 01 49 48 4d 4c 01 4b 4a 4d 4c 01 57 56     FML.IHML.KJML.WV
    85e9:	5f 5e 01 53 52 59 58 00 57 56 5f 5e 01 4f 4e 55     _^.SRYX.WV_^.ONU
    85f9:	54 01 51 50 57 56 02 54 55 4e 4f 02 56 57 50 51     T.QPWV.TUNO.VWPQ
    8609:	00 ff 18 ff ff 00 ff 19 ff ff 00 ff 1a ff ff 00     ................
    8619:	1b 1c ff ff 01 18 ff ff ff 01 19 ff ff ff 01 1a     ................
    8629:	ff ff ff 01 1c 1b ff ff 00 1d 1e 23 24 00 20 21     ...........#$. !
    8639:	26 27 00 1f ff 25 ff 00 22 ff 28 ff                 &'...%..".(.

00008645 <RibbitWave>:
    8645:	01 06 09 04 fe fd 00 ff 01 06 0c 0b 02 fe fe f6     ................
    8655:	ee f1 fd 0a 13 14 0f 01 ec e0 e4 f4 05 12 16 10     ................
    8665:	06 ff f5 ea eb f8 09 16 1a 16 0d ff f0 e8 ea f6     ................
    8675:	06 13 18 14 0a fe f4 ef f3 fc 05 0e 13 12 0c 00     ................
    8685:	f5 ef ed f0 f8 01 08 0c 0b 06 fe f6 ef ed f2 fe     ................
    8695:	0c 17 19 13 08 fc f4 f2 f5 fc 05 0c 0e 09 02 fd     ................
    86a5:	f8 f5 f5 f9 fe 00 00 01 02 02 01 fe fc fb fc fd     ................
    86b5:	ff 01 05 07 07 06 04 02 01 03 04 05 05 04 04 05     ................
    86c5:	04 04 03 01 fe fb fa fc fe ff ff 00 01 00 ff fe     ................
    86d5:	ff 02 05 06 08 05 01 01 0a 0e ff f0 f9 03 f9 f3     ................
    86e5:	06 20 17 f7 ee fa f8 e7 e8 08 25 1d 04 03 15 13     . ........%.....
    86f5:	f5 df ec fb ed dd ed 11 1d 0e 0a 14 0e f4 ec 01     ................
    8705:	15 13 0a 0a 07 f6 e7 e9 f1 ee e8 f2 07 12 10 0f     ................
    8715:	10 0a 01 02 13 24 28 20 14 04 f1 de d7 db e2 e9     .....$( ........
    8725:	f7 05 05 fb f9 ff 02 fe ff 08 11 15 1b 22 20 10     ............." .
    8735:	fc f2 ef eb e9 f4 08 14 11 05 fd f8 f0 ea f0 00     ................
    8745:	09 07 05 0a 0d 09 04 06 09 05 ff ff 05 0b 0d 0c     ................
    8755:	0f 10 0a ff fa fc fb f6 f5 f9 fc fc fe 03 02 f9     ................
    8765:	fc 15 1e fe e9 fb fc de dc 0d 3b 33 0c f9 f0 cb     ..........;3....
    8775:	af c8 0d 46 4a 3c 32 16 da ad c0 ef 00 01 19 36     ...FJ<2........6
    8785:	2b 08 fd 08 fb e8 f6 24 49 45 29 0a e3 ac 95 b2     +......$IE).....
    8795:	e6 08 13 1c 17 fb d5 c5 d1 d9 de fc 2a 4d 4e 44     ............*MND
    87a5:	3c 24 f9 d8 d7 e8 f8 0f 2e 3a 24 f7 cf bb b9 c4     <$.......:$.....
    87b5:	e2 06 18 14 0d 11 13 08 fb ff 11 19 13 16 29 35     ..............)5
    87c5:	2b 19 0e 00 e6 cf cf e1 eb ec ed f0 eb df d4 d1     +...............
    87d5:	d5 da e6 f9 0a 15 1a 20 27 2c 2c 2b 2d 32 35 30     ....... ',,+-250
    87e5:	23 19 26 43 33 f7 de f1 e4 ba bc fb 27 09 d8 cf     #.&C3.......'...
    87f5:	ce 9b 82 ad 07 41 3a 2b 21 00 bb a0 cf 1f 3c 30     .....A:+!.....<0
    8805:	34 3e 19 e2 e2 0d 24 1d 2e 5c 6f 4a 25 16 ee ad     4>....$..\oJ%...
    8815:	9e d4 13 17 03 ff f3 c0 87 96 ce f0 fb 25 50 46     .............%PF
    8825:	14 f6 f3 e2 cc dc 0d 2e 32 3d 4d 3d 02 b7 a3 c1     ........2=M=....
    8835:	e1 ff 2b 54 4a 1e 02 f9 e3 d3 eb 1f 38 24 0b 03     ..+TJ.......8$..
    8845:	fc ed e6 f1 f6 e5 d6 e8 07 0a fb fc 07 01 e5 d5     ................
    8855:	e0 ee f2 fc 10 18 0b fc 00 0c 10 0c 0f 1e 27 1d     ..............'.
    8865:	0f 0d 15 17 10 09 06 06 09 11 1e 26 23 16 04 f6     ...........&#...
    8875:	e5 cf c8 ed 12 fc d0 cc db b8 9b c4 1b 3f 1b fd     .............?..
    8885:	01 ea b6 b3 f4 48 59 41 44 45 11 d0 cc 0b 38 2d     .....HYADE....8-
    8895:	29 45 48 0b d7 e6 05 f8 ef 12 45 46 22 09 f3 ba     )EH.......EF"...
    88a5:	86 99 de 14 18 15 0b e6 a5 8b ab d6 f6 1d 57 6a     ..............Wj
    88b5:	44 18 0b ff e1 d3 eb 10 24 32 49 4e 2c eb bb b7     D.......$2IN,...
    88c5:	c7 dc 03 3b 55 34 f9 d2 c8 c1 c0 e2 1a 36 25 0d     ...;U4.......6%.
    88d5:	0c 10 01 f0 fc 13 11 f6 ea fa 03 f4 ec fe 0d ff     ................
    88e5:	ec ed fa f6 ec f5 09 10 04 fb 02 0b 0d 0c 11 19     ................
    88f5:	18 11 10 17 1f 1e 17 10 0a 03 01 04 0e 0a f4 ea     ................
    8905:	08 17 ef c0 c7 d3 b0 a6 e6 32 32 03 ec ec c0 91     .........22.....
    8915:	ac 06 4d 43 35 44 2c e9 cd 00 3d 36 26 44 4f 16     ..MC5D,...=6&DO.
    8925:	e3 f8 1d 13 05 27 55 44 14 12 16 e3 ad bf 05 16     .....'UD........
    8935:	f3 ea f6 d3 8c 80 b3 ea e0 e7 23 3c 0b d8 ee 15     ..........#<....
    8945:	ff df ff 39 36 0f 19 3f 35 f5 c6 d0 ec f2 09 43     ...96..?5......C
    8955:	68 46 fc d1 d8 e2 de f4 2b 4e 32 ff e8 e8 da cf     hF......+N2.....
    8965:	e5 0e 1b 00 eb fa 12 0f fe 00 10 07 ea e4 fb 07     ................
    8975:	fc f6 fc f6 de d1 e4 04 0f 06 03 06 04 04 10 22     ..............."
    8985:	2d 2c 22 15 0b 07 06 0b 16 21 21 14 08 05 fc e4     -,"......!!.....
    8995:	dd 02 1c fc cc cc d4 ac 97 cd 1e 2a 01 f7 ff d9     ...........*....
    89a5:	ac c4 17 44 31 33 50 35 f8 f0 25 43 27 1c 3e 41     ...D13P5..%C'.>A
    89b5:	09 e8 06 20 05 f2 13 32 18 f2 f8 f8 ca a7 ca 04     ... ...2........
    89c5:	04 ef fa 01 d4 9a a8 e7 fa e8 03 30 21 e7 d6 07     ...........0!...
    89d5:	1f 05 fd 24 39 1b 0d 32 48 21 e8 df f1 f5 fd 29     ...$9..2H!.....)
    89e5:	5a 50 12 d6 c0 bc b9 cf 09 3e 3e 12 ec df d9 d2     ZP.......>>.....
    89f5:	e0 0a 31 2d 0b f6 f9 f7 e7 e6 ff 16 0f ff 04 12     ..1-............
    8a05:	0b f3 e9 f6 fb ea e0 f1 04 ff f2 f2 fe 04 08 10     ................
    8a15:	1d 26 2c 2f 29 19 06 fa f9 02 16 2d 2b 11 06 1d     .&,/)......-+...
    8a25:	24 f9 cd d7 ed d1 b4 d5 15 1a f3 d8 d9 bd 8b 92     $...............
    8a35:	dc 22 1e 15 32 39 06 e2 04 40 45 26 31 49 2a f7     ."..29...@E&1I*.
    8a45:	fb 2c 3f 20 1a 38 30 f7 dd fe 0f ed dc 04 22 00     .,? .80.......".
    8a55:	d6 e0 ec bd 8b a6 f0 06 e4 e6 08 f9 be b1 f3 31     ...............1
    8a65:	25 12 39 4d 19 da eb 24 1b f3 07 34 23 f6 05 41     %.9M...$...4#..A
    8a75:	4e 14 e9 f8 00 e6 e4 11 3b 2a fb dc d2 d5 ea 17     N.......;*......
    8a85:	45 4e 28 eb b2 a7 bc d5 e9 ff 0d ff e4 de f1 f6     EN(.............
    8a95:	e8 e6 f9 fd e6 e3 08 2d 2e 2a 35 30 0e ff 13 21     .......-.*50...!
    8aa5:	19 18 25 20 05 f8 02 0c 0d 0d 0e 05 f0 dd dd fa     ..% ............
    8ab5:	2b 35 0b f6 f8 d6 ae c3 0f 30 09 ef f6 e1 9f 8d     +5.......0......
    8ac5:	cf 0c 00 f3 18 22 f2 cc f5 36 32 14 27 41 1c ee     ....."...62.'A..
    8ad5:	fd 33 40 23 23 45 42 0f f9 1a 35 17 f9 0e 1e f7     .3@##EB...5.....
    8ae5:	ca d7 f2 d2 a0 b1 ef f8 d2 d2 f8 ef b8 ae ec 23     ...............#
    8af5:	13 09 33 4a 1a db e1 1b 2e 15 14 2c 1b e6 d5 02     ..3J.......,....
    8b05:	28 13 ee ed f8 f1 f7 25 59 52 23 fb e1 cc d2 fe     (......%YR#.....
    8b15:	36 49 37 25 08 d8 b6 c6 ed fe 01 0d 0b ec ce cc     6I7%............
    8b25:	d8 d3 ce dd e5 d6 d1 f2 10 0f 0b 1e 2e 24 1b 2b     .............$.+
    8b35:	3c 34 29 35 3e 2d 18 1b 22 0c f1 f1 fe f6 de d8     <4)5>-..".......
    8b45:	ea f3 ea e9 f8 f9 e4 d6 e1 f2 ed df e3 f0 ee e2     ................
    8b55:	e6 fe 01 ef f1 16 2f 1d 09 1b 34 22 04 0f 2c 21     ....../...4"..,!
    8b65:	00 04 2c 34 14 0d 26 25 ff f3 12 25 0b f3 fe fe     ..,4..&%...%....
    8b75:	dd c8 e8 0f 00 dd e2 f6 e4 c0 c6 f2 fe ee f9 13     ................
    8b85:	08 e2 dc f5 fb e7 e7 00 08 fb 01 18 1c 06 00 0c     ................
    8b95:	13 18 29 34 2f 2a 2c 22 0e 0d 1a 1b 0f 12 19 09     ..)4/*,"........
    8ba5:	f6 fa ff ee e4 f9 09 f7 e5 e7 e5 d1 c8 e2 f7 ef     ................
    8bb5:	e3 eb f2 e6 da e6 f8 fb ff 09 07 f7 f2 00 0d 13     ................
    8bc5:	1d 28 1f 0b 07 13 1c 21 29 2c 21 18 18 1b 18 14     .(.....!),!.....
    8bd5:	12 08 fb f5 f8 fd f9 ee e4 df da d6 d8 e1 ea ed     ................
    8be5:	ed f1 f1 e9 e8 ef f1 ee f5 00 00 fa fe 03 fe fb     ................
    8bf5:	08 18 19 18 1f 22 1a 18 24 2d 2c 2e 36 35 27 1d     ....."..$-,.65'.
    8c05:	1c 17 0c 09 0d 07 f9 f0 ee e8 e0 df e4 e7 e5 e0     ................
    8c15:	dd da da db dc e0 e7 eb e7 e0 e3 e8 e8 ec fd 0e     ................
    8c25:	0d 01 05 15 19 12 19 2e 36 2e 28 2c 2b 1a 0e 12     ........6.(,+...
    8c35:	1a 14 09 0b 13 12 06 00 06 09 00 f8 fa fe fa f0     ................
    8c45:	eb ec ed ea e8 ed f3 f3 f0 f1 f1 ec e5 e6 ea ed     ................
    8c55:	f0 f4 f9 f9 f7 fa 03 0a 0e 10 11 0f 0c 09 08 05     ................
    8c65:	01 01 05 0c 10 13 14 12 0e 07 03 02 03 02 04 05     ................
    8c75:	05 04 06 0a 0b 06 01 01 01 00 ff ff fd fb fa f9     ................
    8c85:	f6 f3 f4 f5 f3 f4 f9 ff 01 01 02 02 00 02 06 09     ................
    8c95:	08 0c 10 0f 0a 06 03 fd f8 f8 f9 f8 f7 f8 fb fb     ................
    8ca5:	fc fe 01 00 00 03 05 04 06 08 09 08 06 06 04 03     ................
    8cb5:	05 07 08 09 07 05 02 01 00 00 fe fd fa f8 f9 f9     ................
    8cc5:	f9 f9 fb fe 00 00 00 00 00 01 03 05 08 0a 0a 08     ................
    8cd5:	08 08 07 03 ff fe fd fc fd fe 00 ff ff fe fc fb     ................
    8ce5:	fc fb f9 f8 f7 f8 fb fd fe ff 01 02 01 02 03 04     ................
    8cf5:	02 02 03 05 03 02 04 06 07 05 05 04 04 03 03 04     ................
    8d05:	04 02 01 03 05 04 04 04 03 01 00 ff ff fe fc fa     ................
    8d15:	fb fb fa f8 f9 fb fd fe ff fe ff ff 00 02 03 02     ................
    8d25:	01 02 05 05 06 06 07 07 06 07 07 08 09 09 09 06     ................
    8d35:	03 ff fc fc ff 01 00 fd fd fc fb fc fc fd fe 00     ................
    8d45:	00 ff fd fa f9 fa fc fd ff 00 01 02 04 07 0a 08     ................
    8d55:	05 02 fe fd 00 02 06 09 0b 0b 08 01 fa f4 f3 fd     ................
    8d65:	04 01 fb f8 f8 01 0a 0f 11 11 0d 07 00 fc fa f5     ................
    8d75:	f0 ef ef f1 f7 ff 06 09 0c 0e 0e 0c 0c 0b 0a 07     ................
    8d85:	04 fe f8 f5 f4 f6 f9 fa fc ff 04 07 07 05 04 03     ................
    8d95:	01 01 02 03 02 03 03 00 fe fd fc fc fc fb fc fd     ................
    8da5:	fe 01 05 07 08 08 09 0a 0a 0a 0c 0d 0c 0b 09 07     ................
    8db5:	04 00 fc f8 f3 f0 f4 f9 f4 e6 eb 0b 1a ff ef 06     ................
    8dc5:	08 e7 df 08 2e 1e ff 09 0c e8 d2 f5 25 29 1e 25     ............%).%
    8dd5:	15 e5 c5 d7 fa 01 05 15 0f ed df f8 17 1b 16 1c     ................
    8de5:	1a 03 ef f7 02 f3 e3 f4 0a 04 f3 f6 f8 db bd ce     ................
    8df5:	fe 13 11 22 33 13 ec f9 2b 40 2a 2e 40 22 dd c5     ..."3...+@*.@"..
    8e05:	f4 0b e4 d3 f8 03 d8 ba e1 09 f4 d8 f0 09 f3 ed     ................
    8e15:	1c 53 4c 2b 26 10 e0 cd f2 2c 40 3a 36 1a d4 9e     .SL+&....,@:6...
    8e25:	af e3 02 0f 27 29 fd c1 bc e8 f3 e3 f8 25 27 fc     ....').......%'.
    8e35:	ef 0c 0f f0 ed 0f 19 07 0a 2b 33 1b 19 37 3a 12     .........+3..7:.
    8e45:	ff 16 20 03 ee f9 f6 ce af c4 eb f7 f8 fa fb 04     .. .............
    8e55:	fd cf b1 d4 ea d7 e5 2b 5c 3c 13 14 02 d1 ca 01     .......+\<......
    8e65:	35 3b 4d 77 62 12 f3 1c 29 02 fb 0f f0 b1 a7 d9     5;Mwb...).......
    8e75:	f1 e2 f4 19 09 db e2 15 22 01 fb 10 03 d0 bc e6     ........".......
    8e85:	f8 d9 d2 fe 0d ee ea 0b 05 e7 f6 2c 4d 45 4b 50     ...........,MEKP
    8e95:	1f e0 dd 15 50 54 41 28 fa ad 80 9a ea 36 44 34     ....PTA(.....6D4
    8ea5:	14 e1 9a 80 9a cd 06 40 6d 5f 25 f7 e6 de ea 19     .......@m_%.....
    8eb5:	62 71 37 fd ec cf 93 86 bf 09 17 0d 1b 23 01 c8     bq7..........#..
    8ec5:	b8 de f5 f4 00 18 27 16 eb ca d5 0a 49 68 58 3d     ......'.....IhX=
    8ed5:	25 00 e0 e8 0f 42 54 46 47 42 0d c9 bb e5 06 f3     %....BTFGB......
    8ee5:	ec fe fc cc 9a a3 c8 ca af ac c3 bd 97 98 d6 17     ................
    8ef5:	20 21 48 68 4b 23 35 69 72 45 33 43 2f ef cc f5      !HhK#5irE3C/...
    8f05:	24 13 fb 0d 17 e8 b0 be fb 0d f8 09 30 1c e0 cf     $...........0...
    8f15:	fe 1a fe f5 1a 26 f5 cc e5 0b f9 e5 ff 18 f9 c3     .....&..........
    8f25:	c1 eb f3 da e0 0e 2c 12 e0 cc f0 1c 28 30 4c 53     ......,.....(0LS
    8f35:	23 dd c7 ea f8 f8 1d 50 4d 1c 01 03 f0 d8 f0 1e     #......PM.......
    8f45:	25 02 e8 df d5 da f8 26 48 4b 34 07 df d8 ed 09     %......&HK4.....
    8f55:	1a 20 19 00 d3 ac b0 cb d8 df f4 ff ec d3 d6 ed     . ..............
    8f65:	fd 0f 2a 37 28 1c 1e 13 f7 f1 0c 1f 13 06 0b 08     ..*7(...........
    8f75:	f6 f7 0f 1e 17 15 21 22 10 08 14 17 04 f7 02 0b     ......!"........
    8f85:	fd f4 05 12 fe e1 db e5 e8 e8 f0 f9 f1 db c9 cb     ................
    8f95:	da dd d9 e0 ed ed e0 e0 f5 0b 11 15 26 32 29 23     ............&2)#
    8fa5:	2e 3f 43 3e 41 44 38 28 28 27 1a 10 19 1f 0f fd     .?C>AD8(('......
    8fb5:	01 07 f3 da ce cf cd c8 cc d2 d0 c8 c1 c1 cb d8     ................
    8fc5:	dc db df eb ed e7 ec fd 09 0c 19 2f 32 1d 11 20     .........../2.. 
    8fd5:	31 2f 2e 44 56 47 23 11 0e 07 02 14 30 32 18 01     1/.DVG#.....02..
    8fe5:	fa f0 e1 e1 f5 05 04 fa ed db c9 c2 d1 ea f6 f9     ................
    8ff5:	f6 e7 d2 c9 d6 e8 f4 06 1b 1d 07 f6 fb 06 0e 17     ................
    9005:	22 24 19 0c 03 fd fe 05 0d 0f 0a 03 fd fb fa f9     "$..............
    9015:	fc 02 07 05 02 04 07 07 05 0b 15 18 13 11 15 15     ................
    9025:	0c 02 00 fd f3 ed f2 fb fa f7 f8 f5 ef ec f4 fb     ................
    9035:	f6 ef f1 f7 f2 ec f3 fd ff fc 00 07 04 fd 02 0f     ................
    9045:	0e 03 ff 05 06 fe fd 0a 11 07 ff 06 0d 05 fd ff     ................
    9055:	04 00 f9 fa 00 06 0a 0e 12 11 0c 06 02 01 03 04     ................
    9065:	06 08 08 03 fd f9 f3 f2 f7 ff 00 fc fb fb f8 f7     ................
    9075:	f9 ff 03 04 06 06 05 02 01 02 01 03 06 06 01 fa     ................
    9085:	f5 f4 f5 f4 f5 f7 fd 00 fd fc 00 06 08 09 0a 0a     ................
    9095:	07 05 07 0b 0f 10 11 0f 0c 09 09 09 04 fd fa fa     ................
    90a5:	f9 f6 f7 fc 01 04 05 07 06 00 fa fa fe ff fd fd     ................
    90b5:	fb f7 f4 f5 fa fd ff 00 01 02 03 03 05 08 06 04     ................
    90c5:	03 04 04 02 00 01 01 00 02 07 0a 0b 0b 0e 0e 08     ................
    90d5:	03 00 fe fb fa fa f9 f8 f8 f9 f9 f9 fa fc fb f8     ................
    90e5:	f7 f9 fe 02 05 06 05 05 04 04 08 0f 12 0c 04 fe     ................
    90f5:	fc fc ff 02 07 07 05 02 00 fc f9 f8 fb fe ff fe     ................
    9105:	fd fc f9 f8 f9 fa fc ff 00 fe fc fb fc fc fc fd     ................
    9115:	00 03 06 08 08 07 06 05 06 05 07 07 08 07 07 07     ................
    9125:	05 02 00 00 01 02 05 07 06 02 ff fe ff 00 ff 00     ................
    9135:	02 00 fe fa f8 f5 f6 fa fd ff fe ff 01 05 08 09     ................
    9145:	07 05 03 01 ff fe ff 00 03 06 08 09 07 04 02 01     ................
    9155:	02 03 02 00 fd fe 01 03 03 02 03 02 01 00 01 02     ................
    9165:	02 03 01 00 fd fd 00 00 01 03 04 05 03 01 ff fd     ................
    9175:	fd fc fd fe ff 02 04 05 05 04 04 03 01 ff fd fc     ................
    9185:	fc fd fd fd fd fe ff 01 05 08 09 09 08 05 03 01     ................
    9195:	00 fd fb fd ff ff fd fc fc fe ff 00 02 03 03 02     ................
    91a5:	01 01 00 01 00 00 ff fd fc fe 01 04 05 06 04 01     ................
    91b5:	00 00 02 05 06 06 05 04 03 01 00 02 05 08 09 07     ................
    91c5:	03 ff fe fe ff 00 00 00 fe fc fb f9 f7 f6 f7 f9     ................
    91d5:	fb fc fe ff 00 ff 00 01 02 05 09 0b 0c 0b 0a 0b     ................
    91e5:	0b 0a 09 09 08 05 01 fe fb f9 fa f9 f8 f9 fb fd     ................
    91f5:	ff 01 02 03 02 00 01 02 02 03 04 03 01 fe fc fe     ................
    9205:	01 02 05 05 04 02 01 00 fe fc fc fd fd fd fe fe     ................
    9215:	fe fc fe 00 02 01 01 02 03 01 00 01 02 02 02 03     ................
    9225:	04 03 01 02 04 05 04 05 07 05 02 00 02 01 fe fc     ................
    9235:	fc fb fb fc 00 03 03 02 02 03 01 00                 ............

00009241 <SplashNoise>:
    9241:	00 01 03 00 07 33 01 00 ef 01 01 04 01 00 f5 01     .....3..........
    9251:	01 01 05 ff                                         ....

00009255 <Tongue1>:
    9255:	00 02 02 00 07 78 00 00 fc 00 08 47 01 08 49 02     .....x.....G..I.
    9265:	08 4c 01 08 4e 02 08 50 01 08 52 00 00 e2 04 05     .L..N..P..R.....
    9275:	00 00 ff                                            ...

00009278 <Tongue2>:
    9278:	00 02 02 00 07 78 00 08 46 01 08 48 02 08 4b 01     .....x..F..H..K.
    9288:	08 4e 02 08 51 01 08 52 01 08 53 00 00 e2 03 05     .N..Q..R..S.....
    9298:	00 00 ff                                            ...

0000929b <Grab1>:
    929b:	00 02 02 00 07 78 00 00 fe 00 08 55 01 08 57 01     .....x.....U..W.
    92ab:	08 59 01 08 5c 01 08 5e 01 08 60 01 08 55 01 08     .Y..\..^..`..U..
    92bb:	57 01 08 59 01 08 5c 01 08 5e 01 08 60 01 08 63     W..Y..\..^..`..c
    92cb:	00 00 e2 04 05 00 00 ff                             ........

000092d3 <Smash>:
    92d3:	00 00 fc 00 07 8c 00 02 04 00 0a 80 00 09 80 00     ................
    92e3:	08 31 01 08 30 01 08 2f 01 08 2e 01 08 2d 01 08     .1..0../.....-..
    92f3:	2c 01 08 2b 01 08 2a 01 08 3c 01 08 3a 01 08 38     ,..+..*..<..:..8
    9303:	01 08 36 01 08 34 01 08 32 01 08 30 01 08 2e 01     ..6..4..2..0....
    9313:	08 2c 01 08 2b 01 08 2a 01 08 28 01 08 26 01 08     .,..+..*..(..&..
    9323:	24 01 08 21 01 08 1f 01 08 1e 01 08 1b 01 08 19     $..!............
    9333:	01 08 17 01 08 15 01 08 13 01 08 11 01 08 0f 08     ................
    9343:	05 00 00 ff                                         ....

00009347 <Jump1>:
    9347:	00 02 01 00 07 17 00 0a 7f 00 09 ad 00 00 07 00     ................
    9357:	08 45 05 00 00 02 08 44 04 08 46 00 0a 83 00 09     .E.....D..F.....
    9367:	c7 02 08 47 02 08 48 02 08 49 02 08 4a 02 08 4b     ...G..H..I..J..K
    9377:	00 00 f1 02 08 4c 02 08 4e 02 08 4f 02 08 50 02     .....L..N..O..P.
    9387:	08 51 00 0a 8d 00 09 e9 08 05 00 00 ff              .Q...........

00009394 <Jump2>:
    9394:	00 02 02 00 07 8c 00 08 48 06 08 4d 00 00 f1 05     ........H..M....
    93a4:	05 00 00 ff                                         ....

000093a8 <PauseFx>:
    93a8:	00 02 02 00 07 80 00 08 58 06 08 54 06 08 58 06     ........X..T..X.
    93b8:	08 54 00 00 f6 0d 05 00 00 ff                       .T........

000093c2 <Stomp>:
    93c2:	00 02 03 00 07 8a 00 0a 80 00 09 80 00 08 3d 01     ..............=.
    93d2:	08 3c 01 07 00 01 07 80 01 08 40 02 07 00 01 07     .<........@.....
    93e2:	80 01 08 42 01 08 41 01 07 00 01 07 80 01 08 44     ...B..A........D
    93f2:	01 08 43 03 07 00 00 05 00 00 ff                    ..C........

000093fd <TitleInstrument0>:
    93fd:	00 02 02 00 07 4e 00 0a c7 00 09 d3 00 00 08 01     .....N..........
    940d:	00 fe 00 06 00 00 00 fc 01 00 f8 02 00 f6 10 05     ................
    941d:	00 00 ff                                            ...

00009420 <TitleInstrument1>:
    9420:	00 02 00 00 07 1f 00 0a ce 00 09 cc 01 00 07 01     ................
    9430:	00 0e 01 00 03 01 00 f6 04 00 f1 0f 05 00 00 ff     ................

00009440 <TitleInstrument2>:
    9440:	00 02 01 00 07 64 00 0a 79 00 09 a8 00 00 f6 04     .....d..y.......
    9450:	00 f1 05 ff                                         ....

00009454 <TitleInstrument3>:
    9454:	00 02 03 00 07 51 00 0a 64 00 09 d3 00 00 f6 04     .....Q..d.......
    9464:	00 ec 0b ff                                         ....

00009468 <TitleDrum0>:
    9468:	00 01 0b 00 07 3c 00 00 ec 04 05 00 00 ff           .....<........

00009476 <TitleDrum1>:
    9476:	00 01 0b 00 07 3c 00 00 ec 04 05 00 00 ff           .....<........

00009484 <TitleDrum2>:
    9484:	00 01 0b 00 07 3c 00 00 ec 04 05 00 00 ff           .....<........

00009492 <TitleDrum3>:
    9492:	00 01 0b 00 07 28 00 00 ec 04 05 00 00 ff           .....(........

000094a0 <StageInstrument0>:
    94a0:	00 02 02 00 07 4e 00 0a c7 00 09 d3 00 00 08 01     .....N..........
    94b0:	00 fe 00 06 00 00 00 fc 01 00 f8 02 00 f6 10 05     ................
    94c0:	00 00 ff                                            ...

000094c3 <StageInstrument1>:
    94c3:	00 02 00 00 07 1f 00 0a ce 00 09 cc 01 00 07 01     ................
    94d3:	00 0e 01 00 03 01 00 f6 04 00 f1 0f 05 00 00 ff     ................

000094e3 <StageInstrument2>:
    94e3:	00 02 01 00 07 64 00 0a 79 00 09 a8 00 00 f6 04     .....d..y.......
    94f3:	00 f1 05 ff                                         ....

000094f7 <StageInstrument3>:
    94f7:	00 02 01 00 07 64 00 0a 79 00 09 a8 00 00 f6 04     .....d..y.......
    9507:	00 f1 05 ff                                         ....

0000950b <StageDrum0>:
    950b:	00 01 0b 00 07 3c 00 00 ec 04 05 00 00 ff           .....<........

00009519 <StageDrum1>:
    9519:	00 01 0b 00 07 28 00 00 ec 04 05 00 00 ff           .....(........

00009527 <StageDrum2>:
    9527:	00 01 0b 00 07 28 00 00 ec 04 05 00 00 ff           .....(........

00009535 <StageDrum3>:
    9535:	00 01 0b 00 07 28 00 00 ec 04 05 00 00 ff           .....(........

00009543 <patches>:
    9543:	02 45 86 00 00 fb 0b fb 0b 01 00 00 41 92 00 00     .E..........A...
    9553:	00 00 00 00 00 55 92 00 00 00 00 00 00 00 78 92     .....U........x.
    9563:	00 00 00 00 00 00 00 9b 92 00 00 00 00 00 00 00     ................
    9573:	d3 92 00 00 00 00 00 00 00 47 93 00 00 00 00 00     .........G......
    9583:	00 00 94 93 00 00 00 00 00 00 00 a8 93 00 00 00     ................
    9593:	00 00 00 00 c2 93 00 00 00 00 00 00 00 fd 93 00     ................
    95a3:	00 00 00 00 00 00 20 94 00 00 00 00 00 00 00 40     ...... ........@
    95b3:	94 00 00 00 00 00 00 00 54 94 00 00 00 00 00 00     ........T.......
    95c3:	00 68 94 00 00 00 00 00 00 00 76 94 00 00 00 00     .h........v.....
    95d3:	00 00 00 84 94 00 00 00 00 00 00 00 92 94 00 00     ................
    95e3:	00 00 00 00 00 a0 94 00 00 00 00 00 00 00 c3 94     ................
    95f3:	00 00 00 00 00 00 00 e3 94 00 00 00 00 00 00 00     ................
    9603:	f7 94 00 00 00 00 00 00 00 0b 95 00 00 00 00 00     ................
    9613:	00 00 19 95 00 00 00 00 00 00 00 27 95 00 00 00     ...........'....
    9623:	00 00 00 00 35 95 00 00 00 00                       ....5.....

0000962d <TitleSong>:
    962d:	00 c0 0a 00 c1 0b 00 c2 0c 00 c3 00 00 90 48 6a     ..............Hj
    963d:	00 92 24 7f 00 ff 06 01 53 03 90 4c 6a 03 4f 6a     ..$.....S..Lj.Oj
    964d:	06 93 10 6a 06 10 6a 06 92 24 7f 00 93 0f 6a 0c     ...j..j..$....j.
    965d:	92 30 7f 00 93 0f 6a 0c 11 6a 0d 92 24 7f 00 93     .0....j..j..$...
    966d:	0e 6a 0c 0f 6a 0c 92 24 7f 00 93 10 6a 06 10 6a     .j..j..$....j..j
    967d:	06 92 21 7f 00 93 0e 6a 0d 92 2d 7f 00 93 0f 6a     ..!....j..-....j
    968d:	0c 0f 6a 0c 92 21 7f 00 93 10 6a 06 10 6a 06 90     ..j..!....j..j..
    969d:	4c 6a 00 93 11 6a 0d 92 21 7f 00 93 0e 6a 0c 90     Lj...j..!....j..
    96ad:	4f 6a 00 92 23 7f 00 93 0f 6a 14 90 48 6a 04 4f     Oj..#....j..Hj.O
    96bd:	6a 00 54 6a 00 92 24 7f 00 93 11 6a 19 92 24 7f     j.Tj..$....j..$.
    96cd:	00 93 0f 6a 0c 92 30 7f 0c 93 11 6a 0c 92 24 7f     ...j..0....j..$.
    96dd:	0d 93 0f 6a 0c 92 24 7f 0c 21 7f 0c 90 56 6a 00     ...j..$..!...Vj.
    96ed:	92 2d 7f 0d 90 54 6a 00 93 0f 6a 0c 90 4f 6a 00     .-...Tj...j..Oj.
    96fd:	92 21 7f 0c 90 4c 6a 0c 4a 6a 00 92 21 7f 0c 90     .!...Lj.Jj..!...
    970d:	48 6a 00 93 0f 6a 0d 90 43 6a 00 92 21 7f 0c 90     Hj...j..Cj..!...
    971d:	48 6a 00 92 24 7f 03 90 4c 6a 03 4f 6a 12 92 24     Hj..$...Lj.Oj..$
    972d:	7f 00 93 0f 6a 0d 92 30 7f 18 24 7f 0c 93 0f 6a     ....j..0..$....j
    973d:	0d 92 24 7f 0c 21 7f 0c 2d 7f 0c 93 0f 6a 0c 92     ..$..!..-....j..
    974d:	21 7f 0d 90 4c 6a 0c 92 21 7f 0c 90 4f 6a 00 92     !...Lj..!...Oj..
    975d:	23 7f 00 93 0f 6a 15 90 48 6a 04 4f 6a 00 54 6a     #....j..Hj.Oj.Tj
    976d:	00 92 24 7f 0c 30 7f 0c 93 0f 6a 0c 92 24 7f 19     ..$..0....j..$..
    977d:	30 7f 0c 23 7f 00 93 0f 6a 0c 92 2f 7f 0c 24 7f     0..#....j../..$.
    978d:	0d 90 48 6a 06 4f 6a 06 54 6a 00 93 0f 6a 0c 90     ..Hj.Oj.Tj...j..
    979d:	4f 6a 06 4c 6a 06 48 6a 0d 92 23 7f 00 93 0f 6a     Oj.Lj.Hj..#....j
    97ad:	0c 90 4f 6a 00 54 6a 00 48 6a 00 92 24 7f 00 93     ..Oj.Tj.Hj..$...
    97bd:	0f 6a 18 90 4f 6a 00 91 4f 67 00 92 24 7f 0d 91     .j..Oj..Og..$...
    97cd:	4f 67 0c 4f 67 00 92 24 7f 00 93 0f 6a 0c 90 48     Og.Og..$....j..H
    97dd:	6a 00 91 4f 67 00 92 30 7f 0c 91 4f 67 0c 4f 67     j..Og..0...Og.Og
    97ed:	00 92 24 7f 0d 91 4f 67 00 93 0f 6a 0c 91 4f 67     ..$...Og...j..Og
    97fd:	00 92 24 7f 0c 91 4c 67 00 92 21 7f 0c 91 4c 67     ..$...Lg..!...Lg
    980d:	00 92 2d 7f 0d 90 47 6a 00 91 4c 67 00 93 0f 6a     ..-...Gj..Lg...j
    981d:	0c 91 4c 67 00 92 21 7f 0c 90 48 6a 00 91 4c 67     ..Lg..!...Hj..Lg
    982d:	0c 4c 67 00 92 21 7f 0d 90 4a 6a 00 91 4c 67 00     .Lg..!...Jj..Lg.
    983d:	92 28 7f 00 93 0f 6a 0c 91 4c 67 00 92 21 7f 0c     .(....j..Lg..!..
    984d:	90 4c 6a 00 91 54 67 00 92 26 7f 0c 91 54 67 0c     .Lj..Tg..&...Tg.
    985d:	54 67 00 92 26 7f 00 93 0f 6a 0d 91 54 67 00 92     Tg..&....j..Tg..
    986d:	32 7f 0c 91 54 67 0c 54 67 00 92 26 7f 0c 91 54     2...Tg.Tg..&...T
    987d:	67 00 92 1a 7f 00 93 0f 6a 0d 90 4a 6a 00 91 54     g.......j..Jj..T
    988d:	67 0c 4d 67 0c 92 1a 7f 00 93 0f 6a 0c 91 4c 67     g.Mg.......j..Lg
    989d:	00 92 21 7f 00 93 0f 6a 0d 92 26 7f 0c 91 48 67     ..!....j..&...Hg
    98ad:	0c 92 1f 7f 0c 91 4a 67 00 92 29 7f 00 93 0f 6a     ......Jg..)....j
    98bd:	0c 92 1f 7f 0d 91 4f 67 00 92 24 7f 0c 91 4f 67     ......Og..$...Og
    98cd:	0c 90 4f 6a 00 91 4f 67 00 92 24 7f 00 93 0f 6a     ..Oj..Og..$....j
    98dd:	0c 90 48 6a 00 91 4f 67 00 92 30 7f 0d 91 4f 67     ..Hj..Og..0...Og
    98ed:	0c 4f 67 00 92 24 7f 0c 91 4f 67 00 93 0f 6a 0c     .Og..$...Og...j.
    98fd:	91 4f 67 00 92 24 7f 0d 91 4c 67 00 92 21 7f 0c     .Og..$...Lg..!..
    990d:	91 4c 67 00 92 2d 7f 0c 90 47 6a 00 91 4c 67 00     .Lg..-...Gj..Lg.
    991d:	93 0f 6a 0c 91 4c 67 00 92 21 7f 0c 90 48 6a 00     ..j..Lg..!...Hj.
    992d:	91 4c 67 0d 4c 67 00 92 21 7f 0c 90 4a 6a 00 91     .Lg.Lg..!...Jj..
    993d:	4c 67 00 92 28 7f 00 93 0f 6a 0c 91 4c 67 00 92     Lg..(....j..Lg..
    994d:	21 7f 0c 90 4c 6a 00 91 54 67 00 92 26 7f 0d 91     !...Lj..Tg..&...
    995d:	54 67 0c 54 67 00 92 26 7f 0c 91 54 67 00 92 32     Tg.Tg..&...Tg..2
    996d:	7f 0c 91 54 67 0d 90 4d 6a 00 91 54 67 00 92 26     ...Tg..Mj..Tg..&
    997d:	7f 0c 91 54 67 00 92 1a 7f 0c 90 4a 6a 00 91 54     ...Tg......Jj..T
    998d:	67 0c 4d 67 0c 4c 67 00 92 1a 7f 0d 1d 7f 0c 91     g.Mg.Lg.........
    999d:	4d 67 00 92 21 7f 18 91 4d 67 00 92 21 7f 0d 91     Mg..!...Mg..!...
    99ad:	4c 67 00 92 1d 7f 0c 21 7f 0c 90 48 6a 00 92 1d     Lg.....!...Hj...
    99bd:	7f 19 1d 7f 0c 90 47 6a 00 92 29 7f 18 1d 7f 0c     ......Gj..).....
    99cd:	90 48 6a 0d 92 1d 7f 0c 90 4a 6a 00 92 1d 7f 0c     .Hj......Jj.....
    99dd:	1f 7f 0c 1d 7f 0d 90 48 6a 00 92 2b 7f 18 1f 7f     .......Hj..+....
    99ed:	0c 90 47 6a 19 47 6a 00 92 1c 7f 18 1c 7f 0c 28     ..Gj.Gj........(
    99fd:	7f 19 1c 7f 18 1c 7f 0d 90 4c 6a 00 92 21 7f 0c     .........Lj..!..
    9a0d:	2d 7f 25 90 4c 6a 00 92 21 7f 0c 90 4a 6a 00 92     -.%.Lj..!...Jj..
    9a1d:	23 7f 0c 90 48 6a 00 92 24 7f 0c 90 4a 6a 0c 48     #...Hj..$...Jj.H
    9a2d:	6a 00 92 1d 7f 19 1d 7f 0c 90 47 6a 00 92 29 7f     j.........Gj..).
    9a3d:	19 1d 7f 0c 90 48 6a 0c 92 1d 7f 0c 90 4a 6a 00     .....Hj......Jj.
    9a4d:	92 1d 7f 0d 1f 7f 0c 1d 7f 0c 90 48 6a 00 92 2b     ...........Hj..+
    9a5d:	7f 18 1f 7f 0d 90 47 6a 18 4c 6a 00 92 1c 7f 19     ......Gj.Lj.....
    9a6d:	1c 7f 0c 90 4a 6a 00 92 28 7f 18 1c 7f 0d 90 47     ....Jj..(......G
    9a7d:	6a 0c 92 1c 7f 0c 90 48 6a 00 92 21 7f 0c 2d 7f     j......Hj..!..-.
    9a8d:	19 90 4c 6a 0c 45 6a 00 92 21 7f 06 21 7f 06 28     ..Lj.Ej..!..!..(
    9a9d:	7f 0c 2d 7f 19 90 4d 6a 00 92 1d 7f 25 90 4c 6a     ..-...Mj....%.Lj
    9aad:	24 48 6a 19 4a 6a 00 92 26 7f 06 26 7f 06 32 7f     $Hj.Jj..&..&..2.
    9abd:	0c 90 4a 6a 00 92 26 7f 06 26 7f 06 32 7f 0d 90     ..Jj..&..&..2...
    9acd:	4c 6a 00 92 26 7f 06 26 7f 06 24 7f 0c 90 4d 6a     Lj..&..&..$...Mj
    9add:	00 92 23 7f 0c 21 7f 0d 90 4f 6a 00 92 1f 7f 18     ..#..!...Oj.....
    9aed:	1f 7f 0c 2b 7f 19 1f 7f 18 1f 7f 0c 90 43 6a 00     ...+.........Cj.
    9afd:	92 1f 7f 0d 2b 7f 08 ff 06 01 45 29 92 2b 7f 08     ....+.....E).+..
    9b0d:	ff 2f 00                                            ./.

00009b10 <TongueFrames>:
    9b10:	41 00 42 00 42 00 43 00 43 00 43 00 43 00 43 00     A.B.B.C.C.C.C.C.
    9b20:	42 00 42 00 42 00 41 00 41 00 41 00 41 00 40 00     B.B.B.A.A.A.A.@.

00009b30 <HopWave>:
    9b30:	00 02 03 05 06 06 05 03 02                          .........

00009b39 <TongueLength>:
    9b39:	00 03 05 07 09 09 07 05 03 00 00 00 00 00 00 00     ................
	...

00009b4a <CustomFadeTable>:
    9b4a:	ff bf be b6 b5 75 91 40                             .....u.@

00009b52 <titlecharmap>:
    9b52:	21 31 32 50 4c 41 59 45 52 53 4f 49 47 4e 4d 43     !12PLAYERSOIGNMC
    9b62:	48 44 54 42 55 51 5a 58 56 57 46 3a 4b 2a 00        HDTBUQZXVWF:K*.

00009b71 <highscorecharmap>:
    9b71:	31 32 33 34 35 36 37 38 39 30 41 42 43 44 45 46     1234567890ABCDEF
    9b81:	47 48 49 4a 4b 4c 4d 4e 4f 50 51 52 53 54 55 56     GHIJKLMNOPQRSTUV
    9b91:	57 58 59 5a 20 00                                   WXYZ .

00009b97 <gameovercharmap>:
    9b97:	31 21 57 49 4e 45 52 54 47 41 4d 43 4f 44 00        1!WINERTGAMCOD.

00009ba6 <introcharmap>:
    9ba6:	55 5a 45 42 4f 58 00                                UZEBOX.

00009bad <pausecharmap>:
    9bad:	52 45 53 55 4d 49 43 4f 4e 46 58 51 54 00           RESUMICONFXQT.

00009bbb <KonamiCode>:
    9bbb:	10 00 10 00 20 00 20 00 40 00 80 00 40 00 80 00     .... . .@...@...
    9bcb:	01 00 00 01                                         ....

00009bcf <EEPROMdefault>:
    9bcf:	41 4c 45 43 20 1c 43 4e 46 4c 57 19 47 4f 53 4d     ALEC .CNFLW.GOSM
    9bdf:	41 15 48 41 52 54 59 12 4a 4f 4e 45 53 10           A.HARTY.JONES.

00009bed <FadeAdjustedFG>:
    9bed:	ff ff ff ff ff ff ff 00                             ........

00009bf5 <__c.1966>:
    9bf5:	55 5a 45 42 4f 58 00                                UZEBOX.

00009bfc <__c.2010>:
    9bfc:	43 52 45 44 49 54 53 00                             CREDITS.

00009c04 <__c.2008>:
    9c04:	32 20 50 4c 41 59 45 52 53 00                       2 PLAYERS.

00009c0e <__c.2006>:
    9c0e:	31 20 50 4c 41 59 45 52 00                          1 PLAYER.

00009c17 <__c.2004>:
    9c17:	53 45 4c 45 43 54 3a 00                             SELECT:.

00009c1f <__c.2375>:
    9c1f:	54 49 45 20 47 41 4d 45 21 00                       TIE GAME!.

00009c29 <__c.2373>:
    9c29:	57 49 4e 4e 45 52 21 00                             WINNER!.

00009c31 <__c.2371>:
    9c31:	57 49 4e 4e 45 52 21 00                             WINNER!.

00009c39 <__c.2276>:
    9c39:	4e 45 57 20 52 45 43 4f 52 44 21 00                 NEW RECORD!.

00009c45 <__c.2274>:
    9c45:	4e 45 57 20 52 45 43 4f 52 44 21 00                 NEW RECORD!.

00009c51 <__c.2133>:
    9c51:	54 4f 50 20 46 52 4f 47 53 00                       TOP FROGS.

00009c5b <__c.2420>:
    9c5b:	51 55 49 54 00                                      QUIT.

00009c60 <__c.2418>:
    9c60:	53 46 58 20 20 20 4f 4e 00                          SFX   ON.

00009c69 <__c.2416>:
    9c69:	53 46 58 20 20 20 4f 46 46 00                       SFX   OFF.

00009c73 <__c.2414>:
    9c73:	4d 55 53 49 43 20 4f 4e 00                          MUSIC ON.

00009c7c <__c.2412>:
    9c7c:	4d 55 53 49 43 20 4f 46 46 00                       MUSIC OFF.

00009c86 <__c.2410>:
    9c86:	52 45 53 55 4d 45 00                                RESUME.

00009c8d <__c.2198>:
    9c8d:	4c 45 45 20 57 45 42 45 52 00                       LEE WEBER.

00009c97 <__c.2196>:
    9c97:	55 5a 45 42 4f 58 20 56 45 52 53 49 4f 4e 00        UZEBOX VERSION.

00009ca6 <__c.2194>:
    9ca6:	41 4c 45 43 20 42 4f 55 52 51 55 45 00              ALEC BOURQUE.

00009cb3 <__c.2192>:
    9cb3:	42 47 20 47 52 41 50 48 49 43 53 00                 BG GRAPHICS.

00009cbf <__c.2190>:
    9cbf:	43 48 41 52 4c 45 53 20 44 4f 54 59 00              CHARLES DOTY.

00009ccc <__c.2188>:
    9ccc:	4f 52 49 47 49 4e 41 4c 20 47 41 4d 45 00           ORIGINAL GAME.

00009cda <__ctors_end>:
    9cda:	11 24       	eor	r1, r1
    9cdc:	1f be       	out	0x3f, r1	; 63
    9cde:	cf ef       	ldi	r28, 0xFF	; 255
    9ce0:	d0 e1       	ldi	r29, 0x10	; 16
    9ce2:	de bf       	out	0x3e, r29	; 62
    9ce4:	cd bf       	out	0x3d, r28	; 61

00009ce6 <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    9ce6:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    9ce8:	88 e1       	ldi	r24, 0x18	; 24
    9cea:	0f b6       	in	r0, 0x3f	; 63
    9cec:	f8 94       	cli
    9cee:	80 93 60 00 	sts	0x0060, r24
    9cf2:	10 92 60 00 	sts	0x0060, r1
    9cf6:	0f be       	out	0x3f, r0	; 63

00009cf8 <__do_copy_data>:
    9cf8:	11 e0       	ldi	r17, 0x01	; 1
    9cfa:	a0 e0       	ldi	r26, 0x00	; 0
    9cfc:	b1 e0       	ldi	r27, 0x01	; 1
    9cfe:	e6 e5       	ldi	r30, 0x56	; 86
    9d00:	fe ee       	ldi	r31, 0xEE	; 238
    9d02:	02 c0       	rjmp	.+4      	; 0x9d08 <.do_copy_data_start>

00009d04 <.do_copy_data_loop>:
    9d04:	05 90       	lpm	r0, Z+
    9d06:	0d 92       	st	X+, r0

00009d08 <.do_copy_data_start>:
    9d08:	ae 30       	cpi	r26, 0x0E	; 14
    9d0a:	b1 07       	cpc	r27, r17
    9d0c:	d9 f7       	brne	.-10     	; 0x9d04 <.do_copy_data_loop>

00009d0e <__do_clear_bss>:
    9d0e:	10 e1       	ldi	r17, 0x10	; 16
    9d10:	a0 e2       	ldi	r26, 0x20	; 32
    9d12:	b1 e0       	ldi	r27, 0x01	; 1
    9d14:	01 c0       	rjmp	.+2      	; 0x9d18 <.do_clear_bss_start>

00009d16 <.do_clear_bss_loop>:
    9d16:	1d 92       	st	X+, r1

00009d18 <.do_clear_bss_start>:
    9d18:	a8 32       	cpi	r26, 0x28	; 40
    9d1a:	b1 07       	cpc	r27, r17
    9d1c:	e1 f7       	brne	.-8      	; 0x9d16 <.do_clear_bss_loop>

00009d1e <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    9d1e:	51 d4       	rcall	.+2210   	; 0xa5c2 <isEepromFormatted>
    9d20:	88 23       	and	r24, r24
    9d22:	09 f4       	brne	.+2      	; 0x9d26 <Initialize+0x8>
    9d24:	14 d5       	rcall	.+2600   	; 0xa74e <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    9d26:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    9d28:	91 e0       	ldi	r25, 0x01	; 1
    9d2a:	90 93 35 0f 	sts	0x0F35, r25
		tr4_barrel_hi=1;		
    9d2e:	90 93 36 0f 	sts	0x0F36, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    9d32:	90 93 34 0f 	sts	0x0F34, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    9d36:	10 92 21 0f 	sts	0x0F21, r1
    9d3a:	10 92 27 0f 	sts	0x0F27, r1
    9d3e:	10 92 2d 0f 	sts	0x0F2D, r1
    9d42:	10 92 33 0f 	sts	0x0F33, r1
    9d46:	10 92 39 0f 	sts	0x0F39, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    9d4a:	10 92 0a 0f 	sts	0x0F0A, r1
	sync_flags=0;
    9d4e:	10 92 0c 0f 	sts	0x0F0C, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    9d52:	82 e1       	ldi	r24, 0x12	; 18
    9d54:	80 93 0b 0f 	sts	0x0F0B, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    9d58:	80 ed       	ldi	r24, 0xD0	; 208
    9d5a:	80 93 14 0f 	sts	0x0F14, r24
	render_lines_count=FRAME_LINES;
    9d5e:	80 93 12 0f 	sts	0x0F12, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    9d62:	8c e1       	ldi	r24, 0x1C	; 28
    9d64:	80 93 13 0f 	sts	0x0F13, r24
	first_render_line=FIRST_RENDER_LINE;
    9d68:	80 93 11 0f 	sts	0x0F11, r24

//	joypad1_status_hi=0;
//	joypad2_status_hi=0;
	sound_enabled=1;
    9d6c:	90 93 20 0f 	sts	0x0F20, r25

	InitializeVideoMode();
    9d70:	0e 94 18 5c 	call	0xb830	; 0xb830 <InitializeVideoMode>
    9d74:	20 e9       	ldi	r18, 0x90	; 144
    9d76:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    9d78:	f9 01       	movw	r30, r18
    9d7a:	85 91       	lpm	r24, Z+
    9d7c:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    9d7e:	fc 01       	movw	r30, r24
    9d80:	f0 70       	andi	r31, 0x00	; 0
    9d82:	90 83       	st	Z, r25
    9d84:	2e 5f       	subi	r18, 0xFE	; 254
    9d86:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    9d88:	80 e0       	ldi	r24, 0x00	; 0
    9d8a:	2e 3b       	cpi	r18, 0xBE	; 190
    9d8c:	38 07       	cpc	r19, r24
    9d8e:	a1 f7       	brne	.-24     	; 0x9d78 <Initialize+0x5a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    9d90:	78 94       	sei
	
	DisplayLogo();
    9d92:	0e 94 17 5c 	call	0xb82e	; 0xb82e <DisplayLogo>
    9d96:	0e 94 f8 70 	call	0xe1f0	; 0xe1f0 <main>
    9d9a:	0c 94 29 77 	jmp	0xee52	; 0xee52 <_exit>

00009d9e <__bad_interrupt>:
    9d9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00009da2 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    9da2:	0c e0       	ldi	r16, 0x0C	; 12
    9da4:	0a 95       	dec	r16
    9da6:	f1 f7       	brne	.-4      	; 0x9da4 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    9da8:	e4 e8       	ldi	r30, 0x84	; 132
		ldi ZH,hi8(ram_tiles_restore);
    9daa:	fe e0       	ldi	r31, 0x0E	; 14

		ldi YL,lo8(vram)
    9dac:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    9dae:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    9db0:	20 91 c4 0f 	lds	r18, 0x0FC4


		clr r16
    9db4:	00 27       	eor	r16, r16

00009db6 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    9db6:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    9db8:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    9dba:	ac 0f       	add	r26, r28
		adc XH,YH
    9dbc:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    9dbe:	1c 91       	ld	r17, X
		std Z+2,r17
    9dc0:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    9dc2:	02 17       	cp	r16, r18
		brsh noov
    9dc4:	08 f4       	brcc	.+2      	; 0x9dc8 <noov>
		mov r17,r16
    9dc6:	10 2f       	mov	r17, r16

00009dc8 <noov>:
	noov:
		st X,r17
    9dc8:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    9dca:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    9dcc:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    9dce:	08 32       	cpi	r16, 0x28	; 40
		brlo upd_loop ;23
    9dd0:	90 f3       	brcs	.-28     	; 0x9db6 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    9dd2:	05 e1       	ldi	r16, 0x15	; 21

00009dd4 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    9dd4:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    9dd6:	1a 95       	dec	r17
		brne .-4
    9dd8:	f1 f7       	brne	.-4      	; 0x9dd6 <wait_loop+0x2>

		dec r16
    9dda:	0a 95       	dec	r16
		brne wait_loop
    9ddc:	d9 f7       	brne	.-10     	; 0x9dd4 <wait_loop>

		lds r2,overlay_tile_table
    9dde:	20 90 08 0f 	lds	r2, 0x0F08
		lds r3,overlay_tile_table+1
    9de2:	30 90 09 0f 	lds	r3, 0x0F09
		lds r16,tile_table_lo 
    9de6:	00 91 04 0f 	lds	r16, 0x0F04
		lds r17,tile_table_hi
    9dea:	10 91 05 0f 	lds	r17, 0x0F05
		movw r12,r16
    9dee:	68 01       	movw	r12, r16
		movw r6,r16
    9df0:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    9df2:	8a e1       	ldi	r24, 0x1A	; 26
		ldi YL,lo8(vram)
    9df4:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    9df6:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    9df8:	4e 01       	movw	r8, r28
		clr r0
    9dfa:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    9dfc:	30 91 07 0f 	lds	r19, 0x0F07
		cpi r19,0
    9e00:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    9e02:	09 f0       	breq	.+2      	; 0x9e06 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    9e04:	cc e2       	ldi	r28, 0x2C	; 44
		
		breq .+2
    9e06:	09 f0       	breq	.+2      	; 0x9e0a <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    9e08:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    9e0a:	09 f0       	breq	.+2      	; 0x9e0e <wait_loop+0x3a>
		mov r24,r19
    9e0c:	83 2f       	mov	r24, r19

		breq .+2
    9e0e:	09 f0       	breq	.+2      	; 0x9e12 <wait_loop+0x3e>
		movw r12,r2
    9e10:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    9e12:	00 ed       	ldi	r16, 0xD0	; 208
		mov r10,r16
    9e14:	a0 2e       	mov	r10, r16
		clr r22
    9e16:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    9e18:	78 e0       	ldi	r23, 0x08	; 8

00009e1a <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    9e1a:	74 d2       	rcall	.+1256   	; 0xa304 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    9e1c:	3c e0       	ldi	r19, 0x0C	; 12
    9e1e:	3a 95       	dec	r19
    9e20:	f1 f7       	brne	.-4      	; 0x9e1e <next_tile_line+0x4>
    9e22:	00 00       	nop
    9e24:	00 00       	nop

		;***draw line***
		call render_tile_line
    9e26:	2f d0       	rcall	.+94     	; 0x9e86 <render_tile_line>
    9e28:	3f e0       	ldi	r19, 0x0F	; 15

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    9e2a:	3a 95       	dec	r19
    9e2c:	f1 f7       	brne	.-4      	; 0x9e2a <next_tile_line+0x10>
    9e2e:	00 00       	nop
    9e30:	00 00       	nop
    9e32:	aa 94       	dec	r10

		dec r10
    9e34:	a9 f0       	breq	.+42     	; 0x9e60 <frame_end>
		breq frame_end
    9e36:	63 95       	inc	r22
	
		inc r22
    9e38:	c8 95       	lpm
		lpm ;3 nop
    9e3a:	68 30       	cpi	r22, 0x08	; 8

		cpi r22,TILE_HEIGHT ;last char line? 1
    9e3c:	31 f0       	breq	.+12     	; 0x9e4a <next_tile_row>
		breq next_tile_row 
    9e3e:	33 e0       	ldi	r19, 0x03	; 3
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    9e40:	3a 95       	dec	r19
    9e42:	f1 f7       	brne	.-4      	; 0x9e40 <next_tile_line+0x26>
    9e44:	00 00       	nop
    9e46:	00 00       	nop
    9e48:	e8 cf       	rjmp	.-48     	; 0x9e1a <next_tile_line>

00009e4a <next_tile_row>:
		
		rjmp next_tile_line	
    9e4a:	66 27       	eor	r22, r22

	next_tile_row:
		clr r22		;current char line			;1	
    9e4c:	00 24       	eor	r0, r0

		clr r0
    9e4e:	3e e1       	ldi	r19, 0x1E	; 30
		ldi r19,VRAM_TILES_H
    9e50:	c3 0f       	add	r28, r19
		add YL,r19
    9e52:	d0 1d       	adc	r29, r0
		adc YH,r0
    9e54:	8a 95       	dec	r24

		dec r24		;overlay done?
    9e56:	09 f4       	brne	.+2      	; 0x9e5a <next_tile_row+0x10>
		brne .+2
    9e58:	e4 01       	movw	r28, r8
		movw YL,r8	;main vram
    9e5a:	09 f4       	brne	.+2      	; 0x9e5e <next_tile_row+0x14>
		brne .+2
    9e5c:	63 01       	movw	r12, r6
		movw r12,r6	;main tile table
    9e5e:	dd cf       	rjmp	.-70     	; 0x9e1a <next_tile_line>

00009e60 <frame_end>:

	
		rjmp next_tile_line
    9e60:	36 e0       	ldi	r19, 0x06	; 6

	frame_end:

		WAIT r19,18
    9e62:	3a 95       	dec	r19
    9e64:	f1 f7       	brne	.-4      	; 0x9e62 <frame_end+0x2>
    9e66:	4e d2       	rcall	.+1180   	; 0xa304 <hsync_pulse>

		rcall hsync_pulse ;145
    9e68:	11 24       	eor	r1, r1
	
		clr r1
    9e6a:	0e 94 00 5c 	call	0xb800	; 0xb800 <RestoreBackground>
		call RestoreBackground
    9e6e:	e0 91 0c 0f 	lds	r30, 0x0F0C

		;set vsync flag & flip field
		lds ZL,sync_flags
    9e72:	42 e0       	ldi	r20, 0x02	; 2
		ldi r20,SYNC_FLAG_FIELD
    9e74:	e1 60       	ori	r30, 0x01	; 1
		ori ZL,SYNC_FLAG_VSYNC
    9e76:	e4 27       	eor	r30, r20
		eor ZL,r20
    9e78:	e0 93 0c 0f 	sts	0x0F0C, r30
		sts sync_flags,ZL
    9e7c:	e2 e0       	ldi	r30, 0x02	; 2

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    9e7e:	e0 93 36 00 	sts	0x0036, r30
		sts _SFR_MEM_ADDR(TIFR1),ZL
    9e82:	11 24       	eor	r1, r1



		clr r1
    9e84:	08 95       	ret

00009e86 <render_tile_line>:


		ret
    9e86:	de 01       	movw	r26, r28
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    9e88:	67 9f       	mul	r22, r23

		mul r22,r23
    9e8a:	86 01       	movw	r16, r12

		movw r16,r12 ;current tile table (main or overlay)
    9e8c:	00 50       	subi	r16, 0x00	; 0
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    9e8e:	1a 40       	sbci	r17, 0x0A	; 10
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    9e90:	00 0d       	add	r16, r0

		add r16,r0
    9e92:	11 1d       	adc	r17, r1
		adc r17,r1
    9e94:	18 01       	movw	r2, r16
		movw r2,r16			;rom tiles
    9e96:	04 e8       	ldi	r16, 0x84	; 132

		ldi r16,lo8(ram_tiles)
    9e98:	14 e0       	ldi	r17, 0x04	; 4
		ldi r17,hi8(ram_tiles)
    9e9a:	00 0d       	add	r16, r0
		add r16,r0
    9e9c:	11 1d       	adc	r17, r1
		adc r17,r1
    9e9e:	28 01       	movw	r4, r16
		movw r4,r16			;ram tiles
    9ea0:	30 e4       	ldi	r19, 0x40	; 64

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    9ea2:	1e e1       	ldi	r17, 0x1E	; 30
		ldi r17,SCREEN_TILES_H
    9ea4:	2d 91       	ld	r18, X+

	    ld r18,X+     	;load next tile # from VRAM
    9ea6:	23 9f       	mul	r18, r19

		mul r18,r19 	;tile*width*height
    9ea8:	a1 01       	movw	r20, r2
		movw r20,r2		;rom tiles
    9eaa:	28 32       	cpi	r18, 0x28	; 40
		
		cpi r18,RAM_TILES_COUNT
    9eac:	08 f4       	brcc	.+2      	; 0x9eb0 <render_tile_line+0x2a>
		brcc .+2
    9eae:	a2 01       	movw	r20, r4
		movw r20,r4		;ram tiles
    9eb0:	04 0e       	add	r0, r20

	    add r0,r20    ;add title table address +row offset
    9eb2:	15 1e       	adc	r1, r21
	    adc r1,r21
    9eb4:	f0 01       	movw	r30, r0

		movw ZL,r0
    9eb6:	28 32       	cpi	r18, 0x28	; 40
		
		cpi r18,RAM_TILES_COUNT
    9eb8:	f0 f0       	brcs	.+60     	; 0x9ef6 <ramloop>

00009eba <romloop>:
		brcs ramloop
    9eba:	05 91       	lpm	r16, Z+
	

	romloop:
	    lpm r16,Z+
    9ebc:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    9ebe:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    9ec0:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    9ec2:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    9ec4:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    9ec6:	05 91       	lpm	r16, Z+


	    lpm r16,Z+
    9ec8:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    9eca:	28 32       	cpi	r18, 0x28	; 40
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    9ecc:	00 00       	nop
		nop
    9ece:	05 91       	lpm	r16, Z+

	    lpm r16,Z+
    9ed0:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    9ed2:	08 f4       	brcc	.+2      	; 0x9ed6 <romloop+0x1c>
		brsh .+2		;skip in next tile is in ROM	
    9ed4:	a2 01       	movw	r20, r4
		movw r20,r4 	;load RAM title table address +row offset	
    9ed6:	05 91       	lpm	r16, Z+
   
	    lpm r16,Z+
    9ed8:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    9eda:	04 0e       	add	r0, r20
		add r0,r20		;add title table address +row offset lsb
    9edc:	15 1e       	adc	r1, r21
	    adc r1,r21		;add title table address +row offset msb
    9ede:	05 91       	lpm	r16, Z+

	    lpm r16,Z+
    9ee0:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    9ee2:	28 32       	cpi	r18, 0x28	; 40
		
		cpi r18,RAM_TILES_COUNT	
    9ee4:	1a 95       	dec	r17
		dec r17			;decrement tiles to draw on line
    9ee6:	05 91       	lpm	r16, Z+
   
	    lpm r16,Z+
    9ee8:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    9eea:	05 91       	lpm	r16, Z+
	    lpm r16,Z+
    9eec:	31 f1       	breq	.+76     	; 0x9f3a <end>

		breq end	
    9eee:	f0 01       	movw	r30, r0
	    movw ZL,r0   	;copy next tile adress
    9ef0:	08 b9       	out	0x08, r16	; 8

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    9ef2:	18 f7       	brcc	.-58     	; 0x9eba <romloop>
	    brcc romloop
    9ef4:	00 c0       	rjmp	.+0      	; 0x9ef6 <ramloop>

00009ef6 <ramloop>:
	
		rjmp .
    9ef6:	01 91       	ld	r16, Z+

	ramloop:

	    ld r16,Z+
    9ef8:	08 b9       	out	0x08, r16	; 8
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    9efa:	2d 91       	ld	r18, X+
	    ld r18,X+     ;load next tile # from VRAM
    9efc:	01 91       	ld	r16, Z+

	    ld r16,Z+ 
    9efe:	00 00       	nop
		nop   
    9f00:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    9f02:	23 9f       	mul	r18, r19
		mul r18,r19 ;tile*width*height
    9f04:	01 91       	ld	r16, Z+


	    ld r16,Z+
    9f06:	00 00       	nop
		nop
    9f08:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    9f0a:	28 32       	cpi	r18, 0x28	; 40
		cpi r18,RAM_TILES_COUNT
    9f0c:	00 c0       	rjmp	.+0      	; 0x9f0e <ramloop+0x18>
   		rjmp .
    9f0e:	01 91       	ld	r16, Z+

	    ld r16,Z+
    9f10:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    9f12:	08 f0       	brcs	.+2      	; 0x9f16 <ramloop+0x20>
		brcs .+2 
    9f14:	a1 01       	movw	r20, r2
		movw r20,r2 	;ROM title table address +row offset	
    9f16:	01 91       	ld	r16, Z+
   
   
	    ld r16,Z+
    9f18:	04 0e       	add	r0, r20
	    add r0,r20    ;add title table address +row offset
    9f1a:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    9f1c:	15 1e       	adc	r1, r21
	    adc r1,r21
    9f1e:	00 c0       	rjmp	.+0      	; 0x9f20 <ramloop+0x2a>
		rjmp .
    9f20:	01 91       	ld	r16, Z+
    
		ld r16,Z+		
    9f22:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    9f24:	28 32       	cpi	r18, 0x28	; 40
		cpi r18,RAM_TILES_COUNT
    9f26:	00 c0       	rjmp	.+0      	; 0x9f28 <ramloop+0x32>
		rjmp .  
    9f28:	01 91       	ld	r16, Z+

	    ld r16,Z+	
    9f2a:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    9f2c:	01 91       	ld	r16, Z+
	    ld r16,Z+
    9f2e:	1a 95       	dec	r17

	    dec r17
    9f30:	21 f0       	breq	.+8      	; 0x9f3a <end>
	    breq end
    9f32:	f0 01       	movw	r30, r0
	
		movw ZL,r0
    9f34:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    9f36:	08 f6       	brcc	.-126    	; 0x9eba <romloop>
	
	    brcc romloop
    9f38:	de cf       	rjmp	.-68     	; 0x9ef6 <ramloop>

00009f3a <end>:
		rjmp ramloop
    9f3a:	08 b9       	out	0x08, r16	; 8
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    9f3c:	00 27       	eor	r16, r16
		clr r16	
    9f3e:	c8 95       	lpm
		lpm	
    9f40:	00 00       	nop
		nop
    9f42:	08 b9       	out	0x08, r16	; 8
		out _SFR_IO_ADDR(DATA_PORT),r16        
    9f44:	08 95       	ret

00009f46 <CopyTileToRam>:

		ret
    9f46:	20 e4       	ldi	r18, 0x40	; 64
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    9f48:	e0 91 04 0f 	lds	r30, 0x0F04

	;compute source adress
	lds ZL,tile_table_lo
    9f4c:	f0 91 05 0f 	lds	r31, 0x0F05
	lds ZH,tile_table_hi
    9f50:	88 52       	subi	r24, 0x28	; 40
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    9f52:	82 9f       	mul	r24, r18
	mul r24,r18
    9f54:	e0 0d       	add	r30, r0
	add ZL,r0
    9f56:	f1 1d       	adc	r31, r1
	adc ZH,r1
    9f58:	a4 e8       	ldi	r26, 0x84	; 132

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    9f5a:	b4 e0       	ldi	r27, 0x04	; 4
	ldi XH,hi8(ram_tiles)
    9f5c:	62 9f       	mul	r22, r18
	mul r22,r18
    9f5e:	a0 0d       	add	r26, r0
	add XL,r0
    9f60:	b1 1d       	adc	r27, r1
	adc XH,r1
    9f62:	00 24       	eor	r0, r0

	clr r0
    9f64:	05 90       	lpm	r0, Z+
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    9f66:	0d 92       	st	X+, r0
    9f68:	05 90       	lpm	r0, Z+
    9f6a:	0d 92       	st	X+, r0
    9f6c:	05 90       	lpm	r0, Z+
    9f6e:	0d 92       	st	X+, r0
    9f70:	05 90       	lpm	r0, Z+
    9f72:	0d 92       	st	X+, r0
    9f74:	05 90       	lpm	r0, Z+
    9f76:	0d 92       	st	X+, r0
    9f78:	05 90       	lpm	r0, Z+
    9f7a:	0d 92       	st	X+, r0
    9f7c:	05 90       	lpm	r0, Z+
    9f7e:	0d 92       	st	X+, r0
    9f80:	05 90       	lpm	r0, Z+
    9f82:	0d 92       	st	X+, r0
    9f84:	05 90       	lpm	r0, Z+
    9f86:	0d 92       	st	X+, r0
    9f88:	05 90       	lpm	r0, Z+
    9f8a:	0d 92       	st	X+, r0
    9f8c:	05 90       	lpm	r0, Z+
    9f8e:	0d 92       	st	X+, r0
    9f90:	05 90       	lpm	r0, Z+
    9f92:	0d 92       	st	X+, r0
    9f94:	05 90       	lpm	r0, Z+
    9f96:	0d 92       	st	X+, r0
    9f98:	05 90       	lpm	r0, Z+
    9f9a:	0d 92       	st	X+, r0
    9f9c:	05 90       	lpm	r0, Z+
    9f9e:	0d 92       	st	X+, r0
    9fa0:	05 90       	lpm	r0, Z+
    9fa2:	0d 92       	st	X+, r0
    9fa4:	05 90       	lpm	r0, Z+
    9fa6:	0d 92       	st	X+, r0
    9fa8:	05 90       	lpm	r0, Z+
    9faa:	0d 92       	st	X+, r0
    9fac:	05 90       	lpm	r0, Z+
    9fae:	0d 92       	st	X+, r0
    9fb0:	05 90       	lpm	r0, Z+
    9fb2:	0d 92       	st	X+, r0
    9fb4:	05 90       	lpm	r0, Z+
    9fb6:	0d 92       	st	X+, r0
    9fb8:	05 90       	lpm	r0, Z+
    9fba:	0d 92       	st	X+, r0
    9fbc:	05 90       	lpm	r0, Z+
    9fbe:	0d 92       	st	X+, r0
    9fc0:	05 90       	lpm	r0, Z+
    9fc2:	0d 92       	st	X+, r0
    9fc4:	05 90       	lpm	r0, Z+
    9fc6:	0d 92       	st	X+, r0
    9fc8:	05 90       	lpm	r0, Z+
    9fca:	0d 92       	st	X+, r0
    9fcc:	05 90       	lpm	r0, Z+
    9fce:	0d 92       	st	X+, r0
    9fd0:	05 90       	lpm	r0, Z+
    9fd2:	0d 92       	st	X+, r0
    9fd4:	05 90       	lpm	r0, Z+
    9fd6:	0d 92       	st	X+, r0
    9fd8:	05 90       	lpm	r0, Z+
    9fda:	0d 92       	st	X+, r0
    9fdc:	05 90       	lpm	r0, Z+
    9fde:	0d 92       	st	X+, r0
    9fe0:	05 90       	lpm	r0, Z+
    9fe2:	0d 92       	st	X+, r0
    9fe4:	05 90       	lpm	r0, Z+
    9fe6:	0d 92       	st	X+, r0
    9fe8:	05 90       	lpm	r0, Z+
    9fea:	0d 92       	st	X+, r0
    9fec:	05 90       	lpm	r0, Z+
    9fee:	0d 92       	st	X+, r0
    9ff0:	05 90       	lpm	r0, Z+
    9ff2:	0d 92       	st	X+, r0
    9ff4:	05 90       	lpm	r0, Z+
    9ff6:	0d 92       	st	X+, r0
    9ff8:	05 90       	lpm	r0, Z+
    9ffa:	0d 92       	st	X+, r0
    9ffc:	05 90       	lpm	r0, Z+
    9ffe:	0d 92       	st	X+, r0
    a000:	05 90       	lpm	r0, Z+
    a002:	0d 92       	st	X+, r0
    a004:	05 90       	lpm	r0, Z+
    a006:	0d 92       	st	X+, r0
    a008:	05 90       	lpm	r0, Z+
    a00a:	0d 92       	st	X+, r0
    a00c:	05 90       	lpm	r0, Z+
    a00e:	0d 92       	st	X+, r0
    a010:	05 90       	lpm	r0, Z+
    a012:	0d 92       	st	X+, r0
    a014:	05 90       	lpm	r0, Z+
    a016:	0d 92       	st	X+, r0
    a018:	05 90       	lpm	r0, Z+
    a01a:	0d 92       	st	X+, r0
    a01c:	05 90       	lpm	r0, Z+
    a01e:	0d 92       	st	X+, r0
    a020:	05 90       	lpm	r0, Z+
    a022:	0d 92       	st	X+, r0
    a024:	05 90       	lpm	r0, Z+
    a026:	0d 92       	st	X+, r0
    a028:	05 90       	lpm	r0, Z+
    a02a:	0d 92       	st	X+, r0
    a02c:	05 90       	lpm	r0, Z+
    a02e:	0d 92       	st	X+, r0
    a030:	05 90       	lpm	r0, Z+
    a032:	0d 92       	st	X+, r0
    a034:	05 90       	lpm	r0, Z+
    a036:	0d 92       	st	X+, r0
    a038:	05 90       	lpm	r0, Z+
    a03a:	0d 92       	st	X+, r0
    a03c:	05 90       	lpm	r0, Z+
    a03e:	0d 92       	st	X+, r0
    a040:	05 90       	lpm	r0, Z+
    a042:	0d 92       	st	X+, r0
    a044:	05 90       	lpm	r0, Z+
    a046:	0d 92       	st	X+, r0
    a048:	05 90       	lpm	r0, Z+
    a04a:	0d 92       	st	X+, r0
    a04c:	05 90       	lpm	r0, Z+
    a04e:	0d 92       	st	X+, r0
    a050:	05 90       	lpm	r0, Z+
    a052:	0d 92       	st	X+, r0
    a054:	05 90       	lpm	r0, Z+
    a056:	0d 92       	st	X+, r0
    a058:	05 90       	lpm	r0, Z+
    a05a:	0d 92       	st	X+, r0
    a05c:	05 90       	lpm	r0, Z+
    a05e:	0d 92       	st	X+, r0
    a060:	05 90       	lpm	r0, Z+
    a062:	0d 92       	st	X+, r0
    a064:	11 24       	eor	r1, r1


	clr r1
    a066:	08 95       	ret

0000a068 <BlitSprite>:
	ret
    a068:	0f 93       	push	r16
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    a06a:	1f 93       	push	r17
	push r17
    a06c:	cf 93       	push	r28
	push YL
    a06e:	df 93       	push	r29
	push YH
    a070:	94 e0       	ldi	r25, 0x04	; 4

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    a072:	89 9f       	mul	r24, r25
	mul r24,r25
    a074:	ec e2       	ldi	r30, 0x2C	; 44

	ldi ZL,lo8(sprites)	
    a076:	f4 e0       	ldi	r31, 0x04	; 4
	ldi ZH,hi8(sprites)	
    a078:	e0 0d       	add	r30, r0
	add ZL,r0
    a07a:	f1 1d       	adc	r31, r1
	adc ZH,r1
    a07c:	03 81       	ldd	r16, Z+3	; 0x03

	ldd r16,Z+sprFlags
    a07e:	82 81       	ldd	r24, Z+2	; 0x02

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    a080:	e0 e4       	ldi	r30, 0x40	; 64
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    a082:	8e 9f       	mul	r24, r30
	mul r24,r30
    a084:	d0 01       	movw	r26, r0
	movw r26,r0
    a086:	98 e0       	ldi	r25, 0x08	; 8
	
	;get tile bank addr
	ldi r25,4*2
    a088:	09 9f       	mul	r16, r25
	mul r16,r25
    a08a:	cc ef       	ldi	r28, 0xFC	; 252
	ldi YL,lo8(sprites_tile_banks)	
    a08c:	de e0       	ldi	r29, 0x0E	; 14
	ldi YH,hi8(sprites_tile_banks)	
    a08e:	00 24       	eor	r0, r0
	clr r0
    a090:	c1 0d       	add	r28, r1
	add YL,r1
    a092:	d0 1d       	adc	r29, r0
	adc YH,r0		
    a094:	e8 81       	ld	r30, Y
	ldd ZL,Y+0
    a096:	f9 81       	ldd	r31, Y+1	; 0x01
	ldd ZH,Y+1
    a098:	ea 0f       	add	r30, r26
	add ZL,r26	;tile data src
    a09a:	fb 1f       	adc	r31, r27
	adc ZH,r27
    a09c:	a4 e8       	ldi	r26, 0x84	; 132
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    a09e:	b4 e0       	ldi	r27, 0x04	; 4
	ldi XH,hi8(ram_tiles)
    a0a0:	90 e4       	ldi	r25, 0x40	; 64
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    a0a2:	69 9f       	mul	r22, r25
	mul r22,r25
    a0a4:	a0 0d       	add	r26, r0
	add XL,r0
    a0a6:	b1 1d       	adc	r27, r1
	adc XH,r1
    a0a8:	11 24       	eor	r1, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    a0aa:	dd 27       	eor	r29, r29
	clr YH		;hi8(srcXdiff)
    a0ac:	40 30       	cpi	r20, 0x00	; 0

	cpi r20,0	
    a0ae:	51 f4       	brne	.+20     	; 0xa0c4 <x_2nd_tile>
	brne x_2nd_tile
    a0b0:	a2 0f       	add	r26, r18
	
	add XL,r18	;dest+=dx
    a0b2:	b1 1d       	adc	r27, r1
	adc XH,r1
    a0b4:	82 2f       	mov	r24, r18
	mov r24,r18	;destXdiff=dx
    a0b6:	c2 2f       	mov	r28, r18
	mov YL,r18	;srcXdiff=dx
    a0b8:	00 ff       	sbrs	r16, 0

	sbrs r16,SPRITE_FLIP_X_BIT
    a0ba:	11 c0       	rjmp	.+34     	; 0xa0de <x_check_end>
	rjmp x_check_end
    a0bc:	37 96       	adiw	r30, 0x07	; 7

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    a0be:	c0 e1       	ldi	r28, 0x10	; 16
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    a0c0:	c2 1b       	sub	r28, r18
	sub YL,r18	
    a0c2:	0d c0       	rjmp	.+26     	; 0xa0de <x_check_end>

0000a0c4 <x_2nd_tile>:
	rjmp x_check_end
    a0c4:	88 e0       	ldi	r24, 0x08	; 8

x_2nd_tile:
	ldi r24,TILE_WIDTH
    a0c6:	82 1b       	sub	r24, r18
	sub r24,r18		;8-DX = xdiff for dest
    a0c8:	00 fd       	sbrc	r16, 0

	sbrc r16,SPRITE_FLIP_X_BIT
    a0ca:	04 c0       	rjmp	.+8      	; 0xa0d4 <x2_flip_x>
	rjmp x2_flip_x
    a0cc:	c8 2f       	mov	r28, r24

	mov YL,r24		;srcXdiff=destXdiff;
    a0ce:	e8 0f       	add	r30, r24
	add ZL,r24		;src+=destXdiff;
    a0d0:	f1 1d       	adc	r31, r1
	adc ZH,r1	
    a0d2:	05 c0       	rjmp	.+10     	; 0xa0de <x_check_end>

0000a0d4 <x2_flip_x>:
	rjmp x_check_end
    a0d4:	c8 e0       	ldi	r28, 0x08	; 8

x2_flip_x:
	ldi YL,TILE_WIDTH
    a0d6:	c2 0f       	add	r28, r18
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    a0d8:	e2 0f       	add	r30, r18
	add ZL,r18		;src+=dx;
    a0da:	f1 1d       	adc	r31, r1
	adc ZH,r1
    a0dc:	31 97       	sbiw	r30, 0x01	; 1

0000a0de <x_check_end>:
	sbiw ZL,1		;src--;
    a0de:	50 30       	cpi	r21, 0x00	; 0
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    a0e0:	41 f4       	brne	.+16     	; 0xa0f2 <y_2nd_tile>
	brne y_2nd_tile
    a0e2:	98 e0       	ldi	r25, 0x08	; 8

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    a0e4:	93 9f       	mul	r25, r19
	mul r25,r19			
    a0e6:	a0 0d       	add	r26, r0
	add XL,r0
    a0e8:	b1 1d       	adc	r27, r1
	adc XH,r1
    a0ea:	93 2f       	mov	r25, r19

	mov r25,r19			;ydiff=dy
    a0ec:	01 fd       	sbrc	r16, 1

	sbrc r16,SPRITE_FLIP_Y_BIT
    a0ee:	f8 96       	adiw	r30, 0x38	; 56
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    a0f0:	0a c0       	rjmp	.+20     	; 0xa106 <y_check_end>

0000a0f2 <y_2nd_tile>:

	rjmp y_check_end
    a0f2:	98 e0       	ldi	r25, 0x08	; 8

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    a0f4:	93 1b       	sub	r25, r19
	sub r25,r19	
    a0f6:	63 2f       	mov	r22, r19
	
	mov r22,r19			;temp=dy-1
    a0f8:	6a 95       	dec	r22
	dec r22
    a0fa:	01 ff       	sbrs	r16, 1
	sbrs r16,SPRITE_FLIP_Y_BIT
    a0fc:	69 2f       	mov	r22, r25
	mov r22,r25			;temp=ydiff
    a0fe:	58 e0       	ldi	r21, 0x08	; 8

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    a100:	56 9f       	mul	r21, r22
	mul r21,r22
    a102:	e0 0d       	add	r30, r0
	add ZL,r0
    a104:	f1 1d       	adc	r31, r1

0000a106 <y_check_end>:
	adc ZH,r1	
    a106:	6f ef       	ldi	r22, 0xFF	; 255
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    a108:	7f ef       	ldi	r23, 0xFF	; 255
	ser r23
    a10a:	00 ff       	sbrs	r16, 0
	sbrs r16,SPRITE_FLIP_X_BIT
    a10c:	61 e0       	ldi	r22, 0x01	; 1
	ldi r22,1	;step=1
    a10e:	00 ff       	sbrs	r16, 0
	sbrs r16,SPRITE_FLIP_X_BIT
    a110:	77 27       	eor	r23, r23
	clr r23
    a112:	01 fd       	sbrc	r16, 1

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    a114:	60 97       	sbiw	r28, 0x10	; 16
	sbiw YL,(TILE_WIDTH*2)
    a116:	11 24       	eor	r1, r1
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    a118:	3e ef       	ldi	r19, 0xFE	; 254
	ldi r19,TRANSLUCENT_COLOR
    a11a:	58 e0       	ldi	r21, 0x08	; 8

	ldi r21,TILE_HEIGHT
    a11c:	59 1b       	sub	r21, r25

0000a11e <y_loop>:
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    a11e:	48 e0       	ldi	r20, 0x08	; 8

y_loop:
	ldi r20,TILE_WIDTH
    a120:	48 1b       	sub	r20, r24

0000a122 <x_loop>:
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    a122:	24 91       	lpm	r18, Z+

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    a124:	23 13       	cpse	r18, r19
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    a126:	2c 93       	st	X, r18
	st X,r18		;*dest=px;
    a128:	11 96       	adiw	r26, 0x01	; 1
	adiw XL,1
    a12a:	e6 0f       	add	r30, r22
	add ZL,r22		;src+=step;
    a12c:	f7 1f       	adc	r31, r23
	adc ZH,r23
    a12e:	4a 95       	dec	r20
	dec r20
    a130:	c1 f7       	brne	.-16     	; 0xa122 <x_loop>
	brne x_loop
    a132:	ec 0f       	add	r30, r28

	add ZL,YL		;src+=srcXdiff
    a134:	fd 1f       	adc	r31, r29
	adc ZH,YH
    a136:	a8 0f       	add	r26, r24
	add XL,r24		;dest+=destXdiff
    a138:	b1 1d       	adc	r27, r1
	adc XH,r1
    a13a:	5a 95       	dec	r21
	dec r21
    a13c:	81 f7       	brne	.-32     	; 0xa11e <y_loop>
	brne y_loop
    a13e:	df 91       	pop	r29


	pop YH
    a140:	cf 91       	pop	r28
	pop YL
    a142:	1f 91       	pop	r17
	pop r17
    a144:	0f 91       	pop	r16
	pop r16
    a146:	08 95       	ret

0000a148 <__vector_13>:
	ret
    a148:	0f 92       	push	r0

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    a14a:	1f 92       	push	r1
	push r1
    a14c:	ef 93       	push	r30
	push ZL;2
    a14e:	ff 93       	push	r31
	push ZH;2
    a150:	ef b7       	in	r30, 0x3f	; 63
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    a152:	ef 93       	push	r30
	push ZL ;2		
    a154:	e0 91 84 00 	lds	r30, 0x0084

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    a158:	e2 51       	subi	r30, 0x12	; 18
	subi ZL,0x12 ;MIN_INT_LATENCY
    a15a:	f1 e0       	ldi	r31, 0x01	; 1

0000a15c <latency_loop>:

	ldi ZH,1
    a15c:	ef 17       	cp	r30, r31
latency_loop:
	cp ZL,ZH
    a15e:	00 f0       	brcs	.+0      	; 0xa160 <latency_loop+0x4>
	brlo .		;advance PC to next instruction	
    a160:	f3 95       	inc	r31
	inc ZH
    a162:	fa 30       	cpi	r31, 0x0A	; 10
	cpi ZH,10
    a164:	d8 f3       	brcs	.-10     	; 0xa15c <latency_loop>
	brlo latency_loop
    a166:	00 c0       	rjmp	.+0      	; 0xa168 <latency_loop+0xc>
	jmp .
    a168:	e0 91 0b 0f 	lds	r30, 0x0F0B
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    a16c:	ea 95       	dec	r30
    a16e:	e0 93 0b 0f 	sts	0x0F0B, r30
	dec ZL
	sts sync_pulse,ZL
    a172:	f0 91 0a 0f 	lds	r31, 0x0F0A

	;process sync phases
	lds ZH,sync_phase
    a176:	f0 fd       	sbrc	r31, 0
    a178:	54 c0       	rjmp	.+168    	; 0xa222 <sync_hsync>
	sbrc ZH,0
    a17a:	ec 30       	cpi	r30, 0x0C	; 12
	rjmp sync_hsync
    a17c:	90 f0       	brcs	.+36     	; 0xa1a2 <sync_eq>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    a17e:	f3 e0       	ldi	r31, 0x03	; 3
	brlo sync_eq
    a180:	f0 93 89 00 	sts	0x0089, r31

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    a184:	fd e8       	ldi	r31, 0x8D	; 141
    a186:	f0 93 88 00 	sts	0x0088, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    a18a:	e0 fb       	bst	r30, 0
    a18c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    a18e:	1e f4       	brtc	.+6      	; 0xa196 <sync_pre_eq_no_sound_update>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    a190:	e1 e0       	ldi	r30, 0x01	; 1
	brtc sync_pre_eq_no_sound_update
    a192:	c7 d0       	rcall	.+398    	; 0xa322 <update_sound>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    a194:	b0 c0       	rjmp	.+352    	; 0xa2f6 <sync_end>

0000a196 <sync_pre_eq_no_sound_update>:
	call update_sound
    a196:	e5 e1       	ldi	r30, 0x15	; 21
    a198:	ea 95       	dec	r30
	rjmp sync_end
    a19a:	f1 f7       	brne	.-4      	; 0xa198 <sync_pre_eq_no_sound_update+0x2>

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    a19c:	00 00       	nop
    a19e:	28 9a       	sbi	0x05, 0	; 5
    a1a0:	aa c0       	rjmp	.+340    	; 0xa2f6 <sync_end>

0000a1a2 <sync_eq>:
    a1a2:	e6 30       	cpi	r30, 0x06	; 6
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    a1a4:	30 f1       	brcs	.+76     	; 0xa1f2 <sync_post_eq>
		
	rjmp sync_end
    a1a6:	00 c0       	rjmp	.+0      	; 0xa1a8 <sync_eq+0x6>
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    a1a8:	00 c0       	rjmp	.+0      	; 0xa1aa <sync_eq+0x8>
	brlo sync_post_eq
    a1aa:	28 98       	cbi	0x05, 0	; 5

	rjmp .
    a1ac:	e0 fb       	bst	r30, 0
	rjmp .
    a1ae:	e4 e0       	ldi	r30, 0x04	; 4

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    a1b0:	0e f4       	brtc	.+2      	; 0xa1b4 <sync_eq_skip>

	bst ZL,0
    a1b2:	b7 d0       	rcall	.+366    	; 0xa322 <update_sound>

0000a1b4 <sync_eq_skip>:
	ldi ZL,4
    a1b4:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    a1b6:	e0 93 36 00 	sts	0x0036, r30
	
	call update_sound
    a1ba:	e6 e0       	ldi	r30, 0x06	; 6
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    a1bc:	e0 93 6f 00 	sts	0x006F, r30
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    a1c0:	9a c0       	rjmp	.+308    	; 0xa2f6 <sync_end>

0000a1c2 <__vector_14>:
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    a1c2:	ef 93       	push	r30
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    a1c4:	ef b7       	in	r30, 0x3f	; 63
    a1c6:	ef 93       	push	r30

	rjmp sync_end
    a1c8:	e0 91 84 00 	lds	r30, 0x0084
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    a1cc:	ed 55       	subi	r30, 0x5D	; 93
	push ZL ;2		
    a1ce:	e1 30       	cpi	r30, 0x01	; 1

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    a1d0:	00 f0       	brcs	.+0      	; 0xa1d2 <__vector_14+0x10>
    a1d2:	e2 30       	cpi	r30, 0x02	; 2
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    a1d4:	00 f0       	brcs	.+0      	; 0xa1d6 <__vector_14+0x14>

	cpi ZL,1
    a1d6:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    a1d8:	00 f0       	brcs	.+0      	; 0xa1da <__vector_14+0x18>

	cpi ZL,2
    a1da:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    a1dc:	00 f0       	brcs	.+0      	; 0xa1de <__vector_14+0x1c>

	cpi ZL,3
    a1de:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    a1e0:	00 f0       	brcs	.+0      	; 0xa1e2 <__vector_14+0x20>

	cpi ZL,4
    a1e2:	28 9a       	sbi	0x05, 0	; 5
	brlo .		;advance PC to next instruction
    a1e4:	e2 e0       	ldi	r30, 0x02	; 2

	cpi ZL,5
    a1e6:	e0 93 6f 00 	sts	0x006F, r30
	brlo .		;advance PC to next instruction

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    a1ea:	ef 91       	pop	r30
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    a1ec:	ef bf       	out	0x3f, r30	; 63
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    a1ee:	ef 91       	pop	r30
    a1f0:	18 95       	reti

0000a1f2 <sync_post_eq>:
	
	;restore flags
	pop ZL
    a1f2:	00 c0       	rjmp	.+0      	; 0xa1f4 <sync_post_eq+0x2>
	out _SFR_IO_ADDR(SREG),ZL	
    a1f4:	e0 fb       	bst	r30, 0
	pop ZL
    a1f6:	28 98       	cbi	0x05, 0	; 5
	reti
    a1f8:	1e f4       	brtc	.+6      	; 0xa200 <sync_post_eq_no_sound_update>
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    a1fa:	e1 e0       	ldi	r30, 0x01	; 1

	bst ZL,0
    a1fc:	92 d0       	rcall	.+292    	; 0xa322 <update_sound>
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    a1fe:	05 c0       	rjmp	.+10     	; 0xa20a <sync_pre_eq_cont>

0000a200 <sync_post_eq_no_sound_update>:
	brtc sync_post_eq_no_sound_update
    a200:	e5 e1       	ldi	r30, 0x15	; 21
	ldi ZL,1	
    a202:	ea 95       	dec	r30
	call update_sound
    a204:	f1 f7       	brne	.-4      	; 0xa202 <sync_post_eq_no_sound_update+0x2>
    a206:	00 00       	nop
	rjmp sync_pre_eq_cont
    a208:	28 9a       	sbi	0x05, 0	; 5

0000a20a <sync_pre_eq_cont>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    a20a:	e0 91 0b 0f 	lds	r30, 0x0F0B
    a20e:	e0 30       	cpi	r30, 0x00	; 0
    a210:	09 f0       	breq	.+2      	; 0xa214 <sync_pre_eq_cont+0xa>

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    a212:	71 c0       	rjmp	.+226    	; 0xa2f6 <sync_end>

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    a214:	ed ef       	ldi	r30, 0xFD	; 253
    a216:	e0 93 0b 0f 	sts	0x0F0B, r30
	cpi ZL,0
	breq .+2 ;skip rjmp
    a21a:	e1 e0       	ldi	r30, 0x01	; 1
	rjmp sync_end
    a21c:	e0 93 0a 0f 	sts	0x0F0A, r30
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
	sts sync_pulse,ZL
    a220:	6a c0       	rjmp	.+212    	; 0xa2f6 <sync_end>

0000a222 <sync_hsync>:
    a222:	e7 e0       	ldi	r30, 0x07	; 7
	ldi ZL,1
    a224:	e0 93 89 00 	sts	0x0089, r30
	sts sync_phase,ZL
    a228:	eb e1       	ldi	r30, 0x1B	; 27
	
	rjmp sync_end
    a22a:	e0 93 88 00 	sts	0x0088, r30
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    a22e:	00 c0       	rjmp	.+0      	; 0xa230 <sync_hsync+0xe>
    a230:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,lo8(HDRIVE_CL)
    a232:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    a234:	00 c0       	rjmp	.+0      	; 0xa236 <sync_hsync+0x14>
    a236:	75 d0       	rcall	.+234    	; 0xa322 <update_sound>
	rjmp .
    a238:	fd ef       	ldi	r31, 0xFD	; 253

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    a23a:	00 90 11 0f 	lds	r0, 0x0F11
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
	rjmp .
    a23e:	f0 19       	sub	r31, r0
	call update_sound
    a240:	e0 91 0b 0f 	lds	r30, 0x0F0B

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    a244:	ef 17       	cp	r30, r31
	lds r0,first_render_line
    a246:	c8 f4       	brcc	.+50     	; 0xa27a <no_render>
    a248:	fd ef       	ldi	r31, 0xFD	; 253
	sub ZH,r0				
    a24a:	00 90 11 0f 	lds	r0, 0x0F11
	lds ZL,sync_pulse
    a24e:	f0 19       	sub	r31, r0
	cp ZL,ZH
    a250:	00 90 12 0f 	lds	r0, 0x0F12
	brsh no_render

	ldi ZH,SYNC_HSYNC_PULSES
    a254:	f0 19       	sub	r31, r0
	lds r0,first_render_line
    a256:	ef 17       	cp	r30, r31
    a258:	80 f0       	brcs	.+32     	; 0xa27a <no_render>
	sub ZH,r0				
    a25a:	ed e1       	ldi	r30, 0x1D	; 29
	lds r0,render_lines_count
    a25c:	ff 27       	eor	r31, r31

0000a25e <push_loop>:
    a25e:	00 80       	ld	r0, Z
	sub ZH,r0			
    a260:	0f 92       	push	r0
	cp ZL,ZH
    a262:	ea 95       	dec	r30
	brlo no_render
    a264:	e1 f7       	brne	.-8      	; 0xa25e <push_loop>

	;push r1-r29
	ldi ZL,29
    a266:	06 e0       	ldi	r16, 0x06	; 6
	clr ZH
    a268:	0a 95       	dec	r16
push_loop:
	ld r0,Z	;load value from register file
    a26a:	f1 f7       	brne	.-4      	; 0xa268 <push_loop+0xa>
	push r0
    a26c:	9a dd       	rcall	.-1228   	; 0x9da2 <sub_video_mode3>
	dec ZL
    a26e:	e1 e0       	ldi	r30, 0x01	; 1
	brne push_loop	
    a270:	ff 27       	eor	r31, r31

0000a272 <pop_loop>:

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,18+212-AUDIO_OUT_HSYNC_CYCLES
    a272:	0f 90       	pop	r0
    a274:	01 92       	st	Z+, r0
    a276:	ee 31       	cpi	r30, 0x1E	; 30

	call VMODE_FUNC		;TCNT1=0x234
    a278:	e0 f3       	brcs	.-8      	; 0xa272 <pop_loop>

0000a27a <no_render>:
    a27a:	e0 91 0b 0f 	lds	r30, 0x0F0B

	;pop r1-r29
	ldi ZL,1
	clr ZH
    a27e:	e0 30       	cpi	r30, 0x00	; 0
pop_loop:
	pop r0
    a280:	09 f0       	breq	.+2      	; 0xa284 <no_render+0xa>
	st Z+,r0 ;store value to register file
    a282:	39 c0       	rjmp	.+114    	; 0xa2f6 <sync_end>
	cpi ZL,30
    a284:	2f 93       	push	r18
	brlo pop_loop	
    a286:	3f 93       	push	r19

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    a288:	4f 93       	push	r20
    a28a:	5f 93       	push	r21
	cpi ZL,0
    a28c:	6f 93       	push	r22
	breq .+2
    a28e:	7f 93       	push	r23
	rjmp sync_end
    a290:	8f 93       	push	r24
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    a292:	9f 93       	push	r25
	push r19
    a294:	af 93       	push	r26
	push r20
    a296:	bf 93       	push	r27
	push r21
    a298:	78 94       	sei
	push r22
    a29a:	11 24       	eor	r1, r1
	push r23
    a29c:	ee 27       	eor	r30, r30
	push r24
    a29e:	e0 93 0a 0f 	sts	0x0F0A, r30
	push r25
	push r26
    a2a2:	e2 e1       	ldi	r30, 0x12	; 18
	push r27
    a2a4:	e0 93 0b 0f 	sts	0x0F0B, r30

	sei ;must enable ints for re-entrant sync pulses
	clr r1
    a2a8:	f0 91 13 0f 	lds	r31, 0x0F13

	;set vsync flags
	clr ZL
	sts sync_phase,ZL
    a2ac:	f0 93 11 0f 	sts	0x0F11, r31
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    a2b0:	f0 91 14 0f 	lds	r31, 0x0F14
	sts sync_pulse,ZL
    a2b4:	f0 93 12 0f 	sts	0x0F12, r31

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    a2b8:	e0 91 0d 0f 	lds	r30, 0x0F0D
	sts first_render_line,ZH
    a2bc:	f0 91 0e 0f 	lds	r31, 0x0F0E
	
	lds ZH,render_lines_count_tmp
    a2c0:	e1 15       	cp	r30, r1
	sts render_lines_count,ZH
    a2c2:	f1 05       	cpc	r31, r1
    a2c4:	09 f0       	breq	.+2      	; 0xa2c8 <no_render+0x4e>

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    a2c6:	09 95       	icall
    a2c8:	6d d1       	rcall	.+730    	; 0xa5a4 <ReadControllers>
	lds ZH,pre_vsync_user_callback+1
    a2ca:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <VideoModeVsync>
	cp  ZL,r1
    a2ce:	24 d0       	rcall	.+72     	; 0xa318 <process_music>
	cpc ZH,r1
    a2d0:	11 24       	eor	r1, r1
	breq .+2 
    a2d2:	e0 91 0f 0f 	lds	r30, 0x0F0F
	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    a2d6:	f0 91 10 0f 	lds	r31, 0x0F10
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    a2da:	e1 15       	cp	r30, r1
    a2dc:	f1 05       	cpc	r31, r1

	;process music (music, envelopes, etc)
	call process_music
    a2de:	09 f0       	breq	.+2      	; 0xa2e2 <no_render+0x68>
    a2e0:	09 95       	icall
	clr r1
    a2e2:	bf 91       	pop	r27

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    a2e4:	af 91       	pop	r26
    a2e6:	9f 91       	pop	r25
	lds ZH,post_vsync_user_callback+1
    a2e8:	8f 91       	pop	r24
    a2ea:	7f 91       	pop	r23
	cp  ZL,r1
    a2ec:	6f 91       	pop	r22
	cpc ZH,r1
    a2ee:	5f 91       	pop	r21
	breq .+2 
    a2f0:	4f 91       	pop	r20
	icall
    a2f2:	3f 91       	pop	r19
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    a2f4:	2f 91       	pop	r18

0000a2f6 <sync_end>:
	pop r26
    a2f6:	ef 91       	pop	r30
	pop r25
    a2f8:	ef bf       	out	0x3f, r30	; 63
	pop r24
    a2fa:	ff 91       	pop	r31
	pop r23
    a2fc:	ef 91       	pop	r30
	pop r22
    a2fe:	1f 90       	pop	r1
	pop r21
    a300:	0f 90       	pop	r0
	pop r20
    a302:	18 95       	reti

0000a304 <hsync_pulse>:
	pop r19
    a304:	28 98       	cbi	0x05, 0	; 5
	pop r18
    a306:	e2 e0       	ldi	r30, 0x02	; 2
	
sync_end:	
	;restore flags
	pop ZL
    a308:	00 c0       	rjmp	.+0      	; 0xa30a <hsync_pulse+0x6>
	out _SFR_IO_ADDR(SREG),ZL
    a30a:	0b d0       	rcall	.+22     	; 0xa322 <update_sound>
	
	pop ZH
    a30c:	e0 91 0b 0f 	lds	r30, 0x0F0B
	pop ZL
	pop r1
    a310:	ea 95       	dec	r30
	pop r0
    a312:	e0 93 0b 0f 	sts	0x0F0B, r30
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    a316:	08 95       	ret

0000a318 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    a318:	e0 91 20 0f 	lds	r30, 0x0F20
	sbrc ZL,0
    a31c:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    a31e:	09 c4       	rjmp	.+2066   	; 0xab32 <ProcessMusic>
    a320:	08 95       	ret

0000a322 <update_sound>:
#endif

	ret
    a322:	0f 93       	push	r16

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    a324:	1f 93       	push	r17
	push r17
    a326:	2f 93       	push	r18
	push r18
    a328:	cf 93       	push	r28
	push r28
    a32a:	df 93       	push	r29
	push r29
    a32c:	2e 2f       	mov	r18, r30

	mov r18,ZL
    a32e:	00 91 22 0f 	lds	r16, 0x0F22

	;channel 1 
	lds r16,tr1_step_lo
    a332:	10 91 24 0f 	lds	r17, 0x0F24
	lds r17,tr1_pos_frac
    a336:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    a338:	00 91 23 0f 	lds	r16, 0x0F23
	lds r16,tr1_step_hi	
    a33c:	e0 91 25 0f 	lds	r30, 0x0F25
	lds ZL,tr1_pos_lo
    a340:	f0 91 26 0f 	lds	r31, 0x0F26
	lds ZH,tr1_pos_hi 
    a344:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    a346:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    a348:	e0 93 25 0f 	sts	0x0F25, r30
	sts tr1_pos_lo,ZL
    a34c:	10 93 24 0f 	sts	0x0F24, r17
	sts tr1_pos_frac,r17
    a350:	10 91 21 0f 	lds	r17, 0x0F21
	lds r17,tr1_vol
    a354:	01 03       	mulsu	r16, r17
	mulsu r16,r17;(sample*mixing vol)
    a356:	00 24       	eor	r0, r0
	clr r0
    a358:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend	
    a35a:	c1 2d       	mov	r28, r1
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    a35c:	d0 2d       	mov	r29, r0
	mov r29,r0	;set mix buffer msb	
    a35e:	00 91 28 0f 	lds	r16, 0x0F28

;38
	
	;channel 2
	lds r16,tr2_step_lo
    a362:	10 91 2a 0f 	lds	r17, 0x0F2A
	lds r17,tr2_pos_frac
    a366:	10 0f       	add	r17, r16
	add	r17,r16	;add step to fractional part of sample pos
    a368:	00 91 29 0f 	lds	r16, 0x0F29
	lds r16,tr2_step_hi	
    a36c:	e0 91 2b 0f 	lds	r30, 0x0F2B
	lds ZL,tr2_pos_lo
    a370:	f0 91 2c 0f 	lds	r31, 0x0F2C
	lds ZH,tr2_pos_hi 
    a374:	e0 1f       	adc	r30, r16
	adc ZL,r16	;add step to low byte of sample pos
    a376:	04 91       	lpm	r16, Z+
	lpm	r16,Z	;load sample
    a378:	e0 93 2b 0f 	sts	0x0F2B, r30
	sts tr2_pos_lo,ZL
    a37c:	10 93 2a 0f 	sts	0x0F2A, r17
	sts tr2_pos_frac,r17
    a380:	10 91 27 0f 	lds	r17, 0x0F27
	lds r17,tr2_vol
    a384:	20 fd       	sbrc	r18, 0
	;clr r17
	;nop

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    a386:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    a388:	20 ff       	sbrs	r18, 0
	sbrs r18,0								
    a38a:	00 c0       	rjmp	.+0      	; 0xa38c <update_sound+0x6a>
	rjmp .
    a38c:	01 03       	mulsu	r16, r17
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    a38e:	00 24       	eor	r0, r0
	clr r0
    a390:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    a392:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    a394:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb		
    a396:	00 91 2e 0f 	lds	r16, 0x0F2E
;70
	
	;channel 3
	lds r16,tr3_step_lo
    a39a:	10 91 30 0f 	lds	r17, 0x0F30
	lds r17,tr3_pos_frac
    a39e:	10 0f       	add	r17, r16
	add	r17,r16				;add step to fractional part of sample pos
    a3a0:	00 91 2f 0f 	lds	r16, 0x0F2F
	lds r16,tr3_step_hi	
    a3a4:	e0 91 31 0f 	lds	r30, 0x0F31
	lds ZL,tr3_pos_lo
    a3a8:	f0 91 32 0f 	lds	r31, 0x0F32
	lds ZH,tr3_pos_hi 
    a3ac:	e0 1f       	adc	r30, r16
	adc ZL,r16				;add step to low byte of sample pos
    a3ae:	04 91       	lpm	r16, Z+
	lpm	r16,Z				;load sample
    a3b0:	e0 93 31 0f 	sts	0x0F31, r30
	sts tr3_pos_lo,ZL
    a3b4:	10 93 30 0f 	sts	0x0F30, r17
	sts tr3_pos_frac,r17
    a3b8:	10 91 2d 0f 	lds	r17, 0x0F2D
	lds r17,tr3_vol
    a3bc:	01 03       	mulsu	r16, r17
	mulsu r16,r17			;(sample*mixing vol)
    a3be:	00 24       	eor	r0, r0
	clr r0
    a3c0:	00 08       	sbc	r0, r0
	sbc r0,r0				;sign extend
    a3c2:	c1 0d       	add	r28, r1
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    a3c4:	d0 1d       	adc	r29, r0
	adc r29,r0				;ajust mix buffer msb
    a3c6:	00 91 35 0f 	lds	r16, 0x0F35
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    a3ca:	10 91 36 0f 	lds	r17, 0x0F36
	lds r17,tr4_barrel_hi
    a3ce:	e0 91 37 0f 	lds	r30, 0x0F37
	lds ZL,tr4_divider
    a3d2:	ea 95       	dec	r30
	dec ZL	
    a3d4:	92 f4       	brpl	.+36     	; 0xa3fa <ch4_no_shift>
	brpl ch4_no_shift	
    a3d6:	f0 91 34 0f 	lds	r31, 0x0F34

	lds ZH,tr4_params
    a3da:	ef 2f       	mov	r30, r31
	mov ZL,ZH
    a3dc:	e6 95       	lsr	r30
	lsr ZL 			;keep bits7:1
    a3de:	00 2e       	mov	r0, r16

	mov r0,r16  ;copy barrel shifter
    a3e0:	06 94       	lsr	r0
	lsr r0
    a3e2:	00 26       	eor	r0, r16
	eor r0,r16  ;xor bit0 and bit1
    a3e4:	00 fa       	bst	r0, 0
	bst r0,0
    a3e6:	16 95       	lsr	r17
	lsr r17
    a3e8:	07 95       	ror	r16
	ror r16
    a3ea:	16 f9       	bld	r17, 6
	bld r17,6	;15 bits mode
    a3ec:	f0 ff       	sbrs	r31, 0
	sbrs ZH,0
    a3ee:	06 f9       	bld	r16, 6
	bld r16,6	;7 bits mode
    a3f0:	00 93 35 0f 	sts	0x0F35, r16

	sts tr4_barrel_lo,r16
    a3f4:	10 93 36 0f 	sts	0x0F36, r17
	sts tr4_barrel_hi,r17
    a3f8:	03 c0       	rjmp	.+6      	; 0xa400 <ch4_end>

0000a3fa <ch4_no_shift>:

	rjmp ch4_end
    a3fa:	16 e0       	ldi	r17, 0x06	; 6
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    a3fc:	1a 95       	dec	r17
	dec r17
    a3fe:	f1 f7       	brne	.-4      	; 0xa3fc <ch4_no_shift+0x2>

0000a400 <ch4_end>:
	brne .-4
    a400:	e0 93 37 0f 	sts	0x0F37, r30
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    a404:	21 fd       	sbrc	r18, 1
;126
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    a406:	28 9a       	sbi	0x05, 0	; 5
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    a408:	21 ff       	sbrs	r18, 1
	sbrs r18,1								
    a40a:	00 c0       	rjmp	.+0      	; 0xa40c <ch4_end+0xc>
	rjmp .
    a40c:	10 e8       	ldi	r17, 0x80	; 128
	;*************************
	
	ldi r17,0x80 ;-128
    a40e:	00 fd       	sbrc	r16, 0
	sbrc r16,0
    a410:	1f e7       	ldi	r17, 0x7F	; 127
	ldi r17,0x7f ;+127
    a412:	00 91 33 0f 	lds	r16, 0x0F33
	
	lds r16,tr4_vol
    a416:	10 03       	mulsu	r17, r16

	mulsu r17,r16;(sample*mixing vol)
    a418:	00 24       	eor	r0, r0
	clr r0
    a41a:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    a41c:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    a41e:	d0 1d       	adc	r29, r0
	adc r29,r0	;ajust mix buffer msb
    a420:	00 91 3c 0f 	lds	r16, 0x0F3C
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 43 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    a424:	10 91 3a 0f 	lds	r17, 0x0F3A
	lds r17,tr5_step_lo 
    a428:	01 0f       	add	r16, r17
	add r16,r17
    a42a:	00 93 3c 0f 	sts	0x0F3C, r16
	sts tr5_pos_frac,r16
    a42e:	e0 91 3d 0f 	lds	r30, 0x0F3D

	;add lo
	lds ZL,tr5_pos_lo
    a432:	10 91 3b 0f 	lds	r17, 0x0F3B
	lds r17,tr5_step_hi 
    a436:	e1 1f       	adc	r30, r17
	adc ZL,r17
    a438:	f0 91 3e 0f 	lds	r31, 0x0F3E

	;add hi
	lds ZH,tr5_pos_hi
    a43c:	00 e0       	ldi	r16, 0x00	; 0
	ldi r16,0
    a43e:	f0 1f       	adc	r31, r16
	adc ZH,r16
    a440:	00 90 41 0f 	lds	r0, 0x0F41

	lds r0,tr5_loop_end_lo
    a444:	10 90 42 0f 	lds	r1, 0x0F42
	lds r1,tr5_loop_end_hi
    a448:	00 91 3f 0f 	lds	r16, 0x0F3F

	lds r16,tr5_loop_start_lo
    a44c:	10 91 40 0f 	lds	r17, 0x0F40
	lds r17,tr5_loop_start_hi	
    a450:	e0 15       	cp	r30, r0

	cp ZL,r0
    a452:	f1 05       	cpc	r31, r1
	cpc ZH,r1
    a454:	08 f0       	brcs	.+2      	; 0xa458 <ch4_end+0x58>
	brlo .+2
    a456:	f8 01       	movw	r30, r16
	movw ZL,r16
    a458:	e0 93 3d 0f 	sts	0x0F3D, r30

	sts tr5_pos_lo,ZL
    a45c:	f0 93 3e 0f 	sts	0x0F3E, r31
	sts tr5_pos_hi,ZH
    a460:	04 91       	lpm	r16, Z+

	lpm	r16,Z	;load sample
    a462:	10 91 39 0f 	lds	r17, 0x0F39
	lds r17,tr5_vol
    a466:	01 03       	mulsu	r16, r17

	mulsu r16,r17;(sample*mixing vol)
    a468:	00 24       	eor	r0, r0
	clr r0
    a46a:	00 08       	sbc	r0, r0
	sbc r0,r0	;sign extend
    a46c:	c1 0d       	add	r28, r1
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    a46e:	d0 1d       	adc	r29, r0
	adc r29,r0	;adjust mix buffer msb	
    a470:	00 24       	eor	r0, r0
#endif
	
	;final processing

	;clip
	clr r0
    a472:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,128	;> 127?
    a474:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0	
    a476:	0c f0       	brlt	.+2      	; 0xa47a <ch4_end+0x7a>
	brlt .+2
    a478:	cf e7       	ldi	r28, 0x7F	; 127
	ldi r28,127
    a47a:	0a 94       	dec	r0
	
	dec r0
    a47c:	c0 38       	cpi	r28, 0x80	; 128
	cpi r28,-128; <-128?
    a47e:	d0 05       	cpc	r29, r0
	cpc r29,r0 ;0xff
    a480:	0c f4       	brge	.+2      	; 0xa484 <ch4_end+0x84>
	brge .+2
    a482:	c0 e8       	ldi	r28, 0x80	; 128
	ldi r28,-128
    a484:	c0 58       	subi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    a486:	c0 93 b3 00 	sts	0x00B3, r28
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    a48a:	df 91       	pop	r29
	
	pop r29
    a48c:	cf 91       	pop	r28
	pop r28
    a48e:	2f 91       	pop	r18
	pop r18
    a490:	1f 91       	pop	r17
	pop r17
    a492:	0f 91       	pop	r16
	pop r16
    a494:	08 95       	ret

0000a496 <SetSpritesTileTable>:
	
	ret
    a496:	80 93 fc 0e 	sts	0x0EFC, r24
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
	sts sprites_tile_banks+1,r25
    a49a:	90 93 fd 0e 	sts	0x0EFD, r25
	ret
    a49e:	08 95       	ret

0000a4a0 <SetTile>:

	ret

#else

	clr r25
    a4a0:	99 27       	eor	r25, r25
	clr r23	
    a4a2:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    a4a4:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    a4a6:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    a4a8:	08 0e       	add	r0, r24
	adc r1,r25
    a4aa:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    a4ac:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    a4ae:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    a4b0:	a0 0d       	add	r26, r0
	adc XH,r1
    a4b2:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    a4b4:	48 5d       	subi	r20, 0xD8	; 216
	st X,r20
    a4b6:	4c 93       	st	X, r20

	clr r1
    a4b8:	11 24       	eor	r1, r1

	ret
    a4ba:	08 95       	ret

0000a4bc <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    a4bc:	80 93 04 0f 	sts	0x0F04, r24
	sts tile_table_hi,r25	
    a4c0:	90 93 05 0f 	sts	0x0F05, r25
	ret
    a4c4:	08 95       	ret

0000a4c6 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    a4c6:	80 91 0c 0f 	lds	r24, 0x0F0C
	andi r24,SYNC_FLAG_VSYNC
    a4ca:	81 70       	andi	r24, 0x01	; 1
	ret
    a4cc:	08 95       	ret

0000a4ce <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    a4ce:	20 91 0c 0f 	lds	r18, 0x0F0C
	andi r18,~SYNC_FLAG_VSYNC
    a4d2:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    a4d4:	20 93 0c 0f 	sts	0x0F0C, r18
	ret
    a4d8:	08 95       	ret

0000a4da <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    a4da:	88 23       	and	r24, r24
	brne rj_p2
    a4dc:	29 f4       	brne	.+10     	; 0xa4e8 <rj_p2>
		
	lds r24,joypad1_status_lo
    a4de:	80 91 15 0f 	lds	r24, 0x0F15
	lds r25,joypad1_status_lo+1
    a4e2:	90 91 16 0f 	lds	r25, 0x0F16
	ret
    a4e6:	08 95       	ret

0000a4e8 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    a4e8:	80 91 17 0f 	lds	r24, 0x0F17
	lds r25,joypad2_status_lo+1	
    a4ec:	90 91 18 0f 	lds	r25, 0x0F18

	ret
    a4f0:	08 95       	ret

0000a4f2 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    a4f2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    a4f4:	fe cf       	rjmp	.-4      	; 0xa4f2 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    a4f6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    a4f8:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    a4fa:	60 bd       	out	0x20, r22	; 32
   cli
    a4fc:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    a4fe:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    a500:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    a502:	78 94       	sei
   ret
    a504:	08 95       	ret

0000a506 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    a506:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    a508:	fe cf       	rjmp	.-4      	; 0xa506 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    a50a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    a50c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    a50e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    a510:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    a512:	80 b5       	in	r24, 0x20	; 32
   sei
    a514:	78 94       	sei
   ret
    a516:	08 95       	ret

0000a518 <SetUserPostVsyncCallback>:
; C callable
; r25:r24 - pointer to C function: void ptr*(void)
;****************************
.section .text.SetUserPostVsyncCallback
SetUserPostVsyncCallback:
	sts post_vsync_user_callback+0,r24
    a518:	80 93 0f 0f 	sts	0x0F0F, r24
	sts post_vsync_user_callback+1,r25
    a51c:	90 93 10 0f 	sts	0x0F10, r25
	ret
    a520:	08 95       	ret

0000a522 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    a522:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    a524:	c8 95       	lpm
    a526:	c8 95       	lpm
		Wait200ns();
    a528:	c8 95       	lpm
    a52a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    a52c:	12 98       	cbi	0x02, 2	; 2
    a52e:	20 e0       	ldi	r18, 0x00	; 0
    a530:	30 e0       	ldi	r19, 0x00	; 0
    a532:	80 e0       	ldi	r24, 0x00	; 0
    a534:	90 e0       	ldi	r25, 0x00	; 0
    a536:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    a538:	36 95       	lsr	r19
    a53a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    a53c:	96 95       	lsr	r25
    a53e:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    a540:	c8 95       	lpm
    a542:	c8 95       	lpm
			Wait200ns();
    a544:	c8 95       	lpm
    a546:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    a548:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    a54a:	00 9b       	sbis	0x00, 0	; 0
    a54c:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    a54e:	01 9b       	sbis	0x00, 1	; 0
    a550:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    a552:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    a554:	c8 95       	lpm
    a556:	c8 95       	lpm
			Wait200ns();
    a558:	c8 95       	lpm
    a55a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    a55c:	4f 5f       	subi	r20, 0xFF	; 255
    a55e:	40 31       	cpi	r20, 0x10	; 16
    a560:	59 f7       	brne	.-42     	; 0xa538 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    a562:	30 93 16 0f 	sts	0x0F16, r19
    a566:	20 93 15 0f 	sts	0x0F15, r18
		joypad2_status_lo=p2ButtonsLo;
    a56a:	90 93 18 0f 	sts	0x0F18, r25
    a56e:	80 93 17 0f 	sts	0x0F17, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    a572:	80 91 15 0f 	lds	r24, 0x0F15
    a576:	90 91 16 0f 	lds	r25, 0x0F16
    a57a:	0f 97       	sbiw	r24, 0x0f	; 15
    a57c:	31 f0       	breq	.+12     	; 0xa58a <ReadButtons+0x68>
    a57e:	80 91 17 0f 	lds	r24, 0x0F17
    a582:	90 91 18 0f 	lds	r25, 0x0F18
    a586:	0f 97       	sbiw	r24, 0x0f	; 15
    a588:	61 f4       	brne	.+24     	; 0xa5a2 <ReadButtons+0x80>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    a58a:	28 e0       	ldi	r18, 0x08	; 8
    a58c:	88 e1       	ldi	r24, 0x18	; 24
    a58e:	90 e0       	ldi	r25, 0x00	; 0
    a590:	0f b6       	in	r0, 0x3f	; 63
    a592:	f8 94       	cli
    a594:	a8 95       	wdr
    a596:	80 93 60 00 	sts	0x0060, r24
    a59a:	0f be       	out	0x3f, r0	; 63
    a59c:	20 93 60 00 	sts	0x0060, r18
    a5a0:	ff cf       	rjmp	.-2      	; 0xa5a0 <ReadButtons+0x7e>
    a5a2:	08 95       	ret

0000a5a4 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    a5a4:	10 92 44 0f 	sts	0x0F44, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    a5a8:	00 99       	sbic	0x00, 0	; 0
    a5aa:	03 c0       	rjmp	.+6      	; 0xa5b2 <ReadControllers+0xe>
    a5ac:	81 e0       	ldi	r24, 0x01	; 1
    a5ae:	80 93 44 0f 	sts	0x0F44, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    a5b2:	01 99       	sbic	0x00, 1	; 0
    a5b4:	05 c0       	rjmp	.+10     	; 0xa5c0 <ReadControllers+0x1c>
    a5b6:	80 91 44 0f 	lds	r24, 0x0F44
    a5ba:	82 60       	ori	r24, 0x02	; 2
    a5bc:	80 93 44 0f 	sts	0x0F44, r24
			
	//read the standard buttons
	ReadButtons();
}
    a5c0:	b0 cf       	rjmp	.-160    	; 0xa522 <ReadButtons>

0000a5c2 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    a5c2:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    a5c4:	80 e0       	ldi	r24, 0x00	; 0
    a5c6:	90 e0       	ldi	r25, 0x00	; 0
    a5c8:	9e df       	rcall	.-196    	; 0xa506 <ReadEeprom>
    a5ca:	18 2f       	mov	r17, r24
    a5cc:	81 e0       	ldi	r24, 0x01	; 1
    a5ce:	90 e0       	ldi	r25, 0x00	; 0
    a5d0:	9a df       	rcall	.-204    	; 0xa506 <ReadEeprom>
    a5d2:	90 e0       	ldi	r25, 0x00	; 0
    a5d4:	38 2f       	mov	r19, r24
    a5d6:	20 e0       	ldi	r18, 0x00	; 0
    a5d8:	21 0f       	add	r18, r17
    a5da:	31 1d       	adc	r19, r1
    a5dc:	2a 55       	subi	r18, 0x5A	; 90
    a5de:	35 45       	sbci	r19, 0x55	; 85
    a5e0:	09 f4       	brne	.+2      	; 0xa5e4 <isEepromFormatted+0x22>
    a5e2:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    a5e4:	89 2f       	mov	r24, r25
    a5e6:	1f 91       	pop	r17
    a5e8:	08 95       	ret

0000a5ea <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    a5ea:	a0 e0       	ldi	r26, 0x00	; 0
    a5ec:	b0 e0       	ldi	r27, 0x00	; 0
    a5ee:	eb ef       	ldi	r30, 0xFB	; 251
    a5f0:	f2 e5       	ldi	r31, 0x52	; 82
    a5f2:	0c 94 fb 76 	jmp	0xedf6	; 0xedf6 <__prologue_saves__+0x12>
    a5f6:	6c 01       	movw	r12, r24
    a5f8:	06 2f       	mov	r16, r22
    a5fa:	b7 2e       	mov	r11, r23
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    a5fc:	e2 df       	rcall	.-60     	; 0xa5c2 <isEepromFormatted>
    a5fe:	88 23       	and	r24, r24
    a600:	09 f4       	brne	.+2      	; 0xa604 <EepromReadBlock+0x1a>
    a602:	3d c0       	rjmp	.+122    	; 0xa67e <EepromReadBlock+0x94>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    a604:	8f ef       	ldi	r24, 0xFF	; 255
    a606:	c8 16       	cp	r12, r24
    a608:	8f ef       	ldi	r24, 0xFF	; 255
    a60a:	d8 06       	cpc	r13, r24
    a60c:	11 f4       	brne	.+4      	; 0xa612 <EepromReadBlock+0x28>
    a60e:	81 e0       	ldi	r24, 0x01	; 1
    a610:	39 c0       	rjmp	.+114    	; 0xa684 <EepromReadBlock+0x9a>
    a612:	ee 24       	eor	r14, r14
    a614:	ff 24       	eor	r15, r15

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    a616:	c7 01       	movw	r24, r14
    a618:	76 df       	rcall	.-276    	; 0xa506 <ReadEeprom>
    a61a:	18 2f       	mov	r17, r24
    a61c:	c7 01       	movw	r24, r14
    a61e:	01 96       	adiw	r24, 0x01	; 1
    a620:	72 df       	rcall	.-284    	; 0xa506 <ReadEeprom>
		if(id==blockId){
    a622:	d8 2f       	mov	r29, r24
    a624:	c0 e0       	ldi	r28, 0x00	; 0
    a626:	ce 01       	movw	r24, r28
    a628:	81 0f       	add	r24, r17
    a62a:	91 1d       	adc	r25, r1
    a62c:	8c 15       	cp	r24, r12
    a62e:	9d 05       	cpc	r25, r13
    a630:	31 f4       	brne	.+12     	; 0xa63e <EepromReadBlock+0x54>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    a632:	9f ef       	ldi	r25, 0xFF	; 255
    a634:	e9 16       	cp	r14, r25
    a636:	9f ef       	ldi	r25, 0xFF	; 255
    a638:	f9 06       	cpc	r15, r25
    a63a:	59 f4       	brne	.+22     	; 0xa652 <EepromReadBlock+0x68>
    a63c:	22 c0       	rjmp	.+68     	; 0xa682 <EepromReadBlock+0x98>
    a63e:	80 e2       	ldi	r24, 0x20	; 32
    a640:	90 e0       	ldi	r25, 0x00	; 0
    a642:	e8 0e       	add	r14, r24
    a644:	f9 1e       	adc	r15, r25

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    a646:	90 e0       	ldi	r25, 0x00	; 0
    a648:	e9 16       	cp	r14, r25
    a64a:	94 e0       	ldi	r25, 0x04	; 4
    a64c:	f9 06       	cpc	r15, r25
    a64e:	19 f7       	brne	.-58     	; 0xa616 <EepromReadBlock+0x2c>
    a650:	18 c0       	rjmp	.+48     	; 0xa682 <EepromReadBlock+0x98>
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;
    a652:	80 2f       	mov	r24, r16
    a654:	9b 2d       	mov	r25, r11
    a656:	9c 01       	movw	r18, r24
    a658:	e9 01       	movw	r28, r18
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    a65a:	70 e2       	ldi	r23, 0x20	; 32
    a65c:	c7 2e       	mov	r12, r23
    a65e:	d1 2c       	mov	r13, r1
    a660:	c2 0e       	add	r12, r18
    a662:	d3 1e       	adc	r13, r19
		*destPtr=ReadEeprom(destAddr++);
    a664:	87 01       	movw	r16, r14
    a666:	0f 5f       	subi	r16, 0xFF	; 255
    a668:	1f 4f       	sbci	r17, 0xFF	; 255
    a66a:	c7 01       	movw	r24, r14
    a66c:	4c df       	rcall	.-360    	; 0xa506 <ReadEeprom>
    a66e:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    a670:	cc 15       	cp	r28, r12
    a672:	dd 05       	cpc	r29, r13
    a674:	11 f4       	brne	.+4      	; 0xa67a <EepromReadBlock+0x90>
    a676:	80 e0       	ldi	r24, 0x00	; 0
    a678:	05 c0       	rjmp	.+10     	; 0xa684 <EepromReadBlock+0x9a>
    a67a:	78 01       	movw	r14, r16
    a67c:	f3 cf       	rjmp	.-26     	; 0xa664 <EepromReadBlock+0x7a>
    a67e:	84 e0       	ldi	r24, 0x04	; 4
    a680:	01 c0       	rjmp	.+2      	; 0xa684 <EepromReadBlock+0x9a>
    a682:	83 e0       	ldi	r24, 0x03	; 3
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    a684:	cd b7       	in	r28, 0x3d	; 61
    a686:	de b7       	in	r29, 0x3e	; 62
    a688:	e9 e0       	ldi	r30, 0x09	; 9
    a68a:	0c 94 17 77 	jmp	0xee2e	; 0xee2e <__epilogue_restores__+0x12>

0000a68e <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    a68e:	a0 e0       	ldi	r26, 0x00	; 0
    a690:	b0 e0       	ldi	r27, 0x00	; 0
    a692:	ed e4       	ldi	r30, 0x4D	; 77
    a694:	f3 e5       	ldi	r31, 0x53	; 83
    a696:	0c 94 fb 76 	jmp	0xedf6	; 0xedf6 <__prologue_saves__+0x12>
    a69a:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    a69c:	92 df       	rcall	.-220    	; 0xa5c2 <isEepromFormatted>
    a69e:	88 23       	and	r24, r24
    a6a0:	11 f4       	brne	.+4      	; 0xa6a6 <EepromWriteBlock+0x18>
    a6a2:	84 e0       	ldi	r24, 0x04	; 4
    a6a4:	4b c0       	rjmp	.+150    	; 0xa73c <EepromWriteBlock+0xae>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    a6a6:	f6 01       	movw	r30, r12
    a6a8:	80 81       	ld	r24, Z
    a6aa:	91 81       	ldd	r25, Z+1	; 0x01
    a6ac:	ff ef       	ldi	r31, 0xFF	; 255
    a6ae:	8f 3f       	cpi	r24, 0xFF	; 255
    a6b0:	9f 07       	cpc	r25, r31
    a6b2:	09 f4       	brne	.+2      	; 0xa6b6 <EepromWriteBlock+0x28>
    a6b4:	42 c0       	rjmp	.+132    	; 0xa73a <EepromWriteBlock+0xac>
    a6b6:	8a 55       	subi	r24, 0x5A	; 90
    a6b8:	95 45       	sbci	r25, 0x55	; 85
    a6ba:	09 f4       	brne	.+2      	; 0xa6be <EepromWriteBlock+0x30>
    a6bc:	3e c0       	rjmp	.+124    	; 0xa73a <EepromWriteBlock+0xac>
    a6be:	01 e0       	ldi	r16, 0x01	; 1
    a6c0:	10 e0       	ldi	r17, 0x00	; 0
    a6c2:	f0 e2       	ldi	r31, 0x20	; 32
    a6c4:	ef 2e       	mov	r14, r31
    a6c6:	f1 2c       	mov	r15, r1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    a6c8:	c7 01       	movw	r24, r14
    a6ca:	1d df       	rcall	.-454    	; 0xa506 <ReadEeprom>
    a6cc:	b8 2e       	mov	r11, r24
    a6ce:	c7 01       	movw	r24, r14
    a6d0:	01 96       	adiw	r24, 0x01	; 1
    a6d2:	19 df       	rcall	.-462    	; 0xa506 <ReadEeprom>
    a6d4:	d8 2f       	mov	r29, r24
    a6d6:	c0 e0       	ldi	r28, 0x00	; 0
    a6d8:	9e 01       	movw	r18, r28
    a6da:	2b 0d       	add	r18, r11
    a6dc:	31 1d       	adc	r19, r1
		if(id==block->id){
    a6de:	f6 01       	movw	r30, r12
    a6e0:	80 81       	ld	r24, Z
    a6e2:	91 81       	ldd	r25, Z+1	; 0x01
    a6e4:	28 17       	cp	r18, r24
    a6e6:	39 07       	cpc	r19, r25
    a6e8:	19 f4       	brne	.+6      	; 0xa6f0 <EepromWriteBlock+0x62>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    a6ea:	11 23       	and	r17, r17
    a6ec:	b1 f0       	breq	.+44     	; 0xa71a <EepromWriteBlock+0x8c>
    a6ee:	0e c0       	rjmp	.+28     	; 0xa70c <EepromWriteBlock+0x7e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    a6f0:	2f 5f       	subi	r18, 0xFF	; 255
    a6f2:	3f 4f       	sbci	r19, 0xFF	; 255
    a6f4:	19 f4       	brne	.+6      	; 0xa6fc <EepromWriteBlock+0x6e>
    a6f6:	11 23       	and	r17, r17
    a6f8:	09 f4       	brne	.+2      	; 0xa6fc <EepromWriteBlock+0x6e>
    a6fa:	10 2f       	mov	r17, r16

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    a6fc:	0f 5f       	subi	r16, 0xFF	; 255
    a6fe:	80 e2       	ldi	r24, 0x20	; 32
    a700:	90 e0       	ldi	r25, 0x00	; 0
    a702:	e8 0e       	add	r14, r24
    a704:	f9 1e       	adc	r15, r25
    a706:	00 34       	cpi	r16, 0x40	; 64
    a708:	f9 f6       	brne	.-66     	; 0xa6c8 <EepromWriteBlock+0x3a>
    a70a:	1d c0       	rjmp	.+58     	; 0xa746 <EepromWriteBlock+0xb8>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    a70c:	e1 2e       	mov	r14, r17
    a70e:	ff 24       	eor	r15, r15
    a710:	e5 e0       	ldi	r30, 0x05	; 5
    a712:	ee 0c       	add	r14, r14
    a714:	ff 1c       	adc	r15, r15
    a716:	ea 95       	dec	r30
    a718:	e1 f7       	brne	.-8      	; 0xa712 <EepromWriteBlock+0x84>
    a71a:	c0 e0       	ldi	r28, 0x00	; 0
    a71c:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    a71e:	f6 01       	movw	r30, r12
    a720:	ec 0f       	add	r30, r28
    a722:	fd 1f       	adc	r31, r29
    a724:	ce 01       	movw	r24, r28
    a726:	8e 0d       	add	r24, r14
    a728:	9f 1d       	adc	r25, r15
    a72a:	60 81       	ld	r22, Z
    a72c:	e2 de       	rcall	.-572    	; 0xa4f2 <WriteEeprom>
    a72e:	21 96       	adiw	r28, 0x01	; 1
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    a730:	c0 32       	cpi	r28, 0x20	; 32
    a732:	d1 05       	cpc	r29, r1
    a734:	a1 f7       	brne	.-24     	; 0xa71e <EepromWriteBlock+0x90>
    a736:	80 e0       	ldi	r24, 0x00	; 0
    a738:	01 c0       	rjmp	.+2      	; 0xa73c <EepromWriteBlock+0xae>
    a73a:	81 e0       	ldi	r24, 0x01	; 1
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    a73c:	cd b7       	in	r28, 0x3d	; 61
    a73e:	de b7       	in	r29, 0x3e	; 62
    a740:	e9 e0       	ldi	r30, 0x09	; 9
    a742:	0c 94 17 77 	jmp	0xee2e	; 0xee2e <__epilogue_restores__+0x12>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    a746:	11 23       	and	r17, r17
    a748:	09 f7       	brne	.-62     	; 0xa70c <EepromWriteBlock+0x7e>
    a74a:	82 e0       	ldi	r24, 0x02	; 2
    a74c:	f7 cf       	rjmp	.-18     	; 0xa73c <EepromWriteBlock+0xae>

0000a74e <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    a74e:	cf 93       	push	r28
    a750:	df 93       	push	r29
    a752:	c0 e0       	ldi	r28, 0x00	; 0
    a754:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    a756:	fe 01       	movw	r30, r28
    a758:	e0 59       	subi	r30, 0x90	; 144
    a75a:	ff 4f       	sbci	r31, 0xFF	; 255
    a75c:	e4 91       	lpm	r30, Z+
    a75e:	ce 01       	movw	r24, r28
    a760:	6e 2f       	mov	r22, r30
    a762:	c7 de       	rcall	.-626    	; 0xa4f2 <WriteEeprom>
    a764:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    a766:	c0 32       	cpi	r28, 0x20	; 32
    a768:	d1 05       	cpc	r29, r1
    a76a:	a9 f7       	brne	.-22     	; 0xa756 <FormatEeprom+0x8>
    a76c:	c0 e2       	ldi	r28, 0x20	; 32
    a76e:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    a770:	ce 01       	movw	r24, r28
    a772:	6f ef       	ldi	r22, 0xFF	; 255
    a774:	be de       	rcall	.-644    	; 0xa4f2 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    a776:	ce 01       	movw	r24, r28
    a778:	01 96       	adiw	r24, 0x01	; 1
    a77a:	6f ef       	ldi	r22, 0xFF	; 255
    a77c:	ba de       	rcall	.-652    	; 0xa4f2 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    a77e:	a0 96       	adiw	r28, 0x20	; 32
    a780:	88 e0       	ldi	r24, 0x08	; 8
    a782:	c0 30       	cpi	r28, 0x00	; 0
    a784:	d8 07       	cpc	r29, r24
    a786:	a1 f7       	brne	.-24     	; 0xa770 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    a788:	df 91       	pop	r29
    a78a:	cf 91       	pop	r28
    a78c:	08 95       	ret

0000a78e <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    a78e:	fc 01       	movw	r30, r24
    a790:	45 87       	std	Z+13, r20	; 0x0d
}
    a792:	08 95       	ret

0000a794 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    a794:	81 e0       	ldi	r24, 0x01	; 1
    a796:	91 e0       	ldi	r25, 0x01	; 1
    a798:	90 93 36 0f 	sts	0x0F36, r25
    a79c:	80 93 35 0f 	sts	0x0F35, r24
		mixer.channels.type.noise.params=param;
    a7a0:	40 93 34 0f 	sts	0x0F34, r20
	#endif
}
    a7a4:	08 95       	ret

0000a7a6 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    a7a6:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    a7a8:	80 81       	ld	r24, Z
    a7aa:	8f 75       	andi	r24, 0x5F	; 95
    a7ac:	80 83       	st	Z, r24
}
    a7ae:	08 95       	ret

0000a7b0 <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    a7b0:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    a7b2:	80 81       	ld	r24, Z
    a7b4:	80 64       	ori	r24, 0x40	; 64
    a7b6:	80 83       	st	Z, r24
}
    a7b8:	08 95       	ret

0000a7ba <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    a7ba:	fc 01       	movw	r30, r24
    a7bc:	44 87       	std	Z+12, r20	; 0x0c
}
    a7be:	08 95       	ret

0000a7c0 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    a7c0:	fc 01       	movw	r30, r24
    a7c2:	47 83       	std	Z+7, r20	; 0x07
}
    a7c4:	08 95       	ret

0000a7c6 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    a7c6:	fc 01       	movw	r30, r24
    a7c8:	40 87       	std	Z+8, r20	; 0x08
}
    a7ca:	08 95       	ret

0000a7cc <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    a7cc:	1f 93       	push	r17
    a7ce:	cf 93       	push	r28
    a7d0:	df 93       	push	r29
    a7d2:	ec 01       	movw	r28, r24
    a7d4:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    a7d6:	89 81       	ldd	r24, Y+1	; 0x01
    a7d8:	90 e0       	ldi	r25, 0x00	; 0
    a7da:	fc 01       	movw	r30, r24
    a7dc:	ee 0f       	add	r30, r30
    a7de:	ff 1f       	adc	r31, r31
    a7e0:	e8 5f       	subi	r30, 0xF8	; 248
    a7e2:	fe 44       	sbci	r31, 0x4E	; 78
    a7e4:	25 91       	lpm	r18, Z+
    a7e6:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    a7e8:	e4 2f       	mov	r30, r20
    a7ea:	ff 27       	eor	r31, r31
    a7ec:	e7 fd       	sbrc	r30, 7
    a7ee:	f0 95       	com	r31
    a7f0:	e8 0f       	add	r30, r24
    a7f2:	f9 1f       	adc	r31, r25
    a7f4:	ee 0f       	add	r30, r30
    a7f6:	ff 1f       	adc	r31, r31
    a7f8:	e8 5f       	subi	r30, 0xF8	; 248
    a7fa:	fe 44       	sbci	r31, 0x4E	; 78
    a7fc:	85 91       	lpm	r24, Z+
    a7fe:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    a800:	60 91 4c 0f 	lds	r22, 0x0F4C
    a804:	82 1b       	sub	r24, r18
    a806:	93 0b       	sbc	r25, r19
    a808:	70 e0       	ldi	r23, 0x00	; 0
    a80a:	0e 94 df 76 	call	0xedbe	; 0xedbe <__divmodhi4>
    a80e:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    a810:	61 15       	cp	r22, r1
    a812:	71 05       	cpc	r23, r1
    a814:	11 f4       	brne	.+4      	; 0xa81a <PatchCommand11+0x4e>
    a816:	21 e0       	ldi	r18, 0x01	; 1
    a818:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    a81a:	81 2f       	mov	r24, r17
    a81c:	90 e0       	ldi	r25, 0x00	; 0
    a81e:	fc 01       	movw	r30, r24
    a820:	ee 0f       	add	r30, r30
    a822:	ff 1f       	adc	r31, r31
    a824:	e8 0f       	add	r30, r24
    a826:	f9 1f       	adc	r31, r25
    a828:	ee 0f       	add	r30, r30
    a82a:	ff 1f       	adc	r31, r31
    a82c:	ef 5d       	subi	r30, 0xDF	; 223
    a82e:	f0 4f       	sbci	r31, 0xF0	; 240
    a830:	81 81       	ldd	r24, Z+1	; 0x01
    a832:	92 81       	ldd	r25, Z+2	; 0x02
    a834:	82 0f       	add	r24, r18
    a836:	93 1f       	adc	r25, r19
    a838:	92 83       	std	Z+2, r25	; 0x02
    a83a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    a83c:	3b 83       	std	Y+3, r19	; 0x03
    a83e:	2a 83       	std	Y+2, r18	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    a840:	88 81       	ld	r24, Y
    a842:	88 60       	ori	r24, 0x08	; 8
    a844:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    a846:	89 81       	ldd	r24, Y+1	; 0x01
    a848:	84 0f       	add	r24, r20
    a84a:	8c 83       	std	Y+4, r24	; 0x04
}
    a84c:	df 91       	pop	r29
    a84e:	cf 91       	pop	r28
    a850:	1f 91       	pop	r17
    a852:	08 95       	ret

0000a854 <PatchCommand12>:

/*
* Command 12: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    a854:	40 93 4c 0f 	sts	0x0F4C, r20
}
    a858:	08 95       	ret

0000a85a <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    a85a:	90 93 b8 0f 	sts	0x0FB8, r25
    a85e:	80 93 b7 0f 	sts	0x0FB7, r24

	masterVolume=DEFAULT_MASTER_VOL;
    a862:	8f e6       	ldi	r24, 0x6F	; 111
    a864:	80 93 ba 0f 	sts	0x0FBA, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    a868:	10 92 43 0f 	sts	0x0F43, r1
    a86c:	e7 e4       	ldi	r30, 0x47	; 71
    a86e:	ff e0       	ldi	r31, 0x0F	; 15

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    a870:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    a872:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    a874:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    a876:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    a878:	13 86       	std	Z+11, r1	; 0x0b
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    a87a:	81 87       	std	Z+9, r24	; 0x09
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    a87c:	82 87       	std	Z+10, r24	; 0x0a
		tracks[t].patchNo=DEFAULT_PATCH;
    a87e:	16 86       	std	Z+14, r1	; 0x0e
		tracks[t].tremoloRate=24; //~6hz
    a880:	20 87       	std	Z+8, r18	; 0x08
		tracks[t].slideSpeed=0x10;
    a882:	95 83       	std	Z+5, r25	; 0x05
    a884:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    a886:	3f e0       	ldi	r19, 0x0F	; 15
    a888:	e5 3b       	cpi	r30, 0xB5	; 181
    a88a:	f3 07       	cpc	r31, r19
    a88c:	a1 f7       	brne	.-24     	; 0xa876 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    a88e:	08 95       	ret

0000a890 <StartSong>:

void StartSong(const char *midiSong){
    a890:	9c 01       	movw	r18, r24
    a892:	e7 e4       	ldi	r30, 0x47	; 71
    a894:	ff e0       	ldi	r31, 0x0F	; 15
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    a896:	80 81       	ld	r24, Z
    a898:	8f 77       	andi	r24, 0x7F	; 127
    a89a:	80 83       	st	Z, r24
    a89c:	76 96       	adiw	r30, 0x16	; 22
	}

}

void StartSong(const char *midiSong){
	for(unsigned char t=0;t<CHANNELS;t++){
    a89e:	8f e0       	ldi	r24, 0x0F	; 15
    a8a0:	e5 3b       	cpi	r30, 0xB5	; 181
    a8a2:	f8 07       	cpc	r31, r24
    a8a4:	c1 f7       	brne	.-16     	; 0xa896 <StartSong+0x6>
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
	}

	songPos=midiSong+1; //skip first delta-time
    a8a6:	c9 01       	movw	r24, r18
    a8a8:	01 96       	adiw	r24, 0x01	; 1
    a8aa:	90 93 bf 0f 	sts	0x0FBF, r25
    a8ae:	80 93 be 0f 	sts	0x0FBE, r24
	songStart=midiSong+1;//skip first delta-time
    a8b2:	90 93 46 0f 	sts	0x0F46, r25
    a8b6:	80 93 45 0f 	sts	0x0F45, r24
	loopStart=midiSong+1;
    a8ba:	90 93 c1 0f 	sts	0x0FC1, r25
    a8be:	80 93 c0 0f 	sts	0x0FC0, r24
	nextDeltaTime=0;
    a8c2:	10 92 bc 0f 	sts	0x0FBC, r1
    a8c6:	10 92 bb 0f 	sts	0x0FBB, r1
	currDeltaTime=0;
    a8ca:	10 92 b6 0f 	sts	0x0FB6, r1
    a8ce:	10 92 b5 0f 	sts	0x0FB5, r1
	lastStatus=0;
    a8d2:	10 92 b9 0f 	sts	0x0FB9, r1
	songSpeed=0;
    a8d6:	10 92 bd 0f 	sts	0x0FBD, r1
	playSong=true;
    a8da:	81 e0       	ldi	r24, 0x01	; 1
    a8dc:	80 93 43 0f 	sts	0x0F43, r24
}
    a8e0:	08 95       	ret

0000a8e2 <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    a8e2:	8a ef       	ldi	r24, 0xFA	; 250
    a8e4:	80 93 54 0f 	sts	0x0F54, r24
    a8e8:	80 93 6a 0f 	sts	0x0F6A, r24
    a8ec:	80 93 80 0f 	sts	0x0F80, r24
    a8f0:	80 93 96 0f 	sts	0x0F96, r24
    a8f4:	80 93 ac 0f 	sts	0x0FAC, r24
	}

	playSong=false;
    a8f8:	10 92 43 0f 	sts	0x0F43, r1
}
    a8fc:	08 95       	ret

0000a8fe <ResumeSong>:


void ResumeSong(){
	playSong=true;
    a8fe:	81 e0       	ldi	r24, 0x01	; 1
    a900:	80 93 43 0f 	sts	0x0F43, r24
}
    a904:	08 95       	ret

0000a906 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    a906:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    a908:	ed 91       	ld	r30, X+
    a90a:	fc 91       	ld	r31, X
    a90c:	11 97       	sbiw	r26, 0x01	; 1
    a90e:	af 01       	movw	r20, r30
    a910:	4f 5f       	subi	r20, 0xFF	; 255
    a912:	5f 4f       	sbci	r21, 0xFF	; 255
    a914:	11 96       	adiw	r26, 0x01	; 1
    a916:	5c 93       	st	X, r21
    a918:	4e 93       	st	-X, r20
    a91a:	e4 91       	lpm	r30, Z+
    a91c:	2e 2f       	mov	r18, r30
    a91e:	30 e0       	ldi	r19, 0x00	; 0
    a920:	e7 ff       	sbrs	r30, 7
    a922:	13 c0       	rjmp	.+38     	; 0xa94a <ReadVarLen+0x44>
    {
       value &= 0x7F;
    a924:	2f 77       	andi	r18, 0x7F	; 127
    a926:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    a928:	36 95       	lsr	r19
    a92a:	32 2f       	mov	r19, r18
    a92c:	22 27       	eor	r18, r18
    a92e:	37 95       	ror	r19
    a930:	27 95       	ror	r18
    a932:	fa 01       	movw	r30, r20
    a934:	4f 5f       	subi	r20, 0xFF	; 255
    a936:	5f 4f       	sbci	r21, 0xFF	; 255
    a938:	e4 91       	lpm	r30, Z+
    a93a:	8e 2f       	mov	r24, r30
    a93c:	8f 77       	andi	r24, 0x7F	; 127
    a93e:	28 0f       	add	r18, r24
    a940:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    a942:	e7 fd       	sbrc	r30, 7
    a944:	f1 cf       	rjmp	.-30     	; 0xa928 <ReadVarLen+0x22>
    a946:	4d 93       	st	X+, r20
    a948:	5c 93       	st	X, r21
    }


    return value;
}
    a94a:	c9 01       	movw	r24, r18
    a94c:	08 95       	ret

0000a94e <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    a94e:	80 93 ba 0f 	sts	0x0FBA, r24
}
    a952:	08 95       	ret

0000a954 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    a954:	ff 92       	push	r15
    a956:	0f 93       	push	r16
    a958:	1f 93       	push	r17
    a95a:	8c 01       	movw	r16, r24
    a95c:	86 2f       	mov	r24, r22
    a95e:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    a960:	64 2f       	mov	r22, r20
    a962:	58 d3       	rcall	.+1712   	; 0xb014 <SetMixerNote>
	track->note=param;
    a964:	f8 01       	movw	r30, r16
    a966:	f1 82       	std	Z+1, r15	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    a968:	80 81       	ld	r24, Z
    a96a:	87 7f       	andi	r24, 0xF7	; 247
    a96c:	80 83       	st	Z, r24
}
    a96e:	1f 91       	pop	r17
    a970:	0f 91       	pop	r16
    a972:	ff 90       	pop	r15
    a974:	08 95       	ret

0000a976 <PatchCommand04>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    a976:	fc 01       	movw	r30, r24
    a978:	86 2f       	mov	r24, r22
	track->note-=param;
    a97a:	61 81       	ldd	r22, Z+1	; 0x01
    a97c:	64 1b       	sub	r22, r20
    a97e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
}
    a980:	49 c3       	rjmp	.+1682   	; 0xb014 <SetMixerNote>

0000a982 <PatchCommand03>:
	SetMixerWave(trackNo,param);
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    a982:	fc 01       	movw	r30, r24
    a984:	86 2f       	mov	r24, r22
	track->note+=param;
    a986:	91 81       	ldd	r25, Z+1	; 0x01
    a988:	49 0f       	add	r20, r25
    a98a:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    a98c:	64 2f       	mov	r22, r20
}
    a98e:	42 c3       	rjmp	.+1668   	; 0xb014 <SetMixerNote>

0000a990 <TriggerCommon>:
}




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    a990:	ef 92       	push	r14
    a992:	ff 92       	push	r15
    a994:	0f 93       	push	r16
    a996:	1f 93       	push	r17
    a998:	cf 93       	push	r28
    a99a:	df 93       	push	r29
    a99c:	18 2f       	mov	r17, r24
    a99e:	f6 2e       	mov	r15, r22
    a9a0:	02 2f       	mov	r16, r18
	struct TrackStruct* track=&tracks[channel];
    a9a2:	86 e1       	ldi	r24, 0x16	; 22
    a9a4:	18 9f       	mul	r17, r24
    a9a6:	e0 01       	movw	r28, r0
    a9a8:	11 24       	eor	r1, r1
    a9aa:	c9 5b       	subi	r28, 0xB9	; 185
    a9ac:	d0 4f       	sbci	r29, 0xF0	; 240
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    a9ae:	ee 24       	eor	r14, r14
    a9b0:	88 81       	ld	r24, Y
    a9b2:	87 ff       	sbrs	r24, 7
    a9b4:	02 c0       	rjmp	.+4      	; 0xa9ba <TriggerCommon+0x2a>
    a9b6:	ee 24       	eor	r14, r14
    a9b8:	e3 94       	inc	r14

	track->patchCurrDeltaTime=0;
    a9ba:	1a 8a       	std	Y+18, r1	; 0x12
	track->envelopeStep=0; 
    a9bc:	1d 86       	std	Y+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    a9be:	9f ef       	ldi	r25, 0xFF	; 255
    a9c0:	9c 87       	std	Y+12, r25	; 0x0c
	track->noteVol=volume;
    a9c2:	4b 87       	std	Y+11, r20	; 0x0b
	track->patchPlayingTime=0;
    a9c4:	1b 8a       	std	Y+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    a9c6:	88 81       	ld	r24, Y
    a9c8:	80 62       	ori	r24, 0x20	; 32
    a9ca:	87 7b       	andi	r24, 0xB7	; 183
    a9cc:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    a9ce:	1f 82       	std	Y+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    a9d0:	99 87       	std	Y+9, r25	; 0x09
	track->note=note;
    a9d2:	09 83       	std	Y+1, r16	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    a9d4:	13 30       	cpi	r17, 0x03	; 3
    a9d6:	69 f4       	brne	.+26     	; 0xa9f2 <TriggerCommon+0x62>
			//noise channel		
			if(!isFx) patch=note;			
    a9d8:	ee 20       	and	r14, r14
    a9da:	09 f4       	brne	.+2      	; 0xa9de <TriggerCommon+0x4e>
    a9dc:	f0 2e       	mov	r15, r16
			mixer.channels.type.noise.barrel=0x0101;				
    a9de:	81 e0       	ldi	r24, 0x01	; 1
    a9e0:	91 e0       	ldi	r25, 0x01	; 1
    a9e2:	90 93 36 0f 	sts	0x0F36, r25
    a9e6:	80 93 35 0f 	sts	0x0F35, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    a9ea:	81 e0       	ldi	r24, 0x01	; 1
    a9ec:	80 93 34 0f 	sts	0x0F34, r24
    a9f0:	32 c0       	rjmp	.+100    	; 0xaa56 <TriggerCommon+0xc6>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    a9f2:	14 30       	cpi	r17, 0x04	; 4
    a9f4:	51 f5       	brne	.+84     	; 0xaa4a <TriggerCommon+0xba>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    a9f6:	10 92 3c 0f 	sts	0x0F3C, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    a9fa:	89 e0       	ldi	r24, 0x09	; 9
    a9fc:	f8 9e       	mul	r15, r24
    a9fe:	c0 01       	movw	r24, r0
    aa00:	11 24       	eor	r1, r1
    aa02:	20 91 b7 0f 	lds	r18, 0x0FB7
    aa06:	30 91 b8 0f 	lds	r19, 0x0FB8
    aa0a:	28 0f       	add	r18, r24
    aa0c:	39 1f       	adc	r19, r25
    aa0e:	f9 01       	movw	r30, r18
    aa10:	31 96       	adiw	r30, 0x01	; 1
    aa12:	45 91       	lpm	r20, Z+
    aa14:	54 91       	lpm	r21, Z+
				mixer.channels.type.pcm.position=pos;
    aa16:	50 93 3e 0f 	sts	0x0F3E, r21
    aa1a:	40 93 3d 0f 	sts	0x0F3D, r20
				mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
    aa1e:	f9 01       	movw	r30, r18
    aa20:	35 96       	adiw	r30, 0x05	; 5
    aa22:	85 91       	lpm	r24, Z+
    aa24:	94 91       	lpm	r25, Z+
    aa26:	84 0f       	add	r24, r20
    aa28:	95 1f       	adc	r25, r21
    aa2a:	90 93 40 0f 	sts	0x0F40, r25
    aa2e:	80 93 3f 0f 	sts	0x0F3F, r24
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    aa32:	f9 01       	movw	r30, r18
    aa34:	37 96       	adiw	r30, 0x07	; 7
    aa36:	85 91       	lpm	r24, Z+
    aa38:	94 91       	lpm	r25, Z+
    aa3a:	48 0f       	add	r20, r24
    aa3c:	59 1f       	adc	r21, r25
    aa3e:	50 93 42 0f 	sts	0x0F42, r21
    aa42:	40 93 41 0f 	sts	0x0F41, r20
				SetMixerNote(channel,note);
    aa46:	84 e0       	ldi	r24, 0x04	; 4
    aa48:	04 c0       	rjmp	.+8      	; 0xaa52 <TriggerCommon+0xc2>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    aa4a:	81 2f       	mov	r24, r17
    aa4c:	60 e0       	ldi	r22, 0x00	; 0
    aa4e:	f9 d2       	rcall	.+1522   	; 0xb042 <SetMixerWave>
			SetMixerNote(channel,note);
    aa50:	81 2f       	mov	r24, r17
    aa52:	60 2f       	mov	r22, r16
    aa54:	df d2       	rcall	.+1470   	; 0xb014 <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    aa56:	ee 20       	and	r14, r14
    aa58:	11 f0       	breq	.+4      	; 0xaa5e <TriggerCommon+0xce>
		track->fxPatchNo=patch;
    aa5a:	ff 86       	std	Y+15, r15	; 0x0f
    aa5c:	01 c0       	rjmp	.+2      	; 0xaa60 <TriggerCommon+0xd0>
	}else{
		track->patchNo=patch;	
    aa5e:	fe 86       	std	Y+14, r15	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    aa60:	89 e0       	ldi	r24, 0x09	; 9
    aa62:	f8 9e       	mul	r15, r24
    aa64:	c0 01       	movw	r24, r0
    aa66:	11 24       	eor	r1, r1
    aa68:	e0 91 b7 0f 	lds	r30, 0x0FB7
    aa6c:	f0 91 b8 0f 	lds	r31, 0x0FB8
    aa70:	e8 0f       	add	r30, r24
    aa72:	f9 1f       	adc	r31, r25
    aa74:	33 96       	adiw	r30, 0x03	; 3
    aa76:	25 91       	lpm	r18, Z+
    aa78:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    aa7a:	21 15       	cp	r18, r1
    aa7c:	31 05       	cpc	r19, r1
    aa7e:	19 f4       	brne	.+6      	; 0xaa86 <TriggerCommon+0xf6>
		track->patchCommandStreamPos=NULL;
    aa80:	1d 8a       	std	Y+21, r1	; 0x15
    aa82:	1c 8a       	std	Y+20, r1	; 0x14
    aa84:	07 c0       	rjmp	.+14     	; 0xaa94 <TriggerCommon+0x104>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    aa86:	f9 01       	movw	r30, r18
    aa88:	84 91       	lpm	r24, Z+
    aa8a:	89 8b       	std	Y+17, r24	; 0x11
		track->patchCommandStreamPos=pos;
    aa8c:	2f 5f       	subi	r18, 0xFF	; 255
    aa8e:	3f 4f       	sbci	r19, 0xFF	; 255
    aa90:	3d 8b       	std	Y+21, r19	; 0x15
    aa92:	2c 8b       	std	Y+20, r18	; 0x14
	}

}
    aa94:	cd b7       	in	r28, 0x3d	; 61
    aa96:	de b7       	in	r29, 0x3e	; 62
    aa98:	e6 e0       	ldi	r30, 0x06	; 6
    aa9a:	0c 94 1a 77 	jmp	0xee34	; 0xee34 <__epilogue_restores__+0x18>

0000aa9e <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    aa9e:	1f 93       	push	r17
    aaa0:	78 2f       	mov	r23, r24
    aaa2:	14 2f       	mov	r17, r20

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    aaa4:	a8 2f       	mov	r26, r24
    aaa6:	b0 e0       	ldi	r27, 0x00	; 0
    aaa8:	86 e1       	ldi	r24, 0x16	; 22
    aaaa:	90 e0       	ldi	r25, 0x00	; 0
    aaac:	a8 9f       	mul	r26, r24
    aaae:	f0 01       	movw	r30, r0
    aab0:	a9 9f       	mul	r26, r25
    aab2:	f0 0d       	add	r31, r0
    aab4:	b8 9f       	mul	r27, r24
    aab6:	f0 0d       	add	r31, r0
    aab8:	11 24       	eor	r1, r1
    aaba:	e9 5b       	subi	r30, 0xB9	; 185
    aabc:	f0 4f       	sbci	r31, 0xF0	; 240
    aabe:	30 81       	ld	r19, Z
    aac0:	53 2f       	mov	r21, r19
    aac2:	35 ff       	sbrs	r19, 5
    aac4:	02 c0       	rjmp	.+4      	; 0xaaca <TriggerNote+0x2c>
    aac6:	37 fd       	sbrc	r19, 7
    aac8:	32 c0       	rjmp	.+100    	; 0xab2e <TriggerNote+0x90>
			
		if(volume==0){ //note-off received
    aaca:	22 23       	and	r18, r18
    aacc:	f9 f4       	brne	.+62     	; 0xab0c <TriggerNote+0x6e>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    aace:	86 e1       	ldi	r24, 0x16	; 22
    aad0:	90 e0       	ldi	r25, 0x00	; 0
    aad2:	a8 9f       	mul	r26, r24
    aad4:	f0 01       	movw	r30, r0
    aad6:	a9 9f       	mul	r26, r25
    aad8:	f0 0d       	add	r31, r0
    aada:	b8 9f       	mul	r27, r24
    aadc:	f0 0d       	add	r31, r0
    aade:	11 24       	eor	r1, r1
    aae0:	e9 5b       	subi	r30, 0xB9	; 185
    aae2:	f0 4f       	sbci	r31, 0xF0	; 240
    aae4:	85 85       	ldd	r24, Z+13	; 0x0d
    aae6:	88 23       	and	r24, r24
    aae8:	11 f4       	brne	.+4      	; 0xaaee <TriggerNote+0x50>
    aaea:	56 ff       	sbrs	r21, 6
				tracks[channel].noteVol=0;	
    aaec:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    aaee:	86 e1       	ldi	r24, 0x16	; 22
    aaf0:	90 e0       	ldi	r25, 0x00	; 0
    aaf2:	a8 9f       	mul	r26, r24
    aaf4:	f0 01       	movw	r30, r0
    aaf6:	a9 9f       	mul	r26, r25
    aaf8:	f0 0d       	add	r31, r0
    aafa:	b8 9f       	mul	r27, r24
    aafc:	f0 0d       	add	r31, r0
    aafe:	11 24       	eor	r1, r1
    ab00:	e9 5b       	subi	r30, 0xB9	; 185
    ab02:	f0 4f       	sbci	r31, 0xF0	; 240
    ab04:	80 81       	ld	r24, Z
    ab06:	8f 7b       	andi	r24, 0xBF	; 191
    ab08:	80 83       	st	Z, r24
    ab0a:	11 c0       	rjmp	.+34     	; 0xab2e <TriggerNote+0x90>
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    ab0c:	86 e1       	ldi	r24, 0x16	; 22
    ab0e:	90 e0       	ldi	r25, 0x00	; 0
    ab10:	a8 9f       	mul	r26, r24
    ab12:	f0 01       	movw	r30, r0
    ab14:	a9 9f       	mul	r26, r25
    ab16:	f0 0d       	add	r31, r0
    ab18:	b8 9f       	mul	r27, r24
    ab1a:	f0 0d       	add	r31, r0
    ab1c:	11 24       	eor	r1, r1
    ab1e:	e9 5b       	subi	r30, 0xB9	; 185
    ab20:	f0 4f       	sbci	r31, 0xF0	; 240
    ab22:	3f 77       	andi	r19, 0x7F	; 127
    ab24:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    ab26:	87 2f       	mov	r24, r23
    ab28:	42 2f       	mov	r20, r18
    ab2a:	21 2f       	mov	r18, r17
    ab2c:	31 df       	rcall	.-414    	; 0xa990 <TriggerCommon>
		}

	}
}
    ab2e:	1f 91       	pop	r17
    ab30:	08 95       	ret

0000ab32 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    ab32:	af 92       	push	r10
    ab34:	bf 92       	push	r11
    ab36:	df 92       	push	r13
    ab38:	ef 92       	push	r14
    ab3a:	ff 92       	push	r15
    ab3c:	0f 93       	push	r16
    ab3e:	1f 93       	push	r17
    ab40:	cf 93       	push	r28
    ab42:	df 93       	push	r29
    ab44:	a7 e4       	ldi	r26, 0x47	; 71
    ab46:	bf e0       	ldi	r27, 0x0F	; 15
    ab48:	c2 e2       	ldi	r28, 0x22	; 34
    ab4a:	df e0       	ldi	r29, 0x0F	; 15
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    ab4c:	1d 96       	adiw	r26, 0x0d	; 13
    ab4e:	8c 91       	ld	r24, X
    ab50:	1d 97       	sbiw	r26, 0x0d	; 13
    ab52:	88 23       	and	r24, r24
    ab54:	b9 f0       	breq	.+46     	; 0xab84 <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;		
    ab56:	28 2f       	mov	r18, r24
    ab58:	33 27       	eor	r19, r19
    ab5a:	27 fd       	sbrc	r18, 7
    ab5c:	30 95       	com	r19
    ab5e:	1c 96       	adiw	r26, 0x0c	; 12
    ab60:	8c 91       	ld	r24, X
    ab62:	1c 97       	sbiw	r26, 0x0c	; 12
    ab64:	28 0f       	add	r18, r24
    ab66:	31 1d       	adc	r19, r1
    ab68:	2f 3f       	cpi	r18, 0xFF	; 255
    ab6a:	31 05       	cpc	r19, r1
    ab6c:	19 f0       	breq	.+6      	; 0xab74 <ProcessMusic+0x42>
    ab6e:	14 f0       	brlt	.+4      	; 0xab74 <ProcessMusic+0x42>
    ab70:	2f ef       	ldi	r18, 0xFF	; 255
    ab72:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    ab74:	c9 01       	movw	r24, r18
    ab76:	37 ff       	sbrs	r19, 7
    ab78:	02 c0       	rjmp	.+4      	; 0xab7e <ProcessMusic+0x4c>
    ab7a:	80 e0       	ldi	r24, 0x00	; 0
    ab7c:	90 e0       	ldi	r25, 0x00	; 0
    ab7e:	1c 96       	adiw	r26, 0x0c	; 12
    ab80:	8c 93       	st	X, r24
    ab82:	1c 97       	sbiw	r26, 0x0c	; 12
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    ab84:	8c 91       	ld	r24, X
    ab86:	83 ff       	sbrs	r24, 3
    ab88:	26 c0       	rjmp	.+76     	; 0xabd6 <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    ab8a:	12 96       	adiw	r26, 0x02	; 2
    ab8c:	4d 91       	ld	r20, X+
    ab8e:	5c 91       	ld	r21, X
    ab90:	13 97       	sbiw	r26, 0x03	; 3
    ab92:	28 81       	ld	r18, Y
    ab94:	39 81       	ldd	r19, Y+1	; 0x01
    ab96:	24 0f       	add	r18, r20
    ab98:	35 1f       	adc	r19, r21
    ab9a:	39 83       	std	Y+1, r19	; 0x01
    ab9c:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    ab9e:	14 96       	adiw	r26, 0x04	; 4
    aba0:	8c 91       	ld	r24, X
    aba2:	14 97       	sbiw	r26, 0x04	; 4
    aba4:	e8 2f       	mov	r30, r24
    aba6:	f0 e0       	ldi	r31, 0x00	; 0
    aba8:	ee 0f       	add	r30, r30
    abaa:	ff 1f       	adc	r31, r31
    abac:	e8 5f       	subi	r30, 0xF8	; 248
    abae:	fe 44       	sbci	r31, 0x4E	; 78
    abb0:	85 91       	lpm	r24, Z+
    abb2:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    abb4:	14 16       	cp	r1, r20
    abb6:	15 06       	cpc	r1, r21
    abb8:	24 f4       	brge	.+8      	; 0xabc2 <ProcessMusic+0x90>
    abba:	28 17       	cp	r18, r24
    abbc:	39 07       	cpc	r19, r25
    abbe:	30 f4       	brcc	.+12     	; 0xabcc <ProcessMusic+0x9a>
    abc0:	0a c0       	rjmp	.+20     	; 0xabd6 <ProcessMusic+0xa4>
    abc2:	45 2b       	or	r20, r21
    abc4:	41 f0       	breq	.+16     	; 0xabd6 <ProcessMusic+0xa4>
    abc6:	82 17       	cp	r24, r18
    abc8:	93 07       	cpc	r25, r19
    abca:	28 f0       	brcs	.+10     	; 0xabd6 <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    abcc:	99 83       	std	Y+1, r25	; 0x01
    abce:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    abd0:	8c 91       	ld	r24, X
    abd2:	87 7f       	andi	r24, 0xF7	; 247
    abd4:	8c 93       	st	X, r24
    abd6:	56 96       	adiw	r26, 0x16	; 22
    abd8:	26 96       	adiw	r28, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    abda:	2f e0       	ldi	r18, 0x0F	; 15
    abdc:	a5 3b       	cpi	r26, 0xB5	; 181
    abde:	b2 07       	cpc	r27, r18
    abe0:	09 f0       	breq	.+2      	; 0xabe4 <ProcessMusic+0xb2>
    abe2:	b4 cf       	rjmp	.-152    	; 0xab4c <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    abe4:	80 91 43 0f 	lds	r24, 0x0F43
    abe8:	88 23       	and	r24, r24
    abea:	09 f0       	breq	.+2      	; 0xabee <ProcessMusic+0xbc>
    abec:	dc c0       	rjmp	.+440    	; 0xada6 <ProcessMusic+0x274>
    abee:	f4 c0       	rjmp	.+488    	; 0xadd8 <ProcessMusic+0x2a6>
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){

			c1=pgm_read_byte(songPos++);
    abf0:	e0 91 be 0f 	lds	r30, 0x0FBE
    abf4:	f0 91 bf 0f 	lds	r31, 0x0FBF
    abf8:	cf 01       	movw	r24, r30
    abfa:	01 96       	adiw	r24, 0x01	; 1
    abfc:	90 93 bf 0f 	sts	0x0FBF, r25
    ac00:	80 93 be 0f 	sts	0x0FBE, r24
    ac04:	44 91       	lpm	r20, Z+
			
			if(c1==0xff){
    ac06:	4f 3f       	cpi	r20, 0xFF	; 255
    ac08:	69 f5       	brne	.+90     	; 0xac64 <ProcessMusic+0x132>
				//META data type event
				c1=pgm_read_byte(songPos++);
    ac0a:	ac 01       	movw	r20, r24
    ac0c:	4f 5f       	subi	r20, 0xFF	; 255
    ac0e:	5f 4f       	sbci	r21, 0xFF	; 255
    ac10:	50 93 bf 0f 	sts	0x0FBF, r21
    ac14:	40 93 be 0f 	sts	0x0FBE, r20
    ac18:	fc 01       	movw	r30, r24
    ac1a:	84 91       	lpm	r24, Z+

				
				if(c1==0x2f){ //end of song
    ac1c:	8f 32       	cpi	r24, 0x2F	; 47
    ac1e:	19 f4       	brne	.+6      	; 0xac26 <ProcessMusic+0xf4>
					playSong=false;
    ac20:	10 92 43 0f 	sts	0x0F43, r1
    ac24:	ce c0       	rjmp	.+412    	; 0xadc2 <ProcessMusic+0x290>
					break;	
				}else if(c1==0x6){ //marker
    ac26:	86 30       	cpi	r24, 0x06	; 6
    ac28:	09 f0       	breq	.+2      	; 0xac2c <ProcessMusic+0xfa>
    ac2a:	b1 c0       	rjmp	.+354    	; 0xad8e <ProcessMusic+0x25c>
					c1=pgm_read_byte(songPos++); //read len
    ac2c:	fa 01       	movw	r30, r20
    ac2e:	31 96       	adiw	r30, 0x01	; 1
					c2=pgm_read_byte(songPos++); //read data
    ac30:	cf 01       	movw	r24, r30
    ac32:	01 96       	adiw	r24, 0x01	; 1
    ac34:	90 93 bf 0f 	sts	0x0FBF, r25
    ac38:	80 93 be 0f 	sts	0x0FBE, r24
    ac3c:	e4 91       	lpm	r30, Z+
					if(c2=='S'){ //loop start
    ac3e:	e3 35       	cpi	r30, 0x53	; 83
    ac40:	29 f4       	brne	.+10     	; 0xac4c <ProcessMusic+0x11a>
						loopStart=songPos;
    ac42:	90 93 c1 0f 	sts	0x0FC1, r25
    ac46:	80 93 c0 0f 	sts	0x0FC0, r24
    ac4a:	a1 c0       	rjmp	.+322    	; 0xad8e <ProcessMusic+0x25c>
					}else if(c2=='E'){//loop end
    ac4c:	e5 34       	cpi	r30, 0x45	; 69
    ac4e:	09 f0       	breq	.+2      	; 0xac52 <ProcessMusic+0x120>
    ac50:	9e c0       	rjmp	.+316    	; 0xad8e <ProcessMusic+0x25c>
						songPos=loopStart;
    ac52:	80 91 c0 0f 	lds	r24, 0x0FC0
    ac56:	90 91 c1 0f 	lds	r25, 0x0FC1
    ac5a:	90 93 bf 0f 	sts	0x0FBF, r25
    ac5e:	80 93 be 0f 	sts	0x0FBE, r24
    ac62:	95 c0       	rjmp	.+298    	; 0xad8e <ProcessMusic+0x25c>
				}
				

			}else{

				if(c1&0x80) lastStatus=c1;					
    ac64:	47 ff       	sbrs	r20, 7
    ac66:	02 c0       	rjmp	.+4      	; 0xac6c <ProcessMusic+0x13a>
    ac68:	40 93 b9 0f 	sts	0x0FB9, r20
				channel=lastStatus&0x0f;
    ac6c:	20 91 b9 0f 	lds	r18, 0x0FB9
    ac70:	32 2f       	mov	r19, r18
    ac72:	3f 70       	andi	r19, 0x0F	; 15
				
				//get next data byte
				//Note: maybe we should not advance the cursor
				//in case we receive an unsupported command				
				if(c1&0x80) c1=pgm_read_byte(songPos++); 
    ac74:	47 ff       	sbrs	r20, 7
    ac76:	08 c0       	rjmp	.+16     	; 0xac88 <ProcessMusic+0x156>
    ac78:	01 96       	adiw	r24, 0x01	; 1
    ac7a:	90 93 bf 0f 	sts	0x0FBF, r25
    ac7e:	80 93 be 0f 	sts	0x0FBE, r24
    ac82:	01 97       	sbiw	r24, 0x01	; 1
    ac84:	fc 01       	movw	r30, r24
    ac86:	44 91       	lpm	r20, Z+

				switch(lastStatus&0xf0){
    ac88:	82 2f       	mov	r24, r18
    ac8a:	90 e0       	ldi	r25, 0x00	; 0
    ac8c:	80 7f       	andi	r24, 0xF0	; 240
    ac8e:	90 70       	andi	r25, 0x00	; 0
    ac90:	80 3b       	cpi	r24, 0xB0	; 176
    ac92:	91 05       	cpc	r25, r1
    ac94:	29 f1       	breq	.+74     	; 0xace0 <ProcessMusic+0x1ae>
    ac96:	80 3c       	cpi	r24, 0xC0	; 192
    ac98:	91 05       	cpc	r25, r1
    ac9a:	09 f4       	brne	.+2      	; 0xac9e <ProcessMusic+0x16c>
    ac9c:	6c c0       	rjmp	.+216    	; 0xad76 <ProcessMusic+0x244>
    ac9e:	80 39       	cpi	r24, 0x90	; 144
    aca0:	91 05       	cpc	r25, r1
    aca2:	09 f0       	breq	.+2      	; 0xaca6 <ProcessMusic+0x174>
    aca4:	74 c0       	rjmp	.+232    	; 0xad8e <ProcessMusic+0x25c>

					//note-on
					case 0x90:
						//c1 = note						
						c2=pgm_read_byte(songPos++)<<1; //get volume
    aca6:	e0 91 be 0f 	lds	r30, 0x0FBE
    acaa:	f0 91 bf 0f 	lds	r31, 0x0FBF
    acae:	31 96       	adiw	r30, 0x01	; 1
    acb0:	f0 93 bf 0f 	sts	0x0FBF, r31
    acb4:	e0 93 be 0f 	sts	0x0FBE, r30
    acb8:	31 97       	sbiw	r30, 0x01	; 1
    acba:	e4 91       	lpm	r30, Z+
						
						if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
							TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    acbc:	83 2f       	mov	r24, r19
    acbe:	90 e0       	ldi	r25, 0x00	; 0
    acc0:	8c 9f       	mul	r24, r28
    acc2:	d0 01       	movw	r26, r0
    acc4:	8d 9f       	mul	r24, r29
    acc6:	b0 0d       	add	r27, r0
    acc8:	9c 9f       	mul	r25, r28
    acca:	b0 0d       	add	r27, r0
    accc:	11 24       	eor	r1, r1
    acce:	a9 5b       	subi	r26, 0xB9	; 185
    acd0:	b0 4f       	sbci	r27, 0xF0	; 240
    acd2:	ee 0f       	add	r30, r30
    acd4:	83 2f       	mov	r24, r19
    acd6:	1e 96       	adiw	r26, 0x0e	; 14
    acd8:	6c 91       	ld	r22, X
    acda:	2e 2f       	mov	r18, r30
    acdc:	e0 de       	rcall	.-576    	; 0xaa9e <TriggerNote>
    acde:	57 c0       	rjmp	.+174    	; 0xad8e <ProcessMusic+0x25c>
						break;

					//controllers
					case 0xb0:
						///c1 = controller #
						c2=pgm_read_byte(songPos++); //get controller value
    ace0:	e0 91 be 0f 	lds	r30, 0x0FBE
    ace4:	f0 91 bf 0f 	lds	r31, 0x0FBF
    ace8:	31 96       	adiw	r30, 0x01	; 1
    acea:	f0 93 bf 0f 	sts	0x0FBF, r31
    acee:	e0 93 be 0f 	sts	0x0FBE, r30
    acf2:	31 97       	sbiw	r30, 0x01	; 1
    acf4:	24 91       	lpm	r18, Z+
						
						if(c1==CONTROLER_VOL){
    acf6:	47 30       	cpi	r20, 0x07	; 7
    acf8:	71 f4       	brne	.+28     	; 0xad16 <ProcessMusic+0x1e4>
							tracks[channel].trackVol=c2<<1;
    acfa:	83 2f       	mov	r24, r19
    acfc:	90 e0       	ldi	r25, 0x00	; 0
    acfe:	8c 9f       	mul	r24, r28
    ad00:	f0 01       	movw	r30, r0
    ad02:	8d 9f       	mul	r24, r29
    ad04:	f0 0d       	add	r31, r0
    ad06:	9c 9f       	mul	r25, r28
    ad08:	f0 0d       	add	r31, r0
    ad0a:	11 24       	eor	r1, r1
    ad0c:	e9 5b       	subi	r30, 0xB9	; 185
    ad0e:	f0 4f       	sbci	r31, 0xF0	; 240
    ad10:	22 0f       	add	r18, r18
    ad12:	22 87       	std	Z+10, r18	; 0x0a
    ad14:	3c c0       	rjmp	.+120    	; 0xad8e <ProcessMusic+0x25c>
						}else if(c1==CONTROLER_EXPRESSION){
    ad16:	4b 30       	cpi	r20, 0x0B	; 11
    ad18:	71 f4       	brne	.+28     	; 0xad36 <ProcessMusic+0x204>
							tracks[channel].expressionVol=c2<<1;
    ad1a:	83 2f       	mov	r24, r19
    ad1c:	90 e0       	ldi	r25, 0x00	; 0
    ad1e:	8c 9f       	mul	r24, r28
    ad20:	f0 01       	movw	r30, r0
    ad22:	8d 9f       	mul	r24, r29
    ad24:	f0 0d       	add	r31, r0
    ad26:	9c 9f       	mul	r25, r28
    ad28:	f0 0d       	add	r31, r0
    ad2a:	11 24       	eor	r1, r1
    ad2c:	e9 5b       	subi	r30, 0xB9	; 185
    ad2e:	f0 4f       	sbci	r31, 0xF0	; 240
    ad30:	22 0f       	add	r18, r18
    ad32:	21 87       	std	Z+9, r18	; 0x09
    ad34:	2c c0       	rjmp	.+88     	; 0xad8e <ProcessMusic+0x25c>
						}else if(c1==CONTROLER_TREMOLO){
    ad36:	4c 35       	cpi	r20, 0x5C	; 92
    ad38:	71 f4       	brne	.+28     	; 0xad56 <ProcessMusic+0x224>
							tracks[channel].tremoloLevel=c2<<1;
    ad3a:	83 2f       	mov	r24, r19
    ad3c:	90 e0       	ldi	r25, 0x00	; 0
    ad3e:	8c 9f       	mul	r24, r28
    ad40:	f0 01       	movw	r30, r0
    ad42:	8d 9f       	mul	r24, r29
    ad44:	f0 0d       	add	r31, r0
    ad46:	9c 9f       	mul	r25, r28
    ad48:	f0 0d       	add	r31, r0
    ad4a:	11 24       	eor	r1, r1
    ad4c:	e9 5b       	subi	r30, 0xB9	; 185
    ad4e:	f0 4f       	sbci	r31, 0xF0	; 240
    ad50:	22 0f       	add	r18, r18
    ad52:	27 83       	std	Z+7, r18	; 0x07
    ad54:	1c c0       	rjmp	.+56     	; 0xad8e <ProcessMusic+0x25c>
						}else if(c1==CONTROLER_TREMOLO_RATE){
    ad56:	44 36       	cpi	r20, 0x64	; 100
    ad58:	d1 f4       	brne	.+52     	; 0xad8e <ProcessMusic+0x25c>
							tracks[channel].tremoloRate=c2<<1;
    ad5a:	83 2f       	mov	r24, r19
    ad5c:	90 e0       	ldi	r25, 0x00	; 0
    ad5e:	8c 9f       	mul	r24, r28
    ad60:	f0 01       	movw	r30, r0
    ad62:	8d 9f       	mul	r24, r29
    ad64:	f0 0d       	add	r31, r0
    ad66:	9c 9f       	mul	r25, r28
    ad68:	f0 0d       	add	r31, r0
    ad6a:	11 24       	eor	r1, r1
    ad6c:	e9 5b       	subi	r30, 0xB9	; 185
    ad6e:	f0 4f       	sbci	r31, 0xF0	; 240
    ad70:	22 0f       	add	r18, r18
    ad72:	20 87       	std	Z+8, r18	; 0x08
    ad74:	0c c0       	rjmp	.+24     	; 0xad8e <ProcessMusic+0x25c>
						break;

					//program change
					case 0xc0:
						// c1 = patch #						
						tracks[channel].patchNo=c1;
    ad76:	83 2f       	mov	r24, r19
    ad78:	90 e0       	ldi	r25, 0x00	; 0
    ad7a:	8c 9f       	mul	r24, r28
    ad7c:	f0 01       	movw	r30, r0
    ad7e:	8d 9f       	mul	r24, r29
    ad80:	f0 0d       	add	r31, r0
    ad82:	9c 9f       	mul	r25, r28
    ad84:	f0 0d       	add	r31, r0
    ad86:	11 24       	eor	r1, r1
    ad88:	e9 5b       	subi	r30, 0xB9	; 185
    ad8a:	f0 4f       	sbci	r31, 0xF0	; 240
    ad8c:	46 87       	std	Z+14, r20	; 0x0e


			}//end if(c1==0xff)

			//read next delta time
			nextDeltaTime=ReadVarLen(&songPos);			
    ad8e:	8e eb       	ldi	r24, 0xBE	; 190
    ad90:	9f e0       	ldi	r25, 0x0F	; 15
    ad92:	b9 dd       	rcall	.-1166   	; 0xa906 <ReadVarLen>
    ad94:	90 93 bc 0f 	sts	0x0FBC, r25
    ad98:	80 93 bb 0f 	sts	0x0FBB, r24
			currDeltaTime=0;
    ad9c:	10 92 b6 0f 	sts	0x0FB6, r1
    ada0:	10 92 b5 0f 	sts	0x0FB5, r1
    ada4:	02 c0       	rjmp	.+4      	; 0xadaa <ProcessMusic+0x278>
						}else if(c1==CONTROLER_EXPRESSION){
							tracks[channel].expressionVol=c2<<1;
						}else if(c1==CONTROLER_TREMOLO){
							tracks[channel].tremoloLevel=c2<<1;
						}else if(c1==CONTROLER_TREMOLO_RATE){
							tracks[channel].tremoloRate=c2<<1;
    ada6:	c6 e1       	ldi	r28, 0x16	; 22
    ada8:	d0 e0       	ldi	r29, 0x00	; 0


	//Process song MIDI notes
	if(playSong){
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){
    adaa:	20 91 b5 0f 	lds	r18, 0x0FB5
    adae:	30 91 b6 0f 	lds	r19, 0x0FB6
    adb2:	80 91 bb 0f 	lds	r24, 0x0FBB
    adb6:	90 91 bc 0f 	lds	r25, 0x0FBC
    adba:	28 17       	cp	r18, r24
    adbc:	39 07       	cpc	r19, r25
    adbe:	09 f4       	brne	.+2      	; 0xadc2 <ProcessMusic+0x290>
    adc0:	17 cf       	rjmp	.-466    	; 0xabf0 <ProcessMusic+0xbe>
				}
			#endif

		}//end while
		
		if(++currDeltaTime == 65535)
    adc2:	c9 01       	movw	r24, r18
    adc4:	01 96       	adiw	r24, 0x01	; 1
    adc6:	90 93 b6 0f 	sts	0x0FB6, r25
    adca:	80 93 b5 0f 	sts	0x0FB5, r24
    adce:	8f 5f       	subi	r24, 0xFF	; 255
    add0:	9f 4f       	sbci	r25, 0xFF	; 255
    add2:	11 f4       	brne	.+4      	; 0xadd8 <ProcessMusic+0x2a6>
			playSong = false;
    add4:	10 92 43 0f 	sts	0x0F43, r1
    add8:	c7 e4       	ldi	r28, 0x47	; 71
    adda:	df e0       	ldi	r29, 0x0F	; 15
    addc:	01 e2       	ldi	r16, 0x21	; 33
    adde:	1f e0       	ldi	r17, 0x0F	; 15
    ade0:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    ade2:	ef ef       	ldi	r30, 0xFF	; 255
    ade4:	ae 2e       	mov	r10, r30
    ade6:	b1 2c       	mov	r11, r1
			#endif

		}//end while
		
		if(++currDeltaTime == 65535)
			playSong = false;
    ade8:	dc 2e       	mov	r13, r28
    adea:	ed 2e       	mov	r14, r29
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    adec:	88 81       	ld	r24, Y
    adee:	86 fd       	sbrc	r24, 6
    adf0:	3d c0       	rjmp	.+122    	; 0xae6c <ProcessMusic+0x33a>

			if(track->patchCommandStreamPos!=NULL && 
    adf2:	8c 89       	ldd	r24, Y+20	; 0x14
    adf4:	9d 89       	ldd	r25, Y+21	; 0x15
    adf6:	89 2b       	or	r24, r25
    adf8:	09 f4       	brne	.+2      	; 0xadfc <ProcessMusic+0x2ca>
    adfa:	35 c0       	rjmp	.+106    	; 0xae66 <ProcessMusic+0x334>
    adfc:	9a 89       	ldd	r25, Y+18	; 0x12
    adfe:	89 89       	ldd	r24, Y+17	; 0x11
    ae00:	98 17       	cp	r25, r24
    ae02:	68 f5       	brcc	.+90     	; 0xae5e <ProcessMusic+0x32c>
    ae04:	30 c0       	rjmp	.+96     	; 0xae66 <ProcessMusic+0x334>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    ae06:	ec 89       	ldd	r30, Y+20	; 0x14
    ae08:	fd 89       	ldd	r31, Y+21	; 0x15
    ae0a:	cf 01       	movw	r24, r30
    ae0c:	01 96       	adiw	r24, 0x01	; 1
    ae0e:	9d 8b       	std	Y+21, r25	; 0x15
    ae10:	8c 8b       	std	Y+20, r24	; 0x14
    ae12:	24 91       	lpm	r18, Z+
					if(c1==0xff){					
    ae14:	2f 3f       	cpi	r18, 0xFF	; 255
    ae16:	31 f4       	brne	.+12     	; 0xae24 <ProcessMusic+0x2f2>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    ae18:	88 81       	ld	r24, Y
    ae1a:	8f 77       	andi	r24, 0x7F	; 127
    ae1c:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    ae1e:	1d 8a       	std	Y+21, r1	; 0x15
    ae20:	1c 8a       	std	Y+20, r1	; 0x14
    ae22:	21 c0       	rjmp	.+66     	; 0xae66 <ProcessMusic+0x334>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    ae24:	01 96       	adiw	r24, 0x01	; 1
    ae26:	9d 8b       	std	Y+21, r25	; 0x15
    ae28:	8c 8b       	std	Y+20, r24	; 0x14
    ae2a:	01 97       	sbiw	r24, 0x01	; 1
    ae2c:	fc 01       	movw	r30, r24
    ae2e:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    ae30:	82 2f       	mov	r24, r18
    ae32:	90 e0       	ldi	r25, 0x00	; 0
    ae34:	88 0f       	add	r24, r24
    ae36:	99 1f       	adc	r25, r25
    ae38:	82 54       	subi	r24, 0x42	; 66
    ae3a:	9f 4f       	sbci	r25, 0xFF	; 255
    ae3c:	fc 01       	movw	r30, r24
    ae3e:	25 91       	lpm	r18, Z+
    ae40:	34 91       	lpm	r19, Z+
    ae42:	8d 2d       	mov	r24, r13
    ae44:	9e 2d       	mov	r25, r14
    ae46:	6f 2d       	mov	r22, r15
    ae48:	f9 01       	movw	r30, r18
    ae4a:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    ae4c:	ec 89       	ldd	r30, Y+20	; 0x14
    ae4e:	fd 89       	ldd	r31, Y+21	; 0x15
    ae50:	31 96       	adiw	r30, 0x01	; 1
    ae52:	fd 8b       	std	Y+21, r31	; 0x15
    ae54:	ec 8b       	std	Y+20, r30	; 0x14
    ae56:	31 97       	sbiw	r30, 0x01	; 1
    ae58:	e4 91       	lpm	r30, Z+
    ae5a:	e9 8b       	std	Y+17, r30	; 0x11
					
					track->patchCurrDeltaTime=0;	
    ae5c:	1a 8a       	std	Y+18, r1	; 0x12

			if(track->patchCommandStreamPos!=NULL && 
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    ae5e:	9a 89       	ldd	r25, Y+18	; 0x12
    ae60:	89 89       	ldd	r24, Y+17	; 0x11
    ae62:	98 17       	cp	r25, r24
    ae64:	81 f2       	breq	.-96     	; 0xae06 <ProcessMusic+0x2d4>
					track->patchCurrDeltaTime=0;	

				}		
			}				
			
			track->patchCurrDeltaTime++;
    ae66:	8a 89       	ldd	r24, Y+18	; 0x12
    ae68:	8f 5f       	subi	r24, 0xFF	; 255
    ae6a:	8a 8b       	std	Y+18, r24	; 0x12
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    ae6c:	88 81       	ld	r24, Y
    ae6e:	85 fd       	sbrc	r24, 5
    ae70:	03 c0       	rjmp	.+6      	; 0xae78 <ProcessMusic+0x346>
    ae72:	20 e0       	ldi	r18, 0x00	; 0
    ae74:	30 e0       	ldi	r19, 0x00	; 0
    ae76:	70 c0       	rjmp	.+224    	; 0xaf58 <ProcessMusic+0x426>
		
			if(track->patchPlayingTime<0xff){
    ae78:	8b 89       	ldd	r24, Y+19	; 0x13
    ae7a:	8f 3f       	cpi	r24, 0xFF	; 255
    ae7c:	11 f0       	breq	.+4      	; 0xae82 <ProcessMusic+0x350>
				track->patchPlayingTime++;
    ae7e:	8f 5f       	subi	r24, 0xFF	; 255
    ae80:	8b 8b       	std	Y+19, r24	; 0x13
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    ae82:	88 81       	ld	r24, Y
    ae84:	87 ff       	sbrs	r24, 7
    ae86:	02 c0       	rjmp	.+4      	; 0xae8c <ProcessMusic+0x35a>
    ae88:	8f ef       	ldi	r24, 0xFF	; 255
    ae8a:	01 c0       	rjmp	.+2      	; 0xae8e <ProcessMusic+0x35c>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    ae8c:	8a 85       	ldd	r24, Y+10	; 0x0a
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    ae8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    ae90:	99 23       	and	r25, r25
    ae92:	09 f4       	brne	.+2      	; 0xae96 <ProcessMusic+0x364>
    ae94:	5b c0       	rjmp	.+182    	; 0xaf4c <ProcessMusic+0x41a>
    ae96:	2c 85       	ldd	r18, Y+12	; 0x0c
    ae98:	22 23       	and	r18, r18
    ae9a:	09 f4       	brne	.+2      	; 0xae9e <ProcessMusic+0x36c>
    ae9c:	57 c0       	rjmp	.+174    	; 0xaf4c <ProcessMusic+0x41a>
    ae9e:	88 23       	and	r24, r24
    aea0:	09 f4       	brne	.+2      	; 0xaea4 <ProcessMusic+0x372>
    aea2:	54 c0       	rjmp	.+168    	; 0xaf4c <ProcessMusic+0x41a>
    aea4:	40 91 ba 0f 	lds	r20, 0x0FBA
    aea8:	44 23       	and	r20, r20
    aeaa:	09 f4       	brne	.+2      	; 0xaeae <ProcessMusic+0x37c>
    aeac:	4f c0       	rjmp	.+158    	; 0xaf4c <ProcessMusic+0x41a>

				uVol=(track->noteVol*trackVol)+0x100;
    aeae:	89 9f       	mul	r24, r25
    aeb0:	c0 01       	movw	r24, r0
    aeb2:	11 24       	eor	r1, r1
    aeb4:	80 50       	subi	r24, 0x00	; 0
    aeb6:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->envelopeVol)+0x100;
    aeb8:	89 2f       	mov	r24, r25
    aeba:	99 27       	eor	r25, r25
    aebc:	30 e0       	ldi	r19, 0x00	; 0
    aebe:	b9 01       	movw	r22, r18
    aec0:	86 9f       	mul	r24, r22
    aec2:	90 01       	movw	r18, r0
    aec4:	87 9f       	mul	r24, r23
    aec6:	30 0d       	add	r19, r0
    aec8:	96 9f       	mul	r25, r22
    aeca:	30 0d       	add	r19, r0
    aecc:	11 24       	eor	r1, r1
    aece:	20 50       	subi	r18, 0x00	; 0
    aed0:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->expressionVol)+0x100;
    aed2:	23 2f       	mov	r18, r19
    aed4:	33 27       	eor	r19, r19
    aed6:	89 85       	ldd	r24, Y+9	; 0x09
    aed8:	90 e0       	ldi	r25, 0x00	; 0
    aeda:	fc 01       	movw	r30, r24
    aedc:	2e 9f       	mul	r18, r30
    aede:	c0 01       	movw	r24, r0
    aee0:	2f 9f       	mul	r18, r31
    aee2:	90 0d       	add	r25, r0
    aee4:	3e 9f       	mul	r19, r30
    aee6:	90 0d       	add	r25, r0
    aee8:	11 24       	eor	r1, r1
    aeea:	80 50       	subi	r24, 0x00	; 0
    aeec:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    aeee:	89 2f       	mov	r24, r25
    aef0:	99 27       	eor	r25, r25
    aef2:	24 2f       	mov	r18, r20
    aef4:	30 e0       	ldi	r19, 0x00	; 0
    aef6:	ac 01       	movw	r20, r24
    aef8:	42 9f       	mul	r20, r18
    aefa:	c0 01       	movw	r24, r0
    aefc:	43 9f       	mul	r20, r19
    aefe:	90 0d       	add	r25, r0
    af00:	52 9f       	mul	r21, r18
    af02:	90 0d       	add	r25, r0
    af04:	11 24       	eor	r1, r1
    af06:	80 50       	subi	r24, 0x00	; 0
    af08:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    af0a:	29 2f       	mov	r18, r25
    af0c:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    af0e:	8f 81       	ldd	r24, Y+7	; 0x07
    af10:	88 23       	and	r24, r24
    af12:	f1 f0       	breq	.+60     	; 0xaf50 <ProcessMusic+0x41e>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    af14:	ee 81       	ldd	r30, Y+6	; 0x06
    af16:	f0 e0       	ldi	r31, 0x00	; 0
    af18:	e0 50       	subi	r30, 0x00	; 0
    af1a:	fd 44       	sbci	r31, 0x4D	; 77
    af1c:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    af1e:	e0 58       	subi	r30, 0x80	; 128
    af20:	e8 9f       	mul	r30, r24
    af22:	c0 01       	movw	r24, r0
    af24:	11 24       	eor	r1, r1
    af26:	80 50       	subi	r24, 0x00	; 0
    af28:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    af2a:	89 2f       	mov	r24, r25
    af2c:	99 27       	eor	r25, r25
    af2e:	b5 01       	movw	r22, r10
    af30:	68 1b       	sub	r22, r24
    af32:	79 0b       	sbc	r23, r25
    af34:	62 9f       	mul	r22, r18
    af36:	c0 01       	movw	r24, r0
    af38:	63 9f       	mul	r22, r19
    af3a:	90 0d       	add	r25, r0
    af3c:	72 9f       	mul	r23, r18
    af3e:	90 0d       	add	r25, r0
    af40:	11 24       	eor	r1, r1
    af42:	80 50       	subi	r24, 0x00	; 0
    af44:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    af46:	29 2f       	mov	r18, r25
    af48:	33 27       	eor	r19, r19
    af4a:	02 c0       	rjmp	.+4      	; 0xaf50 <ProcessMusic+0x41e>
    af4c:	20 e0       	ldi	r18, 0x00	; 0
    af4e:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    af50:	8e 81       	ldd	r24, Y+6	; 0x06
    af52:	98 85       	ldd	r25, Y+8	; 0x08
    af54:	89 0f       	add	r24, r25
    af56:	8e 83       	std	Y+6, r24	; 0x06

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    af58:	f8 01       	movw	r30, r16
    af5a:	20 83       	st	Z, r18


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    af5c:	f3 94       	inc	r15
    af5e:	66 96       	adiw	r28, 0x16	; 22
    af60:	0a 5f       	subi	r16, 0xFA	; 250
    af62:	1f 4f       	sbci	r17, 0xFF	; 255
    af64:	f5 e0       	ldi	r31, 0x05	; 5
    af66:	ff 16       	cp	r15, r31
    af68:	09 f0       	breq	.+2      	; 0xaf6c <ProcessMusic+0x43a>
    af6a:	3e cf       	rjmp	.-388    	; 0xade8 <ProcessMusic+0x2b6>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    af6c:	df 91       	pop	r29
    af6e:	cf 91       	pop	r28
    af70:	1f 91       	pop	r17
    af72:	0f 91       	pop	r16
    af74:	ff 90       	pop	r15
    af76:	ef 90       	pop	r14
    af78:	df 90       	pop	r13
    af7a:	bf 90       	pop	r11
    af7c:	af 90       	pop	r10
    af7e:	08 95       	ret

0000af80 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    af80:	58 2f       	mov	r21, r24
    af82:	76 2f       	mov	r23, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    af84:	89 e0       	ldi	r24, 0x09	; 9
    af86:	58 9f       	mul	r21, r24
    af88:	c0 01       	movw	r24, r0
    af8a:	11 24       	eor	r1, r1
    af8c:	e0 91 b7 0f 	lds	r30, 0x0FB7
    af90:	f0 91 b8 0f 	lds	r31, 0x0FB8
    af94:	e8 0f       	add	r30, r24
    af96:	f9 1f       	adc	r31, r25
    af98:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    af9a:	81 30       	cpi	r24, 0x01	; 1
    af9c:	11 f4       	brne	.+4      	; 0xafa2 <TriggerFx+0x22>
    af9e:	43 e0       	ldi	r20, 0x03	; 3
    afa0:	21 c0       	rjmp	.+66     	; 0xafe4 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    afa2:	82 30       	cpi	r24, 0x02	; 2
    afa4:	11 f4       	brne	.+4      	; 0xafaa <TriggerFx+0x2a>
    afa6:	44 e0       	ldi	r20, 0x04	; 4
    afa8:	1d c0       	rjmp	.+58     	; 0xafe4 <TriggerFx+0x64>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    afaa:	80 91 5d 0f 	lds	r24, 0x0F5D
    afae:	87 ff       	sbrs	r24, 7
    afb0:	16 c0       	rjmp	.+44     	; 0xafde <TriggerFx+0x5e>
    afb2:	80 91 6c 0f 	lds	r24, 0x0F6C
    afb6:	85 17       	cp	r24, r21
    afb8:	11 f4       	brne	.+4      	; 0xafbe <TriggerFx+0x3e>
    afba:	44 23       	and	r20, r20
    afbc:	81 f4       	brne	.+32     	; 0xafde <TriggerFx+0x5e>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    afbe:	80 91 73 0f 	lds	r24, 0x0F73
    afc2:	87 ff       	sbrs	r24, 7
    afc4:	0e c0       	rjmp	.+28     	; 0xafe2 <TriggerFx+0x62>
    afc6:	80 91 82 0f 	lds	r24, 0x0F82
    afca:	85 17       	cp	r24, r21
    afcc:	11 f4       	brne	.+4      	; 0xafd2 <TriggerFx+0x52>
    afce:	44 23       	and	r20, r20
    afd0:	41 f4       	brne	.+16     	; 0xafe2 <TriggerFx+0x62>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    afd2:	90 91 70 0f 	lds	r25, 0x0F70
    afd6:	80 91 86 0f 	lds	r24, 0x0F86
    afda:	89 17       	cp	r24, r25
    afdc:	10 f4       	brcc	.+4      	; 0xafe2 <TriggerFx+0x62>
    afde:	41 e0       	ldi	r20, 0x01	; 1
    afe0:	01 c0       	rjmp	.+2      	; 0xafe4 <TriggerFx+0x64>
    afe2:	42 e0       	ldi	r20, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    afe4:	24 2f       	mov	r18, r20
    afe6:	30 e0       	ldi	r19, 0x00	; 0
    afe8:	86 e1       	ldi	r24, 0x16	; 22
    afea:	90 e0       	ldi	r25, 0x00	; 0
    afec:	28 9f       	mul	r18, r24
    afee:	f0 01       	movw	r30, r0
    aff0:	29 9f       	mul	r18, r25
    aff2:	f0 0d       	add	r31, r0
    aff4:	38 9f       	mul	r19, r24
    aff6:	f0 0d       	add	r31, r0
    aff8:	11 24       	eor	r1, r1
    affa:	e9 5b       	subi	r30, 0xB9	; 185
    affc:	f0 4f       	sbci	r31, 0xF0	; 240
    affe:	80 81       	ld	r24, Z
    b000:	80 68       	ori	r24, 0x80	; 128
    b002:	80 83       	st	Z, r24
	TriggerCommon(channel,patch,volume,80);
    b004:	84 2f       	mov	r24, r20
    b006:	65 2f       	mov	r22, r21
    b008:	47 2f       	mov	r20, r23
    b00a:	20 e5       	ldi	r18, 0x50	; 80
}
    b00c:	c1 cc       	rjmp	.-1662   	; 0xa990 <TriggerCommon>

0000b00e <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    b00e:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    b010:	64 2f       	mov	r22, r20
}
    b012:	17 c0       	rjmp	.+46     	; 0xb042 <SetMixerWave>

0000b014 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    b014:	99 27       	eor	r25, r25
	clr r23
    b016:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    b018:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    b01a:	09 f4       	brne	.+2      	; 0xb01e <set_note_waves>
		ret
    b01c:	08 95       	ret

0000b01e <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    b01e:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    b020:	f1 eb       	ldi	r31, 0xB1	; 177
	lsl r22
    b022:	66 0f       	add	r22, r22
	rol r23
    b024:	77 1f       	adc	r23, r23
	add ZL,r22
    b026:	e6 0f       	add	r30, r22
	adc ZH,r23	
    b028:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    b02a:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    b02c:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    b02e:	e1 e2       	ldi	r30, 0x21	; 33
	ldi ZH,hi8(mixerStruct)
    b030:	ff e0       	ldi	r31, 0x0F	; 15
	ldi r18,CHANNEL_STRUCT_SIZE
    b032:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    b034:	28 9f       	mul	r18, r24
	add ZL,r0
    b036:	e0 0d       	add	r30, r0
	adc ZH,r1
    b038:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    b03a:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    b03c:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    b03e:	11 24       	eor	r1, r1
	

	ret
    b040:	08 95       	ret

0000b042 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    b042:	99 27       	eor	r25, r25
	clr r23
    b044:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    b046:	e1 e2       	ldi	r30, 0x21	; 33
	ldi ZH,hi8(mixerStruct)
    b048:	ff e0       	ldi	r31, 0x0F	; 15
	ldi r18,CHANNEL_STRUCT_SIZE
    b04a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    b04c:	28 9f       	mul	r18, r24
	add ZL,r0
    b04e:	e0 0d       	add	r30, r0
	adc ZH,r1
    b050:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    b052:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    b054:	31 f4       	brne	.+12     	; 0xb062 <smw1>
	lds r22,tr4_params
    b056:	60 91 34 0f 	lds	r22, 0x0F34
	andi r22,0xfe;
    b05a:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    b05c:	60 93 34 0f 	sts	0x0F34, r22
	rjmp esmw	
    b060:	0b c0       	rjmp	.+22     	; 0xb078 <esmw>

0000b062 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    b062:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    b064:	31 f4       	brne	.+12     	; 0xb072 <smw2>
	lds r22,tr4_params
    b066:	60 91 34 0f 	lds	r22, 0x0F34
	ori r22,0xfe;
    b06a:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    b06c:	60 93 34 0f 	sts	0x0F34, r22
	rjmp esmw
    b070:	03 c0       	rjmp	.+6      	; 0xb078 <esmw>

0000b072 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    b072:	73 eb       	ldi	r23, 0xB3	; 179
	add r23,r22
    b074:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    b076:	75 83       	std	Z+5, r23	; 0x05

0000b078 <esmw>:

esmw:
	clr r1	
    b078:	11 24       	eor	r1, r1
	ret
    b07a:	08 95       	ret
	...

0000b100 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    b100:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    b102:	80 93 20 0f 	sts	0x0F20, r24
	ret
    b106:	08 95       	ret

0000b108 <steptable>:
    b108:	22 00       	.word	0x0022	; ????
    b10a:	24 00       	.word	0x0024	; ????
    b10c:	26 00       	.word	0x0026	; ????
    b10e:	28 00       	.word	0x0028	; ????
    b110:	2b 00       	.word	0x002b	; ????
    b112:	2d 00       	.word	0x002d	; ????
    b114:	30 00       	.word	0x0030	; ????
    b116:	33 00       	.word	0x0033	; ????
    b118:	36 00       	.word	0x0036	; ????
    b11a:	39 00       	.word	0x0039	; ????
    b11c:	3d 00       	.word	0x003d	; ????
    b11e:	40 00       	.word	0x0040	; ????
    b120:	44 00       	.word	0x0044	; ????
    b122:	48 00       	.word	0x0048	; ????
    b124:	4c 00       	.word	0x004c	; ????
    b126:	51 00       	.word	0x0051	; ????
    b128:	56 00       	.word	0x0056	; ????
    b12a:	5b 00       	.word	0x005b	; ????
    b12c:	60 00       	.word	0x0060	; ????
    b12e:	66 00       	.word	0x0066	; ????
    b130:	6c 00       	.word	0x006c	; ????
    b132:	73 00       	.word	0x0073	; ????
    b134:	79 00       	.word	0x0079	; ????
    b136:	81 00       	.word	0x0081	; ????
    b138:	88 00       	.word	0x0088	; ????
    b13a:	90 00       	.word	0x0090	; ????
    b13c:	99 00       	.word	0x0099	; ????
    b13e:	a2 00       	.word	0x00a2	; ????
    b140:	ac 00       	.word	0x00ac	; ????
    b142:	b6 00       	.word	0x00b6	; ????
    b144:	c1 00       	.word	0x00c1	; ????
    b146:	cc 00       	.word	0x00cc	; ????
    b148:	d8 00       	.word	0x00d8	; ????
    b14a:	e5 00       	.word	0x00e5	; ????
    b14c:	f3 00       	.word	0x00f3	; ????
    b14e:	01 01       	movw	r0, r2
    b150:	10 01       	movw	r2, r0
    b152:	21 01       	movw	r4, r2
    b154:	32 01       	movw	r6, r4
    b156:	44 01       	movw	r8, r8
    b158:	57 01       	movw	r10, r14
    b15a:	6c 01       	movw	r12, r24
    b15c:	81 01       	movw	r16, r2
    b15e:	98 01       	movw	r18, r16
    b160:	b0 01       	movw	r22, r0
    b162:	ca 01       	movw	r24, r20
    b164:	e5 01       	movw	r28, r10
    b166:	02 02       	muls	r16, r18
    b168:	21 02       	muls	r18, r17
    b16a:	41 02       	muls	r20, r17
    b16c:	64 02       	muls	r22, r20
    b16e:	88 02       	muls	r24, r24
    b170:	ae 02       	muls	r26, r30
    b172:	d7 02       	muls	r29, r23
    b174:	03 03       	mulsu	r16, r19
    b176:	30 03       	mulsu	r19, r16
    b178:	61 03       	mulsu	r22, r17
    b17a:	94 03       	fmuls	r17, r20
    b17c:	cb 03       	fmulsu	r20, r19
    b17e:	05 04       	cpc	r0, r5
    b180:	42 04       	cpc	r4, r2
    b182:	83 04       	cpc	r8, r3
    b184:	c7 04       	cpc	r12, r7
    b186:	10 05       	cpc	r17, r0
    b188:	5d 05       	cpc	r21, r13
    b18a:	af 05       	cpc	r26, r15
    b18c:	05 06       	cpc	r0, r21
    b18e:	61 06       	cpc	r6, r17
    b190:	c2 06       	cpc	r12, r18
    b192:	29 07       	cpc	r18, r25
    b194:	96 07       	cpc	r25, r22
    b196:	09 08       	sbc	r0, r9
    b198:	83 08       	sbc	r8, r3
    b19a:	05 09       	sbc	r16, r5
    b19c:	8e 09       	sbc	r24, r14
    b19e:	20 0a       	sbc	r2, r16
    b1a0:	ba 0a       	sbc	r11, r26
    b1a2:	5d 0b       	sbc	r21, r29
    b1a4:	0a 0c       	add	r0, r10
    b1a6:	c1 0c       	add	r12, r1
    b1a8:	84 0d       	add	r24, r4
    b1aa:	51 0e       	add	r5, r17
    b1ac:	2b 0f       	add	r18, r27
    b1ae:	12 10       	cpse	r1, r2
    b1b0:	07 11       	cpse	r16, r7
    b1b2:	0a 12       	cpse	r0, r26
    b1b4:	1d 13       	cpse	r17, r29
    b1b6:	40 14       	cp	r4, r0
    b1b8:	74 15       	cp	r23, r4
    b1ba:	ba 16       	cp	r11, r26
    b1bc:	14 18       	sub	r1, r4
    b1be:	83 19       	sub	r24, r3
    b1c0:	07 1b       	sub	r16, r23
    b1c2:	a3 1c       	adc	r10, r3
    b1c4:	57 1e       	adc	r5, r23
    b1c6:	24 20       	and	r2, r4
    b1c8:	0e 22       	and	r0, r30
    b1ca:	14 24       	eor	r1, r4
    b1cc:	39 26       	eor	r3, r25
    b1ce:	7f 28       	or	r7, r15
    b1d0:	e8 2a       	or	r14, r24
    b1d2:	75 2d       	mov	r23, r5
    b1d4:	29 30       	cpi	r18, 0x09	; 9
    b1d6:	06 33       	cpi	r16, 0x36	; 54
    b1d8:	0f 36       	cpi	r16, 0x6F	; 111
    b1da:	45 39       	cpi	r20, 0x95	; 149
    b1dc:	ad 3c       	cpi	r26, 0xCD	; 205
    b1de:	49 40       	sbci	r20, 0x09	; 9
    b1e0:	1b 44       	sbci	r17, 0x4B	; 75
    b1e2:	28 48       	sbci	r18, 0x88	; 136
    b1e4:	73 4c       	sbci	r23, 0xC3	; 195
    b1e6:	fe 50       	subi	r31, 0x0E	; 14
    b1e8:	cf 55       	subi	r28, 0x5F	; 95
    b1ea:	ea 5a       	subi	r30, 0xAA	; 170
    b1ec:	51 60       	ori	r21, 0x01	; 1
    b1ee:	0c 66       	ori	r16, 0x6C	; 108
    b1f0:	1d 6c       	ori	r17, 0xCD	; 205
    b1f2:	8b 72       	andi	r24, 0x2B	; 43
    b1f4:	5a 79       	andi	r21, 0x9A	; 154
    b1f6:	92 80       	ldd	r9, Z+2	; 0x02
    b1f8:	37 88       	ldd	r3, Z+23	; 0x17
    b1fa:	50 90 e5 98 	lds	r5, 0x98E5
    b1fe:	fd a1       	ldd	r31, Y+37	; 0x25
    b200:	9f ab       	std	Y+55, r25	; 0x37
    b202:	d3 b5       	in	r29, 0x23	; 35
    b204:	a3 c0       	rjmp	.+326    	; 0xb34c <waves+0x4c>
	...

0000b300 <waves>:
    b300:	00 03       	mulsu	r16, r16
    b302:	06 09       	sbc	r16, r6
    b304:	0c 10       	cpse	r0, r12
    b306:	13 16       	cp	r1, r19
    b308:	19 1c       	adc	r1, r9
    b30a:	1f 22       	and	r1, r31
    b30c:	25 28       	or	r2, r5
    b30e:	2b 2e       	mov	r2, r27
    b310:	31 33       	cpi	r19, 0x31	; 49
    b312:	36 39       	cpi	r19, 0x96	; 150
    b314:	3c 3f       	cpi	r19, 0xFC	; 252
    b316:	41 44       	sbci	r20, 0x41	; 65
    b318:	47 49       	sbci	r20, 0x97	; 151
    b31a:	4c 4e       	sbci	r20, 0xEC	; 236
    b31c:	51 53       	subi	r21, 0x31	; 49
    b31e:	55 58       	subi	r21, 0x85	; 133
    b320:	5a 5c       	subi	r21, 0xCA	; 202
    b322:	5e 60       	ori	r21, 0x0E	; 14
    b324:	62 64       	ori	r22, 0x42	; 66
    b326:	66 68       	ori	r22, 0x86	; 134
    b328:	6a 6b       	ori	r22, 0xBA	; 186
    b32a:	6d 6f       	ori	r22, 0xFD	; 253
    b32c:	70 71       	andi	r23, 0x10	; 16
    b32e:	73 74       	andi	r23, 0x43	; 67
    b330:	75 76       	andi	r23, 0x65	; 101
    b332:	78 79       	andi	r23, 0x98	; 152
    b334:	7a 7a       	andi	r23, 0xAA	; 170
    b336:	7b 7c       	andi	r23, 0xCB	; 203
    b338:	7d 7d       	andi	r23, 0xDD	; 221
    b33a:	7e 7e       	andi	r23, 0xEE	; 238
    b33c:	7e 7f       	andi	r23, 0xFE	; 254
    b33e:	7f 7f       	andi	r23, 0xFF	; 255
    b340:	7f 7f       	andi	r23, 0xFF	; 255
    b342:	7f 7f       	andi	r23, 0xFF	; 255
    b344:	7e 7e       	andi	r23, 0xEE	; 238
    b346:	7e 7d       	andi	r23, 0xDE	; 222
    b348:	7d 7c       	andi	r23, 0xCD	; 205
    b34a:	7b 7a       	andi	r23, 0xAB	; 171
    b34c:	7a 79       	andi	r23, 0x9A	; 154
    b34e:	78 76       	andi	r23, 0x68	; 104
    b350:	75 74       	andi	r23, 0x45	; 69
    b352:	73 71       	andi	r23, 0x13	; 19
    b354:	70 6f       	ori	r23, 0xF0	; 240
    b356:	6d 6b       	ori	r22, 0xBD	; 189
    b358:	6a 68       	ori	r22, 0x8A	; 138
    b35a:	66 64       	ori	r22, 0x46	; 70
    b35c:	62 60       	ori	r22, 0x02	; 2
    b35e:	5e 5c       	subi	r21, 0xCE	; 206
    b360:	5a 58       	subi	r21, 0x8A	; 138
    b362:	55 53       	subi	r21, 0x35	; 53
    b364:	51 4e       	sbci	r21, 0xE1	; 225
    b366:	4c 49       	sbci	r20, 0x9C	; 156
    b368:	47 44       	sbci	r20, 0x47	; 71
    b36a:	41 3f       	cpi	r20, 0xF1	; 241
    b36c:	3c 39       	cpi	r19, 0x9C	; 156
    b36e:	36 33       	cpi	r19, 0x36	; 54
    b370:	31 2e       	mov	r3, r17
    b372:	2b 28       	or	r2, r11
    b374:	25 22       	and	r2, r21
    b376:	1f 1c       	adc	r1, r15
    b378:	19 16       	cp	r1, r25
    b37a:	13 10       	cpse	r1, r3
    b37c:	0c 09       	sbc	r16, r12
    b37e:	06 03       	mulsu	r16, r22
    b380:	00 fd       	sbrc	r16, 0
    b382:	fa f7       	brpl	.-2      	; 0xb382 <waves+0x82>
    b384:	f4 f0       	brlt	.+60     	; 0xb3c2 <waves+0xc2>
    b386:	ed ea       	ldi	r30, 0xAD	; 173
    b388:	e7 e4       	ldi	r30, 0x47	; 71
    b38a:	e1 de       	rcall	.-574    	; 0xb14e <steptable+0x46>
    b38c:	db d8       	rcall	.-3658   	; 0xa544 <ReadButtons+0x22>
    b38e:	d5 d2       	rcall	.+1450   	; 0xb93a <DrawMap2+0x1e>
    b390:	cf cd       	rjmp	.-1122   	; 0xaf30 <ProcessMusic+0x3fe>
    b392:	ca c7       	rjmp	.+3988   	; 0xc328 <AIJump+0x39c>
    b394:	c4 c1       	rjmp	.+904    	; 0xb71e <waves+0x41e>
    b396:	bf bc       	out	0x2f, r11	; 47
    b398:	b9 b7       	in	r27, 0x39	; 57
    b39a:	b4 b2       	in	r11, 0x14	; 20
    b39c:	af ad       	ldd	r26, Y+63	; 0x3f
    b39e:	ab a8       	ldd	r10, Y+51	; 0x33
    b3a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    b3a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    b3a4:	9e 9c       	mul	r9, r14
    b3a6:	9a 98       	cbi	0x13, 2	; 19
    b3a8:	96 95       	lsr	r25
    b3aa:	93 91       	.word	0x9193	; ????
    b3ac:	90 8f       	std	Z+24, r25	; 0x18
    b3ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    b3b0:	8b 8a       	std	Y+19, r8	; 0x13
    b3b2:	88 87       	std	Y+8, r24	; 0x08
    b3b4:	86 86       	std	Z+14, r8	; 0x0e
    b3b6:	85 84       	ldd	r8, Z+13	; 0x0d
    b3b8:	83 83       	std	Z+3, r24	; 0x03
    b3ba:	82 82       	std	Z+2, r8	; 0x02
    b3bc:	82 81       	ldd	r24, Z+2	; 0x02
    b3be:	81 81       	ldd	r24, Z+1	; 0x01
    b3c0:	81 81       	ldd	r24, Z+1	; 0x01
    b3c2:	81 81       	ldd	r24, Z+1	; 0x01
    b3c4:	82 82       	std	Z+2, r8	; 0x02
    b3c6:	82 83       	std	Z+2, r24	; 0x02
    b3c8:	83 84       	ldd	r8, Z+11	; 0x0b
    b3ca:	85 86       	std	Z+13, r8	; 0x0d
    b3cc:	86 87       	std	Z+14, r24	; 0x0e
    b3ce:	88 8a       	std	Y+16, r8	; 0x10
    b3d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    b3d2:	8d 8f       	std	Y+29, r24	; 0x1d
    b3d4:	90 91 93 95 	lds	r25, 0x9593
    b3d8:	96 98       	cbi	0x12, 6	; 18
    b3da:	9a 9c       	mul	r9, r10
    b3dc:	9e a0       	ldd	r9, Y+38	; 0x26
    b3de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    b3e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    b3e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    b3e4:	af b2       	in	r10, 0x1f	; 31
    b3e6:	b4 b7       	in	r27, 0x34	; 52
    b3e8:	b9 bc       	out	0x29, r11	; 41
    b3ea:	bf c1       	rjmp	.+894    	; 0xb76a <waves+0x46a>
    b3ec:	c4 c7       	rjmp	.+3976   	; 0xc376 <AIJump+0x3ea>
    b3ee:	ca cd       	rjmp	.-1132   	; 0xaf84 <TriggerFx+0x4>
    b3f0:	cf d2       	rcall	.+1438   	; 0xb990 <ProcessSprites+0x12>
    b3f2:	d5 d8       	rcall	.-3670   	; 0xa59e <ReadButtons+0x7c>
    b3f4:	db de       	rcall	.-586    	; 0xb1ac <steptable+0xa4>
    b3f6:	e1 e4       	ldi	r30, 0x41	; 65
    b3f8:	e7 ea       	ldi	r30, 0xA7	; 167
    b3fa:	ed f0       	brhs	.+58     	; 0xb436 <waves+0x136>
    b3fc:	f4 f7       	brge	.-4      	; 0xb3fa <waves+0xfa>
    b3fe:	fa fd       	.word	0xfdfa	; ????
    b400:	7f 7f       	andi	r23, 0xFF	; 255
    b402:	7f 7f       	andi	r23, 0xFF	; 255
    b404:	7f 7f       	andi	r23, 0xFF	; 255
    b406:	7f 7f       	andi	r23, 0xFF	; 255
    b408:	7f 7f       	andi	r23, 0xFF	; 255
    b40a:	7f 7f       	andi	r23, 0xFF	; 255
    b40c:	7f 7f       	andi	r23, 0xFF	; 255
    b40e:	7f 7f       	andi	r23, 0xFF	; 255
    b410:	7f 7f       	andi	r23, 0xFF	; 255
    b412:	7f 7f       	andi	r23, 0xFF	; 255
    b414:	7f 7f       	andi	r23, 0xFF	; 255
    b416:	7f 7f       	andi	r23, 0xFF	; 255
    b418:	7f 7f       	andi	r23, 0xFF	; 255
    b41a:	7f 7f       	andi	r23, 0xFF	; 255
    b41c:	7f 7f       	andi	r23, 0xFF	; 255
    b41e:	7f 7f       	andi	r23, 0xFF	; 255
    b420:	7f 7f       	andi	r23, 0xFF	; 255
    b422:	7f 7f       	andi	r23, 0xFF	; 255
    b424:	7f 7f       	andi	r23, 0xFF	; 255
    b426:	7f 7f       	andi	r23, 0xFF	; 255
    b428:	7f 7f       	andi	r23, 0xFF	; 255
    b42a:	7f 7f       	andi	r23, 0xFF	; 255
    b42c:	7f 7f       	andi	r23, 0xFF	; 255
    b42e:	7f 7f       	andi	r23, 0xFF	; 255
    b430:	7f 7f       	andi	r23, 0xFF	; 255
    b432:	7f 7f       	andi	r23, 0xFF	; 255
    b434:	7f 7f       	andi	r23, 0xFF	; 255
    b436:	7f 7f       	andi	r23, 0xFF	; 255
    b438:	7f 7f       	andi	r23, 0xFF	; 255
    b43a:	7f 7f       	andi	r23, 0xFF	; 255
    b43c:	7f 7f       	andi	r23, 0xFF	; 255
    b43e:	7f 7f       	andi	r23, 0xFF	; 255
    b440:	7f 7f       	andi	r23, 0xFF	; 255
    b442:	7f 7f       	andi	r23, 0xFF	; 255
    b444:	7f 7f       	andi	r23, 0xFF	; 255
    b446:	7f 7f       	andi	r23, 0xFF	; 255
    b448:	7f 7f       	andi	r23, 0xFF	; 255
    b44a:	7f 7f       	andi	r23, 0xFF	; 255
    b44c:	7f 7f       	andi	r23, 0xFF	; 255
    b44e:	7f 7f       	andi	r23, 0xFF	; 255
    b450:	7f 7f       	andi	r23, 0xFF	; 255
    b452:	7f 7f       	andi	r23, 0xFF	; 255
    b454:	7f 7f       	andi	r23, 0xFF	; 255
    b456:	7f 7f       	andi	r23, 0xFF	; 255
    b458:	7f 7f       	andi	r23, 0xFF	; 255
    b45a:	7f 7f       	andi	r23, 0xFF	; 255
    b45c:	7f 7f       	andi	r23, 0xFF	; 255
    b45e:	7f 7f       	andi	r23, 0xFF	; 255
    b460:	7f 7f       	andi	r23, 0xFF	; 255
    b462:	7f 7f       	andi	r23, 0xFF	; 255
    b464:	7f 7f       	andi	r23, 0xFF	; 255
    b466:	7f 7f       	andi	r23, 0xFF	; 255
    b468:	7f 7f       	andi	r23, 0xFF	; 255
    b46a:	7f 7f       	andi	r23, 0xFF	; 255
    b46c:	7f 7f       	andi	r23, 0xFF	; 255
    b46e:	7f 7f       	andi	r23, 0xFF	; 255
    b470:	7f 7f       	andi	r23, 0xFF	; 255
    b472:	7f 7f       	andi	r23, 0xFF	; 255
    b474:	7f 7f       	andi	r23, 0xFF	; 255
    b476:	7f 7f       	andi	r23, 0xFF	; 255
    b478:	7f 7f       	andi	r23, 0xFF	; 255
    b47a:	7f 7f       	andi	r23, 0xFF	; 255
    b47c:	7f 7f       	andi	r23, 0xFF	; 255
    b47e:	7f 7f       	andi	r23, 0xFF	; 255
    b480:	7f 7f       	andi	r23, 0xFF	; 255
    b482:	7f 7f       	andi	r23, 0xFF	; 255
    b484:	7f 7f       	andi	r23, 0xFF	; 255
    b486:	7f 7f       	andi	r23, 0xFF	; 255
    b488:	7f 7f       	andi	r23, 0xFF	; 255
    b48a:	7f 7f       	andi	r23, 0xFF	; 255
    b48c:	7f 7f       	andi	r23, 0xFF	; 255
    b48e:	7f 7f       	andi	r23, 0xFF	; 255
    b490:	7f 7f       	andi	r23, 0xFF	; 255
    b492:	7f 7f       	andi	r23, 0xFF	; 255
    b494:	7f 7f       	andi	r23, 0xFF	; 255
    b496:	7f 7f       	andi	r23, 0xFF	; 255
    b498:	7f 7f       	andi	r23, 0xFF	; 255
    b49a:	7f 7f       	andi	r23, 0xFF	; 255
    b49c:	7f 7f       	andi	r23, 0xFF	; 255
    b49e:	7f 7f       	andi	r23, 0xFF	; 255
    b4a0:	7f 7f       	andi	r23, 0xFF	; 255
    b4a2:	7f 7f       	andi	r23, 0xFF	; 255
    b4a4:	7f 7f       	andi	r23, 0xFF	; 255
    b4a6:	7f 7f       	andi	r23, 0xFF	; 255
    b4a8:	7f 7f       	andi	r23, 0xFF	; 255
    b4aa:	7f 7f       	andi	r23, 0xFF	; 255
    b4ac:	7f 7f       	andi	r23, 0xFF	; 255
    b4ae:	7f 7f       	andi	r23, 0xFF	; 255
    b4b0:	7f 7f       	andi	r23, 0xFF	; 255
    b4b2:	7f 7f       	andi	r23, 0xFF	; 255
    b4b4:	7f 7f       	andi	r23, 0xFF	; 255
    b4b6:	7f 7f       	andi	r23, 0xFF	; 255
    b4b8:	7f 7f       	andi	r23, 0xFF	; 255
    b4ba:	7f 7f       	andi	r23, 0xFF	; 255
    b4bc:	7f 7f       	andi	r23, 0xFF	; 255
    b4be:	7f 7f       	andi	r23, 0xFF	; 255
    b4c0:	80 80       	ld	r8, Z
    b4c2:	80 80       	ld	r8, Z
    b4c4:	80 80       	ld	r8, Z
    b4c6:	80 80       	ld	r8, Z
    b4c8:	80 80       	ld	r8, Z
    b4ca:	80 80       	ld	r8, Z
    b4cc:	80 80       	ld	r8, Z
    b4ce:	80 80       	ld	r8, Z
    b4d0:	80 80       	ld	r8, Z
    b4d2:	80 80       	ld	r8, Z
    b4d4:	80 80       	ld	r8, Z
    b4d6:	80 80       	ld	r8, Z
    b4d8:	80 80       	ld	r8, Z
    b4da:	80 80       	ld	r8, Z
    b4dc:	80 80       	ld	r8, Z
    b4de:	80 80       	ld	r8, Z
    b4e0:	80 80       	ld	r8, Z
    b4e2:	80 80       	ld	r8, Z
    b4e4:	80 80       	ld	r8, Z
    b4e6:	80 80       	ld	r8, Z
    b4e8:	80 80       	ld	r8, Z
    b4ea:	80 80       	ld	r8, Z
    b4ec:	80 80       	ld	r8, Z
    b4ee:	80 80       	ld	r8, Z
    b4f0:	80 80       	ld	r8, Z
    b4f2:	80 80       	ld	r8, Z
    b4f4:	80 80       	ld	r8, Z
    b4f6:	80 80       	ld	r8, Z
    b4f8:	80 80       	ld	r8, Z
    b4fa:	80 80       	ld	r8, Z
    b4fc:	80 80       	ld	r8, Z
    b4fe:	80 80       	ld	r8, Z
    b500:	00 02       	muls	r16, r16
    b502:	04 06       	cpc	r0, r20
    b504:	08 0a       	sbc	r0, r24
    b506:	0c 0e       	add	r0, r28
    b508:	10 12       	cpse	r1, r16
    b50a:	14 16       	cp	r1, r20
    b50c:	18 1a       	sub	r1, r24
    b50e:	1c 1e       	adc	r1, r28
    b510:	20 22       	and	r2, r16
    b512:	24 26       	eor	r2, r20
    b514:	28 2a       	or	r2, r24
    b516:	2c 2e       	mov	r2, r28
    b518:	30 32       	cpi	r19, 0x20	; 32
    b51a:	34 36       	cpi	r19, 0x64	; 100
    b51c:	38 3a       	cpi	r19, 0xA8	; 168
    b51e:	3c 3e       	cpi	r19, 0xEC	; 236
    b520:	40 42       	sbci	r20, 0x20	; 32
    b522:	44 46       	sbci	r20, 0x64	; 100
    b524:	48 4a       	sbci	r20, 0xA8	; 168
    b526:	4c 4e       	sbci	r20, 0xEC	; 236
    b528:	50 52       	subi	r21, 0x20	; 32
    b52a:	54 56       	subi	r21, 0x64	; 100
    b52c:	58 5a       	subi	r21, 0xA8	; 168
    b52e:	5c 5e       	subi	r21, 0xEC	; 236
    b530:	60 62       	ori	r22, 0x20	; 32
    b532:	64 66       	ori	r22, 0x64	; 100
    b534:	68 6a       	ori	r22, 0xA8	; 168
    b536:	6c 6e       	ori	r22, 0xEC	; 236
    b538:	70 72       	andi	r23, 0x20	; 32
    b53a:	74 76       	andi	r23, 0x64	; 100
    b53c:	78 7a       	andi	r23, 0xA8	; 168
    b53e:	7c 7e       	andi	r23, 0xEC	; 236
    b540:	7f 7d       	andi	r23, 0xDF	; 223
    b542:	7b 79       	andi	r23, 0x9B	; 155
    b544:	77 75       	andi	r23, 0x57	; 87
    b546:	73 71       	andi	r23, 0x13	; 19
    b548:	6f 6d       	ori	r22, 0xDF	; 223
    b54a:	6b 69       	ori	r22, 0x9B	; 155
    b54c:	67 65       	ori	r22, 0x57	; 87
    b54e:	63 61       	ori	r22, 0x13	; 19
    b550:	5f 5d       	subi	r21, 0xDF	; 223
    b552:	5b 59       	subi	r21, 0x9B	; 155
    b554:	57 55       	subi	r21, 0x57	; 87
    b556:	53 51       	subi	r21, 0x13	; 19
    b558:	4f 4d       	sbci	r20, 0xDF	; 223
    b55a:	4b 49       	sbci	r20, 0x9B	; 155
    b55c:	47 45       	sbci	r20, 0x57	; 87
    b55e:	43 41       	sbci	r20, 0x13	; 19
    b560:	3f 3d       	cpi	r19, 0xDF	; 223
    b562:	3b 39       	cpi	r19, 0x9B	; 155
    b564:	37 35       	cpi	r19, 0x57	; 87
    b566:	33 31       	cpi	r19, 0x13	; 19
    b568:	2f 2d       	mov	r18, r15
    b56a:	2b 29       	or	r18, r11
    b56c:	27 25       	eor	r18, r7
    b56e:	23 21       	and	r18, r3
    b570:	1f 1d       	adc	r17, r15
    b572:	1b 19       	sub	r17, r11
    b574:	17 15       	cp	r17, r7
    b576:	13 11       	cpse	r17, r3
    b578:	0f 0d       	add	r16, r15
    b57a:	0b 09       	sbc	r16, r11
    b57c:	07 05       	cpc	r16, r7
    b57e:	03 01       	movw	r0, r6
    b580:	ff fd       	.word	0xfdff	; ????
    b582:	fb f9       	.word	0xf9fb	; ????
    b584:	f7 f5       	brid	.+124    	; 0xb602 <waves+0x302>
    b586:	f3 f1       	brvs	.+124    	; 0xb604 <waves+0x304>
    b588:	ef ed       	ldi	r30, 0xDF	; 223
    b58a:	eb e9       	ldi	r30, 0x9B	; 155
    b58c:	e7 e5       	ldi	r30, 0x57	; 87
    b58e:	e3 e1       	ldi	r30, 0x13	; 19
    b590:	df dd       	rcall	.-1090   	; 0xb150 <steptable+0x48>
    b592:	db d9       	rcall	.-3146   	; 0xa94a <ReadVarLen+0x44>
    b594:	d7 d5       	rcall	.+2990   	; 0xc144 <AIJump+0x1b8>
    b596:	d3 d1       	rcall	.+934    	; 0xb93e <DrawMap2+0x22>
    b598:	cf cd       	rjmp	.-1122   	; 0xb138 <steptable+0x30>
    b59a:	cb c9       	rjmp	.-3178   	; 0xa932 <ReadVarLen+0x2c>
    b59c:	c7 c5       	rjmp	.+2958   	; 0xc12c <AIJump+0x1a0>
    b59e:	c3 c1       	rjmp	.+902    	; 0xb926 <DrawMap2+0xa>
    b5a0:	bf bd       	out	0x2f, r27	; 47
    b5a2:	bb b9       	out	0x0b, r27	; 11
    b5a4:	b7 b5       	in	r27, 0x27	; 39
    b5a6:	b3 b1       	in	r27, 0x03	; 3
    b5a8:	af ad       	ldd	r26, Y+63	; 0x3f
    b5aa:	ab a9       	ldd	r26, Y+51	; 0x33
    b5ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    b5ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    b5b0:	9f 9d       	mul	r25, r15
    b5b2:	9b 99       	sbic	0x13, 3	; 19
    b5b4:	97 95       	ror	r25
    b5b6:	93 91       	.word	0x9193	; ????
    b5b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    b5ba:	8b 89       	ldd	r24, Y+19	; 0x13
    b5bc:	87 85       	ldd	r24, Z+15	; 0x0f
    b5be:	83 81       	ldd	r24, Z+3	; 0x03
    b5c0:	80 82       	st	Z, r8
    b5c2:	84 86       	std	Z+12, r8	; 0x0c
    b5c4:	88 8a       	std	Y+16, r8	; 0x10
    b5c6:	8c 8e       	std	Y+28, r8	; 0x1c
    b5c8:	90 92 94 96 	sts	0x9694, r9
    b5cc:	98 9a       	sbi	0x13, 0	; 19
    b5ce:	9c 9e       	mul	r9, r28
    b5d0:	a0 a2       	std	Z+32, r10	; 0x20
    b5d2:	a4 a6       	std	Z+44, r10	; 0x2c
    b5d4:	a8 aa       	std	Y+48, r10	; 0x30
    b5d6:	ac ae       	std	Y+60, r10	; 0x3c
    b5d8:	b0 b2       	in	r11, 0x10	; 16
    b5da:	b4 b6       	in	r11, 0x34	; 52
    b5dc:	b8 ba       	out	0x18, r11	; 24
    b5de:	bc be       	out	0x3c, r11	; 60
    b5e0:	c0 c2       	rjmp	.+1408   	; 0xbb62 <rtl_PrintEx+0x4c>
    b5e2:	c4 c6       	rjmp	.+3464   	; 0xc36c <AIJump+0x3e0>
    b5e4:	c8 ca       	rjmp	.-2672   	; 0xab76 <ProcessMusic+0x44>
    b5e6:	cc ce       	rjmp	.-616    	; 0xb380 <waves+0x80>
    b5e8:	d0 d2       	rcall	.+1440   	; 0xbb8a <rtl_PrintRamEx+0x1e>
    b5ea:	d4 d6       	rcall	.+3496   	; 0xc394 <AISit+0x8>
    b5ec:	d8 da       	rcall	.-2640   	; 0xab9e <ProcessMusic+0x6c>
    b5ee:	dc de       	rcall	.-584    	; 0xb3a8 <waves+0xa8>
    b5f0:	e0 e2       	ldi	r30, 0x20	; 32
    b5f2:	e4 e6       	ldi	r30, 0x64	; 100
    b5f4:	e8 ea       	ldi	r30, 0xA8	; 168
    b5f6:	ec ee       	ldi	r30, 0xEC	; 236
    b5f8:	f0 f2       	brcs	.-68     	; 0xb5b6 <waves+0x2b6>
    b5fa:	f4 f6       	brge	.-68     	; 0xb5b8 <waves+0x2b8>
    b5fc:	f8 fa       	.word	0xfaf8	; ????
    b5fe:	fc fe       	.word	0xfefc	; ????
    b600:	7f 7f       	andi	r23, 0xFF	; 255
    b602:	7f 7f       	andi	r23, 0xFF	; 255
    b604:	7f 7f       	andi	r23, 0xFF	; 255
    b606:	7f 7f       	andi	r23, 0xFF	; 255
    b608:	7f 7f       	andi	r23, 0xFF	; 255
    b60a:	7f 7f       	andi	r23, 0xFF	; 255
    b60c:	7f 7f       	andi	r23, 0xFF	; 255
    b60e:	7f 7f       	andi	r23, 0xFF	; 255
    b610:	7f 7f       	andi	r23, 0xFF	; 255
    b612:	7f 7f       	andi	r23, 0xFF	; 255
    b614:	7f 7f       	andi	r23, 0xFF	; 255
    b616:	7f 7f       	andi	r23, 0xFF	; 255
    b618:	7f 7f       	andi	r23, 0xFF	; 255
    b61a:	7f 7f       	andi	r23, 0xFF	; 255
    b61c:	7f 7f       	andi	r23, 0xFF	; 255
    b61e:	7f 7f       	andi	r23, 0xFF	; 255
    b620:	7f 7f       	andi	r23, 0xFF	; 255
    b622:	7f 7f       	andi	r23, 0xFF	; 255
    b624:	7f 7f       	andi	r23, 0xFF	; 255
    b626:	7f 7f       	andi	r23, 0xFF	; 255
    b628:	7f 7f       	andi	r23, 0xFF	; 255
    b62a:	7f 7f       	andi	r23, 0xFF	; 255
    b62c:	7f 7f       	andi	r23, 0xFF	; 255
    b62e:	7f 7f       	andi	r23, 0xFF	; 255
    b630:	7f 7f       	andi	r23, 0xFF	; 255
    b632:	7f 7f       	andi	r23, 0xFF	; 255
    b634:	7f 7f       	andi	r23, 0xFF	; 255
    b636:	7f 7f       	andi	r23, 0xFF	; 255
    b638:	7f 7f       	andi	r23, 0xFF	; 255
    b63a:	7f 7f       	andi	r23, 0xFF	; 255
    b63c:	7f 7f       	andi	r23, 0xFF	; 255
    b63e:	7f 7f       	andi	r23, 0xFF	; 255
    b640:	80 80       	ld	r8, Z
    b642:	80 80       	ld	r8, Z
    b644:	80 80       	ld	r8, Z
    b646:	80 80       	ld	r8, Z
    b648:	80 80       	ld	r8, Z
    b64a:	80 80       	ld	r8, Z
    b64c:	80 80       	ld	r8, Z
    b64e:	80 80       	ld	r8, Z
    b650:	80 80       	ld	r8, Z
    b652:	80 80       	ld	r8, Z
    b654:	80 80       	ld	r8, Z
    b656:	80 80       	ld	r8, Z
    b658:	80 80       	ld	r8, Z
    b65a:	80 80       	ld	r8, Z
    b65c:	80 80       	ld	r8, Z
    b65e:	80 80       	ld	r8, Z
    b660:	80 80       	ld	r8, Z
    b662:	80 80       	ld	r8, Z
    b664:	80 80       	ld	r8, Z
    b666:	80 80       	ld	r8, Z
    b668:	80 80       	ld	r8, Z
    b66a:	80 80       	ld	r8, Z
    b66c:	80 80       	ld	r8, Z
    b66e:	80 80       	ld	r8, Z
    b670:	80 80       	ld	r8, Z
    b672:	80 80       	ld	r8, Z
    b674:	80 80       	ld	r8, Z
    b676:	80 80       	ld	r8, Z
    b678:	80 80       	ld	r8, Z
    b67a:	80 80       	ld	r8, Z
    b67c:	80 80       	ld	r8, Z
    b67e:	80 80       	ld	r8, Z
    b680:	80 80       	ld	r8, Z
    b682:	80 80       	ld	r8, Z
    b684:	80 80       	ld	r8, Z
    b686:	80 80       	ld	r8, Z
    b688:	80 80       	ld	r8, Z
    b68a:	80 80       	ld	r8, Z
    b68c:	80 80       	ld	r8, Z
    b68e:	80 80       	ld	r8, Z
    b690:	80 80       	ld	r8, Z
    b692:	80 80       	ld	r8, Z
    b694:	80 80       	ld	r8, Z
    b696:	80 80       	ld	r8, Z
    b698:	80 80       	ld	r8, Z
    b69a:	80 80       	ld	r8, Z
    b69c:	80 80       	ld	r8, Z
    b69e:	80 80       	ld	r8, Z
    b6a0:	80 80       	ld	r8, Z
    b6a2:	80 80       	ld	r8, Z
    b6a4:	80 80       	ld	r8, Z
    b6a6:	80 80       	ld	r8, Z
    b6a8:	80 80       	ld	r8, Z
    b6aa:	80 80       	ld	r8, Z
    b6ac:	80 80       	ld	r8, Z
    b6ae:	80 80       	ld	r8, Z
    b6b0:	80 80       	ld	r8, Z
    b6b2:	80 80       	ld	r8, Z
    b6b4:	80 80       	ld	r8, Z
    b6b6:	80 80       	ld	r8, Z
    b6b8:	80 80       	ld	r8, Z
    b6ba:	80 80       	ld	r8, Z
    b6bc:	80 80       	ld	r8, Z
    b6be:	80 80       	ld	r8, Z
    b6c0:	80 80       	ld	r8, Z
    b6c2:	80 80       	ld	r8, Z
    b6c4:	80 80       	ld	r8, Z
    b6c6:	80 80       	ld	r8, Z
    b6c8:	80 80       	ld	r8, Z
    b6ca:	80 80       	ld	r8, Z
    b6cc:	80 80       	ld	r8, Z
    b6ce:	80 80       	ld	r8, Z
    b6d0:	80 80       	ld	r8, Z
    b6d2:	80 80       	ld	r8, Z
    b6d4:	80 80       	ld	r8, Z
    b6d6:	80 80       	ld	r8, Z
    b6d8:	80 80       	ld	r8, Z
    b6da:	80 80       	ld	r8, Z
    b6dc:	80 80       	ld	r8, Z
    b6de:	80 80       	ld	r8, Z
    b6e0:	80 80       	ld	r8, Z
    b6e2:	80 80       	ld	r8, Z
    b6e4:	80 80       	ld	r8, Z
    b6e6:	80 80       	ld	r8, Z
    b6e8:	80 80       	ld	r8, Z
    b6ea:	80 80       	ld	r8, Z
    b6ec:	80 80       	ld	r8, Z
    b6ee:	80 80       	ld	r8, Z
    b6f0:	80 80       	ld	r8, Z
    b6f2:	80 80       	ld	r8, Z
    b6f4:	80 80       	ld	r8, Z
    b6f6:	80 80       	ld	r8, Z
    b6f8:	80 80       	ld	r8, Z
    b6fa:	80 80       	ld	r8, Z
    b6fc:	80 80       	ld	r8, Z
    b6fe:	80 80       	ld	r8, Z
    b700:	7f 7f       	andi	r23, 0xFF	; 255
    b702:	7f 7f       	andi	r23, 0xFF	; 255
    b704:	7f 7f       	andi	r23, 0xFF	; 255
    b706:	7f 7f       	andi	r23, 0xFF	; 255
    b708:	7f 7f       	andi	r23, 0xFF	; 255
    b70a:	7f 7f       	andi	r23, 0xFF	; 255
    b70c:	7f 7f       	andi	r23, 0xFF	; 255
    b70e:	7f 7f       	andi	r23, 0xFF	; 255
    b710:	7f 7f       	andi	r23, 0xFF	; 255
    b712:	7f 7f       	andi	r23, 0xFF	; 255
    b714:	7f 7f       	andi	r23, 0xFF	; 255
    b716:	7f 7f       	andi	r23, 0xFF	; 255
    b718:	7f 7f       	andi	r23, 0xFF	; 255
    b71a:	7f 7f       	andi	r23, 0xFF	; 255
    b71c:	7f 7f       	andi	r23, 0xFF	; 255
    b71e:	7f 7f       	andi	r23, 0xFF	; 255
    b720:	7f 7f       	andi	r23, 0xFF	; 255
    b722:	7f 7f       	andi	r23, 0xFF	; 255
    b724:	7f 7f       	andi	r23, 0xFF	; 255
    b726:	7f 7f       	andi	r23, 0xFF	; 255
    b728:	7f 7f       	andi	r23, 0xFF	; 255
    b72a:	7f 7f       	andi	r23, 0xFF	; 255
    b72c:	7f 7f       	andi	r23, 0xFF	; 255
    b72e:	7f 7f       	andi	r23, 0xFF	; 255
    b730:	7f 7f       	andi	r23, 0xFF	; 255
    b732:	7f 7f       	andi	r23, 0xFF	; 255
    b734:	7f 7f       	andi	r23, 0xFF	; 255
    b736:	7f 7f       	andi	r23, 0xFF	; 255
    b738:	7f 7f       	andi	r23, 0xFF	; 255
    b73a:	7f 7f       	andi	r23, 0xFF	; 255
    b73c:	7f 7f       	andi	r23, 0xFF	; 255
    b73e:	7f 7f       	andi	r23, 0xFF	; 255
    b740:	7f 7f       	andi	r23, 0xFF	; 255
    b742:	7f 7f       	andi	r23, 0xFF	; 255
    b744:	7f 7f       	andi	r23, 0xFF	; 255
    b746:	7f 7f       	andi	r23, 0xFF	; 255
    b748:	7f 7f       	andi	r23, 0xFF	; 255
    b74a:	7f 7f       	andi	r23, 0xFF	; 255
    b74c:	7f 7f       	andi	r23, 0xFF	; 255
    b74e:	7f 7f       	andi	r23, 0xFF	; 255
    b750:	7f 7f       	andi	r23, 0xFF	; 255
    b752:	7f 7f       	andi	r23, 0xFF	; 255
    b754:	7f 7f       	andi	r23, 0xFF	; 255
    b756:	7f 7f       	andi	r23, 0xFF	; 255
    b758:	7f 7f       	andi	r23, 0xFF	; 255
    b75a:	7f 7f       	andi	r23, 0xFF	; 255
    b75c:	7f 7f       	andi	r23, 0xFF	; 255
    b75e:	7f 7f       	andi	r23, 0xFF	; 255
    b760:	7f 7f       	andi	r23, 0xFF	; 255
    b762:	7f 7f       	andi	r23, 0xFF	; 255
    b764:	7f 7f       	andi	r23, 0xFF	; 255
    b766:	7f 7f       	andi	r23, 0xFF	; 255
    b768:	7f 7f       	andi	r23, 0xFF	; 255
    b76a:	7f 7f       	andi	r23, 0xFF	; 255
    b76c:	7f 7f       	andi	r23, 0xFF	; 255
    b76e:	7f 7f       	andi	r23, 0xFF	; 255
    b770:	7f 7f       	andi	r23, 0xFF	; 255
    b772:	7f 7f       	andi	r23, 0xFF	; 255
    b774:	7f 7f       	andi	r23, 0xFF	; 255
    b776:	7f 7f       	andi	r23, 0xFF	; 255
    b778:	7f 7f       	andi	r23, 0xFF	; 255
    b77a:	7f 7f       	andi	r23, 0xFF	; 255
    b77c:	7f 7f       	andi	r23, 0xFF	; 255
    b77e:	7f 7f       	andi	r23, 0xFF	; 255
    b780:	80 80       	ld	r8, Z
    b782:	80 80       	ld	r8, Z
    b784:	80 80       	ld	r8, Z
    b786:	80 80       	ld	r8, Z
    b788:	80 80       	ld	r8, Z
    b78a:	80 80       	ld	r8, Z
    b78c:	80 80       	ld	r8, Z
    b78e:	80 80       	ld	r8, Z
    b790:	80 80       	ld	r8, Z
    b792:	80 80       	ld	r8, Z
    b794:	80 80       	ld	r8, Z
    b796:	80 80       	ld	r8, Z
    b798:	80 80       	ld	r8, Z
    b79a:	80 80       	ld	r8, Z
    b79c:	80 80       	ld	r8, Z
    b79e:	80 80       	ld	r8, Z
    b7a0:	80 80       	ld	r8, Z
    b7a2:	80 80       	ld	r8, Z
    b7a4:	80 80       	ld	r8, Z
    b7a6:	80 80       	ld	r8, Z
    b7a8:	80 80       	ld	r8, Z
    b7aa:	80 80       	ld	r8, Z
    b7ac:	80 80       	ld	r8, Z
    b7ae:	80 80       	ld	r8, Z
    b7b0:	80 80       	ld	r8, Z
    b7b2:	80 80       	ld	r8, Z
    b7b4:	80 80       	ld	r8, Z
    b7b6:	80 80       	ld	r8, Z
    b7b8:	80 80       	ld	r8, Z
    b7ba:	80 80       	ld	r8, Z
    b7bc:	80 80       	ld	r8, Z
    b7be:	80 80       	ld	r8, Z
    b7c0:	80 80       	ld	r8, Z
    b7c2:	80 80       	ld	r8, Z
    b7c4:	80 80       	ld	r8, Z
    b7c6:	80 80       	ld	r8, Z
    b7c8:	80 80       	ld	r8, Z
    b7ca:	80 80       	ld	r8, Z
    b7cc:	80 80       	ld	r8, Z
    b7ce:	80 80       	ld	r8, Z
    b7d0:	80 80       	ld	r8, Z
    b7d2:	80 80       	ld	r8, Z
    b7d4:	80 80       	ld	r8, Z
    b7d6:	80 80       	ld	r8, Z
    b7d8:	80 80       	ld	r8, Z
    b7da:	80 80       	ld	r8, Z
    b7dc:	80 80       	ld	r8, Z
    b7de:	80 80       	ld	r8, Z
    b7e0:	80 80       	ld	r8, Z
    b7e2:	80 80       	ld	r8, Z
    b7e4:	80 80       	ld	r8, Z
    b7e6:	80 80       	ld	r8, Z
    b7e8:	80 80       	ld	r8, Z
    b7ea:	80 80       	ld	r8, Z
    b7ec:	80 80       	ld	r8, Z
    b7ee:	80 80       	ld	r8, Z
    b7f0:	80 80       	ld	r8, Z
    b7f2:	80 80       	ld	r8, Z
    b7f4:	80 80       	ld	r8, Z
    b7f6:	80 80       	ld	r8, Z
    b7f8:	80 80       	ld	r8, Z
    b7fa:	80 80       	ld	r8, Z
    b7fc:	80 80       	ld	r8, Z
    b7fe:	80 80       	ld	r8, Z

0000b800 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    b800:	30 91 c4 0f 	lds	r19, 0x0FC4
    b804:	20 e0       	ldi	r18, 0x00	; 0
    b806:	10 c0       	rjmp	.+32     	; 0xb828 <RestoreBackground+0x28>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    b808:	82 2f       	mov	r24, r18
    b80a:	90 e0       	ldi	r25, 0x00	; 0
    b80c:	fc 01       	movw	r30, r24
    b80e:	ee 0f       	add	r30, r30
    b810:	ff 1f       	adc	r31, r31
    b812:	e8 0f       	add	r30, r24
    b814:	f9 1f       	adc	r31, r25
    b816:	ec 57       	subi	r30, 0x7C	; 124
    b818:	f1 4f       	sbci	r31, 0xF1	; 241
    b81a:	a0 81       	ld	r26, Z
    b81c:	b1 81       	ldd	r27, Z+1	; 0x01
    b81e:	a0 5e       	subi	r26, 0xE0	; 224
    b820:	be 4f       	sbci	r27, 0xFE	; 254
    b822:	82 81       	ldd	r24, Z+2	; 0x02
    b824:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    b826:	2f 5f       	subi	r18, 0xFF	; 255
    b828:	23 17       	cp	r18, r19
    b82a:	70 f3       	brcs	.-36     	; 0xb808 <RestoreBackground+0x8>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    b82c:	08 95       	ret

0000b82e <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    b82e:	08 95       	ret

0000b830 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    b830:	ec e2       	ldi	r30, 0x2C	; 44
    b832:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    b834:	80 ef       	ldi	r24, 0xF0	; 240
    b836:	80 83       	st	Z, r24
    b838:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    b83a:	94 e0       	ldi	r25, 0x04	; 4
    b83c:	e4 38       	cpi	r30, 0x84	; 132
    b83e:	f9 07       	cpc	r31, r25
    b840:	d1 f7       	brne	.-12     	; 0xb836 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    b842:	08 95       	ret

0000b844 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    b844:	98 2f       	mov	r25, r24
	if(speed==0){
    b846:	88 23       	and	r24, r24
    b848:	19 f4       	brne	.+6      	; 0xb850 <FadeIn+0xc>
		DDRC=0xff;
    b84a:	8f ef       	ldi	r24, 0xFF	; 255
    b84c:	87 b9       	out	0x07, r24	; 7
    b84e:	08 95       	ret
		return;
	}
	fadeStep=1;
    b850:	81 e0       	ldi	r24, 0x01	; 1
    b852:	80 93 c7 0f 	sts	0x0FC7, r24
	fadeDir=1;
    b856:	80 93 c3 0f 	sts	0x0FC3, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    b85a:	90 93 c2 0f 	sts	0x0FC2, r25
	currFadeFrame=0;
    b85e:	10 92 c6 0f 	sts	0x0FC6, r1
	fadeActive=true;
    b862:	80 93 c5 0f 	sts	0x0FC5, r24
		
	if(blocking){
    b866:	66 23       	and	r22, r22
    b868:	21 f0       	breq	.+8      	; 0xb872 <FadeIn+0x2e>
		while(fadeActive==true);
    b86a:	80 91 c5 0f 	lds	r24, 0x0FC5
    b86e:	88 23       	and	r24, r24
    b870:	e1 f7       	brne	.-8      	; 0xb86a <FadeIn+0x26>
    b872:	08 95       	ret

0000b874 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    b874:	98 2f       	mov	r25, r24
	if(speed==0){
    b876:	88 23       	and	r24, r24
    b878:	11 f4       	brne	.+4      	; 0xb87e <FadeOut+0xa>
		DDRC=0;
    b87a:	17 b8       	out	0x07, r1	; 7
    b87c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    b87e:	8c e0       	ldi	r24, 0x0C	; 12
    b880:	80 93 c7 0f 	sts	0x0FC7, r24
	fadeDir=-1;
    b884:	8f ef       	ldi	r24, 0xFF	; 255
    b886:	80 93 c3 0f 	sts	0x0FC3, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    b88a:	90 93 c2 0f 	sts	0x0FC2, r25
	currFadeFrame=0;
    b88e:	10 92 c6 0f 	sts	0x0FC6, r1
	fadeActive=true;
    b892:	81 e0       	ldi	r24, 0x01	; 1
    b894:	80 93 c5 0f 	sts	0x0FC5, r24
		
	if(blocking){
    b898:	66 23       	and	r22, r22
    b89a:	21 f0       	breq	.+8      	; 0xb8a4 <FadeOut+0x30>
		while(fadeActive==true);
    b89c:	80 91 c5 0f 	lds	r24, 0x0FC5
    b8a0:	88 23       	and	r24, r24
    b8a2:	e1 f7       	brne	.-8      	; 0xb89c <FadeOut+0x28>
    b8a4:	08 95       	ret

0000b8a6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    b8a6:	80 91 c5 0f 	lds	r24, 0x0FC5
    b8aa:	88 23       	and	r24, r24
    b8ac:	f9 f0       	breq	.+62     	; 0xb8ec <ProcessFading+0x46>
		if(currFadeFrame==0){
    b8ae:	80 91 c6 0f 	lds	r24, 0x0FC6
    b8b2:	88 23       	and	r24, r24
    b8b4:	c1 f4       	brne	.+48     	; 0xb8e6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    b8b6:	80 91 c2 0f 	lds	r24, 0x0FC2
    b8ba:	80 93 c6 0f 	sts	0x0FC6, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    b8be:	80 91 c7 0f 	lds	r24, 0x0FC7
    b8c2:	e8 2f       	mov	r30, r24
    b8c4:	f0 e0       	ldi	r31, 0x00	; 0
    b8c6:	e9 52       	subi	r30, 0x29	; 41
    b8c8:	ff 4f       	sbci	r31, 0xFF	; 255
    b8ca:	e4 91       	lpm	r30, Z+
    b8cc:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    b8ce:	90 91 c3 0f 	lds	r25, 0x0FC3
    b8d2:	98 0f       	add	r25, r24
    b8d4:	90 93 c7 0f 	sts	0x0FC7, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    b8d8:	99 23       	and	r25, r25
    b8da:	11 f0       	breq	.+4      	; 0xb8e0 <ProcessFading+0x3a>
    b8dc:	9d 30       	cpi	r25, 0x0D	; 13
    b8de:	31 f4       	brne	.+12     	; 0xb8ec <ProcessFading+0x46>
				fadeActive=false;
    b8e0:	10 92 c5 0f 	sts	0x0FC5, r1
    b8e4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    b8e6:	81 50       	subi	r24, 0x01	; 1
    b8e8:	80 93 c6 0f 	sts	0x0FC6, r24
    b8ec:	08 95       	ret

0000b8ee <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    b8ee:	0f 93       	push	r16
    b8f0:	1f 93       	push	r17
    b8f2:	cf 93       	push	r28
    b8f4:	df 93       	push	r29
    b8f6:	8c 01       	movw	r16, r24
    b8f8:	c0 e0       	ldi	r28, 0x00	; 0
    b8fa:	d0 e0       	ldi	r29, 0x00	; 0
    b8fc:	07 c0       	rjmp	.+14     	; 0xb90c <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    b8fe:	0e 94 63 52 	call	0xa4c6	; 0xa4c6 <GetVsyncFlag>
    b902:	88 23       	and	r24, r24
    b904:	e1 f3       	breq	.-8      	; 0xb8fe <WaitVsync+0x10>
		ClearVsyncFlag();		
    b906:	0e 94 67 52 	call	0xa4ce	; 0xa4ce <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    b90a:	21 96       	adiw	r28, 0x01	; 1
    b90c:	c0 17       	cp	r28, r16
    b90e:	d1 07       	cpc	r29, r17
    b910:	b4 f3       	brlt	.-20     	; 0xb8fe <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    b912:	df 91       	pop	r29
    b914:	cf 91       	pop	r28
    b916:	1f 91       	pop	r17
    b918:	0f 91       	pop	r16
    b91a:	08 95       	ret

0000b91c <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    b91c:	a1 e0       	ldi	r26, 0x01	; 1
    b91e:	b0 e0       	ldi	r27, 0x00	; 0
    b920:	e4 e9       	ldi	r30, 0x94	; 148
    b922:	fc e5       	ldi	r31, 0x5C	; 92
    b924:	0c 94 f6 76 	jmp	0xedec	; 0xedec <__prologue_saves__+0x8>
    b928:	88 2e       	mov	r8, r24
    b92a:	96 2e       	mov	r9, r22
    b92c:	fa 01       	movw	r30, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    b92e:	b4 90       	lpm	r11, Z+
	u8 mapHeight=pgm_read_byte(&(map[1]));
    b930:	31 96       	adiw	r30, 0x01	; 1
    b932:	a4 90       	lpm	r10, Z+
    b934:	cb 2c       	mov	r12, r11
    b936:	dd 24       	eor	r13, r13
    b938:	8f 01       	movw	r16, r30
    b93a:	0f 5f       	subi	r16, 0xFF	; 255
    b93c:	1f 4f       	sbci	r17, 0xFF	; 255
    b93e:	ff 24       	eor	r15, r15
    b940:	13 c0       	rjmp	.+38     	; 0xb968 <DrawMap2+0x4c>
	for(u8 dy=0;dy<mapHeight;dy++){
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    b942:	f3 01       	movw	r30, r6
    b944:	44 91       	lpm	r20, Z+
    b946:	89 2f       	mov	r24, r25
    b948:	88 0d       	add	r24, r8
    b94a:	6e 2d       	mov	r22, r14
    b94c:	50 e0       	ldi	r21, 0x00	; 0
    b94e:	99 83       	std	Y+1, r25	; 0x01
    b950:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
		for(u8 dx=0;dx<mapWidth;dx++){			
    b954:	99 81       	ldd	r25, Y+1	; 0x01
    b956:	9f 5f       	subi	r25, 0xFF	; 255
    b958:	08 94       	sec
    b95a:	61 1c       	adc	r6, r1
    b95c:	71 1c       	adc	r7, r1
    b95e:	9b 15       	cp	r25, r11
    b960:	80 f3       	brcs	.-32     	; 0xb942 <DrawMap2+0x26>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    b962:	f3 94       	inc	r15
    b964:	0c 0d       	add	r16, r12
    b966:	1d 1d       	adc	r17, r13
    b968:	fa 14       	cp	r15, r10
    b96a:	28 f4       	brcc	.+10     	; 0xb976 <DrawMap2+0x5a>
    b96c:	38 01       	movw	r6, r16
    b96e:	90 e0       	ldi	r25, 0x00	; 0
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    b970:	ef 2c       	mov	r14, r15
    b972:	e9 0c       	add	r14, r9
    b974:	f4 cf       	rjmp	.-24     	; 0xb95e <DrawMap2+0x42>
		}
	}

}
    b976:	21 96       	adiw	r28, 0x01	; 1
    b978:	ee e0       	ldi	r30, 0x0E	; 14
    b97a:	0c 94 12 77 	jmp	0xee24	; 0xee24 <__epilogue_restores__+0x8>

0000b97e <ProcessSprites>:
		}

	}
	

void ProcessSprites(){
    b97e:	a3 e0       	ldi	r26, 0x03	; 3
    b980:	b0 e0       	ldi	r27, 0x00	; 0
    b982:	e5 ec       	ldi	r30, 0xC5	; 197
    b984:	fc e5       	ldi	r31, 0x5C	; 92
    b986:	0c 94 f2 76 	jmp	0xede4	; 0xede4 <__prologue_saves__>
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    b98a:	10 92 c4 0f 	sts	0x0FC4, r1
		if(!spritesOn) return;
    b98e:	80 91 00 01 	lds	r24, 0x0100
    b992:	88 23       	and	r24, r24
    b994:	09 f4       	brne	.+2      	; 0xb998 <ProcessSprites+0x1a>
    b996:	a3 c0       	rjmp	.+326    	; 0xbade <ProcessSprites+0x160>
    b998:	ec e2       	ldi	r30, 0x2C	; 44
    b99a:	8e 2e       	mov	r8, r30
    b99c:	e4 e0       	ldi	r30, 0x04	; 4
    b99e:	9e 2e       	mov	r9, r30
    b9a0:	77 24       	eor	r7, r7
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    b9a2:	f4 01       	movw	r30, r8
    b9a4:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    b9a6:	80 3f       	cpi	r24, 0xF0	; 240
    b9a8:	09 f4       	brne	.+2      	; 0xb9ac <ProcessSprites+0x2e>
    b9aa:	7a c0       	rjmp	.+244    	; 0xbaa0 <ProcessSprites+0x122>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    b9ac:	91 81       	ldd	r25, Z+1	; 0x01

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    b9ae:	f8 2f       	mov	r31, r24
    b9b0:	f6 95       	lsr	r31
    b9b2:	f6 95       	lsr	r31
    b9b4:	f6 95       	lsr	r31
    b9b6:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    b9b8:	28 2f       	mov	r18, r24
    b9ba:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    b9bc:	19 f0       	breq	.+6      	; 0xb9c4 <ProcessSprites+0x46>
    b9be:	72 e0       	ldi	r23, 0x02	; 2
    b9c0:	27 2e       	mov	r2, r23
    b9c2:	02 c0       	rjmp	.+4      	; 0xb9c8 <ProcessSprites+0x4a>
    b9c4:	22 24       	eor	r2, r2
    b9c6:	23 94       	inc	r2

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    b9c8:	39 2f       	mov	r19, r25
    b9ca:	36 95       	lsr	r19
    b9cc:	36 95       	lsr	r19
    b9ce:	36 95       	lsr	r19
				dy=ssy%TILE_HEIGHT;
    b9d0:	89 2f       	mov	r24, r25
    b9d2:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    b9d4:	19 f0       	breq	.+6      	; 0xb9dc <ProcessSprites+0x5e>
    b9d6:	62 e0       	ldi	r22, 0x02	; 2
    b9d8:	66 2e       	mov	r6, r22
    b9da:	02 c0       	rjmp	.+4      	; 0xb9e0 <ProcessSprites+0x62>
    b9dc:	66 24       	eor	r6, r6
    b9de:	63 94       	inc	r6
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    b9e0:	b8 2e       	mov	r11, r24
    b9e2:	aa 24       	eor	r10, r10
    b9e4:	25 01       	movw	r4, r10
    b9e6:	42 0e       	add	r4, r18
    b9e8:	51 1c       	adc	r5, r1
    b9ea:	c3 2e       	mov	r12, r19
    b9ec:	ee 24       	eor	r14, r14
    b9ee:	ff 24       	eor	r15, r15
    b9f0:	4d c0       	rjmp	.+154    	; 0xba8c <ProcessSprites+0x10e>

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    b9f2:	29 e1       	ldi	r18, 0x19	; 25
    b9f4:	2c 15       	cp	r18, r12
    b9f6:	10 f0       	brcs	.+4      	; 0xb9fc <ProcessSprites+0x7e>
    b9f8:	9c 2d       	mov	r25, r12
    b9fa:	01 c0       	rjmp	.+2      	; 0xb9fe <ProcessSprites+0x80>
    b9fc:	93 2d       	mov	r25, r3
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    b9fe:	4d e1       	ldi	r20, 0x1D	; 29
    ba00:	4d 15       	cp	r20, r13
    ba02:	10 f0       	brcs	.+4      	; 0xba08 <ProcessSprites+0x8a>
    ba04:	8d 2d       	mov	r24, r13
    ba06:	02 c0       	rjmp	.+4      	; 0xba0c <ProcessSprites+0x8e>
    ba08:	8d 2d       	mov	r24, r13
    ba0a:	8e 51       	subi	r24, 0x1E	; 30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    ba0c:	ee e1       	ldi	r30, 0x1E	; 30
    ba0e:	9e 9f       	mul	r25, r30
    ba10:	90 01       	movw	r18, r0
    ba12:	11 24       	eor	r1, r1
    ba14:	28 0f       	add	r18, r24
    ba16:	31 1d       	adc	r19, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    ba18:	89 01       	movw	r16, r18
    ba1a:	00 5e       	subi	r16, 0xE0	; 224
    ba1c:	1e 4f       	sbci	r17, 0xFE	; 254
    ba1e:	f8 01       	movw	r30, r16
    ba20:	60 81       	ld	r22, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    ba22:	68 32       	cpi	r22, 0x28	; 40
    ba24:	f0 f0       	brcs	.+60     	; 0xba62 <ProcessSprites+0xe4>
    ba26:	40 91 c4 0f 	lds	r20, 0x0FC4
    ba2a:	48 32       	cpi	r20, 0x28	; 40
    ba2c:	00 f5       	brcc	.+64     	; 0xba6e <ProcessSprites+0xf0>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    ba2e:	84 2f       	mov	r24, r20
    ba30:	90 e0       	ldi	r25, 0x00	; 0
    ba32:	fc 01       	movw	r30, r24
    ba34:	ee 0f       	add	r30, r30
    ba36:	ff 1f       	adc	r31, r31
    ba38:	e8 0f       	add	r30, r24
    ba3a:	f9 1f       	adc	r31, r25
    ba3c:	ec 57       	subi	r30, 0x7C	; 124
    ba3e:	f1 4f       	sbci	r31, 0xF1	; 241
    ba40:	31 83       	std	Z+1, r19	; 0x01
    ba42:	20 83       	st	Z, r18
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    ba44:	62 83       	std	Z+2, r22	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    ba46:	86 2f       	mov	r24, r22
    ba48:	64 2f       	mov	r22, r20
    ba4a:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    ba4e:	60 91 c4 0f 	lds	r22, 0x0FC4
    ba52:	f8 01       	movw	r30, r16
    ba54:	60 83       	st	Z, r22
								bt=free_tile_index;
								free_tile_index++;										
    ba56:	6f 5f       	subi	r22, 0xFF	; 255
    ba58:	60 93 c4 0f 	sts	0x0FC4, r22
    ba5c:	61 50       	subi	r22, 0x01	; 1
							}
				
							if(bt<RAM_TILES_COUNT){				
    ba5e:	68 32       	cpi	r22, 0x28	; 40
    ba60:	30 f4       	brcc	.+12     	; 0xba6e <ProcessSprites+0xf0>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    ba62:	87 2d       	mov	r24, r7
    ba64:	4a 81       	ldd	r20, Y+2	; 0x02
    ba66:	5b 81       	ldd	r21, Y+3	; 0x03
    ba68:	92 01       	movw	r18, r4
    ba6a:	0e 94 34 50 	call	0xa068	; 0xa068 <BlitSprite>
    ba6e:	8a 81       	ldd	r24, Y+2	; 0x02
    ba70:	9b 81       	ldd	r25, Y+3	; 0x03
    ba72:	01 96       	adiw	r24, 0x01	; 1
    ba74:	9b 83       	std	Y+3, r25	; 0x03
    ba76:	8a 83       	std	Y+2, r24	; 0x02
    ba78:	d3 94       	inc	r13
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    ba7a:	82 15       	cp	r24, r2
    ba7c:	08 f4       	brcc	.+2      	; 0xba80 <ProcessSprites+0x102>
    ba7e:	b9 cf       	rjmp	.-142    	; 0xb9f2 <ProcessSprites+0x74>
    ba80:	08 94       	sec
    ba82:	e1 1c       	adc	r14, r1
    ba84:	f1 1c       	adc	r15, r1
    ba86:	c3 94       	inc	r12
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    ba88:	e6 14       	cp	r14, r6
    ba8a:	50 f4       	brcc	.+20     	; 0xbaa0 <ProcessSprites+0x122>
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    ba8c:	80 e0       	ldi	r24, 0x00	; 0
    ba8e:	9e 2d       	mov	r25, r14
    ba90:	9c 01       	movw	r18, r24
    ba92:	3b 83       	std	Y+3, r19	; 0x03
    ba94:	2a 83       	std	Y+2, r18	; 0x02
    ba96:	d9 80       	ldd	r13, Y+1	; 0x01

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    ba98:	16 ee       	ldi	r17, 0xE6	; 230
    ba9a:	31 2e       	mov	r3, r17
    ba9c:	3c 0c       	add	r3, r12
    ba9e:	a9 cf       	rjmp	.-174    	; 0xb9f2 <ProcessSprites+0x74>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    baa0:	73 94       	inc	r7
    baa2:	e4 e0       	ldi	r30, 0x04	; 4
    baa4:	f0 e0       	ldi	r31, 0x00	; 0
    baa6:	8e 0e       	add	r8, r30
    baa8:	9f 1e       	adc	r9, r31
    baaa:	f6 e1       	ldi	r31, 0x16	; 22
    baac:	7f 16       	cp	r7, r31
    baae:	09 f0       	breq	.+2      	; 0xbab2 <ProcessSprites+0x134>
    bab0:	78 cf       	rjmp	.-272    	; 0xb9a2 <ProcessSprites+0x24>
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    bab2:	30 91 c4 0f 	lds	r19, 0x0FC4
    bab6:	20 e0       	ldi	r18, 0x00	; 0
    bab8:	10 c0       	rjmp	.+32     	; 0xbada <ProcessSprites+0x15c>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    baba:	82 2f       	mov	r24, r18
    babc:	90 e0       	ldi	r25, 0x00	; 0
    babe:	fc 01       	movw	r30, r24
    bac0:	ee 0f       	add	r30, r30
    bac2:	ff 1f       	adc	r31, r31
    bac4:	e8 0f       	add	r30, r24
    bac6:	f9 1f       	adc	r31, r25
    bac8:	ec 57       	subi	r30, 0x7C	; 124
    baca:	f1 4f       	sbci	r31, 0xF1	; 241
    bacc:	a0 81       	ld	r26, Z
    bace:	b1 81       	ldd	r27, Z+1	; 0x01
    bad0:	a0 5e       	subi	r26, 0xE0	; 224
    bad2:	be 4f       	sbci	r27, 0xFE	; 254
    bad4:	82 81       	ldd	r24, Z+2	; 0x02
    bad6:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    bad8:	2f 5f       	subi	r18, 0xFF	; 255
    bada:	23 17       	cp	r18, r19
    badc:	70 f3       	brcs	.-36     	; 0xbaba <ProcessSprites+0x13c>


		//restore BG tiles
		RestoreBackground();

	}
    bade:	23 96       	adiw	r28, 0x03	; 3
    bae0:	e2 e1       	ldi	r30, 0x12	; 18
    bae2:	0c 94 0e 77 	jmp	0xee1c	; 0xee1c <__epilogue_restores__>

0000bae6 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    bae6:	df de       	rcall	.-578    	; 0xb8a6 <ProcessFading>
		ProcessSprites();

	}
    bae8:	4a cf       	rjmp	.-364    	; 0xb97e <ProcessSprites>

0000baea <rtl_FindChar>:

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
}

uint8_t rtl_FindChar(int8_t ch, const int8_t *fmap){
    baea:	20 e0       	ldi	r18, 0x00	; 0
    baec:	30 e0       	ldi	r19, 0x00	; 0
    baee:	42 2f       	mov	r20, r18
	uint8_t pos = 0;

	int8_t t;
	while(true){
		t = pgm_read_byte(&fmap[pos]);
    baf0:	fb 01       	movw	r30, r22
    baf2:	e2 0f       	add	r30, r18
    baf4:	f1 1d       	adc	r31, r1
    baf6:	94 91       	lpm	r25, Z+

		if(t == 0 || pos == 255)
    baf8:	99 23       	and	r25, r25
    bafa:	59 f0       	breq	.+22     	; 0xbb12 <rtl_FindChar+0x28>
    bafc:	2f 3f       	cpi	r18, 0xFF	; 255
    bafe:	31 05       	cpc	r19, r1
    bb00:	41 f0       	breq	.+16     	; 0xbb12 <rtl_FindChar+0x28>
    bb02:	2f 5f       	subi	r18, 0xFF	; 255
    bb04:	3f 4f       	sbci	r19, 0xFF	; 255
			return 255;

		if(t != ch){
    bb06:	98 17       	cp	r25, r24
    bb08:	91 f7       	brne	.-28     	; 0xbaee <rtl_FindChar+0x4>
			pos++;
			continue;
		}
		return pos+rtl_FontStartOffset;
    bb0a:	80 91 cd 0f 	lds	r24, 0x0FCD
    bb0e:	84 0f       	add	r24, r20
    bb10:	08 95       	ret
    bb12:	8f ef       	ldi	r24, 0xFF	; 255
	}
}
    bb14:	08 95       	ret

0000bb16 <rtl_PrintEx>:
		WaitVsync(1);	
	}
}


void rtl_PrintEx(uint8_t x, uint8_t y, const char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
    bb16:	a0 e0       	ldi	r26, 0x00	; 0
    bb18:	b0 e0       	ldi	r27, 0x00	; 0
    bb1a:	e1 e9       	ldi	r30, 0x91	; 145
    bb1c:	fd e5       	ldi	r31, 0x5D	; 93
    bb1e:	0c 94 fc 76 	jmp	0xedf8	; 0xedf8 <__prologue_saves__+0x14>
    bb22:	08 2f       	mov	r16, r24
    bb24:	6a 01       	movw	r12, r20
    bb26:	79 01       	movw	r14, r18

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    bb28:	8e e1       	ldi	r24, 0x1E	; 30
    bb2a:	68 9f       	mul	r22, r24
    bb2c:	e0 01       	movw	r28, r0
    bb2e:	11 24       	eor	r1, r1
    bb30:	10 e0       	ldi	r17, 0x00	; 0
    bb32:	c0 5e       	subi	r28, 0xE0	; 224
    bb34:	de 4f       	sbci	r29, 0xFE	; 254
    bb36:	01 c0       	rjmp	.+2      	; 0xbb3a <rtl_PrintEx+0x24>
    bb38:	0f 5f       	subi	r16, 0xFF	; 255
void rtl_PrintEx(uint8_t x, uint8_t y, const char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
	uint8_t t,i=0;
	int8_t c;

	while(true){
		c = pgm_read_byte(&string[i++]);
    bb3a:	f6 01       	movw	r30, r12
    bb3c:	e1 0f       	add	r30, r17
    bb3e:	f1 1d       	adc	r31, r1
    bb40:	1f 5f       	subi	r17, 0xFF	; 255
    bb42:	84 91       	lpm	r24, Z+
		
		if(c == 0)
    bb44:	88 23       	and	r24, r24
    bb46:	69 f0       	breq	.+26     	; 0xbb62 <rtl_PrintEx+0x4c>
			return;

		if(x > VRAM_TILES_H-1){
    bb48:	0e 31       	cpi	r16, 0x1E	; 30
    bb4a:	b0 f7       	brcc	.-20     	; 0xbb38 <rtl_PrintEx+0x22>
			x++;
			continue;
		}		
		else if(c == ' '){
    bb4c:	80 32       	cpi	r24, 0x20	; 32
    bb4e:	a1 f3       	breq	.-24     	; 0xbb38 <rtl_PrintEx+0x22>
		//	rtl_SetVram(x,y,blank);
			x++;
			continue;
		}

		t = rtl_FindChar(c,cmap);
    bb50:	b7 01       	movw	r22, r14
    bb52:	cb df       	rcall	.-106    	; 0xbaea <rtl_FindChar>

		if(t > RAM_TILES_COUNT){
    bb54:	89 32       	cpi	r24, 0x29	; 41
    bb56:	80 f7       	brcc	.-32     	; 0xbb38 <rtl_PrintEx+0x22>

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    bb58:	fe 01       	movw	r30, r28
    bb5a:	e0 0f       	add	r30, r16
    bb5c:	f1 1d       	adc	r31, r1
    bb5e:	80 83       	st	Z, r24
    bb60:	eb cf       	rjmp	.-42     	; 0xbb38 <rtl_PrintEx+0x22>
			continue;
		}

		rtl_SetVram(x++,y,t);
	}
}
    bb62:	cd b7       	in	r28, 0x3d	; 61
    bb64:	de b7       	in	r29, 0x3e	; 62
    bb66:	e8 e0       	ldi	r30, 0x08	; 8
    bb68:	0c 94 18 77 	jmp	0xee30	; 0xee30 <__epilogue_restores__+0x14>

0000bb6c <rtl_PrintRamEx>:



void rtl_PrintRamEx(uint8_t x, uint8_t y,char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
    bb6c:	a0 e0       	ldi	r26, 0x00	; 0
    bb6e:	b0 e0       	ldi	r27, 0x00	; 0
    bb70:	ec eb       	ldi	r30, 0xBC	; 188
    bb72:	fd e5       	ldi	r31, 0x5D	; 93
    bb74:	0c 94 fc 76 	jmp	0xedf8	; 0xedf8 <__prologue_saves__+0x14>
    bb78:	08 2f       	mov	r16, r24
    bb7a:	6a 01       	movw	r12, r20
    bb7c:	79 01       	movw	r14, r18

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    bb7e:	8e e1       	ldi	r24, 0x1E	; 30
    bb80:	68 9f       	mul	r22, r24
    bb82:	e0 01       	movw	r28, r0
    bb84:	11 24       	eor	r1, r1
    bb86:	10 e0       	ldi	r17, 0x00	; 0
    bb88:	c0 5e       	subi	r28, 0xE0	; 224
    bb8a:	de 4f       	sbci	r29, 0xFE	; 254
    bb8c:	01 c0       	rjmp	.+2      	; 0xbb90 <rtl_PrintRamEx+0x24>
    bb8e:	0f 5f       	subi	r16, 0xFF	; 255
void rtl_PrintRamEx(uint8_t x, uint8_t y,char *string, const int8_t *cmap, uint8_t offset, uint8_t flags){
	uint8_t t,i=0;
	int8_t c;

	while(true){
		c = string[i++];
    bb90:	f6 01       	movw	r30, r12
    bb92:	e1 0f       	add	r30, r17
    bb94:	f1 1d       	adc	r31, r1
    bb96:	80 81       	ld	r24, Z
    bb98:	1f 5f       	subi	r17, 0xFF	; 255
		
		if(c == 0)
    bb9a:	88 23       	and	r24, r24
    bb9c:	69 f0       	breq	.+26     	; 0xbbb8 <rtl_PrintRamEx+0x4c>
			return;

		if(x > VRAM_TILES_H-1){
    bb9e:	0e 31       	cpi	r16, 0x1E	; 30
    bba0:	b0 f7       	brcc	.-20     	; 0xbb8e <rtl_PrintRamEx+0x22>
			x++;
			continue;
		}		
		else if(c == ' '){
    bba2:	80 32       	cpi	r24, 0x20	; 32
    bba4:	a1 f3       	breq	.-24     	; 0xbb8e <rtl_PrintRamEx+0x22>
		//	rtl_SetVram(x,y,blank);
			x++;
			continue;
		}

		t = rtl_FindChar(c,cmap);
    bba6:	b7 01       	movw	r22, r14
    bba8:	a0 df       	rcall	.-192    	; 0xbaea <rtl_FindChar>

		if(t > RAM_TILES_COUNT){
    bbaa:	89 32       	cpi	r24, 0x29	; 41
    bbac:	80 f7       	brcc	.-32     	; 0xbb8e <rtl_PrintRamEx+0x22>

uint8_t rtl_FontStartOffset;
int8_t *rtl_CharMap;

inline void rtl_SetVram(uint8_t x, uint8_t y, uint8_t t){
	vram[(y*VRAM_TILES_H)+x] = t;
    bbae:	fe 01       	movw	r30, r28
    bbb0:	e0 0f       	add	r30, r16
    bbb2:	f1 1d       	adc	r31, r1
    bbb4:	80 83       	st	Z, r24
    bbb6:	eb cf       	rjmp	.-42     	; 0xbb8e <rtl_PrintRamEx+0x22>
			continue;
		}

		rtl_SetVram(x++,y,t);
	}
}
    bbb8:	cd b7       	in	r28, 0x3d	; 61
    bbba:	de b7       	in	r29, 0x3e	; 62
    bbbc:	e8 e0       	ldi	r30, 0x08	; 8
    bbbe:	0c 94 18 77 	jmp	0xee30	; 0xee30 <__epilogue_restores__+0x14>

0000bbc2 <rtl_Print>:


void rtl_Print(uint8_t x, uint8_t y, const char *string){
    bbc2:	ef 92       	push	r14
    bbc4:	0f 93       	push	r16
	rtl_PrintEx(x,y,string,rtl_CharMap,rtl_FontStartOffset,0);
    bbc6:	20 91 22 10 	lds	r18, 0x1022
    bbca:	30 91 23 10 	lds	r19, 0x1023
    bbce:	00 91 cd 0f 	lds	r16, 0x0FCD
    bbd2:	ee 24       	eor	r14, r14
    bbd4:	a0 df       	rcall	.-192    	; 0xbb16 <rtl_PrintEx>
}
    bbd6:	0f 91       	pop	r16
    bbd8:	ef 90       	pop	r14
    bbda:	08 95       	ret

0000bbdc <rtl_PrintRam>:

void rtl_PrintRam(uint8_t x, uint8_t y,char *string){
    bbdc:	ef 92       	push	r14
    bbde:	0f 93       	push	r16
	rtl_PrintRamEx(x,y,string,rtl_CharMap,rtl_FontStartOffset,0);
    bbe0:	20 91 22 10 	lds	r18, 0x1022
    bbe4:	30 91 23 10 	lds	r19, 0x1023
    bbe8:	00 91 cd 0f 	lds	r16, 0x0FCD
    bbec:	ee 24       	eor	r14, r14
    bbee:	be df       	rcall	.-132    	; 0xbb6c <rtl_PrintRamEx>
}
    bbf0:	0f 91       	pop	r16
    bbf2:	ef 90       	pop	r14
    bbf4:	08 95       	ret

0000bbf6 <prng>:
inline void seedprng(uint16_t seed){
	prng_state = seed;
}

uint16_t prng(){
	uint16_t bit  = (uint16_t)(((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1);
    bbf6:	80 91 cf 0f 	lds	r24, 0x0FCF
    bbfa:	90 91 d0 0f 	lds	r25, 0x0FD0
	prng_state =  (uint16_t)((prng_state >> 1) | (bit << 15));
    bbfe:	9c 01       	movw	r18, r24
    bc00:	36 95       	lsr	r19
    bc02:	27 95       	ror	r18
    bc04:	36 95       	lsr	r19
    bc06:	27 95       	ror	r18
    bc08:	ac 01       	movw	r20, r24
    bc0a:	73 e0       	ldi	r23, 0x03	; 3
    bc0c:	56 95       	lsr	r21
    bc0e:	47 95       	ror	r20
    bc10:	7a 95       	dec	r23
    bc12:	e1 f7       	brne	.-8      	; 0xbc0c <prng+0x16>
    bc14:	24 27       	eor	r18, r20
    bc16:	35 27       	eor	r19, r21
    bc18:	28 27       	eor	r18, r24
    bc1a:	39 27       	eor	r19, r25
    bc1c:	ac 01       	movw	r20, r24
    bc1e:	65 e0       	ldi	r22, 0x05	; 5
    bc20:	56 95       	lsr	r21
    bc22:	47 95       	ror	r20
    bc24:	6a 95       	dec	r22
    bc26:	e1 f7       	brne	.-8      	; 0xbc20 <prng+0x2a>
    bc28:	24 27       	eor	r18, r20
    bc2a:	35 27       	eor	r19, r21
    bc2c:	33 27       	eor	r19, r19
    bc2e:	26 95       	lsr	r18
    bc30:	37 95       	ror	r19
    bc32:	22 27       	eor	r18, r18
    bc34:	96 95       	lsr	r25
    bc36:	87 95       	ror	r24
    bc38:	28 2b       	or	r18, r24
    bc3a:	39 2b       	or	r19, r25
    bc3c:	30 93 d0 0f 	sts	0x0FD0, r19
    bc40:	20 93 cf 0f 	sts	0x0FCF, r18
	return prng_state;
}
    bc44:	c9 01       	movw	r24, r18
    bc46:	08 95       	ret

0000bc48 <DrawSpriteFrame>:
	sprites[spritecount].y = y;
	sprites[spritecount].tileIndex = frame;
	sprites[spritecount++].flags = flags;
}

void DrawSpriteFrame(uint8_t x, uint8_t y, uint8_t frame){
    bc48:	0f 93       	push	r16
    bc4a:	1f 93       	push	r17
    bc4c:	58 2f       	mov	r21, r24
    bc4e:	16 2f       	mov	r17, r22
	uint16_t foff = frame*5;
    bc50:	85 e0       	ldi	r24, 0x05	; 5
    bc52:	48 9f       	mul	r20, r24
    bc54:	f0 01       	movw	r30, r0
    bc56:	11 24       	eor	r1, r1
	uint8_t flags = pgm_read_byte(&FrameTable[foff++]);
    bc58:	cf 01       	movw	r24, r30
    bc5a:	01 96       	adiw	r24, 0x01	; 1
    bc5c:	e7 53       	subi	r30, 0x37	; 55
    bc5e:	fb 47       	sbci	r31, 0x7B	; 123
    bc60:	04 91       	lpm	r16, Z+
	sprites[spritecount].tileIndex = pgm_read_byte(&FrameTable[foff++]);
    bc62:	40 91 cb 0f 	lds	r20, 0x0FCB
    bc66:	a4 2f       	mov	r26, r20
    bc68:	b0 e0       	ldi	r27, 0x00	; 0
    bc6a:	9c 01       	movw	r18, r24
    bc6c:	2f 5f       	subi	r18, 0xFF	; 255
    bc6e:	3f 4f       	sbci	r19, 0xFF	; 255
    bc70:	87 53       	subi	r24, 0x37	; 55
    bc72:	9b 47       	sbci	r25, 0x7B	; 123
    bc74:	fc 01       	movw	r30, r24
    bc76:	84 91       	lpm	r24, Z+
    bc78:	fd 01       	movw	r30, r26
    bc7a:	ee 0f       	add	r30, r30
    bc7c:	ff 1f       	adc	r31, r31
    bc7e:	ee 0f       	add	r30, r30
    bc80:	ff 1f       	adc	r31, r31
    bc82:	e2 5d       	subi	r30, 0xD2	; 210
    bc84:	fb 4f       	sbci	r31, 0xFB	; 251
    bc86:	80 83       	st	Z, r24
	if(sprites[spritecount].tileIndex != 255 && x < 232){
    bc88:	8f 3f       	cpi	r24, 0xFF	; 255
    bc8a:	79 f0       	breq	.+30     	; 0xbcaa <DrawSpriteFrame+0x62>
    bc8c:	58 3e       	cpi	r21, 0xE8	; 232
    bc8e:	68 f4       	brcc	.+26     	; 0xbcaa <DrawSpriteFrame+0x62>
		sprites[spritecount].x = x+0;
    bc90:	fd 01       	movw	r30, r26
    bc92:	ee 0f       	add	r30, r30
    bc94:	ff 1f       	adc	r31, r31
    bc96:	ee 0f       	add	r30, r30
    bc98:	ff 1f       	adc	r31, r31
    bc9a:	e4 5d       	subi	r30, 0xD4	; 212
    bc9c:	fb 4f       	sbci	r31, 0xFB	; 251
    bc9e:	50 83       	st	Z, r21
		sprites[spritecount].y = y+0;
    bca0:	11 83       	std	Z+1, r17	; 0x01
		sprites[spritecount++].flags = flags;
    bca2:	03 83       	std	Z+3, r16	; 0x03
    bca4:	4f 5f       	subi	r20, 0xFF	; 255
    bca6:	40 93 cb 0f 	sts	0x0FCB, r20
	}
	sprites[spritecount].tileIndex = pgm_read_byte(&FrameTable[foff++]);
    bcaa:	90 91 cb 0f 	lds	r25, 0x0FCB
    bcae:	a9 2f       	mov	r26, r25
    bcb0:	b0 e0       	ldi	r27, 0x00	; 0
    bcb2:	b9 01       	movw	r22, r18
    bcb4:	6f 5f       	subi	r22, 0xFF	; 255
    bcb6:	7f 4f       	sbci	r23, 0xFF	; 255
    bcb8:	27 53       	subi	r18, 0x37	; 55
    bcba:	3b 47       	sbci	r19, 0x7B	; 123
    bcbc:	f9 01       	movw	r30, r18
    bcbe:	84 91       	lpm	r24, Z+
    bcc0:	fd 01       	movw	r30, r26
    bcc2:	ee 0f       	add	r30, r30
    bcc4:	ff 1f       	adc	r31, r31
    bcc6:	ee 0f       	add	r30, r30
    bcc8:	ff 1f       	adc	r31, r31
    bcca:	e2 5d       	subi	r30, 0xD2	; 210
    bccc:	fb 4f       	sbci	r31, 0xFB	; 251
    bcce:	80 83       	st	Z, r24
	if(sprites[spritecount].tileIndex != 255 && x < 232){
    bcd0:	8f 3f       	cpi	r24, 0xFF	; 255
    bcd2:	89 f0       	breq	.+34     	; 0xbcf6 <DrawSpriteFrame+0xae>
    bcd4:	58 3e       	cpi	r21, 0xE8	; 232
    bcd6:	78 f4       	brcc	.+30     	; 0xbcf6 <DrawSpriteFrame+0xae>
		sprites[spritecount].x = x+8;
    bcd8:	fd 01       	movw	r30, r26
    bcda:	ee 0f       	add	r30, r30
    bcdc:	ff 1f       	adc	r31, r31
    bcde:	ee 0f       	add	r30, r30
    bce0:	ff 1f       	adc	r31, r31
    bce2:	e4 5d       	subi	r30, 0xD4	; 212
    bce4:	fb 4f       	sbci	r31, 0xFB	; 251
    bce6:	58 5f       	subi	r21, 0xF8	; 248
    bce8:	50 83       	st	Z, r21
    bcea:	58 50       	subi	r21, 0x08	; 8
		sprites[spritecount].y = y+0;
    bcec:	11 83       	std	Z+1, r17	; 0x01
		sprites[spritecount++].flags = flags;
    bcee:	03 83       	std	Z+3, r16	; 0x03
    bcf0:	9f 5f       	subi	r25, 0xFF	; 255
    bcf2:	90 93 cb 0f 	sts	0x0FCB, r25
	}
	sprites[spritecount].tileIndex = pgm_read_byte(&FrameTable[foff++]);
    bcf6:	40 91 cb 0f 	lds	r20, 0x0FCB
    bcfa:	24 2f       	mov	r18, r20
    bcfc:	30 e0       	ldi	r19, 0x00	; 0
    bcfe:	cb 01       	movw	r24, r22
    bd00:	87 53       	subi	r24, 0x37	; 55
    bd02:	9b 47       	sbci	r25, 0x7B	; 123
    bd04:	fc 01       	movw	r30, r24
    bd06:	84 91       	lpm	r24, Z+
    bd08:	f9 01       	movw	r30, r18
    bd0a:	ee 0f       	add	r30, r30
    bd0c:	ff 1f       	adc	r31, r31
    bd0e:	ee 0f       	add	r30, r30
    bd10:	ff 1f       	adc	r31, r31
    bd12:	e2 5d       	subi	r30, 0xD2	; 210
    bd14:	fb 4f       	sbci	r31, 0xFB	; 251
    bd16:	80 83       	st	Z, r24
	if(sprites[spritecount].tileIndex != 255 && x < 232){
    bd18:	8f 3f       	cpi	r24, 0xFF	; 255
    bd1a:	89 f0       	breq	.+34     	; 0xbd3e <DrawSpriteFrame+0xf6>
    bd1c:	58 3e       	cpi	r21, 0xE8	; 232
    bd1e:	78 f4       	brcc	.+30     	; 0xbd3e <DrawSpriteFrame+0xf6>
		sprites[spritecount].x = x+0;
    bd20:	f9 01       	movw	r30, r18
    bd22:	ee 0f       	add	r30, r30
    bd24:	ff 1f       	adc	r31, r31
    bd26:	ee 0f       	add	r30, r30
    bd28:	ff 1f       	adc	r31, r31
    bd2a:	e4 5d       	subi	r30, 0xD4	; 212
    bd2c:	fb 4f       	sbci	r31, 0xFB	; 251
    bd2e:	50 83       	st	Z, r21
		sprites[spritecount].y = y+8;
    bd30:	18 5f       	subi	r17, 0xF8	; 248
    bd32:	11 83       	std	Z+1, r17	; 0x01
    bd34:	18 50       	subi	r17, 0x08	; 8
		sprites[spritecount++].flags = flags;
    bd36:	03 83       	std	Z+3, r16	; 0x03
    bd38:	4f 5f       	subi	r20, 0xFF	; 255
    bd3a:	40 93 cb 0f 	sts	0x0FCB, r20
	}
	sprites[spritecount].tileIndex = pgm_read_byte(&FrameTable[foff++]);
    bd3e:	90 91 cb 0f 	lds	r25, 0x0FCB
    bd42:	29 2f       	mov	r18, r25
    bd44:	30 e0       	ldi	r19, 0x00	; 0
    bd46:	66 53       	subi	r22, 0x36	; 54
    bd48:	7b 47       	sbci	r23, 0x7B	; 123
    bd4a:	fb 01       	movw	r30, r22
    bd4c:	84 91       	lpm	r24, Z+
    bd4e:	f9 01       	movw	r30, r18
    bd50:	ee 0f       	add	r30, r30
    bd52:	ff 1f       	adc	r31, r31
    bd54:	ee 0f       	add	r30, r30
    bd56:	ff 1f       	adc	r31, r31
    bd58:	e2 5d       	subi	r30, 0xD2	; 210
    bd5a:	fb 4f       	sbci	r31, 0xFB	; 251
    bd5c:	80 83       	st	Z, r24
	if(sprites[spritecount].tileIndex != 255 && x < 232){
    bd5e:	8f 3f       	cpi	r24, 0xFF	; 255
    bd60:	89 f0       	breq	.+34     	; 0xbd84 <DrawSpriteFrame+0x13c>
    bd62:	58 3e       	cpi	r21, 0xE8	; 232
    bd64:	78 f4       	brcc	.+30     	; 0xbd84 <DrawSpriteFrame+0x13c>
		sprites[spritecount].x = x+8;
    bd66:	f9 01       	movw	r30, r18
    bd68:	ee 0f       	add	r30, r30
    bd6a:	ff 1f       	adc	r31, r31
    bd6c:	ee 0f       	add	r30, r30
    bd6e:	ff 1f       	adc	r31, r31
    bd70:	e4 5d       	subi	r30, 0xD4	; 212
    bd72:	fb 4f       	sbci	r31, 0xFB	; 251
    bd74:	58 5f       	subi	r21, 0xF8	; 248
    bd76:	50 83       	st	Z, r21
		sprites[spritecount].y = y+8;
    bd78:	18 5f       	subi	r17, 0xF8	; 248
    bd7a:	11 83       	std	Z+1, r17	; 0x01
		sprites[spritecount++].flags = flags;
    bd7c:	03 83       	std	Z+3, r16	; 0x03
    bd7e:	9f 5f       	subi	r25, 0xFF	; 255
    bd80:	90 93 cb 0f 	sts	0x0FCB, r25
	}
}
    bd84:	1f 91       	pop	r17
    bd86:	0f 91       	pop	r16
    bd88:	08 95       	ret

0000bd8a <AIStun>:

uint16_t AIStun(uint8_t i){
/*	if(!Frogs[i].State & STUNNED)
		Frogs[i].AIState = AI_SIT;
	else */
	Frogs[i].AITarget = 0;
    bd8a:	90 e0       	ldi	r25, 0x00	; 0
    bd8c:	27 e1       	ldi	r18, 0x17	; 23
    bd8e:	30 e0       	ldi	r19, 0x00	; 0
    bd90:	82 9f       	mul	r24, r18
    bd92:	f0 01       	movw	r30, r0
    bd94:	83 9f       	mul	r24, r19
    bd96:	f0 0d       	add	r31, r0
    bd98:	92 9f       	mul	r25, r18
    bd9a:	f0 0d       	add	r31, r0
    bd9c:	11 24       	eor	r1, r1
    bd9e:	e9 51       	subi	r30, 0x19	; 25
    bda0:	f0 4f       	sbci	r31, 0xF0	; 240
    bda2:	11 8a       	std	Z+17, r1	; 0x11
	if((prng()&15) > 11)
    bda4:	28 df       	rcall	.-432    	; 0xbbf6 <prng>
    bda6:	20 e0       	ldi	r18, 0x00	; 0
    bda8:	30 e0       	ldi	r19, 0x00	; 0
    bdaa:	8f 70       	andi	r24, 0x0F	; 15
    bdac:	90 70       	andi	r25, 0x00	; 0
    bdae:	0c 97       	sbiw	r24, 0x0c	; 12
    bdb0:	10 f0       	brcs	.+4      	; 0xbdb6 <AIStun+0x2c>
    bdb2:	21 e0       	ldi	r18, 0x01	; 1
    bdb4:	30 e0       	ldi	r19, 0x00	; 0
		return BTN_B;
	else
		return 0;
}
    bdb6:	c9 01       	movw	r24, r18
    bdb8:	08 95       	ret

0000bdba <AISwimTowardsPad>:
	Frogs[i].AITarget = 0;
	return AICheckFacing(i);
}

uint16_t AISwimTowardsPad(uint8_t i){
	Frogs[i].AITarget = 0;
    bdba:	90 e0       	ldi	r25, 0x00	; 0
    bdbc:	27 e1       	ldi	r18, 0x17	; 23
    bdbe:	30 e0       	ldi	r19, 0x00	; 0
    bdc0:	82 9f       	mul	r24, r18
    bdc2:	f0 01       	movw	r30, r0
    bdc4:	83 9f       	mul	r24, r19
    bdc6:	f0 0d       	add	r31, r0
    bdc8:	92 9f       	mul	r25, r18
    bdca:	f0 0d       	add	r31, r0
    bdcc:	11 24       	eor	r1, r1
    bdce:	e9 51       	subi	r30, 0x19	; 25
    bdd0:	f0 4f       	sbci	r31, 0xF0	; 240
    bdd2:	11 8a       	std	Z+17, r1	; 0x11
	if(Frogs[i].x < LEFTEDGE)
    bdd4:	e0 81       	ld	r30, Z
    bdd6:	ea 31       	cpi	r30, 0x1A	; 26
    bdd8:	60 f0       	brcs	.+24     	; 0xbdf2 <AISwimTowardsPad+0x38>
		return BTN_RIGHT;
	else if(Frogs[i].x > MIDDLELEFT && Frogs[i].x < MIDDLERIGHT){
    bdda:	8e 2f       	mov	r24, r30
    bddc:	8d 56       	subi	r24, 0x6D	; 109
    bdde:	8f 30       	cpi	r24, 0x0F	; 15
    bde0:	18 f4       	brcc	.+6      	; 0xbde8 <AISwimTowardsPad+0x2e>
		if(Frogs[i].x < SCREENLEFT + (SCREENRIGHT - SCREENLEFT) / 2)
    bde2:	e7 37       	cpi	r30, 0x77	; 119
    bde4:	30 f4       	brcc	.+12     	; 0xbdf2 <AISwimTowardsPad+0x38>
    bde6:	08 c0       	rjmp	.+16     	; 0xbdf8 <AISwimTowardsPad+0x3e>
			return BTN_LEFT;
		else
			return BTN_RIGHT;
	}else if(Frogs[i].x > RIGHTEDGE)
    bde8:	ed 3c       	cpi	r30, 0xCD	; 205
    bdea:	30 f4       	brcc	.+12     	; 0xbdf8 <AISwimTowardsPad+0x3e>
    bdec:	20 e0       	ldi	r18, 0x00	; 0
    bdee:	30 e0       	ldi	r19, 0x00	; 0
    bdf0:	05 c0       	rjmp	.+10     	; 0xbdfc <AISwimTowardsPad+0x42>
    bdf2:	20 e8       	ldi	r18, 0x80	; 128
    bdf4:	30 e0       	ldi	r19, 0x00	; 0
    bdf6:	02 c0       	rjmp	.+4      	; 0xbdfc <AISwimTowardsPad+0x42>
    bdf8:	20 e4       	ldi	r18, 0x40	; 64
    bdfa:	30 e0       	ldi	r19, 0x00	; 0
		return BTN_LEFT;
	return 0;
}
    bdfc:	c9 01       	movw	r24, r18
    bdfe:	08 95       	ret

0000be00 <AISwim>:

uint16_t AISwim(uint8_t i){
    be00:	cf 93       	push	r28
    be02:	df 93       	push	r29
    be04:	48 2f       	mov	r20, r24
	Frogs[i].AITarget = 0;
    be06:	90 e0       	ldi	r25, 0x00	; 0
    be08:	27 e1       	ldi	r18, 0x17	; 23
    be0a:	30 e0       	ldi	r19, 0x00	; 0
    be0c:	82 9f       	mul	r24, r18
    be0e:	e0 01       	movw	r28, r0
    be10:	83 9f       	mul	r24, r19
    be12:	d0 0d       	add	r29, r0
    be14:	92 9f       	mul	r25, r18
    be16:	d0 0d       	add	r29, r0
    be18:	11 24       	eor	r1, r1
    be1a:	c9 51       	subi	r28, 0x19	; 25
    be1c:	d0 4f       	sbci	r29, 0xF0	; 240
    be1e:	19 8a       	std	Y+17, r1	; 0x11
	if((Frogs[i].State & SWIMMING)){
    be20:	8a 89       	ldd	r24, Y+18	; 0x12
    be22:	87 ff       	sbrs	r24, 7
    be24:	04 c0       	rjmp	.+8      	; 0xbe2e <AISwim+0x2e>
		return AISwimTowardsPad(i);
    be26:	84 2f       	mov	r24, r20
    be28:	c8 df       	rcall	.-112    	; 0xbdba <AISwimTowardsPad>
    be2a:	9c 01       	movw	r18, r24
    be2c:	0d c0       	rjmp	.+26     	; 0xbe48 <AISwim+0x48>
	}else{
		uint8_t rnd	= prng()%100;
    be2e:	e3 de       	rcall	.-570    	; 0xbbf6 <prng>
		if(rnd < 60)
    be30:	64 e6       	ldi	r22, 0x64	; 100
    be32:	70 e0       	ldi	r23, 0x00	; 0
    be34:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    be38:	8c 33       	cpi	r24, 0x3C	; 60
    be3a:	10 f4       	brcc	.+4      	; 0xbe40 <AISwim+0x40>
			Frogs[i].AIState	= AI_SIT;
    be3c:	18 8a       	std	Y+16, r1	; 0x10
    be3e:	02 c0       	rjmp	.+4      	; 0xbe44 <AISwim+0x44>
		else
			Frogs[i].AIState	= AI_CENTER;
    be40:	84 e0       	ldi	r24, 0x04	; 4
    be42:	88 8b       	std	Y+16, r24	; 0x10
    be44:	20 e0       	ldi	r18, 0x00	; 0
    be46:	30 e0       	ldi	r19, 0x00	; 0
	}
	return 0;
}
    be48:	c9 01       	movw	r24, r18
    be4a:	df 91       	pop	r29
    be4c:	cf 91       	pop	r28
    be4e:	08 95       	ret

0000be50 <AIFlyInJumpRange>:
		Frogs[i].AIState	= AI_SIT;
		return AICheckFacing(i);
	}
}
*/
uint8_t AIFlyInJumpRange(uint8_t i){
    be50:	1f 93       	push	r17
    be52:	cf 93       	push	r28
    be54:	df 93       	push	r29
    be56:	e3 ed       	ldi	r30, 0xD3	; 211
    be58:	ff e0       	ldi	r31, 0x0F	; 15
    be5a:	60 e0       	ldi	r22, 0x00	; 0
				Value		= prng()%(Difference1 + 2);
			}
		}else*/
			Value		= 2;//prng()&3;

		Difference1	= Frogs[i].x - Flies[j].x;
    be5c:	90 e0       	ldi	r25, 0x00	; 0
    be5e:	27 e1       	ldi	r18, 0x17	; 23
    be60:	30 e0       	ldi	r19, 0x00	; 0
    be62:	82 9f       	mul	r24, r18
    be64:	d0 01       	movw	r26, r0
    be66:	83 9f       	mul	r24, r19
    be68:	b0 0d       	add	r27, r0
    be6a:	92 9f       	mul	r25, r18
    be6c:	b0 0d       	add	r27, r0
    be6e:	11 24       	eor	r1, r1
    be70:	a9 51       	subi	r26, 0x19	; 25
    be72:	b0 4f       	sbci	r27, 0xF0	; 240
		Difference2	= Flies[j].x - Frogs[i].x;

		if(!(Frogs[i].State & FACING)){
    be74:	ed 01       	movw	r28, r26
    be76:	62 96       	adiw	r28, 0x12	; 18
	uint8_t	Value;
	uint8_t NumFlies = 0;

	/* Check if in jumping range of fly (considering facing direction) */
	for(uint8_t j=0;j<MAXFLIES;j++){
		if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
    be78:	84 81       	ldd	r24, Z+4	; 0x04
    be7a:	28 2f       	mov	r18, r24
    be7c:	30 e0       	ldi	r19, 0x00	; 0
    be7e:	40 e0       	ldi	r20, 0x00	; 0
    be80:	50 e0       	ldi	r21, 0x00	; 0
    be82:	84 ff       	sbrs	r24, 4
    be84:	26 c0       	rjmp	.+76     	; 0xbed2 <AIFlyInJumpRange+0x82>
    be86:	82 81       	ldd	r24, Z+2	; 0x02
    be88:	93 81       	ldd	r25, Z+3	; 0x03
    be8a:	89 2b       	or	r24, r25
    be8c:	11 f5       	brne	.+68     	; 0xbed2 <AIFlyInJumpRange+0x82>
				Value		= prng()%(Difference1 + 2);
			}
		}else*/
			Value		= 2;//prng()&3;

		Difference1	= Frogs[i].x - Flies[j].x;
    be8e:	7c 91       	ld	r23, X
    be90:	90 81       	ld	r25, Z
		Difference2	= Flies[j].x - Frogs[i].x;

		if(!(Frogs[i].State & FACING)){
    be92:	88 81       	ld	r24, Y
    be94:	24 70       	andi	r18, 0x04	; 4
    be96:	30 70       	andi	r19, 0x00	; 0
    be98:	40 70       	andi	r20, 0x00	; 0
    be9a:	50 70       	andi	r21, 0x00	; 0
    be9c:	82 fd       	sbrc	r24, 2
    be9e:	08 c0       	rjmp	.+16     	; 0xbeb0 <AIFlyInJumpRange+0x60>
				Value		= prng()%(Difference1 + 2);
			}
		}else*/
			Value		= 2;//prng()&3;

		Difference1	= Frogs[i].x - Flies[j].x;
    bea0:	87 2f       	mov	r24, r23
    bea2:	89 1b       	sub	r24, r25
		Difference2	= Flies[j].x - Frogs[i].x;

		if(!(Frogs[i].State & FACING)){
			if(!(Flies[j].State & FACING) && (Difference1 > JUMPAWAY) && (Difference1 < JUMPAWAY + Value))
    bea4:	21 15       	cp	r18, r1
    bea6:	31 05       	cpc	r19, r1
    bea8:	41 05       	cpc	r20, r1
    beaa:	51 05       	cpc	r21, r1
    beac:	69 f4       	brne	.+26     	; 0xbec8 <AIFlyInJumpRange+0x78>
    beae:	07 c0       	rjmp	.+14     	; 0xbebe <AIFlyInJumpRange+0x6e>
			}
		}else*/
			Value		= 2;//prng()&3;

		Difference1	= Frogs[i].x - Flies[j].x;
		Difference2	= Flies[j].x - Frogs[i].x;
    beb0:	89 2f       	mov	r24, r25
    beb2:	87 1b       	sub	r24, r23
			if(!(Flies[j].State & FACING) && (Difference1 > JUMPAWAY) && (Difference1 < JUMPAWAY + Value))
				NumFlies++;
			else if((Flies[j].State & FACING) && (Difference1 > JUMPTOWARDS) && (Difference1 < JUMPTOWARDS + Value))
				NumFlies++;
		}else{
			if((Flies[j].State & FACING) && (Difference2 > JUMPAWAY) && (Difference2 < JUMPAWAY + Value))
    beb4:	21 15       	cp	r18, r1
    beb6:	31 05       	cpc	r19, r1
    beb8:	41 05       	cpc	r20, r1
    beba:	51 05       	cpc	r21, r1
    bebc:	29 f0       	breq	.+10     	; 0xbec8 <AIFlyInJumpRange+0x78>
    bebe:	83 32       	cpi	r24, 0x23	; 35
    bec0:	40 f0       	brcs	.+16     	; 0xbed2 <AIFlyInJumpRange+0x82>
    bec2:	83 32       	cpi	r24, 0x23	; 35
    bec4:	31 f4       	brne	.+12     	; 0xbed2 <AIFlyInJumpRange+0x82>
    bec6:	04 c0       	rjmp	.+8      	; 0xbed0 <AIFlyInJumpRange+0x80>
				NumFlies++;
			else if(!(Flies[j].State & FACING) && (Difference2 > JUMPTOWARDS) && (Difference2 < JUMPTOWARDS + Value))
    bec8:	80 32       	cpi	r24, 0x20	; 32
    beca:	18 f0       	brcs	.+6      	; 0xbed2 <AIFlyInJumpRange+0x82>
    becc:	80 32       	cpi	r24, 0x20	; 32
    bece:	09 f4       	brne	.+2      	; 0xbed2 <AIFlyInJumpRange+0x82>
				NumFlies++;
    bed0:	6f 5f       	subi	r22, 0xFF	; 255
    bed2:	35 96       	adiw	r30, 0x05	; 5
	uint8_t	Difference2;
	uint8_t	Value;
	uint8_t NumFlies = 0;

	/* Check if in jumping range of fly (considering facing direction) */
	for(uint8_t j=0;j<MAXFLIES;j++){
    bed4:	8f e0       	ldi	r24, 0x0F	; 15
    bed6:	e7 3e       	cpi	r30, 0xE7	; 231
    bed8:	f8 07       	cpc	r31, r24
    beda:	71 f6       	brne	.-100    	; 0xbe78 <AIFlyInJumpRange+0x28>
			else if(!(Flies[j].State & FACING) && (Difference2 > JUMPTOWARDS) && (Difference2 < JUMPTOWARDS + Value))
				NumFlies++;
		}
	}
	return	NumFlies;
}
    bedc:	86 2f       	mov	r24, r22
    bede:	df 91       	pop	r29
    bee0:	cf 91       	pop	r28
    bee2:	1f 91       	pop	r17
    bee4:	08 95       	ret

0000bee6 <AIFliesInKillZone>:


uint8_t AIFliesInKillZone(uint8_t i){
    bee6:	ef 92       	push	r14
    bee8:	ff 92       	push	r15
    beea:	0f 93       	push	r16
    beec:	1f 93       	push	r17
    beee:	cf 93       	push	r28
    bef0:	df 93       	push	r29
	if((Frogs[i].State & FALLING) && (FROGY > KILLHEIGHT))//we wont be catching any more flies this jump
    bef2:	90 e0       	ldi	r25, 0x00	; 0
    bef4:	27 e1       	ldi	r18, 0x17	; 23
    bef6:	30 e0       	ldi	r19, 0x00	; 0
    bef8:	82 9f       	mul	r24, r18
    befa:	f0 01       	movw	r30, r0
    befc:	83 9f       	mul	r24, r19
    befe:	f0 0d       	add	r31, r0
    bf00:	92 9f       	mul	r25, r18
    bf02:	f0 0d       	add	r31, r0
    bf04:	11 24       	eor	r1, r1
    bf06:	e9 51       	subi	r30, 0x19	; 25
    bf08:	f0 4f       	sbci	r31, 0xF0	; 240
    bf0a:	82 89       	ldd	r24, Z+18	; 0x12
    bf0c:	93 89       	ldd	r25, Z+19	; 0x13
    bf0e:	a0 e0       	ldi	r26, 0x00	; 0
    bf10:	b0 e0       	ldi	r27, 0x00	; 0
    bf12:	86 ff       	sbrs	r24, 6
    bf14:	02 c0       	rjmp	.+4      	; 0xbf1a <AIFliesInKillZone+0x34>
    bf16:	40 e0       	ldi	r20, 0x00	; 0
    bf18:	33 c0       	rjmp	.+102    	; 0xbf80 <AIFliesInKillZone+0x9a>
    bf1a:	c3 ed       	ldi	r28, 0xD3	; 211
    bf1c:	df e0       	ldi	r29, 0x0F	; 15
    bf1e:	40 e0       	ldi	r20, 0x00	; 0
	uint8_t right_edge = KILLZONERIGHT;
	for(uint8_t j=0;j<MAXFLIES;j++){
		if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
			continue;
		if(Flies[j].x > left_edge && Flies[j].x < right_edge){
			if(Frogs[i].State & FACING){
    bf20:	24 e0       	ldi	r18, 0x04	; 4
    bf22:	e2 2e       	mov	r14, r18
    bf24:	f1 2c       	mov	r15, r1
    bf26:	01 2d       	mov	r16, r1
    bf28:	11 2d       	mov	r17, r1
    bf2a:	e8 22       	and	r14, r24
    bf2c:	f9 22       	and	r15, r25
    bf2e:	0a 23       	and	r16, r26
    bf30:	1b 23       	and	r17, r27
		return 0;
	uint8_t NumFlies = 0;
	uint8_t left_edge = KILLZONELEFT;
	uint8_t right_edge = KILLZONERIGHT;
	for(uint8_t j=0;j<MAXFLIES;j++){
		if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
    bf32:	8c 81       	ldd	r24, Y+4	; 0x04
    bf34:	84 ff       	sbrs	r24, 4
    bf36:	1f c0       	rjmp	.+62     	; 0xbf76 <AIFliesInKillZone+0x90>
    bf38:	8a 81       	ldd	r24, Y+2	; 0x02
    bf3a:	9b 81       	ldd	r25, Y+3	; 0x03
    bf3c:	89 2b       	or	r24, r25
    bf3e:	d9 f4       	brne	.+54     	; 0xbf76 <AIFliesInKillZone+0x90>
			continue;
		if(Flies[j].x > left_edge && Flies[j].x < right_edge){
    bf40:	88 81       	ld	r24, Y
    bf42:	85 34       	cpi	r24, 0x45	; 69
    bf44:	c0 f0       	brcs	.+48     	; 0xbf76 <AIFliesInKillZone+0x90>
    bf46:	8c 3a       	cpi	r24, 0xAC	; 172
    bf48:	b0 f4       	brcc	.+44     	; 0xbf76 <AIFliesInKillZone+0x90>
    bf4a:	28 2f       	mov	r18, r24
    bf4c:	30 e0       	ldi	r19, 0x00	; 0
			if(Frogs[i].State & FACING){
    bf4e:	e1 14       	cp	r14, r1
    bf50:	f1 04       	cpc	r15, r1
    bf52:	01 05       	cpc	r16, r1
    bf54:	11 05       	cpc	r17, r1
    bf56:	41 f0       	breq	.+16     	; 0xbf68 <AIFliesInKillZone+0x82>
				if(Frogs[i].x > Flies[j].x+4)//already past way the fly, forget it
    bf58:	80 81       	ld	r24, Z
    bf5a:	90 e0       	ldi	r25, 0x00	; 0
    bf5c:	2c 5f       	subi	r18, 0xFC	; 252
    bf5e:	3f 4f       	sbci	r19, 0xFF	; 255
    bf60:	28 17       	cp	r18, r24
    bf62:	39 07       	cpc	r19, r25
    bf64:	44 f0       	brlt	.+16     	; 0xbf76 <AIFliesInKillZone+0x90>
    bf66:	06 c0       	rjmp	.+12     	; 0xbf74 <AIFliesInKillZone+0x8e>
					continue;
			}else if(Frogs[i].x+4 < Flies[j].x)//went past him
    bf68:	80 81       	ld	r24, Z
    bf6a:	90 e0       	ldi	r25, 0x00	; 0
    bf6c:	04 96       	adiw	r24, 0x04	; 4
    bf6e:	82 17       	cp	r24, r18
    bf70:	93 07       	cpc	r25, r19
    bf72:	0c f0       	brlt	.+2      	; 0xbf76 <AIFliesInKillZone+0x90>
				continue;
			NumFlies++;
    bf74:	4f 5f       	subi	r20, 0xFF	; 255
    bf76:	25 96       	adiw	r28, 0x05	; 5
	if((Frogs[i].State & FALLING) && (FROGY > KILLHEIGHT))//we wont be catching any more flies this jump
		return 0;
	uint8_t NumFlies = 0;
	uint8_t left_edge = KILLZONELEFT;
	uint8_t right_edge = KILLZONERIGHT;
	for(uint8_t j=0;j<MAXFLIES;j++){
    bf78:	8f e0       	ldi	r24, 0x0F	; 15
    bf7a:	c7 3e       	cpi	r28, 0xE7	; 231
    bf7c:	d8 07       	cpc	r29, r24
    bf7e:	c9 f6       	brne	.-78     	; 0xbf32 <AIFliesInKillZone+0x4c>
			NumFlies++;
		}
	}
//	DrawNumber(NumFlies,3,6,1);
	return NumFlies;
}
    bf80:	84 2f       	mov	r24, r20
    bf82:	cd b7       	in	r28, 0x3d	; 61
    bf84:	de b7       	in	r29, 0x3e	; 62
    bf86:	e6 e0       	ldi	r30, 0x06	; 6
    bf88:	0c 94 1a 77 	jmp	0xee34	; 0xee34 <__epilogue_restores__+0x18>

0000bf8c <AIJump>:
		Frogs[i].AIState = AI_CENTER;
	return 0;
}


uint16_t AIJump(uint8_t i){
    bf8c:	a7 e0       	ldi	r26, 0x07	; 7
    bf8e:	b0 e0       	ldi	r27, 0x00	; 0
    bf90:	ec ec       	ldi	r30, 0xCC	; 204
    bf92:	ff e5       	ldi	r31, 0x5F	; 95
    bf94:	0c 94 f2 76 	jmp	0xede4	; 0xede4 <__prologue_saves__>
    bf98:	8b 83       	std	Y+3, r24	; 0x03
	if(Frogs[i].State & STOMPING){
    bf9a:	08 2f       	mov	r16, r24
    bf9c:	10 e0       	ldi	r17, 0x00	; 0
    bf9e:	87 e1       	ldi	r24, 0x17	; 23
    bfa0:	90 e0       	ldi	r25, 0x00	; 0
    bfa2:	08 9f       	mul	r16, r24
    bfa4:	f0 01       	movw	r30, r0
    bfa6:	09 9f       	mul	r16, r25
    bfa8:	f0 0d       	add	r31, r0
    bfaa:	18 9f       	mul	r17, r24
    bfac:	f0 0d       	add	r31, r0
    bfae:	11 24       	eor	r1, r1
    bfb0:	e9 51       	subi	r30, 0x19	; 25
    bfb2:	f0 4f       	sbci	r31, 0xF0	; 240
    bfb4:	82 89       	ldd	r24, Z+18	; 0x12
    bfb6:	93 89       	ldd	r25, Z+19	; 0x13
    bfb8:	a0 e0       	ldi	r26, 0x00	; 0
    bfba:	b0 e0       	ldi	r27, 0x00	; 0
    bfbc:	92 fd       	sbrc	r25, 2
    bfbe:	d6 c1       	rjmp	.+940    	; 0xc36c <AIJump+0x3e0>
		return 0;
	}

	//see if the enemy is stomping and close on the x-axis. We might have jumped just to dodge the attack, let's counter-attack!
	if(Frogs[!i].State & STOMPING && Frogs[i].y < Frogs[!i].y){//he is stomping and we are above him!
    bfc0:	1a 82       	std	Y+2, r1	; 0x02
    bfc2:	19 82       	std	Y+1, r1	; 0x01
    bfc4:	2b 81       	ldd	r18, Y+3	; 0x03
    bfc6:	22 23       	and	r18, r18
    bfc8:	21 f4       	brne	.+8      	; 0xbfd2 <AIJump+0x46>
    bfca:	41 e0       	ldi	r20, 0x01	; 1
    bfcc:	50 e0       	ldi	r21, 0x00	; 0
    bfce:	5a 83       	std	Y+2, r21	; 0x02
    bfd0:	49 83       	std	Y+1, r20	; 0x01
    bfd2:	27 e1       	ldi	r18, 0x17	; 23
    bfd4:	30 e0       	ldi	r19, 0x00	; 0
    bfd6:	89 81       	ldd	r24, Y+1	; 0x01
    bfd8:	9a 81       	ldd	r25, Y+2	; 0x02
    bfda:	82 9f       	mul	r24, r18
    bfdc:	a0 01       	movw	r20, r0
    bfde:	83 9f       	mul	r24, r19
    bfe0:	50 0d       	add	r21, r0
    bfe2:	92 9f       	mul	r25, r18
    bfe4:	50 0d       	add	r21, r0
    bfe6:	11 24       	eor	r1, r1
    bfe8:	49 51       	subi	r20, 0x19	; 25
    bfea:	50 4f       	sbci	r21, 0xF0	; 240
    bfec:	da 01       	movw	r26, r20
    bfee:	52 96       	adiw	r26, 0x12	; 18
    bff0:	8d 91       	ld	r24, X+
    bff2:	9c 91       	ld	r25, X
    bff4:	53 97       	sbiw	r26, 0x13	; 19
    bff6:	a0 e0       	ldi	r26, 0x00	; 0
    bff8:	b0 e0       	ldi	r27, 0x00	; 0
    bffa:	92 ff       	sbrs	r25, 2
    bffc:	28 c0       	rjmp	.+80     	; 0xc04e <AIJump+0xc2>
    bffe:	02 9f       	mul	r16, r18
    c000:	f0 01       	movw	r30, r0
    c002:	03 9f       	mul	r16, r19
    c004:	f0 0d       	add	r31, r0
    c006:	12 9f       	mul	r17, r18
    c008:	f0 0d       	add	r31, r0
    c00a:	11 24       	eor	r1, r1
    c00c:	e9 51       	subi	r30, 0x19	; 25
    c00e:	f0 4f       	sbci	r31, 0xF0	; 240
    c010:	91 81       	ldd	r25, Z+1	; 0x01
    c012:	da 01       	movw	r26, r20
    c014:	11 96       	adiw	r26, 0x01	; 1
    c016:	8c 91       	ld	r24, X
    c018:	11 97       	sbiw	r26, 0x01	; 1
    c01a:	98 17       	cp	r25, r24
    c01c:	c0 f4       	brcc	.+48     	; 0xc04e <AIJump+0xc2>
		if((Frogs[i].x > Frogs[!i].x && (Frogs[i].x-Frogs[!i].x < 16)) || (Frogs[!i].x > Frogs[i].x && (Frogs[!i].x-Frogs[i].x < 16)))
    c01e:	30 81       	ld	r19, Z
    c020:	2c 91       	ld	r18, X
    c022:	23 17       	cp	r18, r19
    c024:	30 f4       	brcc	.+12     	; 0xc032 <AIJump+0xa6>
    c026:	83 2f       	mov	r24, r19
    c028:	90 e0       	ldi	r25, 0x00	; 0
    c02a:	82 1b       	sub	r24, r18
    c02c:	91 09       	sbc	r25, r1
    c02e:	40 97       	sbiw	r24, 0x10	; 16
    c030:	44 f0       	brlt	.+16     	; 0xc042 <AIJump+0xb6>
    c032:	32 17       	cp	r19, r18
    c034:	60 f4       	brcc	.+24     	; 0xc04e <AIJump+0xc2>
    c036:	82 2f       	mov	r24, r18
    c038:	90 e0       	ldi	r25, 0x00	; 0
    c03a:	83 1b       	sub	r24, r19
    c03c:	91 09       	sbc	r25, r1
    c03e:	40 97       	sbiw	r24, 0x10	; 16
    c040:	34 f4       	brge	.+12     	; 0xc04e <AIJump+0xc2>
			if((prng()&5) == 1)
    c042:	d9 dd       	rcall	.-1102   	; 0xbbf6 <prng>
    c044:	85 70       	andi	r24, 0x05	; 5
    c046:	90 70       	andi	r25, 0x00	; 0
    c048:	01 97       	sbiw	r24, 0x01	; 1
    c04a:	09 f4       	brne	.+2      	; 0xc04e <AIJump+0xc2>
    c04c:	92 c1       	rjmp	.+804    	; 0xc372 <AIJump+0x3e6>

//	StartY	= Frogs[i].y - pgm_read_byte(&JumpWave[Frogs[i].JumpTime]) + 2;

	uint8_t x1,y1,rnd0,rnd1;
	uint16_t natural_direction;
	rnd0 = prng()&1;//7;
    c04e:	d3 dd       	rcall	.-1114   	; 0xbbf6 <prng>
	rnd1 = prng()&1;//7;
    c050:	d2 dd       	rcall	.-1116   	; 0xbbf6 <prng>
	if((Frogs[i].State & FACING)){
    c052:	87 e1       	ldi	r24, 0x17	; 23
    c054:	90 e0       	ldi	r25, 0x00	; 0
    c056:	08 9f       	mul	r16, r24
    c058:	f0 01       	movw	r30, r0
    c05a:	09 9f       	mul	r16, r25
    c05c:	f0 0d       	add	r31, r0
    c05e:	18 9f       	mul	r17, r24
    c060:	f0 0d       	add	r31, r0
    c062:	11 24       	eor	r1, r1
    c064:	e9 51       	subi	r30, 0x19	; 25
    c066:	f0 4f       	sbci	r31, 0xF0	; 240
    c068:	82 89       	ldd	r24, Z+18	; 0x12
    c06a:	93 89       	ldd	r25, Z+19	; 0x13
    c06c:	6c 01       	movw	r12, r24
    c06e:	ee 24       	eor	r14, r14
    c070:	ff 24       	eor	r15, r15
    c072:	94 e0       	ldi	r25, 0x04	; 4
    c074:	89 2e       	mov	r8, r25
    c076:	91 2c       	mov	r9, r1
    c078:	a1 2c       	mov	r10, r1
    c07a:	b1 2c       	mov	r11, r1
    c07c:	8c 20       	and	r8, r12
    c07e:	9d 20       	and	r9, r13
    c080:	ae 20       	and	r10, r14
    c082:	bf 20       	and	r11, r15
    c084:	c2 fc       	sbrc	r12, 2
    c086:	04 c0       	rjmp	.+8      	; 0xc090 <AIJump+0x104>
    c088:	80 e4       	ldi	r24, 0x40	; 64
    c08a:	48 2e       	mov	r4, r24
    c08c:	51 2c       	mov	r5, r1
    c08e:	03 c0       	rjmp	.+6      	; 0xc096 <AIJump+0x10a>
    c090:	b0 e8       	ldi	r27, 0x80	; 128
    c092:	4b 2e       	mov	r4, r27
    c094:	51 2c       	mov	r5, r1
		x1 = ((Frogs[i].x-16)-rnd0)+rnd1;
	}
	//y1 = (Frogs[i].y- pgm_read_byte(&JumpWave[Frogs[i].JumpTime]))+2;
	y1 = ((Frogs[i].y+4)+1)-1;//rnd0)-rnd1;

	if(!(Frogs[i].State & TONGUEING)){
    c096:	d0 fc       	sbrc	r13, 0
    c098:	6e c0       	rjmp	.+220    	; 0xc176 <AIJump+0x1ea>
    c09a:	e3 ed       	ldi	r30, 0xD3	; 211
    c09c:	ff e0       	ldi	r31, 0x0F	; 15
		for(uint8_t j=0;j<MAXFLIES;j++){
			if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
				continue;


			uint8_t w = (11+2)+(Cheats[i]*24);//pgm_read_byte(&TongueLength[Frogs[i].TongueTime >> 1])+(Cheats[i]*24);
    c09e:	a8 ec       	ldi	r26, 0xC8	; 200
    c0a0:	2a 2e       	mov	r2, r26
    c0a2:	af e0       	ldi	r26, 0x0F	; 15
    c0a4:	3a 2e       	mov	r3, r26
    c0a6:	20 0e       	add	r2, r16
    c0a8:	31 1e       	adc	r3, r17
			int16_t x1 = (int16_t)((Frogs[i].State & FACING)?(Frogs[i].x+16):(Frogs[i].x-w));
			if(	(Frogs[i].y+(6+2) < Flies[j].y) ||
    c0aa:	87 e1       	ldi	r24, 0x17	; 23
    c0ac:	90 e0       	ldi	r25, 0x00	; 0
    c0ae:	08 9f       	mul	r16, r24
    c0b0:	90 01       	movw	r18, r0
    c0b2:	09 9f       	mul	r16, r25
    c0b4:	30 0d       	add	r19, r0
    c0b6:	18 9f       	mul	r17, r24
    c0b8:	30 0d       	add	r19, r0
    c0ba:	11 24       	eor	r1, r1
    c0bc:	29 51       	subi	r18, 0x19	; 25
    c0be:	30 4f       	sbci	r19, 0xF0	; 240
    c0c0:	3d 83       	std	Y+5, r19	; 0x05
    c0c2:	2c 83       	std	Y+4, r18	; 0x04
    c0c4:	2f 5f       	subi	r18, 0xFF	; 255
    c0c6:	3f 4f       	sbci	r19, 0xFF	; 255
    c0c8:	3f 83       	std	Y+7, r19	; 0x07
    c0ca:	2e 83       	std	Y+6, r18	; 0x06
	//y1 = (Frogs[i].y- pgm_read_byte(&JumpWave[Frogs[i].JumpTime]))+2;
	y1 = ((Frogs[i].y+4)+1)-1;//rnd0)-rnd1;

	if(!(Frogs[i].State & TONGUEING)){
		for(uint8_t j=0;j<MAXFLIES;j++){
			if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
    c0cc:	84 81       	ldd	r24, Z+4	; 0x04
    c0ce:	84 ff       	sbrs	r24, 4
    c0d0:	4c c0       	rjmp	.+152    	; 0xc16a <AIJump+0x1de>
    c0d2:	82 81       	ldd	r24, Z+2	; 0x02
    c0d4:	93 81       	ldd	r25, Z+3	; 0x03
    c0d6:	89 2b       	or	r24, r25
    c0d8:	09 f0       	breq	.+2      	; 0xc0dc <AIJump+0x150>
    c0da:	47 c0       	rjmp	.+142    	; 0xc16a <AIJump+0x1de>
				continue;


			uint8_t w = (11+2)+(Cheats[i]*24);//pgm_read_byte(&TongueLength[Frogs[i].TongueTime >> 1])+(Cheats[i]*24);
    c0dc:	d1 01       	movw	r26, r2
    c0de:	2c 91       	ld	r18, X
    c0e0:	30 e0       	ldi	r19, 0x00	; 0
    c0e2:	c9 01       	movw	r24, r18
    c0e4:	88 0f       	add	r24, r24
    c0e6:	99 1f       	adc	r25, r25
    c0e8:	82 0f       	add	r24, r18
    c0ea:	93 1f       	adc	r25, r19
    c0ec:	63 e0       	ldi	r22, 0x03	; 3
    c0ee:	88 0f       	add	r24, r24
    c0f0:	99 1f       	adc	r25, r25
    c0f2:	6a 95       	dec	r22
    c0f4:	e1 f7       	brne	.-8      	; 0xc0ee <AIJump+0x162>
    c0f6:	5d e0       	ldi	r21, 0x0D	; 13
    c0f8:	75 2e       	mov	r7, r21
    c0fa:	78 0e       	add	r7, r24
			int16_t x1 = (int16_t)((Frogs[i].State & FACING)?(Frogs[i].x+16):(Frogs[i].x-w));
    c0fc:	81 14       	cp	r8, r1
    c0fe:	91 04       	cpc	r9, r1
    c100:	a1 04       	cpc	r10, r1
    c102:	b1 04       	cpc	r11, r1
    c104:	41 f0       	breq	.+16     	; 0xc116 <AIJump+0x18a>
    c106:	ac 81       	ldd	r26, Y+4	; 0x04
    c108:	bd 81       	ldd	r27, Y+5	; 0x05
    c10a:	8c 91       	ld	r24, X
    c10c:	48 2f       	mov	r20, r24
    c10e:	50 e0       	ldi	r21, 0x00	; 0
    c110:	40 5f       	subi	r20, 0xF0	; 240
    c112:	5f 4f       	sbci	r21, 0xFF	; 255
    c114:	07 c0       	rjmp	.+14     	; 0xc124 <AIJump+0x198>
    c116:	ac 81       	ldd	r26, Y+4	; 0x04
    c118:	bd 81       	ldd	r27, Y+5	; 0x05
    c11a:	8c 91       	ld	r24, X
    c11c:	48 2f       	mov	r20, r24
    c11e:	50 e0       	ldi	r21, 0x00	; 0
    c120:	47 19       	sub	r20, r7
    c122:	51 09       	sbc	r21, r1
			if(	(Frogs[i].y+(6+2) < Flies[j].y) ||
    c124:	ae 81       	ldd	r26, Y+6	; 0x06
    c126:	bf 81       	ldd	r27, Y+7	; 0x07
    c128:	8c 91       	ld	r24, X
    c12a:	68 2f       	mov	r22, r24
    c12c:	70 e0       	ldi	r23, 0x00	; 0
    c12e:	81 81       	ldd	r24, Z+1	; 0x01
    c130:	28 2f       	mov	r18, r24
    c132:	30 e0       	ldi	r19, 0x00	; 0
    c134:	cb 01       	movw	r24, r22
    c136:	08 96       	adiw	r24, 0x08	; 8
    c138:	82 17       	cp	r24, r18
    c13a:	93 07       	cpc	r25, r19
    c13c:	b4 f0       	brlt	.+44     	; 0xc16a <AIJump+0x1de>
    c13e:	28 5f       	subi	r18, 0xF8	; 248
    c140:	3f 4f       	sbci	r19, 0xFF	; 255
    c142:	26 17       	cp	r18, r22
    c144:	37 07       	cpc	r19, r23
    c146:	8c f0       	brlt	.+34     	; 0xc16a <AIJump+0x1de>
    c148:	80 81       	ld	r24, Z
    c14a:	28 2f       	mov	r18, r24
    c14c:	30 e0       	ldi	r19, 0x00	; 0
    c14e:	c9 01       	movw	r24, r18
    c150:	0a 96       	adiw	r24, 0x0a	; 10
    c152:	84 17       	cp	r24, r20
    c154:	95 07       	cpc	r25, r21
    c156:	4c f0       	brlt	.+18     	; 0xc16a <AIJump+0x1de>
    c158:	47 0d       	add	r20, r7
    c15a:	51 1d       	adc	r21, r1
    c15c:	42 17       	cp	r20, r18
    c15e:	53 07       	cpc	r21, r19
    c160:	24 f0       	brlt	.+8      	; 0xc16a <AIJump+0x1de>
				(Frogs[i].y+(4-2) > Flies[j].y+(8+2)) ||
				(x1 > Flies[j].x+(8+2)) ||
				(x1+w < Flies[j].x))
				continue;
		return (LICK_BUTTON|JUMP_BUTTON|natural_direction);
    c162:	92 01       	movw	r18, r4
    c164:	21 61       	ori	r18, 0x11	; 17
    c166:	3d 60       	ori	r19, 0x0D	; 13
    c168:	0c c1       	rjmp	.+536    	; 0xc382 <AIJump+0x3f6>
    c16a:	35 96       	adiw	r30, 0x05	; 5
	}
	//y1 = (Frogs[i].y- pgm_read_byte(&JumpWave[Frogs[i].JumpTime]))+2;
	y1 = ((Frogs[i].y+4)+1)-1;//rnd0)-rnd1;

	if(!(Frogs[i].State & TONGUEING)){
		for(uint8_t j=0;j<MAXFLIES;j++){
    c16c:	bf e0       	ldi	r27, 0x0F	; 15
    c16e:	e7 3e       	cpi	r30, 0xE7	; 231
    c170:	fb 07       	cpc	r31, r27
    c172:	09 f0       	breq	.+2      	; 0xc176 <AIJump+0x1ea>
    c174:	ab cf       	rjmp	.-170    	; 0xc0cc <AIJump+0x140>
		return (LICK_BUTTON|JUMP_BUTTON|natural_direction);
		}
	}
//see if we are in the kill zone and close to a fly that we should steer towards
		uint8_t steer_weight[2] = {0,0};//prng()&1,prng()&1};
		if(Frogs[i].y < KILLHEIGHT){
    c176:	87 e1       	ldi	r24, 0x17	; 23
    c178:	90 e0       	ldi	r25, 0x00	; 0
    c17a:	08 9f       	mul	r16, r24
    c17c:	f0 01       	movw	r30, r0
    c17e:	09 9f       	mul	r16, r25
    c180:	f0 0d       	add	r31, r0
    c182:	18 9f       	mul	r17, r24
    c184:	f0 0d       	add	r31, r0
    c186:	11 24       	eor	r1, r1
    c188:	e9 51       	subi	r30, 0x19	; 25
    c18a:	f0 4f       	sbci	r31, 0xF0	; 240
    c18c:	81 81       	ldd	r24, Z+1	; 0x01
    c18e:	80 37       	cpi	r24, 0x70	; 112
    c190:	08 f0       	brcs	.+2      	; 0xc194 <AIJump+0x208>
    c192:	50 c0       	rjmp	.+160    	; 0xc234 <AIJump+0x2a8>
    c194:	a3 ed       	ldi	r26, 0xD3	; 211
    c196:	bf e0       	ldi	r27, 0x0F	; 15
    c198:	77 24       	eor	r7, r7
    c19a:	66 24       	eor	r6, r6
			for(uint8_t j=0;j<MAXFLIES;j++){
				if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
    c19c:	14 96       	adiw	r26, 0x04	; 4
    c19e:	8c 91       	ld	r24, X
    c1a0:	14 97       	sbiw	r26, 0x04	; 4
    c1a2:	84 ff       	sbrs	r24, 4
    c1a4:	37 c0       	rjmp	.+110    	; 0xc214 <AIJump+0x288>
    c1a6:	12 96       	adiw	r26, 0x02	; 2
    c1a8:	8d 91       	ld	r24, X+
    c1aa:	9c 91       	ld	r25, X
    c1ac:	13 97       	sbiw	r26, 0x03	; 3
    c1ae:	89 2b       	or	r24, r25
    c1b0:	89 f5       	brne	.+98     	; 0xc214 <AIJump+0x288>
    c1b2:	5c 91       	ld	r21, X
					continue;

				if(Frogs[i].State & FACING){//we are moving right, favor flies in front of us or very close behind(since we can't steer back much)
    c1b4:	81 14       	cp	r8, r1
    c1b6:	91 04       	cpc	r9, r1
    c1b8:	a1 04       	cpc	r10, r1
    c1ba:	b1 04       	cpc	r11, r1
    c1bc:	b1 f0       	breq	.+44     	; 0xc1ea <AIJump+0x25e>
					if(Flies[j].x > (Frogs[i].x+8)){//fly is ahead of us
    c1be:	25 2f       	mov	r18, r21
    c1c0:	30 e0       	ldi	r19, 0x00	; 0
    c1c2:	40 81       	ld	r20, Z
    c1c4:	64 2f       	mov	r22, r20
    c1c6:	70 e0       	ldi	r23, 0x00	; 0
    c1c8:	cb 01       	movw	r24, r22
    c1ca:	08 96       	adiw	r24, 0x08	; 8
    c1cc:	82 17       	cp	r24, r18
    c1ce:	93 07       	cpc	r25, r19
    c1d0:	34 f4       	brge	.+12     	; 0xc1de <AIJump+0x252>
						if((Flies[j].x-Frogs[i].x) > 16+18)//too far forward to consider yet
    c1d2:	26 1b       	sub	r18, r22
    c1d4:	37 0b       	sbc	r19, r23
    c1d6:	23 32       	cpi	r18, 0x23	; 35
    c1d8:	31 05       	cpc	r19, r1
    c1da:	e4 f4       	brge	.+56     	; 0xc214 <AIJump+0x288>
    c1dc:	19 c0       	rjmp	.+50     	; 0xc210 <AIJump+0x284>
							continue;
						steer_weight[1] += (Flies[j].x-Frogs[i].x);
					}else{//fly is behind us
						if(((Frogs[i].x+8)-Flies[j].x) > 5)//too far back, not realistic to swing back
    c1de:	82 1b       	sub	r24, r18
    c1e0:	93 0b       	sbc	r25, r19
    c1e2:	06 97       	sbiw	r24, 0x06	; 6
    c1e4:	bc f4       	brge	.+46     	; 0xc214 <AIJump+0x288>
							continue;
						steer_weight[0] += 0+((Frogs[i].x+8)-Flies[j].x);
    c1e6:	48 5f       	subi	r20, 0xF8	; 248
    c1e8:	0c c0       	rjmp	.+24     	; 0xc202 <AIJump+0x276>
					}
				}else{//we are moving left
					if(Flies[j].x < (Frogs[i].x+0)){//fly is ahead of us
    c1ea:	40 81       	ld	r20, Z
    c1ec:	24 2f       	mov	r18, r20
    c1ee:	30 e0       	ldi	r19, 0x00	; 0
    c1f0:	85 2f       	mov	r24, r21
    c1f2:	90 e0       	ldi	r25, 0x00	; 0
    c1f4:	54 17       	cp	r21, r20
    c1f6:	40 f4       	brcc	.+16     	; 0xc208 <AIJump+0x27c>
						if((Frogs[i].x-Flies[j].x) > 18)//too far forward to consider yet
    c1f8:	28 1b       	sub	r18, r24
    c1fa:	39 0b       	sbc	r19, r25
    c1fc:	23 31       	cpi	r18, 0x13	; 19
    c1fe:	31 05       	cpc	r19, r1
    c200:	4c f4       	brge	.+18     	; 0xc214 <AIJump+0x288>
							continue;
						steer_weight[0] += (Frogs[i].x-Flies[j].x);
    c202:	45 1b       	sub	r20, r21
    c204:	64 0e       	add	r6, r20
    c206:	06 c0       	rjmp	.+12     	; 0xc214 <AIJump+0x288>
					}else{//fly is behind us
						if((Flies[j].x-Frogs[i].x) > 3)//too far back, not realistic to swing back
    c208:	82 1b       	sub	r24, r18
    c20a:	93 0b       	sbc	r25, r19
    c20c:	04 97       	sbiw	r24, 0x04	; 4
    c20e:	14 f4       	brge	.+4      	; 0xc214 <AIJump+0x288>
							continue;
						steer_weight[1] += 0+(Flies[j].x-Frogs[i].x);
    c210:	54 1b       	sub	r21, r20
    c212:	75 0e       	add	r7, r21
    c214:	15 96       	adiw	r26, 0x05	; 5
		}
	}
//see if we are in the kill zone and close to a fly that we should steer towards
		uint8_t steer_weight[2] = {0,0};//prng()&1,prng()&1};
		if(Frogs[i].y < KILLHEIGHT){
			for(uint8_t j=0;j<MAXFLIES;j++){
    c216:	2f e0       	ldi	r18, 0x0F	; 15
    c218:	a7 3e       	cpi	r26, 0xE7	; 231
    c21a:	b2 07       	cpc	r27, r18
    c21c:	09 f0       	breq	.+2      	; 0xc220 <AIJump+0x294>
    c21e:	be cf       	rjmp	.-132    	; 0xc19c <AIJump+0x210>
					steer_weight[1]++;
			*/
			}
	//		DrawNumber(steer_weight[0],6,4,1);
	//		DrawNumber(steer_weight[1],22,4,1);
			if(steer_weight[1] > 6 && steer_weight[1] > steer_weight[0])
    c220:	36 e0       	ldi	r19, 0x06	; 6
    c222:	37 15       	cp	r19, r7
    c224:	18 f4       	brcc	.+6      	; 0xc22c <AIJump+0x2a0>
    c226:	67 14       	cp	r6, r7
    c228:	08 f4       	brcc	.+2      	; 0xc22c <AIJump+0x2a0>
    c22a:	a6 c0       	rjmp	.+332    	; 0xc378 <AIJump+0x3ec>
				return (JUMP_BUTTON|BTN_RIGHT);
			else if(steer_weight[0] > 6)
    c22c:	46 e0       	ldi	r20, 0x06	; 6
    c22e:	46 15       	cp	r20, r6
    c230:	08 f4       	brcc	.+2      	; 0xc234 <AIJump+0x2a8>
    c232:	a5 c0       	rjmp	.+330    	; 0xc37e <AIJump+0x3f2>
		}



	//see if we are jumping against the edge of the screen and we should do a double jump
	if(Frogs[i].State & JUMPING){//NOT falling
    c234:	c4 fe       	sbrs	r12, 4
    c236:	3a c0       	rjmp	.+116    	; 0xc2ac <AIJump+0x320>
		if(Frogs[i].x < 2){
    c238:	87 e1       	ldi	r24, 0x17	; 23
    c23a:	90 e0       	ldi	r25, 0x00	; 0
    c23c:	08 9f       	mul	r16, r24
    c23e:	f0 01       	movw	r30, r0
    c240:	09 9f       	mul	r16, r25
    c242:	f0 0d       	add	r31, r0
    c244:	18 9f       	mul	r17, r24
    c246:	f0 0d       	add	r31, r0
    c248:	11 24       	eor	r1, r1
    c24a:	e9 51       	subi	r30, 0x19	; 25
    c24c:	f0 4f       	sbci	r31, 0xF0	; 240
    c24e:	e0 81       	ld	r30, Z
    c250:	e2 30       	cpi	r30, 0x02	; 2
    c252:	a8 f4       	brcc	.+42     	; 0xc27e <AIJump+0x2f2>
			if(Frogs[i].State & FACING){//we can jump, let go of jump if we were holding it, then press it again next frame
    c254:	81 14       	cp	r8, r1
    c256:	91 04       	cpc	r9, r1
    c258:	a1 04       	cpc	r10, r1
    c25a:	b1 04       	cpc	r11, r1
    c25c:	19 f4       	brne	.+6      	; 0xc264 <AIJump+0x2d8>
    c25e:	20 e8       	ldi	r18, 0x80	; 128
    c260:	30 e0       	ldi	r19, 0x00	; 0
    c262:	8f c0       	rjmp	.+286    	; 0xc382 <AIJump+0x3f6>
				if(OldJoyVal[i] & JUMP_BUTTON)
    c264:	00 0f       	add	r16, r16
    c266:	11 1f       	adc	r17, r17
    c268:	09 5e       	subi	r16, 0xE9	; 233
    c26a:	1f 4e       	sbci	r17, 0xEF	; 239
    c26c:	d8 01       	movw	r26, r16
    c26e:	8d 91       	ld	r24, X+
    c270:	9c 91       	ld	r25, X
    c272:	80 71       	andi	r24, 0x10	; 16
    c274:	91 70       	andi	r25, 0x01	; 1
    c276:	89 2b       	or	r24, r25
    c278:	09 f4       	brne	.+2      	; 0xc27c <AIJump+0x2f0>
    c27a:	7e c0       	rjmp	.+252    	; 0xc378 <AIJump+0x3ec>
    c27c:	77 c0       	rjmp	.+238    	; 0xc36c <AIJump+0x3e0>
					return 0;
				return (JUMP_BUTTON|BTN_RIGHT);
			}else
				return BTN_RIGHT;

		}else if(Frogs[i].x > (SCREEN_TILES_H*TILE_WIDTH)-18){
    c27e:	ef 3d       	cpi	r30, 0xDF	; 223
    c280:	a8 f0       	brcs	.+42     	; 0xc2ac <AIJump+0x320>
			if(!(Frogs[i].State & FACING)){//we can jump, let go of jump if we were holding it, then press it again next frame
    c282:	81 14       	cp	r8, r1
    c284:	91 04       	cpc	r9, r1
    c286:	a1 04       	cpc	r10, r1
    c288:	b1 04       	cpc	r11, r1
    c28a:	19 f0       	breq	.+6      	; 0xc292 <AIJump+0x306>
    c28c:	20 e4       	ldi	r18, 0x40	; 64
    c28e:	30 e0       	ldi	r19, 0x00	; 0
    c290:	78 c0       	rjmp	.+240    	; 0xc382 <AIJump+0x3f6>
				if(OldJoyVal[i] & JUMP_BUTTON)
    c292:	00 0f       	add	r16, r16
    c294:	11 1f       	adc	r17, r17
    c296:	09 5e       	subi	r16, 0xE9	; 233
    c298:	1f 4e       	sbci	r17, 0xEF	; 239
    c29a:	f8 01       	movw	r30, r16
    c29c:	80 81       	ld	r24, Z
    c29e:	91 81       	ldd	r25, Z+1	; 0x01
    c2a0:	80 71       	andi	r24, 0x10	; 16
    c2a2:	91 70       	andi	r25, 0x01	; 1
    c2a4:	89 2b       	or	r24, r25
    c2a6:	09 f4       	brne	.+2      	; 0xc2aa <AIJump+0x31e>
    c2a8:	6a c0       	rjmp	.+212    	; 0xc37e <AIJump+0x3f2>
    c2aa:	60 c0       	rjmp	.+192    	; 0xc36c <AIJump+0x3e0>
				return BTN_LEFT;

		}
	}
	//see if we should stomp and we aren't over the middle water(otherwise bot frequently stomps there and never hits, slowing him down)
	if(!AIFliesInKillZone(i)){//nothing else to do this jump, might as well try attacking
    c2ac:	8b 81       	ldd	r24, Y+3	; 0x03
    c2ae:	1b de       	rcall	.-970    	; 0xbee6 <AIFliesInKillZone>
    c2b0:	88 23       	and	r24, r24
    c2b2:	09 f0       	breq	.+2      	; 0xc2b6 <AIJump+0x32a>
    c2b4:	57 c0       	rjmp	.+174    	; 0xc364 <AIJump+0x3d8>
		if((Frogs[i].x < MIDDLELEFT || Frogs[i].x > MIDDLERIGHT) && (prng() < 3 || (Frogs[i].State & (FALLING|DROPPING))) && (Frogs[i].y < (Frogs[!i].y-15)) && !(Frogs[!i].State & (SWIMMING|STUNNED))){//we are falling and the enemy is not in an immune state
    c2b6:	87 e1       	ldi	r24, 0x17	; 23
    c2b8:	90 e0       	ldi	r25, 0x00	; 0
    c2ba:	08 9f       	mul	r16, r24
    c2bc:	70 01       	movw	r14, r0
    c2be:	09 9f       	mul	r16, r25
    c2c0:	f0 0c       	add	r15, r0
    c2c2:	18 9f       	mul	r17, r24
    c2c4:	f0 0c       	add	r15, r0
    c2c6:	11 24       	eor	r1, r1
    c2c8:	27 ee       	ldi	r18, 0xE7	; 231
    c2ca:	3f e0       	ldi	r19, 0x0F	; 15
    c2cc:	e2 0e       	add	r14, r18
    c2ce:	f3 1e       	adc	r15, r19
    c2d0:	d7 01       	movw	r26, r14
    c2d2:	8c 91       	ld	r24, X
    c2d4:	8c 56       	subi	r24, 0x6C	; 108
    c2d6:	81 31       	cpi	r24, 0x11	; 17
    c2d8:	08 f4       	brcc	.+2      	; 0xc2dc <AIJump+0x350>
    c2da:	44 c0       	rjmp	.+136    	; 0xc364 <AIJump+0x3d8>
    c2dc:	8c dc       	rcall	.-1768   	; 0xbbf6 <prng>
    c2de:	03 97       	sbiw	r24, 0x03	; 3
    c2e0:	38 f0       	brcs	.+14     	; 0xc2f0 <AIJump+0x364>
    c2e2:	f7 01       	movw	r30, r14
    c2e4:	82 89       	ldd	r24, Z+18	; 0x12
    c2e6:	93 89       	ldd	r25, Z+19	; 0x13
    c2e8:	80 76       	andi	r24, 0x60	; 96
    c2ea:	90 70       	andi	r25, 0x00	; 0
    c2ec:	89 2b       	or	r24, r25
    c2ee:	d1 f1       	breq	.+116    	; 0xc364 <AIJump+0x3d8>
    c2f0:	87 e1       	ldi	r24, 0x17	; 23
    c2f2:	90 e0       	ldi	r25, 0x00	; 0
    c2f4:	08 9f       	mul	r16, r24
    c2f6:	b0 01       	movw	r22, r0
    c2f8:	09 9f       	mul	r16, r25
    c2fa:	70 0d       	add	r23, r0
    c2fc:	18 9f       	mul	r17, r24
    c2fe:	70 0d       	add	r23, r0
    c300:	11 24       	eor	r1, r1
    c302:	69 51       	subi	r22, 0x19	; 25
    c304:	70 4f       	sbci	r23, 0xF0	; 240
    c306:	db 01       	movw	r26, r22
    c308:	11 96       	adiw	r26, 0x01	; 1
    c30a:	2c 91       	ld	r18, X
    c30c:	11 97       	sbiw	r26, 0x01	; 1
    c30e:	30 e0       	ldi	r19, 0x00	; 0
    c310:	49 81       	ldd	r20, Y+1	; 0x01
    c312:	5a 81       	ldd	r21, Y+2	; 0x02
    c314:	48 9f       	mul	r20, r24
    c316:	f0 01       	movw	r30, r0
    c318:	49 9f       	mul	r20, r25
    c31a:	f0 0d       	add	r31, r0
    c31c:	58 9f       	mul	r21, r24
    c31e:	f0 0d       	add	r31, r0
    c320:	11 24       	eor	r1, r1
    c322:	e9 51       	subi	r30, 0x19	; 25
    c324:	f0 4f       	sbci	r31, 0xF0	; 240
    c326:	81 81       	ldd	r24, Z+1	; 0x01
    c328:	90 e0       	ldi	r25, 0x00	; 0
    c32a:	0f 97       	sbiw	r24, 0x0f	; 15
    c32c:	28 17       	cp	r18, r24
    c32e:	39 07       	cpc	r19, r25
    c330:	cc f4       	brge	.+50     	; 0xc364 <AIJump+0x3d8>
    c332:	82 89       	ldd	r24, Z+18	; 0x12
    c334:	93 89       	ldd	r25, Z+19	; 0x13
    c336:	80 78       	andi	r24, 0x80	; 128
    c338:	92 70       	andi	r25, 0x02	; 2
    c33a:	89 2b       	or	r24, r25
    c33c:	99 f4       	brne	.+38     	; 0xc364 <AIJump+0x3d8>
			if(Frogs[i].x > Frogs[!i].x){
    c33e:	9c 91       	ld	r25, X
    c340:	80 81       	ld	r24, Z
    c342:	49 2f       	mov	r20, r25
    c344:	50 e0       	ldi	r21, 0x00	; 0
    c346:	28 2f       	mov	r18, r24
    c348:	30 e0       	ldi	r19, 0x00	; 0
    c34a:	89 17       	cp	r24, r25
    c34c:	30 f4       	brcc	.+12     	; 0xc35a <AIJump+0x3ce>
				if(Frogs[i].x - Frogs[!i].x < 14)
    c34e:	42 1b       	sub	r20, r18
    c350:	53 0b       	sbc	r21, r19
    c352:	4e 30       	cpi	r20, 0x0E	; 14
    c354:	51 05       	cpc	r21, r1
    c356:	34 f4       	brge	.+12     	; 0xc364 <AIJump+0x3d8>
    c358:	0c c0       	rjmp	.+24     	; 0xc372 <AIJump+0x3e6>
					return BTN_DOWN;
			}else if(Frogs[!i].x - Frogs[i].x < 14)
    c35a:	24 1b       	sub	r18, r20
    c35c:	35 0b       	sbc	r19, r21
    c35e:	2e 30       	cpi	r18, 0x0E	; 14
    c360:	31 05       	cpc	r19, r1
    c362:	3c f0       	brlt	.+14     	; 0xc372 <AIJump+0x3e6>
		}
	}



	return JUMP_BUTTON|natural_direction;
    c364:	92 01       	movw	r18, r4
    c366:	20 61       	ori	r18, 0x10	; 16
    c368:	31 60       	ori	r19, 0x01	; 1
    c36a:	0b c0       	rjmp	.+22     	; 0xc382 <AIJump+0x3f6>
    c36c:	20 e0       	ldi	r18, 0x00	; 0
    c36e:	30 e0       	ldi	r19, 0x00	; 0
    c370:	08 c0       	rjmp	.+16     	; 0xc382 <AIJump+0x3f6>
    c372:	20 e2       	ldi	r18, 0x20	; 32
    c374:	30 e0       	ldi	r19, 0x00	; 0
    c376:	05 c0       	rjmp	.+10     	; 0xc382 <AIJump+0x3f6>
    c378:	20 e9       	ldi	r18, 0x90	; 144
    c37a:	31 e0       	ldi	r19, 0x01	; 1
    c37c:	02 c0       	rjmp	.+4      	; 0xc382 <AIJump+0x3f6>
    c37e:	20 e5       	ldi	r18, 0x50	; 80
    c380:	31 e0       	ldi	r19, 0x01	; 1
}
    c382:	c9 01       	movw	r24, r18
    c384:	27 96       	adiw	r28, 0x07	; 7
    c386:	e2 e1       	ldi	r30, 0x12	; 18
    c388:	0c 94 0e 77 	jmp	0xee1c	; 0xee1c <__epilogue_restores__>

0000c38c <AISit>:
		return 0;
}



uint16_t AISit(uint8_t i){
    c38c:	a0 e0       	ldi	r26, 0x00	; 0
    c38e:	b0 e0       	ldi	r27, 0x00	; 0
    c390:	ec ec       	ldi	r30, 0xCC	; 204
    c392:	f1 e6       	ldi	r31, 0x61	; 97
    c394:	0c 94 fb 76 	jmp	0xedf6	; 0xedf6 <__prologue_saves__+0x12>
    c398:	b8 2e       	mov	r11, r24
	Frogs[i].AITarget = 0;
    c39a:	e8 2e       	mov	r14, r24
    c39c:	ff 24       	eor	r15, r15
    c39e:	87 e1       	ldi	r24, 0x17	; 23
    c3a0:	90 e0       	ldi	r25, 0x00	; 0
    c3a2:	e8 9e       	mul	r14, r24
    c3a4:	f0 01       	movw	r30, r0
    c3a6:	e9 9e       	mul	r14, r25
    c3a8:	f0 0d       	add	r31, r0
    c3aa:	f8 9e       	mul	r15, r24
    c3ac:	f0 0d       	add	r31, r0
    c3ae:	11 24       	eor	r1, r1
    c3b0:	e9 51       	subi	r30, 0x19	; 25
    c3b2:	f0 4f       	sbci	r31, 0xF0	; 240
    c3b4:	11 8a       	std	Z+17, r1	; 0x11
	uint16_t rnd = (prng()%161);
    c3b6:	1f dc       	rcall	.-1986   	; 0xbbf6 <prng>
    c3b8:	ec 01       	movw	r28, r24
	if(AIFlyInJumpRange(i) || AIFliesInKillZone(i)>2){//2){
    c3ba:	8b 2d       	mov	r24, r11
    c3bc:	49 dd       	rcall	.-1390   	; 0xbe50 <AIFlyInJumpRange>
    c3be:	88 23       	and	r24, r24
    c3c0:	21 f4       	brne	.+8      	; 0xc3ca <AISit+0x3e>
    c3c2:	8b 2d       	mov	r24, r11
    c3c4:	90 dd       	rcall	.-1248   	; 0xbee6 <AIFliesInKillZone>
    c3c6:	83 30       	cpi	r24, 0x03	; 3
    c3c8:	68 f0       	brcs	.+26     	; 0xc3e4 <AISit+0x58>
			Frogs[i].AIState	= AI_JUMP;
    c3ca:	87 e1       	ldi	r24, 0x17	; 23
    c3cc:	90 e0       	ldi	r25, 0x00	; 0
    c3ce:	e8 9e       	mul	r14, r24
    c3d0:	f0 01       	movw	r30, r0
    c3d2:	e9 9e       	mul	r14, r25
    c3d4:	f0 0d       	add	r31, r0
    c3d6:	f8 9e       	mul	r15, r24
    c3d8:	f0 0d       	add	r31, r0
    c3da:	11 24       	eor	r1, r1
    c3dc:	e9 51       	subi	r30, 0x19	; 25
    c3de:	f0 4f       	sbci	r31, 0xF0	; 240
    c3e0:	82 e0       	ldi	r24, 0x02	; 2
    c3e2:	92 c0       	rjmp	.+292    	; 0xc508 <AISit+0x17c>



uint16_t AISit(uint8_t i){
	Frogs[i].AITarget = 0;
	uint16_t rnd = (prng()%161);
    c3e4:	ce 01       	movw	r24, r28
    c3e6:	61 ea       	ldi	r22, 0xA1	; 161
    c3e8:	70 e0       	ldi	r23, 0x00	; 0
    c3ea:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    c3ee:	8c 01       	movw	r16, r24
	if(AIFlyInJumpRange(i) || AIFliesInKillZone(i)>2){//2){
			Frogs[i].AIState	= AI_JUMP;
			return 0;//JUMP_BUTTON;
	}
	
	if((Frogs[!i].State & STOMPING) && ((Frogs[i].x > Frogs[!i].x && Frogs[i].x-Frogs[!i].x < 16)||(Frogs[!i].x > Frogs[i].x && Frogs[!i].x-Frogs[i].x < 16))){//are we in danger of being stomped?
    c3f0:	cc 24       	eor	r12, r12
    c3f2:	dd 24       	eor	r13, r13
    c3f4:	bb 20       	and	r11, r11
    c3f6:	19 f4       	brne	.+6      	; 0xc3fe <AISit+0x72>
    c3f8:	21 e0       	ldi	r18, 0x01	; 1
    c3fa:	c2 2e       	mov	r12, r18
    c3fc:	d1 2c       	mov	r13, r1
    c3fe:	27 e1       	ldi	r18, 0x17	; 23
    c400:	30 e0       	ldi	r19, 0x00	; 0
    c402:	c2 9e       	mul	r12, r18
    c404:	e0 01       	movw	r28, r0
    c406:	c3 9e       	mul	r12, r19
    c408:	d0 0d       	add	r29, r0
    c40a:	d2 9e       	mul	r13, r18
    c40c:	d0 0d       	add	r29, r0
    c40e:	11 24       	eor	r1, r1
    c410:	c9 51       	subi	r28, 0x19	; 25
    c412:	d0 4f       	sbci	r29, 0xF0	; 240
    c414:	8a 89       	ldd	r24, Y+18	; 0x12
    c416:	9b 89       	ldd	r25, Y+19	; 0x13
    c418:	a0 e0       	ldi	r26, 0x00	; 0
    c41a:	b0 e0       	ldi	r27, 0x00	; 0
    c41c:	92 ff       	sbrs	r25, 2
    c41e:	65 c0       	rjmp	.+202    	; 0xc4ea <AISit+0x15e>
    c420:	e2 9e       	mul	r14, r18
    c422:	f0 01       	movw	r30, r0
    c424:	e3 9e       	mul	r14, r19
    c426:	f0 0d       	add	r31, r0
    c428:	f2 9e       	mul	r15, r18
    c42a:	f0 0d       	add	r31, r0
    c42c:	11 24       	eor	r1, r1
    c42e:	e9 51       	subi	r30, 0x19	; 25
    c430:	f0 4f       	sbci	r31, 0xF0	; 240
    c432:	e0 81       	ld	r30, Z
    c434:	28 81       	ld	r18, Y
    c436:	2e 17       	cp	r18, r30
    c438:	30 f4       	brcc	.+12     	; 0xc446 <AISit+0xba>
    c43a:	8e 2f       	mov	r24, r30
    c43c:	90 e0       	ldi	r25, 0x00	; 0
    c43e:	82 1b       	sub	r24, r18
    c440:	91 09       	sbc	r25, r1
    c442:	40 97       	sbiw	r24, 0x10	; 16
    c444:	54 f0       	brlt	.+20     	; 0xc45a <AISit+0xce>
    c446:	e2 17       	cp	r30, r18
    c448:	08 f0       	brcs	.+2      	; 0xc44c <AISit+0xc0>
    c44a:	4f c0       	rjmp	.+158    	; 0xc4ea <AISit+0x15e>
    c44c:	82 2f       	mov	r24, r18
    c44e:	90 e0       	ldi	r25, 0x00	; 0
    c450:	8e 1b       	sub	r24, r30
    c452:	91 09       	sbc	r25, r1
    c454:	40 97       	sbiw	r24, 0x10	; 16
    c456:	0c f0       	brlt	.+2      	; 0xc45a <AISit+0xce>
    c458:	48 c0       	rjmp	.+144    	; 0xc4ea <AISit+0x15e>
	//FFTriggerFx(1);
		//Frogs[i].AIState = AI_EVADE;
		uint8_t evade_chance = prng()&31;
    c45a:	cd db       	rcall	.-2150   	; 0xbbf6 <prng>
    c45c:	8f 71       	andi	r24, 0x1F	; 31
		if(evade_chance == 5){//we will just jump out of the way, might take 1 second to react
    c45e:	85 30       	cpi	r24, 0x05	; 5
    c460:	21 f5       	brne	.+72     	; 0xc4aa <AISit+0x11e>
			if(rnd < 37)//most of the time do a full fledged jump, sometimes just a very quick jump to evade quickly
    c462:	05 32       	cpi	r16, 0x25	; 37
    c464:	11 05       	cpc	r17, r1
    c466:	68 f4       	brcc	.+26     	; 0xc482 <AISit+0xf6>
				Frogs[i].AIState = AI_JUMP;
    c468:	87 e1       	ldi	r24, 0x17	; 23
    c46a:	90 e0       	ldi	r25, 0x00	; 0
    c46c:	e8 9e       	mul	r14, r24
    c46e:	f0 01       	movw	r30, r0
    c470:	e9 9e       	mul	r14, r25
    c472:	f0 0d       	add	r31, r0
    c474:	f8 9e       	mul	r15, r24
    c476:	f0 0d       	add	r31, r0
    c478:	11 24       	eor	r1, r1
    c47a:	e9 51       	subi	r30, 0x19	; 25
    c47c:	f0 4f       	sbci	r31, 0xF0	; 240
    c47e:	82 e0       	ldi	r24, 0x02	; 2
    c480:	80 8b       	std	Z+16, r24	; 0x10
			if(Frogs[i].State & FACING)
    c482:	87 e1       	ldi	r24, 0x17	; 23
    c484:	90 e0       	ldi	r25, 0x00	; 0
    c486:	e8 9e       	mul	r14, r24
    c488:	f0 01       	movw	r30, r0
    c48a:	e9 9e       	mul	r14, r25
    c48c:	f0 0d       	add	r31, r0
    c48e:	f8 9e       	mul	r15, r24
    c490:	f0 0d       	add	r31, r0
    c492:	11 24       	eor	r1, r1
    c494:	e9 51       	subi	r30, 0x19	; 25
    c496:	f0 4f       	sbci	r31, 0xF0	; 240
    c498:	82 89       	ldd	r24, Z+18	; 0x12
    c49a:	82 fd       	sbrc	r24, 2
    c49c:	03 c0       	rjmp	.+6      	; 0xc4a4 <AISit+0x118>
    c49e:	20 e5       	ldi	r18, 0x50	; 80
    c4a0:	31 e0       	ldi	r19, 0x01	; 1
    c4a2:	35 c0       	rjmp	.+106    	; 0xc50e <AISit+0x182>
    c4a4:	20 e9       	ldi	r18, 0x90	; 144
    c4a6:	31 e0       	ldi	r19, 0x01	; 1
    c4a8:	32 c0       	rjmp	.+100    	; 0xc50e <AISit+0x182>
				return (JUMP_BUTTON|BTN_RIGHT);
			else
				return (JUMP_BUTTON|BTN_LEFT);
		}else if(evade_chance < 6){//we will hop out of the way(totally inferior to just jumping, but for more life like actions)
    c4aa:	86 30       	cpi	r24, 0x06	; 6
    c4ac:	70 f5       	brcc	.+92     	; 0xc50a <AISit+0x17e>
			if(Frogs[!i].x < Frogs[i].x)//quickest to go right
    c4ae:	87 e1       	ldi	r24, 0x17	; 23
    c4b0:	90 e0       	ldi	r25, 0x00	; 0
    c4b2:	c8 9e       	mul	r12, r24
    c4b4:	d0 01       	movw	r26, r0
    c4b6:	c9 9e       	mul	r12, r25
    c4b8:	b0 0d       	add	r27, r0
    c4ba:	d8 9e       	mul	r13, r24
    c4bc:	b0 0d       	add	r27, r0
    c4be:	11 24       	eor	r1, r1
    c4c0:	a9 51       	subi	r26, 0x19	; 25
    c4c2:	b0 4f       	sbci	r27, 0xF0	; 240
    c4c4:	e8 9e       	mul	r14, r24
    c4c6:	f0 01       	movw	r30, r0
    c4c8:	e9 9e       	mul	r14, r25
    c4ca:	f0 0d       	add	r31, r0
    c4cc:	f8 9e       	mul	r15, r24
    c4ce:	f0 0d       	add	r31, r0
    c4d0:	11 24       	eor	r1, r1
    c4d2:	e9 51       	subi	r30, 0x19	; 25
    c4d4:	f0 4f       	sbci	r31, 0xF0	; 240
    c4d6:	9c 91       	ld	r25, X
    c4d8:	80 81       	ld	r24, Z
    c4da:	98 17       	cp	r25, r24
    c4dc:	18 f0       	brcs	.+6      	; 0xc4e4 <AISit+0x158>
    c4de:	20 e4       	ldi	r18, 0x40	; 64
    c4e0:	30 e0       	ldi	r19, 0x00	; 0
    c4e2:	15 c0       	rjmp	.+42     	; 0xc50e <AISit+0x182>
    c4e4:	20 e8       	ldi	r18, 0x80	; 128
    c4e6:	30 e0       	ldi	r19, 0x00	; 0
    c4e8:	12 c0       	rjmp	.+36     	; 0xc50e <AISit+0x182>
				return BTN_RIGHT;
			else
				return BTN_LEFT;
		}
	}else if(rnd==93)
    c4ea:	0d 35       	cpi	r16, 0x5D	; 93
    c4ec:	11 05       	cpc	r17, r1
    c4ee:	69 f4       	brne	.+26     	; 0xc50a <AISit+0x17e>
		Frogs[i].AIState = AI_CENTER;
    c4f0:	87 e1       	ldi	r24, 0x17	; 23
    c4f2:	90 e0       	ldi	r25, 0x00	; 0
    c4f4:	e8 9e       	mul	r14, r24
    c4f6:	f0 01       	movw	r30, r0
    c4f8:	e9 9e       	mul	r14, r25
    c4fa:	f0 0d       	add	r31, r0
    c4fc:	f8 9e       	mul	r15, r24
    c4fe:	f0 0d       	add	r31, r0
    c500:	11 24       	eor	r1, r1
    c502:	e9 51       	subi	r30, 0x19	; 25
    c504:	f0 4f       	sbci	r31, 0xF0	; 240
    c506:	84 e0       	ldi	r24, 0x04	; 4
    c508:	80 8b       	std	Z+16, r24	; 0x10
    c50a:	20 e0       	ldi	r18, 0x00	; 0
    c50c:	30 e0       	ldi	r19, 0x00	; 0
	return 0;
}
    c50e:	c9 01       	movw	r24, r18
    c510:	cd b7       	in	r28, 0x3d	; 61
    c512:	de b7       	in	r29, 0x3e	; 62
    c514:	e9 e0       	ldi	r30, 0x09	; 9
    c516:	0c 94 17 77 	jmp	0xee2e	; 0xee2e <__epilogue_restores__+0x12>

0000c51a <AICheckFacing>:
//	DrawNumber(NumFlies,3,6,1);
	return NumFlies;
}

uint16_t AICheckFacing(uint8_t i){
	if(!(Frogs[i].State & FACING) && Frogs[i].x < SCREENLEFT+(SCREENRIGHT - SCREENLEFT) / 2 && Frogs[i].x < LEFTEDGE +(MIDDLELEFT - LEFTEDGE) / 2)
    c51a:	90 e0       	ldi	r25, 0x00	; 0
    c51c:	27 e1       	ldi	r18, 0x17	; 23
    c51e:	30 e0       	ldi	r19, 0x00	; 0
    c520:	82 9f       	mul	r24, r18
    c522:	f0 01       	movw	r30, r0
    c524:	83 9f       	mul	r24, r19
    c526:	f0 0d       	add	r31, r0
    c528:	92 9f       	mul	r25, r18
    c52a:	f0 0d       	add	r31, r0
    c52c:	11 24       	eor	r1, r1
    c52e:	e9 51       	subi	r30, 0x19	; 25
    c530:	f0 4f       	sbci	r31, 0xF0	; 240
    c532:	82 89       	ldd	r24, Z+18	; 0x12
    c534:	e0 81       	ld	r30, Z
    c536:	82 fd       	sbrc	r24, 2
    c538:	07 c0       	rjmp	.+14     	; 0xc548 <AICheckFacing+0x2e>
    c53a:	e7 37       	cpi	r30, 0x77	; 119
    c53c:	60 f4       	brcc	.+24     	; 0xc556 <AICheckFacing+0x3c>
    c53e:	e3 34       	cpi	r30, 0x43	; 67
    c540:	50 f4       	brcc	.+20     	; 0xc556 <AICheckFacing+0x3c>
    c542:	20 e8       	ldi	r18, 0x80	; 128
    c544:	30 e0       	ldi	r19, 0x00	; 0
    c546:	09 c0       	rjmp	.+18     	; 0xc55a <AICheckFacing+0x40>
		return BTN_RIGHT;
	else if((Frogs[i].State & FACING) && Frogs[i].x > SCREENLEFT +(SCREENRIGHT - SCREENLEFT) / 2 && Frogs[i].x > MIDDLERIGHT +(RIGHTEDGE - MIDDLERIGHT) / 2)
    c548:	e8 37       	cpi	r30, 0x78	; 120
    c54a:	28 f0       	brcs	.+10     	; 0xc556 <AICheckFacing+0x3c>
    c54c:	e5 3a       	cpi	r30, 0xA5	; 165
    c54e:	18 f0       	brcs	.+6      	; 0xc556 <AICheckFacing+0x3c>
    c550:	20 e4       	ldi	r18, 0x40	; 64
    c552:	30 e0       	ldi	r19, 0x00	; 0
    c554:	02 c0       	rjmp	.+4      	; 0xc55a <AICheckFacing+0x40>
    c556:	20 e0       	ldi	r18, 0x00	; 0
    c558:	30 e0       	ldi	r19, 0x00	; 0
		return BTN_LEFT;
	return 0;
}
    c55a:	c9 01       	movw	r24, r18
    c55c:	08 95       	ret

0000c55e <AICenter>:


	return JUMP_BUTTON|natural_direction;
}

uint16_t AICenter(uint8_t i){
    c55e:	ef 92       	push	r14
    c560:	ff 92       	push	r15
    c562:	0f 93       	push	r16
    c564:	1f 93       	push	r17
    c566:	cf 93       	push	r28
    c568:	df 93       	push	r29
    c56a:	08 2f       	mov	r16, r24
//	DrawNumber(Frogs[i].AITarget,8,2,1);
	if(!Frogs[i].AITarget){//find a place we want to get to
    c56c:	e8 2e       	mov	r14, r24
    c56e:	ff 24       	eor	r15, r15
    c570:	87 e1       	ldi	r24, 0x17	; 23
    c572:	90 e0       	ldi	r25, 0x00	; 0
    c574:	e8 9e       	mul	r14, r24
    c576:	e0 01       	movw	r28, r0
    c578:	e9 9e       	mul	r14, r25
    c57a:	d0 0d       	add	r29, r0
    c57c:	f8 9e       	mul	r15, r24
    c57e:	d0 0d       	add	r29, r0
    c580:	11 24       	eor	r1, r1
    c582:	c9 51       	subi	r28, 0x19	; 25
    c584:	d0 4f       	sbci	r29, 0xF0	; 240
    c586:	89 89       	ldd	r24, Y+17	; 0x11
    c588:	88 23       	and	r24, r24
    c58a:	91 f4       	brne	.+36     	; 0xc5b0 <AICenter+0x52>
		if(Frogs[i].x < (SCREEN_TILES_H*TILE_WIDTH)/2)//we are on left side
    c58c:	88 81       	ld	r24, Y
    c58e:	88 37       	cpi	r24, 0x78	; 120
    c590:	38 f4       	brcc	.+14     	; 0xc5a0 <AICenter+0x42>
			Frogs[i].AITarget = (int16_t)(FROG1X-(prng()&7))+(prng()&31);
    c592:	31 db       	rcall	.-2462   	; 0xbbf6 <prng>
    c594:	18 2f       	mov	r17, r24
    c596:	2f db       	rcall	.-2466   	; 0xbbf6 <prng>
    c598:	1f 71       	andi	r17, 0x1F	; 31
    c59a:	18 5d       	subi	r17, 0xD8	; 216
    c59c:	87 70       	andi	r24, 0x07	; 7
    c59e:	06 c0       	rjmp	.+12     	; 0xc5ac <AICenter+0x4e>
		else
			Frogs[i].AITarget = (int16_t)(FROG2X+(prng()&7))-(prng()&31);
    c5a0:	2a db       	rcall	.-2476   	; 0xbbf6 <prng>
    c5a2:	18 2f       	mov	r17, r24
    c5a4:	28 db       	rcall	.-2480   	; 0xbbf6 <prng>
    c5a6:	17 70       	andi	r17, 0x07	; 7
    c5a8:	10 54       	subi	r17, 0x40	; 64
    c5aa:	8f 71       	andi	r24, 0x1F	; 31
    c5ac:	18 1b       	sub	r17, r24
    c5ae:	19 8b       	std	Y+17, r17	; 0x11

	}

	if((Frogs[i].State & HOPPING))
    c5b0:	87 e1       	ldi	r24, 0x17	; 23
    c5b2:	90 e0       	ldi	r25, 0x00	; 0
    c5b4:	e8 9e       	mul	r14, r24
    c5b6:	e0 01       	movw	r28, r0
    c5b8:	e9 9e       	mul	r14, r25
    c5ba:	d0 0d       	add	r29, r0
    c5bc:	f8 9e       	mul	r15, r24
    c5be:	d0 0d       	add	r29, r0
    c5c0:	11 24       	eor	r1, r1
    c5c2:	c9 51       	subi	r28, 0x19	; 25
    c5c4:	d0 4f       	sbci	r29, 0xF0	; 240
    c5c6:	8a 89       	ldd	r24, Y+18	; 0x12
    c5c8:	83 fd       	sbrc	r24, 3
    c5ca:	95 c0       	rjmp	.+298    	; 0xc6f6 <AICenter+0x198>
		return 0;
	else if(AIFlyInJumpRange(i) > 1){
    c5cc:	80 2f       	mov	r24, r16
    c5ce:	40 dc       	rcall	.-1920   	; 0xbe50 <AIFlyInJumpRange>
    c5d0:	82 30       	cpi	r24, 0x02	; 2
    c5d2:	20 f0       	brcs	.+8      	; 0xc5dc <AICenter+0x7e>
		Frogs[i].AIState	= AI_JUMP;
    c5d4:	82 e0       	ldi	r24, 0x02	; 2
    c5d6:	88 8b       	std	Y+16, r24	; 0x10
		Frogs[i].AITarget = 0;
    c5d8:	19 8a       	std	Y+17, r1	; 0x11
    c5da:	8d c0       	rjmp	.+282    	; 0xc6f6 <AICenter+0x198>
		return 0;//JUMP_BUTTON;
	}else{
		uint8_t dist = prng()&5;
    c5dc:	0c db       	rcall	.-2536   	; 0xbbf6 <prng>
    c5de:	85 70       	andi	r24, 0x05	; 5
		uint8_t t;
		if((Frogs[i].AITarget < Frogs[i].x) && ((t = Frogs[i].x-Frogs[i].AITarget) > dist)){//need to move left
    c5e0:	29 89       	ldd	r18, Y+17	; 0x11
    c5e2:	98 81       	ld	r25, Y
    c5e4:	29 17       	cp	r18, r25
    c5e6:	b0 f5       	brcc	.+108    	; 0xc654 <AICenter+0xf6>
    c5e8:	39 2f       	mov	r19, r25
    c5ea:	32 1b       	sub	r19, r18
    c5ec:	83 17       	cp	r24, r19
    c5ee:	90 f5       	brcc	.+100    	; 0xc654 <AICenter+0xf6>
			if(t > 16){//faster to jump?
    c5f0:	31 31       	cpi	r19, 0x11	; 17
    c5f2:	08 f4       	brcc	.+2      	; 0xc5f6 <AICenter+0x98>
    c5f4:	83 c0       	rjmp	.+262    	; 0xc6fc <AICenter+0x19e>
				if((OldJoyVal[i] & JUMP_BUTTON) && Frogs[i].y < FROGY-34)
    c5f6:	f7 01       	movw	r30, r14
    c5f8:	ee 0f       	add	r30, r30
    c5fa:	ff 1f       	adc	r31, r31
    c5fc:	e9 5e       	subi	r30, 0xE9	; 233
    c5fe:	ff 4e       	sbci	r31, 0xEF	; 239
    c600:	80 81       	ld	r24, Z
    c602:	91 81       	ldd	r25, Z+1	; 0x01
    c604:	80 71       	andi	r24, 0x10	; 16
    c606:	91 70       	andi	r25, 0x01	; 1
    c608:	89 2b       	or	r24, r25
    c60a:	21 f0       	breq	.+8      	; 0xc614 <AICenter+0xb6>
    c60c:	89 81       	ldd	r24, Y+1	; 0x01
    c60e:	8a 38       	cpi	r24, 0x8A	; 138
    c610:	08 f4       	brcc	.+2      	; 0xc614 <AICenter+0xb6>
    c612:	71 c0       	rjmp	.+226    	; 0xc6f6 <AICenter+0x198>
					return 0;//let go of jump so we can jump next tick
				else if(!(Frogs[i].State & (FALLING|JUMPING)) && !(Frogs[i].State & FACING))//on ground and facing right direction?
    c614:	87 e1       	ldi	r24, 0x17	; 23
    c616:	90 e0       	ldi	r25, 0x00	; 0
    c618:	e8 9e       	mul	r14, r24
    c61a:	f0 01       	movw	r30, r0
    c61c:	e9 9e       	mul	r14, r25
    c61e:	f0 0d       	add	r31, r0
    c620:	f8 9e       	mul	r15, r24
    c622:	f0 0d       	add	r31, r0
    c624:	11 24       	eor	r1, r1
    c626:	e9 51       	subi	r30, 0x19	; 25
    c628:	f0 4f       	sbci	r31, 0xF0	; 240
    c62a:	82 89       	ldd	r24, Z+18	; 0x12
    c62c:	93 89       	ldd	r25, Z+19	; 0x13
    c62e:	9c 01       	movw	r18, r24
    c630:	40 e0       	ldi	r20, 0x00	; 0
    c632:	50 e0       	ldi	r21, 0x00	; 0
    c634:	da 01       	movw	r26, r20
    c636:	c9 01       	movw	r24, r18
    c638:	80 75       	andi	r24, 0x50	; 80
    c63a:	90 70       	andi	r25, 0x00	; 0
    c63c:	a0 70       	andi	r26, 0x00	; 0
    c63e:	b0 70       	andi	r27, 0x00	; 0
    c640:	00 97       	sbiw	r24, 0x00	; 0
    c642:	a1 05       	cpc	r26, r1
    c644:	b1 05       	cpc	r27, r1
    c646:	09 f0       	breq	.+2      	; 0xc64a <AICenter+0xec>
    c648:	59 c0       	rjmp	.+178    	; 0xc6fc <AICenter+0x19e>
    c64a:	22 fd       	sbrc	r18, 2
    c64c:	57 c0       	rjmp	.+174    	; 0xc6fc <AICenter+0x19e>
    c64e:	20 e5       	ldi	r18, 0x50	; 80
    c650:	31 e0       	ldi	r19, 0x01	; 1
    c652:	59 c0       	rjmp	.+178    	; 0xc706 <AICenter+0x1a8>
					return (JUMP_BUTTON|BTN_LEFT);
				else
					return BTN_LEFT;
			}else
				return BTN_LEFT;
		}else if((Frogs[i].AITarget > Frogs[i].x) && ((t = Frogs[i].AITarget-Frogs[i].x) > dist)){//need to move right
    c654:	92 17       	cp	r25, r18
    c656:	f0 f5       	brcc	.+124    	; 0xc6d4 <AICenter+0x176>
    c658:	29 1b       	sub	r18, r25
    c65a:	82 17       	cp	r24, r18
    c65c:	d8 f5       	brcc	.+118    	; 0xc6d4 <AICenter+0x176>
			if(t > 16){//faster to jump?
    c65e:	21 31       	cpi	r18, 0x11	; 17
    c660:	08 f4       	brcc	.+2      	; 0xc664 <AICenter+0x106>
    c662:	4f c0       	rjmp	.+158    	; 0xc702 <AICenter+0x1a4>
				if(OldJoyVal[i] & JUMP_BUTTON && Frogs[i].y < FROGY-14)
    c664:	f7 01       	movw	r30, r14
    c666:	ee 0f       	add	r30, r30
    c668:	ff 1f       	adc	r31, r31
    c66a:	e9 5e       	subi	r30, 0xE9	; 233
    c66c:	ff 4e       	sbci	r31, 0xEF	; 239
    c66e:	80 81       	ld	r24, Z
    c670:	91 81       	ldd	r25, Z+1	; 0x01
    c672:	80 71       	andi	r24, 0x10	; 16
    c674:	91 70       	andi	r25, 0x01	; 1
    c676:	89 2b       	or	r24, r25
    c678:	71 f0       	breq	.+28     	; 0xc696 <AICenter+0x138>
    c67a:	87 e1       	ldi	r24, 0x17	; 23
    c67c:	90 e0       	ldi	r25, 0x00	; 0
    c67e:	e8 9e       	mul	r14, r24
    c680:	f0 01       	movw	r30, r0
    c682:	e9 9e       	mul	r14, r25
    c684:	f0 0d       	add	r31, r0
    c686:	f8 9e       	mul	r15, r24
    c688:	f0 0d       	add	r31, r0
    c68a:	11 24       	eor	r1, r1
    c68c:	e9 51       	subi	r30, 0x19	; 25
    c68e:	f0 4f       	sbci	r31, 0xF0	; 240
    c690:	81 81       	ldd	r24, Z+1	; 0x01
    c692:	8e 39       	cpi	r24, 0x9E	; 158
    c694:	80 f1       	brcs	.+96     	; 0xc6f6 <AICenter+0x198>
					return 0;//let go of jump so we can jump next tick
				if(!(Frogs[i].State & (FALLING|JUMPING)) && (Frogs[i].State & FACING))//on ground and facing right direction?
    c696:	87 e1       	ldi	r24, 0x17	; 23
    c698:	90 e0       	ldi	r25, 0x00	; 0
    c69a:	e8 9e       	mul	r14, r24
    c69c:	f0 01       	movw	r30, r0
    c69e:	e9 9e       	mul	r14, r25
    c6a0:	f0 0d       	add	r31, r0
    c6a2:	f8 9e       	mul	r15, r24
    c6a4:	f0 0d       	add	r31, r0
    c6a6:	11 24       	eor	r1, r1
    c6a8:	e9 51       	subi	r30, 0x19	; 25
    c6aa:	f0 4f       	sbci	r31, 0xF0	; 240
    c6ac:	82 89       	ldd	r24, Z+18	; 0x12
    c6ae:	93 89       	ldd	r25, Z+19	; 0x13
    c6b0:	9c 01       	movw	r18, r24
    c6b2:	40 e0       	ldi	r20, 0x00	; 0
    c6b4:	50 e0       	ldi	r21, 0x00	; 0
    c6b6:	da 01       	movw	r26, r20
    c6b8:	c9 01       	movw	r24, r18
    c6ba:	80 75       	andi	r24, 0x50	; 80
    c6bc:	90 70       	andi	r25, 0x00	; 0
    c6be:	a0 70       	andi	r26, 0x00	; 0
    c6c0:	b0 70       	andi	r27, 0x00	; 0
    c6c2:	00 97       	sbiw	r24, 0x00	; 0
    c6c4:	a1 05       	cpc	r26, r1
    c6c6:	b1 05       	cpc	r27, r1
    c6c8:	e1 f4       	brne	.+56     	; 0xc702 <AICenter+0x1a4>
    c6ca:	22 ff       	sbrs	r18, 2
    c6cc:	1a c0       	rjmp	.+52     	; 0xc702 <AICenter+0x1a4>
    c6ce:	20 e9       	ldi	r18, 0x90	; 144
    c6d0:	31 e0       	ldi	r19, 0x01	; 1
    c6d2:	19 c0       	rjmp	.+50     	; 0xc706 <AICenter+0x1a8>
					return BTN_RIGHT;
			}else
				return BTN_RIGHT;
		}
	}
	Frogs[i].AIState	= AI_SIT;
    c6d4:	87 e1       	ldi	r24, 0x17	; 23
    c6d6:	90 e0       	ldi	r25, 0x00	; 0
    c6d8:	e8 9e       	mul	r14, r24
    c6da:	f0 01       	movw	r30, r0
    c6dc:	e9 9e       	mul	r14, r25
    c6de:	f0 0d       	add	r31, r0
    c6e0:	f8 9e       	mul	r15, r24
    c6e2:	f0 0d       	add	r31, r0
    c6e4:	11 24       	eor	r1, r1
    c6e6:	e9 51       	subi	r30, 0x19	; 25
    c6e8:	f0 4f       	sbci	r31, 0xF0	; 240
    c6ea:	10 8a       	std	Z+16, r1	; 0x10
	Frogs[i].AITarget = 0;
    c6ec:	11 8a       	std	Z+17, r1	; 0x11
	return AICheckFacing(i);
    c6ee:	80 2f       	mov	r24, r16
    c6f0:	14 df       	rcall	.-472    	; 0xc51a <AICheckFacing>
    c6f2:	9c 01       	movw	r18, r24
    c6f4:	08 c0       	rjmp	.+16     	; 0xc706 <AICenter+0x1a8>
    c6f6:	20 e0       	ldi	r18, 0x00	; 0
    c6f8:	30 e0       	ldi	r19, 0x00	; 0
    c6fa:	05 c0       	rjmp	.+10     	; 0xc706 <AICenter+0x1a8>
    c6fc:	20 e4       	ldi	r18, 0x40	; 64
    c6fe:	30 e0       	ldi	r19, 0x00	; 0
    c700:	02 c0       	rjmp	.+4      	; 0xc706 <AICenter+0x1a8>
    c702:	20 e8       	ldi	r18, 0x80	; 128
    c704:	30 e0       	ldi	r19, 0x00	; 0
}
    c706:	c9 01       	movw	r24, r18
    c708:	cd b7       	in	r28, 0x3d	; 61
    c70a:	de b7       	in	r29, 0x3e	; 62
    c70c:	e6 e0       	ldi	r30, 0x06	; 6
    c70e:	0c 94 1a 77 	jmp	0xee34	; 0xee34 <__epilogue_restores__+0x18>

0000c712 <ProcessAI>:
uint16_t ProcessAI(uint8_t i){//return 0;
    c712:	48 2f       	mov	r20, r24

//DrawNumber(Frogs[i].AIState,4,0,1);
//DrawNumber(Frogs[i].State,4,2,1);
//DrawNumber(JoyVal[i],4,4,1);
//	DrawNumber(0,8,2,1);	DrawNumber(0,7,2,1);
	switch (Frogs[i].AIState){
    c714:	28 2f       	mov	r18, r24
    c716:	30 e0       	ldi	r19, 0x00	; 0
    c718:	87 e1       	ldi	r24, 0x17	; 23
    c71a:	90 e0       	ldi	r25, 0x00	; 0
    c71c:	28 9f       	mul	r18, r24
    c71e:	f0 01       	movw	r30, r0
    c720:	29 9f       	mul	r18, r25
    c722:	f0 0d       	add	r31, r0
    c724:	38 9f       	mul	r19, r24
    c726:	f0 0d       	add	r31, r0
    c728:	11 24       	eor	r1, r1
    c72a:	e9 51       	subi	r30, 0x19	; 25
    c72c:	f0 4f       	sbci	r31, 0xF0	; 240
    c72e:	80 89       	ldd	r24, Z+16	; 0x10
    c730:	84 30       	cpi	r24, 0x04	; 4
    c732:	b9 f0       	breq	.+46     	; 0xc762 <ProcessAI+0x50>
    c734:	85 30       	cpi	r24, 0x05	; 5
    c736:	28 f4       	brcc	.+10     	; 0xc742 <ProcessAI+0x30>
    c738:	88 23       	and	r24, r24
    c73a:	69 f0       	breq	.+26     	; 0xc756 <ProcessAI+0x44>
    c73c:	82 30       	cpi	r24, 0x02	; 2
    c73e:	29 f4       	brne	.+10     	; 0xc74a <ProcessAI+0x38>
    c740:	0d c0       	rjmp	.+26     	; 0xc75c <ProcessAI+0x4a>
    c742:	88 30       	cpi	r24, 0x08	; 8
    c744:	89 f0       	breq	.+34     	; 0xc768 <ProcessAI+0x56>
    c746:	80 34       	cpi	r24, 0x40	; 64
    c748:	19 f0       	breq	.+6      	; 0xc750 <ProcessAI+0x3e>
    c74a:	20 e0       	ldi	r18, 0x00	; 0
    c74c:	30 e0       	ldi	r19, 0x00	; 0
    c74e:	0f c0       	rjmp	.+30     	; 0xc76e <ProcessAI+0x5c>

		case AI_STUNNED:
			return AIStun(i);
    c750:	84 2f       	mov	r24, r20
    c752:	1b db       	rcall	.-2506   	; 0xbd8a <AIStun>
    c754:	0b c0       	rjmp	.+22     	; 0xc76c <ProcessAI+0x5a>
		case AI_SIT:
			return AISit(i);
    c756:	84 2f       	mov	r24, r20
    c758:	19 de       	rcall	.-974    	; 0xc38c <AISit>
    c75a:	08 c0       	rjmp	.+16     	; 0xc76c <ProcessAI+0x5a>
		case AI_JUMP:
			return AIJump(i);
    c75c:	84 2f       	mov	r24, r20
    c75e:	16 dc       	rcall	.-2004   	; 0xbf8c <AIJump>
    c760:	05 c0       	rjmp	.+10     	; 0xc76c <ProcessAI+0x5a>
		case AI_CENTER:
			return AICenter(i);
    c762:	84 2f       	mov	r24, r20
    c764:	fc de       	rcall	.-520    	; 0xc55e <AICenter>
    c766:	02 c0       	rjmp	.+4      	; 0xc76c <ProcessAI+0x5a>
		case AI_SWIM:
			return AISwim(i);
    c768:	84 2f       	mov	r24, r20
    c76a:	4a db       	rcall	.-2412   	; 0xbe00 <AISwim>
    c76c:	9c 01       	movw	r18, r24
//			return AILand(i);
//		case AI_EVADE:
//			return AIEvade(i);
	}
	return 0;
}
    c76e:	c9 01       	movw	r24, r18
    c770:	08 95       	ret

0000c772 <EEPromScore>:
#endif
	}

}

uint8_t EEPromScore(uint8_t slot, bool direction, uint8_t *dat, uint8_t mag){
    c772:	a0 e2       	ldi	r26, 0x20	; 32
    c774:	b0 e0       	ldi	r27, 0x00	; 0
    c776:	ef eb       	ldi	r30, 0xBF	; 191
    c778:	f3 e6       	ldi	r31, 0x63	; 99
    c77a:	0c 94 fb 76 	jmp	0xedf6	; 0xedf6 <__prologue_saves__+0x12>
    c77e:	d8 2e       	mov	r13, r24
    c780:	c6 2e       	mov	r12, r22
    c782:	8a 01       	movw	r16, r20
    c784:	b2 2e       	mov	r11, r18

	struct EepromBlockStruct ebs;
	ebs.id = FF_EEPROM_ID;
    c786:	86 e4       	ldi	r24, 0x46	; 70
    c788:	90 e0       	ldi	r25, 0x00	; 0
    c78a:	9a 83       	std	Y+2, r25	; 0x02
    c78c:	89 83       	std	Y+1, r24	; 0x01

	if(EepromReadBlock(ebs.id, &ebs)){//doesn't exist, try to make it
    c78e:	be 01       	movw	r22, r28
    c790:	6f 5f       	subi	r22, 0xFF	; 255
    c792:	7f 4f       	sbci	r23, 0xFF	; 255
    c794:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <EepromReadBlock>
    c798:	88 23       	and	r24, r24
    c79a:	79 f0       	breq	.+30     	; 0xc7ba <EEPromScore+0x48>
    c79c:	ef ec       	ldi	r30, 0xCF	; 207
    c79e:	fb e9       	ldi	r31, 0x9B	; 155
    c7a0:	de 01       	movw	r26, r28
    c7a2:	13 96       	adiw	r26, 0x03	; 3
		for(uint8_t i=0;i<30;i++)
			ebs.data[i] = pgm_read_byte(&EEPROMdefault[i]);
    c7a4:	84 91       	lpm	r24, Z+
    c7a6:	8d 93       	st	X+, r24
    c7a8:	31 96       	adiw	r30, 0x01	; 1

	struct EepromBlockStruct ebs;
	ebs.id = FF_EEPROM_ID;

	if(EepromReadBlock(ebs.id, &ebs)){//doesn't exist, try to make it
		for(uint8_t i=0;i<30;i++)
    c7aa:	8b e9       	ldi	r24, 0x9B	; 155
    c7ac:	ed 3e       	cpi	r30, 0xED	; 237
    c7ae:	f8 07       	cpc	r31, r24
    c7b0:	c9 f7       	brne	.-14     	; 0xc7a4 <EEPromScore+0x32>
			ebs.data[i] = pgm_read_byte(&EEPROMdefault[i]);

		EepromWriteBlock(&ebs);
    c7b2:	ce 01       	movw	r24, r28
    c7b4:	01 96       	adiw	r24, 0x01	; 1
    c7b6:	0e 94 47 53 	call	0xa68e	; 0xa68e <EepromWriteBlock>
	}
//return;
	if(EepromReadBlock(ebs.id, &ebs) == 0){//it exists
    c7ba:	89 81       	ldd	r24, Y+1	; 0x01
    c7bc:	9a 81       	ldd	r25, Y+2	; 0x02
    c7be:	7e 01       	movw	r14, r28
    c7c0:	08 94       	sec
    c7c2:	e1 1c       	adc	r14, r1
    c7c4:	f1 1c       	adc	r15, r1
    c7c6:	b7 01       	movw	r22, r14
    c7c8:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <EepromReadBlock>
    c7cc:	88 23       	and	r24, r24
    c7ce:	c1 f5       	brne	.+112    	; 0xc840 <EEPromScore+0xce>
		if(!direction){//read
    c7d0:	cc 20       	and	r12, r12
    c7d2:	b1 f4       	brne	.+44     	; 0xc800 <EEPromScore+0x8e>
    c7d4:	83 e0       	ldi	r24, 0x03	; 3
    c7d6:	d8 9e       	mul	r13, r24
    c7d8:	d0 01       	movw	r26, r0
    c7da:	11 24       	eor	r1, r1
    c7dc:	11 96       	adiw	r26, 0x01	; 1
    c7de:	aa 0f       	add	r26, r26
    c7e0:	bb 1f       	adc	r27, r27
    c7e2:	ae 0d       	add	r26, r14
    c7e4:	bf 1d       	adc	r27, r15
    c7e6:	20 e0       	ldi	r18, 0x00	; 0
    c7e8:	30 e0       	ldi	r19, 0x00	; 0
			for(uint8_t i=0;i<6;i++)
				dat[i] = ebs.data[(slot*6)+i];
    c7ea:	f8 01       	movw	r30, r16
    c7ec:	e2 0f       	add	r30, r18
    c7ee:	f3 1f       	adc	r31, r19
    c7f0:	8d 91       	ld	r24, X+
    c7f2:	80 83       	st	Z, r24
    c7f4:	2f 5f       	subi	r18, 0xFF	; 255
    c7f6:	3f 4f       	sbci	r19, 0xFF	; 255
		EepromWriteBlock(&ebs);
	}
//return;
	if(EepromReadBlock(ebs.id, &ebs) == 0){//it exists
		if(!direction){//read
			for(uint8_t i=0;i<6;i++)
    c7f8:	26 30       	cpi	r18, 0x06	; 6
    c7fa:	31 05       	cpc	r19, r1
    c7fc:	b1 f7       	brne	.-20     	; 0xc7ea <EEPromScore+0x78>
    c7fe:	30 c0       	rjmp	.+96     	; 0xc860 <EEPromScore+0xee>
				dat[i] = ebs.data[(slot*6)+i];
			return slot;
		}else{//write
			for(uint8_t i=0;i<5;i++)
				ebs.data[(slot*6)+i] = dat[i];
    c800:	86 e0       	ldi	r24, 0x06	; 6
    c802:	d8 9e       	mul	r13, r24
    c804:	a0 01       	movw	r20, r0
    c806:	11 24       	eor	r1, r1
    c808:	4e 5f       	subi	r20, 0xFE	; 254
    c80a:	5f 4f       	sbci	r21, 0xFF	; 255
    c80c:	d7 01       	movw	r26, r14
    c80e:	a4 0f       	add	r26, r20
    c810:	b5 1f       	adc	r27, r21
    c812:	42 50       	subi	r20, 0x02	; 2
    c814:	50 40       	sbci	r21, 0x00	; 0
    c816:	20 e0       	ldi	r18, 0x00	; 0
    c818:	30 e0       	ldi	r19, 0x00	; 0
    c81a:	f8 01       	movw	r30, r16
    c81c:	e2 0f       	add	r30, r18
    c81e:	f3 1f       	adc	r31, r19
    c820:	80 81       	ld	r24, Z
    c822:	8d 93       	st	X+, r24
    c824:	2f 5f       	subi	r18, 0xFF	; 255
    c826:	3f 4f       	sbci	r19, 0xFF	; 255
		if(!direction){//read
			for(uint8_t i=0;i<6;i++)
				dat[i] = ebs.data[(slot*6)+i];
			return slot;
		}else{//write
			for(uint8_t i=0;i<5;i++)
    c828:	25 30       	cpi	r18, 0x05	; 5
    c82a:	31 05       	cpc	r19, r1
    c82c:	b1 f7       	brne	.-20     	; 0xc81a <EEPromScore+0xa8>
				ebs.data[(slot*6)+i] = dat[i];

			ebs.data[(slot*6)+5] = mag;//score magnitude
    c82e:	fa 01       	movw	r30, r20
    c830:	ec 0f       	add	r30, r28
    c832:	fd 1f       	adc	r31, r29
    c834:	b0 86       	std	Z+8, r11	; 0x08
			EepromWriteBlock(&ebs);
    c836:	ce 01       	movw	r24, r28
    c838:	01 96       	adiw	r24, 0x01	; 1
    c83a:	0e 94 47 53 	call	0xa68e	; 0xa68e <EepromWriteBlock>
    c83e:	02 c0       	rjmp	.+4      	; 0xc844 <EEPromScore+0xd2>
		}
	}else if(!direction){
    c840:	cc 20       	and	r12, r12
    c842:	11 f0       	breq	.+4      	; 0xc848 <EEPromScore+0xd6>
    c844:	dd 24       	eor	r13, r13
    c846:	0c c0       	rjmp	.+24     	; 0xc860 <EEPromScore+0xee>
		dat[0] = 'E';
    c848:	85 e4       	ldi	r24, 0x45	; 69
    c84a:	f8 01       	movw	r30, r16
    c84c:	80 83       	st	Z, r24
		dat[1] = 'R';
    c84e:	92 e5       	ldi	r25, 0x52	; 82
    c850:	91 83       	std	Z+1, r25	; 0x01
		dat[2] = 'R';
    c852:	92 83       	std	Z+2, r25	; 0x02
		dat[3] = 'O';
    c854:	8f e4       	ldi	r24, 0x4F	; 79
    c856:	83 83       	std	Z+3, r24	; 0x03
		dat[4] = 'R';
    c858:	94 83       	std	Z+4, r25	; 0x04
		dat[5] = 0;
    c85a:	15 82       	std	Z+5, r1	; 0x05
    c85c:	dd 24       	eor	r13, r13
    c85e:	d3 94       	inc	r13
		return 1;
	}
	return 0;

}
    c860:	8d 2d       	mov	r24, r13
    c862:	a0 96       	adiw	r28, 0x20	; 32
    c864:	e9 e0       	ldi	r30, 0x09	; 9
    c866:	0c 94 17 77 	jmp	0xee2e	; 0xee2e <__epilogue_restores__+0x12>

0000c86a <RamifyAndSortEEProm>:



#define HIGHSCORE_RAMTILES_OFFSET (RAM_TILES_COUNT-2)*64

void RamifyAndSortEEProm(){
    c86a:	1f 93       	push	r17
    c86c:	cf 93       	push	r28
    c86e:	df 93       	push	r29
    c870:	c4 e8       	ldi	r28, 0x84	; 132
    c872:	d4 e0       	ldi	r29, 0x04	; 4
    c874:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<5;i++)//load all eeprom entries entirely into ram, 5 name byte, and 1 score byte each
		EEPromScore(i,0,(uint8_t *)&ram_tiles[i*6],0);
    c876:	81 2f       	mov	r24, r17
    c878:	60 e0       	ldi	r22, 0x00	; 0
    c87a:	ae 01       	movw	r20, r28
    c87c:	20 e0       	ldi	r18, 0x00	; 0
    c87e:	79 df       	rcall	.-270    	; 0xc772 <EEPromScore>


#define HIGHSCORE_RAMTILES_OFFSET (RAM_TILES_COUNT-2)*64

void RamifyAndSortEEProm(){
	for(uint8_t i=0;i<5;i++)//load all eeprom entries entirely into ram, 5 name byte, and 1 score byte each
    c880:	1f 5f       	subi	r17, 0xFF	; 255
    c882:	26 96       	adiw	r28, 0x06	; 6
    c884:	15 30       	cpi	r17, 0x05	; 5
    c886:	b9 f7       	brne	.-18     	; 0xc876 <RamifyAndSortEEProm+0xc>
		EEPromScore(i,0,(uint8_t *)&ram_tiles[i*6],0);
	
	for(uint8_t i=5;i<7;i++){
		ram_tiles[(i*6)] = i-5;//use a character that can't be in a high score name
    c888:	10 92 a2 04 	sts	0x04A2, r1
		ram_tiles[(i*6)+5] = Frogs[i-5].Score;
    c88c:	80 91 fc 0f 	lds	r24, 0x0FFC
    c890:	80 93 a7 04 	sts	0x04A7, r24
void RamifyAndSortEEProm(){
	for(uint8_t i=0;i<5;i++)//load all eeprom entries entirely into ram, 5 name byte, and 1 score byte each
		EEPromScore(i,0,(uint8_t *)&ram_tiles[i*6],0);
	
	for(uint8_t i=5;i<7;i++){
		ram_tiles[(i*6)] = i-5;//use a character that can't be in a high score name
    c894:	81 e0       	ldi	r24, 0x01	; 1
    c896:	80 93 a8 04 	sts	0x04A8, r24
		ram_tiles[(i*6)+5] = Frogs[i-5].Score;
    c89a:	80 91 13 10 	lds	r24, 0x1013
    c89e:	80 93 ad 04 	sts	0x04AD, r24
    c8a2:	1e c0       	rjmp	.+60     	; 0xc8e0 <RamifyAndSortEEProm+0x76>

	uint8_t keep_sorting = true;
	while(keep_sorting){
		keep_sorting = false;
		for(uint8_t i=6;i>0;i--){
			if(ram_tiles[(i*6)+5] > ram_tiles[((i-1)*6)+5]){
    c8a4:	9e 81       	ldd	r25, Y+6	; 0x06
    c8a6:	88 81       	ld	r24, Y
    c8a8:	89 17       	cp	r24, r25
    c8aa:	88 f4       	brcc	.+34     	; 0xc8ce <RamifyAndSortEEProm+0x64>
    c8ac:	f9 01       	movw	r30, r18
    c8ae:	ec 57       	subi	r30, 0x7C	; 124
    c8b0:	fb 4f       	sbci	r31, 0xFB	; 251
    c8b2:	a0 ec       	ldi	r26, 0xC0	; 192
    c8b4:	b4 e0       	ldi	r27, 0x04	; 4
				keep_sorting = true;//we go through the list until it never happens, then it's sorted
				for(uint8_t j=0;j<6;j++){//now swap the entries
					ram_tiles[(10*6)+j] = ram_tiles[((i-1)*6)+j];//keep a temporary copy of the old higher position in unused ram
    c8b6:	80 81       	ld	r24, Z
    c8b8:	8c 93       	st	X, r24
					ram_tiles[((i-1)*6)+j] = ram_tiles[(i*6)+j];//put the higher score up in the list overwriting the old higher position
    c8ba:	86 81       	ldd	r24, Z+6	; 0x06
    c8bc:	80 83       	st	Z, r24
					ram_tiles[(i*6)+j] = ram_tiles[(10*6)+j];//use the temporary to put in it's new lower position
    c8be:	8d 91       	ld	r24, X+
    c8c0:	86 83       	std	Z+6, r24	; 0x06
    c8c2:	31 96       	adiw	r30, 0x01	; 1
	while(keep_sorting){
		keep_sorting = false;
		for(uint8_t i=6;i>0;i--){
			if(ram_tiles[(i*6)+5] > ram_tiles[((i-1)*6)+5]){
				keep_sorting = true;//we go through the list until it never happens, then it's sorted
				for(uint8_t j=0;j<6;j++){//now swap the entries
    c8c4:	84 e0       	ldi	r24, 0x04	; 4
    c8c6:	a6 3c       	cpi	r26, 0xC6	; 198
    c8c8:	b8 07       	cpc	r27, r24
    c8ca:	a9 f7       	brne	.-22     	; 0xc8b6 <RamifyAndSortEEProm+0x4c>
    c8cc:	41 e0       	ldi	r20, 0x01	; 1
    c8ce:	26 97       	sbiw	r28, 0x06	; 6
    c8d0:	26 50       	subi	r18, 0x06	; 6
    c8d2:	30 40       	sbci	r19, 0x00	; 0
	}

	uint8_t keep_sorting = true;
	while(keep_sorting){
		keep_sorting = false;
		for(uint8_t i=6;i>0;i--){
    c8d4:	84 e0       	ldi	r24, 0x04	; 4
    c8d6:	c3 38       	cpi	r28, 0x83	; 131
    c8d8:	d8 07       	cpc	r29, r24
    c8da:	21 f7       	brne	.-56     	; 0xc8a4 <RamifyAndSortEEProm+0x3a>
		ram_tiles[(i*6)] = i-5;//use a character that can't be in a high score name
		ram_tiles[(i*6)+5] = Frogs[i-5].Score;
	}

	uint8_t keep_sorting = true;
	while(keep_sorting){
    c8dc:	44 23       	and	r20, r20
    c8de:	31 f0       	breq	.+12     	; 0xc8ec <RamifyAndSortEEProm+0x82>
    c8e0:	c7 ea       	ldi	r28, 0xA7	; 167
    c8e2:	d4 e0       	ldi	r29, 0x04	; 4
    c8e4:	40 e0       	ldi	r20, 0x00	; 0
    c8e6:	2e e1       	ldi	r18, 0x1E	; 30
    c8e8:	30 e0       	ldi	r19, 0x00	; 0
    c8ea:	dc cf       	rjmp	.-72     	; 0xc8a4 <RamifyAndSortEEProm+0x3a>
				}
			}
		}
	}

}
    c8ec:	df 91       	pop	r29
    c8ee:	cf 91       	pop	r28
    c8f0:	1f 91       	pop	r17
    c8f2:	08 95       	ret

0000c8f4 <rtl_RamifyFontEx>:
			return pos;
		pos++;
	}
}

void rtl_RamifyFontEx(uint16_t rtoff, const int8_t *cmap, const int8_t *chrlst, const uint8_t *ftiles, uint8_t backcolor, uint8_t fontcolor){
    c8f4:	a0 e0       	ldi	r26, 0x00	; 0
    c8f6:	b0 e0       	ldi	r27, 0x00	; 0
    c8f8:	e0 e8       	ldi	r30, 0x80	; 128
    c8fa:	f4 e6       	ldi	r31, 0x64	; 100
    c8fc:	0c 94 f4 76 	jmp	0xede8	; 0xede8 <__prologue_saves__+0x4>
    c900:	6c 01       	movw	r12, r24
    c902:	5b 01       	movw	r10, r22
    c904:	f4 2e       	mov	r15, r20
    c906:	45 2e       	mov	r4, r21
    c908:	49 01       	movw	r8, r18
    c90a:	50 2e       	mov	r5, r16
WaitVsync(1);
    c90c:	81 e0       	ldi	r24, 0x01	; 1
    c90e:	90 e0       	ldi	r25, 0x00	; 0
    c910:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	uint8_t moff = 0;
	uint8_t t,t2;
	uint8_t c;
	rtl_FontStartOffset = rtoff;
    c914:	c0 92 cd 0f 	sts	0x0FCD, r12
	rtl_CharMap = (int8_t *)cmap;
    c918:	b0 92 23 10 	sts	0x1023, r11
    c91c:	a0 92 22 10 	sts	0x1022, r10
	rtoff *= 64;
    c920:	e6 01       	movw	r28, r12
    c922:	f6 e0       	ldi	r31, 0x06	; 6
    c924:	cc 0f       	add	r28, r28
    c926:	dd 1f       	adc	r29, r29
    c928:	fa 95       	dec	r31
    c92a:	e1 f7       	brne	.-8      	; 0xc924 <rtl_RamifyFontEx+0x30>
    c92c:	cc 24       	eor	r12, r12
		}

		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
			t = pgm_read_byte(&ftiles[i]);
			for(u8 j=0;j<8;j++){
				if(t & (128>>j)){
    c92e:	e0 e8       	ldi	r30, 0x80	; 128
    c930:	6e 2e       	mov	r6, r30
    c932:	71 2c       	mov	r7, r1
    c934:	55 c0       	rjmp	.+170    	; 0xc9e0 <rtl_RamifyFontEx+0xec>
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;
	uint8_t iteration = 0;

	while(rtoff < (RAM_TILES_COUNT*64)){
		c = pgm_read_byte(&cmap[moff++]);
    c936:	f5 01       	movw	r30, r10
    c938:	ec 0d       	add	r30, r12
    c93a:	f1 1d       	adc	r31, r1
    c93c:	34 91       	lpm	r19, Z+
		if(c == 0)
    c93e:	33 23       	and	r19, r19
    c940:	09 f4       	brne	.+2      	; 0xc944 <rtl_RamifyFontEx+0x50>
    c942:	53 c0       	rjmp	.+166    	; 0xc9ea <rtl_RamifyFontEx+0xf6>
			return;
		

		t2 = rtl_SearchCharList(c,chrlst);
    c944:	8f 2d       	mov	r24, r15
    c946:	94 2d       	mov	r25, r4
    c948:	fc 01       	movw	r30, r24
    c94a:	8e 2f       	mov	r24, r30
    c94c:	8f 19       	sub	r24, r15


uint8_t rtl_SearchCharList(int8_t ch, const int8_t *chrlst){
	int8_t pos=0,t;
	while(true){
		t = pgm_read_byte(&chrlst[pos]);
    c94e:	24 91       	lpm	r18, Z+
		if(t == 0 || t == 255)
    c950:	22 23       	and	r18, r18
    c952:	09 f4       	brne	.+2      	; 0xc956 <rtl_RamifyFontEx+0x62>
    c954:	4a c0       	rjmp	.+148    	; 0xc9ea <rtl_RamifyFontEx+0xf6>
    c956:	31 96       	adiw	r30, 0x01	; 1
			return 255;
		if(t == ch)
    c958:	23 17       	cp	r18, r19
    c95a:	b9 f7       	brne	.-18     	; 0xc94a <rtl_RamifyFontEx+0x56>
			return;
		

		t2 = rtl_SearchCharList(c,chrlst);

		if(t2 == 255){
    c95c:	8f 3f       	cpi	r24, 0xFF	; 255
    c95e:	09 f4       	brne	.+2      	; 0xc962 <rtl_RamifyFontEx+0x6e>
    c960:	44 c0       	rjmp	.+136    	; 0xc9ea <rtl_RamifyFontEx+0xf6>
			return;	
		}

		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
    c962:	90 e0       	ldi	r25, 0x00	; 0
    c964:	ac 01       	movw	r20, r24
    c966:	73 e0       	ldi	r23, 0x03	; 3
    c968:	44 0f       	add	r20, r20
    c96a:	55 1f       	adc	r21, r21
    c96c:	7a 95       	dec	r23
    c96e:	e1 f7       	brne	.-8      	; 0xc968 <rtl_RamifyFontEx+0x74>
    c970:	dc 01       	movw	r26, r24
    c972:	11 96       	adiw	r26, 0x01	; 1
    c974:	63 e0       	ldi	r22, 0x03	; 3
    c976:	aa 0f       	add	r26, r26
    c978:	bb 1f       	adc	r27, r27
    c97a:	6a 95       	dec	r22
    c97c:	e1 f7       	brne	.-8      	; 0xc976 <rtl_RamifyFontEx+0x82>
    c97e:	b4 01       	movw	r22, r8
    c980:	64 0f       	add	r22, r20
    c982:	75 1f       	adc	r23, r21
    c984:	22 c0       	rjmp	.+68     	; 0xc9ca <rtl_RamifyFontEx+0xd6>
			t = pgm_read_byte(&ftiles[i]);
    c986:	fb 01       	movw	r30, r22
    c988:	84 91       	lpm	r24, Z+
    c98a:	fe 01       	movw	r30, r28
    c98c:	ec 57       	subi	r30, 0x7C	; 124
    c98e:	fb 4f       	sbci	r31, 0xFB	; 251
    c990:	20 e0       	ldi	r18, 0x00	; 0
    c992:	30 e0       	ldi	r19, 0x00	; 0
			for(u8 j=0;j<8;j++){
				if(t & (128>>j)){
    c994:	08 2f       	mov	r16, r24
    c996:	10 e0       	ldi	r17, 0x00	; 0
    c998:	c3 01       	movw	r24, r6
    c99a:	02 2e       	mov	r0, r18
    c99c:	02 c0       	rjmp	.+4      	; 0xc9a2 <rtl_RamifyFontEx+0xae>
    c99e:	95 95       	asr	r25
    c9a0:	87 95       	ror	r24
    c9a2:	0a 94       	dec	r0
    c9a4:	e2 f7       	brpl	.-8      	; 0xc99e <rtl_RamifyFontEx+0xaa>
    c9a6:	80 23       	and	r24, r16
    c9a8:	91 23       	and	r25, r17
    c9aa:	89 2b       	or	r24, r25
    c9ac:	11 f0       	breq	.+4      	; 0xc9b2 <rtl_RamifyFontEx+0xbe>
						ram_tiles[rtoff] = fontcolor;
    c9ae:	e0 82       	st	Z, r14
    c9b0:	01 c0       	rjmp	.+2      	; 0xc9b4 <rtl_RamifyFontEx+0xc0>
				}
				else
					ram_tiles[rtoff] = backcolor;
    c9b2:	50 82       	st	Z, r5
    c9b4:	2f 5f       	subi	r18, 0xFF	; 255
    c9b6:	3f 4f       	sbci	r19, 0xFF	; 255
    c9b8:	31 96       	adiw	r30, 0x01	; 1
			return;	
		}

		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
			t = pgm_read_byte(&ftiles[i]);
			for(u8 j=0;j<8;j++){
    c9ba:	28 30       	cpi	r18, 0x08	; 8
    c9bc:	31 05       	cpc	r19, r1
    c9be:	61 f7       	brne	.-40     	; 0xc998 <rtl_RamifyFontEx+0xa4>
    c9c0:	28 96       	adiw	r28, 0x08	; 8

		if(t2 == 255){
			return;	
		}

		for(uint16_t i=(t2*8);i<(t2*8)+8;i++){
    c9c2:	4f 5f       	subi	r20, 0xFF	; 255
    c9c4:	5f 4f       	sbci	r21, 0xFF	; 255
    c9c6:	6f 5f       	subi	r22, 0xFF	; 255
    c9c8:	7f 4f       	sbci	r23, 0xFF	; 255
    c9ca:	4a 17       	cp	r20, r26
    c9cc:	5b 07       	cpc	r21, r27
    c9ce:	d8 f2       	brcs	.-74     	; 0xc986 <rtl_RamifyFontEx+0x92>
				else
					ram_tiles[rtoff] = backcolor;
				rtoff++;
			}
		}
	if(++iteration > 1)
    c9d0:	c3 94       	inc	r12
    c9d2:	f1 e0       	ldi	r31, 0x01	; 1
    c9d4:	fc 15       	cp	r31, r12
    c9d6:	20 f4       	brcc	.+8      	; 0xc9e0 <rtl_RamifyFontEx+0xec>
		WaitVsync(1);	
    c9d8:	81 e0       	ldi	r24, 0x01	; 1
    c9da:	90 e0       	ldi	r25, 0x00	; 0
    c9dc:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	rtl_FontStartOffset = rtoff;
	rtl_CharMap = (int8_t *)cmap;
	rtoff *= 64;
	uint8_t iteration = 0;

	while(rtoff < (RAM_TILES_COUNT*64)){
    c9e0:	8a e0       	ldi	r24, 0x0A	; 10
    c9e2:	c0 30       	cpi	r28, 0x00	; 0
    c9e4:	d8 07       	cpc	r29, r24
    c9e6:	08 f4       	brcc	.+2      	; 0xc9ea <rtl_RamifyFontEx+0xf6>
    c9e8:	a6 cf       	rjmp	.-180    	; 0xc936 <rtl_RamifyFontEx+0x42>
			}
		}
	if(++iteration > 1)
		WaitVsync(1);	
	}
}
    c9ea:	cd b7       	in	r28, 0x3d	; 61
    c9ec:	de b7       	in	r29, 0x3e	; 62
    c9ee:	e0 e1       	ldi	r30, 0x10	; 16
    c9f0:	0c 94 10 77 	jmp	0xee20	; 0xee20 <__epilogue_restores__+0x4>

0000c9f4 <CreditScreen>:
}




void CreditScreen(){
    c9f4:	ef 92       	push	r14
    c9f6:	0f 93       	push	r16

	FadeOut(3,true);
    c9f8:	83 e0       	ldi	r24, 0x03	; 3
    c9fa:	61 e0       	ldi	r22, 0x01	; 1
    c9fc:	0e 94 3a 5c 	call	0xb874	; 0xb874 <FadeOut>
			SetTile(x++,y,c+201);
	}
}

void HideSprites(){
	spritecount = 0;
    ca00:	10 92 cb 0f 	sts	0x0FCB, r1
    ca04:	ec e2       	ldi	r30, 0x2C	; 44
    ca06:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    ca08:	80 ef       	ldi	r24, 0xF0	; 240
    ca0a:	80 83       	st	Z, r24
    ca0c:	34 96       	adiw	r30, 0x04	; 4
	}
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    ca0e:	24 e0       	ldi	r18, 0x04	; 4
    ca10:	e4 38       	cpi	r30, 0x84	; 132
    ca12:	f2 07       	cpc	r31, r18
    ca14:	d1 f7       	brne	.-12     	; 0xca0a <CreditScreen+0x16>
    ca16:	e4 e8       	ldi	r30, 0x84	; 132
    ca18:	f5 e0       	ldi	r31, 0x05	; 5
	HideSprites();
	for(uint8_t i=0;i<64;i++){
		ram_tiles[(4*64)+i] = 0xD1;
    ca1a:	91 ed       	ldi	r25, 0xD1	; 209
		ram_tiles[(5*64)+i] = 0x69;
    ca1c:	89 e6       	ldi	r24, 0x69	; 105
void CreditScreen(){

	FadeOut(3,true);
	HideSprites();
	for(uint8_t i=0;i<64;i++){
		ram_tiles[(4*64)+i] = 0xD1;
    ca1e:	90 83       	st	Z, r25
		ram_tiles[(5*64)+i] = 0x69;
    ca20:	e0 5c       	subi	r30, 0xC0	; 192
    ca22:	ff 4f       	sbci	r31, 0xFF	; 255
    ca24:	80 83       	st	Z, r24
    ca26:	ff 97       	sbiw	r30, 0x3f	; 63

void CreditScreen(){

	FadeOut(3,true);
	HideSprites();
	for(uint8_t i=0;i<64;i++){
    ca28:	25 e0       	ldi	r18, 0x05	; 5
    ca2a:	e4 3c       	cpi	r30, 0xC4	; 196
    ca2c:	f2 07       	cpc	r31, r18
    ca2e:	b9 f7       	brne	.-18     	; 0xca1e <CreditScreen+0x2a>
    ca30:	80 e0       	ldi	r24, 0x00	; 0
    ca32:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t y=0;y<SCREEN_TILES_V;y++)
		for(uint8_t x=0;x<SCREEN_TILES_H;x++){
			if(x < 19)
				vram[(VRAM_TILES_H*y)+x] = 4;
			else
				vram[(VRAM_TILES_H*y)+x] = 5;
    ca34:	45 e0       	ldi	r20, 0x05	; 5
		ram_tiles[(5*64)+i] = 0x69;
	}
	for(uint8_t y=0;y<SCREEN_TILES_V;y++)
		for(uint8_t x=0;x<SCREEN_TILES_H;x++){
			if(x < 19)
				vram[(VRAM_TILES_H*y)+x] = 4;
    ca36:	34 e0       	ldi	r19, 0x04	; 4
    ca38:	0f c0       	rjmp	.+30     	; 0xca58 <CreditScreen+0x64>
		ram_tiles[(4*64)+i] = 0xD1;
		ram_tiles[(5*64)+i] = 0x69;
	}
	for(uint8_t y=0;y<SCREEN_TILES_V;y++)
		for(uint8_t x=0;x<SCREEN_TILES_H;x++){
			if(x < 19)
    ca3a:	23 31       	cpi	r18, 0x13	; 19
    ca3c:	10 f4       	brcc	.+4      	; 0xca42 <CreditScreen+0x4e>
				vram[(VRAM_TILES_H*y)+x] = 4;
    ca3e:	30 83       	st	Z, r19
    ca40:	01 c0       	rjmp	.+2      	; 0xca44 <CreditScreen+0x50>
			else
				vram[(VRAM_TILES_H*y)+x] = 5;
    ca42:	4c 93       	st	X, r20
	for(uint8_t i=0;i<64;i++){
		ram_tiles[(4*64)+i] = 0xD1;
		ram_tiles[(5*64)+i] = 0x69;
	}
	for(uint8_t y=0;y<SCREEN_TILES_V;y++)
		for(uint8_t x=0;x<SCREEN_TILES_H;x++){
    ca44:	2f 5f       	subi	r18, 0xFF	; 255
    ca46:	31 96       	adiw	r30, 0x01	; 1
    ca48:	11 96       	adiw	r26, 0x01	; 1
    ca4a:	2e 31       	cpi	r18, 0x1E	; 30
    ca4c:	b1 f7       	brne	.-20     	; 0xca3a <CreditScreen+0x46>
    ca4e:	4e 96       	adiw	r24, 0x1e	; 30
	HideSprites();
	for(uint8_t i=0;i<64;i++){
		ram_tiles[(4*64)+i] = 0xD1;
		ram_tiles[(5*64)+i] = 0x69;
	}
	for(uint8_t y=0;y<SCREEN_TILES_V;y++)
    ca50:	23 e0       	ldi	r18, 0x03	; 3
    ca52:	8c 30       	cpi	r24, 0x0C	; 12
    ca54:	92 07       	cpc	r25, r18
    ca56:	31 f0       	breq	.+12     	; 0xca64 <CreditScreen+0x70>
    ca58:	fc 01       	movw	r30, r24
    ca5a:	e0 5e       	subi	r30, 0xE0	; 224
    ca5c:	fe 4f       	sbci	r31, 0xFE	; 254
    ca5e:	df 01       	movw	r26, r30
    ca60:	20 e0       	ldi	r18, 0x00	; 0
    ca62:	eb cf       	rjmp	.-42     	; 0xca3a <CreditScreen+0x46>
			if(x < 19)
				vram[(VRAM_TILES_H*y)+x] = 4;
			else
				vram[(VRAM_TILES_H*y)+x] = 5;
	}
	rtl_RamifyFontEx(8,titlecharmap,charlist,compfont,0xD1,0xFF);
    ca64:	88 e0       	ldi	r24, 0x08	; 8
    ca66:	90 e0       	ldi	r25, 0x00	; 0
    ca68:	62 e5       	ldi	r22, 0x52	; 82
    ca6a:	7b e9       	ldi	r23, 0x9B	; 155
    ca6c:	40 e8       	ldi	r20, 0x80	; 128
    ca6e:	5d e7       	ldi	r21, 0x7D	; 125
    ca70:	20 e4       	ldi	r18, 0x40	; 64
    ca72:	3c e7       	ldi	r19, 0x7C	; 124
    ca74:	01 ed       	ldi	r16, 0xD1	; 209
    ca76:	ee 24       	eor	r14, r14
    ca78:	ea 94       	dec	r14
    ca7a:	3c df       	rcall	.-392    	; 0xc8f4 <rtl_RamifyFontEx>
	rtl_Print(1,1,	PSTR("ORIGINAL GAME"));
    ca7c:	81 e0       	ldi	r24, 0x01	; 1
    ca7e:	61 e0       	ldi	r22, 0x01	; 1
    ca80:	4c ec       	ldi	r20, 0xCC	; 204
    ca82:	5c e9       	ldi	r21, 0x9C	; 156
    ca84:	9e d8       	rcall	.-3780   	; 0xbbc2 <rtl_Print>
	rtl_Print(2,3,	PSTR("CHARLES DOTY"));
    ca86:	82 e0       	ldi	r24, 0x02	; 2
    ca88:	63 e0       	ldi	r22, 0x03	; 3
    ca8a:	4f eb       	ldi	r20, 0xBF	; 191
    ca8c:	5c e9       	ldi	r21, 0x9C	; 156
    ca8e:	99 d8       	rcall	.-3790   	; 0xbbc2 <rtl_Print>
	rtl_Print(1,10,	PSTR("BG GRAPHICS"));
    ca90:	81 e0       	ldi	r24, 0x01	; 1
    ca92:	6a e0       	ldi	r22, 0x0A	; 10
    ca94:	43 eb       	ldi	r20, 0xB3	; 179
    ca96:	5c e9       	ldi	r21, 0x9C	; 156
    ca98:	94 d8       	rcall	.-3800   	; 0xbbc2 <rtl_Print>
	rtl_Print(2,12,	PSTR("ALEC BOURQUE"));
    ca9a:	82 e0       	ldi	r24, 0x02	; 2
    ca9c:	6c e0       	ldi	r22, 0x0C	; 12
    ca9e:	46 ea       	ldi	r20, 0xA6	; 166
    caa0:	5c e9       	ldi	r21, 0x9C	; 156
    caa2:	8f d8       	rcall	.-3810   	; 0xbbc2 <rtl_Print>
	rtl_Print(1,19,	PSTR("UZEBOX VERSION"));
    caa4:	81 e0       	ldi	r24, 0x01	; 1
    caa6:	63 e1       	ldi	r22, 0x13	; 19
    caa8:	47 e9       	ldi	r20, 0x97	; 151
    caaa:	5c e9       	ldi	r21, 0x9C	; 156
    caac:	8a d8       	rcall	.-3820   	; 0xbbc2 <rtl_Print>
	rtl_Print(2,21,	PSTR("LEE WEBER"));
    caae:	82 e0       	ldi	r24, 0x02	; 2
    cab0:	65 e1       	ldi	r22, 0x15	; 21
    cab2:	4d e8       	ldi	r20, 0x8D	; 141
    cab4:	5c e9       	ldi	r21, 0x9C	; 156
    cab6:	85 d8       	rcall	.-3830   	; 0xbbc2 <rtl_Print>
//	rtl_Print(1,24, PSTR("PLAY TESTING"));

	WaitVsync(1);
    cab8:	81 e0       	ldi	r24, 0x01	; 1
    caba:	90 e0       	ldi	r25, 0x00	; 0
    cabc:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	FadeIn(3,false);
    cac0:	83 e0       	ldi	r24, 0x03	; 3
    cac2:	60 e0       	ldi	r22, 0x00	; 0
    cac4:	0e 94 22 5c 	call	0xb844	; 0xb844 <FadeIn>

	while(1){
		WaitVsync(1);//pads updated in VsyncRoutine
    cac8:	81 e0       	ldi	r24, 0x01	; 1
    caca:	90 e0       	ldi	r25, 0x00	; 0
    cacc:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
		for(uint8_t i=0;i<2;i++){
			if(JoyVal[i] && !(OldJoyVal[i])){
    cad0:	80 91 1c 10 	lds	r24, 0x101C
    cad4:	90 91 1d 10 	lds	r25, 0x101D
    cad8:	89 2b       	or	r24, r25
    cada:	31 f0       	breq	.+12     	; 0xcae8 <CreditScreen+0xf4>
    cadc:	80 91 17 10 	lds	r24, 0x1017
    cae0:	90 91 18 10 	lds	r25, 0x1018
    cae4:	89 2b       	or	r24, r25
    cae6:	61 f0       	breq	.+24     	; 0xcb00 <CreditScreen+0x10c>
    cae8:	80 91 1e 10 	lds	r24, 0x101E
    caec:	90 91 1f 10 	lds	r25, 0x101F
    caf0:	89 2b       	or	r24, r25
    caf2:	51 f3       	breq	.-44     	; 0xcac8 <CreditScreen+0xd4>
    caf4:	80 91 19 10 	lds	r24, 0x1019
    caf8:	90 91 1a 10 	lds	r25, 0x101A
    cafc:	89 2b       	or	r24, r25
    cafe:	21 f7       	brne	.-56     	; 0xcac8 <CreditScreen+0xd4>
				FadeOut(3,true);
    cb00:	83 e0       	ldi	r24, 0x03	; 3
    cb02:	61 e0       	ldi	r22, 0x01	; 1
    cb04:	0e 94 3a 5c 	call	0xb874	; 0xb874 <FadeOut>
				return;
			}
		}
	}

}
    cb08:	0f 91       	pop	r16
    cb0a:	ef 90       	pop	r14
    cb0c:	08 95       	ret

0000cb0e <VsyncRoutine>:


inline void UpdatePads(){

	OldJoyVal[0] = JoyVal[0];
    cb0e:	80 91 1c 10 	lds	r24, 0x101C
    cb12:	90 91 1d 10 	lds	r25, 0x101D
    cb16:	90 93 18 10 	sts	0x1018, r25
    cb1a:	80 93 17 10 	sts	0x1017, r24
	OldJoyVal[1] = JoyVal[1];
    cb1e:	80 91 1e 10 	lds	r24, 0x101E
    cb22:	90 91 1f 10 	lds	r25, 0x101F
    cb26:	90 93 1a 10 	sts	0x101A, r25
    cb2a:	80 93 19 10 	sts	0x1019, r24

	if(!InGui && Demo && (ReadJoypad(0) || ReadJoypad(1))){
    cb2e:	80 91 d2 0f 	lds	r24, 0x0FD2
    cb32:	88 23       	and	r24, r24
    cb34:	91 f4       	brne	.+36     	; 0xcb5a <VsyncRoutine+0x4c>
    cb36:	80 91 cc 0f 	lds	r24, 0x0FCC
    cb3a:	88 23       	and	r24, r24
    cb3c:	71 f0       	breq	.+28     	; 0xcb5a <VsyncRoutine+0x4c>
    cb3e:	80 e0       	ldi	r24, 0x00	; 0
    cb40:	0e 94 6d 52 	call	0xa4da	; 0xa4da <ReadJoypad>
    cb44:	89 2b       	or	r24, r25
    cb46:	29 f4       	brne	.+10     	; 0xcb52 <VsyncRoutine+0x44>
    cb48:	81 e0       	ldi	r24, 0x01	; 1
    cb4a:	0e 94 6d 52 	call	0xa4da	; 0xa4da <ReadJoypad>
    cb4e:	89 2b       	or	r24, r25
    cb50:	21 f0       	breq	.+8      	; 0xcb5a <VsyncRoutine+0x4c>
		Demo = 255;
    cb52:	8f ef       	ldi	r24, 0xFF	; 255
    cb54:	80 93 cc 0f 	sts	0x0FCC, r24
    cb58:	08 95       	ret
		return;
	}

	if(Demo && !InGui)
    cb5a:	80 91 cc 0f 	lds	r24, 0x0FCC
    cb5e:	88 23       	and	r24, r24
    cb60:	31 f0       	breq	.+12     	; 0xcb6e <VsyncRoutine+0x60>
    cb62:	80 91 d2 0f 	lds	r24, 0x0FD2
    cb66:	88 23       	and	r24, r24
    cb68:	11 f4       	brne	.+4      	; 0xcb6e <VsyncRoutine+0x60>
		JoyVal[0] = ProcessAI(0);
    cb6a:	d3 dd       	rcall	.-1114   	; 0xc712 <ProcessAI>
    cb6c:	03 c0       	rjmp	.+6      	; 0xcb74 <VsyncRoutine+0x66>
	else
		JoyVal[0] = ReadJoypad(0);
    cb6e:	80 e0       	ldi	r24, 0x00	; 0
    cb70:	0e 94 6d 52 	call	0xa4da	; 0xa4da <ReadJoypad>
    cb74:	90 93 1d 10 	sts	0x101D, r25
    cb78:	80 93 1c 10 	sts	0x101C, r24

	if((Demo || Players == 1) && !InGui)
    cb7c:	80 91 cc 0f 	lds	r24, 0x0FCC
    cb80:	88 23       	and	r24, r24
    cb82:	21 f4       	brne	.+8      	; 0xcb8c <VsyncRoutine+0x7e>
    cb84:	80 91 24 10 	lds	r24, 0x1024
    cb88:	81 30       	cpi	r24, 0x01	; 1
    cb8a:	39 f4       	brne	.+14     	; 0xcb9a <VsyncRoutine+0x8c>
    cb8c:	80 91 d2 0f 	lds	r24, 0x0FD2
    cb90:	88 23       	and	r24, r24
    cb92:	19 f4       	brne	.+6      	; 0xcb9a <VsyncRoutine+0x8c>
		JoyVal[1] = ProcessAI(1);
    cb94:	81 e0       	ldi	r24, 0x01	; 1
    cb96:	bd dd       	rcall	.-1158   	; 0xc712 <ProcessAI>
    cb98:	03 c0       	rjmp	.+6      	; 0xcba0 <VsyncRoutine+0x92>
	else
		JoyVal[1] = ReadJoypad(1);
    cb9a:	81 e0       	ldi	r24, 0x01	; 1
    cb9c:	0e 94 6d 52 	call	0xa4da	; 0xa4da <ReadJoypad>
    cba0:	90 93 1f 10 	sts	0x101F, r25
    cba4:	80 93 1e 10 	sts	0x101E, r24
    cba8:	08 95       	ret

0000cbaa <DrawNumber>:
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
}

#define FIRSTNUMTILE 189
#define BLANKNUMTILE 72
void DrawNumber(uint8_t val, uint8_t x, uint8_t y, bool zeropad){
    cbaa:	df 92       	push	r13
    cbac:	ef 92       	push	r14
    cbae:	ff 92       	push	r15
    cbb0:	0f 93       	push	r16
    cbb2:	1f 93       	push	r17
    cbb4:	f8 2e       	mov	r15, r24
    cbb6:	16 2f       	mov	r17, r22
    cbb8:	e4 2e       	mov	r14, r20
    cbba:	d2 2e       	mov	r13, r18
    cbbc:	00 e0       	ldi	r16, 0x00	; 0
	unsigned char c,i;
	for(i=0;i<3;i++){
		c=val%10;
		if(val>0 || i==0){
    cbbe:	ff 20       	and	r15, r15
    cbc0:	11 f4       	brne	.+4      	; 0xcbc6 <DrawNumber+0x1c>
    cbc2:	00 23       	and	r16, r16
    cbc4:	69 f4       	brne	.+26     	; 0xcbe0 <DrawNumber+0x36>
			SetTile(x--,y,c+FIRSTNUMTILE);
    cbc6:	21 2f       	mov	r18, r17
    cbc8:	11 50       	subi	r17, 0x01	; 1
    cbca:	8f 2d       	mov	r24, r15
    cbcc:	6a e0       	ldi	r22, 0x0A	; 10
    cbce:	0e 94 bf 76 	call	0xed7e	; 0xed7e <__udivmodqi4>
    cbd2:	49 2f       	mov	r20, r25
    cbd4:	50 e0       	ldi	r21, 0x00	; 0
    cbd6:	43 54       	subi	r20, 0x43	; 67
    cbd8:	5f 4f       	sbci	r21, 0xFF	; 255
    cbda:	82 2f       	mov	r24, r18
    cbdc:	6e 2d       	mov	r22, r14
    cbde:	09 c0       	rjmp	.+18     	; 0xcbf2 <DrawNumber+0x48>
		}else if(i==1 && zeropad){//only needed for seconds display on timer
    cbe0:	01 30       	cpi	r16, 0x01	; 1
    cbe2:	49 f4       	brne	.+18     	; 0xcbf6 <DrawNumber+0x4c>
    cbe4:	dd 20       	and	r13, r13
    cbe6:	39 f0       	breq	.+14     	; 0xcbf6 <DrawNumber+0x4c>
			SetTile(x--,y,FIRSTNUMTILE);
    cbe8:	81 2f       	mov	r24, r17
    cbea:	11 50       	subi	r17, 0x01	; 1
    cbec:	6e 2d       	mov	r22, r14
    cbee:	4d eb       	ldi	r20, 0xBD	; 189
    cbf0:	50 e0       	ldi	r21, 0x00	; 0
    cbf2:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>

#define FIRSTNUMTILE 189
#define BLANKNUMTILE 72
void DrawNumber(uint8_t val, uint8_t x, uint8_t y, bool zeropad){
	unsigned char c,i;
	for(i=0;i<3;i++){
    cbf6:	0f 5f       	subi	r16, 0xFF	; 255
    cbf8:	03 30       	cpi	r16, 0x03	; 3
    cbfa:	31 f0       	breq	.+12     	; 0xcc08 <DrawNumber+0x5e>
		if(val>0 || i==0){
			SetTile(x--,y,c+FIRSTNUMTILE);
		}else if(i==1 && zeropad){//only needed for seconds display on timer
			SetTile(x--,y,FIRSTNUMTILE);
		}
		val=val/10;
    cbfc:	8f 2d       	mov	r24, r15
    cbfe:	6a e0       	ldi	r22, 0x0A	; 10
    cc00:	0e 94 bf 76 	call	0xed7e	; 0xed7e <__udivmodqi4>
    cc04:	f8 2e       	mov	r15, r24
    cc06:	db cf       	rjmp	.-74     	; 0xcbbe <DrawNumber+0x14>
	}
}
    cc08:	1f 91       	pop	r17
    cc0a:	0f 91       	pop	r16
    cc0c:	ff 90       	pop	r15
    cc0e:	ef 90       	pop	r14
    cc10:	df 90       	pop	r13
    cc12:	08 95       	ret

0000cc14 <Render>:
//DrawNumber(pgm_read_byte(&CustomFadeTable[7]),10,17,0);
//DrawNumber(pgm_read_byte(&CustomFadeTable[8]),10,18,0);
}


void Render(){
    cc14:	a0 e0       	ldi	r26, 0x00	; 0
    cc16:	b0 e0       	ldi	r27, 0x00	; 0
    cc18:	e0 e1       	ldi	r30, 0x10	; 16
    cc1a:	f6 e6       	ldi	r31, 0x66	; 102
    cc1c:	0c 94 fb 76 	jmp	0xedf6	; 0xedf6 <__prologue_saves__+0x12>
  // Draw string
}


inline void DrawScores(){
	DrawNumber(Frogs[0].Score,SCORE1X,SCOREY,0);
    cc20:	80 91 fc 0f 	lds	r24, 0x0FFC
    cc24:	62 e0       	ldi	r22, 0x02	; 2
    cc26:	49 e1       	ldi	r20, 0x19	; 25
    cc28:	20 e0       	ldi	r18, 0x00	; 0
    cc2a:	bf df       	rcall	.-130    	; 0xcbaa <DrawNumber>
	DrawNumber(Frogs[1].Score,SCORE2X,SCOREY,0);
    cc2c:	80 91 13 10 	lds	r24, 0x1013
    cc30:	6c e1       	ldi	r22, 0x1C	; 28
    cc32:	49 e1       	ldi	r20, 0x19	; 25
    cc34:	20 e0       	ldi	r18, 0x00	; 0
    cc36:	b9 df       	rcall	.-142    	; 0xcbaa <DrawNumber>
	DrawNumber((Time/60)/60, TIMEX+0, TIMEY,0);//minutes
    cc38:	80 91 20 10 	lds	r24, 0x1020
    cc3c:	90 91 21 10 	lds	r25, 0x1021
    cc40:	60 e1       	ldi	r22, 0x10	; 16
    cc42:	7e e0       	ldi	r23, 0x0E	; 14
    cc44:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    cc48:	86 2f       	mov	r24, r22
    cc4a:	6d e0       	ldi	r22, 0x0D	; 13
    cc4c:	49 e1       	ldi	r20, 0x19	; 25
    cc4e:	20 e0       	ldi	r18, 0x00	; 0
    cc50:	ac df       	rcall	.-168    	; 0xcbaa <DrawNumber>
	DrawNumber((Time/60)%60, TIMEX+3, TIMEY,1);//seconds...
    cc52:	80 91 20 10 	lds	r24, 0x1020
    cc56:	90 91 21 10 	lds	r25, 0x1021
    cc5a:	6c e3       	ldi	r22, 0x3C	; 60
    cc5c:	70 e0       	ldi	r23, 0x00	; 0
    cc5e:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    cc62:	cb 01       	movw	r24, r22
    cc64:	6c e3       	ldi	r22, 0x3C	; 60
    cc66:	70 e0       	ldi	r23, 0x00	; 0
    cc68:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    cc6c:	60 e1       	ldi	r22, 0x10	; 16
    cc6e:	49 e1       	ldi	r20, 0x19	; 25
    cc70:	21 e0       	ldi	r18, 0x01	; 1
    cc72:	9b df       	rcall	.-202    	; 0xcbaa <DrawNumber>
			SetTile(x++,y,c+201);
	}
}

void HideSprites(){
	spritecount = 0;
    cc74:	10 92 cb 0f 	sts	0x0FCB, r1
    cc78:	ec e2       	ldi	r30, 0x2C	; 44
    cc7a:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    cc7c:	80 ef       	ldi	r24, 0xF0	; 240
    cc7e:	80 83       	st	Z, r24
    cc80:	34 96       	adiw	r30, 0x04	; 4
	}
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    cc82:	94 e0       	ldi	r25, 0x04	; 4
    cc84:	e4 38       	cpi	r30, 0x84	; 132
    cc86:	f9 07       	cpc	r31, r25
    cc88:	d1 f7       	brne	.-12     	; 0xcc7e <Render+0x6a>
    cc8a:	c7 ee       	ldi	r28, 0xE7	; 231
    cc8c:	df e0       	ldi	r29, 0x0F	; 15
    cc8e:	78 ec       	ldi	r23, 0xC8	; 200
    cc90:	e7 2e       	mov	r14, r23
    cc92:	7f e0       	ldi	r23, 0x0F	; 15
    cc94:	f7 2e       	mov	r15, r23
    cc96:	dd 24       	eor	r13, r13
    cc98:	cc 24       	eor	r12, r12
void SetSprite(uint8_t x, uint8_t y, uint8_t frame, uint8_t flags){
	sprites[spritecount].x = x;
	sprites[spritecount].y = y;
	sprites[spritecount].tileIndex = frame;
    cc9a:	61 e3       	ldi	r22, 0x31	; 49
    cc9c:	b6 2e       	mov	r11, r22

void Render(){
	DrawScores();
	HideSprites();
	for(uint8_t i=0;i<MAXPLAYERS;i++){
		if(Frogs[i].InvincibleTimer & 2)
    cc9e:	8b 85       	ldd	r24, Y+11	; 0x0b
    cca0:	81 fd       	sbrc	r24, 1
    cca2:	b8 c0       	rjmp	.+368    	; 0xce14 <Render+0x200>
			continue;
		uint8_t rframe = i*32;
		bool facing = false;
		if((Frogs[i].State&FACING)){
    cca4:	8a 89       	ldd	r24, Y+18	; 0x12
    cca6:	9b 89       	ldd	r25, Y+19	; 0x13
    cca8:	a0 e0       	ldi	r26, 0x00	; 0
    ccaa:	b0 e0       	ldi	r27, 0x00	; 0
    ccac:	82 fd       	sbrc	r24, 2
    ccae:	03 c0       	rjmp	.+6      	; 0xccb6 <Render+0xa2>
    ccb0:	0c 2d       	mov	r16, r12
    ccb2:	10 e0       	ldi	r17, 0x00	; 0
    ccb4:	03 c0       	rjmp	.+6      	; 0xccbc <Render+0xa8>
    ccb6:	0c 2d       	mov	r16, r12
    ccb8:	00 5f       	subi	r16, 0xF0	; 240
    ccba:	11 e0       	ldi	r17, 0x01	; 1
			facing = true;
			rframe += 16;
		}

			if(Frogs[i].State & TONGUEING){//Cheats[0] = 1;
    ccbc:	90 ff       	sbrs	r25, 0
    ccbe:	69 c0       	rjmp	.+210    	; 0xcd92 <Render+0x17e>
    ccc0:	d7 01       	movw	r26, r14
    ccc2:	8c 91       	ld	r24, X
				uint8_t xoff;
				if(facing){
    ccc4:	11 23       	and	r17, r17
    ccc6:	49 f0       	breq	.+18     	; 0xccda <Render+0xc6>
    ccc8:	98 81       	ld	r25, Y
					if(Cheats[i]){xoff = Frogs[i].x+(15+24);}else{xoff = Frogs[i].x+15;}
    ccca:	88 23       	and	r24, r24
    cccc:	19 f0       	breq	.+6      	; 0xccd4 <Render+0xc0>
    ccce:	89 2f       	mov	r24, r25
    ccd0:	89 5d       	subi	r24, 0xD9	; 217
    ccd2:	0b c0       	rjmp	.+22     	; 0xccea <Render+0xd6>
    ccd4:	89 2f       	mov	r24, r25
    ccd6:	81 5f       	subi	r24, 0xF1	; 241
    ccd8:	08 c0       	rjmp	.+16     	; 0xccea <Render+0xd6>
    ccda:	98 81       	ld	r25, Y
				}else{
					if(Cheats[i]){xoff = Frogs[i].x-(15+24);}else{xoff = Frogs[i].x-15;}
    ccdc:	88 23       	and	r24, r24
    ccde:	19 f0       	breq	.+6      	; 0xcce6 <Render+0xd2>
    cce0:	89 2f       	mov	r24, r25
    cce2:	87 52       	subi	r24, 0x27	; 39
    cce4:	02 c0       	rjmp	.+4      	; 0xccea <Render+0xd6>
    cce6:	89 2f       	mov	r24, r25
    cce8:	8f 50       	subi	r24, 0x0F	; 15
				}
				DrawSpriteFrame(xoff,Frogs[i].y-0,pgm_read_byte(&TongueFrames[Frogs[i].TongueTime])+(facing*4));
    ccea:	ed 85       	ldd	r30, Y+13	; 0x0d
    ccec:	f0 e0       	ldi	r31, 0x00	; 0
    ccee:	ee 0f       	add	r30, r30
    ccf0:	ff 1f       	adc	r31, r31
    ccf2:	e0 5f       	subi	r30, 0xF0	; 240
    ccf4:	f4 46       	sbci	r31, 0x64	; 100
    ccf6:	e4 91       	lpm	r30, Z+
    ccf8:	41 2f       	mov	r20, r17
    ccfa:	44 0f       	add	r20, r20
    ccfc:	44 0f       	add	r20, r20
    ccfe:	4e 0f       	add	r20, r30
    cd00:	69 81       	ldd	r22, Y+1	; 0x01
    cd02:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
			

			if(Cheats[i]){
    cd06:	f7 01       	movw	r30, r14
    cd08:	80 81       	ld	r24, Z
    cd0a:	88 23       	and	r24, r24
    cd0c:	09 f4       	brne	.+2      	; 0xcd10 <Render+0xfc>
    cd0e:	41 c0       	rjmp	.+130    	; 0xcd92 <Render+0x17e>
				if(facing){
    cd10:	11 23       	and	r17, r17
    cd12:	01 f1       	breq	.+64     	; 0xcd54 <Render+0x140>
    cd14:	30 e0       	ldi	r19, 0x00	; 0
					for(uint8_t j=0;j<3;j++)
						SetSprite(Frogs[i].x+15+(j*8),Frogs[i].y-0,49,0);
    cd16:	29 81       	ldd	r18, Y+1	; 0x01
void SetSprite(uint8_t x, uint8_t y, uint8_t frame, uint8_t flags){
	sprites[spritecount].x = x;
    cd18:	90 91 cb 0f 	lds	r25, 0x0FCB
    cd1c:	e9 2f       	mov	r30, r25
    cd1e:	f0 e0       	ldi	r31, 0x00	; 0
    cd20:	ee 0f       	add	r30, r30
    cd22:	ff 1f       	adc	r31, r31
    cd24:	ee 0f       	add	r30, r30
    cd26:	ff 1f       	adc	r31, r31
    cd28:	df 01       	movw	r26, r30
    cd2a:	a4 5d       	subi	r26, 0xD4	; 212
    cd2c:	bb 4f       	sbci	r27, 0xFB	; 251
    cd2e:	88 81       	ld	r24, Y
    cd30:	81 5f       	subi	r24, 0xF1	; 241
    cd32:	83 0f       	add	r24, r19
    cd34:	8c 93       	st	X, r24
	sprites[spritecount].y = y;
    cd36:	11 96       	adiw	r26, 0x01	; 1
    cd38:	2c 93       	st	X, r18
    cd3a:	11 97       	sbiw	r26, 0x01	; 1
	sprites[spritecount].tileIndex = frame;
    cd3c:	e2 5d       	subi	r30, 0xD2	; 210
    cd3e:	fb 4f       	sbci	r31, 0xFB	; 251
    cd40:	b0 82       	st	Z, r11
	sprites[spritecount++].flags = flags;
    cd42:	13 96       	adiw	r26, 0x03	; 3
    cd44:	1c 92       	st	X, r1
    cd46:	9f 5f       	subi	r25, 0xFF	; 255
    cd48:	90 93 cb 0f 	sts	0x0FCB, r25
    cd4c:	38 5f       	subi	r19, 0xF8	; 248
				DrawSpriteFrame(xoff,Frogs[i].y-0,pgm_read_byte(&TongueFrames[Frogs[i].TongueTime])+(facing*4));
			

			if(Cheats[i]){
				if(facing){
					for(uint8_t j=0;j<3;j++)
    cd4e:	38 31       	cpi	r19, 0x18	; 24
    cd50:	11 f7       	brne	.-60     	; 0xcd16 <Render+0x102>
    cd52:	1f c0       	rjmp	.+62     	; 0xcd92 <Render+0x17e>
    cd54:	30 e0       	ldi	r19, 0x00	; 0
						SetSprite(Frogs[i].x+15+(j*8),Frogs[i].y-0,49,0);
				}else{
					for(uint8_t j=0;j<3;j++)
						SetSprite(Frogs[i].x-7-(j*8),Frogs[i].y-0,49,0);
    cd56:	29 81       	ldd	r18, Y+1	; 0x01
void SetSprite(uint8_t x, uint8_t y, uint8_t frame, uint8_t flags){
	sprites[spritecount].x = x;
    cd58:	90 91 cb 0f 	lds	r25, 0x0FCB
    cd5c:	e9 2f       	mov	r30, r25
    cd5e:	f0 e0       	ldi	r31, 0x00	; 0
    cd60:	ee 0f       	add	r30, r30
    cd62:	ff 1f       	adc	r31, r31
    cd64:	ee 0f       	add	r30, r30
    cd66:	ff 1f       	adc	r31, r31
    cd68:	df 01       	movw	r26, r30
    cd6a:	a4 5d       	subi	r26, 0xD4	; 212
    cd6c:	bb 4f       	sbci	r27, 0xFB	; 251
    cd6e:	88 81       	ld	r24, Y
    cd70:	87 50       	subi	r24, 0x07	; 7
    cd72:	83 0f       	add	r24, r19
    cd74:	8c 93       	st	X, r24
	sprites[spritecount].y = y;
    cd76:	11 96       	adiw	r26, 0x01	; 1
    cd78:	2c 93       	st	X, r18
    cd7a:	11 97       	sbiw	r26, 0x01	; 1
	sprites[spritecount].tileIndex = frame;
    cd7c:	e2 5d       	subi	r30, 0xD2	; 210
    cd7e:	fb 4f       	sbci	r31, 0xFB	; 251
    cd80:	b0 82       	st	Z, r11
	sprites[spritecount++].flags = flags;
    cd82:	13 96       	adiw	r26, 0x03	; 3
    cd84:	1c 92       	st	X, r1
    cd86:	9f 5f       	subi	r25, 0xFF	; 255
    cd88:	90 93 cb 0f 	sts	0x0FCB, r25
    cd8c:	38 50       	subi	r19, 0x08	; 8
			if(Cheats[i]){
				if(facing){
					for(uint8_t j=0;j<3;j++)
						SetSprite(Frogs[i].x+15+(j*8),Frogs[i].y-0,49,0);
				}else{
					for(uint8_t j=0;j<3;j++)
    cd8e:	38 3e       	cpi	r19, 0xE8	; 232
    cd90:	11 f7       	brne	.-60     	; 0xcd56 <Render+0x142>
						SetSprite(Frogs[i].x-7-(j*8),Frogs[i].y-0,49,0);
				}
			}
			}
		if(Frogs[i].State & SWIMMING){//draw water ripples
    cd92:	8a 89       	ldd	r24, Y+18	; 0x12
    cd94:	87 ff       	sbrs	r24, 7
    cd96:	27 c0       	rjmp	.+78     	; 0xcde6 <Render+0x1d2>
    cd98:	80 91 20 10 	lds	r24, 0x1020
    cd9c:	98 81       	ld	r25, Y
			if((!i && (Time & 2)) || (i && !(Time & 2)))//don't draw full ripples on both frogs in the same frame(crashes sometimes/run out of time)
    cd9e:	dd 20       	and	r13, r13
    cda0:	19 f4       	brne	.+6      	; 0xcda8 <Render+0x194>
    cda2:	81 fd       	sbrc	r24, 1
    cda4:	03 c0       	rjmp	.+6      	; 0xcdac <Render+0x198>
    cda6:	10 c0       	rjmp	.+32     	; 0xcdc8 <Render+0x1b4>
    cda8:	81 fd       	sbrc	r24, 1
    cdaa:	0e c0       	rjmp	.+28     	; 0xcdc8 <Render+0x1b4>
				DrawSpriteFrame(Frogs[i].x-6 +(Frogs[i].x&2),Frogs[i].y,72+((Frogs[i].x&4)>>2));
    cdac:	89 2f       	mov	r24, r25
    cdae:	82 70       	andi	r24, 0x02	; 2
    cdb0:	49 2f       	mov	r20, r25
    cdb2:	50 e0       	ldi	r21, 0x00	; 0
    cdb4:	44 70       	andi	r20, 0x04	; 4
    cdb6:	50 70       	andi	r21, 0x00	; 0
    cdb8:	55 95       	asr	r21
    cdba:	47 95       	ror	r20
    cdbc:	55 95       	asr	r21
    cdbe:	47 95       	ror	r20
    cdc0:	48 5b       	subi	r20, 0xB8	; 184
    cdc2:	96 50       	subi	r25, 0x06	; 6
    cdc4:	89 0f       	add	r24, r25
    cdc6:	0c c0       	rjmp	.+24     	; 0xcde0 <Render+0x1cc>
			else
				DrawSpriteFrame(Frogs[i].x+14-(Frogs[i].x&2),Frogs[i].y,74+((Frogs[i].x&4)>>2));
    cdc8:	49 2f       	mov	r20, r25
    cdca:	50 e0       	ldi	r21, 0x00	; 0
    cdcc:	44 70       	andi	r20, 0x04	; 4
    cdce:	50 70       	andi	r21, 0x00	; 0
    cdd0:	55 95       	asr	r21
    cdd2:	47 95       	ror	r20
    cdd4:	55 95       	asr	r21
    cdd6:	47 95       	ror	r20
    cdd8:	46 5b       	subi	r20, 0xB6	; 182
    cdda:	9d 7f       	andi	r25, 0xFD	; 253
    cddc:	89 2f       	mov	r24, r25
    cdde:	82 5f       	subi	r24, 0xF2	; 242
    cde0:	69 81       	ldd	r22, Y+1	; 0x01
    cde2:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
			
		}
		
		if(Frogs[i].BlinkTime < 4 && (Frogs[i].State & (SITTING|SWIMMING)))
    cde6:	8e 85       	ldd	r24, Y+14	; 0x0e
    cde8:	84 30       	cpi	r24, 0x04	; 4
    cdea:	20 f4       	brcc	.+8      	; 0xcdf4 <Render+0x1e0>
    cdec:	8a 89       	ldd	r24, Y+18	; 0x12
    cdee:	81 78       	andi	r24, 0x81	; 129
    cdf0:	09 f0       	breq	.+2      	; 0xcdf4 <Render+0x1e0>
			rframe += 3;
    cdf2:	0d 5f       	subi	r16, 0xFD	; 253
		if(ColorIndex > 5){//swap light and dark frogs, because the fading bits actually make the darker one lighter(annoying/disorienting)
    cdf4:	80 91 d1 0f 	lds	r24, 0x0FD1
    cdf8:	86 30       	cpi	r24, 0x06	; 6
    cdfa:	28 f0       	brcs	.+10     	; 0xce06 <Render+0x1f2>
			if(i){rframe -= 32;}else{rframe += 32;}
    cdfc:	dd 20       	and	r13, r13
    cdfe:	11 f0       	breq	.+4      	; 0xce04 <Render+0x1f0>
    ce00:	00 52       	subi	r16, 0x20	; 32
    ce02:	01 c0       	rjmp	.+2      	; 0xce06 <Render+0x1f2>
    ce04:	00 5e       	subi	r16, 0xE0	; 224
		}
	//	Frogs[i].State = STUNNED;
//	Frogs[i].Facing = 0;
		rframe += Frogs[i].Frame;
		DrawSpriteFrame(Frogs[i].x,Frogs[i].y,rframe);
    ce06:	8c 89       	ldd	r24, Y+20	; 0x14
    ce08:	08 0f       	add	r16, r24
    ce0a:	88 81       	ld	r24, Y
    ce0c:	69 81       	ldd	r22, Y+1	; 0x01
    ce0e:	40 2f       	mov	r20, r16
    ce10:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>


void Render(){
	DrawScores();
	HideSprites();
	for(uint8_t i=0;i<MAXPLAYERS;i++){
    ce14:	d3 94       	inc	r13
    ce16:	67 96       	adiw	r28, 0x17	; 23
    ce18:	f0 e2       	ldi	r31, 0x20	; 32
    ce1a:	cf 0e       	add	r12, r31
    ce1c:	08 94       	sec
    ce1e:	e1 1c       	adc	r14, r1
    ce20:	f1 1c       	adc	r15, r1
    ce22:	82 e0       	ldi	r24, 0x02	; 2
    ce24:	d8 16       	cp	r13, r24
    ce26:	09 f0       	breq	.+2      	; 0xce2a <Render+0x216>
    ce28:	3a cf       	rjmp	.-396    	; 0xcc9e <Render+0x8a>
    ce2a:	03 ed       	ldi	r16, 0xD3	; 211
    ce2c:	1f e0       	ldi	r17, 0x0F	; 15
		DrawSpriteFrame(Frogs[i].x,Frogs[i].y,rframe);
	*/
		
	}
	for(uint8_t i=0;i<MAXFLIES;i++){
		if(!(Flies[i].State & ACTIVE) || Flies[i].RebirthTimer)
    ce2e:	d8 01       	movw	r26, r16
    ce30:	14 96       	adiw	r26, 0x04	; 4
    ce32:	8c 91       	ld	r24, X
    ce34:	14 97       	sbiw	r26, 0x04	; 4
    ce36:	84 ff       	sbrs	r24, 4
    ce38:	43 c0       	rjmp	.+134    	; 0xcec0 <Render+0x2ac>
    ce3a:	12 96       	adiw	r26, 0x02	; 2
    ce3c:	8d 91       	ld	r24, X+
    ce3e:	9c 91       	ld	r25, X
    ce40:	13 97       	sbiw	r26, 0x03	; 3
    ce42:	89 2b       	or	r24, r25
    ce44:	e9 f5       	brne	.+122    	; 0xcec0 <Render+0x2ac>
			continue;
		sprites[spritecount].x = Flies[i].x;
    ce46:	e0 91 cb 0f 	lds	r30, 0x0FCB
    ce4a:	ce 2f       	mov	r28, r30
    ce4c:	d0 e0       	ldi	r29, 0x00	; 0
    ce4e:	cc 0f       	add	r28, r28
    ce50:	dd 1f       	adc	r29, r29
    ce52:	cc 0f       	add	r28, r28
    ce54:	dd 1f       	adc	r29, r29
    ce56:	fe 01       	movw	r30, r28
    ce58:	e4 5d       	subi	r30, 0xD4	; 212
    ce5a:	fb 4f       	sbci	r31, 0xFB	; 251
    ce5c:	8c 91       	ld	r24, X
    ce5e:	80 83       	st	Z, r24
		sprites[spritecount].y = Flies[i].y;
    ce60:	11 96       	adiw	r26, 0x01	; 1
    ce62:	8c 91       	ld	r24, X
    ce64:	81 83       	std	Z+1, r24	; 0x01
		sprites[spritecount].tileIndex = FLYSPRITE+(prng()&1);////((Flies[i].JumpTime>>2)&1);
    ce66:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    ce6a:	c2 5d       	subi	r28, 0xD2	; 210
    ce6c:	db 4f       	sbci	r29, 0xFB	; 251
    ce6e:	81 70       	andi	r24, 0x01	; 1
    ce70:	87 5d       	subi	r24, 0xD7	; 215
    ce72:	88 83       	st	Y, r24
		sprites[spritecount++].flags = 0;
    ce74:	80 91 cb 0f 	lds	r24, 0x0FCB
    ce78:	e8 2f       	mov	r30, r24
    ce7a:	f0 e0       	ldi	r31, 0x00	; 0
    ce7c:	ee 0f       	add	r30, r30
    ce7e:	ff 1f       	adc	r31, r31
    ce80:	ee 0f       	add	r30, r30
    ce82:	ff 1f       	adc	r31, r31
    ce84:	e4 5d       	subi	r30, 0xD4	; 212
    ce86:	fb 4f       	sbci	r31, 0xFB	; 251
    ce88:	13 82       	std	Z+3, r1	; 0x03
    ce8a:	8f 5f       	subi	r24, 0xFF	; 255
    ce8c:	80 93 cb 0f 	sts	0x0FCB, r24
		if(sprites[spritecount-1].tileIndex != FLYSPRITE)
    ce90:	28 2f       	mov	r18, r24
    ce92:	30 e0       	ldi	r19, 0x00	; 0
    ce94:	21 50       	subi	r18, 0x01	; 1
    ce96:	30 40       	sbci	r19, 0x00	; 0
    ce98:	f9 01       	movw	r30, r18
    ce9a:	ee 0f       	add	r30, r30
    ce9c:	ff 1f       	adc	r31, r31
    ce9e:	ee 0f       	add	r30, r30
    cea0:	ff 1f       	adc	r31, r31
    cea2:	e2 5d       	subi	r30, 0xD2	; 210
    cea4:	fb 4f       	sbci	r31, 0xFB	; 251
    cea6:	80 81       	ld	r24, Z
    cea8:	89 32       	cpi	r24, 0x29	; 41
    ceaa:	51 f0       	breq	.+20     	; 0xcec0 <Render+0x2ac>
			sprites[spritecount-1].y += 4;
    ceac:	f9 01       	movw	r30, r18
    ceae:	ee 0f       	add	r30, r30
    ceb0:	ff 1f       	adc	r31, r31
    ceb2:	ee 0f       	add	r30, r30
    ceb4:	ff 1f       	adc	r31, r31
    ceb6:	e4 5d       	subi	r30, 0xD4	; 212
    ceb8:	fb 4f       	sbci	r31, 0xFB	; 251
    ceba:	81 81       	ldd	r24, Z+1	; 0x01
    cebc:	8c 5f       	subi	r24, 0xFC	; 252
    cebe:	81 83       	std	Z+1, r24	; 0x01
    cec0:	0b 5f       	subi	r16, 0xFB	; 251
    cec2:	1f 4f       	sbci	r17, 0xFF	; 255
			rframe++;
		DrawSpriteFrame(Frogs[i].x,Frogs[i].y,rframe);
	*/
		
	}
	for(uint8_t i=0;i<MAXFLIES;i++){
    cec4:	bf e0       	ldi	r27, 0x0F	; 15
    cec6:	07 3e       	cpi	r16, 0xE7	; 231
    cec8:	1b 07       	cpc	r17, r27
    ceca:	09 f0       	breq	.+2      	; 0xcece <Render+0x2ba>
    cecc:	b0 cf       	rjmp	.-160    	; 0xce2e <Render+0x21a>
		sprites[spritecount].tileIndex = FLYSPRITE+(prng()&1);////((Flies[i].JumpTime>>2)&1);
		sprites[spritecount++].flags = 0;
		if(sprites[spritecount-1].tileIndex != FLYSPRITE)
			sprites[spritecount-1].y += 4;
	}
}
    cece:	cd b7       	in	r28, 0x3d	; 61
    ced0:	de b7       	in	r29, 0x3e	; 62
    ced2:	e9 e0       	ldi	r30, 0x09	; 9
    ced4:	0c 94 17 77 	jmp	0xee2e	; 0xee2e <__epilogue_restores__+0x12>

0000ced8 <UpdateFrogs>:
		}
	}

}

void UpdateFrogs(){
    ced8:	a0 e0       	ldi	r26, 0x00	; 0
    ceda:	b0 e0       	ldi	r27, 0x00	; 0
    cedc:	e2 e7       	ldi	r30, 0x72	; 114
    cede:	f7 e6       	ldi	r31, 0x67	; 103
    cee0:	0c 94 f2 76 	jmp	0xede4	; 0xede4 <__prologue_saves__>
    cee4:	bb 24       	eor	r11, r11
    cee6:	b2 e0       	ldi	r27, 0x02	; 2
    cee8:	ab 2e       	mov	r10, r27

	for(uint8_t i=0;i<MAXPLAYERS;i++){
		if(Frogs[i].InvincibleTimer){Frogs[i].InvincibleTimer--;}
    ceea:	a7 e1       	ldi	r26, 0x17	; 23
    ceec:	ea 2e       	mov	r14, r26
    ceee:	f1 2c       	mov	r15, r1
							Frogs[i].State = ((Frogs[i].State & FACING)|DROPPING);
							//Frogs[i].AIState = DROPPING;//AITODO
						}else if(Frogs[i].y < FROGY){//just barely off the ground, gets pummelled!
							Frogs[i].y += STOMPVELOCITY;
							if(Frogs[i].y >= FROGY){
								Frogs[i].y = FROGY;
    cef0:	fc ea       	ldi	r31, 0xAC	; 172
    cef2:	3f 2e       	mov	r3, r31
		else					{Frogs[i].BlinkTime = (40)+(prng()&0xA0);}

		if(Frogs[i].y == FROGY)
			Frogs[i].Chain = 0;

		if(!Frogs[i].InvincibleTimer && (Frogs[!i].State & STOMPING) && !Frogs[!i].Wait){//we aren't immune, other frog is stomping and done with the spin part
    cef4:	e1 e0       	ldi	r30, 0x01	; 1
    cef6:	8e 2e       	mov	r8, r30
    cef8:	91 2c       	mov	r9, r1
			}
		}

		if(Frogs[i].State & TONGUEING){//update tongue
			if((++Frogs[i].TongueTime == LICKLENGTH) || !(Frogs[i].State & (JUMPING|FALLING))){
				Frogs[i].State ^= TONGUEING;
    cefa:	61 2c       	mov	r6, r1
    cefc:	71 e0       	ldi	r23, 0x01	; 1
    cefe:	77 2e       	mov	r7, r23
			//check for wall jump
			if(JoyVal[i] & JUMP_BUTTON && !(OldJoyVal[i] & JUMP_BUTTON)){
				if((Frogs[i].x < 2 && (Frogs[i].State & FACING)) || (Frogs[i].x > (SCREEN_TILES_H*TILE_WIDTH)-((TILE_WIDTH*2)+2) && !(Frogs[i].State & FACING))){
					Frogs[i].State = (JUMPING|(Frogs[i].State & FACING));
					Frogs[i].xVel = JUMPINITIALXMOMENTUM*4;
					Frogs[i].yVel = JUMPINITIALACCELERATION;
    cf00:	41 2c       	mov	r4, r1
    cf02:	63 e0       	ldi	r22, 0x03	; 3
    cf04:	56 2e       	mov	r5, r22
					Frogs[i].JumpCeiling = DOUBLEJUMPCEILING;
    cf06:	56 e0       	ldi	r21, 0x06	; 6
    cf08:	25 2e       	mov	r2, r21
}

void UpdateFrogs(){

	for(uint8_t i=0;i<MAXPLAYERS;i++){
		if(Frogs[i].InvincibleTimer){Frogs[i].InvincibleTimer--;}
    cf0a:	0b 2d       	mov	r16, r11
    cf0c:	10 e0       	ldi	r17, 0x00	; 0
    cf0e:	0e 9d       	mul	r16, r14
    cf10:	f0 01       	movw	r30, r0
    cf12:	0f 9d       	mul	r16, r15
    cf14:	f0 0d       	add	r31, r0
    cf16:	1e 9d       	mul	r17, r14
    cf18:	f0 0d       	add	r31, r0
    cf1a:	11 24       	eor	r1, r1
    cf1c:	e9 51       	subi	r30, 0x19	; 25
    cf1e:	f0 4f       	sbci	r31, 0xF0	; 240
    cf20:	83 85       	ldd	r24, Z+11	; 0x0b
    cf22:	88 23       	and	r24, r24
    cf24:	11 f0       	breq	.+4      	; 0xcf2a <UpdateFrogs+0x52>
    cf26:	81 50       	subi	r24, 0x01	; 1
    cf28:	83 87       	std	Z+11, r24	; 0x0b
		if(Frogs[i].Wait)		{Frogs[i].Wait--;}
    cf2a:	0e 9d       	mul	r16, r14
    cf2c:	f0 01       	movw	r30, r0
    cf2e:	0f 9d       	mul	r16, r15
    cf30:	f0 0d       	add	r31, r0
    cf32:	1e 9d       	mul	r17, r14
    cf34:	f0 0d       	add	r31, r0
    cf36:	11 24       	eor	r1, r1
    cf38:	e9 51       	subi	r30, 0x19	; 25
    cf3a:	f0 4f       	sbci	r31, 0xF0	; 240
    cf3c:	87 85       	ldd	r24, Z+15	; 0x0f
    cf3e:	88 23       	and	r24, r24
    cf40:	11 f0       	breq	.+4      	; 0xcf46 <UpdateFrogs+0x6e>
    cf42:	81 50       	subi	r24, 0x01	; 1
    cf44:	87 87       	std	Z+15, r24	; 0x0f
		if(Frogs[i].BlinkTime)	{Frogs[i].BlinkTime--;}
    cf46:	0e 9d       	mul	r16, r14
    cf48:	e0 01       	movw	r28, r0
    cf4a:	0f 9d       	mul	r16, r15
    cf4c:	d0 0d       	add	r29, r0
    cf4e:	1e 9d       	mul	r17, r14
    cf50:	d0 0d       	add	r29, r0
    cf52:	11 24       	eor	r1, r1
    cf54:	c9 51       	subi	r28, 0x19	; 25
    cf56:	d0 4f       	sbci	r29, 0xF0	; 240
    cf58:	8e 85       	ldd	r24, Y+14	; 0x0e
    cf5a:	88 23       	and	r24, r24
    cf5c:	11 f0       	breq	.+4      	; 0xcf62 <UpdateFrogs+0x8a>
    cf5e:	81 50       	subi	r24, 0x01	; 1
    cf60:	04 c0       	rjmp	.+8      	; 0xcf6a <UpdateFrogs+0x92>
		else					{Frogs[i].BlinkTime = (40)+(prng()&0xA0);}
    cf62:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    cf66:	80 7a       	andi	r24, 0xA0	; 160
    cf68:	88 5d       	subi	r24, 0xD8	; 216
    cf6a:	8e 87       	std	Y+14, r24	; 0x0e

		if(Frogs[i].y == FROGY)
    cf6c:	0e 9d       	mul	r16, r14
    cf6e:	f0 01       	movw	r30, r0
    cf70:	0f 9d       	mul	r16, r15
    cf72:	f0 0d       	add	r31, r0
    cf74:	1e 9d       	mul	r17, r14
    cf76:	f0 0d       	add	r31, r0
    cf78:	11 24       	eor	r1, r1
    cf7a:	e9 51       	subi	r30, 0x19	; 25
    cf7c:	f0 4f       	sbci	r31, 0xF0	; 240
    cf7e:	81 81       	ldd	r24, Z+1	; 0x01
    cf80:	8c 3a       	cpi	r24, 0xAC	; 172
    cf82:	09 f4       	brne	.+2      	; 0xcf86 <UpdateFrogs+0xae>
			Frogs[i].Chain = 0;
    cf84:	16 8a       	std	Z+22, r1	; 0x16

		if(!Frogs[i].InvincibleTimer && (Frogs[!i].State & STOMPING) && !Frogs[!i].Wait){//we aren't immune, other frog is stomping and done with the spin part
    cf86:	0e 9d       	mul	r16, r14
    cf88:	f0 01       	movw	r30, r0
    cf8a:	0f 9d       	mul	r16, r15
    cf8c:	f0 0d       	add	r31, r0
    cf8e:	1e 9d       	mul	r17, r14
    cf90:	f0 0d       	add	r31, r0
    cf92:	11 24       	eor	r1, r1
    cf94:	e9 51       	subi	r30, 0x19	; 25
    cf96:	f0 4f       	sbci	r31, 0xF0	; 240
    cf98:	83 85       	ldd	r24, Z+11	; 0x0b
    cf9a:	88 23       	and	r24, r24
    cf9c:	09 f0       	breq	.+2      	; 0xcfa0 <UpdateFrogs+0xc8>
    cf9e:	a2 c0       	rjmp	.+324    	; 0xd0e4 <UpdateFrogs+0x20c>
    cfa0:	cc 24       	eor	r12, r12
    cfa2:	dd 24       	eor	r13, r13
    cfa4:	bb 20       	and	r11, r11
    cfa6:	19 f4       	brne	.+6      	; 0xcfae <UpdateFrogs+0xd6>
    cfa8:	41 e0       	ldi	r20, 0x01	; 1
    cfaa:	c4 2e       	mov	r12, r20
    cfac:	d1 2c       	mov	r13, r1
    cfae:	ce 9c       	mul	r12, r14
    cfb0:	e0 01       	movw	r28, r0
    cfb2:	cf 9c       	mul	r12, r15
    cfb4:	d0 0d       	add	r29, r0
    cfb6:	de 9c       	mul	r13, r14
    cfb8:	d0 0d       	add	r29, r0
    cfba:	11 24       	eor	r1, r1
    cfbc:	c9 51       	subi	r28, 0x19	; 25
    cfbe:	d0 4f       	sbci	r29, 0xF0	; 240
    cfc0:	8a 89       	ldd	r24, Y+18	; 0x12
    cfc2:	9b 89       	ldd	r25, Y+19	; 0x13
    cfc4:	a0 e0       	ldi	r26, 0x00	; 0
    cfc6:	b0 e0       	ldi	r27, 0x00	; 0
    cfc8:	92 ff       	sbrs	r25, 2
    cfca:	8c c0       	rjmp	.+280    	; 0xd0e4 <UpdateFrogs+0x20c>
    cfcc:	8f 85       	ldd	r24, Y+15	; 0x0f
    cfce:	88 23       	and	r24, r24
    cfd0:	09 f0       	breq	.+2      	; 0xcfd4 <UpdateFrogs+0xfc>
    cfd2:	88 c0       	rjmp	.+272    	; 0xd0e4 <UpdateFrogs+0x20c>
			if(!(	(Frogs[!i].x > Frogs[i].x+14) ||
    cfd4:	88 81       	ld	r24, Y
    cfd6:	28 2f       	mov	r18, r24
    cfd8:	30 e0       	ldi	r19, 0x00	; 0
    cfda:	0e 9d       	mul	r16, r14
    cfdc:	f0 01       	movw	r30, r0
    cfde:	0f 9d       	mul	r16, r15
    cfe0:	f0 0d       	add	r31, r0
    cfe2:	1e 9d       	mul	r17, r14
    cfe4:	f0 0d       	add	r31, r0
    cfe6:	11 24       	eor	r1, r1
    cfe8:	e9 51       	subi	r30, 0x19	; 25
    cfea:	f0 4f       	sbci	r31, 0xF0	; 240
    cfec:	80 81       	ld	r24, Z
    cfee:	48 2f       	mov	r20, r24
    cff0:	50 e0       	ldi	r21, 0x00	; 0
    cff2:	ca 01       	movw	r24, r20
    cff4:	0e 96       	adiw	r24, 0x0e	; 14
    cff6:	82 17       	cp	r24, r18
    cff8:	93 07       	cpc	r25, r19
    cffa:	0c f4       	brge	.+2      	; 0xcffe <UpdateFrogs+0x126>
    cffc:	73 c0       	rjmp	.+230    	; 0xd0e4 <UpdateFrogs+0x20c>
    cffe:	22 5f       	subi	r18, 0xF2	; 242
    d000:	3f 4f       	sbci	r19, 0xFF	; 255
    d002:	24 17       	cp	r18, r20
    d004:	35 07       	cpc	r19, r21
    d006:	0c f4       	brge	.+2      	; 0xd00a <UpdateFrogs+0x132>
    d008:	6d c0       	rjmp	.+218    	; 0xd0e4 <UpdateFrogs+0x20c>
    d00a:	89 81       	ldd	r24, Y+1	; 0x01
    d00c:	28 2f       	mov	r18, r24
    d00e:	30 e0       	ldi	r19, 0x00	; 0
    d010:	81 81       	ldd	r24, Z+1	; 0x01
    d012:	48 2f       	mov	r20, r24
    d014:	50 e0       	ldi	r21, 0x00	; 0
    d016:	c9 01       	movw	r24, r18
    d018:	07 96       	adiw	r24, 0x07	; 7
    d01a:	84 17       	cp	r24, r20
    d01c:	95 07       	cpc	r25, r21
    d01e:	0c f0       	brlt	.+2      	; 0xd022 <UpdateFrogs+0x14a>
    d020:	61 c0       	rjmp	.+194    	; 0xd0e4 <UpdateFrogs+0x20c>
    d022:	20 5f       	subi	r18, 0xF0	; 240
    d024:	3f 4f       	sbci	r19, 0xFF	; 255
    d026:	24 17       	cp	r18, r20
    d028:	35 07       	cpc	r19, r21
    d02a:	0c f4       	brge	.+2      	; 0xd02e <UpdateFrogs+0x156>
    d02c:	5b c0       	rjmp	.+182    	; 0xd0e4 <UpdateFrogs+0x20c>
					(Frogs[!i].x+14 < Frogs[i].x) ||
					(Frogs[!i].y+8 > Frogs[i].y)  ||
					(Frogs[!i].y+16 < Frogs[i].y))){//got hit by the other frog
							FFTriggerPCM(SFX_FROG,30+(prng()%3),200);
    d02e:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    d032:	9c 01       	movw	r18, r24
	if(SoundsOn)
		TriggerFx(patch,255,1);
}

void FFTriggerPCM(uint8_t patch, uint8_t freq, uint8_t vol){
	if(SoundsOn)
    d034:	80 91 1b 10 	lds	r24, 0x101B
    d038:	88 23       	and	r24, r24
    d03a:	61 f0       	breq	.+24     	; 0xd054 <UpdateFrogs+0x17c>
		TriggerNote(4,patch,freq,vol);
    d03c:	c9 01       	movw	r24, r18
    d03e:	63 e0       	ldi	r22, 0x03	; 3
    d040:	70 e0       	ldi	r23, 0x00	; 0
    d042:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    d046:	48 2f       	mov	r20, r24
    d048:	42 5e       	subi	r20, 0xE2	; 226
    d04a:	84 e0       	ldi	r24, 0x04	; 4
    d04c:	60 e0       	ldi	r22, 0x00	; 0
    d04e:	28 ec       	ldi	r18, 0xC8	; 200
    d050:	0e 94 4f 55 	call	0xaa9e	; 0xaa9e <TriggerNote>
						if(Frogs[i].State & (STUNNED|SWIMMING)){//do nothing
    d054:	0e 9d       	mul	r16, r14
    d056:	f0 01       	movw	r30, r0
    d058:	0f 9d       	mul	r16, r15
    d05a:	f0 0d       	add	r31, r0
    d05c:	1e 9d       	mul	r17, r14
    d05e:	f0 0d       	add	r31, r0
    d060:	11 24       	eor	r1, r1
    d062:	e9 51       	subi	r30, 0x19	; 25
    d064:	f0 4f       	sbci	r31, 0xF0	; 240
    d066:	22 89       	ldd	r18, Z+18	; 0x12
    d068:	33 89       	ldd	r19, Z+19	; 0x13
    d06a:	c9 01       	movw	r24, r18
    d06c:	80 78       	andi	r24, 0x80	; 128
    d06e:	92 70       	andi	r25, 0x02	; 2
    d070:	89 2b       	or	r24, r25
    d072:	c1 f5       	brne	.+112    	; 0xd0e4 <UpdateFrogs+0x20c>

						}else if(Frogs[i].y < FROGY-24){//we are in the air, we don't get stunned, but we do fall downwards. We keep x momentum but lose all steering this jump
    d074:	81 81       	ldd	r24, Z+1	; 0x01
    d076:	84 39       	cpi	r24, 0x94	; 148
    d078:	30 f4       	brcc	.+12     	; 0xd086 <UpdateFrogs+0x1ae>
							Frogs[i].State = ((Frogs[i].State & FACING)|DROPPING);
    d07a:	24 70       	andi	r18, 0x04	; 4
    d07c:	30 70       	andi	r19, 0x00	; 0
    d07e:	20 62       	ori	r18, 0x20	; 32
    d080:	33 8b       	std	Z+19, r19	; 0x13
    d082:	22 8b       	std	Z+18, r18	; 0x12
    d084:	2f c0       	rjmp	.+94     	; 0xd0e4 <UpdateFrogs+0x20c>
							//Frogs[i].AIState = DROPPING;//AITODO
						}else if(Frogs[i].y < FROGY){//just barely off the ground, gets pummelled!
    d086:	8c 3a       	cpi	r24, 0xAC	; 172
    d088:	b0 f4       	brcc	.+44     	; 0xd0b6 <UpdateFrogs+0x1de>
							Frogs[i].y += STOMPVELOCITY;
    d08a:	88 5f       	subi	r24, 0xF8	; 248
    d08c:	81 83       	std	Z+1, r24	; 0x01
							if(Frogs[i].y >= FROGY){
    d08e:	8c 3a       	cpi	r24, 0xAC	; 172
    d090:	08 f0       	brcs	.+2      	; 0xd094 <UpdateFrogs+0x1bc>
								Frogs[i].y = FROGY;
    d092:	31 82       	std	Z+1, r3	; 0x01
								//STOP FORWARD MOMENTUM
							}
							Frogs[i].State = ((Frogs[i].State & FACING)|DROPPING);
    d094:	0e 9d       	mul	r16, r14
    d096:	f0 01       	movw	r30, r0
    d098:	0f 9d       	mul	r16, r15
    d09a:	f0 0d       	add	r31, r0
    d09c:	1e 9d       	mul	r17, r14
    d09e:	f0 0d       	add	r31, r0
    d0a0:	11 24       	eor	r1, r1
    d0a2:	e9 51       	subi	r30, 0x19	; 25
    d0a4:	f0 4f       	sbci	r31, 0xF0	; 240
    d0a6:	82 89       	ldd	r24, Z+18	; 0x12
    d0a8:	93 89       	ldd	r25, Z+19	; 0x13
    d0aa:	84 70       	andi	r24, 0x04	; 4
    d0ac:	90 70       	andi	r25, 0x00	; 0
    d0ae:	80 62       	ori	r24, 0x20	; 32
    d0b0:	93 8b       	std	Z+19, r25	; 0x13
    d0b2:	82 8b       	std	Z+18, r24	; 0x12
    d0b4:	17 c0       	rjmp	.+46     	; 0xd0e4 <UpdateFrogs+0x20c>
							//score is added in DROPPING state below
							//Frogs[i].AIState = DROPPING;//AITODO
						}else{//TODO, check for already stunned, turning should finish turning first, etc.
							Frogs[i].State = STUNNED|(Frogs[i].State&FACING);
    d0b6:	24 70       	andi	r18, 0x04	; 4
    d0b8:	30 70       	andi	r19, 0x00	; 0
    d0ba:	32 60       	ori	r19, 0x02	; 2
    d0bc:	33 8b       	std	Z+19, r19	; 0x13
    d0be:	22 8b       	std	Z+18, r18	; 0x12
							Frogs[i].AIState = AI_STUNNED;
    d0c0:	20 e4       	ldi	r18, 0x40	; 64
    d0c2:	20 8b       	std	Z+16, r18	; 0x10
							Frogs[i].Wait = STUNTIME;
    d0c4:	32 ed       	ldi	r19, 0xD2	; 210
    d0c6:	37 87       	std	Z+15, r19	; 0x0f
							Frogs[i].InvincibleTimer = 254;//this will get set to 48 when stun is done
    d0c8:	4e ef       	ldi	r20, 0xFE	; 254
    d0ca:	43 87       	std	Z+11, r20	; 0x0b
							Frogs[!i].Score += STOMPSCORE;//too easy to cheat when playing 1player in a 2 player game for high score? Due to timer max would be ~30 pts in 1:30
    d0cc:	ce 9c       	mul	r12, r14
    d0ce:	f0 01       	movw	r30, r0
    d0d0:	cf 9c       	mul	r12, r15
    d0d2:	f0 0d       	add	r31, r0
    d0d4:	de 9c       	mul	r13, r14
    d0d6:	f0 0d       	add	r31, r0
    d0d8:	11 24       	eor	r1, r1
    d0da:	e9 51       	subi	r30, 0x19	; 25
    d0dc:	f0 4f       	sbci	r31, 0xF0	; 240
    d0de:	85 89       	ldd	r24, Z+21	; 0x15
    d0e0:	8f 5f       	subi	r24, 0xFF	; 255
    d0e2:	85 8b       	std	Z+21, r24	; 0x15
						}
					}
		}

		if((Frogs[i].State & STUNNED)){//
    d0e4:	0e 9d       	mul	r16, r14
    d0e6:	e0 01       	movw	r28, r0
    d0e8:	0f 9d       	mul	r16, r15
    d0ea:	d0 0d       	add	r29, r0
    d0ec:	1e 9d       	mul	r17, r14
    d0ee:	d0 0d       	add	r29, r0
    d0f0:	11 24       	eor	r1, r1
    d0f2:	c9 51       	subi	r28, 0x19	; 25
    d0f4:	d0 4f       	sbci	r29, 0xF0	; 240
    d0f6:	2a 89       	ldd	r18, Y+18	; 0x12
    d0f8:	3b 89       	ldd	r19, Y+19	; 0x13
    d0fa:	c9 01       	movw	r24, r18
    d0fc:	a0 e0       	ldi	r26, 0x00	; 0
    d0fe:	b0 e0       	ldi	r27, 0x00	; 0
    d100:	91 ff       	sbrs	r25, 1
    d102:	42 c0       	rjmp	.+132    	; 0xd188 <UpdateFrogs+0x2b0>

			if(!Frogs[i].Wait){//done being stunned
    d104:	8f 85       	ldd	r24, Y+15	; 0x0f
    d106:	88 23       	and	r24, r24
    d108:	59 f4       	brne	.+22     	; 0xd120 <UpdateFrogs+0x248>
				Frogs[i].InvincibleTimer = 48;//frog is immune from being immediately restunned
    d10a:	80 e3       	ldi	r24, 0x30	; 48
    d10c:	8b 87       	std	Y+11, r24	; 0x0b
				Frogs[i].State ^= STUNNED;
    d10e:	80 e0       	ldi	r24, 0x00	; 0
    d110:	92 e0       	ldi	r25, 0x02	; 2
    d112:	28 27       	eor	r18, r24
    d114:	39 27       	eor	r19, r25
				Frogs[i].AIState = AI_SIT;
    d116:	18 8a       	std	Y+16, r1	; 0x10
				Frogs[i].State |= SITTING;
    d118:	21 60       	ori	r18, 0x01	; 1
    d11a:	3b 8b       	std	Y+19, r19	; 0x13
    d11c:	2a 8b       	std	Y+18, r18	; 0x12
    d11e:	34 c0       	rjmp	.+104    	; 0xd188 <UpdateFrogs+0x2b0>
			}else{
				if((JoyVal[i] & (BTN_A|BTN_B|BTN_X|BTN_Y)) && !(OldJoyVal[i] & (BTN_A|BTN_B|BTN_X|BTN_Y)) && ((prng()&5) < 2)){
    d120:	d8 01       	movw	r26, r16
    d122:	aa 0f       	add	r26, r26
    d124:	bb 1f       	adc	r27, r27
    d126:	fd 01       	movw	r30, r26
    d128:	e4 5e       	subi	r30, 0xE4	; 228
    d12a:	ff 4e       	sbci	r31, 0xEF	; 239
    d12c:	80 81       	ld	r24, Z
    d12e:	91 81       	ldd	r25, Z+1	; 0x01
    d130:	83 70       	andi	r24, 0x03	; 3
    d132:	93 70       	andi	r25, 0x03	; 3
    d134:	89 2b       	or	r24, r25
    d136:	a9 f0       	breq	.+42     	; 0xd162 <UpdateFrogs+0x28a>
    d138:	a9 5e       	subi	r26, 0xE9	; 233
    d13a:	bf 4e       	sbci	r27, 0xEF	; 239
    d13c:	8d 91       	ld	r24, X+
    d13e:	9c 91       	ld	r25, X
    d140:	83 70       	andi	r24, 0x03	; 3
    d142:	93 70       	andi	r25, 0x03	; 3
    d144:	89 2b       	or	r24, r25
    d146:	69 f4       	brne	.+26     	; 0xd162 <UpdateFrogs+0x28a>
    d148:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    d14c:	85 70       	andi	r24, 0x05	; 5
    d14e:	90 70       	andi	r25, 0x00	; 0
    d150:	02 97       	sbiw	r24, 0x02	; 2
    d152:	38 f4       	brcc	.+14     	; 0xd162 <UpdateFrogs+0x28a>
					if(Frogs[i].Wait < 6)
    d154:	8f 85       	ldd	r24, Y+15	; 0x0f
    d156:	86 30       	cpi	r24, 0x06	; 6
    d158:	10 f4       	brcc	.+4      	; 0xd15e <UpdateFrogs+0x286>
						Frogs[i].Wait = 0;
    d15a:	1f 86       	std	Y+15, r1	; 0x0f
    d15c:	02 c0       	rjmp	.+4      	; 0xd162 <UpdateFrogs+0x28a>
					else
						Frogs[i].Wait -= 6;
    d15e:	86 50       	subi	r24, 0x06	; 6
    d160:	8f 87       	std	Y+15, r24	; 0x0f
				}
				Frogs[i].Frame = 6+((Frogs[i].Wait/8)%3);
    d162:	0e 9d       	mul	r16, r14
    d164:	f0 01       	movw	r30, r0
    d166:	0f 9d       	mul	r16, r15
    d168:	f0 0d       	add	r31, r0
    d16a:	1e 9d       	mul	r17, r14
    d16c:	f0 0d       	add	r31, r0
    d16e:	11 24       	eor	r1, r1
    d170:	e9 51       	subi	r30, 0x19	; 25
    d172:	f0 4f       	sbci	r31, 0xF0	; 240
    d174:	87 85       	ldd	r24, Z+15	; 0x0f
    d176:	86 95       	lsr	r24
    d178:	86 95       	lsr	r24
    d17a:	86 95       	lsr	r24
    d17c:	63 e0       	ldi	r22, 0x03	; 3
    d17e:	0e 94 bf 76 	call	0xed7e	; 0xed7e <__udivmodqi4>
    d182:	9a 5f       	subi	r25, 0xFA	; 250
    d184:	94 8b       	std	Z+20, r25	; 0x14
    d186:	e9 c4       	rjmp	.+2514   	; 0xdb5a <UpdateFrogs+0xc82>
				continue;
			}
		}

		if((Frogs[i].y < FROGY) && !(Frogs[i].State & STOMPING)){//can stomp
    d188:	0e 9d       	mul	r16, r14
    d18a:	f0 01       	movw	r30, r0
    d18c:	0f 9d       	mul	r16, r15
    d18e:	f0 0d       	add	r31, r0
    d190:	1e 9d       	mul	r17, r14
    d192:	f0 0d       	add	r31, r0
    d194:	11 24       	eor	r1, r1
    d196:	e9 51       	subi	r30, 0x19	; 25
    d198:	f0 4f       	sbci	r31, 0xF0	; 240
    d19a:	81 81       	ldd	r24, Z+1	; 0x01
    d19c:	8c 3a       	cpi	r24, 0xAC	; 172
    d19e:	78 f5       	brcc	.+94     	; 0xd1fe <UpdateFrogs+0x326>
    d1a0:	82 89       	ldd	r24, Z+18	; 0x12
    d1a2:	93 89       	ldd	r25, Z+19	; 0x13
    d1a4:	a0 e0       	ldi	r26, 0x00	; 0
    d1a6:	b0 e0       	ldi	r27, 0x00	; 0
    d1a8:	92 fd       	sbrc	r25, 2
    d1aa:	29 c0       	rjmp	.+82     	; 0xd1fe <UpdateFrogs+0x326>
			if(JoyVal[i] & BTN_DOWN && !(OldJoyVal[i] & BTN_DOWN)){
    d1ac:	d8 01       	movw	r26, r16
    d1ae:	aa 0f       	add	r26, r26
    d1b0:	bb 1f       	adc	r27, r27
    d1b2:	fd 01       	movw	r30, r26
    d1b4:	e4 5e       	subi	r30, 0xE4	; 228
    d1b6:	ff 4e       	sbci	r31, 0xEF	; 239
    d1b8:	80 81       	ld	r24, Z
    d1ba:	85 ff       	sbrs	r24, 5
    d1bc:	20 c0       	rjmp	.+64     	; 0xd1fe <UpdateFrogs+0x326>
    d1be:	a9 5e       	subi	r26, 0xE9	; 233
    d1c0:	bf 4e       	sbci	r27, 0xEF	; 239
    d1c2:	8c 91       	ld	r24, X
    d1c4:	85 fd       	sbrc	r24, 5
    d1c6:	1b c0       	rjmp	.+54     	; 0xd1fe <UpdateFrogs+0x326>

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    d1c8:	80 91 1b 10 	lds	r24, 0x101B
    d1cc:	88 23       	and	r24, r24
    d1ce:	29 f0       	breq	.+10     	; 0xd1da <UpdateFrogs+0x302>
		TriggerFx(patch,255,1);
    d1d0:	89 e0       	ldi	r24, 0x09	; 9
    d1d2:	6f ef       	ldi	r22, 0xFF	; 255
    d1d4:	41 e0       	ldi	r20, 0x01	; 1
    d1d6:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
				FFTriggerFx(SFX_STOMP);
				Frogs[i].Wait = STOMPSPINTIME;
    d1da:	0e 9d       	mul	r16, r14
    d1dc:	f0 01       	movw	r30, r0
    d1de:	0f 9d       	mul	r16, r15
    d1e0:	f0 0d       	add	r31, r0
    d1e2:	1e 9d       	mul	r17, r14
    d1e4:	f0 0d       	add	r31, r0
    d1e6:	11 24       	eor	r1, r1
    d1e8:	e9 51       	subi	r30, 0x19	; 25
    d1ea:	f0 4f       	sbci	r31, 0xF0	; 240
    d1ec:	88 e1       	ldi	r24, 0x18	; 24
    d1ee:	87 87       	std	Z+15, r24	; 0x0f
				Frogs[i].State = STOMPING|(Frogs[i].State & FACING);
    d1f0:	82 89       	ldd	r24, Z+18	; 0x12
    d1f2:	93 89       	ldd	r25, Z+19	; 0x13
    d1f4:	84 70       	andi	r24, 0x04	; 4
    d1f6:	90 70       	andi	r25, 0x00	; 0
    d1f8:	94 60       	ori	r25, 0x04	; 4
    d1fa:	93 8b       	std	Z+19, r25	; 0x13
    d1fc:	82 8b       	std	Z+18, r24	; 0x12
			}
		}

		if(Frogs[i].State & STOMPING){
    d1fe:	0e 9d       	mul	r16, r14
    d200:	f0 01       	movw	r30, r0
    d202:	0f 9d       	mul	r16, r15
    d204:	f0 0d       	add	r31, r0
    d206:	1e 9d       	mul	r17, r14
    d208:	f0 0d       	add	r31, r0
    d20a:	11 24       	eor	r1, r1
    d20c:	e9 51       	subi	r30, 0x19	; 25
    d20e:	f0 4f       	sbci	r31, 0xF0	; 240
    d210:	82 89       	ldd	r24, Z+18	; 0x12
    d212:	93 89       	ldd	r25, Z+19	; 0x13
    d214:	a0 e0       	ldi	r26, 0x00	; 0
    d216:	b0 e0       	ldi	r27, 0x00	; 0
    d218:	92 ff       	sbrs	r25, 2
    d21a:	31 c0       	rjmp	.+98     	; 0xd27e <UpdateFrogs+0x3a6>
			if(Frogs[i].Wait)//still spinning
    d21c:	87 85       	ldd	r24, Z+15	; 0x0f
    d21e:	88 23       	and	r24, r24
    d220:	49 f0       	breq	.+18     	; 0xd234 <UpdateFrogs+0x35c>
				Frogs[i].Frame = 12+4-((Frogs[i].Wait+((STOMPSPINTIME/4)-1))/(STOMPSPINTIME/4));
    d222:	90 e0       	ldi	r25, 0x00	; 0
    d224:	05 96       	adiw	r24, 0x05	; 5
    d226:	6a ef       	ldi	r22, 0xFA	; 250
    d228:	7f ef       	ldi	r23, 0xFF	; 255
    d22a:	0e 94 df 76 	call	0xedbe	; 0xedbe <__divmodhi4>
    d22e:	60 5f       	subi	r22, 0xF0	; 240
    d230:	64 8b       	std	Z+20, r22	; 0x14
    d232:	25 c0       	rjmp	.+74     	; 0xd27e <UpdateFrogs+0x3a6>
			else{//dropping
				Frogs[i].Frame = 12;
    d234:	8c e0       	ldi	r24, 0x0C	; 12
    d236:	84 8b       	std	Z+20, r24	; 0x14
				Frogs[i].y += 8;
    d238:	81 81       	ldd	r24, Z+1	; 0x01
    d23a:	88 5f       	subi	r24, 0xF8	; 248
    d23c:	81 83       	std	Z+1, r24	; 0x01
				if(Frogs[i].y >= FROGY){//landed
    d23e:	8c 3a       	cpi	r24, 0xAC	; 172
    d240:	f0 f0       	brcs	.+60     	; 0xd27e <UpdateFrogs+0x3a6>

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    d242:	80 91 1b 10 	lds	r24, 0x101B
    d246:	88 23       	and	r24, r24
    d248:	29 f0       	breq	.+10     	; 0xd254 <UpdateFrogs+0x37c>
		TriggerFx(patch,255,1);
    d24a:	85 e0       	ldi	r24, 0x05	; 5
    d24c:	6f ef       	ldi	r22, 0xFF	; 255
    d24e:	41 e0       	ldi	r20, 0x01	; 1
    d250:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
					FFTriggerFx(SFX_SMASH);
					Frogs[i].y = FROGY;
    d254:	0e 9d       	mul	r16, r14
    d256:	f0 01       	movw	r30, r0
    d258:	0f 9d       	mul	r16, r15
    d25a:	f0 0d       	add	r31, r0
    d25c:	1e 9d       	mul	r17, r14
    d25e:	f0 0d       	add	r31, r0
    d260:	11 24       	eor	r1, r1
    d262:	e9 51       	subi	r30, 0x19	; 25
    d264:	f0 4f       	sbci	r31, 0xF0	; 240
    d266:	31 82       	std	Z+1, r3	; 0x01
					Frogs[i].State ^= STOMPING;
					Frogs[i].State |= SITTING;
    d268:	82 89       	ldd	r24, Z+18	; 0x12
    d26a:	93 89       	ldd	r25, Z+19	; 0x13
    d26c:	20 e0       	ldi	r18, 0x00	; 0
    d26e:	34 e0       	ldi	r19, 0x04	; 4
    d270:	82 27       	eor	r24, r18
    d272:	93 27       	eor	r25, r19
    d274:	81 60       	ori	r24, 0x01	; 1
    d276:	93 8b       	std	Z+19, r25	; 0x13
    d278:	82 8b       	std	Z+18, r24	; 0x12
					Frogs[i].AIState = AI_CENTER;
    d27a:	84 e0       	ldi	r24, 0x04	; 4
    d27c:	80 8b       	std	Z+16, r24	; 0x10
				}
			}
		}

		if(Frogs[i].State & SWIMMING){//can only go to SITTING
    d27e:	0e 9d       	mul	r16, r14
    d280:	e0 01       	movw	r28, r0
    d282:	0f 9d       	mul	r16, r15
    d284:	d0 0d       	add	r29, r0
    d286:	1e 9d       	mul	r17, r14
    d288:	d0 0d       	add	r29, r0
    d28a:	11 24       	eor	r1, r1
    d28c:	c9 51       	subi	r28, 0x19	; 25
    d28e:	d0 4f       	sbci	r29, 0xF0	; 240
    d290:	8a 89       	ldd	r24, Y+18	; 0x12
    d292:	87 ff       	sbrs	r24, 7
    d294:	73 c0       	rjmp	.+230    	; 0xd37c <UpdateFrogs+0x4a4>
			if((JoyVal[i]&(LICK_BUTTON|JUMP_BUTTON)) && !(OldJoyVal[i]&(LICK_BUTTON|JUMP_BUTTON)))//player can swim faster by pushing buttons
    d296:	d8 01       	movw	r26, r16
    d298:	aa 0f       	add	r26, r26
    d29a:	bb 1f       	adc	r27, r27
    d29c:	fd 01       	movw	r30, r26
    d29e:	e4 5e       	subi	r30, 0xE4	; 228
    d2a0:	ff 4e       	sbci	r31, 0xEF	; 239
    d2a2:	01 90       	ld	r0, Z+
    d2a4:	f0 81       	ld	r31, Z
    d2a6:	e0 2d       	mov	r30, r0
    d2a8:	cf 01       	movw	r24, r30
    d2aa:	81 71       	andi	r24, 0x11	; 17
    d2ac:	9d 70       	andi	r25, 0x0D	; 13
    d2ae:	89 2b       	or	r24, r25
    d2b0:	49 f0       	breq	.+18     	; 0xd2c4 <UpdateFrogs+0x3ec>
    d2b2:	a9 5e       	subi	r26, 0xE9	; 233
    d2b4:	bf 4e       	sbci	r27, 0xEF	; 239
    d2b6:	8d 91       	ld	r24, X+
    d2b8:	9c 91       	ld	r25, X
    d2ba:	81 71       	andi	r24, 0x11	; 17
    d2bc:	9d 70       	andi	r25, 0x0D	; 13
    d2be:	89 2b       	or	r24, r25
    d2c0:	09 f4       	brne	.+2      	; 0xd2c4 <UpdateFrogs+0x3ec>
				Frogs[i].Wait = 0;
    d2c2:	1f 86       	std	Y+15, r1	; 0x0f
				Frogs[i].Frame = 2;
    d2c4:	0e 9d       	mul	r16, r14
    d2c6:	d0 01       	movw	r26, r0
    d2c8:	0f 9d       	mul	r16, r15
    d2ca:	b0 0d       	add	r27, r0
    d2cc:	1e 9d       	mul	r17, r14
    d2ce:	b0 0d       	add	r27, r0
    d2d0:	11 24       	eor	r1, r1
    d2d2:	a9 51       	subi	r26, 0x19	; 25
    d2d4:	b0 4f       	sbci	r27, 0xF0	; 240
    d2d6:	32 e0       	ldi	r19, 0x02	; 2
    d2d8:	54 96       	adiw	r26, 0x14	; 20
    d2da:	3c 93       	st	X, r19
    d2dc:	54 97       	sbiw	r26, 0x14	; 20
			if(!Frogs[i].Wait){
    d2de:	1f 96       	adiw	r26, 0x0f	; 15
    d2e0:	8c 91       	ld	r24, X
    d2e2:	1f 97       	sbiw	r26, 0x0f	; 15
    d2e4:	88 23       	and	r24, r24
    d2e6:	09 f0       	breq	.+2      	; 0xd2ea <UpdateFrogs+0x412>
    d2e8:	49 c0       	rjmp	.+146    	; 0xd37c <UpdateFrogs+0x4a4>
				if(JoyVal[i] & BTN_LEFT){
    d2ea:	e6 ff       	sbrs	r30, 6
    d2ec:	0e c0       	rjmp	.+28     	; 0xd30a <UpdateFrogs+0x432>
					Frogs[i].State &= ~FACING;
    d2ee:	52 96       	adiw	r26, 0x12	; 18
    d2f0:	8d 91       	ld	r24, X+
    d2f2:	9c 91       	ld	r25, X
    d2f4:	53 97       	sbiw	r26, 0x13	; 19
    d2f6:	8b 7f       	andi	r24, 0xFB	; 251
    d2f8:	53 96       	adiw	r26, 0x13	; 19
    d2fa:	9c 93       	st	X, r25
    d2fc:	8e 93       	st	-X, r24
    d2fe:	52 97       	sbiw	r26, 0x12	; 18
					if(Frogs[i].x > SCREENLEFT)
    d300:	8c 91       	ld	r24, X
    d302:	88 23       	and	r24, r24
    d304:	91 f0       	breq	.+36     	; 0xd32a <UpdateFrogs+0x452>
						Frogs[i].x--;
    d306:	81 50       	subi	r24, 0x01	; 1
    d308:	0f c0       	rjmp	.+30     	; 0xd328 <UpdateFrogs+0x450>
				}else if(JoyVal[i] & BTN_RIGHT){
    d30a:	e7 ff       	sbrs	r30, 7
    d30c:	0e c0       	rjmp	.+28     	; 0xd32a <UpdateFrogs+0x452>
					Frogs[i].State |= FACING;
    d30e:	52 96       	adiw	r26, 0x12	; 18
    d310:	8d 91       	ld	r24, X+
    d312:	9c 91       	ld	r25, X
    d314:	53 97       	sbiw	r26, 0x13	; 19
    d316:	84 60       	ori	r24, 0x04	; 4
    d318:	53 96       	adiw	r26, 0x13	; 19
    d31a:	9c 93       	st	X, r25
    d31c:	8e 93       	st	-X, r24
    d31e:	52 97       	sbiw	r26, 0x12	; 18
					if(Frogs[i].x < SCREENRIGHT-16)
    d320:	8c 91       	ld	r24, X
    d322:	8f 3d       	cpi	r24, 0xDF	; 223
    d324:	10 f4       	brcc	.+4      	; 0xd32a <UpdateFrogs+0x452>
						Frogs[i].x++;
    d326:	8f 5f       	subi	r24, 0xFF	; 255
    d328:	8c 93       	st	X, r24
				}

				if((Frogs[i].x >= LEFTEDGE && Frogs[i].x <= MIDDLELEFT) || (Frogs[i].x >= MIDDLERIGHT && Frogs[i].x <= RIGHTEDGE)){
    d32a:	0e 9d       	mul	r16, r14
    d32c:	f0 01       	movw	r30, r0
    d32e:	0f 9d       	mul	r16, r15
    d330:	f0 0d       	add	r31, r0
    d332:	1e 9d       	mul	r17, r14
    d334:	f0 0d       	add	r31, r0
    d336:	11 24       	eor	r1, r1
    d338:	e9 51       	subi	r30, 0x19	; 25
    d33a:	f0 4f       	sbci	r31, 0xF0	; 240
    d33c:	90 81       	ld	r25, Z
    d33e:	89 2f       	mov	r24, r25
    d340:	8a 51       	subi	r24, 0x1A	; 26
    d342:	83 35       	cpi	r24, 0x53	; 83
    d344:	18 f0       	brcs	.+6      	; 0xd34c <UpdateFrogs+0x474>
    d346:	9c 57       	subi	r25, 0x7C	; 124
    d348:	91 35       	cpi	r25, 0x51	; 81
    d34a:	b0 f4       	brcc	.+44     	; 0xd378 <UpdateFrogs+0x4a0>
					Frogs[i].State ^= SWIMMING;
					Frogs[i].State |= SITTING;
    d34c:	0e 9d       	mul	r16, r14
    d34e:	f0 01       	movw	r30, r0
    d350:	0f 9d       	mul	r16, r15
    d352:	f0 0d       	add	r31, r0
    d354:	1e 9d       	mul	r17, r14
    d356:	f0 0d       	add	r31, r0
    d358:	11 24       	eor	r1, r1
    d35a:	e9 51       	subi	r30, 0x19	; 25
    d35c:	f0 4f       	sbci	r31, 0xF0	; 240
    d35e:	82 89       	ldd	r24, Z+18	; 0x12
    d360:	93 89       	ldd	r25, Z+19	; 0x13
    d362:	20 e8       	ldi	r18, 0x80	; 128
    d364:	30 e0       	ldi	r19, 0x00	; 0
    d366:	82 27       	eor	r24, r18
    d368:	93 27       	eor	r25, r19
    d36a:	81 60       	ori	r24, 0x01	; 1
    d36c:	93 8b       	std	Z+19, r25	; 0x13
    d36e:	82 8b       	std	Z+18, r24	; 0x12
					Frogs[i].AIState = AI_CENTER;
    d370:	84 e0       	ldi	r24, 0x04	; 4
    d372:	80 8b       	std	Z+16, r24	; 0x10
					Frogs[i].Wait = LANDWAIT;
    d374:	8c e0       	ldi	r24, 0x0C	; 12
    d376:	01 c0       	rjmp	.+2      	; 0xd37a <UpdateFrogs+0x4a2>
				}else
					Frogs[i].Wait = SWIMWAIT;
    d378:	84 e0       	ldi	r24, 0x04	; 4
    d37a:	87 87       	std	Z+15, r24	; 0x0f
			}
		}
//DrawNumber(Frogs[i].State,(i*5)+4,SCREEN_TILES_V-1,0);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if((Frogs[i].State & SITTING)){//outcomes:turning,hop----jump,leap handled later
    d37c:	0e 9d       	mul	r16, r14
    d37e:	d0 01       	movw	r26, r0
    d380:	0f 9d       	mul	r16, r15
    d382:	b0 0d       	add	r27, r0
    d384:	1e 9d       	mul	r17, r14
    d386:	b0 0d       	add	r27, r0
    d388:	11 24       	eor	r1, r1
    d38a:	a9 51       	subi	r26, 0x19	; 25
    d38c:	b0 4f       	sbci	r27, 0xF0	; 240
    d38e:	52 96       	adiw	r26, 0x12	; 18
    d390:	2d 91       	ld	r18, X+
    d392:	3c 91       	ld	r19, X
    d394:	53 97       	sbiw	r26, 0x13	; 19
    d396:	20 ff       	sbrs	r18, 0
    d398:	46 c0       	rjmp	.+140    	; 0xd426 <UpdateFrogs+0x54e>
			Frogs[i].Frame = 0;
    d39a:	54 96       	adiw	r26, 0x14	; 20
    d39c:	1c 92       	st	X, r1
    d39e:	54 97       	sbiw	r26, 0x14	; 20
			Frogs[i].xFrac = 0;
    d3a0:	13 96       	adiw	r26, 0x03	; 3
    d3a2:	1c 92       	st	X, r1
    d3a4:	1e 92       	st	-X, r1
    d3a6:	12 97       	sbiw	r26, 0x02	; 2
			Frogs[i].yFrac = 0;
    d3a8:	15 96       	adiw	r26, 0x05	; 5
    d3aa:	1c 92       	st	X, r1
    d3ac:	1e 92       	st	-X, r1
    d3ae:	14 97       	sbiw	r26, 0x04	; 4
			Frogs[i].xVel = 0;
    d3b0:	17 96       	adiw	r26, 0x07	; 7
    d3b2:	1c 92       	st	X, r1
    d3b4:	1e 92       	st	-X, r1
    d3b6:	16 97       	sbiw	r26, 0x06	; 6
			Frogs[i].yVel = 0;
    d3b8:	19 96       	adiw	r26, 0x09	; 9
    d3ba:	1c 92       	st	X, r1
    d3bc:	1e 92       	st	-X, r1
    d3be:	18 97       	sbiw	r26, 0x08	; 8
			Frogs[i].AirTime = 0;
    d3c0:	1c 96       	adiw	r26, 0x0c	; 12
    d3c2:	1c 92       	st	X, r1
    d3c4:	1c 97       	sbiw	r26, 0x0c	; 12
			if(true && Time){//!Frogs[i].Wait){//don't update yet if we just: got out of the water,landed,hopped
    d3c6:	80 91 20 10 	lds	r24, 0x1020
    d3ca:	90 91 21 10 	lds	r25, 0x1021
    d3ce:	89 2b       	or	r24, r25
    d3d0:	51 f1       	breq	.+84     	; 0xd426 <UpdateFrogs+0x54e>
    d3d2:	f8 01       	movw	r30, r16
    d3d4:	ee 0f       	add	r30, r30
    d3d6:	ff 1f       	adc	r31, r31
				if((Frogs[i].State & FACING)){//looking right
    d3d8:	22 ff       	sbrs	r18, 2
    d3da:	08 c0       	rjmp	.+16     	; 0xd3ec <UpdateFrogs+0x514>
					if((JoyVal[i] & BTN_LEFT)){//looking right, wanting to look left
    d3dc:	e4 5e       	subi	r30, 0xE4	; 228
    d3de:	ff 4e       	sbci	r31, 0xEF	; 239
    d3e0:	80 81       	ld	r24, Z
    d3e2:	86 fd       	sbrc	r24, 6
    d3e4:	08 c0       	rjmp	.+16     	; 0xd3f6 <UpdateFrogs+0x51e>
						//Frogs[i].Facing = 0;
						Frogs[i].State ^= SITTING;
						Frogs[i].State |= TURNING;
						Frogs[i].Wait = TURNWAIT;
					}else if((JoyVal[i] & BTN_RIGHT) && !Frogs[i].Wait){
    d3e6:	87 ff       	sbrs	r24, 7
    d3e8:	1e c0       	rjmp	.+60     	; 0xd426 <UpdateFrogs+0x54e>
    d3ea:	11 c0       	rjmp	.+34     	; 0xd40e <UpdateFrogs+0x536>
						Frogs[i].State ^= SITTING;
						Frogs[i].State |= HOPPING;
					}
				}else{//looking left
					if((JoyVal[i] & BTN_RIGHT)){//looking left, wanting to look right
    d3ec:	e4 5e       	subi	r30, 0xE4	; 228
    d3ee:	ff 4e       	sbci	r31, 0xEF	; 239
    d3f0:	80 81       	ld	r24, Z
    d3f2:	87 ff       	sbrs	r24, 7
    d3f4:	0a c0       	rjmp	.+20     	; 0xd40a <UpdateFrogs+0x532>
						Frogs[i].State ^= SITTING;
						Frogs[i].State |= TURNING;
    d3f6:	28 25       	eor	r18, r8
    d3f8:	39 25       	eor	r19, r9
    d3fa:	22 60       	ori	r18, 0x02	; 2
    d3fc:	53 96       	adiw	r26, 0x13	; 19
    d3fe:	3c 93       	st	X, r19
    d400:	2e 93       	st	-X, r18
    d402:	52 97       	sbiw	r26, 0x12	; 18
						Frogs[i].Wait = TURNWAIT;
    d404:	1f 96       	adiw	r26, 0x0f	; 15
    d406:	2c 92       	st	X, r2
    d408:	0e c0       	rjmp	.+28     	; 0xd426 <UpdateFrogs+0x54e>
					}else if((JoyVal[i] & BTN_LEFT) && !Frogs[i].Wait){
    d40a:	86 ff       	sbrs	r24, 6
    d40c:	0c c0       	rjmp	.+24     	; 0xd426 <UpdateFrogs+0x54e>
    d40e:	1f 96       	adiw	r26, 0x0f	; 15
    d410:	8c 91       	ld	r24, X
    d412:	1f 97       	sbiw	r26, 0x0f	; 15
    d414:	88 23       	and	r24, r24
    d416:	39 f4       	brne	.+14     	; 0xd426 <UpdateFrogs+0x54e>
						Frogs[i].State ^= SITTING;
    d418:	28 25       	eor	r18, r8
    d41a:	39 25       	eor	r19, r9
						Frogs[i].State |= HOPPING;
    d41c:	28 60       	ori	r18, 0x08	; 8
    d41e:	53 96       	adiw	r26, 0x13	; 19
    d420:	3c 93       	st	X, r19
    d422:	2e 93       	st	-X, r18
    d424:	52 97       	sbiw	r26, 0x12	; 18
					}
				}
			}//Frogs[i].Wait
		}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(Frogs[i].State & TURNING){
    d426:	0e 9d       	mul	r16, r14
    d428:	f0 01       	movw	r30, r0
    d42a:	0f 9d       	mul	r16, r15
    d42c:	f0 0d       	add	r31, r0
    d42e:	1e 9d       	mul	r17, r14
    d430:	f0 0d       	add	r31, r0
    d432:	11 24       	eor	r1, r1
    d434:	e9 51       	subi	r30, 0x19	; 25
    d436:	f0 4f       	sbci	r31, 0xF0	; 240
    d438:	22 89       	ldd	r18, Z+18	; 0x12
    d43a:	33 89       	ldd	r19, Z+19	; 0x13
    d43c:	21 ff       	sbrs	r18, 1
    d43e:	0d c0       	rjmp	.+26     	; 0xd45a <UpdateFrogs+0x582>
			if(!Frogs[i].Wait){
    d440:	87 85       	ldd	r24, Z+15	; 0x0f
    d442:	88 23       	and	r24, r24
    d444:	41 f4       	brne	.+16     	; 0xd456 <UpdateFrogs+0x57e>
				Frogs[i].State ^= (TURNING|FACING);
    d446:	86 e0       	ldi	r24, 0x06	; 6
    d448:	90 e0       	ldi	r25, 0x00	; 0
    d44a:	28 27       	eor	r18, r24
    d44c:	39 27       	eor	r19, r25
				Frogs[i].State |= SITTING;
    d44e:	21 60       	ori	r18, 0x01	; 1
    d450:	33 8b       	std	Z+19, r19	; 0x13
    d452:	22 8b       	std	Z+18, r18	; 0x12
    d454:	02 c0       	rjmp	.+4      	; 0xd45a <UpdateFrogs+0x582>
			}else{
			//	Frogs[i].Frame = (9+3)-((Frogs[i].Wait+((TURNWAIT/3)-1))/(TURNWAIT/3));
			Frogs[i].Frame = 9+1;
    d456:	9a e0       	ldi	r25, 0x0A	; 10
    d458:	94 8b       	std	Z+20, r25	; 0x14
			}
		}		
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(Frogs[i].State & (SITTING|TURNING|HOPPING)){//outcomes:jump
    d45a:	0e 9d       	mul	r16, r14
    d45c:	e0 01       	movw	r28, r0
    d45e:	0f 9d       	mul	r16, r15
    d460:	d0 0d       	add	r29, r0
    d462:	1e 9d       	mul	r17, r14
    d464:	d0 0d       	add	r29, r0
    d466:	11 24       	eor	r1, r1
    d468:	c9 51       	subi	r28, 0x19	; 25
    d46a:	d0 4f       	sbci	r29, 0xF0	; 240
    d46c:	2a 89       	ldd	r18, Y+18	; 0x12
    d46e:	3b 89       	ldd	r19, Y+19	; 0x13
    d470:	c9 01       	movw	r24, r18
    d472:	8b 70       	andi	r24, 0x0B	; 11
    d474:	90 70       	andi	r25, 0x00	; 0
    d476:	89 2b       	or	r24, r25
    d478:	91 f1       	breq	.+100    	; 0xd4de <UpdateFrogs+0x606>
			if((JoyVal[i] & JUMP_BUTTON) && !(OldJoyVal[i] & JUMP_BUTTON)){
    d47a:	d8 01       	movw	r26, r16
    d47c:	aa 0f       	add	r26, r26
    d47e:	bb 1f       	adc	r27, r27
    d480:	fd 01       	movw	r30, r26
    d482:	e4 5e       	subi	r30, 0xE4	; 228
    d484:	ff 4e       	sbci	r31, 0xEF	; 239
    d486:	80 81       	ld	r24, Z
    d488:	91 81       	ldd	r25, Z+1	; 0x01
    d48a:	80 71       	andi	r24, 0x10	; 16
    d48c:	91 70       	andi	r25, 0x01	; 1
    d48e:	89 2b       	or	r24, r25
    d490:	31 f1       	breq	.+76     	; 0xd4de <UpdateFrogs+0x606>
    d492:	a9 5e       	subi	r26, 0xE9	; 233
    d494:	bf 4e       	sbci	r27, 0xEF	; 239
    d496:	8d 91       	ld	r24, X+
    d498:	9c 91       	ld	r25, X
    d49a:	80 71       	andi	r24, 0x10	; 16
    d49c:	91 70       	andi	r25, 0x01	; 1
    d49e:	89 2b       	or	r24, r25
    d4a0:	f1 f4       	brne	.+60     	; 0xd4de <UpdateFrogs+0x606>
				Frogs[i].State = (JUMPING|(Frogs[i].State & FACING));
    d4a2:	24 70       	andi	r18, 0x04	; 4
    d4a4:	30 70       	andi	r19, 0x00	; 0
    d4a6:	20 61       	ori	r18, 0x10	; 16
    d4a8:	3b 8b       	std	Y+19, r19	; 0x13
    d4aa:	2a 8b       	std	Y+18, r18	; 0x12
				//Frogs[i].AIState = AI_JUMP;//AI_CENTER WILL SOMETIMES JUMP, SO AI HAS TO SET THIS ITSELF
				Frogs[i].yVel = JUMPINITIALACCELERATION;
    d4ac:	59 86       	std	Y+9, r5	; 0x09
    d4ae:	48 86       	std	Y+8, r4	; 0x08
				Frogs[i].JumpCeiling = JUMPMAXHEIGHT;
    d4b0:	ec e2       	ldi	r30, 0x2C	; 44
    d4b2:	ea 87       	std	Y+10, r30	; 0x0a
				Frogs[i].xVel = JUMPINITIALXMOMENTUM;
    d4b4:	7f 82       	std	Y+7, r7	; 0x07
    d4b6:	6e 82       	std	Y+6, r6	; 0x06
				FFTriggerPCM(SFX_FROG,23+(prng()%3),180);
    d4b8:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    d4bc:	9c 01       	movw	r18, r24
}

void FFTriggerPCM(uint8_t patch, uint8_t freq, uint8_t vol){
	if(SoundsOn)
    d4be:	80 91 1b 10 	lds	r24, 0x101B
    d4c2:	88 23       	and	r24, r24
    d4c4:	61 f0       	breq	.+24     	; 0xd4de <UpdateFrogs+0x606>
		TriggerNote(4,patch,freq,vol);
    d4c6:	c9 01       	movw	r24, r18
    d4c8:	63 e0       	ldi	r22, 0x03	; 3
    d4ca:	70 e0       	ldi	r23, 0x00	; 0
    d4cc:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    d4d0:	48 2f       	mov	r20, r24
    d4d2:	49 5e       	subi	r20, 0xE9	; 233
    d4d4:	84 e0       	ldi	r24, 0x04	; 4
    d4d6:	60 e0       	ldi	r22, 0x00	; 0
    d4d8:	24 eb       	ldi	r18, 0xB4	; 180
    d4da:	0e 94 4f 55 	call	0xaa9e	; 0xaa9e <TriggerNote>
			}
		}

		if(Frogs[i].State & HOPPING){//can't do anything but finish our hop
    d4de:	0e 9d       	mul	r16, r14
    d4e0:	d0 01       	movw	r26, r0
    d4e2:	0f 9d       	mul	r16, r15
    d4e4:	b0 0d       	add	r27, r0
    d4e6:	1e 9d       	mul	r17, r14
    d4e8:	b0 0d       	add	r27, r0
    d4ea:	11 24       	eor	r1, r1
    d4ec:	a9 51       	subi	r26, 0x19	; 25
    d4ee:	b0 4f       	sbci	r27, 0xF0	; 240
    d4f0:	52 96       	adiw	r26, 0x12	; 18
    d4f2:	6d 91       	ld	r22, X+
    d4f4:	7c 91       	ld	r23, X
    d4f6:	53 97       	sbiw	r26, 0x13	; 19
    d4f8:	9b 01       	movw	r18, r22
    d4fa:	40 e0       	ldi	r20, 0x00	; 0
    d4fc:	50 e0       	ldi	r21, 0x00	; 0
    d4fe:	63 ff       	sbrs	r22, 3
    d500:	3f c0       	rjmp	.+126    	; 0xd580 <UpdateFrogs+0x6a8>
			Frogs[i].Frame = 1;
    d502:	81 e0       	ldi	r24, 0x01	; 1
    d504:	54 96       	adiw	r26, 0x14	; 20
    d506:	8c 93       	st	X, r24
    d508:	54 97       	sbiw	r26, 0x14	; 20
			if(++Frogs[i].AirTime == HOPLENGTH){
    d50a:	1c 96       	adiw	r26, 0x0c	; 12
    d50c:	8c 91       	ld	r24, X
    d50e:	1c 97       	sbiw	r26, 0x0c	; 12
    d510:	8f 5f       	subi	r24, 0xFF	; 255
    d512:	1c 96       	adiw	r26, 0x0c	; 12
    d514:	8c 93       	st	X, r24
    d516:	1c 97       	sbiw	r26, 0x0c	; 12
    d518:	88 30       	cpi	r24, 0x08	; 8
    d51a:	89 f4       	brne	.+34     	; 0xd53e <UpdateFrogs+0x666>
				Frogs[i].Wait = HOPWAIT;
    d51c:	f5 e0       	ldi	r31, 0x05	; 5
    d51e:	1f 96       	adiw	r26, 0x0f	; 15
    d520:	fc 93       	st	X, r31
    d522:	1f 97       	sbiw	r26, 0x0f	; 15
				Frogs[i].y		= FROGY;
    d524:	11 96       	adiw	r26, 0x01	; 1
    d526:	3c 92       	st	X, r3
    d528:	11 97       	sbiw	r26, 0x01	; 1
				Frogs[i].State ^= HOPPING;
    d52a:	28 e0       	ldi	r18, 0x08	; 8
    d52c:	30 e0       	ldi	r19, 0x00	; 0
    d52e:	62 27       	eor	r22, r18
    d530:	73 27       	eor	r23, r19
				Frogs[i].State |= SITTING;
    d532:	61 60       	ori	r22, 0x01	; 1
    d534:	53 96       	adiw	r26, 0x13	; 19
    d536:	7c 93       	st	X, r23
    d538:	6e 93       	st	-X, r22
    d53a:	52 97       	sbiw	r26, 0x12	; 18
    d53c:	98 c0       	rjmp	.+304    	; 0xd66e <UpdateFrogs+0x796>
    d53e:	8c 91       	ld	r24, X
			}else{
				if(!(Frogs[i].State & FACING) && Frogs[i].x > SCREENLEFT)
    d540:	62 fd       	sbrc	r22, 2
    d542:	04 c0       	rjmp	.+8      	; 0xd54c <UpdateFrogs+0x674>
    d544:	88 23       	and	r24, r24
    d546:	31 f0       	breq	.+12     	; 0xd554 <UpdateFrogs+0x67c>
						Frogs[i].x--;
    d548:	81 50       	subi	r24, 0x01	; 1
    d54a:	03 c0       	rjmp	.+6      	; 0xd552 <UpdateFrogs+0x67a>
				else if((Frogs[i].State & FACING) && Frogs[i].x < (SCREENRIGHT - 16))
    d54c:	8f 3d       	cpi	r24, 0xDF	; 223
    d54e:	10 f4       	brcc	.+4      	; 0xd554 <UpdateFrogs+0x67c>
						Frogs[i].x++;
    d550:	8f 5f       	subi	r24, 0xFF	; 255
    d552:	8c 93       	st	X, r24
				Frogs[i].y = FROGY-pgm_read_byte(&HopWave[Frogs[i].AirTime]);
    d554:	0e 9d       	mul	r16, r14
    d556:	d0 01       	movw	r26, r0
    d558:	0f 9d       	mul	r16, r15
    d55a:	b0 0d       	add	r27, r0
    d55c:	1e 9d       	mul	r17, r14
    d55e:	b0 0d       	add	r27, r0
    d560:	11 24       	eor	r1, r1
    d562:	a9 51       	subi	r26, 0x19	; 25
    d564:	b0 4f       	sbci	r27, 0xF0	; 240
    d566:	1c 96       	adiw	r26, 0x0c	; 12
    d568:	8c 91       	ld	r24, X
    d56a:	1c 97       	sbiw	r26, 0x0c	; 12
    d56c:	90 e0       	ldi	r25, 0x00	; 0
    d56e:	80 5d       	subi	r24, 0xD0	; 208
    d570:	94 46       	sbci	r25, 0x64	; 100
    d572:	fc 01       	movw	r30, r24
    d574:	84 91       	lpm	r24, Z+
    d576:	f3 2d       	mov	r31, r3
    d578:	f8 1b       	sub	r31, r24
    d57a:	11 96       	adiw	r26, 0x01	; 1
    d57c:	fc 93       	st	X, r31
    d57e:	77 c0       	rjmp	.+238    	; 0xd66e <UpdateFrogs+0x796>
			}

		}else if(Frogs[i].State & JUMPING){
    d580:	64 ff       	sbrs	r22, 4
    d582:	75 c0       	rjmp	.+234    	; 0xd66e <UpdateFrogs+0x796>
			Frogs[i].Frame = 1;
    d584:	81 e0       	ldi	r24, 0x01	; 1
    d586:	54 96       	adiw	r26, 0x14	; 20
    d588:	8c 93       	st	X, r24
    d58a:	54 97       	sbiw	r26, 0x14	; 20
			if(!(JoyVal[i] & JUMP_BUTTON) || (Frogs[i].State & JUMPQUIT) || (Frogs[i].y <= Frogs[i].JumpCeiling)){
    d58c:	f8 01       	movw	r30, r16
    d58e:	ee 0f       	add	r30, r30
    d590:	ff 1f       	adc	r31, r31
    d592:	e4 5e       	subi	r30, 0xE4	; 228
    d594:	ff 4e       	sbci	r31, 0xEF	; 239
    d596:	80 81       	ld	r24, Z
    d598:	91 81       	ldd	r25, Z+1	; 0x01
    d59a:	80 71       	andi	r24, 0x10	; 16
    d59c:	91 70       	andi	r25, 0x01	; 1
    d59e:	89 2b       	or	r24, r25
    d5a0:	51 f0       	breq	.+20     	; 0xd5b6 <UpdateFrogs+0x6de>
    d5a2:	34 fd       	sbrc	r19, 4
    d5a4:	08 c0       	rjmp	.+16     	; 0xd5b6 <UpdateFrogs+0x6de>
    d5a6:	11 96       	adiw	r26, 0x01	; 1
    d5a8:	9c 91       	ld	r25, X
    d5aa:	11 97       	sbiw	r26, 0x01	; 1
    d5ac:	1a 96       	adiw	r26, 0x0a	; 10
    d5ae:	8c 91       	ld	r24, X
    d5b0:	1a 97       	sbiw	r26, 0x0a	; 10
    d5b2:	89 17       	cp	r24, r25
    d5b4:	88 f1       	brcs	.+98     	; 0xd618 <UpdateFrogs+0x740>
				Frogs[i].State |= JUMPQUIT;
    d5b6:	0e 9d       	mul	r16, r14
    d5b8:	f0 01       	movw	r30, r0
    d5ba:	0f 9d       	mul	r16, r15
    d5bc:	f0 0d       	add	r31, r0
    d5be:	1e 9d       	mul	r17, r14
    d5c0:	f0 0d       	add	r31, r0
    d5c2:	11 24       	eor	r1, r1
    d5c4:	e9 51       	subi	r30, 0x19	; 25
    d5c6:	f0 4f       	sbci	r31, 0xF0	; 240
    d5c8:	82 89       	ldd	r24, Z+18	; 0x12
    d5ca:	93 89       	ldd	r25, Z+19	; 0x13
    d5cc:	90 61       	ori	r25, 0x10	; 16
    d5ce:	93 8b       	std	Z+19, r25	; 0x13
    d5d0:	82 8b       	std	Z+18, r24	; 0x12
				if(Frogs[i].yVel > GRAVITYPERTICK<<1)
    d5d2:	80 85       	ldd	r24, Z+8	; 0x08
    d5d4:	91 85       	ldd	r25, Z+9	; 0x09
    d5d6:	81 37       	cpi	r24, 0x71	; 113
    d5d8:	91 05       	cpc	r25, r1
    d5da:	2c f0       	brlt	.+10     	; 0xd5e6 <UpdateFrogs+0x70e>
					Frogs[i].yVel -= GRAVITYPERTICK<<1;
    d5dc:	80 57       	subi	r24, 0x70	; 112
    d5de:	90 40       	sbci	r25, 0x00	; 0
    d5e0:	91 87       	std	Z+9, r25	; 0x09
    d5e2:	80 87       	std	Z+8, r24	; 0x08
    d5e4:	02 c0       	rjmp	.+4      	; 0xd5ea <UpdateFrogs+0x712>
				else
					Frogs[i].yVel = 0;
    d5e6:	11 86       	std	Z+9, r1	; 0x09
    d5e8:	10 86       	std	Z+8, r1	; 0x08

				if(!Frogs[i].yVel){
    d5ea:	0e 9d       	mul	r16, r14
    d5ec:	f0 01       	movw	r30, r0
    d5ee:	0f 9d       	mul	r16, r15
    d5f0:	f0 0d       	add	r31, r0
    d5f2:	1e 9d       	mul	r17, r14
    d5f4:	f0 0d       	add	r31, r0
    d5f6:	11 24       	eor	r1, r1
    d5f8:	e9 51       	subi	r30, 0x19	; 25
    d5fa:	f0 4f       	sbci	r31, 0xF0	; 240
    d5fc:	80 85       	ldd	r24, Z+8	; 0x08
    d5fe:	91 85       	ldd	r25, Z+9	; 0x09
    d600:	89 2b       	or	r24, r25
    d602:	a9 f5       	brne	.+106    	; 0xd66e <UpdateFrogs+0x796>
					Frogs[i].State = ((Frogs[i].State & (FACING|DOUBLEJUMPED))|FALLING);
    d604:	82 89       	ldd	r24, Z+18	; 0x12
    d606:	93 89       	ldd	r25, Z+19	; 0x13
    d608:	84 70       	andi	r24, 0x04	; 4
    d60a:	90 74       	andi	r25, 0x40	; 64
    d60c:	80 64       	ori	r24, 0x40	; 64
    d60e:	93 8b       	std	Z+19, r25	; 0x13
    d610:	82 8b       	std	Z+18, r24	; 0x12
					Frogs[i].yFrac = 0;
    d612:	15 82       	std	Z+5, r1	; 0x05
    d614:	14 82       	std	Z+4, r1	; 0x04
    d616:	2b c0       	rjmp	.+86     	; 0xd66e <UpdateFrogs+0x796>
					//if(Frogs[i].y < JUMPMAXHEIGHT)
					//	Frogs[i].y = JUMPMAXHEIGHT;
				}
			}else{//still climbing
				Frogs[i].yVel += JUMPACCELERATIONPERTICK;
				Frogs[i].yVel -= (GRAVITYPERTICK>>2);
    d618:	18 96       	adiw	r26, 0x08	; 8
    d61a:	8d 91       	ld	r24, X+
    d61c:	9c 91       	ld	r25, X
    d61e:	19 97       	sbiw	r26, 0x09	; 9
    d620:	0a 96       	adiw	r24, 0x0a	; 10
    d622:	19 96       	adiw	r26, 0x09	; 9
    d624:	9c 93       	st	X, r25
    d626:	8e 93       	st	-X, r24
    d628:	18 97       	sbiw	r26, 0x08	; 8
				if(Frogs[i].yVel > JUMPMAXACCELERATIONPERTICK)
    d62a:	81 59       	subi	r24, 0x91	; 145
    d62c:	93 40       	sbci	r25, 0x03	; 3
    d62e:	34 f0       	brlt	.+12     	; 0xd63c <UpdateFrogs+0x764>
					Frogs[i].yVel = JUMPMAXACCELERATIONPERTICK;
    d630:	80 e9       	ldi	r24, 0x90	; 144
    d632:	93 e0       	ldi	r25, 0x03	; 3
    d634:	19 96       	adiw	r26, 0x09	; 9
    d636:	9c 93       	st	X, r25
    d638:	8e 93       	st	-X, r24
    d63a:	18 97       	sbiw	r26, 0x08	; 8
				Frogs[i].yFrac += Frogs[i].yVel;
    d63c:	0e 9d       	mul	r16, r14
    d63e:	f0 01       	movw	r30, r0
    d640:	0f 9d       	mul	r16, r15
    d642:	f0 0d       	add	r31, r0
    d644:	1e 9d       	mul	r17, r14
    d646:	f0 0d       	add	r31, r0
    d648:	11 24       	eor	r1, r1
    d64a:	e9 51       	subi	r30, 0x19	; 25
    d64c:	f0 4f       	sbci	r31, 0xF0	; 240
    d64e:	20 85       	ldd	r18, Z+8	; 0x08
    d650:	31 85       	ldd	r19, Z+9	; 0x09
    d652:	84 81       	ldd	r24, Z+4	; 0x04
    d654:	95 81       	ldd	r25, Z+5	; 0x05
    d656:	28 0f       	add	r18, r24
    d658:	39 1f       	adc	r19, r25
				Frogs[i].y -= (Frogs[i].yFrac>>8);//add whole units
    d65a:	43 2f       	mov	r20, r19
    d65c:	55 27       	eor	r21, r21
    d65e:	47 fd       	sbrc	r20, 7
    d660:	5a 95       	dec	r21
    d662:	81 81       	ldd	r24, Z+1	; 0x01
    d664:	84 1b       	sub	r24, r20
    d666:	81 83       	std	Z+1, r24	; 0x01
				Frogs[i].yFrac &= 0xFF;//save fractional remainder
    d668:	30 70       	andi	r19, 0x00	; 0
    d66a:	35 83       	std	Z+5, r19	; 0x05
    d66c:	24 83       	std	Z+4, r18	; 0x04
			}
		}
		
		if(Frogs[i].State & (FALLING|DROPPING)){
    d66e:	0e 9d       	mul	r16, r14
    d670:	f0 01       	movw	r30, r0
    d672:	0f 9d       	mul	r16, r15
    d674:	f0 0d       	add	r31, r0
    d676:	1e 9d       	mul	r17, r14
    d678:	f0 0d       	add	r31, r0
    d67a:	11 24       	eor	r1, r1
    d67c:	e9 51       	subi	r30, 0x19	; 25
    d67e:	f0 4f       	sbci	r31, 0xF0	; 240
    d680:	82 89       	ldd	r24, Z+18	; 0x12
    d682:	93 89       	ldd	r25, Z+19	; 0x13
    d684:	9c 01       	movw	r18, r24
    d686:	40 e0       	ldi	r20, 0x00	; 0
    d688:	50 e0       	ldi	r21, 0x00	; 0
    d68a:	da 01       	movw	r26, r20
    d68c:	c9 01       	movw	r24, r18
    d68e:	80 76       	andi	r24, 0x60	; 96
    d690:	90 70       	andi	r25, 0x00	; 0
    d692:	a0 70       	andi	r26, 0x00	; 0
    d694:	b0 70       	andi	r27, 0x00	; 0
    d696:	00 97       	sbiw	r24, 0x00	; 0
    d698:	a1 05       	cpc	r26, r1
    d69a:	b1 05       	cpc	r27, r1
    d69c:	09 f4       	brne	.+2      	; 0xd6a0 <UpdateFrogs+0x7c8>
    d69e:	a8 c0       	rjmp	.+336    	; 0xd7f0 <UpdateFrogs+0x918>
			if(Frogs[i].State & FALLING){
    d6a0:	26 ff       	sbrs	r18, 6
    d6a2:	0b c0       	rjmp	.+22     	; 0xd6ba <UpdateFrogs+0x7e2>
				Frogs[i].yVel += GRAVITYPERTICK;
    d6a4:	80 85       	ldd	r24, Z+8	; 0x08
    d6a6:	91 85       	ldd	r25, Z+9	; 0x09
    d6a8:	c8 96       	adiw	r24, 0x38	; 56
    d6aa:	91 87       	std	Z+9, r25	; 0x09
    d6ac:	80 87       	std	Z+8, r24	; 0x08
				if(Frogs[i].yVel > GRAVITYMAXPERTICK)
    d6ae:	81 58       	subi	r24, 0x81	; 129
    d6b0:	93 40       	sbci	r25, 0x03	; 3
    d6b2:	84 f0       	brlt	.+32     	; 0xd6d4 <UpdateFrogs+0x7fc>
					Frogs[i].yVel = GRAVITYMAXPERTICK;
    d6b4:	80 e8       	ldi	r24, 0x80	; 128
    d6b6:	93 e0       	ldi	r25, 0x03	; 3
    d6b8:	0b c0       	rjmp	.+22     	; 0xd6d0 <UpdateFrogs+0x7f8>
			}else{//dropping
				Frogs[i].yVel += GRAVITYPERTICK*3;
    d6ba:	80 85       	ldd	r24, Z+8	; 0x08
    d6bc:	91 85       	ldd	r25, Z+9	; 0x09
    d6be:	88 55       	subi	r24, 0x58	; 88
    d6c0:	9f 4f       	sbci	r25, 0xFF	; 255
    d6c2:	91 87       	std	Z+9, r25	; 0x09
    d6c4:	80 87       	std	Z+8, r24	; 0x08
				if(Frogs[i].yVel > GRAVITYMAXPERTICK*6)
    d6c6:	81 50       	subi	r24, 0x01	; 1
    d6c8:	95 41       	sbci	r25, 0x15	; 21
    d6ca:	24 f0       	brlt	.+8      	; 0xd6d4 <UpdateFrogs+0x7fc>
					Frogs[i].yVel = GRAVITYMAXPERTICK*6;
    d6cc:	80 e0       	ldi	r24, 0x00	; 0
    d6ce:	95 e1       	ldi	r25, 0x15	; 21
    d6d0:	91 87       	std	Z+9, r25	; 0x09
    d6d2:	80 87       	std	Z+8, r24	; 0x08
			}
			Frogs[i].yFrac += Frogs[i].yVel;
    d6d4:	0e 9d       	mul	r16, r14
    d6d6:	f0 01       	movw	r30, r0
    d6d8:	0f 9d       	mul	r16, r15
    d6da:	f0 0d       	add	r31, r0
    d6dc:	1e 9d       	mul	r17, r14
    d6de:	f0 0d       	add	r31, r0
    d6e0:	11 24       	eor	r1, r1
    d6e2:	e9 51       	subi	r30, 0x19	; 25
    d6e4:	f0 4f       	sbci	r31, 0xF0	; 240
    d6e6:	20 85       	ldd	r18, Z+8	; 0x08
    d6e8:	31 85       	ldd	r19, Z+9	; 0x09
    d6ea:	84 81       	ldd	r24, Z+4	; 0x04
    d6ec:	95 81       	ldd	r25, Z+5	; 0x05
    d6ee:	28 0f       	add	r18, r24
    d6f0:	39 1f       	adc	r19, r25
			Frogs[i].y += (Frogs[i].yFrac>>8);
    d6f2:	83 2f       	mov	r24, r19
    d6f4:	99 27       	eor	r25, r25
    d6f6:	87 fd       	sbrc	r24, 7
    d6f8:	9a 95       	dec	r25
    d6fa:	41 81       	ldd	r20, Z+1	; 0x01
    d6fc:	48 0f       	add	r20, r24
    d6fe:	41 83       	std	Z+1, r20	; 0x01
			Frogs[i].yFrac &= 0xFF;
    d700:	30 70       	andi	r19, 0x00	; 0
    d702:	35 83       	std	Z+5, r19	; 0x05
    d704:	24 83       	std	Z+4, r18	; 0x04

			if(Frogs[i].y >= FROGY){
    d706:	4c 3a       	cpi	r20, 0xAC	; 172
    d708:	b0 f1       	brcs	.+108    	; 0xd776 <UpdateFrogs+0x89e>
				Frogs[i].y = FROGY;
    d70a:	31 82       	std	Z+1, r3	; 0x01
				Frogs[i].yFrac = 0;
    d70c:	15 82       	std	Z+5, r1	; 0x05
    d70e:	14 82       	std	Z+4, r1	; 0x04
				Frogs[i].yVel = 0;
    d710:	11 86       	std	Z+9, r1	; 0x09
    d712:	10 86       	std	Z+8, r1	; 0x08
				if(Frogs[i].State & DROPPING){//got hit by a stomp while in the air
    d714:	82 89       	ldd	r24, Z+18	; 0x12
    d716:	93 89       	ldd	r25, Z+19	; 0x13
    d718:	9c 01       	movw	r18, r24
    d71a:	24 70       	andi	r18, 0x04	; 4
    d71c:	30 70       	andi	r19, 0x00	; 0
    d71e:	85 ff       	sbrs	r24, 5
    d720:	25 c0       	rjmp	.+74     	; 0xd76c <UpdateFrogs+0x894>
					Frogs[i].State = ((Frogs[i].State&FACING)|STUNNED);
    d722:	32 60       	ori	r19, 0x02	; 2
    d724:	33 8b       	std	Z+19, r19	; 0x13
    d726:	22 8b       	std	Z+18, r18	; 0x12
					Frogs[!i].Score += STOMPSCORE;
    d728:	80 e0       	ldi	r24, 0x00	; 0
    d72a:	90 e0       	ldi	r25, 0x00	; 0
    d72c:	bb 20       	and	r11, r11
    d72e:	11 f4       	brne	.+4      	; 0xd734 <UpdateFrogs+0x85c>
    d730:	81 e0       	ldi	r24, 0x01	; 1
    d732:	90 e0       	ldi	r25, 0x00	; 0
    d734:	8e 9d       	mul	r24, r14
    d736:	f0 01       	movw	r30, r0
    d738:	8f 9d       	mul	r24, r15
    d73a:	f0 0d       	add	r31, r0
    d73c:	9e 9d       	mul	r25, r14
    d73e:	f0 0d       	add	r31, r0
    d740:	11 24       	eor	r1, r1
    d742:	e9 51       	subi	r30, 0x19	; 25
    d744:	f0 4f       	sbci	r31, 0xF0	; 240
    d746:	85 89       	ldd	r24, Z+21	; 0x15
    d748:	8f 5f       	subi	r24, 0xFF	; 255
    d74a:	85 8b       	std	Z+21, r24	; 0x15
					Frogs[i].AIState = AI_STUNNED;
    d74c:	0e 9d       	mul	r16, r14
    d74e:	f0 01       	movw	r30, r0
    d750:	0f 9d       	mul	r16, r15
    d752:	f0 0d       	add	r31, r0
    d754:	1e 9d       	mul	r17, r14
    d756:	f0 0d       	add	r31, r0
    d758:	11 24       	eor	r1, r1
    d75a:	e9 51       	subi	r30, 0x19	; 25
    d75c:	f0 4f       	sbci	r31, 0xF0	; 240
    d75e:	90 e4       	ldi	r25, 0x40	; 64
    d760:	90 8b       	std	Z+16, r25	; 0x10
					Frogs[i].Wait = STUNTIME;
    d762:	22 ed       	ldi	r18, 0xD2	; 210
    d764:	27 87       	std	Z+15, r18	; 0x0f
					Frogs[i].InvincibleTimer = 254;//this will get set to 48 when stun is done
    d766:	3e ef       	ldi	r19, 0xFE	; 254
    d768:	33 87       	std	Z+11, r19	; 0x0b
    d76a:	05 c0       	rjmp	.+10     	; 0xd776 <UpdateFrogs+0x89e>
				}else{//falling
					Frogs[i].State = ((Frogs[i].State&FACING)|SITTING);
    d76c:	21 60       	ori	r18, 0x01	; 1
    d76e:	33 8b       	std	Z+19, r19	; 0x13
    d770:	22 8b       	std	Z+18, r18	; 0x12
					Frogs[i].AIState = AI_CENTER;
    d772:	84 e0       	ldi	r24, 0x04	; 4
    d774:	80 8b       	std	Z+16, r24	; 0x10
				}
			}

			//check if we did a double jump
			if(!(Frogs[i].State & DOUBLEJUMPED) && Frogs[i].yVel < DOUBLEJUMPVELOCITYWINDOW && (JoyVal[i]&JUMP_BUTTON) && !(OldJoyVal[i]&JUMP_BUTTON)){
    d776:	0e 9d       	mul	r16, r14
    d778:	e0 01       	movw	r28, r0
    d77a:	0f 9d       	mul	r16, r15
    d77c:	d0 0d       	add	r29, r0
    d77e:	1e 9d       	mul	r17, r14
    d780:	d0 0d       	add	r29, r0
    d782:	11 24       	eor	r1, r1
    d784:	c9 51       	subi	r28, 0x19	; 25
    d786:	d0 4f       	sbci	r29, 0xF0	; 240
    d788:	2a 89       	ldd	r18, Y+18	; 0x12
    d78a:	3b 89       	ldd	r19, Y+19	; 0x13
    d78c:	c9 01       	movw	r24, r18
    d78e:	a0 e0       	ldi	r26, 0x00	; 0
    d790:	b0 e0       	ldi	r27, 0x00	; 0
    d792:	96 fd       	sbrc	r25, 6
    d794:	2d c0       	rjmp	.+90     	; 0xd7f0 <UpdateFrogs+0x918>
    d796:	88 85       	ldd	r24, Y+8	; 0x08
    d798:	99 85       	ldd	r25, Y+9	; 0x09
    d79a:	80 55       	subi	r24, 0x50	; 80
    d79c:	91 40       	sbci	r25, 0x01	; 1
    d79e:	44 f5       	brge	.+80     	; 0xd7f0 <UpdateFrogs+0x918>
    d7a0:	d8 01       	movw	r26, r16
    d7a2:	aa 0f       	add	r26, r26
    d7a4:	bb 1f       	adc	r27, r27
    d7a6:	fd 01       	movw	r30, r26
    d7a8:	e4 5e       	subi	r30, 0xE4	; 228
    d7aa:	ff 4e       	sbci	r31, 0xEF	; 239
    d7ac:	80 81       	ld	r24, Z
    d7ae:	91 81       	ldd	r25, Z+1	; 0x01
    d7b0:	80 71       	andi	r24, 0x10	; 16
    d7b2:	91 70       	andi	r25, 0x01	; 1
    d7b4:	89 2b       	or	r24, r25
    d7b6:	e1 f0       	breq	.+56     	; 0xd7f0 <UpdateFrogs+0x918>
    d7b8:	a9 5e       	subi	r26, 0xE9	; 233
    d7ba:	bf 4e       	sbci	r27, 0xEF	; 239
    d7bc:	8d 91       	ld	r24, X+
    d7be:	9c 91       	ld	r25, X
    d7c0:	80 71       	andi	r24, 0x10	; 16
    d7c2:	91 70       	andi	r25, 0x01	; 1
    d7c4:	89 2b       	or	r24, r25
    d7c6:	a1 f4       	brne	.+40     	; 0xd7f0 <UpdateFrogs+0x918>
				Frogs[i].State = (JUMPING|DOUBLEJUMPED|(Frogs[i].State & FACING));
    d7c8:	24 70       	andi	r18, 0x04	; 4
    d7ca:	30 70       	andi	r19, 0x00	; 0
    d7cc:	20 61       	ori	r18, 0x10	; 16
    d7ce:	30 64       	ori	r19, 0x40	; 64
    d7d0:	3b 8b       	std	Y+19, r19	; 0x13
    d7d2:	2a 8b       	std	Y+18, r18	; 0x12
				//Frogs[i].AIState = AI_JUMP;
				Frogs[i].yVel = JUMPINITIALACCELERATION;
    d7d4:	59 86       	std	Y+9, r5	; 0x09
    d7d6:	48 86       	std	Y+8, r4	; 0x08
				Frogs[i].JumpCeiling = DOUBLEJUMPCEILING;
    d7d8:	2a 86       	std	Y+10, r2	; 0x0a
				Frogs[i].xVel = JUMPINITIALXMOMENTUM;
    d7da:	7f 82       	std	Y+7, r7	; 0x07
    d7dc:	6e 82       	std	Y+6, r6	; 0x06

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    d7de:	80 91 1b 10 	lds	r24, 0x101B
    d7e2:	88 23       	and	r24, r24
    d7e4:	29 f0       	breq	.+10     	; 0xd7f0 <UpdateFrogs+0x918>
		TriggerFx(patch,255,1);
    d7e6:	86 e0       	ldi	r24, 0x06	; 6
    d7e8:	6f ef       	ldi	r22, 0xFF	; 255
    d7ea:	41 e0       	ldi	r20, 0x01	; 1
    d7ec:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
				FFTriggerFx(SFX_JUMP1);
			}
		}
		
		if((Frogs[i].State & (JUMPING|FALLING))){//can steer
    d7f0:	0e 9d       	mul	r16, r14
    d7f2:	e0 01       	movw	r28, r0
    d7f4:	0f 9d       	mul	r16, r15
    d7f6:	d0 0d       	add	r29, r0
    d7f8:	1e 9d       	mul	r17, r14
    d7fa:	d0 0d       	add	r29, r0
    d7fc:	11 24       	eor	r1, r1
    d7fe:	c9 51       	subi	r28, 0x19	; 25
    d800:	d0 4f       	sbci	r29, 0xF0	; 240
    d802:	6a 89       	ldd	r22, Y+18	; 0x12
    d804:	7b 89       	ldd	r23, Y+19	; 0x13
    d806:	9b 01       	movw	r18, r22
    d808:	40 e0       	ldi	r20, 0x00	; 0
    d80a:	50 e0       	ldi	r21, 0x00	; 0
    d80c:	da 01       	movw	r26, r20
    d80e:	c9 01       	movw	r24, r18
    d810:	80 75       	andi	r24, 0x50	; 80
    d812:	90 70       	andi	r25, 0x00	; 0
    d814:	a0 70       	andi	r26, 0x00	; 0
    d816:	b0 70       	andi	r27, 0x00	; 0
    d818:	00 97       	sbiw	r24, 0x00	; 0
    d81a:	a1 05       	cpc	r26, r1
    d81c:	b1 05       	cpc	r27, r1
    d81e:	09 f4       	brne	.+2      	; 0xd822 <UpdateFrogs+0x94a>
    d820:	f8 c0       	rjmp	.+496    	; 0xda12 <UpdateFrogs+0xb3a>
			bool side = (Frogs[i].x < (SCREEN_TILES_H*TILE_WIDTH)/2);
    d822:	d8 80       	ld	r13, Y
    d824:	f8 01       	movw	r30, r16
    d826:	ee 0f       	add	r30, r30
    d828:	ff 1f       	adc	r31, r31
			if(!(Frogs[i].State & FACING)){//looking left
    d82a:	22 fd       	sbrc	r18, 2
    d82c:	1f c0       	rjmp	.+62     	; 0xd86c <UpdateFrogs+0x994>
				if(JoyVal[i] & BTN_LEFT){
    d82e:	e4 5e       	subi	r30, 0xE4	; 228
    d830:	ff 4e       	sbci	r31, 0xEF	; 239
    d832:	80 81       	ld	r24, Z
    d834:	86 ff       	sbrs	r24, 6
    d836:	0d c0       	rjmp	.+26     	; 0xd852 <UpdateFrogs+0x97a>
					Frogs[i].xVel += STEERACCELERATION;
    d838:	8e 81       	ldd	r24, Y+6	; 0x06
    d83a:	9f 81       	ldd	r25, Y+7	; 0x07
    d83c:	40 96       	adiw	r24, 0x10	; 16
    d83e:	9f 83       	std	Y+7, r25	; 0x07
    d840:	8e 83       	std	Y+6, r24	; 0x06
					if(Frogs[i].xVel > STEERMAXACCELERATION)
    d842:	81 58       	subi	r24, 0x81	; 129
    d844:	91 40       	sbci	r25, 0x01	; 1
    d846:	7c f1       	brlt	.+94     	; 0xd8a6 <UpdateFrogs+0x9ce>
						Frogs[i].xVel = STEERMAXACCELERATION;
    d848:	20 e8       	ldi	r18, 0x80	; 128
    d84a:	31 e0       	ldi	r19, 0x01	; 1
    d84c:	3f 83       	std	Y+7, r19	; 0x07
    d84e:	2e 83       	std	Y+6, r18	; 0x06
    d850:	2a c0       	rjmp	.+84     	; 0xd8a6 <UpdateFrogs+0x9ce>
				}else if(JoyVal[i] & BTN_RIGHT){
    d852:	87 ff       	sbrs	r24, 7
    d854:	28 c0       	rjmp	.+80     	; 0xd8a6 <UpdateFrogs+0x9ce>
					if(Frogs[i].xVel < STEERACCELERATION){
    d856:	8e 81       	ldd	r24, Y+6	; 0x06
    d858:	9f 81       	ldd	r25, Y+7	; 0x07
    d85a:	80 31       	cpi	r24, 0x10	; 16
    d85c:	91 05       	cpc	r25, r1
    d85e:	04 f5       	brge	.+64     	; 0xd8a0 <UpdateFrogs+0x9c8>
						Frogs[i].xVel = 0;
    d860:	1f 82       	std	Y+7, r1	; 0x07
    d862:	1e 82       	std	Y+6, r1	; 0x06
						Frogs[i].State |= FACING;
    d864:	64 60       	ori	r22, 0x04	; 4
    d866:	7b 8b       	std	Y+19, r23	; 0x13
    d868:	6a 8b       	std	Y+18, r22	; 0x12
    d86a:	1d c0       	rjmp	.+58     	; 0xd8a6 <UpdateFrogs+0x9ce>
					//	Frogs[i].xFrac = 0;
					}else
						Frogs[i].xVel -= STEERACCELERATION; 
				}
			}else{//looking right
				if(JoyVal[i] & BTN_RIGHT){
    d86c:	e4 5e       	subi	r30, 0xE4	; 228
    d86e:	ff 4e       	sbci	r31, 0xEF	; 239
    d870:	80 81       	ld	r24, Z
    d872:	87 ff       	sbrs	r24, 7
    d874:	0b c0       	rjmp	.+22     	; 0xd88c <UpdateFrogs+0x9b4>
					Frogs[i].xVel += STEERACCELERATION;
    d876:	8e 81       	ldd	r24, Y+6	; 0x06
    d878:	9f 81       	ldd	r25, Y+7	; 0x07
    d87a:	40 96       	adiw	r24, 0x10	; 16
    d87c:	9f 83       	std	Y+7, r25	; 0x07
    d87e:	8e 83       	std	Y+6, r24	; 0x06
					if(Frogs[i].xVel > STEERMAXACCELERATION)
    d880:	81 58       	subi	r24, 0x81	; 129
    d882:	91 40       	sbci	r25, 0x01	; 1
    d884:	84 f0       	brlt	.+32     	; 0xd8a6 <UpdateFrogs+0x9ce>
						Frogs[i].xVel = STEERMAXACCELERATION;
    d886:	80 e8       	ldi	r24, 0x80	; 128
    d888:	91 e0       	ldi	r25, 0x01	; 1
    d88a:	0b c0       	rjmp	.+22     	; 0xd8a2 <UpdateFrogs+0x9ca>
				}else if(JoyVal[i] & BTN_LEFT){
    d88c:	86 ff       	sbrs	r24, 6
    d88e:	0b c0       	rjmp	.+22     	; 0xd8a6 <UpdateFrogs+0x9ce>
					if(Frogs[i].xVel < STEERACCELERATION){
    d890:	8e 81       	ldd	r24, Y+6	; 0x06
    d892:	9f 81       	ldd	r25, Y+7	; 0x07
    d894:	80 31       	cpi	r24, 0x10	; 16
    d896:	91 05       	cpc	r25, r1
    d898:	1c f4       	brge	.+6      	; 0xd8a0 <UpdateFrogs+0x9c8>
						Frogs[i].xVel = 0;
    d89a:	1f 82       	std	Y+7, r1	; 0x07
    d89c:	1e 82       	std	Y+6, r1	; 0x06
    d89e:	03 c0       	rjmp	.+6      	; 0xd8a6 <UpdateFrogs+0x9ce>
						Frogs[i].State ^ FACING;
					//	Frogs[i].xFrac = 0;
					}else
						Frogs[i].xVel -= STEERACCELERATION; 
    d8a0:	40 97       	sbiw	r24, 0x10	; 16
    d8a2:	9f 83       	std	Y+7, r25	; 0x07
    d8a4:	8e 83       	std	Y+6, r24	; 0x06
				}
			}

			//check for wall jump
			if(JoyVal[i] & JUMP_BUTTON && !(OldJoyVal[i] & JUMP_BUTTON)){
    d8a6:	d8 01       	movw	r26, r16
    d8a8:	aa 0f       	add	r26, r26
    d8aa:	bb 1f       	adc	r27, r27
    d8ac:	fd 01       	movw	r30, r26
    d8ae:	e4 5e       	subi	r30, 0xE4	; 228
    d8b0:	ff 4e       	sbci	r31, 0xEF	; 239
    d8b2:	80 81       	ld	r24, Z
    d8b4:	91 81       	ldd	r25, Z+1	; 0x01
    d8b6:	80 71       	andi	r24, 0x10	; 16
    d8b8:	91 70       	andi	r25, 0x01	; 1
    d8ba:	89 2b       	or	r24, r25
    d8bc:	09 f4       	brne	.+2      	; 0xd8c0 <UpdateFrogs+0x9e8>
    d8be:	45 c0       	rjmp	.+138    	; 0xd94a <UpdateFrogs+0xa72>
    d8c0:	a9 5e       	subi	r26, 0xE9	; 233
    d8c2:	bf 4e       	sbci	r27, 0xEF	; 239
    d8c4:	8d 91       	ld	r24, X+
    d8c6:	9c 91       	ld	r25, X
    d8c8:	80 71       	andi	r24, 0x10	; 16
    d8ca:	91 70       	andi	r25, 0x01	; 1
    d8cc:	89 2b       	or	r24, r25
    d8ce:	e9 f5       	brne	.+122    	; 0xd94a <UpdateFrogs+0xa72>
				if((Frogs[i].x < 2 && (Frogs[i].State & FACING)) || (Frogs[i].x > (SCREEN_TILES_H*TILE_WIDTH)-((TILE_WIDTH*2)+2) && !(Frogs[i].State & FACING))){
    d8d0:	0e 9d       	mul	r16, r14
    d8d2:	f0 01       	movw	r30, r0
    d8d4:	0f 9d       	mul	r16, r15
    d8d6:	f0 0d       	add	r31, r0
    d8d8:	1e 9d       	mul	r17, r14
    d8da:	f0 0d       	add	r31, r0
    d8dc:	11 24       	eor	r1, r1
    d8de:	e9 51       	subi	r30, 0x19	; 25
    d8e0:	f0 4f       	sbci	r31, 0xF0	; 240
    d8e2:	90 81       	ld	r25, Z
    d8e4:	92 30       	cpi	r25, 0x02	; 2
    d8e6:	18 f4       	brcc	.+6      	; 0xd8ee <UpdateFrogs+0xa16>
    d8e8:	82 89       	ldd	r24, Z+18	; 0x12
    d8ea:	82 fd       	sbrc	r24, 2
    d8ec:	0e c0       	rjmp	.+28     	; 0xd90a <UpdateFrogs+0xa32>
    d8ee:	9f 3d       	cpi	r25, 0xDF	; 223
    d8f0:	60 f1       	brcs	.+88     	; 0xd94a <UpdateFrogs+0xa72>
    d8f2:	0e 9d       	mul	r16, r14
    d8f4:	f0 01       	movw	r30, r0
    d8f6:	0f 9d       	mul	r16, r15
    d8f8:	f0 0d       	add	r31, r0
    d8fa:	1e 9d       	mul	r17, r14
    d8fc:	f0 0d       	add	r31, r0
    d8fe:	11 24       	eor	r1, r1
    d900:	e9 51       	subi	r30, 0x19	; 25
    d902:	f0 4f       	sbci	r31, 0xF0	; 240
    d904:	82 89       	ldd	r24, Z+18	; 0x12
    d906:	82 fd       	sbrc	r24, 2
    d908:	20 c0       	rjmp	.+64     	; 0xd94a <UpdateFrogs+0xa72>
					Frogs[i].State = (JUMPING|(Frogs[i].State & FACING));
    d90a:	0e 9d       	mul	r16, r14
    d90c:	f0 01       	movw	r30, r0
    d90e:	0f 9d       	mul	r16, r15
    d910:	f0 0d       	add	r31, r0
    d912:	1e 9d       	mul	r17, r14
    d914:	f0 0d       	add	r31, r0
    d916:	11 24       	eor	r1, r1
    d918:	e9 51       	subi	r30, 0x19	; 25
    d91a:	f0 4f       	sbci	r31, 0xF0	; 240
    d91c:	82 89       	ldd	r24, Z+18	; 0x12
    d91e:	93 89       	ldd	r25, Z+19	; 0x13
    d920:	84 70       	andi	r24, 0x04	; 4
    d922:	90 70       	andi	r25, 0x00	; 0
    d924:	80 61       	ori	r24, 0x10	; 16
    d926:	93 8b       	std	Z+19, r25	; 0x13
    d928:	82 8b       	std	Z+18, r24	; 0x12
					Frogs[i].xVel = JUMPINITIALXMOMENTUM*4;
    d92a:	20 e0       	ldi	r18, 0x00	; 0
    d92c:	34 e0       	ldi	r19, 0x04	; 4
    d92e:	37 83       	std	Z+7, r19	; 0x07
    d930:	26 83       	std	Z+6, r18	; 0x06
					Frogs[i].yVel = JUMPINITIALACCELERATION;
    d932:	51 86       	std	Z+9, r5	; 0x09
    d934:	40 86       	std	Z+8, r4	; 0x08
					Frogs[i].JumpCeiling = DOUBLEJUMPCEILING;
    d936:	22 86       	std	Z+10, r2	; 0x0a

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    d938:	80 91 1b 10 	lds	r24, 0x101B
    d93c:	88 23       	and	r24, r24
    d93e:	29 f0       	breq	.+10     	; 0xd94a <UpdateFrogs+0xa72>
		TriggerFx(patch,255,1);
    d940:	86 e0       	ldi	r24, 0x06	; 6
    d942:	6f ef       	ldi	r22, 0xFF	; 255
    d944:	41 e0       	ldi	r20, 0x01	; 1
    d946:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
					FFTriggerFx(SFX_JUMP1);
				}
			}
			//HACK
			if(Frogs[i].xVel == 0){
    d94a:	0e 9d       	mul	r16, r14
    d94c:	d0 01       	movw	r26, r0
    d94e:	0f 9d       	mul	r16, r15
    d950:	b0 0d       	add	r27, r0
    d952:	1e 9d       	mul	r17, r14
    d954:	b0 0d       	add	r27, r0
    d956:	11 24       	eor	r1, r1
    d958:	a9 51       	subi	r26, 0x19	; 25
    d95a:	b0 4f       	sbci	r27, 0xF0	; 240
    d95c:	16 96       	adiw	r26, 0x06	; 6
    d95e:	8d 91       	ld	r24, X+
    d960:	9c 91       	ld	r25, X
    d962:	17 97       	sbiw	r26, 0x07	; 7
    d964:	89 2b       	or	r24, r25
    d966:	e9 f4       	brne	.+58     	; 0xd9a2 <UpdateFrogs+0xaca>
				if(JoyVal[i] & BTN_RIGHT)
    d968:	f8 01       	movw	r30, r16
    d96a:	ee 0f       	add	r30, r30
    d96c:	ff 1f       	adc	r31, r31
    d96e:	e4 5e       	subi	r30, 0xE4	; 228
    d970:	ff 4e       	sbci	r31, 0xEF	; 239
    d972:	80 81       	ld	r24, Z
    d974:	87 ff       	sbrs	r24, 7
    d976:	06 c0       	rjmp	.+12     	; 0xd984 <UpdateFrogs+0xaac>
					Frogs[i].State |= FACING;
    d978:	52 96       	adiw	r26, 0x12	; 18
    d97a:	8d 91       	ld	r24, X+
    d97c:	9c 91       	ld	r25, X
    d97e:	53 97       	sbiw	r26, 0x13	; 19
    d980:	84 60       	ori	r24, 0x04	; 4
    d982:	0b c0       	rjmp	.+22     	; 0xd99a <UpdateFrogs+0xac2>
				else if(JoyVal[i] & BTN_LEFT){
    d984:	86 ff       	sbrs	r24, 6
    d986:	0d c0       	rjmp	.+26     	; 0xd9a2 <UpdateFrogs+0xaca>
					Frogs[i].State |= FACING;
    d988:	52 96       	adiw	r26, 0x12	; 18
    d98a:	8d 91       	ld	r24, X+
    d98c:	9c 91       	ld	r25, X
    d98e:	53 97       	sbiw	r26, 0x13	; 19
    d990:	84 60       	ori	r24, 0x04	; 4
					Frogs[i].State ^= FACING; 
    d992:	e4 e0       	ldi	r30, 0x04	; 4
    d994:	f0 e0       	ldi	r31, 0x00	; 0
    d996:	8e 27       	eor	r24, r30
    d998:	9f 27       	eor	r25, r31
    d99a:	53 96       	adiw	r26, 0x13	; 19
    d99c:	9c 93       	st	X, r25
    d99e:	8e 93       	st	-X, r24
    d9a0:	52 97       	sbiw	r26, 0x12	; 18
				}
			}

			
			Frogs[i].xFrac += Frogs[i].xVel;
    d9a2:	0e 9d       	mul	r16, r14
    d9a4:	f0 01       	movw	r30, r0
    d9a6:	0f 9d       	mul	r16, r15
    d9a8:	f0 0d       	add	r31, r0
    d9aa:	1e 9d       	mul	r17, r14
    d9ac:	f0 0d       	add	r31, r0
    d9ae:	11 24       	eor	r1, r1
    d9b0:	e9 51       	subi	r30, 0x19	; 25
    d9b2:	f0 4f       	sbci	r31, 0xF0	; 240
    d9b4:	86 81       	ldd	r24, Z+6	; 0x06
    d9b6:	97 81       	ldd	r25, Z+7	; 0x07
    d9b8:	22 81       	ldd	r18, Z+2	; 0x02
    d9ba:	33 81       	ldd	r19, Z+3	; 0x03
    d9bc:	82 0f       	add	r24, r18
    d9be:	93 1f       	adc	r25, r19
    d9c0:	93 83       	std	Z+3, r25	; 0x03
    d9c2:	82 83       	std	Z+2, r24	; 0x02
			if(Frogs[i].State & FACING)//right
    d9c4:	22 89       	ldd	r18, Z+18	; 0x12
    d9c6:	89 2f       	mov	r24, r25
    d9c8:	99 0f       	add	r25, r25
    d9ca:	99 0b       	sbc	r25, r25
    d9cc:	30 81       	ld	r19, Z
    d9ce:	22 ff       	sbrs	r18, 2
    d9d0:	02 c0       	rjmp	.+4      	; 0xd9d6 <UpdateFrogs+0xafe>
				Frogs[i].x += (Frogs[i].xFrac>>8);
    d9d2:	38 0f       	add	r19, r24
    d9d4:	01 c0       	rjmp	.+2      	; 0xd9d8 <UpdateFrogs+0xb00>
			else
				Frogs[i].x -= (Frogs[i].xFrac>>8);
    d9d6:	38 1b       	sub	r19, r24
    d9d8:	30 83       	st	Z, r19

			Frogs[i].xFrac &= 0xFF;//save lower byte
    d9da:	0e 9d       	mul	r16, r14
    d9dc:	f0 01       	movw	r30, r0
    d9de:	0f 9d       	mul	r16, r15
    d9e0:	f0 0d       	add	r31, r0
    d9e2:	1e 9d       	mul	r17, r14
    d9e4:	f0 0d       	add	r31, r0
    d9e6:	11 24       	eor	r1, r1
    d9e8:	e9 51       	subi	r30, 0x19	; 25
    d9ea:	f0 4f       	sbci	r31, 0xF0	; 240
    d9ec:	82 81       	ldd	r24, Z+2	; 0x02
    d9ee:	93 81       	ldd	r25, Z+3	; 0x03
    d9f0:	90 70       	andi	r25, 0x00	; 0
    d9f2:	93 83       	std	Z+3, r25	; 0x03
    d9f4:	82 83       	std	Z+2, r24	; 0x02



			if(true){
				if(Frogs[i].x >= (SCREEN_TILES_H*TILE_WIDTH)-15){//passed through the screen border
    d9f6:	80 81       	ld	r24, Z
    d9f8:	81 3e       	cpi	r24, 0xE1	; 225
    d9fa:	58 f0       	brcs	.+22     	; 0xda12 <UpdateFrogs+0xb3a>
					Frogs[i].xFrac = 0;
    d9fc:	13 82       	std	Z+3, r1	; 0x03
    d9fe:	12 82       	std	Z+2, r1	; 0x02
					Frogs[i].xVel = 0;
    da00:	17 82       	std	Z+7, r1	; 0x07
    da02:	16 82       	std	Z+6, r1	; 0x06
					if(side)
    da04:	27 e7       	ldi	r18, 0x77	; 119
    da06:	2d 15       	cp	r18, r13
    da08:	10 f0       	brcs	.+4      	; 0xda0e <UpdateFrogs+0xb36>
						Frogs[i].x = 0;
    da0a:	10 82       	st	Z, r1
    da0c:	02 c0       	rjmp	.+4      	; 0xda12 <UpdateFrogs+0xb3a>
					else
						Frogs[i].x = (SCREEN_TILES_H*TILE_WIDTH)-16;
    da0e:	30 ee       	ldi	r19, 0xE0	; 224
    da10:	30 83       	st	Z, r19
				}
			}

		}

		if((Frogs[i].State & (JUMPING|FALLING)) && !Frogs[i].Wait){//check lick
    da12:	0e 9d       	mul	r16, r14
    da14:	e0 01       	movw	r28, r0
    da16:	0f 9d       	mul	r16, r15
    da18:	d0 0d       	add	r29, r0
    da1a:	1e 9d       	mul	r17, r14
    da1c:	d0 0d       	add	r29, r0
    da1e:	11 24       	eor	r1, r1
    da20:	c9 51       	subi	r28, 0x19	; 25
    da22:	d0 4f       	sbci	r29, 0xF0	; 240
    da24:	6a 89       	ldd	r22, Y+18	; 0x12
    da26:	7b 89       	ldd	r23, Y+19	; 0x13
    da28:	9b 01       	movw	r18, r22
    da2a:	40 e0       	ldi	r20, 0x00	; 0
    da2c:	50 e0       	ldi	r21, 0x00	; 0
    da2e:	da 01       	movw	r26, r20
    da30:	c9 01       	movw	r24, r18
    da32:	80 75       	andi	r24, 0x50	; 80
    da34:	90 70       	andi	r25, 0x00	; 0
    da36:	a0 70       	andi	r26, 0x00	; 0
    da38:	b0 70       	andi	r27, 0x00	; 0
    da3a:	00 97       	sbiw	r24, 0x00	; 0
    da3c:	a1 05       	cpc	r26, r1
    da3e:	b1 05       	cpc	r27, r1
    da40:	59 f1       	breq	.+86     	; 0xda98 <UpdateFrogs+0xbc0>
    da42:	8f 85       	ldd	r24, Y+15	; 0x0f
    da44:	88 23       	and	r24, r24
    da46:	41 f5       	brne	.+80     	; 0xda98 <UpdateFrogs+0xbc0>
			if((!(Frogs[i].State & TONGUEING)) && (JoyVal[i] & LICK_BUTTON) && !(OldJoyVal[i] & LICK_BUTTON)){
    da48:	30 fd       	sbrc	r19, 0
    da4a:	26 c0       	rjmp	.+76     	; 0xda98 <UpdateFrogs+0xbc0>
    da4c:	d8 01       	movw	r26, r16
    da4e:	aa 0f       	add	r26, r26
    da50:	bb 1f       	adc	r27, r27
    da52:	fd 01       	movw	r30, r26
    da54:	e4 5e       	subi	r30, 0xE4	; 228
    da56:	ff 4e       	sbci	r31, 0xEF	; 239
    da58:	80 81       	ld	r24, Z
    da5a:	91 81       	ldd	r25, Z+1	; 0x01
    da5c:	81 70       	andi	r24, 0x01	; 1
    da5e:	9c 70       	andi	r25, 0x0C	; 12
    da60:	89 2b       	or	r24, r25
    da62:	d1 f0       	breq	.+52     	; 0xda98 <UpdateFrogs+0xbc0>
    da64:	a9 5e       	subi	r26, 0xE9	; 233
    da66:	bf 4e       	sbci	r27, 0xEF	; 239
    da68:	8d 91       	ld	r24, X+
    da6a:	9c 91       	ld	r25, X
    da6c:	81 70       	andi	r24, 0x01	; 1
    da6e:	9c 70       	andi	r25, 0x0C	; 12
    da70:	89 2b       	or	r24, r25
    da72:	91 f4       	brne	.+36     	; 0xda98 <UpdateFrogs+0xbc0>
				Frogs[i].State |= TONGUEING;
    da74:	71 60       	ori	r23, 0x01	; 1
    da76:	7b 8b       	std	Y+19, r23	; 0x13
    da78:	6a 8b       	std	Y+18, r22	; 0x12
				Frogs[i].TongueTime = 0;
    da7a:	1d 86       	std	Y+13, r1	; 0x0d
				FFTriggerFx(SFX_TONGUE1+(prng()&1));
    da7c:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    da80:	98 2f       	mov	r25, r24

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    da82:	80 91 1b 10 	lds	r24, 0x101B
    da86:	88 23       	and	r24, r24
    da88:	39 f0       	breq	.+14     	; 0xda98 <UpdateFrogs+0xbc0>
		TriggerFx(patch,255,1);
    da8a:	91 70       	andi	r25, 0x01	; 1
    da8c:	89 2f       	mov	r24, r25
    da8e:	8e 5f       	subi	r24, 0xFE	; 254
    da90:	6f ef       	ldi	r22, 0xFF	; 255
    da92:	41 e0       	ldi	r20, 0x01	; 1
    da94:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
			}
		}

		if(Frogs[i].State & TONGUEING){//update tongue
    da98:	0e 9d       	mul	r16, r14
    da9a:	f0 01       	movw	r30, r0
    da9c:	0f 9d       	mul	r16, r15
    da9e:	f0 0d       	add	r31, r0
    daa0:	1e 9d       	mul	r17, r14
    daa2:	f0 0d       	add	r31, r0
    daa4:	11 24       	eor	r1, r1
    daa6:	e9 51       	subi	r30, 0x19	; 25
    daa8:	f0 4f       	sbci	r31, 0xF0	; 240
    daaa:	82 89       	ldd	r24, Z+18	; 0x12
    daac:	93 89       	ldd	r25, Z+19	; 0x13
    daae:	9c 01       	movw	r18, r24
    dab0:	40 e0       	ldi	r20, 0x00	; 0
    dab2:	50 e0       	ldi	r21, 0x00	; 0
    dab4:	30 ff       	sbrs	r19, 0
    dab6:	1f c0       	rjmp	.+62     	; 0xdaf6 <UpdateFrogs+0xc1e>
			if((++Frogs[i].TongueTime == LICKLENGTH) || !(Frogs[i].State & (JUMPING|FALLING))){
    dab8:	85 85       	ldd	r24, Z+13	; 0x0d
    daba:	8f 5f       	subi	r24, 0xFF	; 255
    dabc:	85 87       	std	Z+13, r24	; 0x0d
    dabe:	80 31       	cpi	r24, 0x10	; 16
    dac0:	49 f0       	breq	.+18     	; 0xdad4 <UpdateFrogs+0xbfc>
    dac2:	20 75       	andi	r18, 0x50	; 80
    dac4:	30 70       	andi	r19, 0x00	; 0
    dac6:	40 70       	andi	r20, 0x00	; 0
    dac8:	50 70       	andi	r21, 0x00	; 0
    daca:	21 15       	cp	r18, r1
    dacc:	31 05       	cpc	r19, r1
    dace:	41 05       	cpc	r20, r1
    dad0:	51 05       	cpc	r21, r1
    dad2:	89 f4       	brne	.+34     	; 0xdaf6 <UpdateFrogs+0xc1e>
				Frogs[i].State ^= TONGUEING;
    dad4:	0e 9d       	mul	r16, r14
    dad6:	f0 01       	movw	r30, r0
    dad8:	0f 9d       	mul	r16, r15
    dada:	f0 0d       	add	r31, r0
    dadc:	1e 9d       	mul	r17, r14
    dade:	f0 0d       	add	r31, r0
    dae0:	11 24       	eor	r1, r1
    dae2:	e9 51       	subi	r30, 0x19	; 25
    dae4:	f0 4f       	sbci	r31, 0xF0	; 240
    dae6:	82 89       	ldd	r24, Z+18	; 0x12
    dae8:	93 89       	ldd	r25, Z+19	; 0x13
    daea:	86 25       	eor	r24, r6
    daec:	97 25       	eor	r25, r7
    daee:	93 8b       	std	Z+19, r25	; 0x13
    daf0:	82 8b       	std	Z+18, r24	; 0x12
				Frogs[i].Wait = TONGUEWAIT;
    daf2:	45 e0       	ldi	r20, 0x05	; 5
    daf4:	47 87       	std	Z+15, r20	; 0x0f
			}
		}


		if(Frogs[i].y >= FROGY && !(Frogs[i].State & SWIMMING)){
    daf6:	0e 9d       	mul	r16, r14
    daf8:	f0 01       	movw	r30, r0
    dafa:	0f 9d       	mul	r16, r15
    dafc:	f0 0d       	add	r31, r0
    dafe:	1e 9d       	mul	r17, r14
    db00:	f0 0d       	add	r31, r0
    db02:	11 24       	eor	r1, r1
    db04:	e9 51       	subi	r30, 0x19	; 25
    db06:	f0 4f       	sbci	r31, 0xF0	; 240
    db08:	81 81       	ldd	r24, Z+1	; 0x01
    db0a:	8c 3a       	cpi	r24, 0xAC	; 172
    db0c:	30 f1       	brcs	.+76     	; 0xdb5a <UpdateFrogs+0xc82>
    db0e:	22 89       	ldd	r18, Z+18	; 0x12
    db10:	33 89       	ldd	r19, Z+19	; 0x13
    db12:	27 fd       	sbrc	r18, 7
    db14:	22 c0       	rjmp	.+68     	; 0xdb5a <UpdateFrogs+0xc82>
			if(Frogs[i].x < LEFTEDGE || (Frogs[i].x > MIDDLELEFT && Frogs[i].x < MIDDLERIGHT)	|| Frogs[i].x > RIGHTEDGE){
    db16:	90 81       	ld	r25, Z
    db18:	9a 31       	cpi	r25, 0x1A	; 26
    db1a:	30 f0       	brcs	.+12     	; 0xdb28 <UpdateFrogs+0xc50>
    db1c:	89 2f       	mov	r24, r25
    db1e:	8d 56       	subi	r24, 0x6D	; 109
    db20:	8f 30       	cpi	r24, 0x0F	; 15
    db22:	10 f0       	brcs	.+4      	; 0xdb28 <UpdateFrogs+0xc50>
    db24:	9d 3c       	cpi	r25, 0xCD	; 205
    db26:	c8 f0       	brcs	.+50     	; 0xdb5a <UpdateFrogs+0xc82>
				Frogs[i].State = SWIMMING|(Frogs[i].State & FACING);
    db28:	0e 9d       	mul	r16, r14
    db2a:	f0 01       	movw	r30, r0
    db2c:	0f 9d       	mul	r16, r15
    db2e:	f0 0d       	add	r31, r0
    db30:	1e 9d       	mul	r17, r14
    db32:	f0 0d       	add	r31, r0
    db34:	11 24       	eor	r1, r1
    db36:	e9 51       	subi	r30, 0x19	; 25
    db38:	f0 4f       	sbci	r31, 0xF0	; 240
    db3a:	24 70       	andi	r18, 0x04	; 4
    db3c:	30 70       	andi	r19, 0x00	; 0
    db3e:	20 68       	ori	r18, 0x80	; 128
    db40:	33 8b       	std	Z+19, r19	; 0x13
    db42:	22 8b       	std	Z+18, r18	; 0x12
				Frogs[i].AIState = AI_SWIM;
    db44:	88 e0       	ldi	r24, 0x08	; 8
    db46:	80 8b       	std	Z+16, r24	; 0x10

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    db48:	80 91 1b 10 	lds	r24, 0x101B
    db4c:	88 23       	and	r24, r24
    db4e:	29 f0       	breq	.+10     	; 0xdb5a <UpdateFrogs+0xc82>
		TriggerFx(patch,255,1);
    db50:	81 e0       	ldi	r24, 0x01	; 1
    db52:	6f ef       	ldi	r22, 0xFF	; 255
    db54:	41 e0       	ldi	r20, 0x01	; 1
    db56:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>

}

void UpdateFrogs(){

	for(uint8_t i=0;i<MAXPLAYERS;i++){
    db5a:	b3 94       	inc	r11
    db5c:	aa 94       	dec	r10
    db5e:	09 f0       	breq	.+2      	; 0xdb62 <UpdateFrogs+0xc8a>
    db60:	d4 c9       	rjmp	.-3160   	; 0xcf0a <UpdateFrogs+0x32>
				FFTriggerFx(SFX_WATER);
			}
		}
	}

}
    db62:	cd b7       	in	r28, 0x3d	; 61
    db64:	de b7       	in	r29, 0x3e	; 62
    db66:	e2 e1       	ldi	r30, 0x12	; 18
    db68:	0c 94 0e 77 	jmp	0xee1c	; 0xee1c <__epilogue_restores__>

0000db6c <GameLoop>:
#include "graphics.h"
#include "gui.h"
#include "ai.h"


void GameLoop(){
    db6c:	a0 e0       	ldi	r26, 0x00	; 0
    db6e:	b0 e0       	ldi	r27, 0x00	; 0
    db70:	ec eb       	ldi	r30, 0xBC	; 188
    db72:	fd e6       	ldi	r31, 0x6D	; 109
    db74:	0c 94 f9 76 	jmp	0xedf2	; 0xedf2 <__prologue_saves__+0xe>

	InGui = false;
    db78:	10 92 d2 0f 	sts	0x0FD2, r1
	//if(!Demo)
	//	StartSong(TitleSong);
	FadeIn(3,false);
    db7c:	83 e0       	ldi	r24, 0x03	; 3
    db7e:	60 e0       	ldi	r22, 0x00	; 0
    db80:	0e 94 22 5c 	call	0xb844	; 0xb844 <FadeIn>
}

inline void ResetLogic(){

	for(uint8_t i=0;i<2;i++){
		Frogs[i].Score = 0;
    db84:	10 92 fc 0f 	sts	0x0FFC, r1
		Frogs[i].x					= (!i)?FROG1X:FROG2X;
    db88:	88 e2       	ldi	r24, 0x28	; 40
    db8a:	80 93 e7 0f 	sts	0x0FE7, r24
		Frogs[i].y					= FROGY;
    db8e:	1c ea       	ldi	r17, 0xAC	; 172
    db90:	10 93 e8 0f 	sts	0x0FE8, r17
		(Frogs[i].State 			= (SITTING|((!i)*FACING)));
    db94:	85 e0       	ldi	r24, 0x05	; 5
    db96:	90 e0       	ldi	r25, 0x00	; 0
    db98:	90 93 fa 0f 	sts	0x0FFA, r25
    db9c:	80 93 f9 0f 	sts	0x0FF9, r24
		Frogs[i].AirTime			= 0;
    dba0:	10 92 f3 0f 	sts	0x0FF3, r1
		Frogs[i].TongueTime			= 0;
    dba4:	10 92 f4 0f 	sts	0x0FF4, r1
		Frogs[i].AIState			= AI_SIT;
    dba8:	10 92 f7 0f 	sts	0x0FF7, r1
		Frogs[i].Wait				= 0;
    dbac:	10 92 f6 0f 	sts	0x0FF6, r1
		Frogs[i].BlinkTime			= prng();
    dbb0:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    dbb4:	80 93 f5 0f 	sts	0x0FF5, r24
		Frogs[i].InvincibleTimer 	= 0;
    dbb8:	10 92 f2 0f 	sts	0x0FF2, r1
}

inline void ResetLogic(){

	for(uint8_t i=0;i<2;i++){
		Frogs[i].Score = 0;
    dbbc:	10 92 13 10 	sts	0x1013, r1
		Frogs[i].x					= (!i)?FROG1X:FROG2X;
    dbc0:	80 ec       	ldi	r24, 0xC0	; 192
    dbc2:	80 93 fe 0f 	sts	0x0FFE, r24
		Frogs[i].y					= FROGY;
    dbc6:	10 93 ff 0f 	sts	0x0FFF, r17
		(Frogs[i].State 			= (SITTING|((!i)*FACING)));
    dbca:	81 e0       	ldi	r24, 0x01	; 1
    dbcc:	90 e0       	ldi	r25, 0x00	; 0
    dbce:	90 93 11 10 	sts	0x1011, r25
    dbd2:	80 93 10 10 	sts	0x1010, r24
		Frogs[i].AirTime			= 0;
    dbd6:	10 92 0a 10 	sts	0x100A, r1
		Frogs[i].TongueTime			= 0;
    dbda:	10 92 0b 10 	sts	0x100B, r1
		Frogs[i].AIState			= AI_SIT;
    dbde:	10 92 0e 10 	sts	0x100E, r1
		Frogs[i].Wait				= 0;
    dbe2:	10 92 0d 10 	sts	0x100D, r1
		Frogs[i].BlinkTime			= prng();
    dbe6:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    dbea:	80 93 0c 10 	sts	0x100C, r24
		Frogs[i].InvincibleTimer 	= 0;
    dbee:	10 92 09 10 	sts	0x1009, r1
	}
	FlyCount = 3;
    dbf2:	83 e0       	ldi	r24, 0x03	; 3
    dbf4:	80 93 25 10 	sts	0x1025, r24
    dbf8:	c5 ed       	ldi	r28, 0xD5	; 213
    dbfa:	df e0       	ldi	r29, 0x0F	; 15
    dbfc:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<MAXFLIES;i++){
		Flies[i].State = 0;
		if(i<FlyCount){
			Flies[i].State |= ACTIVE;
    dbfe:	00 e1       	ldi	r16, 0x10	; 16
		Frogs[i].BlinkTime			= prng();
		Frogs[i].InvincibleTimer 	= 0;
	}
	FlyCount = 3;
	for(uint8_t i=0;i<MAXFLIES;i++){
		Flies[i].State = 0;
    dc00:	1a 82       	std	Y+2, r1	; 0x02
		if(i<FlyCount){
    dc02:	80 91 25 10 	lds	r24, 0x1025
    dc06:	18 17       	cp	r17, r24
    dc08:	48 f4       	brcc	.+18     	; 0xdc1c <GameLoop+0xb0>
			Flies[i].State |= ACTIVE;
    dc0a:	0a 83       	std	Y+2, r16	; 0x02
			Flies[i].RebirthTimer = prng()%60;
    dc0c:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    dc10:	6c e3       	ldi	r22, 0x3C	; 60
    dc12:	70 e0       	ldi	r23, 0x00	; 0
    dc14:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    dc18:	99 83       	std	Y+1, r25	; 0x01
    dc1a:	88 83       	st	Y, r24
		Frogs[i].Wait				= 0;
		Frogs[i].BlinkTime			= prng();
		Frogs[i].InvincibleTimer 	= 0;
	}
	FlyCount = 3;
	for(uint8_t i=0;i<MAXFLIES;i++){
    dc1c:	1f 5f       	subi	r17, 0xFF	; 255
    dc1e:	25 96       	adiw	r28, 0x05	; 5
    dc20:	14 30       	cpi	r17, 0x04	; 4
    dc22:	71 f7       	brne	.-36     	; 0xdc00 <GameLoop+0x94>
	//if(!Demo)
	//	StartSong(TitleSong);
	FadeIn(3,false);
	ResetLogic();

	SetTileTable(StageTiles);
    dc24:	82 e7       	ldi	r24, 0x72	; 114
    dc26:	9e e2       	ldi	r25, 0x2E	; 46
    dc28:	0e 94 5e 52 	call	0xa4bc	; 0xa4bc <SetTileTable>
	DrawMap2(0,0,StageMap);
    dc2c:	80 e0       	ldi	r24, 0x00	; 0
    dc2e:	60 e0       	ldi	r22, 0x00	; 0
    dc30:	42 eb       	ldi	r20, 0xB2	; 178
    dc32:	52 e6       	ldi	r21, 0x62	; 98
    dc34:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <DrawMap2>

	Time		= GAMETIME;
    dc38:	88 e1       	ldi	r24, 0x18	; 24
    dc3a:	95 e1       	ldi	r25, 0x15	; 21
    dc3c:	90 93 21 10 	sts	0x1021, r25
    dc40:	80 93 20 10 	sts	0x1020, r24
//Time = 1;//for fast EEPROM debugging, I'm about 30% sure that 90% of the EEPRom bugs are gone :)
//Frogs[0].Score = 39;
	ColorTime	= 11*60L;//COLORTIMELENGTH;
    dc44:	84 e9       	ldi	r24, 0x94	; 148
    dc46:	92 e0       	ldi	r25, 0x02	; 2
    dc48:	90 93 16 10 	sts	0x1016, r25
    dc4c:	80 93 15 10 	sts	0x1015, r24
	ColorIndex	= 0;
    dc50:	10 92 d1 0f 	sts	0x0FD1, r1
	LastAction	= 0;
    dc54:	10 92 27 10 	sts	0x1027, r1
    dc58:	10 92 26 10 	sts	0x1026, r1
				}else{
					Flies[i].x = SCREENRIGHT - 8;
					Flies[i].State |= FACING;
					Flies[i].State ^= FACING;
				}
				Flies[i].y = FLYY;
    dc5c:	fc e3       	ldi	r31, 0x3C	; 60
    dc5e:	cf 2e       	mov	r12, r31
				}
				if(!FlySide){
					Flies[i].x = SCREENLEFT;
					Flies[i].State |= FACING;
				}else{
					Flies[i].x = SCREENRIGHT - 8;
    dc60:	e7 ee       	ldi	r30, 0xE7	; 231
    dc62:	be 2e       	mov	r11, r30
		}
		if(Flies[i].RebirthTimer){//waiting to come back to life
			if(!(--Flies[i].RebirthTimer)){
				if(i == FlyCount){//we want 1 less fly, for now
					Flies[i].State |= ACTIVE;
					Flies[i].State ^= ACTIVE;
    dc64:	70 e1       	ldi	r23, 0x10	; 16
    dc66:	a7 2e       	mov	r10, r23
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    dc68:	60 ef       	ldi	r22, 0xF0	; 240
    dc6a:	96 2e       	mov	r9, r22
	ColorTime	= 11*60L;//COLORTIMELENGTH;
	ColorIndex	= 0;
	LastAction	= 0;

	while (1){
		WaitVsync(1);
    dc6c:	81 e0       	ldi	r24, 0x01	; 1
    dc6e:	90 e0       	ldi	r25, 0x00	; 0
    dc70:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>


//DrawNumber(ColorTime>>8,3,SCREEN_TILES_V-1,0);
//DrawNumber(ColorTime,8,SCREEN_TILES_V-1,0);
//DrawNumber(ColorIndex,19,SCREEN_TILES_V-1,0);
		if(!ColorTime){
    dc74:	80 91 15 10 	lds	r24, 0x1015
    dc78:	90 91 16 10 	lds	r25, 0x1016
    dc7c:	89 2b       	or	r24, r25
    dc7e:	91 f4       	brne	.+36     	; 0xdca4 <GameLoop+0x138>
			if(ColorIndex < NUMCOLORSHADES){
    dc80:	e0 91 d1 0f 	lds	r30, 0x0FD1
    dc84:	e7 30       	cpi	r30, 0x07	; 7
    dc86:	70 f4       	brcc	.+28     	; 0xdca4 <GameLoop+0x138>
				ColorTime = 11*60L;//COLORTIMELENGTH;
    dc88:	84 e9       	ldi	r24, 0x94	; 148
    dc8a:	92 e0       	ldi	r25, 0x02	; 2
    dc8c:	90 93 16 10 	sts	0x1016, r25
    dc90:	80 93 15 10 	sts	0x1015, r24
				DDRC = pgm_read_byte(&CustomFadeTable[++ColorIndex]);
    dc94:	ef 5f       	subi	r30, 0xFF	; 255
    dc96:	e0 93 d1 0f 	sts	0x0FD1, r30
    dc9a:	f0 e0       	ldi	r31, 0x00	; 0
    dc9c:	e6 5b       	subi	r30, 0xB6	; 182
    dc9e:	f4 46       	sbci	r31, 0x64	; 100
    dca0:	e4 91       	lpm	r30, Z+
    dca2:	e7 b9       	out	0x07, r30	; 7
			}
		}
			ColorTime--;
    dca4:	80 91 15 10 	lds	r24, 0x1015
    dca8:	90 91 16 10 	lds	r25, 0x1016
    dcac:	01 97       	sbiw	r24, 0x01	; 1
    dcae:	90 93 16 10 	sts	0x1016, r25
    dcb2:	80 93 15 10 	sts	0x1015, r24

		UpdateFrogs();
    dcb6:	10 d9       	rcall	.-3552   	; 0xced8 <UpdateFrogs>
    dcb8:	c7 ee       	ldi	r28, 0xE7	; 231
    dcba:	df e0       	ldi	r29, 0x0F	; 15
    dcbc:	58 ec       	ldi	r21, 0xC8	; 200
    dcbe:	e5 2e       	mov	r14, r21
    dcc0:	5f e0       	ldi	r21, 0x0F	; 15
    dcc2:	f5 2e       	mov	r15, r21


inline void CheckFlies(){

	for(uint8_t i=0;i<2;i++){
		if(!(Frogs[i].State  & TONGUEING))
    dcc4:	8a 89       	ldd	r24, Y+18	; 0x12
    dcc6:	9b 89       	ldd	r25, Y+19	; 0x13
    dcc8:	a0 e0       	ldi	r26, 0x00	; 0
    dcca:	b0 e0       	ldi	r27, 0x00	; 0
    dccc:	90 ff       	sbrs	r25, 0
    dcce:	71 c0       	rjmp	.+226    	; 0xddb2 <GameLoop+0x246>
    dcd0:	03 ed       	ldi	r16, 0xD3	; 211
    dcd2:	1f e0       	ldi	r17, 0x0F	; 15
			continue;
		for(uint8_t j=0;j<MAXFLIES;j++){
			if(!(Flies[j].State & ACTIVE) || Flies[j].RebirthTimer)
    dcd4:	d8 01       	movw	r26, r16
    dcd6:	14 96       	adiw	r26, 0x04	; 4
    dcd8:	8c 91       	ld	r24, X
    dcda:	14 97       	sbiw	r26, 0x04	; 4
    dcdc:	84 ff       	sbrs	r24, 4
    dcde:	62 c0       	rjmp	.+196    	; 0xdda4 <GameLoop+0x238>
    dce0:	12 96       	adiw	r26, 0x02	; 2
    dce2:	8d 91       	ld	r24, X+
    dce4:	9c 91       	ld	r25, X
    dce6:	13 97       	sbiw	r26, 0x03	; 3
    dce8:	89 2b       	or	r24, r25
    dcea:	09 f0       	breq	.+2      	; 0xdcee <GameLoop+0x182>
    dcec:	5b c0       	rjmp	.+182    	; 0xdda4 <GameLoop+0x238>
				continue;
			uint8_t w = pgm_read_byte(&TongueLength[Frogs[i].TongueTime >> 1])+(Cheats[i]*24);
    dcee:	ed 85       	ldd	r30, Y+13	; 0x0d
    dcf0:	e6 95       	lsr	r30
    dcf2:	f0 e0       	ldi	r31, 0x00	; 0
    dcf4:	e7 5c       	subi	r30, 0xC7	; 199
    dcf6:	f4 46       	sbci	r31, 0x64	; 100
    dcf8:	e4 91       	lpm	r30, Z+
    dcfa:	d7 01       	movw	r26, r14
    dcfc:	2c 91       	ld	r18, X
    dcfe:	30 e0       	ldi	r19, 0x00	; 0
    dd00:	c9 01       	movw	r24, r18
    dd02:	88 0f       	add	r24, r24
    dd04:	99 1f       	adc	r25, r25
    dd06:	82 0f       	add	r24, r18
    dd08:	93 1f       	adc	r25, r19
    dd0a:	33 e0       	ldi	r19, 0x03	; 3
    dd0c:	88 0f       	add	r24, r24
    dd0e:	99 1f       	adc	r25, r25
    dd10:	3a 95       	dec	r19
    dd12:	e1 f7       	brne	.-8      	; 0xdd0c <GameLoop+0x1a0>
    dd14:	e8 0f       	add	r30, r24
			int16_t x1 = (int16_t)((Frogs[i].State & FACING)?(Frogs[i].x+16):(Frogs[i].x-w));
    dd16:	8a 89       	ldd	r24, Y+18	; 0x12
    dd18:	98 81       	ld	r25, Y
    dd1a:	82 ff       	sbrs	r24, 2
    dd1c:	05 c0       	rjmp	.+10     	; 0xdd28 <GameLoop+0x1bc>
    dd1e:	49 2f       	mov	r20, r25
    dd20:	50 e0       	ldi	r21, 0x00	; 0
    dd22:	40 5f       	subi	r20, 0xF0	; 240
    dd24:	5f 4f       	sbci	r21, 0xFF	; 255
    dd26:	04 c0       	rjmp	.+8      	; 0xdd30 <GameLoop+0x1c4>
    dd28:	49 2f       	mov	r20, r25
    dd2a:	50 e0       	ldi	r21, 0x00	; 0
    dd2c:	4e 1b       	sub	r20, r30
    dd2e:	51 09       	sbc	r21, r1
			if(	(Frogs[i].y+6 < Flies[j].y) ||
    dd30:	89 81       	ldd	r24, Y+1	; 0x01
    dd32:	68 2f       	mov	r22, r24
    dd34:	70 e0       	ldi	r23, 0x00	; 0
    dd36:	d8 01       	movw	r26, r16
    dd38:	11 96       	adiw	r26, 0x01	; 1
    dd3a:	8c 91       	ld	r24, X
    dd3c:	11 97       	sbiw	r26, 0x01	; 1
    dd3e:	28 2f       	mov	r18, r24
    dd40:	30 e0       	ldi	r19, 0x00	; 0
    dd42:	cb 01       	movw	r24, r22
    dd44:	06 96       	adiw	r24, 0x06	; 6
    dd46:	82 17       	cp	r24, r18
    dd48:	93 07       	cpc	r25, r19
    dd4a:	64 f1       	brlt	.+88     	; 0xdda4 <GameLoop+0x238>
    dd4c:	2c 5f       	subi	r18, 0xFC	; 252
    dd4e:	3f 4f       	sbci	r19, 0xFF	; 255
    dd50:	26 17       	cp	r18, r22
    dd52:	37 07       	cpc	r19, r23
    dd54:	3c f1       	brlt	.+78     	; 0xdda4 <GameLoop+0x238>
    dd56:	8c 91       	ld	r24, X
    dd58:	28 2f       	mov	r18, r24
    dd5a:	30 e0       	ldi	r19, 0x00	; 0
    dd5c:	c9 01       	movw	r24, r18
    dd5e:	08 96       	adiw	r24, 0x08	; 8
    dd60:	84 17       	cp	r24, r20
    dd62:	95 07       	cpc	r25, r21
    dd64:	fc f0       	brlt	.+62     	; 0xdda4 <GameLoop+0x238>
    dd66:	4e 0f       	add	r20, r30
    dd68:	51 1d       	adc	r21, r1
    dd6a:	42 17       	cp	r20, r18
    dd6c:	53 07       	cpc	r21, r19
    dd6e:	d4 f0       	brlt	.+52     	; 0xdda4 <GameLoop+0x238>
				(Frogs[i].y+4 > Flies[j].y+8) ||
				(x1 > Flies[j].x+8) ||
				(x1+w < Flies[j].x))
				continue;
			Flies[j].RebirthTimer = (prng()%140)+20;//kill fly
    dd70:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    dd74:	6c e8       	ldi	r22, 0x8C	; 140
    dd76:	70 e0       	ldi	r23, 0x00	; 0
    dd78:	0e 94 cb 76 	call	0xed96	; 0xed96 <__udivmodhi4>
    dd7c:	44 96       	adiw	r24, 0x14	; 20
    dd7e:	f8 01       	movw	r30, r16
    dd80:	93 83       	std	Z+3, r25	; 0x03
    dd82:	82 83       	std	Z+2, r24	; 0x02
			Frogs[i].Chain++;
    dd84:	8e 89       	ldd	r24, Y+22	; 0x16
    dd86:	8f 5f       	subi	r24, 0xFF	; 255
    dd88:	8e 8b       	std	Y+22, r24	; 0x16
			Frogs[i].Score += Frogs[i].Chain*2;
    dd8a:	88 0f       	add	r24, r24
    dd8c:	9d 89       	ldd	r25, Y+21	; 0x15
    dd8e:	89 0f       	add	r24, r25
    dd90:	8d 8b       	std	Y+21, r24	; 0x15

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    dd92:	80 91 1b 10 	lds	r24, 0x101B
    dd96:	88 23       	and	r24, r24
    dd98:	29 f0       	breq	.+10     	; 0xdda4 <GameLoop+0x238>
		TriggerFx(patch,255,1);
    dd9a:	84 e0       	ldi	r24, 0x04	; 4
    dd9c:	6f ef       	ldi	r22, 0xFF	; 255
    dd9e:	41 e0       	ldi	r20, 0x01	; 1
    dda0:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
    dda4:	0b 5f       	subi	r16, 0xFB	; 251
    dda6:	1f 4f       	sbci	r17, 0xFF	; 255
inline void CheckFlies(){

	for(uint8_t i=0;i<2;i++){
		if(!(Frogs[i].State  & TONGUEING))
			continue;
		for(uint8_t j=0;j<MAXFLIES;j++){
    dda8:	ff e0       	ldi	r31, 0x0F	; 15
    ddaa:	07 3e       	cpi	r16, 0xE7	; 231
    ddac:	1f 07       	cpc	r17, r31
    ddae:	09 f0       	breq	.+2      	; 0xddb2 <GameLoop+0x246>
    ddb0:	91 cf       	rjmp	.-222    	; 0xdcd4 <GameLoop+0x168>
    ddb2:	67 96       	adiw	r28, 0x17	; 23
    ddb4:	08 94       	sec
    ddb6:	e1 1c       	adc	r14, r1
    ddb8:	f1 1c       	adc	r15, r1



inline void CheckFlies(){

	for(uint8_t i=0;i<2;i++){
    ddba:	20 e1       	ldi	r18, 0x10	; 16
    ddbc:	c5 31       	cpi	r28, 0x15	; 21
    ddbe:	d2 07       	cpc	r29, r18
    ddc0:	09 f0       	breq	.+2      	; 0xddc4 <GameLoop+0x258>
    ddc2:	80 cf       	rjmp	.-256    	; 0xdcc4 <GameLoop+0x158>



inline void UpdateFlies(){

	if((uint16_t)(prng()&0x1FF) == 0x1FF){
    ddc4:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    ddc8:	91 70       	andi	r25, 0x01	; 1
    ddca:	8f 5f       	subi	r24, 0xFF	; 255
    ddcc:	91 40       	sbci	r25, 0x01	; 1
    ddce:	39 f4       	brne	.+14     	; 0xddde <GameLoop+0x272>
		if(FlyCount == MAXFLIES){FlyCount--;}else{FlyCount++;}
    ddd0:	80 91 25 10 	lds	r24, 0x1025
    ddd4:	84 30       	cpi	r24, 0x04	; 4
    ddd6:	69 f4       	brne	.+26     	; 0xddf2 <GameLoop+0x286>
    ddd8:	83 e0       	ldi	r24, 0x03	; 3
    ddda:	80 93 25 10 	sts	0x1025, r24
    ddde:	c3 ed       	ldi	r28, 0xD3	; 211
    dde0:	df e0       	ldi	r29, 0x0F	; 15
    dde2:	00 e0       	ldi	r16, 0x00	; 0
    dde4:	10 e0       	ldi	r17, 0x00	; 0
					continue;
				}
			}
		}else{
			if((uint16_t)(rnd > 1021)){
				Flies[i].State ^= FACING;
    dde6:	24 e0       	ldi	r18, 0x04	; 4
    dde8:	d2 2e       	mov	r13, r18

	for(uint8_t i=0;i<MAXFLIES;i++){
		if(!(Flies[i].State & ACTIVE)){
			if(i == FlyCount-1){//we want another fly for a while
				Flies[i].State |= ACTIVE;
				Flies[i].RebirthTimer = 1;
    ddea:	91 e0       	ldi	r25, 0x01	; 1
    ddec:	e9 2e       	mov	r14, r25
    ddee:	f1 2c       	mov	r15, r1
    ddf0:	02 c0       	rjmp	.+4      	; 0xddf6 <GameLoop+0x28a>


inline void UpdateFlies(){

	if((uint16_t)(prng()&0x1FF) == 0x1FF){
		if(FlyCount == MAXFLIES){FlyCount--;}else{FlyCount++;}
    ddf2:	8f 5f       	subi	r24, 0xFF	; 255
    ddf4:	f2 cf       	rjmp	.-28     	; 0xddda <GameLoop+0x26e>
    ddf6:	30 2f       	mov	r19, r16
	}


	for(uint8_t i=0;i<MAXFLIES;i++){
		if(!(Flies[i].State & ACTIVE)){
    ddf8:	2c 81       	ldd	r18, Y+4	; 0x04
    ddfa:	24 fd       	sbrc	r18, 4
    ddfc:	0c c0       	rjmp	.+24     	; 0xde16 <GameLoop+0x2aa>
			if(i == FlyCount-1){//we want another fly for a while
    ddfe:	80 91 25 10 	lds	r24, 0x1025
    de02:	90 e0       	ldi	r25, 0x00	; 0
    de04:	01 97       	sbiw	r24, 0x01	; 1
    de06:	08 17       	cp	r16, r24
    de08:	19 07       	cpc	r17, r25
    de0a:	09 f0       	breq	.+2      	; 0xde0e <GameLoop+0x2a2>
    de0c:	60 c0       	rjmp	.+192    	; 0xdece <GameLoop+0x362>
				Flies[i].State |= ACTIVE;
    de0e:	20 61       	ori	r18, 0x10	; 16
    de10:	2c 83       	std	Y+4, r18	; 0x04
				Flies[i].RebirthTimer = 1;
    de12:	fb 82       	std	Y+3, r15	; 0x03
    de14:	ea 82       	std	Y+2, r14	; 0x02
			}else
				continue;
		}
		if(Flies[i].RebirthTimer){//waiting to come back to life
    de16:	8a 81       	ldd	r24, Y+2	; 0x02
    de18:	9b 81       	ldd	r25, Y+3	; 0x03
    de1a:	00 97       	sbiw	r24, 0x00	; 0
    de1c:	29 f1       	breq	.+74     	; 0xde68 <GameLoop+0x2fc>
			if(!(--Flies[i].RebirthTimer)){
    de1e:	01 97       	sbiw	r24, 0x01	; 1
    de20:	9b 83       	std	Y+3, r25	; 0x03
    de22:	8a 83       	std	Y+2, r24	; 0x02
    de24:	89 2b       	or	r24, r25
    de26:	09 f0       	breq	.+2      	; 0xde2a <GameLoop+0x2be>
    de28:	52 c0       	rjmp	.+164    	; 0xdece <GameLoop+0x362>
				if(i == FlyCount){//we want 1 less fly, for now
    de2a:	80 91 25 10 	lds	r24, 0x1025
    de2e:	38 17       	cp	r19, r24
    de30:	29 f4       	brne	.+10     	; 0xde3c <GameLoop+0x2d0>
					Flies[i].State |= ACTIVE;
    de32:	8c 81       	ldd	r24, Y+4	; 0x04
    de34:	80 61       	ori	r24, 0x10	; 16
					Flies[i].State ^= ACTIVE;
    de36:	8a 25       	eor	r24, r10
    de38:	8c 83       	std	Y+4, r24	; 0x04
    de3a:	49 c0       	rjmp	.+146    	; 0xdece <GameLoop+0x362>
					continue;
				}
				if(!FlySide){
    de3c:	80 91 ce 0f 	lds	r24, 0x0FCE
    de40:	9c 81       	ldd	r25, Y+4	; 0x04
    de42:	88 23       	and	r24, r24
    de44:	19 f4       	brne	.+6      	; 0xde4c <GameLoop+0x2e0>
					Flies[i].x = SCREENLEFT;
    de46:	18 82       	st	Y, r1
					Flies[i].State |= FACING;
    de48:	94 60       	ori	r25, 0x04	; 4
    de4a:	03 c0       	rjmp	.+6      	; 0xde52 <GameLoop+0x2e6>
				}else{
					Flies[i].x = SCREENRIGHT - 8;
    de4c:	b8 82       	st	Y, r11
					Flies[i].State |= FACING;
    de4e:	94 60       	ori	r25, 0x04	; 4
					Flies[i].State ^= FACING;
    de50:	9d 25       	eor	r25, r13
    de52:	9c 83       	std	Y+4, r25	; 0x04
				}
				Flies[i].y = FLYY;
    de54:	c9 82       	std	Y+1, r12	; 0x01
				Flies[i].State |= ACTIVE;
    de56:	8c 81       	ldd	r24, Y+4	; 0x04
    de58:	80 61       	ori	r24, 0x10	; 16
    de5a:	8c 83       	std	Y+4, r24	; 0x04
				FlySide	= (FlySide + 1) & 1;
    de5c:	80 91 ce 0f 	lds	r24, 0x0FCE
    de60:	8f 5f       	subi	r24, 0xFF	; 255
    de62:	81 70       	andi	r24, 0x01	; 1
    de64:	80 93 ce 0f 	sts	0x0FCE, r24
			}else
				continue;
		}

		uint16_t rnd = (uint16_t)((prng())&1023);
    de68:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    de6c:	9c 01       	movw	r18, r24
    de6e:	33 70       	andi	r19, 0x03	; 3
//		Flies[i].FlyTime++;
		if(!(Flies[i].State & FACING)){
    de70:	8c 81       	ldd	r24, Y+4	; 0x04
    de72:	82 fd       	sbrc	r24, 2
    de74:	0c c0       	rjmp	.+24     	; 0xde8e <GameLoop+0x322>
			if((uint16_t)(rnd > 1021))
    de76:	b3 e0       	ldi	r27, 0x03	; 3
    de78:	2e 3f       	cpi	r18, 0xFE	; 254
    de7a:	3b 07       	cpc	r19, r27
    de7c:	10 f0       	brcs	.+4      	; 0xde82 <GameLoop+0x316>
				Flies[i].State |= FACING;
    de7e:	84 60       	ori	r24, 0x04	; 4
    de80:	0b c0       	rjmp	.+22     	; 0xde98 <GameLoop+0x32c>
			else{
				Flies[i].x--;
    de82:	88 81       	ld	r24, Y
    de84:	81 50       	subi	r24, 0x01	; 1
    de86:	88 83       	st	Y, r24
				if(SCREENLEFT == Flies[i].x){
    de88:	88 23       	and	r24, r24
    de8a:	a9 f4       	brne	.+42     	; 0xdeb6 <GameLoop+0x34a>
    de8c:	0c c0       	rjmp	.+24     	; 0xdea6 <GameLoop+0x33a>
					Flies[i].RebirthTimer = (rnd%140)+20;//kill fly
					continue;
				}
			}
		}else{
			if((uint16_t)(rnd > 1021)){
    de8e:	e3 e0       	ldi	r30, 0x03	; 3
    de90:	2e 3f       	cpi	r18, 0xFE	; 254
    de92:	3e 07       	cpc	r19, r30
    de94:	18 f0       	brcs	.+6      	; 0xde9c <GameLoop+0x330>
				Flies[i].State ^= FACING;
    de96:	8d 25       	eor	r24, r13
    de98:	8c 83       	std	Y+4, r24	; 0x04
    de9a:	0d c0       	rjmp	.+26     	; 0xdeb6 <GameLoop+0x34a>
			}else{
				Flies[i].x++;
    de9c:	88 81       	ld	r24, Y
    de9e:	8f 5f       	subi	r24, 0xFF	; 255
    dea0:	88 83       	st	Y, r24
				if(SCREENRIGHT-8 == Flies[i].x){
    dea2:	87 3e       	cpi	r24, 0xE7	; 231
    dea4:	41 f4       	brne	.+16     	; 0xdeb6 <GameLoop+0x34a>
					Flies[i].RebirthTimer = (rnd%140)+20;//kill fly
    dea6:	c9 01       	movw	r24, r18
    dea8:	6c e8       	ldi	r22, 0x8C	; 140
    deaa:	70 e0       	ldi	r23, 0x00	; 0
    deac:	74 d7       	rcall	.+3816   	; 0xed96 <__udivmodhi4>
    deae:	44 96       	adiw	r24, 0x14	; 20
    deb0:	9b 83       	std	Y+3, r25	; 0x03
    deb2:	8a 83       	std	Y+2, r24	; 0x02
    deb4:	0c c0       	rjmp	.+24     	; 0xdece <GameLoop+0x362>
					continue;
				}
			}
		}
		if(Flies[i].y < FLYY-FLYRANGE)
    deb6:	89 81       	ldd	r24, Y+1	; 0x01
    deb8:	88 32       	cpi	r24, 0x28	; 40
    deba:	38 f0       	brcs	.+14     	; 0xdeca <GameLoop+0x35e>
			Flies[i].y++;
		else if(Flies[i].y > FLYY+FLYRANGE)
    debc:	81 35       	cpi	r24, 0x51	; 81
    debe:	18 f4       	brcc	.+6      	; 0xdec6 <GameLoop+0x35a>
			Flies[i].y--;
		else{
			if(rnd < (1024/2))//(prng()%2000) < 1000)
    dec0:	20 50       	subi	r18, 0x00	; 0
    dec2:	32 40       	sbci	r19, 0x02	; 2
    dec4:	10 f4       	brcc	.+4      	; 0xdeca <GameLoop+0x35e>
				Flies[i].y--;
    dec6:	81 50       	subi	r24, 0x01	; 1
    dec8:	01 c0       	rjmp	.+2      	; 0xdecc <GameLoop+0x360>
			else
				Flies[i].y++;
    deca:	8f 5f       	subi	r24, 0xFF	; 255
    decc:	89 83       	std	Y+1, r24	; 0x01
    dece:	0f 5f       	subi	r16, 0xFF	; 255
    ded0:	1f 4f       	sbci	r17, 0xFF	; 255
    ded2:	25 96       	adiw	r28, 0x05	; 5
	if((uint16_t)(prng()&0x1FF) == 0x1FF){
		if(FlyCount == MAXFLIES){FlyCount--;}else{FlyCount++;}
	}


	for(uint8_t i=0;i<MAXFLIES;i++){
    ded4:	04 30       	cpi	r16, 0x04	; 4
    ded6:	11 05       	cpc	r17, r1
    ded8:	09 f0       	breq	.+2      	; 0xdedc <GameLoop+0x370>
    deda:	8d cf       	rjmp	.-230    	; 0xddf6 <GameLoop+0x28a>
			ColorTime--;

		UpdateFrogs();
		CheckFlies();
		UpdateFlies();
		Render();
    dedc:	0e 94 0a 66 	call	0xcc14	; 0xcc14 <Render>

		if(!Time && !(Frogs[0].State & (JUMPING)) && !(Frogs[1].State & (JUMPING))){//let each frog finish jumping if they were in the middle of it
    dee0:	80 91 20 10 	lds	r24, 0x1020
    dee4:	90 91 21 10 	lds	r25, 0x1021
    dee8:	00 97       	sbiw	r24, 0x00	; 0
    deea:	49 f4       	brne	.+18     	; 0xdefe <GameLoop+0x392>
    deec:	80 91 f9 0f 	lds	r24, 0x0FF9
    def0:	84 fd       	sbrc	r24, 4
    def2:	0a c0       	rjmp	.+20     	; 0xdf08 <GameLoop+0x39c>
    def4:	80 91 10 10 	lds	r24, 0x1010
    def8:	84 fd       	sbrc	r24, 4
    defa:	06 c0       	rjmp	.+12     	; 0xdf08 <GameLoop+0x39c>
    defc:	75 c1       	rjmp	.+746    	; 0xe1e8 <GameLoop+0x67c>
			break;
		}
		else if(Time)
			Time--;
    defe:	01 97       	sbiw	r24, 0x01	; 1
    df00:	90 93 21 10 	sts	0x1021, r25
    df04:	80 93 20 10 	sts	0x1020, r24
		if(Demo == 255)
    df08:	80 91 cc 0f 	lds	r24, 0x0FCC
    df0c:	8f 3f       	cpi	r24, 0xFF	; 255
    df0e:	09 f4       	brne	.+2      	; 0xdf12 <GameLoop+0x3a6>
    df10:	6b c1       	rjmp	.+726    	; 0xe1e8 <GameLoop+0x67c>
			break;

		for(uint8_t i=0;i<MAXPLAYERS;i++){
			if((JoyVal[i] & BTN_START) && !(OldJoyVal[i] & BTN_START)){
    df12:	80 91 1c 10 	lds	r24, 0x101C
    df16:	83 ff       	sbrs	r24, 3
    df18:	04 c0       	rjmp	.+8      	; 0xdf22 <GameLoop+0x3b6>
    df1a:	80 91 17 10 	lds	r24, 0x1017
    df1e:	83 ff       	sbrs	r24, 3
    df20:	08 c0       	rjmp	.+16     	; 0xdf32 <GameLoop+0x3c6>
    df22:	80 91 1e 10 	lds	r24, 0x101E
    df26:	83 ff       	sbrs	r24, 3
    df28:	a1 ce       	rjmp	.-702    	; 0xdc6c <GameLoop+0x100>
    df2a:	80 91 19 10 	lds	r24, 0x1019
    df2e:	83 fd       	sbrc	r24, 3
    df30:	9d ce       	rjmp	.-710    	; 0xdc6c <GameLoop+0x100>
#define PAUSEMENUW 10
#define PAUSEMENUH 8
//const uint8_t FadeAdjustedBG[] PROGMEM = {0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0};
const uint8_t FadeAdjustedFG[] PROGMEM = {0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0};
inline void PauseMenu(){
	InGui = true;
    df32:	81 e0       	ldi	r24, 0x01	; 1
    df34:	80 93 d2 0f 	sts	0x0FD2, r24
			SetTile(x++,y,c+201);
	}
}

void HideSprites(){
	spritecount = 0;
    df38:	10 92 cb 0f 	sts	0x0FCB, r1
    df3c:	ec e2       	ldi	r30, 0x2C	; 44
    df3e:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    df40:	90 82       	st	Z, r9
    df42:	34 96       	adiw	r30, 0x04	; 4
	}
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    df44:	24 e0       	ldi	r18, 0x04	; 4
    df46:	e4 38       	cpi	r30, 0x84	; 132
    df48:	f2 07       	cpc	r31, r18
    df4a:	d1 f7       	brne	.-12     	; 0xdf40 <GameLoop+0x3d4>
	uint8_t cursorpos = 0;
	uint8_t escapemenu = 0;
	HideSprites();
	WaitVsync(1);
    df4c:	81 e0       	ldi	r24, 0x01	; 1
    df4e:	90 e0       	ldi	r25, 0x00	; 0
    df50:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    df54:	80 91 1b 10 	lds	r24, 0x101B
    df58:	88 23       	and	r24, r24
    df5a:	29 f0       	breq	.+10     	; 0xdf66 <GameLoop+0x3fa>
		TriggerFx(patch,255,1);
    df5c:	88 e0       	ldi	r24, 0x08	; 8
    df5e:	6f ef       	ldi	r22, 0xFF	; 255
    df60:	41 e0       	ldi	r20, 0x01	; 1
    df62:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
    df66:	22 e7       	ldi	r18, 0x72	; 114
    df68:	31 e0       	ldi	r19, 0x01	; 1
    df6a:	40 e0       	ldi	r20, 0x00	; 0
    df6c:	59 e0       	ldi	r21, 0x09	; 9
    df6e:	0d c0       	rjmp	.+26     	; 0xdf8a <GameLoop+0x41e>
	FFTriggerFx(SFX_PAUSE);
	for(uint8_t y=0;y<=PAUSEMENUH;y++)
		for(uint8_t x=0;x<=PAUSEMENUW;x++)
			ram_tiles[((RAM_TILES_COUNT-4)*64)+(y*(PAUSEMENUW+1))+x] = vram[(VRAM_TILES_H*((PAUSEMENUY)+y))+PAUSEMENUX+x];//save tiles underneath menu
    df70:	81 91       	ld	r24, Z+
    df72:	8d 93       	st	X+, r24
	uint8_t escapemenu = 0;
	HideSprites();
	WaitVsync(1);
	FFTriggerFx(SFX_PAUSE);
	for(uint8_t y=0;y<=PAUSEMENUH;y++)
		for(uint8_t x=0;x<=PAUSEMENUW;x++)
    df74:	e6 17       	cp	r30, r22
    df76:	f7 07       	cpc	r31, r23
    df78:	d9 f7       	brne	.-10     	; 0xdf70 <GameLoop+0x404>
    df7a:	22 5e       	subi	r18, 0xE2	; 226
    df7c:	3f 4f       	sbci	r19, 0xFF	; 255
    df7e:	45 5f       	subi	r20, 0xF5	; 245
    df80:	5f 4f       	sbci	r21, 0xFF	; 255
	uint8_t cursorpos = 0;
	uint8_t escapemenu = 0;
	HideSprites();
	WaitVsync(1);
	FFTriggerFx(SFX_PAUSE);
	for(uint8_t y=0;y<=PAUSEMENUH;y++)
    df82:	82 e0       	ldi	r24, 0x02	; 2
    df84:	20 38       	cpi	r18, 0x80	; 128
    df86:	38 07       	cpc	r19, r24
    df88:	51 f0       	breq	.+20     	; 0xdf9e <GameLoop+0x432>
    df8a:	f9 01       	movw	r30, r18
    df8c:	e0 5e       	subi	r30, 0xE0	; 224
    df8e:	fe 4f       	sbci	r31, 0xFE	; 254
    df90:	da 01       	movw	r26, r20
    df92:	ac 57       	subi	r26, 0x7C	; 124
    df94:	bb 4f       	sbci	r27, 0xFB	; 251
		for(uint8_t x=0;x<=PAUSEMENUW;x++)
    df96:	b9 01       	movw	r22, r18
    df98:	65 5d       	subi	r22, 0xD5	; 213
    df9a:	7e 4f       	sbci	r23, 0xFE	; 254
    df9c:	e9 cf       	rjmp	.-46     	; 0xdf70 <GameLoop+0x404>
			ram_tiles[((RAM_TILES_COUNT-4)*64)+(y*(PAUSEMENUW+1))+x] = vram[(VRAM_TILES_H*((PAUSEMENUY)+y))+PAUSEMENUX+x];//save tiles underneath menu
	

	rtl_RamifyFontEx(0,pausecharmap,charlist,compfont,0xC0,pgm_read_byte(&FadeAdjustedFG[ColorIndex]));
    df9e:	e0 91 d1 0f 	lds	r30, 0x0FD1
    dfa2:	f0 e0       	ldi	r31, 0x00	; 0
    dfa4:	e3 51       	subi	r30, 0x13	; 19
    dfa6:	f4 46       	sbci	r31, 0x64	; 100
    dfa8:	e4 91       	lpm	r30, Z+
    dfaa:	80 e0       	ldi	r24, 0x00	; 0
    dfac:	90 e0       	ldi	r25, 0x00	; 0
    dfae:	6d ea       	ldi	r22, 0xAD	; 173
    dfb0:	7b e9       	ldi	r23, 0x9B	; 155
    dfb2:	40 e8       	ldi	r20, 0x80	; 128
    dfb4:	5d e7       	ldi	r21, 0x7D	; 125
    dfb6:	20 e4       	ldi	r18, 0x40	; 64
    dfb8:	3c e7       	ldi	r19, 0x7C	; 124
    dfba:	00 ec       	ldi	r16, 0xC0	; 192
    dfbc:	ee 2e       	mov	r14, r30
    dfbe:	0e 94 7a 64 	call	0xc8f4	; 0xc8f4 <rtl_RamifyFontEx>
    dfc2:	ff 24       	eor	r15, r15
    dfc4:	ee 24       	eor	r14, r14
					if(!MusicOn)
						StopSong();
					else
						ResumeSong();
				}else if(cursorpos == 2){//sounds
					SoundsOn = !SoundsOn;
    dfc6:	dd 24       	eor	r13, r13
    dfc8:	d3 94       	inc	r13

	rtl_RamifyFontEx(0,pausecharmap,charlist,compfont,0xC0,pgm_read_byte(&FadeAdjustedFG[ColorIndex]));
	//WaitVsync(1);

	while(true){
		WaitVsync(1);
    dfca:	81 e0       	ldi	r24, 0x01	; 1
    dfcc:	90 e0       	ldi	r25, 0x00	; 0
    dfce:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
    dfd2:	0c e1       	ldi	r16, 0x1C	; 28
    dfd4:	10 e1       	ldi	r17, 0x10	; 16
    dfd6:	c7 e1       	ldi	r28, 0x17	; 23
    dfd8:	d0 e1       	ldi	r29, 0x10	; 16

		for(uint8_t i=0;i<MAXPLAYERS;i++){
			if((JoyVal[i] & BTN_UP) && !(OldJoyVal[i] & BTN_UP)){
    dfda:	d8 01       	movw	r26, r16
    dfdc:	9c 91       	ld	r25, X
    dfde:	94 ff       	sbrs	r25, 4
    dfe0:	0a c0       	rjmp	.+20     	; 0xdff6 <GameLoop+0x48a>
    dfe2:	88 81       	ld	r24, Y
    dfe4:	84 fd       	sbrc	r24, 4
    dfe6:	07 c0       	rjmp	.+14     	; 0xdff6 <GameLoop+0x48a>
				if(--cursorpos > 254)
    dfe8:	ea 94       	dec	r14
    dfea:	bf ef       	ldi	r27, 0xFF	; 255
    dfec:	eb 16       	cp	r14, r27
    dfee:	69 f4       	brne	.+26     	; 0xe00a <GameLoop+0x49e>
    dff0:	83 e0       	ldi	r24, 0x03	; 3
    dff2:	e8 2e       	mov	r14, r24
    dff4:	0a c0       	rjmp	.+20     	; 0xe00a <GameLoop+0x49e>
					cursorpos = 3;
				FFTriggerFx(SFX_TONGUE1);	
			}else if((JoyVal[i] & BTN_DOWN) && !(OldJoyVal[i] & BTN_DOWN)){
    dff6:	95 ff       	sbrs	r25, 5
    dff8:	0b c0       	rjmp	.+22     	; 0xe010 <GameLoop+0x4a4>
    dffa:	88 81       	ld	r24, Y
    dffc:	85 fd       	sbrc	r24, 5
    dffe:	08 c0       	rjmp	.+16     	; 0xe010 <GameLoop+0x4a4>
				if(++cursorpos > 3)
    e000:	e3 94       	inc	r14
    e002:	e3 e0       	ldi	r30, 0x03	; 3
    e004:	ee 15       	cp	r30, r14
    e006:	08 f4       	brcc	.+2      	; 0xe00a <GameLoop+0x49e>
    e008:	ee 24       	eor	r14, r14

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    e00a:	80 91 1b 10 	lds	r24, 0x101B
    e00e:	22 c0       	rjmp	.+68     	; 0xe054 <GameLoop+0x4e8>
					cursorpos = 0;
				FFTriggerFx(SFX_TONGUE1);	
			}else if(((JoyVal[i] & BTN_LEFT) && !(OldJoyVal[i] & BTN_LEFT)) || ((JoyVal[i] & BTN_RIGHT) && !(OldJoyVal[i] & BTN_RIGHT))){
    e010:	96 ff       	sbrs	r25, 6
    e012:	03 c0       	rjmp	.+6      	; 0xe01a <GameLoop+0x4ae>
    e014:	88 81       	ld	r24, Y
    e016:	86 ff       	sbrs	r24, 6
    e018:	05 c0       	rjmp	.+10     	; 0xe024 <GameLoop+0x4b8>
    e01a:	97 ff       	sbrs	r25, 7
    e01c:	22 c0       	rjmp	.+68     	; 0xe062 <GameLoop+0x4f6>
    e01e:	88 81       	ld	r24, Y
    e020:	87 fd       	sbrc	r24, 7
    e022:	1f c0       	rjmp	.+62     	; 0xe062 <GameLoop+0x4f6>
				if(cursorpos == 1){//music
    e024:	f1 e0       	ldi	r31, 0x01	; 1
    e026:	ef 16       	cp	r14, r31
    e028:	69 f4       	brne	.+26     	; 0xe044 <GameLoop+0x4d8>
					MusicOn = !MusicOn;
    e02a:	80 91 ca 0f 	lds	r24, 0x0FCA
    e02e:	8e 25       	eor	r24, r14
    e030:	80 93 ca 0f 	sts	0x0FCA, r24
					if(!MusicOn)
    e034:	88 23       	and	r24, r24
    e036:	19 f4       	brne	.+6      	; 0xe03e <GameLoop+0x4d2>
						StopSong();
    e038:	0e 94 71 54 	call	0xa8e2	; 0xa8e2 <StopSong>
    e03c:	12 c0       	rjmp	.+36     	; 0xe062 <GameLoop+0x4f6>
					else
						ResumeSong();
    e03e:	0e 94 7f 54 	call	0xa8fe	; 0xa8fe <ResumeSong>
    e042:	0f c0       	rjmp	.+30     	; 0xe062 <GameLoop+0x4f6>
				}else if(cursorpos == 2){//sounds
    e044:	22 e0       	ldi	r18, 0x02	; 2
    e046:	e2 16       	cp	r14, r18
    e048:	61 f4       	brne	.+24     	; 0xe062 <GameLoop+0x4f6>
					SoundsOn = !SoundsOn;
    e04a:	80 91 1b 10 	lds	r24, 0x101B
    e04e:	8d 25       	eor	r24, r13
    e050:	80 93 1b 10 	sts	0x101B, r24
    e054:	88 23       	and	r24, r24
    e056:	29 f0       	breq	.+10     	; 0xe062 <GameLoop+0x4f6>
		TriggerFx(patch,255,1);
    e058:	82 e0       	ldi	r24, 0x02	; 2
    e05a:	6f ef       	ldi	r22, 0xFF	; 255
    e05c:	41 e0       	ldi	r20, 0x01	; 1
    e05e:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
					FFTriggerFx(SFX_TONGUE1);	
				}
			}

			if((JoyVal[i] & (BTN_START|BTN_A|BTN_B)) && !(OldJoyVal[i] & (BTN_START|BTN_A|BTN_B))){
    e062:	d8 01       	movw	r26, r16
    e064:	8d 91       	ld	r24, X+
    e066:	9c 91       	ld	r25, X
    e068:	89 70       	andi	r24, 0x09	; 9
    e06a:	91 70       	andi	r25, 0x01	; 1
    e06c:	89 2b       	or	r24, r25
    e06e:	81 f0       	breq	.+32     	; 0xe090 <GameLoop+0x524>
    e070:	88 81       	ld	r24, Y
    e072:	99 81       	ldd	r25, Y+1	; 0x01
    e074:	89 70       	andi	r24, 0x09	; 9
    e076:	91 70       	andi	r25, 0x01	; 1
    e078:	89 2b       	or	r24, r25
    e07a:	51 f4       	brne	.+20     	; 0xe090 <GameLoop+0x524>
				if(cursorpos == 0){//resume
    e07c:	ee 20       	and	r14, r14
    e07e:	31 f0       	breq	.+12     	; 0xe08c <GameLoop+0x520>
					escapemenu = true;
				}else if(cursorpos == 3){//quit
    e080:	b3 e0       	ldi	r27, 0x03	; 3
    e082:	eb 16       	cp	r14, r27
    e084:	29 f4       	brne	.+10     	; 0xe090 <GameLoop+0x524>
					escapemenu = true;
					Demo = 255;//break out to main menu the same way demos do.
    e086:	8f ef       	ldi	r24, 0xFF	; 255
    e088:	80 93 cc 0f 	sts	0x0FCC, r24
    e08c:	ff 24       	eor	r15, r15
    e08e:	f3 94       	inc	r15
    e090:	0e 5f       	subi	r16, 0xFE	; 254
    e092:	1f 4f       	sbci	r17, 0xFF	; 255
    e094:	22 96       	adiw	r28, 0x02	; 2
	//WaitVsync(1);

	while(true){
		WaitVsync(1);

		for(uint8_t i=0;i<MAXPLAYERS;i++){
    e096:	e0 e1       	ldi	r30, 0x10	; 16
    e098:	00 32       	cpi	r16, 0x20	; 32
    e09a:	1e 07       	cpc	r17, r30
    e09c:	09 f0       	breq	.+2      	; 0xe0a0 <GameLoop+0x534>
    e09e:	9d cf       	rjmp	.-198    	; 0xdfda <GameLoop+0x46e>
					Demo = 255;//break out to main menu the same way demos do.
				}
			}
		}

		if(escapemenu)
    e0a0:	ff 20       	and	r15, r15
    e0a2:	29 f0       	breq	.+10     	; 0xe0ae <GameLoop+0x542>
    e0a4:	80 e0       	ldi	r24, 0x00	; 0
    e0a6:	99 e0       	ldi	r25, 0x09	; 9
    e0a8:	42 e7       	ldi	r20, 0x72	; 114
    e0aa:	51 e0       	ldi	r21, 0x01	; 1
    e0ac:	89 c0       	rjmp	.+274    	; 0xe1c0 <GameLoop+0x654>
#define MENUSTART 199
inline void DrawMenu(uint8_t x, uint8_t y, uint8_t w, uint8_t h){
   SetTile(x+0,y+0,MENUSTART+0);//draw the corners
    e0ae:	8a e0       	ldi	r24, 0x0A	; 10
    e0b0:	6c e0       	ldi	r22, 0x0C	; 12
    e0b2:	47 ec       	ldi	r20, 0xC7	; 199
    e0b4:	50 e0       	ldi	r21, 0x00	; 0
    e0b6:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
   SetTile(x+w,y+0,MENUSTART+1);
    e0ba:	84 e1       	ldi	r24, 0x14	; 20
    e0bc:	6c e0       	ldi	r22, 0x0C	; 12
    e0be:	48 ec       	ldi	r20, 0xC8	; 200
    e0c0:	50 e0       	ldi	r21, 0x00	; 0
    e0c2:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
   SetTile(x+0,y+h,MENUSTART+2);
    e0c6:	8a e0       	ldi	r24, 0x0A	; 10
    e0c8:	64 e1       	ldi	r22, 0x14	; 20
    e0ca:	49 ec       	ldi	r20, 0xC9	; 201
    e0cc:	50 e0       	ldi	r21, 0x00	; 0
    e0ce:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
   SetTile(x+w,y+h,MENUSTART+3);
    e0d2:	84 e1       	ldi	r24, 0x14	; 20
    e0d4:	64 e1       	ldi	r22, 0x14	; 20
    e0d6:	4a ec       	ldi	r20, 0xCA	; 202
    e0d8:	50 e0       	ldi	r21, 0x00	; 0
    e0da:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
    e0de:	1b e0       	ldi	r17, 0x0B	; 11
    e0e0:	0d c0       	rjmp	.+26     	; 0xe0fc <GameLoop+0x590>

   for(u8 i=x+1;i<x+w;i++){SetTile(i,y,MENUSTART+8);SetTile(i,y+h,MENUSTART+9);}//draw top and bottom
    e0e2:	81 2f       	mov	r24, r17
    e0e4:	6c e0       	ldi	r22, 0x0C	; 12
    e0e6:	4f ec       	ldi	r20, 0xCF	; 207
    e0e8:	50 e0       	ldi	r21, 0x00	; 0
    e0ea:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
    e0ee:	81 2f       	mov	r24, r17
    e0f0:	64 e1       	ldi	r22, 0x14	; 20
    e0f2:	40 ed       	ldi	r20, 0xD0	; 208
    e0f4:	50 e0       	ldi	r21, 0x00	; 0
    e0f6:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
    e0fa:	1f 5f       	subi	r17, 0xFF	; 255
    e0fc:	14 31       	cpi	r17, 0x14	; 20
    e0fe:	89 f7       	brne	.-30     	; 0xe0e2 <GameLoop+0x576>
    e100:	1d e0       	ldi	r17, 0x0D	; 13
    e102:	0d c0       	rjmp	.+26     	; 0xe11e <GameLoop+0x5b2>
   for(u8 i=y+1;i<y+h;i++){SetTile(x,i,MENUSTART+6);SetTile(x+w,i,MENUSTART+7);}
    e104:	8a e0       	ldi	r24, 0x0A	; 10
    e106:	61 2f       	mov	r22, r17
    e108:	4d ec       	ldi	r20, 0xCD	; 205
    e10a:	50 e0       	ldi	r21, 0x00	; 0
    e10c:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
    e110:	84 e1       	ldi	r24, 0x14	; 20
    e112:	61 2f       	mov	r22, r17
    e114:	4e ec       	ldi	r20, 0xCE	; 206
    e116:	50 e0       	ldi	r21, 0x00	; 0
    e118:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
    e11c:	1f 5f       	subi	r17, 0xFF	; 255
    e11e:	14 31       	cpi	r17, 0x14	; 20
    e120:	89 f7       	brne	.-30     	; 0xe104 <GameLoop+0x598>
    e122:	0d e0       	ldi	r16, 0x0D	; 13
    e124:	0a c0       	rjmp	.+20     	; 0xe13a <GameLoop+0x5ce>

   for(u8 i=y+1;i<y+h;i++)
   for(u8 j=x+1;j<x+w;j++)
      SetTile(j,i,MENUSTART+5);
    e126:	81 2f       	mov	r24, r17
    e128:	60 2f       	mov	r22, r16
    e12a:	4c ec       	ldi	r20, 0xCC	; 204
    e12c:	50 e0       	ldi	r21, 0x00	; 0
    e12e:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>

   for(u8 i=x+1;i<x+w;i++){SetTile(i,y,MENUSTART+8);SetTile(i,y+h,MENUSTART+9);}//draw top and bottom
   for(u8 i=y+1;i<y+h;i++){SetTile(x,i,MENUSTART+6);SetTile(x+w,i,MENUSTART+7);}

   for(u8 i=y+1;i<y+h;i++)
   for(u8 j=x+1;j<x+w;j++)
    e132:	1f 5f       	subi	r17, 0xFF	; 255
    e134:	14 31       	cpi	r17, 0x14	; 20
    e136:	b9 f7       	brne	.-18     	; 0xe126 <GameLoop+0x5ba>
   SetTile(x+w,y+h,MENUSTART+3);

   for(u8 i=x+1;i<x+w;i++){SetTile(i,y,MENUSTART+8);SetTile(i,y+h,MENUSTART+9);}//draw top and bottom
   for(u8 i=y+1;i<y+h;i++){SetTile(x,i,MENUSTART+6);SetTile(x+w,i,MENUSTART+7);}

   for(u8 i=y+1;i<y+h;i++)
    e138:	0f 5f       	subi	r16, 0xFF	; 255
    e13a:	04 31       	cpi	r16, 0x14	; 20
    e13c:	11 f0       	breq	.+4      	; 0xe142 <GameLoop+0x5d6>
    e13e:	1b e0       	ldi	r17, 0x0B	; 11
    e140:	f9 cf       	rjmp	.-14     	; 0xe134 <GameLoop+0x5c8>
		}

		if(escapemenu)
			break;
		DrawMenu (PAUSEMENUX+0,PAUSEMENUY+0,PAUSEMENUW,PAUSEMENUH);
		SetTile	 (PAUSEMENUX+0,PAUSEMENUY+1+(cursorpos*2),MENUSTART+4);
    e142:	6e 2d       	mov	r22, r14
    e144:	66 0f       	add	r22, r22
    e146:	63 5f       	subi	r22, 0xF3	; 243
    e148:	8a e0       	ldi	r24, 0x0A	; 10
    e14a:	4b ec       	ldi	r20, 0xCB	; 203
    e14c:	50 e0       	ldi	r21, 0x00	; 0
    e14e:	0e 94 50 52 	call	0xa4a0	; 0xa4a0 <SetTile>
		rtl_Print(PAUSEMENUX+1,PAUSEMENUY+1,PSTR("RESUME"));
    e152:	8b e0       	ldi	r24, 0x0B	; 11
    e154:	6d e0       	ldi	r22, 0x0D	; 13
    e156:	46 e8       	ldi	r20, 0x86	; 134
    e158:	5c e9       	ldi	r21, 0x9C	; 156
    e15a:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		//rtl_Print(PAUSEMENUX+1,PAUSEMENUY+3,PSTR("MUSIC ON"));if(!MusicOn)	{rtl_Print(PAUSEMENUX+7,PAUSEMENUY+3,PSTR("OFF"));}
		if(!MusicOn)	{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+3,PSTR("MUSIC OFF"));}else{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+3,PSTR("MUSIC ON"));}
    e15e:	80 91 ca 0f 	lds	r24, 0x0FCA
    e162:	88 23       	and	r24, r24
    e164:	29 f4       	brne	.+10     	; 0xe170 <GameLoop+0x604>
    e166:	8b e0       	ldi	r24, 0x0B	; 11
    e168:	6f e0       	ldi	r22, 0x0F	; 15
    e16a:	4c e7       	ldi	r20, 0x7C	; 124
    e16c:	5c e9       	ldi	r21, 0x9C	; 156
    e16e:	04 c0       	rjmp	.+8      	; 0xe178 <GameLoop+0x60c>
    e170:	8b e0       	ldi	r24, 0x0B	; 11
    e172:	6f e0       	ldi	r22, 0x0F	; 15
    e174:	43 e7       	ldi	r20, 0x73	; 115
    e176:	5c e9       	ldi	r21, 0x9C	; 156
    e178:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		if(!SoundsOn)	{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+5,PSTR("SFX   OFF"));}else{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+5,PSTR("SFX   ON"));}
    e17c:	80 91 1b 10 	lds	r24, 0x101B
    e180:	88 23       	and	r24, r24
    e182:	29 f4       	brne	.+10     	; 0xe18e <GameLoop+0x622>
    e184:	8b e0       	ldi	r24, 0x0B	; 11
    e186:	61 e1       	ldi	r22, 0x11	; 17
    e188:	49 e6       	ldi	r20, 0x69	; 105
    e18a:	5c e9       	ldi	r21, 0x9C	; 156
    e18c:	04 c0       	rjmp	.+8      	; 0xe196 <GameLoop+0x62a>
    e18e:	8b e0       	ldi	r24, 0x0B	; 11
    e190:	61 e1       	ldi	r22, 0x11	; 17
    e192:	40 e6       	ldi	r20, 0x60	; 96
    e194:	5c e9       	ldi	r21, 0x9C	; 156
    e196:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		rtl_Print(PAUSEMENUX+1,PAUSEMENUY+7,PSTR("QUIT"));
    e19a:	8b e0       	ldi	r24, 0x0B	; 11
    e19c:	63 e1       	ldi	r22, 0x13	; 19
    e19e:	4b e5       	ldi	r20, 0x5B	; 91
    e1a0:	5c e9       	ldi	r21, 0x9C	; 156
    e1a2:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
    e1a6:	11 cf       	rjmp	.-478    	; 0xdfca <GameLoop+0x45e>

	}
	for(uint8_t y=0;y<=PAUSEMENUH;y++)
		for(uint8_t x=0;x<=PAUSEMENUW;x++)
			vram[(VRAM_TILES_H*((PAUSEMENUY)+y))+PAUSEMENUX+x] = ram_tiles[((RAM_TILES_COUNT-4)*64)+(y*(PAUSEMENUW+1))+x];//restore tiles underneath menu
    e1a8:	81 91       	ld	r24, Z+
    e1aa:	8d 93       	st	X+, r24
		if(!SoundsOn)	{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+5,PSTR("SFX   OFF"));}else{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+5,PSTR("SFX   ON"));}
		rtl_Print(PAUSEMENUX+1,PAUSEMENUY+7,PSTR("QUIT"));

	}
	for(uint8_t y=0;y<=PAUSEMENUH;y++)
		for(uint8_t x=0;x<=PAUSEMENUW;x++)
    e1ac:	e6 17       	cp	r30, r22
    e1ae:	f7 07       	cpc	r31, r23
    e1b0:	d9 f7       	brne	.-10     	; 0xe1a8 <GameLoop+0x63c>
    e1b2:	42 5e       	subi	r20, 0xE2	; 226
    e1b4:	5f 4f       	sbci	r21, 0xFF	; 255
		if(!MusicOn)	{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+3,PSTR("MUSIC OFF"));}else{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+3,PSTR("MUSIC ON"));}
		if(!SoundsOn)	{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+5,PSTR("SFX   OFF"));}else{rtl_Print(PAUSEMENUX+1,PAUSEMENUY+5,PSTR("SFX   ON"));}
		rtl_Print(PAUSEMENUX+1,PAUSEMENUY+7,PSTR("QUIT"));

	}
	for(uint8_t y=0;y<=PAUSEMENUH;y++)
    e1b6:	f9 e0       	ldi	r31, 0x09	; 9
    e1b8:	23 36       	cpi	r18, 0x63	; 99
    e1ba:	3f 07       	cpc	r19, r31
    e1bc:	71 f0       	breq	.+28     	; 0xe1da <GameLoop+0x66e>
    e1be:	c9 01       	movw	r24, r18
    e1c0:	fc 01       	movw	r30, r24
    e1c2:	ec 57       	subi	r30, 0x7C	; 124
    e1c4:	fb 4f       	sbci	r31, 0xFB	; 251
    e1c6:	da 01       	movw	r26, r20
    e1c8:	a0 5e       	subi	r26, 0xE0	; 224
    e1ca:	be 4f       	sbci	r27, 0xFE	; 254
#include "graphics.h"
#include "gui.h"
#include "ai.h"


void GameLoop(){
    e1cc:	9c 01       	movw	r18, r24
    e1ce:	25 5f       	subi	r18, 0xF5	; 245
    e1d0:	3f 4f       	sbci	r19, 0xFF	; 255
		for(uint8_t x=0;x<=PAUSEMENUW;x++)
    e1d2:	b9 01       	movw	r22, r18
    e1d4:	6c 57       	subi	r22, 0x7C	; 124
    e1d6:	7b 4f       	sbci	r23, 0xFB	; 251
    e1d8:	e7 cf       	rjmp	.-50     	; 0xe1a8 <GameLoop+0x63c>
			vram[(VRAM_TILES_H*((PAUSEMENUY)+y))+PAUSEMENUX+x] = ram_tiles[((RAM_TILES_COUNT-4)*64)+(y*(PAUSEMENUW+1))+x];//restore tiles underneath menu
	WaitVsync(1);
    e1da:	81 e0       	ldi	r24, 0x01	; 1
    e1dc:	90 e0       	ldi	r25, 0x00	; 0
    e1de:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	InGui = false;
    e1e2:	10 92 d2 0f 	sts	0x0FD2, r1
    e1e6:	42 cd       	rjmp	.-1404   	; 0xdc6c <GameLoop+0x100>
				break;
			}	
		}
	}

}
    e1e8:	cd b7       	in	r28, 0x3d	; 61
    e1ea:	de b7       	in	r29, 0x3e	; 62
    e1ec:	eb e0       	ldi	r30, 0x0B	; 11
    e1ee:	1d c6       	rjmp	.+3130   	; 0xee2a <__epilogue_restores__+0xe>

0000e1f0 <main>:





void main(){
    e1f0:	aa e4       	ldi	r26, 0x4A	; 74
    e1f2:	b0 e0       	ldi	r27, 0x00	; 0
    e1f4:	ed ef       	ldi	r30, 0xFD	; 253
    e1f6:	f0 e7       	ldi	r31, 0x70	; 112
    e1f8:	f5 c5       	rjmp	.+3050   	; 0xede4 <__prologue_saves__>
		bestaivars[i] = aivars[i] = pgm_read_byte(&basegenes[i]);
		//interesting note here, the evolution weights worked out to be inferior to values that I "intelligently designed"
		//just points to the crummy evolution system I made, maybe I was impatient and perhaps even a Deist again, who knows..,
#endif

	DDRC = 0;
    e1fa:	17 b8       	out	0x07, r1	; 7
	MusicOn = 1;
    e1fc:	81 e0       	ldi	r24, 0x01	; 1
    e1fe:	80 93 ca 0f 	sts	0x0FCA, r24
	SoundsOn = 1;
    e202:	80 93 1b 10 	sts	0x101B, r24
	InitMusicPlayer(patches);
    e206:	83 e4       	ldi	r24, 0x43	; 67
    e208:	95 e9       	ldi	r25, 0x95	; 149
    e20a:	0e 94 2d 54 	call	0xa85a	; 0xa85a <InitMusicPlayer>
	SetTileTable(TitleTiles);
    e20e:	84 ee       	ldi	r24, 0xE4	; 228
    e210:	90 e0       	ldi	r25, 0x00	; 0
    e212:	0e 94 5e 52 	call	0xa4bc	; 0xa4bc <SetTileTable>
	SetSpritesTileTable(SpriteTiles);
    e216:	80 ec       	ldi	r24, 0xC0	; 192
    e218:	95 e6       	ldi	r25, 0x65	; 101
    e21a:	0e 94 4b 52 	call	0xa496	; 0xa496 <SetSpritesTileTable>
	SetMasterVolume(255);
    e21e:	8f ef       	ldi	r24, 0xFF	; 255
    e220:	0e 94 a7 54 	call	0xa94e	; 0xa94e <SetMasterVolume>



uint16_t prng_state;
inline void seedprng(uint16_t seed){
	prng_state = seed;
    e224:	8d ea       	ldi	r24, 0xAD	; 173
    e226:	9e ed       	ldi	r25, 0xDE	; 222
    e228:	90 93 d0 0f 	sts	0x0FD0, r25
    e22c:	80 93 cf 0f 	sts	0x0FCF, r24
	seedprng(0xDEADUL);
	SetUserPostVsyncCallback(&VsyncRoutine);
    e230:	87 e8       	ldi	r24, 0x87	; 135
    e232:	95 e6       	ldi	r25, 0x65	; 101
    e234:	0e 94 8c 52 	call	0xa518	; 0xa518 <SetUserPostVsyncCallback>
    e238:	e0 e2       	ldi	r30, 0x20	; 32
    e23a:	f1 e0       	ldi	r31, 0x01	; 1
inline void Intro(){//return;

//	WaitVsync(1);
	//print ram tiles UZEBOX
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = 96+RAM_TILES_COUNT;//full white tile that is in TitleTiles[]
    e23c:	88 e8       	ldi	r24, 0x88	; 136
    e23e:	81 93       	st	Z+, r24

inline void Intro(){//return;

//	WaitVsync(1);
	//print ram tiles UZEBOX
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    e240:	24 e0       	ldi	r18, 0x04	; 4
    e242:	ec 32       	cpi	r30, 0x2C	; 44
    e244:	f2 07       	cpc	r31, r18
    e246:	d9 f7       	brne	.-10     	; 0xe23e <main+0x4e>
		vram[i] = 96+RAM_TILES_COUNT;//full white tile that is in TitleTiles[]
	rtl_RamifyFontEx(RAM_TILES_COUNT-7,introcharmap,charlist,compfont,0xFF,0x00);
    e248:	81 e2       	ldi	r24, 0x21	; 33
    e24a:	90 e0       	ldi	r25, 0x00	; 0
    e24c:	66 ea       	ldi	r22, 0xA6	; 166
    e24e:	7b e9       	ldi	r23, 0x9B	; 155
    e250:	40 e8       	ldi	r20, 0x80	; 128
    e252:	5d e7       	ldi	r21, 0x7D	; 125
    e254:	20 e4       	ldi	r18, 0x40	; 64
    e256:	3c e7       	ldi	r19, 0x7C	; 124
    e258:	0f ef       	ldi	r16, 0xFF	; 255
    e25a:	ee 24       	eor	r14, r14
    e25c:	0e 94 7a 64 	call	0xc8f4	; 0xc8f4 <rtl_RamifyFontEx>
	rtl_Print(12,12,PSTR("UZEBOX"));
    e260:	8c e0       	ldi	r24, 0x0C	; 12
    e262:	6c e0       	ldi	r22, 0x0C	; 12
    e264:	45 ef       	ldi	r20, 0xF5	; 245
    e266:	5b e9       	ldi	r21, 0x9B	; 155
    e268:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>

	DrawSpriteFrame(13*8,(10*8)+2,3);
    e26c:	88 e6       	ldi	r24, 0x68	; 104
    e26e:	62 e5       	ldi	r22, 0x52	; 82
    e270:	43 e0       	ldi	r20, 0x03	; 3
    e272:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
	Flies[0].x = (SCREEN_TILES_H*TILE_WIDTH)-8;
    e276:	88 ee       	ldi	r24, 0xE8	; 232
    e278:	80 93 d3 0f 	sts	0x0FD3, r24
	Flies[0].y = 0;
    e27c:	10 92 d4 0f 	sts	0x0FD4, r1
	FadeIn(3,true);
    e280:	83 e0       	ldi	r24, 0x03	; 3
    e282:	61 e0       	ldi	r22, 0x01	; 1
    e284:	0e 94 22 5c 	call	0xb844	; 0xb844 <FadeIn>
    e288:	56 c0       	rjmp	.+172    	; 0xe336 <main+0x146>

}
*/
	
	while(Flies[0].x){
		uint8_t rnd = prng();
    e28a:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    e28e:	18 2f       	mov	r17, r24
		sprites[4].x = Flies[0].x;
    e290:	80 91 d3 0f 	lds	r24, 0x0FD3
    e294:	80 93 3c 04 	sts	0x043C, r24
		sprites[4].tileIndex = FLYSPRITE+((Flies[0].x&2)>>1);
    e298:	90 e0       	ldi	r25, 0x00	; 0
    e29a:	82 70       	andi	r24, 0x02	; 2
    e29c:	90 70       	andi	r25, 0x00	; 0
    e29e:	95 95       	asr	r25
    e2a0:	87 95       	ror	r24
    e2a2:	87 5d       	subi	r24, 0xD7	; 215
    e2a4:	80 93 3e 04 	sts	0x043E, r24
		sprites[4].y = Flies[0].y+((sprites[4].tileIndex!=FLYSPRITE)*3);
    e2a8:	90 91 d4 0f 	lds	r25, 0x0FD4
    e2ac:	89 32       	cpi	r24, 0x29	; 41
    e2ae:	11 f4       	brne	.+4      	; 0xe2b4 <main+0xc4>
    e2b0:	80 e0       	ldi	r24, 0x00	; 0
    e2b2:	01 c0       	rjmp	.+2      	; 0xe2b6 <main+0xc6>
    e2b4:	83 e0       	ldi	r24, 0x03	; 3
    e2b6:	89 0f       	add	r24, r25
    e2b8:	80 93 3d 04 	sts	0x043D, r24
		WaitVsync(1);
    e2bc:	81 e0       	ldi	r24, 0x01	; 1
    e2be:	90 e0       	ldi	r25, 0x00	; 0
    e2c0:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
		Flies[0].x-=1;
    e2c4:	80 91 d3 0f 	lds	r24, 0x0FD3
    e2c8:	98 2f       	mov	r25, r24
    e2ca:	91 50       	subi	r25, 0x01	; 1
    e2cc:	90 93 d3 0f 	sts	0x0FD3, r25
		if(Flies[0].x > 17*8 || Flies[0].x < 7*8){
    e2d0:	89 53       	subi	r24, 0x39	; 57
    e2d2:	81 35       	cpi	r24, 0x51	; 81
    e2d4:	98 f0       	brcs	.+38     	; 0xe2fc <main+0x10c>
			if(Flies[0].y < 3)
    e2d6:	20 91 d4 0f 	lds	r18, 0x0FD4
    e2da:	23 30       	cpi	r18, 0x03	; 3
    e2dc:	68 f0       	brcs	.+26     	; 0xe2f8 <main+0x108>
				Flies[0].y++;
			else if((rnd&3) == 1)
    e2de:	81 2f       	mov	r24, r17
    e2e0:	90 e0       	ldi	r25, 0x00	; 0
    e2e2:	83 70       	andi	r24, 0x03	; 3
    e2e4:	90 70       	andi	r25, 0x00	; 0
    e2e6:	81 30       	cpi	r24, 0x01	; 1
    e2e8:	91 05       	cpc	r25, r1
    e2ea:	21 f4       	brne	.+8      	; 0xe2f4 <main+0x104>
				Flies[0].y -= 1;
    e2ec:	21 50       	subi	r18, 0x01	; 1
    e2ee:	20 93 d4 0f 	sts	0x0FD4, r18
    e2f2:	21 c0       	rjmp	.+66     	; 0xe336 <main+0x146>
			else if((rnd&3)==2)
    e2f4:	02 97       	sbiw	r24, 0x02	; 2
    e2f6:	f9 f4       	brne	.+62     	; 0xe336 <main+0x146>
				Flies[0].y += 1;
    e2f8:	2f 5f       	subi	r18, 0xFF	; 255
    e2fa:	f9 cf       	rjmp	.-14     	; 0xe2ee <main+0xfe>
		}else if(Flies[0].x < (14*8)+2){//run away from frog
    e2fc:	92 37       	cpi	r25, 0x72	; 114
    e2fe:	a0 f4       	brcc	.+40     	; 0xe328 <main+0x138>
			spritecount = 0;
    e300:	10 92 cb 0f 	sts	0x0FCB, r1
			DrawSpriteFrame(13*8,(10*8)+2,0);
    e304:	88 e6       	ldi	r24, 0x68	; 104
    e306:	62 e5       	ldi	r22, 0x52	; 82
    e308:	40 e0       	ldi	r20, 0x00	; 0
    e30a:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
			if(Flies[0].y > 24)
    e30e:	80 91 d4 0f 	lds	r24, 0x0FD4
    e312:	89 31       	cpi	r24, 0x19	; 25
    e314:	18 f0       	brcs	.+6      	; 0xe31c <main+0x12c>
				Flies[0].y-=2;
    e316:	82 50       	subi	r24, 0x02	; 2
    e318:	80 93 d4 0f 	sts	0x0FD4, r24
			Flies[0].x--;//extra speed
    e31c:	80 91 d3 0f 	lds	r24, 0x0FD3
    e320:	81 50       	subi	r24, 0x01	; 1
    e322:	80 93 d3 0f 	sts	0x0FD3, r24
    e326:	07 c0       	rjmp	.+14     	; 0xe336 <main+0x146>
		}else if(Flies[0].y < 10*8)//tease frog
    e328:	80 91 d4 0f 	lds	r24, 0x0FD4
    e32c:	80 35       	cpi	r24, 0x50	; 80
    e32e:	18 f4       	brcc	.+6      	; 0xe336 <main+0x146>
			Flies[0].y+=4;
    e330:	8c 5f       	subi	r24, 0xFC	; 252
    e332:	80 93 d4 0f 	sts	0x0FD4, r24
		DrawSpriteFrame(13*8,(6*8)+2,frame);

}
*/
	
	while(Flies[0].x){
    e336:	80 91 d3 0f 	lds	r24, 0x0FD3
    e33a:	88 23       	and	r24, r24
    e33c:	09 f0       	breq	.+2      	; 0xe340 <main+0x150>
    e33e:	a5 cf       	rjmp	.-182    	; 0xe28a <main+0x9a>
				Flies[0].y-=2;
			Flies[0].x--;//extra speed
		}else if(Flies[0].y < 10*8)//tease frog
			Flies[0].y+=4;
	}
	sprites[4].x = SCREEN_TILES_H*TILE_WIDTH;
    e340:	80 ef       	ldi	r24, 0xF0	; 240
    e342:	80 93 3c 04 	sts	0x043C, r24
	FadeOut(2,false);
    e346:	82 e0       	ldi	r24, 0x02	; 2
    e348:	60 e0       	ldi	r22, 0x00	; 0
    e34a:	0e 94 3a 5c 	call	0xb874	; 0xb874 <FadeOut>
	if(SoundsOn)
		TriggerFx(patch,255,1);
}

void FFTriggerPCM(uint8_t patch, uint8_t freq, uint8_t vol){
	if(SoundsOn)
    e34e:	80 91 1b 10 	lds	r24, 0x101B
    e352:	88 23       	and	r24, r24
    e354:	31 f0       	breq	.+12     	; 0xe362 <main+0x172>
		TriggerNote(4,patch,freq,vol);
    e356:	84 e0       	ldi	r24, 0x04	; 4
    e358:	60 e0       	ldi	r22, 0x00	; 0
    e35a:	47 e1       	ldi	r20, 0x17	; 23
    e35c:	2f ef       	ldi	r18, 0xFF	; 255
    e35e:	0e 94 4f 55 	call	0xaa9e	; 0xaa9e <TriggerNote>
    e362:	18 e6       	ldi	r17, 0x68	; 104
    e364:	00 e5       	ldi	r16, 0x50	; 80
	FFTriggerPCM(SFX_FROG,23,255);

	uint8_t fx = 13*8;
	uint8_t fy = 10*8;
	while(fx < SCREEN_TILES_H*TILE_WIDTH){
		spritecount = 0;
    e366:	10 92 cb 0f 	sts	0x0FCB, r1
		DrawSpriteFrame(fx,fy,1);
    e36a:	81 2f       	mov	r24, r17
    e36c:	60 2f       	mov	r22, r16
    e36e:	41 e0       	ldi	r20, 0x01	; 1
    e370:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		fx-=4;
    e374:	14 50       	subi	r17, 0x04	; 4
		fy-=2;
    e376:	02 50       	subi	r16, 0x02	; 2

		WaitVsync(1);
    e378:	81 e0       	ldi	r24, 0x01	; 1
    e37a:	90 e0       	ldi	r25, 0x00	; 0
    e37c:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	FadeOut(2,false);
	FFTriggerPCM(SFX_FROG,23,255);

	uint8_t fx = 13*8;
	uint8_t fy = 10*8;
	while(fx < SCREEN_TILES_H*TILE_WIDTH){
    e380:	1c 3f       	cpi	r17, 0xFC	; 252
    e382:	89 f7       	brne	.-30     	; 0xe366 <main+0x176>
		fx-=4;
		fy-=2;

		WaitVsync(1);
	}
	WaitVsync(20);
    e384:	84 e1       	ldi	r24, 0x14	; 20
    e386:	90 e0       	ldi	r25, 0x00	; 0
    e388:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    e38c:	80 91 1b 10 	lds	r24, 0x101B
    e390:	88 23       	and	r24, r24
    e392:	29 f0       	breq	.+10     	; 0xe39e <main+0x1ae>
		TriggerFx(patch,255,1);
    e394:	84 e0       	ldi	r24, 0x04	; 4
    e396:	6f ef       	ldi	r22, 0xFF	; 255
    e398:	41 e0       	ldi	r20, 0x01	; 1
    e39a:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
	FFTriggerFx(SFX_GRAB1);
	WaitVsync(60);
    e39e:	8c e3       	ldi	r24, 0x3C	; 60
    e3a0:	90 e0       	ldi	r25, 0x00	; 0
    e3a2:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
}


inline void TitleScreen(){

	InGui = true;//make sure AI doesn't fill pad state
    e3a6:	81 e0       	ldi	r24, 0x01	; 1
    e3a8:	80 93 d2 0f 	sts	0x0FD2, r24
	if(!Demo)
    e3ac:	80 91 cc 0f 	lds	r24, 0x0FCC
    e3b0:	88 23       	and	r24, r24
    e3b2:	21 f4       	brne	.+8      	; 0xe3bc <main+0x1cc>
		StartSong(TitleSong);
    e3b4:	8d e2       	ldi	r24, 0x2D	; 45
    e3b6:	96 e9       	ldi	r25, 0x96	; 150
    e3b8:	0e 94 48 54 	call	0xa890	; 0xa890 <StartSong>

	uint8_t cursorpos;
	uint16_t idleticks;
	uint8_t codepos[2]={0,0};
    e3bc:	19 82       	std	Y+1, r1	; 0x01
    e3be:	1a 82       	std	Y+2, r1	; 0x02
	Frogs[0].y = ((SCREEN_TILES_V-12)*8);
    e3c0:	80 e7       	ldi	r24, 0x70	; 112
    e3c2:	80 93 e8 0f 	sts	0x0FE8, r24
TITLETOP:
	rtl_RamifyFontEx(8,titlecharmap,charlist,compfont,0xD0,0xFF);

	OldJoyVal[0] = OldJoyVal[1] = JoyVal[0] = JoyVal[1] = (uint16_t)(BTN_UP|BTN_DOWN|BTN_A|BTN_B|BTN_START|BTN_SELECT);//don't auto trigger something after skipping a demo
    e3c6:	5d e3       	ldi	r21, 0x3D	; 61
    e3c8:	45 2e       	mov	r4, r21
    e3ca:	51 e0       	ldi	r21, 0x01	; 1
    e3cc:	55 2e       	mov	r5, r21
		rtl_Print(3,SCREEN_TILES_V-1,PSTR("CREDITS"));
		FadeIn(3,0);

		while(1){
			prng();
			Frogs[0].State = 1;
    e3ce:	41 e0       	ldi	r20, 0x01	; 1
    e3d0:	24 2e       	mov	r2, r20
    e3d2:	31 2c       	mov	r3, r1
	uint8_t cursorpos;
	uint16_t idleticks;
	uint8_t codepos[2]={0,0};
	Frogs[0].y = ((SCREEN_TILES_V-12)*8);
TITLETOP:
	rtl_RamifyFontEx(8,titlecharmap,charlist,compfont,0xD0,0xFF);
    e3d4:	88 e0       	ldi	r24, 0x08	; 8
    e3d6:	90 e0       	ldi	r25, 0x00	; 0
    e3d8:	62 e5       	ldi	r22, 0x52	; 82
    e3da:	7b e9       	ldi	r23, 0x9B	; 155
    e3dc:	40 e8       	ldi	r20, 0x80	; 128
    e3de:	5d e7       	ldi	r21, 0x7D	; 125
    e3e0:	20 e4       	ldi	r18, 0x40	; 64
    e3e2:	3c e7       	ldi	r19, 0x7C	; 124
    e3e4:	00 ed       	ldi	r16, 0xD0	; 208
    e3e6:	ee 24       	eor	r14, r14
    e3e8:	ea 94       	dec	r14
    e3ea:	0e 94 7a 64 	call	0xc8f4	; 0xc8f4 <rtl_RamifyFontEx>

	OldJoyVal[0] = OldJoyVal[1] = JoyVal[0] = JoyVal[1] = (uint16_t)(BTN_UP|BTN_DOWN|BTN_A|BTN_B|BTN_START|BTN_SELECT);//don't auto trigger something after skipping a demo
    e3ee:	50 92 1f 10 	sts	0x101F, r5
    e3f2:	40 92 1e 10 	sts	0x101E, r4
    e3f6:	50 92 1d 10 	sts	0x101D, r5
    e3fa:	40 92 1c 10 	sts	0x101C, r4
    e3fe:	50 92 1a 10 	sts	0x101A, r5
    e402:	40 92 19 10 	sts	0x1019, r4
    e406:	50 92 18 10 	sts	0x1018, r5
    e40a:	40 92 17 10 	sts	0x1017, r4
	while(1){//break out to credits

		DDRC = 0;
    e40e:	17 b8       	out	0x07, r1	; 7
	//	Players = 1;
		cursorpos = 0;
		idleticks = 0;
		Demo = 0;
    e410:	10 92 cc 0f 	sts	0x0FCC, r1
		SetTileTable(TitleTiles);
    e414:	84 ee       	ldi	r24, 0xE4	; 228
    e416:	90 e0       	ldi	r25, 0x00	; 0
    e418:	0e 94 5e 52 	call	0xa4bc	; 0xa4bc <SetTileTable>
		DrawMap2(0,0,TitleMap);
    e41c:	80 e0       	ldi	r24, 0x00	; 0
    e41e:	60 e0       	ldi	r22, 0x00	; 0
    e420:	44 e6       	ldi	r20, 0x64	; 100
    e422:	5b e2       	ldi	r21, 0x2B	; 43
    e424:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <DrawMap2>
		rtl_Print(3,SCREEN_TILES_V-7,PSTR("SELECT:"));
    e428:	83 e0       	ldi	r24, 0x03	; 3
    e42a:	63 e1       	ldi	r22, 0x13	; 19
    e42c:	47 e1       	ldi	r20, 0x17	; 23
    e42e:	5c e9       	ldi	r21, 0x9C	; 156
    e430:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		rtl_Print(3,SCREEN_TILES_V-5,PSTR("1 PLAYER"));
    e434:	83 e0       	ldi	r24, 0x03	; 3
    e436:	65 e1       	ldi	r22, 0x15	; 21
    e438:	4e e0       	ldi	r20, 0x0E	; 14
    e43a:	5c e9       	ldi	r21, 0x9C	; 156
    e43c:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		rtl_Print(3,SCREEN_TILES_V-3,PSTR("2 PLAYERS"));
    e440:	83 e0       	ldi	r24, 0x03	; 3
    e442:	67 e1       	ldi	r22, 0x17	; 23
    e444:	44 e0       	ldi	r20, 0x04	; 4
    e446:	5c e9       	ldi	r21, 0x9C	; 156
    e448:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		rtl_Print(3,SCREEN_TILES_V-1,PSTR("CREDITS"));
    e44c:	83 e0       	ldi	r24, 0x03	; 3
    e44e:	69 e1       	ldi	r22, 0x19	; 25
    e450:	4c ef       	ldi	r20, 0xFC	; 252
    e452:	5b e9       	ldi	r21, 0x9B	; 155
    e454:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
		FadeIn(3,0);
    e458:	83 e0       	ldi	r24, 0x03	; 3
    e45a:	60 e0       	ldi	r22, 0x00	; 0
    e45c:	0e 94 22 5c 	call	0xb844	; 0xb844 <FadeIn>
    e460:	66 24       	eor	r6, r6
    e462:	77 24       	eor	r7, r7
    e464:	99 24       	eor	r9, r9

		while(1){
			prng();
    e466:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
			Frogs[0].State = 1;
    e46a:	30 92 fa 0f 	sts	0x0FFA, r3
    e46e:	20 92 f9 0f 	sts	0x0FF9, r2
			Frogs[1].y = ((SCREEN_TILES_V-6)*8)+(cursorpos*16);
    e472:	89 2d       	mov	r24, r9
    e474:	90 e0       	ldi	r25, 0x00	; 0
    e476:	0a 96       	adiw	r24, 0x0a	; 10
    e478:	34 e0       	ldi	r19, 0x04	; 4
    e47a:	88 0f       	add	r24, r24
    e47c:	99 1f       	adc	r25, r25
    e47e:	3a 95       	dec	r19
    e480:	e1 f7       	brne	.-8      	; 0xe47a <main+0x28a>
    e482:	38 2f       	mov	r19, r24
    e484:	80 93 ff 0f 	sts	0x0FFF, r24
			if(Frogs[0].y < Frogs[1].y){
    e488:	20 91 e8 0f 	lds	r18, 0x0FE8
    e48c:	28 17       	cp	r18, r24
    e48e:	58 f4       	brcc	.+22     	; 0xe4a6 <main+0x2b6>
				if(Frogs[1].y - Frogs[0].y > 8)
    e490:	90 e0       	ldi	r25, 0x00	; 0
    e492:	82 1b       	sub	r24, r18
    e494:	91 09       	sbc	r25, r1
    e496:	09 97       	sbiw	r24, 0x09	; 9
    e498:	14 f0       	brlt	.+4      	; 0xe49e <main+0x2ae>
					Frogs[0].y+=4;
    e49a:	2c 5f       	subi	r18, 0xFC	; 252
    e49c:	01 c0       	rjmp	.+2      	; 0xe4a0 <main+0x2b0>
				else
					Frogs[0].y += 2;
    e49e:	2e 5f       	subi	r18, 0xFE	; 254
    e4a0:	20 93 e8 0f 	sts	0x0FE8, r18
    e4a4:	10 c0       	rjmp	.+32     	; 0xe4c6 <main+0x2d6>
			}else if(Frogs[0].y > Frogs[1].y){
    e4a6:	82 17       	cp	r24, r18
    e4a8:	50 f4       	brcc	.+20     	; 0xe4be <main+0x2ce>
				if(Frogs[0].y - Frogs[1].y > 8)
    e4aa:	82 2f       	mov	r24, r18
    e4ac:	90 e0       	ldi	r25, 0x00	; 0
    e4ae:	83 1b       	sub	r24, r19
    e4b0:	91 09       	sbc	r25, r1
    e4b2:	09 97       	sbiw	r24, 0x09	; 9
    e4b4:	14 f0       	brlt	.+4      	; 0xe4ba <main+0x2ca>
					Frogs[0].y-=4;
    e4b6:	24 50       	subi	r18, 0x04	; 4
    e4b8:	f3 cf       	rjmp	.-26     	; 0xe4a0 <main+0x2b0>
				else
					Frogs[0].y -= 2;
    e4ba:	22 50       	subi	r18, 0x02	; 2
    e4bc:	f1 cf       	rjmp	.-30     	; 0xe4a0 <main+0x2b0>
			}else
				Frogs[0].State = 0;
    e4be:	10 92 fa 0f 	sts	0x0FFA, r1
    e4c2:	10 92 f9 0f 	sts	0x0FF9, r1

			spritecount = 0;
    e4c6:	10 92 cb 0f 	sts	0x0FCB, r1
			if(!Frogs[0].BlinkTime)
    e4ca:	80 91 f5 0f 	lds	r24, 0x0FF5
    e4ce:	88 23       	and	r24, r24
    e4d0:	29 f4       	brne	.+10     	; 0xe4dc <main+0x2ec>
				Frogs[0].BlinkTime = (40)+(prng()&0xA0);
    e4d2:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
    e4d6:	80 7a       	andi	r24, 0xA0	; 160
    e4d8:	88 5d       	subi	r24, 0xD8	; 216
    e4da:	01 c0       	rjmp	.+2      	; 0xe4de <main+0x2ee>
			else
				Frogs[0].BlinkTime--;
    e4dc:	81 50       	subi	r24, 0x01	; 1
    e4de:	80 93 f5 0f 	sts	0x0FF5, r24
			DrawSpriteFrame(STARTX,Frogs[0].y,0+((Frogs[0].BlinkTime<4)*3)+(Frogs[0].State)+16);
    e4e2:	60 91 e8 0f 	lds	r22, 0x0FE8
    e4e6:	80 91 f5 0f 	lds	r24, 0x0FF5
    e4ea:	84 30       	cpi	r24, 0x04	; 4
    e4ec:	10 f0       	brcs	.+4      	; 0xe4f2 <main+0x302>
    e4ee:	80 e0       	ldi	r24, 0x00	; 0
    e4f0:	01 c0       	rjmp	.+2      	; 0xe4f4 <main+0x304>
    e4f2:	83 e0       	ldi	r24, 0x03	; 3
    e4f4:	40 91 f9 0f 	lds	r20, 0x0FF9
    e4f8:	40 5f       	subi	r20, 0xF0	; 240
    e4fa:	48 0f       	add	r20, r24
    e4fc:	87 e0       	ldi	r24, 0x07	; 7
    e4fe:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
			WaitVsync(1);
    e502:	81 e0       	ldi	r24, 0x01	; 1
    e504:	90 e0       	ldi	r25, 0x00	; 0
    e506:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
//JoyVal[0] = BTN_START;OldJoyVal[0] = 0;Frogs[1].AIState = 0;Players=2;SoundsOn=0;//////////////////////////////////////////////////////////////////////
			if(++idleticks > TITLEIDLETIME){Demo=1;return;
    e50a:	08 94       	sec
    e50c:	61 1c       	adc	r6, r1
    e50e:	71 1c       	adc	r7, r1
    e510:	31 ed       	ldi	r19, 0xD1	; 209
    e512:	63 16       	cp	r6, r19
    e514:	32 e0       	ldi	r19, 0x02	; 2
    e516:	73 06       	cpc	r7, r19
    e518:	20 f0       	brcs	.+8      	; 0xe522 <main+0x332>
    e51a:	81 e0       	ldi	r24, 0x01	; 1
    e51c:	80 93 cc 0f 	sts	0x0FCC, r24
    e520:	aa c0       	rjmp	.+340    	; 0xe676 <main+0x486>
    e522:	2c e1       	ldi	r18, 0x1C	; 28
    e524:	c2 2e       	mov	r12, r18
    e526:	20 e1       	ldi	r18, 0x10	; 16
    e528:	d2 2e       	mov	r13, r18
    e52a:	07 e1       	ldi	r16, 0x17	; 23
    e52c:	10 e1       	ldi	r17, 0x10	; 16
    e52e:	7e 01       	movw	r14, r28
    e530:	08 94       	sec
    e532:	e1 1c       	adc	r14, r1
    e534:	f1 1c       	adc	r15, r1
    e536:	98 ec       	ldi	r25, 0xC8	; 200
    e538:	a9 2e       	mov	r10, r25
    e53a:	9f e0       	ldi	r25, 0x0F	; 15
    e53c:	b9 2e       	mov	r11, r25
			//	HighScoreScreen();
			//	goto TITLETOP;
			}
			for(uint8_t i=0;i<2;i++){//pads updated in VsyncRoutine
				if(JoyVal[i] && !OldJoyVal[i]){
    e53e:	d6 01       	movw	r26, r12
    e540:	2d 91       	ld	r18, X+
    e542:	3c 91       	ld	r19, X
    e544:	21 15       	cp	r18, r1
    e546:	31 05       	cpc	r19, r1
    e548:	79 f1       	breq	.+94     	; 0xe5a8 <main+0x3b8>
    e54a:	f8 01       	movw	r30, r16
    e54c:	80 81       	ld	r24, Z
    e54e:	91 81       	ldd	r25, Z+1	; 0x01
    e550:	89 2b       	or	r24, r25
    e552:	51 f5       	brne	.+84     	; 0xe5a8 <main+0x3b8>
					if(JoyVal[i] == pgm_read_word(&KonamiCode[codepos[i]])){
    e554:	d7 01       	movw	r26, r14
    e556:	4c 91       	ld	r20, X
    e558:	e4 2f       	mov	r30, r20
    e55a:	f0 e0       	ldi	r31, 0x00	; 0
    e55c:	ee 0f       	add	r30, r30
    e55e:	ff 1f       	adc	r31, r31
    e560:	e5 54       	subi	r30, 0x45	; 69
    e562:	f4 46       	sbci	r31, 0x64	; 100
    e564:	85 91       	lpm	r24, Z+
    e566:	94 91       	lpm	r25, Z+
    e568:	28 17       	cp	r18, r24
    e56a:	39 07       	cpc	r19, r25
    e56c:	d9 f4       	brne	.+54     	; 0xe5a4 <main+0x3b4>
						if(++codepos[i] ==(sizeof(KonamiCode)/2) ){
    e56e:	84 2f       	mov	r24, r20
    e570:	8f 5f       	subi	r24, 0xFF	; 255
    e572:	8c 93       	st	X, r24
    e574:	8a 30       	cpi	r24, 0x0A	; 10
    e576:	c1 f4       	brne	.+48     	; 0xe5a8 <main+0x3b8>
}

void FFTriggerPCM(uint8_t patch, uint8_t freq, uint8_t vol){
	if(SoundsOn)
    e578:	80 91 1b 10 	lds	r24, 0x101B
    e57c:	88 23       	and	r24, r24
    e57e:	31 f0       	breq	.+12     	; 0xe58c <main+0x39c>
		TriggerNote(4,patch,freq,vol);
    e580:	84 e0       	ldi	r24, 0x04	; 4
    e582:	60 e0       	ldi	r22, 0x00	; 0
    e584:	48 e1       	ldi	r20, 0x18	; 24
    e586:	2f ef       	ldi	r18, 0xFF	; 255
    e588:	0e 94 4f 55 	call	0xaa9e	; 0xaa9e <TriggerNote>
							FFTriggerPCM(SFX_FROG,24,255);
							FadeIn(1,false);
    e58c:	81 e0       	ldi	r24, 0x01	; 1
    e58e:	60 e0       	ldi	r22, 0x00	; 0
    e590:	0e 94 22 5c 	call	0xb844	; 0xb844 <FadeIn>
							Cheats[i] = !Cheats[i];
    e594:	f5 01       	movw	r30, r10
    e596:	80 81       	ld	r24, Z
    e598:	91 e0       	ldi	r25, 0x01	; 1
    e59a:	89 27       	eor	r24, r25
    e59c:	80 83       	st	Z, r24
							codepos[i] = 0;
    e59e:	d7 01       	movw	r26, r14
    e5a0:	1c 92       	st	X, r1
    e5a2:	02 c0       	rjmp	.+4      	; 0xe5a8 <main+0x3b8>
						}
					}else
						codepos[i] = 0;
    e5a4:	f7 01       	movw	r30, r14
    e5a6:	10 82       	st	Z, r1
				}
				if(JoyVal[i])
    e5a8:	d6 01       	movw	r26, r12
    e5aa:	2d 91       	ld	r18, X+
    e5ac:	3c 91       	ld	r19, X
    e5ae:	21 15       	cp	r18, r1
    e5b0:	31 05       	cpc	r19, r1
    e5b2:	11 f0       	breq	.+4      	; 0xe5b8 <main+0x3c8>
    e5b4:	66 24       	eor	r6, r6
    e5b6:	77 24       	eor	r7, r7
					idleticks = 0;
				if((JoyVal[i] & BTN_START) && !(OldJoyVal[i] & BTN_START)){
    e5b8:	23 ff       	sbrs	r18, 3
    e5ba:	20 c0       	rjmp	.+64     	; 0xe5fc <main+0x40c>
    e5bc:	f8 01       	movw	r30, r16
    e5be:	80 81       	ld	r24, Z
    e5c0:	83 fd       	sbrc	r24, 3
    e5c2:	1c c0       	rjmp	.+56     	; 0xe5fc <main+0x40c>
	if(SoundsOn)
		TriggerFx(patch,255,1);
}

void FFTriggerPCM(uint8_t patch, uint8_t freq, uint8_t vol){
	if(SoundsOn)
    e5c4:	80 91 1b 10 	lds	r24, 0x101B
    e5c8:	88 23       	and	r24, r24
    e5ca:	31 f0       	breq	.+12     	; 0xe5d8 <main+0x3e8>
		TriggerNote(4,patch,freq,vol);
    e5cc:	84 e0       	ldi	r24, 0x04	; 4
    e5ce:	60 e0       	ldi	r22, 0x00	; 0
    e5d0:	48 e1       	ldi	r20, 0x18	; 24
    e5d2:	24 eb       	ldi	r18, 0xB4	; 180
    e5d4:	0e 94 4f 55 	call	0xaa9e	; 0xaa9e <TriggerNote>
					FFTriggerPCM(SFX_FROG,24,180);//FFTriggerFx(SFX_GRAB1);
					if(cursorpos < 2){
    e5d8:	f1 e0       	ldi	r31, 0x01	; 1
    e5da:	f9 15       	cp	r31, r9
    e5dc:	60 f0       	brcs	.+24     	; 0xe5f6 <main+0x406>
						if(cursorpos == 0)
    e5de:	99 20       	and	r9, r9
    e5e0:	21 f4       	brne	.+8      	; 0xe5ea <main+0x3fa>
							Players = 1;
    e5e2:	81 e0       	ldi	r24, 0x01	; 1
    e5e4:	80 93 24 10 	sts	0x1024, r24
    e5e8:	46 c0       	rjmp	.+140    	; 0xe676 <main+0x486>
						else{
							Frogs[1].AIState = 0;//disable AI
    e5ea:	10 92 0e 10 	sts	0x100E, r1
							Players = 2;
    e5ee:	22 e0       	ldi	r18, 0x02	; 2
    e5f0:	20 93 24 10 	sts	0x1024, r18
    e5f4:	40 c0       	rjmp	.+128    	; 0xe676 <main+0x486>
						}
						return;
					}
					CreditScreen();
    e5f6:	0e 94 fa 64 	call	0xc9f4	; 0xc9f4 <CreditScreen>
    e5fa:	ec ce       	rjmp	.-552    	; 0xe3d4 <main+0x1e4>
					goto TITLETOP;
				}

				if((JoyVal[i] & BTN_UP) && !(OldJoyVal[i] & BTN_UP)){
    e5fc:	24 ff       	sbrs	r18, 4
    e5fe:	14 c0       	rjmp	.+40     	; 0xe628 <main+0x438>
    e600:	d8 01       	movw	r26, r16
    e602:	8c 91       	ld	r24, X
    e604:	84 fd       	sbrc	r24, 4
    e606:	10 c0       	rjmp	.+32     	; 0xe628 <main+0x438>

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    e608:	80 91 1b 10 	lds	r24, 0x101B
    e60c:	88 23       	and	r24, r24
    e60e:	29 f0       	breq	.+10     	; 0xe61a <main+0x42a>
		TriggerFx(patch,255,1);
    e610:	84 e0       	ldi	r24, 0x04	; 4
    e612:	6f ef       	ldi	r22, 0xFF	; 255
    e614:	41 e0       	ldi	r20, 0x01	; 1
    e616:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
						FFTriggerFx(SFX_GRAB1);
					if(--cursorpos > 254)
    e61a:	9a 94       	dec	r9
    e61c:	bf ef       	ldi	r27, 0xFF	; 255
    e61e:	9b 16       	cp	r9, r27
    e620:	b9 f4       	brne	.+46     	; 0xe650 <main+0x460>
    e622:	a2 e0       	ldi	r26, 0x02	; 2
    e624:	9a 2e       	mov	r9, r26
    e626:	14 c0       	rjmp	.+40     	; 0xe650 <main+0x460>
						cursorpos = 2;
				}else if((JoyVal[i] & BTN_DOWN) && !(OldJoyVal[i] & BTN_DOWN)){
    e628:	25 ff       	sbrs	r18, 5
    e62a:	12 c0       	rjmp	.+36     	; 0xe650 <main+0x460>
    e62c:	f8 01       	movw	r30, r16
    e62e:	80 81       	ld	r24, Z
    e630:	85 fd       	sbrc	r24, 5
    e632:	0e c0       	rjmp	.+28     	; 0xe650 <main+0x460>
					if(SoundsOn)
    e634:	80 91 1b 10 	lds	r24, 0x101B
    e638:	88 23       	and	r24, r24
    e63a:	29 f0       	breq	.+10     	; 0xe646 <main+0x456>
    e63c:	84 e0       	ldi	r24, 0x04	; 4
    e63e:	6f ef       	ldi	r22, 0xFF	; 255
    e640:	41 e0       	ldi	r20, 0x01	; 1
    e642:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
						FFTriggerFx(SFX_GRAB1);
					if(++cursorpos > 2)
    e646:	93 94       	inc	r9
    e648:	f2 e0       	ldi	r31, 0x02	; 2
    e64a:	f9 15       	cp	r31, r9
    e64c:	08 f4       	brcc	.+2      	; 0xe650 <main+0x460>
    e64e:	99 24       	eor	r9, r9
    e650:	22 e0       	ldi	r18, 0x02	; 2
    e652:	30 e0       	ldi	r19, 0x00	; 0
    e654:	c2 0e       	add	r12, r18
    e656:	d3 1e       	adc	r13, r19
    e658:	0e 5f       	subi	r16, 0xFE	; 254
    e65a:	1f 4f       	sbci	r17, 0xFF	; 255
    e65c:	08 94       	sec
    e65e:	e1 1c       	adc	r14, r1
    e660:	f1 1c       	adc	r15, r1
    e662:	08 94       	sec
    e664:	a1 1c       	adc	r10, r1
    e666:	b1 1c       	adc	r11, r1
//JoyVal[0] = BTN_START;OldJoyVal[0] = 0;Frogs[1].AIState = 0;Players=2;SoundsOn=0;//////////////////////////////////////////////////////////////////////
			if(++idleticks > TITLEIDLETIME){Demo=1;return;
			//	HighScoreScreen();
			//	goto TITLETOP;
			}
			for(uint8_t i=0;i<2;i++){//pads updated in VsyncRoutine
    e668:	30 e2       	ldi	r19, 0x20	; 32
    e66a:	c3 16       	cp	r12, r19
    e66c:	30 e1       	ldi	r19, 0x10	; 16
    e66e:	d3 06       	cpc	r13, r19
    e670:	09 f4       	brne	.+2      	; 0xe674 <main+0x484>
    e672:	f9 ce       	rjmp	.-526    	; 0xe466 <main+0x276>
    e674:	64 cf       	rjmp	.-312    	; 0xe53e <main+0x34e>
	Intro();

	while(1){
		TitleScreen();
		GameLoop();
    e676:	7a da       	rcall	.-2828   	; 0xdb6c <GameLoop>



//const uint8_t gameover_colors[] PROGMEM = {};
inline void GameOver(){
	InGui = true;
    e678:	81 e0       	ldi	r24, 0x01	; 1
    e67a:	80 93 d2 0f 	sts	0x0FD2, r24
	if(Demo)
    e67e:	80 91 cc 0f 	lds	r24, 0x0FCC
    e682:	88 23       	and	r24, r24
    e684:	09 f0       	breq	.+2      	; 0xe688 <main+0x498>
    e686:	65 c2       	rjmp	.+1226   	; 0xeb52 <main+0x962>
		return;
	//uint16_t	Delay	= ENDDELAY;
	WaitVsync(2);
    e688:	82 e0       	ldi	r24, 0x02	; 2
    e68a:	90 e0       	ldi	r25, 0x00	; 0
    e68c:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
			SetTile(x++,y,c+201);
	}
}

void HideSprites(){
	spritecount = 0;
    e690:	10 92 cb 0f 	sts	0x0FCB, r1
    e694:	fc e2       	ldi	r31, 0x2C	; 44
    e696:	cf 2e       	mov	r12, r31
    e698:	f4 e0       	ldi	r31, 0x04	; 4
    e69a:	df 2e       	mov	r13, r31
    e69c:	f6 01       	movw	r30, r12
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    e69e:	80 ef       	ldi	r24, 0xF0	; 240
    e6a0:	80 83       	st	Z, r24
    e6a2:	34 96       	adiw	r30, 0x04	; 4
	}
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    e6a4:	94 e0       	ldi	r25, 0x04	; 4
    e6a6:	e4 38       	cpi	r30, 0x84	; 132
    e6a8:	f9 07       	cpc	r31, r25
    e6aa:	d1 f7       	brne	.-12     	; 0xe6a0 <main+0x4b0>
    e6ac:	ee e0       	ldi	r30, 0x0E	; 14
    e6ae:	ae 2e       	mov	r10, r30
    e6b0:	e4 e0       	ldi	r30, 0x04	; 4
    e6b2:	be 2e       	mov	r11, r30
    e6b4:	f5 01       	movw	r30, r10
	HideSprites();


	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+i] = vram[(SCREEN_TILES_V-2)*VRAM_TILES_H];//blank out scores and time
    e6b6:	80 91 f0 03 	lds	r24, 0x03F0
    e6ba:	81 93       	st	Z+, r24
	//uint16_t	Delay	= ENDDELAY;
	WaitVsync(2);
	HideSprites();


	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
    e6bc:	a4 e0       	ldi	r26, 0x04	; 4
    e6be:	ec 32       	cpi	r30, 0x2C	; 44
    e6c0:	fa 07       	cpc	r31, r26
    e6c2:	c9 f7       	brne	.-14     	; 0xe6b6 <main+0x4c6>
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+i] = vram[(SCREEN_TILES_V-2)*VRAM_TILES_H];//blank out scores and time

//	uint8_t gameover_color_index = 0;
	WaitVsync(1);
    e6c4:	81 e0       	ldi	r24, 0x01	; 1
    e6c6:	90 e0       	ldi	r25, 0x00	; 0
    e6c8:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	rtl_RamifyFontEx(11,gameovercharmap,charlist,compfont,0xD0,255);
    e6cc:	8b e0       	ldi	r24, 0x0B	; 11
    e6ce:	90 e0       	ldi	r25, 0x00	; 0
    e6d0:	67 e9       	ldi	r22, 0x97	; 151
    e6d2:	7b e9       	ldi	r23, 0x9B	; 155
    e6d4:	40 e8       	ldi	r20, 0x80	; 128
    e6d6:	5d e7       	ldi	r21, 0x7D	; 125
    e6d8:	20 e4       	ldi	r18, 0x40	; 64
    e6da:	3c e7       	ldi	r19, 0x7C	; 124
    e6dc:	00 ed       	ldi	r16, 0xD0	; 208
    e6de:	ee 24       	eor	r14, r14
    e6e0:	ea 94       	dec	r14
    e6e2:	0e 94 7a 64 	call	0xc8f4	; 0xc8f4 <rtl_RamifyFontEx>
	WaitVsync(1);
    e6e6:	81 e0       	ldi	r24, 0x01	; 1
    e6e8:	90 e0       	ldi	r25, 0x00	; 0
    e6ea:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	DDRC = 255;//go fullbright since we were doing a night time effect
    e6ee:	8f ef       	ldi	r24, 0xFF	; 255
    e6f0:	87 b9       	out	0x07, r24	; 7
//Frogs[0].Score=2;

	if(Frogs[0].Score > Frogs[1].Score){
    e6f2:	90 91 fc 0f 	lds	r25, 0x0FFC
    e6f6:	80 91 13 10 	lds	r24, 0x1013
    e6fa:	89 17       	cp	r24, r25
    e6fc:	78 f4       	brcc	.+30     	; 0xe71c <main+0x52c>
		DrawSpriteFrame(PLAYER1X, PLAYERY, 10);
    e6fe:	88 e5       	ldi	r24, 0x58	; 88
    e700:	6c ea       	ldi	r22, 0xAC	; 172
    e702:	4a e0       	ldi	r20, 0x0A	; 10
    e704:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		DrawSpriteFrame(PLAYER2X, PLAYERY,35);
    e708:	80 e9       	ldi	r24, 0x90	; 144
    e70a:	6c ea       	ldi	r22, 0xAC	; 172
    e70c:	43 e2       	ldi	r20, 0x23	; 35
    e70e:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		rtl_Print(ENDSCORE1X-6,SCREEN_TILES_V-1,PSTR("WINNER!"));
    e712:	87 e0       	ldi	r24, 0x07	; 7
    e714:	69 e1       	ldi	r22, 0x19	; 25
    e716:	41 e3       	ldi	r20, 0x31	; 49
    e718:	5c e9       	ldi	r21, 0x9C	; 156
    e71a:	1f c0       	rjmp	.+62     	; 0xe75a <main+0x56a>
	}else if(Frogs[1].Score > Frogs[0].Score){
    e71c:	98 17       	cp	r25, r24
    e71e:	78 f4       	brcc	.+30     	; 0xe73e <main+0x54e>
		DrawSpriteFrame(PLAYER1X, PLAYERY, 19);
    e720:	88 e5       	ldi	r24, 0x58	; 88
    e722:	6c ea       	ldi	r22, 0xAC	; 172
    e724:	43 e1       	ldi	r20, 0x13	; 19
    e726:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		DrawSpriteFrame(PLAYER2X, PLAYERY,42);
    e72a:	80 e9       	ldi	r24, 0x90	; 144
    e72c:	6c ea       	ldi	r22, 0xAC	; 172
    e72e:	4a e2       	ldi	r20, 0x2A	; 42
    e730:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		rtl_Print(ENDSCORE2X,SCREEN_TILES_V-1,PSTR("WINNER!"));
    e734:	82 e1       	ldi	r24, 0x12	; 18
    e736:	69 e1       	ldi	r22, 0x19	; 25
    e738:	49 e2       	ldi	r20, 0x29	; 41
    e73a:	5c e9       	ldi	r21, 0x9C	; 156
    e73c:	0e c0       	rjmp	.+28     	; 0xe75a <main+0x56a>
	}else{
		DrawSpriteFrame(PLAYER1X, PLAYERY, 19);
    e73e:	88 e5       	ldi	r24, 0x58	; 88
    e740:	6c ea       	ldi	r22, 0xAC	; 172
    e742:	43 e1       	ldi	r20, 0x13	; 19
    e744:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		DrawSpriteFrame(PLAYER2X, PLAYERY, 35);
    e748:	80 e9       	ldi	r24, 0x90	; 144
    e74a:	6c ea       	ldi	r22, 0xAC	; 172
    e74c:	43 e2       	ldi	r20, 0x23	; 35
    e74e:	0e 94 24 5e 	call	0xbc48	; 0xbc48 <DrawSpriteFrame>
		rtl_Print(TIEX,SCREEN_TILES_V-1,PSTR("TIE GAME!"));
    e752:	8b e0       	ldi	r24, 0x0B	; 11
    e754:	69 e1       	ldi	r22, 0x19	; 25
    e756:	4f e1       	ldi	r20, 0x1F	; 31
    e758:	5c e9       	ldi	r21, 0x9C	; 156
    e75a:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
	}

	DrawNumber(Frogs[0].Score, ENDSCORE1X-(Frogs[0].Score<10)+(Frogs[0].Score>99),SCREEN_TILES_V-9,0);
    e75e:	80 91 fc 0f 	lds	r24, 0x0FFC
    e762:	8a 30       	cpi	r24, 0x0A	; 10
    e764:	10 f0       	brcs	.+4      	; 0xe76a <main+0x57a>
    e766:	6d e0       	ldi	r22, 0x0D	; 13
    e768:	01 c0       	rjmp	.+2      	; 0xe76c <main+0x57c>
    e76a:	6c e0       	ldi	r22, 0x0C	; 12
    e76c:	90 e0       	ldi	r25, 0x00	; 0
    e76e:	84 36       	cpi	r24, 0x64	; 100
    e770:	08 f0       	brcs	.+2      	; 0xe774 <main+0x584>
    e772:	91 e0       	ldi	r25, 0x01	; 1
    e774:	69 0f       	add	r22, r25
    e776:	41 e1       	ldi	r20, 0x11	; 17
    e778:	20 e0       	ldi	r18, 0x00	; 0
    e77a:	0e 94 d5 65 	call	0xcbaa	; 0xcbaa <DrawNumber>
	DrawNumber(Frogs[1].Score, ENDSCORE2X,SCREEN_TILES_V-9,0);
    e77e:	80 91 13 10 	lds	r24, 0x1013
    e782:	62 e1       	ldi	r22, 0x12	; 18
    e784:	41 e1       	ldi	r20, 0x11	; 17
    e786:	20 e0       	ldi	r18, 0x00	; 0
    e788:	0e 94 d5 65 	call	0xcbaa	; 0xcbaa <DrawNumber>
	WaitVsync(256);
    e78c:	80 e0       	ldi	r24, 0x00	; 0
    e78e:	91 e0       	ldi	r25, 0x01	; 1
    e790:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	}

}

inline bool HighScoreEntry(){//return;
	InGui = true;
    e794:	81 e0       	ldi	r24, 0x01	; 1
    e796:	80 93 d2 0f 	sts	0x0FD2, r24
			SetTile(x++,y,c+201);
	}
}

void HideSprites(){
	spritecount = 0;
    e79a:	10 92 cb 0f 	sts	0x0FCB, r1
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    e79e:	80 ef       	ldi	r24, 0xF0	; 240
    e7a0:	f6 01       	movw	r30, r12
    e7a2:	80 83       	st	Z, r24
    e7a4:	24 e0       	ldi	r18, 0x04	; 4
    e7a6:	30 e0       	ldi	r19, 0x00	; 0
    e7a8:	c2 0e       	add	r12, r18
    e7aa:	d3 1e       	adc	r13, r19
	}
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    e7ac:	34 e8       	ldi	r19, 0x84	; 132
    e7ae:	c3 16       	cp	r12, r19
    e7b0:	34 e0       	ldi	r19, 0x04	; 4
    e7b2:	d3 06       	cpc	r13, r19
    e7b4:	a9 f7       	brne	.-22     	; 0xe7a0 <main+0x5b0>
	HideSprites();
	WaitVsync(1);
    e7b6:	81 e0       	ldi	r24, 0x01	; 1
    e7b8:	90 e0       	ldi	r25, 0x00	; 0
    e7ba:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	uint8_t done[2] = {0,0};
    e7be:	19 82       	std	Y+1, r1	; 0x01
    e7c0:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t boardpos[2] = {255,255,};//place on the scoreboard
	uint8_t scoreplace[2] = {0,0};//which letter position we are on during entry
    e7c2:	1d 82       	std	Y+5, r1	; 0x05
    e7c4:	1e 82       	std	Y+6, r1	; 0x06

	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+i] = 72+RAM_TILES_COUNT;//blank out words and time
    e7c6:	80 e7       	ldi	r24, 0x70	; 112
    e7c8:	d5 01       	movw	r26, r10
    e7ca:	8d 93       	st	X+, r24
    e7cc:	5d 01       	movw	r10, r26
	WaitVsync(1);
	uint8_t done[2] = {0,0};
	uint8_t boardpos[2] = {255,255,};//place on the scoreboard
	uint8_t scoreplace[2] = {0,0};//which letter position we are on during entry

	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
    e7ce:	bc e2       	ldi	r27, 0x2C	; 44
    e7d0:	ab 16       	cp	r10, r27
    e7d2:	b4 e0       	ldi	r27, 0x04	; 4
    e7d4:	bb 06       	cpc	r11, r27
    e7d6:	c1 f7       	brne	.-16     	; 0xe7c8 <main+0x5d8>
inline bool HighScoreEntry(){//return;
	InGui = true;
	HideSprites();
	WaitVsync(1);
	uint8_t done[2] = {0,0};
	uint8_t boardpos[2] = {255,255,};//place on the scoreboard
    e7d8:	8f ef       	ldi	r24, 0xFF	; 255
    e7da:	8b 83       	std	Y+3, r24	; 0x03
    e7dc:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t scoreplace[2] = {0,0};//which letter position we are on during entry

	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
		vram[((SCREEN_TILES_V-1)*VRAM_TILES_H)+i] = 72+RAM_TILES_COUNT;//blank out words and time

	WaitVsync(1);
    e7de:	81 e0       	ldi	r24, 0x01	; 1
    e7e0:	90 e0       	ldi	r25, 0x00	; 0
    e7e2:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>

	//sprite are cleared so we can use ram_tiles as a buffer to do our high score sorting. once we know the position of a score
	//this isn't very efficient code but easier this way. this code would need some changes to support more than 2 players

	RamifyAndSortEEProm();
    e7e6:	0e 94 35 64 	call	0xc86a	; 0xc86a <RamifyAndSortEEProm>
    e7ea:	e4 e8       	ldi	r30, 0x84	; 132
    e7ec:	f4 e0       	ldi	r31, 0x04	; 4
    e7ee:	28 96       	adiw	r28, 0x08	; 8
    e7f0:	ff af       	std	Y+63, r31	; 0x3f
    e7f2:	ee af       	std	Y+62, r30	; 0x3e
    e7f4:	28 97       	sbiw	r28, 0x08	; 8
    e7f6:	df 01       	movw	r26, r30
    e7f8:	80 e0       	ldi	r24, 0x00	; 0

	//player scores are added and the order was updated, now scan back through looking for 0 or 1 to determine board pos
	for(uint8_t i=0;i<5;i++){
		if(ram_tiles[(i*6)] < MAXPLAYERS)
			boardpos[ram_tiles[i*6]] = i;
    e7fa:	9e 01       	movw	r18, r28
    e7fc:	2d 5f       	subi	r18, 0xFD	; 253
    e7fe:	3f 4f       	sbci	r19, 0xFF	; 255

	RamifyAndSortEEProm();

	//player scores are added and the order was updated, now scan back through looking for 0 or 1 to determine board pos
	for(uint8_t i=0;i<5;i++){
		if(ram_tiles[(i*6)] < MAXPLAYERS)
    e800:	9c 91       	ld	r25, X
    e802:	92 30       	cpi	r25, 0x02	; 2
    e804:	20 f4       	brcc	.+8      	; 0xe80e <main+0x61e>
			boardpos[ram_tiles[i*6]] = i;
    e806:	f9 01       	movw	r30, r18
    e808:	e9 0f       	add	r30, r25
    e80a:	f1 1d       	adc	r31, r1
    e80c:	80 83       	st	Z, r24
	//this isn't very efficient code but easier this way. this code would need some changes to support more than 2 players

	RamifyAndSortEEProm();

	//player scores are added and the order was updated, now scan back through looking for 0 or 1 to determine board pos
	for(uint8_t i=0;i<5;i++){
    e80e:	8f 5f       	subi	r24, 0xFF	; 255
    e810:	16 96       	adiw	r26, 0x06	; 6
    e812:	85 30       	cpi	r24, 0x05	; 5
    e814:	a9 f7       	brne	.-22     	; 0xe800 <main+0x610>
		if(ram_tiles[(i*6)] < MAXPLAYERS)
			boardpos[ram_tiles[i*6]] = i;
	}

	if(Players < 2 || Cheats[1])
    e816:	80 91 24 10 	lds	r24, 0x1024
    e81a:	82 30       	cpi	r24, 0x02	; 2
    e81c:	20 f0       	brcs	.+8      	; 0xe826 <main+0x636>
    e81e:	80 91 c9 0f 	lds	r24, 0x0FC9
    e822:	88 23       	and	r24, r24
    e824:	11 f0       	breq	.+4      	; 0xe82a <main+0x63a>
		boardpos[1] = 255;//bots and cheaters can't enter the list
    e826:	8f ef       	ldi	r24, 0xFF	; 255
    e828:	8c 83       	std	Y+4, r24	; 0x04
	if(Cheats[0])
    e82a:	80 91 c8 0f 	lds	r24, 0x0FC8
    e82e:	88 23       	and	r24, r24
    e830:	11 f0       	breq	.+4      	; 0xe836 <main+0x646>
		boardpos[0] = 255;//cheaters never prosper...I wonder if that's really true?
    e832:	8f ef       	ldi	r24, 0xFF	; 255
    e834:	8b 83       	std	Y+3, r24	; 0x03

	//now if the boardpos for the player is higher than 0-4 the score didn't make it to the list
	//we know the position to write into eeprom, now we can RamifyFont() and get the names
	rtl_RamifyFontEx(0,highscorecharmap,charlist,compfont,0xD0,255);//load up our fontset for name entry
    e836:	80 e0       	ldi	r24, 0x00	; 0
    e838:	90 e0       	ldi	r25, 0x00	; 0
    e83a:	61 e7       	ldi	r22, 0x71	; 113
    e83c:	7b e9       	ldi	r23, 0x9B	; 155
    e83e:	40 e8       	ldi	r20, 0x80	; 128
    e840:	5d e7       	ldi	r21, 0x7D	; 125
    e842:	20 e4       	ldi	r18, 0x40	; 64
    e844:	3c e7       	ldi	r19, 0x7C	; 124
    e846:	00 ed       	ldi	r16, 0xD0	; 208
    e848:	ee 24       	eor	r14, r14
    e84a:	ea 94       	dec	r14
    e84c:	0e 94 7a 64 	call	0xc8f4	; 0xc8f4 <rtl_RamifyFontEx>

	if((boardpos[0] == 255) && (boardpos[1] == 255))
    e850:	1b 81       	ldd	r17, Y+3	; 0x03
    e852:	1f 3f       	cpi	r17, 0xFF	; 255
    e854:	21 f4       	brne	.+8      	; 0xe85e <main+0x66e>
    e856:	8c 81       	ldd	r24, Y+4	; 0x04
    e858:	8f 3f       	cpi	r24, 0xFF	; 255
    e85a:	09 f4       	brne	.+2      	; 0xe85e <main+0x66e>
    e85c:	7a c1       	rjmp	.+756    	; 0xeb52 <main+0x962>
		return true;

	WaitVsync(1);
    e85e:	81 e0       	ldi	r24, 0x01	; 1
    e860:	90 e0       	ldi	r25, 0x00	; 0
    e862:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>



	if(boardpos[0] != 255)
    e866:	1f 3f       	cpi	r17, 0xFF	; 255
    e868:	39 f0       	breq	.+14     	; 0xe878 <main+0x688>
		rtl_Print(ENDSCORE1X-9,SCREEN_TILES_V-1,PSTR("NEW RECORD!"));
    e86a:	84 e0       	ldi	r24, 0x04	; 4
    e86c:	69 e1       	ldi	r22, 0x19	; 25
    e86e:	45 e4       	ldi	r20, 0x45	; 69
    e870:	5c e9       	ldi	r21, 0x9C	; 156
    e872:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
    e876:	02 c0       	rjmp	.+4      	; 0xe87c <main+0x68c>
	else
		done[0] = 1;
    e878:	81 e0       	ldi	r24, 0x01	; 1
    e87a:	89 83       	std	Y+1, r24	; 0x01

	if(boardpos[1] != 255)
    e87c:	8c 81       	ldd	r24, Y+4	; 0x04
    e87e:	8f 3f       	cpi	r24, 0xFF	; 255
    e880:	39 f0       	breq	.+14     	; 0xe890 <main+0x6a0>
		rtl_Print(ENDSCORE1X+4,SCREEN_TILES_V-1,PSTR("NEW RECORD!"));
    e882:	81 e1       	ldi	r24, 0x11	; 17
    e884:	69 e1       	ldi	r22, 0x19	; 25
    e886:	49 e3       	ldi	r20, 0x39	; 57
    e888:	5c e9       	ldi	r21, 0x9C	; 156
    e88a:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
    e88e:	02 c0       	rjmp	.+4      	; 0xe894 <main+0x6a4>
	else
		done[1] = 1;
    e890:	81 e0       	ldi	r24, 0x01	; 1
    e892:	8a 83       	std	Y+2, r24	; 0x02


OldJoyVal[0] = OldJoyVal[1] = 255;//I don't think this needs to be here anymore, but I'm too lazy to test if thats always true!
    e894:	8f ef       	ldi	r24, 0xFF	; 255
    e896:	90 e0       	ldi	r25, 0x00	; 0
    e898:	90 93 1a 10 	sts	0x101A, r25
    e89c:	80 93 19 10 	sts	0x1019, r24
    e8a0:	90 93 18 10 	sts	0x1018, r25
    e8a4:	80 93 17 10 	sts	0x1017, r24
    e8a8:	29 96       	adiw	r28, 0x09	; 9
    e8aa:	1f ae       	std	Y+63, r1	; 0x3f
    e8ac:	29 97       	sbiw	r28, 0x09	; 9
	while(true){
		uint8_t flashcounter;
		WaitVsync(1);
		flashcounter++;
    e8ae:	9e 01       	movw	r18, r28
    e8b0:	2b 5f       	subi	r18, 0xFB	; 251
    e8b2:	3f 4f       	sbci	r19, 0xFF	; 255
    e8b4:	2b 96       	adiw	r28, 0x0b	; 11
    e8b6:	3f af       	std	Y+63, r19	; 0x3f
    e8b8:	2e af       	std	Y+62, r18	; 0x3e
    e8ba:	2b 97       	sbiw	r28, 0x0b	; 11


OldJoyVal[0] = OldJoyVal[1] = 255;//I don't think this needs to be here anymore, but I'm too lazy to test if thats always true!
	while(true){
		uint8_t flashcounter;
		WaitVsync(1);
    e8bc:	81 e0       	ldi	r24, 0x01	; 1
    e8be:	90 e0       	ldi	r25, 0x00	; 0
    e8c0:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
		flashcounter++;
    e8c4:	29 96       	adiw	r28, 0x09	; 9
    e8c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    e8c8:	29 97       	sbiw	r28, 0x09	; 9
    e8ca:	3f 5f       	subi	r19, 0xFF	; 255
    e8cc:	29 96       	adiw	r28, 0x09	; 9
    e8ce:	3f af       	std	Y+63, r19	; 0x3f
    e8d0:	29 97       	sbiw	r28, 0x09	; 9
    e8d2:	73 e0       	ldi	r23, 0x03	; 3
    e8d4:	47 2e       	mov	r4, r23
    e8d6:	51 2c       	mov	r5, r1
    e8d8:	4c 0e       	add	r4, r28
    e8da:	5d 1e       	adc	r5, r29
    e8dc:	3e 01       	movw	r6, r28
    e8de:	08 94       	sec
    e8e0:	61 1c       	adc	r6, r1
    e8e2:	71 1c       	adc	r7, r1
    e8e4:	8e 01       	movw	r16, r28
    e8e6:	0b 5f       	subi	r16, 0xFB	; 251
    e8e8:	1f 4f       	sbci	r17, 0xFF	; 255
    e8ea:	6c e1       	ldi	r22, 0x1C	; 28
    e8ec:	e6 2e       	mov	r14, r22
    e8ee:	60 e1       	ldi	r22, 0x10	; 16
    e8f0:	f6 2e       	mov	r15, r22
    e8f2:	57 e1       	ldi	r21, 0x17	; 23
    e8f4:	85 2e       	mov	r8, r21
    e8f6:	50 e1       	ldi	r21, 0x10	; 16
    e8f8:	95 2e       	mov	r9, r21
    e8fa:	46 ee       	ldi	r20, 0xE6	; 230
    e8fc:	a4 2e       	mov	r10, r20
    e8fe:	41 e0       	ldi	r20, 0x01	; 1
    e900:	b4 2e       	mov	r11, r20
    e902:	cc 24       	eor	r12, r12
    e904:	dd 24       	eor	r13, r13
			}
			
			//HACK
			scorename[5] = scorename[11] = 0;//I don't know why it's getting corrupted, A button only?? meh...

			if(!done[i] && (flashcounter&3) > 1){
    e906:	23 2e       	mov	r2, r19
    e908:	33 24       	eor	r3, r3
    e90a:	83 e0       	ldi	r24, 0x03	; 3
    e90c:	28 22       	and	r2, r24
    e90e:	33 24       	eor	r3, r3
	while(true){
		uint8_t flashcounter;
		WaitVsync(1);
		flashcounter++;
		for(uint8_t i=0;i<MAXPLAYERS;i++){
			if(boardpos[i] == 255 || done[i])//no high score or done entering
    e910:	d2 01       	movw	r26, r4
    e912:	8c 91       	ld	r24, X
    e914:	8f 3f       	cpi	r24, 0xFF	; 255
    e916:	09 f4       	brne	.+2      	; 0xe91a <main+0x72a>
    e918:	b8 c0       	rjmp	.+368    	; 0xea8a <main+0x89a>
    e91a:	f3 01       	movw	r30, r6
    e91c:	80 81       	ld	r24, Z
    e91e:	88 23       	and	r24, r24
    e920:	09 f0       	breq	.+2      	; 0xe924 <main+0x734>
    e922:	b3 c0       	rjmp	.+358    	; 0xea8a <main+0x89a>
				continue;


if(!OldJoyVal[i]){
    e924:	d4 01       	movw	r26, r8
    e926:	8d 91       	ld	r24, X+
    e928:	9c 91       	ld	r25, X
    e92a:	89 2b       	or	r24, r25
    e92c:	09 f0       	breq	.+2      	; 0xe930 <main+0x740>
    e92e:	5a c0       	rjmp	.+180    	; 0xe9e4 <main+0x7f4>
			if((JoyVal[i] & BTN_LEFT) /*&& !(OldJoyVal[i] & BTN_LEFT)*/ && scoreplace[i]){
    e930:	f7 01       	movw	r30, r14
    e932:	90 81       	ld	r25, Z
    e934:	96 ff       	sbrs	r25, 6
    e936:	07 c0       	rjmp	.+14     	; 0xe946 <main+0x756>
    e938:	d8 01       	movw	r26, r16
    e93a:	8c 91       	ld	r24, X
    e93c:	88 23       	and	r24, r24
    e93e:	19 f0       	breq	.+6      	; 0xe946 <main+0x756>
				//vram[  (VRAM_TILES_H*16)+5+(i*8)+scoreplace[i]  ] = 72+RAM_TILES_COUNT;//vram[].....overwrite character with blank
				//scorename[(i*6)+scoreplace[i]] = ' ';
				scoreplace[i]--;
    e940:	81 50       	subi	r24, 0x01	; 1
    e942:	8c 93       	st	X, r24
    e944:	08 c0       	rjmp	.+16     	; 0xe956 <main+0x766>
				FFTriggerFx(SFX_JUMP2);
			}else if((JoyVal[i] & BTN_RIGHT) /*&& !(OldJoyVal[i] & BTN_RIGHT)*/ && scoreplace[i] < 4){
    e946:	97 ff       	sbrs	r25, 7
    e948:	10 c0       	rjmp	.+32     	; 0xe96a <main+0x77a>
    e94a:	f8 01       	movw	r30, r16
    e94c:	80 81       	ld	r24, Z
    e94e:	84 30       	cpi	r24, 0x04	; 4
    e950:	60 f4       	brcc	.+24     	; 0xe96a <main+0x77a>
				scoreplace[i]++;
    e952:	8f 5f       	subi	r24, 0xFF	; 255
    e954:	80 83       	st	Z, r24

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    e956:	80 91 1b 10 	lds	r24, 0x101B
    e95a:	88 23       	and	r24, r24
    e95c:	71 f1       	breq	.+92     	; 0xe9ba <main+0x7ca>
		TriggerFx(patch,255,1);
    e95e:	87 e0       	ldi	r24, 0x07	; 7
    e960:	6f ef       	ldi	r22, 0xFF	; 255
    e962:	41 e0       	ldi	r20, 0x01	; 1
    e964:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
    e968:	28 c0       	rjmp	.+80     	; 0xe9ba <main+0x7ca>
				FFTriggerFx(SFX_JUMP2);
			}else if((JoyVal[i] & BTN_UP)){// && !(OldJoyVal[i] & BTN_UP)){
    e96a:	94 ff       	sbrs	r25, 4
    e96c:	11 c0       	rjmp	.+34     	; 0xe990 <main+0x7a0>
				if(scorename[(i*6)+scoreplace[i]] == ' ')
    e96e:	d8 01       	movw	r26, r16
    e970:	8c 91       	ld	r24, X
    e972:	f6 01       	movw	r30, r12
    e974:	e8 0f       	add	r30, r24
    e976:	f1 1d       	adc	r31, r1
    e978:	ef 5f       	subi	r30, 0xFF	; 255
    e97a:	fe 4f       	sbci	r31, 0xFE	; 254
    e97c:	80 81       	ld	r24, Z
    e97e:	80 32       	cpi	r24, 0x20	; 32
    e980:	11 f4       	brne	.+4      	; 0xe986 <main+0x796>
					scorename[(i*6)+scoreplace[i]] = 'Z';
    e982:	ba e5       	ldi	r27, 0x5A	; 90
    e984:	12 c0       	rjmp	.+36     	; 0xe9aa <main+0x7ba>
				else if(--scorename[(i*6)+scoreplace[i]] < 'A')
    e986:	81 50       	subi	r24, 0x01	; 1
    e988:	80 83       	st	Z, r24
    e98a:	81 34       	cpi	r24, 0x41	; 65
    e98c:	b0 f4       	brcc	.+44     	; 0xe9ba <main+0x7ca>
    e98e:	13 c0       	rjmp	.+38     	; 0xe9b6 <main+0x7c6>
					scorename[(i*6)+scoreplace[i]] = ' ';
			}else if((JoyVal[i] & BTN_DOWN)){// && !(OldJoyVal[i] & BTN_DOWN)){
    e990:	95 ff       	sbrs	r25, 5
    e992:	13 c0       	rjmp	.+38     	; 0xe9ba <main+0x7ca>
				if(scorename[(i*6)+scoreplace[i]] == ' ')
    e994:	d8 01       	movw	r26, r16
    e996:	8c 91       	ld	r24, X
    e998:	f6 01       	movw	r30, r12
    e99a:	e8 0f       	add	r30, r24
    e99c:	f1 1d       	adc	r31, r1
    e99e:	ef 5f       	subi	r30, 0xFF	; 255
    e9a0:	fe 4f       	sbci	r31, 0xFE	; 254
    e9a2:	80 81       	ld	r24, Z
    e9a4:	80 32       	cpi	r24, 0x20	; 32
    e9a6:	19 f4       	brne	.+6      	; 0xe9ae <main+0x7be>
					scorename[(i*6)+scoreplace[i]] = 'A';
    e9a8:	b1 e4       	ldi	r27, 0x41	; 65
    e9aa:	b0 83       	st	Z, r27
    e9ac:	06 c0       	rjmp	.+12     	; 0xe9ba <main+0x7ca>
				else if(++scorename[(i*6)+scoreplace[i]] > 'Z')
    e9ae:	8f 5f       	subi	r24, 0xFF	; 255
    e9b0:	80 83       	st	Z, r24
    e9b2:	8b 35       	cpi	r24, 0x5B	; 91
    e9b4:	10 f0       	brcs	.+4      	; 0xe9ba <main+0x7ca>
					scorename[(i*6)+scoreplace[i]] = ' ';
    e9b6:	20 e2       	ldi	r18, 0x20	; 32
    e9b8:	20 83       	st	Z, r18
			}
		
			if((JoyVal[i] & BTN_START)){// && !(JoyVal[i] & BTN_START))){
    e9ba:	d7 01       	movw	r26, r14
    e9bc:	8c 91       	ld	r24, X
    e9be:	83 ff       	sbrs	r24, 3
    e9c0:	0c c0       	rjmp	.+24     	; 0xe9da <main+0x7ea>
				scoreplace[i] = 4;
    e9c2:	24 e0       	ldi	r18, 0x04	; 4
    e9c4:	f8 01       	movw	r30, r16
    e9c6:	20 83       	st	Z, r18
				JoyVal[i] = BTN_A|BTN_START;
    e9c8:	88 e0       	ldi	r24, 0x08	; 8
    e9ca:	91 e0       	ldi	r25, 0x01	; 1
    e9cc:	8d 93       	st	X+, r24
    e9ce:	9c 93       	st	X, r25
				OldJoyVal[i] = BTN_START;
    e9d0:	e8 e0       	ldi	r30, 0x08	; 8
    e9d2:	f0 e0       	ldi	r31, 0x00	; 0
    e9d4:	d4 01       	movw	r26, r8
    e9d6:	ed 93       	st	X+, r30
    e9d8:	fc 93       	st	X, r31
			}
			if(((JoyVal[i] & BTN_A))){// && !(OldJoyVal[i] & BTN_A))){
    e9da:	d7 01       	movw	r26, r14
    e9dc:	8d 91       	ld	r24, X+
    e9de:	9c 91       	ld	r25, X
    e9e0:	90 fd       	sbrc	r25, 0
    e9e2:	0b c0       	rjmp	.+22     	; 0xe9fa <main+0x80a>
    e9e4:	96 01       	movw	r18, r12
    e9e6:	2f 5f       	subi	r18, 0xFF	; 255
    e9e8:	3e 4f       	sbci	r19, 0xFE	; 254
    e9ea:	f5 01       	movw	r30, r10
    e9ec:	e0 5e       	subi	r30, 0xE0	; 224
    e9ee:	fe 4f       	sbci	r31, 0xFE	; 254
    e9f0:	bf 01       	movw	r22, r30
					done[i] = true;
					continue;
				}
			}
}
			for(uint8_t j=0;j<5;j++){
    e9f2:	a5 01       	movw	r20, r10
    e9f4:	4b 5d       	subi	r20, 0xDB	; 219
    e9f6:	5e 4f       	sbci	r21, 0xFE	; 254
    e9f8:	17 c0       	rjmp	.+46     	; 0xea28 <main+0x838>
				scoreplace[i] = 4;
				JoyVal[i] = BTN_A|BTN_START;
				OldJoyVal[i] = BTN_START;
			}
			if(((JoyVal[i] & BTN_A))){// && !(OldJoyVal[i] & BTN_A))){
				if(++scoreplace[i]==5){
    e9fa:	f8 01       	movw	r30, r16
    e9fc:	80 81       	ld	r24, Z
    e9fe:	8f 5f       	subi	r24, 0xFF	; 255
    ea00:	80 83       	st	Z, r24
    ea02:	85 30       	cpi	r24, 0x05	; 5
    ea04:	79 f7       	brne	.-34     	; 0xe9e4 <main+0x7f4>
}

void FFTriggerPCM(uint8_t patch, uint8_t freq, uint8_t vol){
	if(SoundsOn)
    ea06:	80 91 1b 10 	lds	r24, 0x101B
    ea0a:	88 23       	and	r24, r24
    ea0c:	31 f0       	breq	.+12     	; 0xea1a <main+0x82a>
		TriggerNote(4,patch,freq,vol);
    ea0e:	84 e0       	ldi	r24, 0x04	; 4
    ea10:	60 e0       	ldi	r22, 0x00	; 0
    ea12:	47 e1       	ldi	r20, 0x17	; 23
    ea14:	2f ef       	ldi	r18, 0xFF	; 255
    ea16:	0e 94 4f 55 	call	0xaa9e	; 0xaa9e <TriggerNote>
					scoreplace[i] = 4;
    ea1a:	e4 e0       	ldi	r30, 0x04	; 4
    ea1c:	d8 01       	movw	r26, r16
    ea1e:	ec 93       	st	X, r30
					FFTriggerPCM(SFX_FROG,23,255);
					done[i] = true;
    ea20:	e1 e0       	ldi	r30, 0x01	; 1
    ea22:	d3 01       	movw	r26, r6
    ea24:	ec 93       	st	X, r30
    ea26:	31 c0       	rjmp	.+98     	; 0xea8a <main+0x89a>
					continue;
				}
			}
}
			for(uint8_t j=0;j<5;j++){
				if(scorename[(i*6)+j] != ' ')
    ea28:	d9 01       	movw	r26, r18
    ea2a:	8c 91       	ld	r24, X
    ea2c:	80 32       	cpi	r24, 0x20	; 32
    ea2e:	19 f0       	breq	.+6      	; 0xea36 <main+0x846>
					vram[  (VRAM_TILES_H*(SCREEN_TILES_V-10))+6+j+(i*12)] = 10+(scorename[(i*6)+j]-'A');//+(i*8)+scoreplace[i]
    ea30:	87 53       	subi	r24, 0x37	; 55
    ea32:	80 83       	st	Z, r24
    ea34:	03 c0       	rjmp	.+6      	; 0xea3c <main+0x84c>
				else
					vram[(VRAM_TILES_H*(SCREEN_TILES_V-10))+6+j+(i*12)] = RAM_TILES_COUNT+72;
    ea36:	80 e7       	ldi	r24, 0x70	; 112
    ea38:	db 01       	movw	r26, r22
    ea3a:	8c 93       	st	X, r24
    ea3c:	2f 5f       	subi	r18, 0xFF	; 255
    ea3e:	3f 4f       	sbci	r19, 0xFF	; 255
    ea40:	31 96       	adiw	r30, 0x01	; 1
    ea42:	6f 5f       	subi	r22, 0xFF	; 255
    ea44:	7f 4f       	sbci	r23, 0xFF	; 255
					done[i] = true;
					continue;
				}
			}
}
			for(uint8_t j=0;j<5;j++){
    ea46:	e4 17       	cp	r30, r20
    ea48:	f5 07       	cpc	r31, r21
    ea4a:	71 f7       	brne	.-36     	; 0xea28 <main+0x838>
				else
					vram[(VRAM_TILES_H*(SCREEN_TILES_V-10))+6+j+(i*12)] = RAM_TILES_COUNT+72;
			}
			
			//HACK
			scorename[5] = scorename[11] = 0;//I don't know why it's getting corrupted, A button only?? meh...
    ea4c:	10 92 0c 01 	sts	0x010C, r1
    ea50:	10 92 06 01 	sts	0x0106, r1

			if(!done[i] && (flashcounter&3) > 1){
    ea54:	92 e0       	ldi	r25, 0x02	; 2
    ea56:	29 16       	cp	r2, r25
    ea58:	31 04       	cpc	r3, r1
    ea5a:	bc f0       	brlt	.+46     	; 0xea8a <main+0x89a>
				if(scorename[(i*6)+scoreplace[i]] != ' ')
    ea5c:	d8 01       	movw	r26, r16
    ea5e:	8c 91       	ld	r24, X
    ea60:	90 e0       	ldi	r25, 0x00	; 0
    ea62:	fc 01       	movw	r30, r24
    ea64:	ef 5f       	subi	r30, 0xFF	; 255
    ea66:	fe 4f       	sbci	r31, 0xFE	; 254
    ea68:	ec 0d       	add	r30, r12
    ea6a:	fd 1d       	adc	r31, r13
    ea6c:	20 81       	ld	r18, Z
    ea6e:	fc 01       	movw	r30, r24
    ea70:	e0 5e       	subi	r30, 0xE0	; 224
    ea72:	fe 4f       	sbci	r31, 0xFE	; 254
    ea74:	20 32       	cpi	r18, 0x20	; 32
    ea76:	29 f0       	breq	.+10     	; 0xea82 <main+0x892>
					vram[  (VRAM_TILES_H*(SCREEN_TILES_V-10))+6+scoreplace[i]+(i*12)] = 72+RAM_TILES_COUNT; 
    ea78:	ea 0d       	add	r30, r10
    ea7a:	fb 1d       	adc	r31, r11
    ea7c:	b0 e7       	ldi	r27, 0x70	; 112
    ea7e:	b0 83       	st	Z, r27
    ea80:	04 c0       	rjmp	.+8      	; 0xea8a <main+0x89a>
				else
				vram[  (VRAM_TILES_H*(SCREEN_TILES_V-10))+6+scoreplace[i]+(i*12)] = 12+RAM_TILES_COUNT; 
    ea82:	ea 0d       	add	r30, r10
    ea84:	fb 1d       	adc	r31, r11
    ea86:	24 e3       	ldi	r18, 0x34	; 52
    ea88:	20 83       	st	Z, r18
    ea8a:	08 94       	sec
    ea8c:	41 1c       	adc	r4, r1
    ea8e:	51 1c       	adc	r5, r1
    ea90:	08 94       	sec
    ea92:	61 1c       	adc	r6, r1
    ea94:	71 1c       	adc	r7, r1
    ea96:	0f 5f       	subi	r16, 0xFF	; 255
    ea98:	1f 4f       	sbci	r17, 0xFF	; 255
    ea9a:	8c e0       	ldi	r24, 0x0C	; 12
    ea9c:	90 e0       	ldi	r25, 0x00	; 0
    ea9e:	a8 0e       	add	r10, r24
    eaa0:	b9 1e       	adc	r11, r25
    eaa2:	a6 e0       	ldi	r26, 0x06	; 6
    eaa4:	b0 e0       	ldi	r27, 0x00	; 0
    eaa6:	ca 0e       	add	r12, r26
    eaa8:	db 1e       	adc	r13, r27
    eaaa:	e2 e0       	ldi	r30, 0x02	; 2
    eaac:	f0 e0       	ldi	r31, 0x00	; 0
    eaae:	ee 0e       	add	r14, r30
    eab0:	ff 1e       	adc	r15, r31
    eab2:	8e 0e       	add	r8, r30
    eab4:	9f 1e       	adc	r9, r31
OldJoyVal[0] = OldJoyVal[1] = 255;//I don't think this needs to be here anymore, but I'm too lazy to test if thats always true!
	while(true){
		uint8_t flashcounter;
		WaitVsync(1);
		flashcounter++;
		for(uint8_t i=0;i<MAXPLAYERS;i++){
    eab6:	2b 96       	adiw	r28, 0x0b	; 11
    eab8:	2e ad       	ldd	r18, Y+62	; 0x3e
    eaba:	3f ad       	ldd	r19, Y+63	; 0x3f
    eabc:	2b 97       	sbiw	r28, 0x0b	; 11
    eabe:	42 16       	cp	r4, r18
    eac0:	53 06       	cpc	r5, r19
    eac2:	09 f0       	breq	.+2      	; 0xeac6 <main+0x8d6>
    eac4:	25 cf       	rjmp	.-438    	; 0xe910 <main+0x720>
				vram[  (VRAM_TILES_H*(SCREEN_TILES_V-10))+6+scoreplace[i]+(i*12)] = 12+RAM_TILES_COUNT; 
			}
		}//for(MAXPLAYERS)
//all name data is entered, put it in the correct spot in the buffer

		if(done[0] && done[1]){
    eac6:	89 81       	ldd	r24, Y+1	; 0x01
    eac8:	88 23       	and	r24, r24
    eaca:	09 f4       	brne	.+2      	; 0xeace <main+0x8de>
    eacc:	f7 ce       	rjmp	.-530    	; 0xe8bc <main+0x6cc>
    eace:	8a 81       	ldd	r24, Y+2	; 0x02
    ead0:	88 23       	and	r24, r24
    ead2:	09 f4       	brne	.+2      	; 0xead6 <main+0x8e6>
    ead4:	f3 ce       	rjmp	.-538    	; 0xe8bc <main+0x6cc>
			FadeOut(3,true);
    ead6:	83 e0       	ldi	r24, 0x03	; 3
    ead8:	61 e0       	ldi	r22, 0x01	; 1
    eada:	0e 94 3a 5c 	call	0xb874	; 0xb874 <FadeOut>
			RamifyAndSortEEProm();
    eade:	0e 94 35 64 	call	0xc86a	; 0xc86a <RamifyAndSortEEProm>
    eae2:	ee 24       	eor	r14, r14
    eae4:	00 e0       	ldi	r16, 0x00	; 0
    eae6:	10 e0       	ldi	r17, 0x00	; 0
			for(uint8_t j=0;j<5;j++){
				if(ram_tiles[(j*6)] < MAXPLAYERS){
					uint8_t pnameoff = ram_tiles[(j*6)]*6;//we stored 0 or 1 for player num in RamifyAndSortEEProm()
    eae8:	26 e0       	ldi	r18, 0x06	; 6
    eaea:	f2 2e       	mov	r15, r18

		if(done[0] && done[1]){
			FadeOut(3,true);
			RamifyAndSortEEProm();
			for(uint8_t j=0;j<5;j++){
				if(ram_tiles[(j*6)] < MAXPLAYERS){
    eaec:	28 96       	adiw	r28, 0x08	; 8
    eaee:	ae ad       	ldd	r26, Y+62	; 0x3e
    eaf0:	bf ad       	ldd	r27, Y+63	; 0x3f
    eaf2:	28 97       	sbiw	r28, 0x08	; 8
    eaf4:	8c 91       	ld	r24, X
    eaf6:	82 30       	cpi	r24, 0x02	; 2
    eaf8:	90 f4       	brcc	.+36     	; 0xeb1e <main+0x92e>
					uint8_t pnameoff = ram_tiles[(j*6)]*6;//we stored 0 or 1 for player num in RamifyAndSortEEProm()
    eafa:	8f 9d       	mul	r24, r15
    eafc:	80 2d       	mov	r24, r0
    eafe:	11 24       	eor	r1, r1
    eb00:	90 e0       	ldi	r25, 0x00	; 0
    eb02:	fc 01       	movw	r30, r24
    eb04:	ef 5f       	subi	r30, 0xFF	; 255
    eb06:	fe 4f       	sbci	r31, 0xFE	; 254
    eb08:	d8 01       	movw	r26, r16
    eb0a:	ac 57       	subi	r26, 0x7C	; 124
    eb0c:	bb 4f       	sbci	r27, 0xFB	; 251
					for(uint8_t k=0;k<5;k++)
    eb0e:	9c 01       	movw	r18, r24
    eb10:	2a 5f       	subi	r18, 0xFA	; 250
    eb12:	3e 4f       	sbci	r19, 0xFE	; 254
						ram_tiles[(j*6)+k] = scorename[pnameoff+k];
    eb14:	81 91       	ld	r24, Z+
    eb16:	8d 93       	st	X+, r24
			FadeOut(3,true);
			RamifyAndSortEEProm();
			for(uint8_t j=0;j<5;j++){
				if(ram_tiles[(j*6)] < MAXPLAYERS){
					uint8_t pnameoff = ram_tiles[(j*6)]*6;//we stored 0 or 1 for player num in RamifyAndSortEEProm()
					for(uint8_t k=0;k<5;k++)
    eb18:	e2 17       	cp	r30, r18
    eb1a:	f3 07       	cpc	r31, r19
    eb1c:	d9 f7       	brne	.-10     	; 0xeb14 <main+0x924>
						ram_tiles[(j*6)+k] = scorename[pnameoff+k];
				}
				EEPromScore(j,1,(uint8_t *)&ram_tiles[j*6],(uint8_t)ram_tiles[(j*6)+5]);
    eb1e:	8e 2d       	mov	r24, r14
    eb20:	61 e0       	ldi	r22, 0x01	; 1
    eb22:	28 96       	adiw	r28, 0x08	; 8
    eb24:	4e ad       	ldd	r20, Y+62	; 0x3e
    eb26:	5f ad       	ldd	r21, Y+63	; 0x3f
    eb28:	28 97       	sbiw	r28, 0x08	; 8
    eb2a:	fa 01       	movw	r30, r20
    eb2c:	25 81       	ldd	r18, Z+5	; 0x05
    eb2e:	0e 94 b9 63 	call	0xc772	; 0xc772 <EEPromScore>
//all name data is entered, put it in the correct spot in the buffer

		if(done[0] && done[1]){
			FadeOut(3,true);
			RamifyAndSortEEProm();
			for(uint8_t j=0;j<5;j++){
    eb32:	e3 94       	inc	r14
    eb34:	28 96       	adiw	r28, 0x08	; 8
    eb36:	2e ad       	ldd	r18, Y+62	; 0x3e
    eb38:	3f ad       	ldd	r19, Y+63	; 0x3f
    eb3a:	28 97       	sbiw	r28, 0x08	; 8
    eb3c:	2a 5f       	subi	r18, 0xFA	; 250
    eb3e:	3f 4f       	sbci	r19, 0xFF	; 255
    eb40:	28 96       	adiw	r28, 0x08	; 8
    eb42:	3f af       	std	Y+63, r19	; 0x3f
    eb44:	2e af       	std	Y+62, r18	; 0x3e
    eb46:	28 97       	sbiw	r28, 0x08	; 8
    eb48:	0a 5f       	subi	r16, 0xFA	; 250
    eb4a:	1f 4f       	sbci	r17, 0xFF	; 255
    eb4c:	35 e0       	ldi	r19, 0x05	; 5
    eb4e:	e3 16       	cp	r14, r19
    eb50:	69 f6       	brne	.-102    	; 0xeaec <main+0x8fc>
}


inline void HighScoreScreen(){

	InGui = true;
    eb52:	81 e0       	ldi	r24, 0x01	; 1
    eb54:	80 93 d2 0f 	sts	0x0FD2, r24
	FadeOut(3,true);
    eb58:	83 e0       	ldi	r24, 0x03	; 3
    eb5a:	61 e0       	ldi	r22, 0x01	; 1
    eb5c:	0e 94 3a 5c 	call	0xb874	; 0xb874 <FadeOut>
			SetTile(x++,y,c+201);
	}
}

void HideSprites(){
	spritecount = 0;
    eb60:	10 92 cb 0f 	sts	0x0FCB, r1
    eb64:	ec e2       	ldi	r30, 0x2C	; 44
    eb66:	f4 e0       	ldi	r31, 0x04	; 4
	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*TILE_WIDTH;
    eb68:	80 ef       	ldi	r24, 0xF0	; 240
    eb6a:	80 83       	st	Z, r24
    eb6c:	34 96       	adiw	r30, 0x04	; 4
	}
}

void HideSprites(){
	spritecount = 0;
	for(uint8_t i=0;i<MAX_SPRITES;i++)
    eb6e:	94 e0       	ldi	r25, 0x04	; 4
    eb70:	e4 38       	cpi	r30, 0x84	; 132
    eb72:	f9 07       	cpc	r31, r25
    eb74:	d1 f7       	brne	.-12     	; 0xeb6a <main+0x97a>
    eb76:	e4 e8       	ldi	r30, 0x84	; 132
    eb78:	f4 e0       	ldi	r31, 0x04	; 4
	HideSprites();
	for(uint8_t i=0;i<64;i++)
		ram_tiles[i] = 0xD1;//generate bg color
    eb7a:	81 ed       	ldi	r24, 0xD1	; 209
    eb7c:	81 93       	st	Z+, r24
inline void HighScoreScreen(){

	InGui = true;
	FadeOut(3,true);
	HideSprites();
	for(uint8_t i=0;i<64;i++)
    eb7e:	a4 e0       	ldi	r26, 0x04	; 4
    eb80:	e4 3c       	cpi	r30, 0xC4	; 196
    eb82:	fa 07       	cpc	r31, r26
    eb84:	d9 f7       	brne	.-10     	; 0xeb7c <main+0x98c>
		ram_tiles[i] = 0xD1;//generate bg color
	SetTileTable(HighScoreTiles);
    eb86:	89 ea       	ldi	r24, 0xA9	; 169
    eb88:	9d e7       	ldi	r25, 0x7D	; 125
    eb8a:	0e 94 5e 52 	call	0xa4bc	; 0xa4bc <SetTileTable>
    eb8e:	e0 e2       	ldi	r30, 0x20	; 32
    eb90:	f1 e0       	ldi	r31, 0x01	; 1
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = 0;//point to bg ramtile color
    eb92:	11 92       	st	Z+, r1
	FadeOut(3,true);
	HideSprites();
	for(uint8_t i=0;i<64;i++)
		ram_tiles[i] = 0xD1;//generate bg color
	SetTileTable(HighScoreTiles);
	for(uint16_t i=0;i<VRAM_SIZE;i++)
    eb94:	b4 e0       	ldi	r27, 0x04	; 4
    eb96:	ec 32       	cpi	r30, 0x2C	; 44
    eb98:	fb 07       	cpc	r31, r27
    eb9a:	d9 f7       	brne	.-10     	; 0xeb92 <main+0x9a2>
    eb9c:	80 e0       	ldi	r24, 0x00	; 0
    eb9e:	90 e0       	ldi	r25, 0x00	; 0
		vram[i] = 0;//point to bg ramtile color
	for(uint8_t y=0;y<6;y++)
		for(uint8_t x=0;x<20;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the top highlight color
    eba0:	38 e2       	ldi	r19, 0x28	; 40
    eba2:	0c c0       	rjmp	.+24     	; 0xebbc <main+0x9cc>
    eba4:	31 93       	st	Z+, r19
		ram_tiles[i] = 0xD1;//generate bg color
	SetTileTable(HighScoreTiles);
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = 0;//point to bg ramtile color
	for(uint8_t y=0;y<6;y++)
		for(uint8_t x=0;x<20;x++)
    eba6:	2f 5f       	subi	r18, 0xFF	; 255
    eba8:	24 31       	cpi	r18, 0x14	; 20
    ebaa:	e1 f7       	brne	.-8      	; 0xeba4 <main+0x9b4>
    ebac:	4e 96       	adiw	r24, 0x1e	; 30
	for(uint8_t i=0;i<64;i++)
		ram_tiles[i] = 0xD1;//generate bg color
	SetTileTable(HighScoreTiles);
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = 0;//point to bg ramtile color
	for(uint8_t y=0;y<6;y++)
    ebae:	84 3b       	cpi	r24, 0xB4	; 180
    ebb0:	91 05       	cpc	r25, r1
    ebb2:	21 f4       	brne	.+8      	; 0xebbc <main+0x9cc>
    ebb4:	88 ec       	ldi	r24, 0xC8	; 200
    ebb6:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t x=0;x<20;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the top highlight color
	for(uint8_t y=6;y<SCREEN_TILES_V;y++)
		for(uint8_t x=20;x<SCREEN_TILES_H;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the bottom highlight color
    ebb8:	38 e2       	ldi	r19, 0x28	; 40
    ebba:	0e c0       	rjmp	.+28     	; 0xebd8 <main+0x9e8>
	for(uint8_t i=0;i<64;i++)
		ram_tiles[i] = 0xD1;//generate bg color
	SetTileTable(HighScoreTiles);
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = 0;//point to bg ramtile color
	for(uint8_t y=0;y<6;y++)
    ebbc:	fc 01       	movw	r30, r24
    ebbe:	e0 5e       	subi	r30, 0xE0	; 224
    ebc0:	fe 4f       	sbci	r31, 0xFE	; 254
    ebc2:	20 e0       	ldi	r18, 0x00	; 0
    ebc4:	ef cf       	rjmp	.-34     	; 0xeba4 <main+0x9b4>
		for(uint8_t x=0;x<20;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the top highlight color
	for(uint8_t y=6;y<SCREEN_TILES_V;y++)
		for(uint8_t x=20;x<SCREEN_TILES_H;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the bottom highlight color
    ebc6:	31 93       	st	Z+, r19
		vram[i] = 0;//point to bg ramtile color
	for(uint8_t y=0;y<6;y++)
		for(uint8_t x=0;x<20;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the top highlight color
	for(uint8_t y=6;y<SCREEN_TILES_V;y++)
		for(uint8_t x=20;x<SCREEN_TILES_H;x++)
    ebc8:	2f 5f       	subi	r18, 0xFF	; 255
    ebca:	2e 31       	cpi	r18, 0x1E	; 30
    ebcc:	e1 f7       	brne	.-8      	; 0xebc6 <main+0x9d6>
    ebce:	4e 96       	adiw	r24, 0x1e	; 30
	for(uint16_t i=0;i<VRAM_SIZE;i++)
		vram[i] = 0;//point to bg ramtile color
	for(uint8_t y=0;y<6;y++)
		for(uint8_t x=0;x<20;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the top highlight color
	for(uint8_t y=6;y<SCREEN_TILES_V;y++)
    ebd0:	e3 e0       	ldi	r30, 0x03	; 3
    ebd2:	80 32       	cpi	r24, 0x20	; 32
    ebd4:	9e 07       	cpc	r25, r30
    ebd6:	29 f0       	breq	.+10     	; 0xebe2 <main+0x9f2>
    ebd8:	fc 01       	movw	r30, r24
    ebda:	e0 5e       	subi	r30, 0xE0	; 224
    ebdc:	fe 4f       	sbci	r31, 0xFE	; 254
    ebde:	24 e1       	ldi	r18, 0x14	; 20
    ebe0:	f2 cf       	rjmp	.-28     	; 0xebc6 <main+0x9d6>
		for(uint8_t x=20;x<SCREEN_TILES_H;x++)
			vram[(y*VRAM_TILES_H)+x] = RAM_TILES_COUNT;//make the bottom highlight color

	DrawMap2(24,21,HighScoreMap);//just draw the fly as a map, the rest is procedural
    ebe2:	88 e1       	ldi	r24, 0x18	; 24
    ebe4:	65 e1       	ldi	r22, 0x15	; 21
    ebe6:	49 ea       	ldi	r20, 0xA9	; 169
    ebe8:	54 e8       	ldi	r21, 0x84	; 132
    ebea:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <DrawMap2>
	rtl_RamifyFontEx(1,highscorecharmap,charlist,compfont,0xD1,0xFF);
    ebee:	81 e0       	ldi	r24, 0x01	; 1
    ebf0:	90 e0       	ldi	r25, 0x00	; 0
    ebf2:	61 e7       	ldi	r22, 0x71	; 113
    ebf4:	7b e9       	ldi	r23, 0x9B	; 155
    ebf6:	40 e8       	ldi	r20, 0x80	; 128
    ebf8:	5d e7       	ldi	r21, 0x7D	; 125
    ebfa:	20 e4       	ldi	r18, 0x40	; 64
    ebfc:	3c e7       	ldi	r19, 0x7C	; 124
    ebfe:	01 ed       	ldi	r16, 0xD1	; 209
    ec00:	ee 24       	eor	r14, r14
    ec02:	ea 94       	dec	r14
    ec04:	0e 94 7a 64 	call	0xc8f4	; 0xc8f4 <rtl_RamifyFontEx>
	rtl_Print(20,5,PSTR("TOP FROGS"));
    ec08:	84 e1       	ldi	r24, 0x14	; 20
    ec0a:	65 e0       	ldi	r22, 0x05	; 5
    ec0c:	41 e5       	ldi	r20, 0x51	; 81
    ec0e:	5c e9       	ldi	r21, 0x9C	; 156
    ec10:	0e 94 e1 5d 	call	0xbbc2	; 0xbbc2 <rtl_Print>
	FadeIn(3,true);
    ec14:	83 e0       	ldi	r24, 0x03	; 3
    ec16:	61 e0       	ldi	r22, 0x01	; 1
    ec18:	0e 94 22 5c 	call	0xb844	; 0xb844 <FadeIn>
    ec1c:	ee 24       	eor	r14, r14
    ec1e:	99 e0       	ldi	r25, 0x09	; 9
    ec20:	79 2e       	mov	r7, r25
    ec22:	8e e0       	ldi	r24, 0x0E	; 14
    ec24:	c8 2e       	mov	r12, r24
    ec26:	81 e0       	ldi	r24, 0x01	; 1
    ec28:	d8 2e       	mov	r13, r24
	
	uint8_t stringbuf[33];
	for(uint8_t i=0;i<5;i++){
		EEPromScore(i,0,(uint8_t *)&stringbuf,0);
    ec2a:	05 e2       	ldi	r16, 0x25	; 37
    ec2c:	80 2e       	mov	r8, r16
    ec2e:	91 2c       	mov	r9, r1
    ec30:	8c 0e       	add	r8, r28
    ec32:	9d 1e       	adc	r9, r29
		uint8_t t = stringbuf[5];
		stringbuf[6] = ' ';
    ec34:	10 e2       	ldi	r17, 0x20	; 32
    ec36:	61 2e       	mov	r6, r17
	rtl_Print(20,5,PSTR("TOP FROGS"));
	FadeIn(3,true);
	
	uint8_t stringbuf[33];
	for(uint8_t i=0;i<5;i++){
		EEPromScore(i,0,(uint8_t *)&stringbuf,0);
    ec38:	8e 2d       	mov	r24, r14
    ec3a:	60 e0       	ldi	r22, 0x00	; 0
    ec3c:	a4 01       	movw	r20, r8
    ec3e:	20 e0       	ldi	r18, 0x00	; 0
    ec40:	0e 94 b9 63 	call	0xc772	; 0xc772 <EEPromScore>
		uint8_t t = stringbuf[5];
    ec44:	2a a5       	ldd	r18, Y+42	; 0x2a
		stringbuf[6] = ' ';
    ec46:	6b a6       	std	Y+43, r6	; 0x2b
		stringbuf[7] = ' ';
    ec48:	6c a6       	std	Y+44, r6	; 0x2c
		if(t/100)
    ec4a:	24 36       	cpi	r18, 0x64	; 100
    ec4c:	30 f0       	brcs	.+12     	; 0xec5a <main+0xa6a>
			stringbuf[8] = (t/100)+'0';
    ec4e:	82 2f       	mov	r24, r18
    ec50:	64 e6       	ldi	r22, 0x64	; 100
    ec52:	95 d0       	rcall	.+298    	; 0xed7e <__udivmodqi4>
    ec54:	80 5d       	subi	r24, 0xD0	; 208
    ec56:	8d a7       	std	Y+45, r24	; 0x2d
    ec58:	01 c0       	rjmp	.+2      	; 0xec5c <main+0xa6c>
		else
			stringbuf[8] = ' ';
    ec5a:	6d a6       	std	Y+45, r6	; 0x2d
		stringbuf[9] = ((t%100)/10)+'0';
    ec5c:	82 2f       	mov	r24, r18
    ec5e:	64 e6       	ldi	r22, 0x64	; 100
    ec60:	8e d0       	rcall	.+284    	; 0xed7e <__udivmodqi4>
    ec62:	89 2f       	mov	r24, r25
    ec64:	6a e0       	ldi	r22, 0x0A	; 10
    ec66:	8b d0       	rcall	.+278    	; 0xed7e <__udivmodqi4>
    ec68:	80 5d       	subi	r24, 0xD0	; 208
    ec6a:	8e a7       	std	Y+46, r24	; 0x2e
		stringbuf[10] = (t%10)+'0';
    ec6c:	82 2f       	mov	r24, r18
    ec6e:	87 d0       	rcall	.+270    	; 0xed7e <__udivmodqi4>
    ec70:	90 5d       	subi	r25, 0xD0	; 208
    ec72:	9f a7       	std	Y+47, r25	; 0x2f
		stringbuf[11] = 0;
    ec74:	18 aa       	std	Y+48, r1	; 0x30
    ec76:	b0 e2       	ldi	r27, 0x20	; 32
    ec78:	ab 2e       	mov	r10, r27
    ec7a:	b1 e0       	ldi	r27, 0x01	; 1
    ec7c:	bb 2e       	mov	r11, r27
    ec7e:	ac 0c       	add	r10, r12
    ec80:	bd 1c       	adc	r11, r13
    ec82:	f5 01       	movw	r30, r10
    ec84:	8e 01       	movw	r16, r28
    ec86:	09 5f       	subi	r16, 0xF9	; 249
    ec88:	1f 4f       	sbci	r17, 0xFF	; 255

inline bool ScrollEntry(uint8_t x, uint8_t y, uint8_t *buffer){

	uint8_t restore[SCREEN_TILES_H];
	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
		restore[i] = vram[i+(y*VRAM_TILES_H)];
    ec8a:	81 91       	ld	r24, Z+
    ec8c:	d8 01       	movw	r26, r16
    ec8e:	8d 93       	st	X+, r24
    ec90:	8d 01       	movw	r16, r26


inline bool ScrollEntry(uint8_t x, uint8_t y, uint8_t *buffer){

	uint8_t restore[SCREEN_TILES_H];
	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
    ec92:	a8 15       	cp	r26, r8
    ec94:	b9 05       	cpc	r27, r9
    ec96:	c9 f7       	brne	.-14     	; 0xec8a <main+0xa9a>
    ec98:	a4 ef       	ldi	r26, 0xF4	; 244
    ec9a:	fa 2e       	mov	r15, r26
		restore[i] = vram[i+(y*VRAM_TILES_H)];

	for(uint8_t i=255-11;i!=x;i++){//pads updated in VsyncRoutine
		if((JoyVal[0] && !(OldJoyVal[0])) || (JoyVal[1] && !(OldJoyVal[1])))
    ec9c:	80 91 1c 10 	lds	r24, 0x101C
    eca0:	90 91 1d 10 	lds	r25, 0x101D
    eca4:	89 2b       	or	r24, r25
    eca6:	39 f0       	breq	.+14     	; 0xecb6 <main+0xac6>
    eca8:	80 91 17 10 	lds	r24, 0x1017
    ecac:	90 91 18 10 	lds	r25, 0x1018
    ecb0:	89 2b       	or	r24, r25
    ecb2:	09 f4       	brne	.+2      	; 0xecb6 <main+0xac6>
    ecb4:	53 c0       	rjmp	.+166    	; 0xed5c <main+0xb6c>
    ecb6:	80 91 1e 10 	lds	r24, 0x101E
    ecba:	90 91 1f 10 	lds	r25, 0x101F
    ecbe:	89 2b       	or	r24, r25
    ecc0:	39 f0       	breq	.+14     	; 0xecd0 <main+0xae0>
    ecc2:	80 91 19 10 	lds	r24, 0x1019
    ecc6:	90 91 1a 10 	lds	r25, 0x101A
    ecca:	89 2b       	or	r24, r25
    eccc:	09 f4       	brne	.+2      	; 0xecd0 <main+0xae0>
    ecce:	46 c0       	rjmp	.+140    	; 0xed5c <main+0xb6c>
    ecd0:	fe 01       	movw	r30, r28
    ecd2:	37 96       	adiw	r30, 0x07	; 7
    ecd4:	d5 01       	movw	r26, r10
			return true;
		for(uint8_t j=0;j<SCREEN_TILES_H;j++)
			vram[j+(y*VRAM_TILES_H)] = restore[j];
    ecd6:	81 91       	ld	r24, Z+
    ecd8:	8d 93       	st	X+, r24
		restore[i] = vram[i+(y*VRAM_TILES_H)];

	for(uint8_t i=255-11;i!=x;i++){//pads updated in VsyncRoutine
		if((JoyVal[0] && !(OldJoyVal[0])) || (JoyVal[1] && !(OldJoyVal[1])))
			return true;
		for(uint8_t j=0;j<SCREEN_TILES_H;j++)
    ecda:	e0 17       	cp	r30, r16
    ecdc:	f1 07       	cpc	r31, r17
    ecde:	d9 f7       	brne	.-10     	; 0xecd6 <main+0xae6>
			vram[j+(y*VRAM_TILES_H)] = restore[j];
		rtl_PrintRam(i,y,(char *)buffer);
    ece0:	8f 2d       	mov	r24, r15
    ece2:	67 2d       	mov	r22, r7
    ece4:	a4 01       	movw	r20, r8
    ece6:	0e 94 ee 5d 	call	0xbbdc	; 0xbbdc <rtl_PrintRam>
		WaitVsync(1);
    ecea:	81 e0       	ldi	r24, 0x01	; 1
    ecec:	90 e0       	ldi	r25, 0x00	; 0
    ecee:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>

	uint8_t restore[SCREEN_TILES_H];
	for(uint8_t i=0;i<SCREEN_TILES_H;i++)
		restore[i] = vram[i+(y*VRAM_TILES_H)];

	for(uint8_t i=255-11;i!=x;i++){//pads updated in VsyncRoutine
    ecf2:	f3 94       	inc	r15
    ecf4:	b9 e0       	ldi	r27, 0x09	; 9
    ecf6:	fb 16       	cp	r15, r27
    ecf8:	89 f6       	brne	.-94     	; 0xec9c <main+0xaac>
    ecfa:	35 c0       	rjmp	.+106    	; 0xed66 <main+0xb76>
    ecfc:	00 e0       	ldi	r16, 0x00	; 0
    ecfe:	10 e0       	ldi	r17, 0x00	; 0
			goto HIGHSCOREDONE;
	}

	uint16_t Delay;
	while(1){
		prng();
    ed00:	0e 94 fb 5d 	call	0xbbf6	; 0xbbf6 <prng>
		WaitVsync(1);//pads updated in VsyncRoutine
    ed04:	81 e0       	ldi	r24, 0x01	; 1
    ed06:	90 e0       	ldi	r25, 0x00	; 0
    ed08:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <WaitVsync>
	//	for(uint8_t i=0;i<2;i++){
			if((JoyVal[0] && !(OldJoyVal[0])) || (JoyVal[1] && !(OldJoyVal[1]))){
    ed0c:	80 91 1c 10 	lds	r24, 0x101C
    ed10:	90 91 1d 10 	lds	r25, 0x101D
    ed14:	89 2b       	or	r24, r25
    ed16:	31 f0       	breq	.+12     	; 0xed24 <main+0xb34>
    ed18:	80 91 17 10 	lds	r24, 0x1017
    ed1c:	90 91 18 10 	lds	r25, 0x1018
    ed20:	89 2b       	or	r24, r25
    ed22:	61 f0       	breq	.+24     	; 0xed3c <main+0xb4c>
    ed24:	80 91 1e 10 	lds	r24, 0x101E
    ed28:	90 91 1f 10 	lds	r25, 0x101F
    ed2c:	89 2b       	or	r24, r25
    ed2e:	81 f0       	breq	.+32     	; 0xed50 <main+0xb60>
    ed30:	80 91 19 10 	lds	r24, 0x1019
    ed34:	90 91 1a 10 	lds	r25, 0x101A
    ed38:	89 2b       	or	r24, r25
    ed3a:	51 f4       	brne	.+20     	; 0xed50 <main+0xb60>

//inline int8_t	absi8	(int8_t val)	{return (val < 0)?(-val):(val);}
//inline int16_t	absi16	(int16_t val)	{return (val < 0)?(-val):(val);}
	
void FFTriggerFx(uint8_t patch){
	if(SoundsOn)
    ed3c:	80 91 1b 10 	lds	r24, 0x101B
    ed40:	88 23       	and	r24, r24
    ed42:	61 f0       	breq	.+24     	; 0xed5c <main+0xb6c>
		TriggerFx(patch,255,1);
    ed44:	84 e0       	ldi	r24, 0x04	; 4
    ed46:	6f ef       	ldi	r22, 0xFF	; 255
    ed48:	41 e0       	ldi	r20, 0x01	; 1
    ed4a:	0e 94 c0 57 	call	0xaf80	; 0xaf80 <TriggerFx>
    ed4e:	06 c0       	rjmp	.+12     	; 0xed5c <main+0xb6c>
				goto HIGHSCOREDONE;
			}
		//	if(JoyVal[i] && !OldJoyVal[i])
		//		Delay = 10*60;
	//	}
		if(++Delay > 6*60)
    ed50:	0f 5f       	subi	r16, 0xFF	; 255
    ed52:	1f 4f       	sbci	r17, 0xFF	; 255
    ed54:	e1 e0       	ldi	r30, 0x01	; 1
    ed56:	09 36       	cpi	r16, 0x69	; 105
    ed58:	1e 07       	cpc	r17, r30
    ed5a:	91 f6       	brne	.-92     	; 0xed00 <main+0xb10>
			break;
	}
HIGHSCOREDONE:
		FadeOut(3,true);
    ed5c:	83 e0       	ldi	r24, 0x03	; 3
    ed5e:	61 e0       	ldi	r22, 0x01	; 1
    ed60:	0e 94 3a 5c 	call	0xb874	; 0xb874 <FadeOut>
    ed64:	20 cb       	rjmp	.-2496   	; 0xe3a6 <main+0x1b6>
	rtl_RamifyFontEx(1,highscorecharmap,charlist,compfont,0xD1,0xFF);
	rtl_Print(20,5,PSTR("TOP FROGS"));
	FadeIn(3,true);
	
	uint8_t stringbuf[33];
	for(uint8_t i=0;i<5;i++){
    ed66:	e3 94       	inc	r14
    ed68:	f3 e0       	ldi	r31, 0x03	; 3
    ed6a:	7f 0e       	add	r7, r31
    ed6c:	2a e5       	ldi	r18, 0x5A	; 90
    ed6e:	30 e0       	ldi	r19, 0x00	; 0
    ed70:	c2 0e       	add	r12, r18
    ed72:	d3 1e       	adc	r13, r19
    ed74:	35 e0       	ldi	r19, 0x05	; 5
    ed76:	e3 16       	cp	r14, r19
    ed78:	09 f0       	breq	.+2      	; 0xed7c <main+0xb8c>
    ed7a:	5e cf       	rjmp	.-324    	; 0xec38 <main+0xa48>
    ed7c:	bf cf       	rjmp	.-130    	; 0xecfc <main+0xb0c>

0000ed7e <__udivmodqi4>:
    ed7e:	99 1b       	sub	r25, r25
    ed80:	79 e0       	ldi	r23, 0x09	; 9
    ed82:	04 c0       	rjmp	.+8      	; 0xed8c <__udivmodqi4_ep>

0000ed84 <__udivmodqi4_loop>:
    ed84:	99 1f       	adc	r25, r25
    ed86:	96 17       	cp	r25, r22
    ed88:	08 f0       	brcs	.+2      	; 0xed8c <__udivmodqi4_ep>
    ed8a:	96 1b       	sub	r25, r22

0000ed8c <__udivmodqi4_ep>:
    ed8c:	88 1f       	adc	r24, r24
    ed8e:	7a 95       	dec	r23
    ed90:	c9 f7       	brne	.-14     	; 0xed84 <__udivmodqi4_loop>
    ed92:	80 95       	com	r24
    ed94:	08 95       	ret

0000ed96 <__udivmodhi4>:
    ed96:	aa 1b       	sub	r26, r26
    ed98:	bb 1b       	sub	r27, r27
    ed9a:	51 e1       	ldi	r21, 0x11	; 17
    ed9c:	07 c0       	rjmp	.+14     	; 0xedac <__udivmodhi4_ep>

0000ed9e <__udivmodhi4_loop>:
    ed9e:	aa 1f       	adc	r26, r26
    eda0:	bb 1f       	adc	r27, r27
    eda2:	a6 17       	cp	r26, r22
    eda4:	b7 07       	cpc	r27, r23
    eda6:	10 f0       	brcs	.+4      	; 0xedac <__udivmodhi4_ep>
    eda8:	a6 1b       	sub	r26, r22
    edaa:	b7 0b       	sbc	r27, r23

0000edac <__udivmodhi4_ep>:
    edac:	88 1f       	adc	r24, r24
    edae:	99 1f       	adc	r25, r25
    edb0:	5a 95       	dec	r21
    edb2:	a9 f7       	brne	.-22     	; 0xed9e <__udivmodhi4_loop>
    edb4:	80 95       	com	r24
    edb6:	90 95       	com	r25
    edb8:	bc 01       	movw	r22, r24
    edba:	cd 01       	movw	r24, r26
    edbc:	08 95       	ret

0000edbe <__divmodhi4>:
    edbe:	97 fb       	bst	r25, 7
    edc0:	09 2e       	mov	r0, r25
    edc2:	07 26       	eor	r0, r23
    edc4:	0a d0       	rcall	.+20     	; 0xedda <__divmodhi4_neg1>
    edc6:	77 fd       	sbrc	r23, 7
    edc8:	04 d0       	rcall	.+8      	; 0xedd2 <__divmodhi4_neg2>
    edca:	e5 df       	rcall	.-54     	; 0xed96 <__udivmodhi4>
    edcc:	06 d0       	rcall	.+12     	; 0xedda <__divmodhi4_neg1>
    edce:	00 20       	and	r0, r0
    edd0:	1a f4       	brpl	.+6      	; 0xedd8 <__divmodhi4_exit>

0000edd2 <__divmodhi4_neg2>:
    edd2:	70 95       	com	r23
    edd4:	61 95       	neg	r22
    edd6:	7f 4f       	sbci	r23, 0xFF	; 255

0000edd8 <__divmodhi4_exit>:
    edd8:	08 95       	ret

0000edda <__divmodhi4_neg1>:
    edda:	f6 f7       	brtc	.-4      	; 0xedd8 <__divmodhi4_exit>
    eddc:	90 95       	com	r25
    edde:	81 95       	neg	r24
    ede0:	9f 4f       	sbci	r25, 0xFF	; 255
    ede2:	08 95       	ret

0000ede4 <__prologue_saves__>:
    ede4:	2f 92       	push	r2
    ede6:	3f 92       	push	r3
    ede8:	4f 92       	push	r4
    edea:	5f 92       	push	r5
    edec:	6f 92       	push	r6
    edee:	7f 92       	push	r7
    edf0:	8f 92       	push	r8
    edf2:	9f 92       	push	r9
    edf4:	af 92       	push	r10
    edf6:	bf 92       	push	r11
    edf8:	cf 92       	push	r12
    edfa:	df 92       	push	r13
    edfc:	ef 92       	push	r14
    edfe:	ff 92       	push	r15
    ee00:	0f 93       	push	r16
    ee02:	1f 93       	push	r17
    ee04:	cf 93       	push	r28
    ee06:	df 93       	push	r29
    ee08:	cd b7       	in	r28, 0x3d	; 61
    ee0a:	de b7       	in	r29, 0x3e	; 62
    ee0c:	ca 1b       	sub	r28, r26
    ee0e:	db 0b       	sbc	r29, r27
    ee10:	0f b6       	in	r0, 0x3f	; 63
    ee12:	f8 94       	cli
    ee14:	de bf       	out	0x3e, r29	; 62
    ee16:	0f be       	out	0x3f, r0	; 63
    ee18:	cd bf       	out	0x3d, r28	; 61
    ee1a:	09 94       	ijmp

0000ee1c <__epilogue_restores__>:
    ee1c:	2a 88       	ldd	r2, Y+18	; 0x12
    ee1e:	39 88       	ldd	r3, Y+17	; 0x11
    ee20:	48 88       	ldd	r4, Y+16	; 0x10
    ee22:	5f 84       	ldd	r5, Y+15	; 0x0f
    ee24:	6e 84       	ldd	r6, Y+14	; 0x0e
    ee26:	7d 84       	ldd	r7, Y+13	; 0x0d
    ee28:	8c 84       	ldd	r8, Y+12	; 0x0c
    ee2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    ee2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    ee2e:	b9 84       	ldd	r11, Y+9	; 0x09
    ee30:	c8 84       	ldd	r12, Y+8	; 0x08
    ee32:	df 80       	ldd	r13, Y+7	; 0x07
    ee34:	ee 80       	ldd	r14, Y+6	; 0x06
    ee36:	fd 80       	ldd	r15, Y+5	; 0x05
    ee38:	0c 81       	ldd	r16, Y+4	; 0x04
    ee3a:	1b 81       	ldd	r17, Y+3	; 0x03
    ee3c:	aa 81       	ldd	r26, Y+2	; 0x02
    ee3e:	b9 81       	ldd	r27, Y+1	; 0x01
    ee40:	ce 0f       	add	r28, r30
    ee42:	d1 1d       	adc	r29, r1
    ee44:	0f b6       	in	r0, 0x3f	; 63
    ee46:	f8 94       	cli
    ee48:	de bf       	out	0x3e, r29	; 62
    ee4a:	0f be       	out	0x3f, r0	; 63
    ee4c:	cd bf       	out	0x3d, r28	; 61
    ee4e:	ed 01       	movw	r28, r26
    ee50:	08 95       	ret

0000ee52 <_exit>:
    ee52:	f8 94       	cli

0000ee54 <__stop_program>:
    ee54:	ff cf       	rjmp	.-2      	; 0xee54 <__stop_program>
