
uzesweeper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000b4ac  0000b5ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b4ac  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000c98  00800140  00800140  0000b5e0  2**5
                  ALLOC
  3 .debug_aranges 000004d8  00000000  00000000  0000b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000c8b  00000000  00000000  0000baa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000458b  00000000  00000000  0000c733  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af8  00000000  00000000  00010cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000037ca  00000000  00000000  000117b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006f0  00000000  00000000  00014f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f28  00000000  00000000  00015670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a5a  00000000  00000000  00016598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000640  00000000  00000000  00018ff8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}

/**
 * Performs a software reset
 */
void SoftReset(void){        
       0:	0c 94 4c 3a 	jmp	0x7498	; 0x7498 <__ctors_end>
	lastStatus=0;
	songSpeed=0;
	playSong=true;
}

void RestartSong(){	
       4:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}


	void SetSpriteVisibility(bool visible){
       8:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
		DrawCursor();
		WaitVsync(1);
	}
}

void HelpMenu(){
       c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      10:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      14:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      18:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      1c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      20:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      24:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      28:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      2c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      30:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      34:	0c 94 86 3c 	jmp	0x790c	; 0x790c <__vector_13>
      38:	0c 94 c6 3c 	jmp	0x798c	; 0x798c <__vector_14>
      3c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      40:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      44:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      48:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      4c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      50:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      54:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      58:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      5c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      60:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      64:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      68:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>
      6c:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <__bad_interrupt>

00000070 <eeprom_format_table>:
      70:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

00000090 <io_table>:
      90:	81 00 45 00 27 ff 24 ff 2a 90 2b 1c 21 0c 22 fb     ..E.'.$.*.+.!.".
      a0:	85 00 84 00 89 03 88 8d 81 09 6f 02 44 42 47 00     ..........o.DBG.
      b0:	45 01 b0 83 b3 00 b1 01 25 11 8a 4f 8b 03           E.......%..O..

000000be <patchCommands>:
      be:	b4 3f b7 3f fc 43 ad 40 a5 40 c0 3f c5 3f ca 3f     .?.?.C.@.@.?.?.?
      ce:	93 40 cd 3f d0 3f d3 3f 17 40                       .@.?.?.?.@

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <patch00>:
      e4:	00 02 01 00 07 14 00 00 16 03 00 10 01 00 00 00     ................
      f4:	00 e7 03 ff                                         ....

000000f8 <patch01>:
      f8:	00 02 00 00 07 14 00 00 02 07 00 01 01 00 00 00     ................
     108:	00 f6 09 ff                                         ....

0000010c <patch02>:
     10c:	00 02 04 00 07 14 00 00 0b 04 00 07 01 00 00 03     ................
     11c:	00 fc 02 00 f9 06 ff                                .......

00000123 <patch03>:
     123:	00 01 08 00 07 2c 00 00 e2 01 00 f1 01 00 f8 02     .....,..........
     133:	05 00 00 ff                                         ....

00000137 <patch04>:
     137:	00 01 05 00 07 21 00 00 e2 01 00 f1 01 00 f8 01     .....!..........
     147:	05 00 00 ff                                         ....

0000014b <patch05>:
     14b:	00 02 01 00 07 10 00 00 08 01 00 20 03 00 10 01     ........... ....
     15b:	00 00 00 06 00 00 00 e7 03 ff                       ..........

00000165 <patch06>:
     165:	00 02 04 00 07 16 00 00 10 01 00 12 01 00 14 01     ................
     175:	00 00 05 00 ff 02 00 fe 02 00 fd 02 00 fc 06 ff     ................
	...

00000186 <patch07>:
     186:	06 ff                                               ..

00000188 <patch08>:
     188:	00 01 02 00 07 12 00 00 f8 01 00 fb 01 05 00 00     ................
     198:	ff                                                  .

00000199 <patch09>:
     199:	00 01 06 00 07 14 00 00 f8 01 00 fb 01 05 00 00     ................
     1a9:	ff                                                  .

000001aa <patch10>:
     1aa:	00 ff                                               ..

000001ac <patch11>:
     1ac:	00 ff                                               ..

000001ae <patch12>:
     1ae:	00 ff                                               ..

000001b0 <patch13>:
     1b0:	00 ff                                               ..

000001b2 <patch14>:
     1b2:	00 ff                                               ..

000001b4 <patch15>:
     1b4:	00 02 01 00 09 c8 00 0a 37 00 07 14 00 00 12 01     ........7.......
     1c4:	00 1a 02 00 10 01 00 00 00 06 00 00 00 e7 03 ff     ................

000001d4 <patch16>:
     1d4:	00 02 04 00 07 14 00 00 0a 02 00 07 01 00 04 01     ................
     1e4:	00 00 01 00 ff 01 00 fe 01 00 fc 02 00 f9 04 ff     ................

000001f4 <patch17>:
     1f4:	00 02 01 00 07 14 00 00 16 03 00 10 01 00 00 00     ................
     204:	00 e7 03 ff                                         ....

00000208 <patch18>:
     208:	00 01 0a 00 07 12 00 00 f8 01 00 fb 01 05 00 00     ................
     218:	ff                                                  .

00000219 <patch19>:
     219:	00 01 06 00 07 12 00 00 f8 01 00 fb 01 05 00 00     ................
     229:	ff                                                  .

0000022a <patch20>:
     22a:	00 01 02 00 07 12 00 00 f8 01 00 fb 01 05 00 00     ................
     23a:	ff                                                  .

0000023b <patch21>:
     23b:	00 ff                                               ..

0000023d <patch22>:
     23d:	00 ff                                               ..

0000023f <patch23>:
     23f:	00 09 b4 00 0a 3c 00 02 01 00 07 14 00 00 0b 03     .....<..........
     24f:	00 11 01 00 16 01 00 00 05 00 ea 03 ff              .............

0000025c <patch24>:
     25c:	00 02 04 00 07 0c 00 00 10 04 00 00 03 00 f5 09     ................
     26c:	ff                                                  .

0000026d <patch25>:
     26d:	00 02 04 00 07 02 01 00 04 01 00 06 01 00 08 01     ................
     27d:	00 0a 01 00 0c 04 00 00 00 06 00 00 00 f4 01 00     ................
     28d:	f6 01 00 f8 01 00 fa 01 ff                          .........

00000296 <patch26>:
     296:	00 01 01 00 07 21 00 00 f1 01 00 f8 02 05 00 00     .....!..........
     2a6:	ff                                                  .

000002a7 <patch27>:
     2a7:	00 01 05 00 07 21 00 00 f1 01 00 f8 02 05 00 00     .....!..........
     2b7:	ff                                                  .

000002b8 <patch28>:
     2b8:	00 01 09 00 07 21 00 00 f1 01 00 f8 02 05 00 00     .....!..........
     2c8:	ff                                                  .

000002c9 <patch29>:
     2c9:	00 ff                                               ..

000002cb <patch30>:
     2cb:	00 02 01 00 07 14 00 00 21 04 00 00 00 06 00 00     ........!.......
     2db:	09 8c 00 0a 27 00 00 e7 03 ff                       ....'.....

000002e5 <patch31>:
     2e5:	00 02 01 00 07 1b 01 00 16 03 00 00 00 06 00 00     ................
     2f5:	00 e7 03 ff                                         ....

000002f9 <patch32>:
     2f9:	00 02 01 00 07 14 00 00 16 04 00 00 00 06 00 00     ................
     309:	00 e7 03 ff                                         ....

0000030d <patch33>:
     30d:	00 01 01 00 07 21 00 00 f1 01 00 f8 02 05 00 00     .....!..........
     31d:	ff                                                  .

0000031e <patch34>:
     31e:	00 01 05 00 07 21 00 00 f1 01 00 f8 02 05 00 00     .....!..........
     32e:	ff                                                  .

0000032f <patch35>:
     32f:	00 ff                                               ..

00000331 <patch36>:
     331:	00 ff                                               ..

00000333 <patch37>:
     333:	00 ff                                               ..

00000335 <patch38>:
     335:	00 ff                                               ..

00000337 <patch39>:
     337:	00 ff                                               ..

00000339 <patch40>:
     339:	00 07 7f 00 02 02 00 00 ff 00 08 43 01 04 04 01     ...........C....
     349:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     359:	04 01 04 04 01 04 04 01 04 04 02 07 64 00 08 3c     ............d..<
     369:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     379:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 02 07     ................
     389:	46 00 08 3c 01 04 04 01 04 04 01 04 04 01 04 04     F..<............
     399:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     3a9:	04 04 02 07 28 00 08 3c 01 04 04 01 04 04 01 04     ....(..<........
     3b9:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     3c9:	01 04 04 01 04 04 02 07 14 00 08 3c 01 04 04 01     ...........<....
     3d9:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     3e9:	04 01 04 04 01 04 04 01 04 04 01 05 00 00 ff        ...............

000003f8 <patch41>:
     3f8:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
     408:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     418:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
     428:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     438:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
     448:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     458:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
     468:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     478:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
     488:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     498:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
     4a8:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     4b8:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     4c8:	ff                                                  .

000004c9 <patch42>:
     4c9:	00 07 00 04 02 01 00 07 ff 00 09 90 00 0a 3c 00     ..............<.
     4d9:	00 fb 01 08 50 05 03 05 06 03 05 07 03 05 08 03     ....P...........
     4e9:	05 09 03 05 0a 03 05 0b 05 00 00 ff                 ............

000004f5 <patches>:
     4f5:	00 00 00 e4 00 00 00 00 00 00 00 00 f8 00 00 00     ................
     505:	00 00 00 00 00 0c 01 00 00 00 00 01 00 00 23 01     ..............#.
     515:	00 00 00 00 01 00 00 37 01 00 00 00 00 00 00 00     .......7........
     525:	4b 01 00 00 00 00 00 00 00 65 01 00 00 00 00 00     K........e......
     535:	00 00 86 01 00 00 00 00 01 00 00 88 01 00 00 00     ................
     545:	00 01 00 00 99 01 00 00 00 00 01 00 00 aa 01 00     ................
     555:	00 00 00 01 00 00 ac 01 00 00 00 00 01 00 00 ae     ................
     565:	01 00 00 00 00 01 00 00 b0 01 00 00 00 00 01 00     ................
     575:	00 b2 01 00 00 00 00 00 00 00 b4 01 00 00 00 00     ................
     585:	00 00 00 d4 01 00 00 00 00 00 00 00 f4 01 00 00     ................
     595:	00 00 01 00 00 08 02 00 00 00 00 01 00 00 19 02     ................
     5a5:	00 00 00 00 01 00 00 2a 02 00 00 00 00 01 00 00     .......*........
     5b5:	3b 02 00 00 00 00 01 00 00 3d 02 00 00 00 00 00     ;........=......
     5c5:	00 00 3f 02 00 00 00 00 00 00 00 5c 02 00 00 00     ..?........\....
     5d5:	00 00 00 00 6d 02 00 00 00 00 01 00 00 96 02 00     ....m...........
     5e5:	00 00 00 01 00 00 a7 02 00 00 00 00 01 00 00 b8     ................
     5f5:	02 00 00 00 00 01 00 00 c9 02 00 00 00 00 00 00     ................
     605:	00 cb 02 00 00 00 00 00 00 00 e5 02 00 00 00 00     ................
     615:	00 00 00 f9 02 00 00 00 00 01 00 00 0d 03 00 00     ................
     625:	00 00 01 00 00 1e 03 00 00 00 00 01 00 00 2f 03     ............../.
     635:	00 00 00 00 01 00 00 31 03 00 00 00 00 01 00 00     .......1........
     645:	33 03 00 00 00 00 01 00 00 35 03 00 00 00 00 01     3........5......
     655:	00 00 37 03 00 00 00 00 00 00 00 39 03 00 00 00     ..7........9....
     665:	00 00 00 00 f8 03 00 00 00 00 00 00 00 c9 04 00     ................
     675:	00 00 00                                            ...

00000678 <GameSprites>:
     678:	a4 a4 a4 a4 a4 a4 a4 a4 a4 ff ff ff ff ff ff ff     ................
     688:	a4 ff ff ff ff ff ff ff a4 ff ff f6 f6 f6 f6 f6     ................
     698:	a4 ff ff f6 f6 f6 f6 f6 a4 ff ff f6 f6 f6 f6 f6     ................
     6a8:	a4 ff ff f6 f6 f6 f6 00 a4 ff ff f6 f6 f6 00 3f     ...............?
     6b8:	a4 a4 a4 a4 a4 a4 a4 a4 ff ff ff ff ff ff ff ff     ................
     6c8:	ff ff ff ff ff ff ff ff f6 f6 f6 f6 f6 f6 f6 f6     ................
     6d8:	f6 f6 00 00 00 00 00 f6 00 00 3f 3f 3f 3f 3f 00     ..........?????.
     6e8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     6f8:	a4 a4 a4 a4 a4 a4 a4 f6 ff ff ff ff ff ff f6 a4     ................
     708:	ff ff ff ff ff f6 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
     718:	f6 f6 f6 f6 f6 a4 a4 a4 00 f6 f6 f6 f6 a4 a4 a4     ................
     728:	3f 00 f6 f6 f6 a4 a4 a4 3f 3f 00 f6 f6 a4 a4 a4     ?.......??......
     738:	a4 ff ff f6 f6 00 3f 3f a4 ff ff f6 f6 00 3f 3f     ......??......??
     748:	a4 ff ff f6 00 3f 3f 3f a4 ff ff f6 00 3f 3f 3f     .....???.....???
     758:	a4 ff ff f6 00 3f 3f 3f a4 ff ff f6 00 3f 3f 3f     .....???.....???
     768:	a4 ff ff f6 00 3f 3f 3f a4 ff ff f6 f6 00 3f 3f     .....???......??
     778:	3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 00 00     ?????????..???..
     788:	3f 00 00 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 3f 3f     ?..???..????????
     798:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     7a8:	00 3f 3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 00     .????????.?????.
     7b8:	3f 3f 3f 00 f6 a4 a4 a4 3f 3f 3f 00 f6 a4 a4 a4     ???.....???.....
     7c8:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     ????....????....
     7d8:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     ????....????....
     7e8:	00 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 00 f6 a4 a4 a4     .???....???.....
     7f8:	a4 ff ff f6 f6 00 3f 3f a4 ff ff f6 f6 f6 00 3f     ......??.......?
     808:	a4 ff ff f6 f6 f6 f6 00 a4 ff ff f6 f6 f6 f6 f6     ................
     818:	a4 ff ff f6 f6 f6 f6 f6 a4 ff f6 a4 a4 a4 a4 a4     ................
     828:	a4 f6 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 a4 a4     ................
     838:	3f 3f 00 00 00 00 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     ??.....?????????
     848:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00     ????????..?????.
     858:	f6 f6 00 00 00 00 00 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     868:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     878:	3f 3f 3f 00 f6 a4 a4 a4 3f 3f 00 f6 f6 a4 a4 a4     ???.....??......
     888:	3f 00 f6 f6 f6 a4 a4 a4 00 f6 f6 f6 f6 a4 a4 a4     ?...............
     898:	f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     8a8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     8b8:	24 00 24 3f 3f 3f 24 00 00 00 00 3f 3f 3f 00 00     $.$???$....???..
     8c8:	24 00 24 3f 3f 3f 24 00 3f 3f 3f 3f 3f 3f 3f 3f     $.$???$.????????
     8d8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 3f 3f     ???????????...??
     8e8:	3f 3f 24 00 3f 00 24 3f 3f 3f 00 3f 3f 3f 00 3f     ??$.?.$???.???.?
     8f8:	24 3f 3f 00 f6 a4 a4 a4 00 3f 3f 00 f6 a4 a4 a4     $??......??.....
     908:	24 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     $???....????....
     918:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     ????....????....
     928:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 00 f6 a4 a4 a4     ????....???.....
     938:	3f 3f 24 00 3f 00 24 3f 3f 3f 3f 00 00 00 3f 3f     ??$.?.$????...??
     948:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00     ????????..?????.
     958:	f6 f6 00 00 00 00 00 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     968:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     978:	00 3f 00 3f 3f 3f 00 3f 3f 00 3f 3f 3f 3f 3f 00     .?.???.??.?????.
     988:	00 3f 00 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 3f 3f 3f     .?.???.?????????
     998:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     9a8:	3f 3f 00 00 00 00 00 3f 3f 00 3f 3f 3f 3f 3f 00     ??.....??.?????.
     9b8:	00 3f 3f 00 f6 a4 a4 a4 3f 3f 3f 00 f6 a4 a4 a4     .??.....???.....
     9c8:	00 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     .???....????....
     9d8:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     ????....????....
     9e8:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 00 f6 a4 a4 a4     ????....???.....
     9f8:	00 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     .???????????????
     a08:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00     ????????..?????.
     a18:	f6 f6 00 00 00 00 00 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     a28:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     a38:	00 3f 3f 00 f6 a4 a4 a4 3f 3f 00 f6 f6 a4 a4 a4     .??.....??......
     a48:	3f 00 f6 f6 f6 a4 a4 a4 00 f6 f6 f6 f6 a4 a4 a4     ?...............
     a58:	f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     a68:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     a78:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     a88:	a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6     ................
     a98:	a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6     ................
     aa8:	a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6     ................
     ab8:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     ac8:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     ad8:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 00 00 00 00 00     ................
     ae8:	f6 00 00 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 3f     ...?????.???????
     af8:	a4 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     b08:	f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
     b18:	f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
     b28:	00 00 f6 f6 f6 f6 f6 a4 3f 3f 00 f6 f6 f6 f6 a4     ........??......
     b38:	a4 a4 f6 f6 f6 f6 f6 00 a4 a4 f6 f6 f6 f6 00 3f     ...............?
     b48:	a4 a4 f6 f6 f6 f6 00 3f a4 a4 f6 f6 f6 00 3f 3f     .......?......??
     b58:	a4 a4 f6 f6 f6 00 3f 3f a4 a4 f6 f6 f6 00 3f 3f     ......??......??
     b68:	a4 a4 f6 f6 f6 00 3f 3f a4 a4 f6 f6 f6 00 3f 3f     ......??......??
     b78:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     b88:	3f 3f 00 00 3f 3f 3f 00 3f 3f 00 00 3f 3f 3f 00     ??..???.??..???.
     b98:	3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f 3f     ????????????????
     ba8:	3f 3f 3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f     ?????????.??????
     bb8:	3f 3f 3f 00 f6 f6 f6 a4 3f 3f 3f 3f 00 f6 f6 a4     ???.....????....
     bc8:	00 3f 3f 3f 00 f6 f6 a4 00 3f 3f 3f 3f 00 f6 a4     .???.....????...
     bd8:	3f 3f 3f 3f 3f 00 f6 a4 3f 3f 3f 3f 3f 00 f6 a4     ?????...?????...
     be8:	3f 3f 3f 3f 3f 00 f6 a4 3f 00 3f 3f 3f 00 f6 a4     ?????...?.???...
     bf8:	a4 a4 f6 f6 f6 f6 00 3f a4 a4 f6 f6 f6 f6 00 3f     .......?.......?
     c08:	a4 a4 f6 f6 f6 f6 f6 00 a4 a4 f6 f6 f6 f6 f6 f6     ................
     c18:	a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6     ................
     c28:	a4 a4 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4     ................
     c38:	3f 3f 00 3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 00     ??.????????.....
     c48:	3f 3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 3f 3f     ????????.???????
     c58:	f6 00 00 3f 3f 3f 3f 3f f6 f6 f6 00 00 00 00 00     ...?????........
     c68:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     c78:	00 3f 3f 3f 00 f6 f6 a4 3f 3f 3f 3f 00 f6 f6 a4     .???....????....
     c88:	3f 3f 3f 00 f6 f6 f6 a4 3f 3f 00 f6 f6 f6 f6 a4     ???.....??......
     c98:	00 00 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
     ca8:	f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
     cb8:	a4 ff ff f6 f6 00 3f 3f a4 ff ff f6 f6 00 3f 3f     ......??......??
     cc8:	a4 ff ff f6 00 3f 3f 00 a4 ff ff f6 00 3f 00 3f     .....??......?.?
     cd8:	a4 ff ff f6 00 00 3f 3f a4 ff ff f6 00 3f 3f 3f     ......??.....???
     ce8:	a4 ff ff f6 00 3f 3f 3f a4 ff ff f6 f6 00 3f 3f     .....???......??
     cf8:	3f 3f 3f 3f 3f 3f 3f 3f 00 00 00 00 00 00 00 00     ????????........
     d08:	00 00 00 00 3f 00 00 00 00 00 00 00 3f 00 00 00     ....?.......?...
     d18:	24 00 00 3f 3f 3f 00 00 3f 3f 3f 3f 3f 3f 3f 3f     $..???..????????
     d28:	3f 3f 3f 3f 3f 3f 3f 3f 3f 00 3f 3f 3f 3f 3f 00     ?????????.?????.
     d38:	3f 3f 3f 00 f6 a4 a4 a4 00 3f 3f 00 f6 a4 a4 a4     ???......??.....
     d48:	00 00 3f 3f 00 a4 a4 a4 00 3f 00 3f 00 a4 a4 a4     ..??.....?.?....
     d58:	24 3f 3f 00 00 a4 a4 a4 3f 3f 3f 3f 00 a4 a4 a4     $??.....????....
     d68:	3f 3f 3f 3f 00 a4 a4 a4 3f 3f 3f 00 f6 a4 a4 a4     ????....???.....
     d78:	fe 00 00 fe fe fe fe fe fe 00 ff 00 fe fe fe fe     ................
     d88:	fe 00 ff ff 00 fe fe fe fe 00 ff ff ff 00 fe fe     ................
     d98:	fe 00 ff ff ff ff 00 fe fe 00 00 00 ff 00 fe fe     ................
     da8:	fe fe fe 00 ff ff 00 fe fe fe fe fe 00 00 00 fe     ................

00000db8 <FaceMaps>:
     db8:	01 02 03 04 05 06 07 08 09 01 02 03 04 0a 0b 07     ................
     dc8:	0c 09 01 02 03 04 0d 0e 07 0f 10 11 12 13 14 15     ................
     dd8:	16 17 18 19 01 02 03 1a 1b 1c 07 08 09              .............

00000de5 <GameTiles>:
     de5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     df5:	ff ff ff ff ff ff ff ff f6 f6 f6 f6 f6 f6 f6 f6     ................
     e05:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     e15:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     e25:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e35:	ff ff ff ff ff ff ff ff f6 f6 f6 f6 f6 f6 f6 f6     ................
     e45:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     e55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     e65:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4     ................
     e75:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 f6     ................
     e85:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
     e95:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
     ea5:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     eb5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
     ec5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     ed5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 a4     ................
     ee5:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     ef5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f05:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f15:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     f25:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     f35:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f45:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f65:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     f75:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f85:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     f95:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 a4 a4     ................
     fa5:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 a4     ................
     fb5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
     fc5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
     fd5:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 a4 a4 a4 f6     ................
     fe5:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6     ................
     ff5:	a4 f6 ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1005:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1015:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1025:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    1035:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    1045:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    1055:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    1065:	f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
    1075:	f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
    1085:	f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
    1095:	f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6 a4     ................
	...
    10e5:	ff f6 f6 f6 f6 f6 f6 f6 ff f6 f6 f6 f6 f6 f6 f6     ................
    10f5:	ff f6 f6 f6 f6 f6 f6 f6 ff f6 f6 f6 f6 f6 f6 f6     ................
    1105:	ff f6 f6 f6 f6 f6 f6 f6 ff f6 f6 f6 f6 f6 f6 f6     ................
    1115:	ff f6 f6 f6 f6 f6 f6 f6 ff f6 f6 f6 f6 f6 f6 f6     ................
    1125:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1135:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1145:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1155:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1165:	f6 f6 f6 f6 f6 f6 a4 00 f6 f6 f6 f6 f6 f6 a4 00     ................
    1175:	f6 f6 f6 f6 f6 f6 a4 00 f6 f6 f6 f6 f6 f6 a4 00     ................
    1185:	f6 f6 f6 f6 f6 f6 a4 00 f6 f6 f6 f6 f6 f6 a4 00     ................
    1195:	f6 f6 f6 f6 f6 f6 a4 00 f6 f6 f6 f6 f6 f6 a4 00     ................
    11a5:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    11b5:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    11c5:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    11d5:	00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00 ff     ................
    11e5:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    11f5:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1205:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1215:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1225:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    1235:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    1245:	f6 f6 f6 f6 f6 a4 f6 ff f6 f6 f6 f6 f6 f6 ff ff     ................
    1255:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1265:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1275:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1285:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1295:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    12a5:	ff ff ff ff ff ff ff ff f6 f6 f6 f6 f6 f6 f6 f6     ................
    12b5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    12c5:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12d5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    12e5:	ff f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    12f5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1305:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1315:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1325:	f6 f6 f6 f6 f6 f6 f6 ff f6 f6 f6 f6 f6 f6 f6 f6     ................
    1335:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1345:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1355:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1365:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1375:	f6 ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1385:	ff ff ff f6 f6 f6 f6 f6 ff ff ff f6 f6 f6 f6 f6     ................
    1395:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    13a5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    13b5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    13c5:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
    13d5:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
    13e5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    13f5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1405:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    1415:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    1425:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1435:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1445:	a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6     ................
    1455:	a4 f6 ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6     ................
    1465:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
    1475:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
    1485:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
    1495:	f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4     ................
    14a5:	ff ff ff f6 f6 f6 f6 f6 ff ff ff f6 f6 f6 f6 f6     ................
    14b5:	ff ff ff f6 f6 f6 f6 f6 ff ff ff f6 f6 f6 f6 f6     ................
    14c5:	ff ff ff f6 f6 f6 f6 f6 ff ff ff f6 f6 f6 f6 f6     ................
    14d5:	ff ff ff f6 f6 f6 f6 f6 ff ff ff f6 f6 f6 f6 f6     ................
    14e5:	f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 f6 ff     ................
    14f5:	f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6 f6 f6     ................
    1505:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1515:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1525:	ff ff ff f6 f6 f6 f6 f6 ff ff ff f6 f6 f6 f6 f6     ................
    1535:	ff ff ff f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1545:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1555:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1565:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1575:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    1585:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    1595:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    15a5:	ff ff ff ff ff ff ff f6 ff ff ff ff ff ff f6 a4     ................
    15b5:	f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    15c5:	f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    15d5:	f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    15e5:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    15f5:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    1605:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    1615:	ff f6 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 a4 a4     ................
    1625:	f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    1635:	f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    1645:	f6 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    1655:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    1665:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1675:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1685:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1695:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    16a5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    16b5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    16c5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    16d5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    16e5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    16f5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1705:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1715:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1725:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1735:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1745:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1755:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1765:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1775:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1785:	a4 f6 f6 f6 f6 f6 f6 c0 a4 f6 f6 f6 f6 f6 c0 c0     ................
    1795:	a4 f6 f6 f6 f6 c0 c0 c0 a4 f6 f6 f6 f6 f6 f6 c0     ................
    17a5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    17b5:	f6 f6 f6 f6 f6 f6 f6 f6 c0 c0 f6 f6 f6 f6 f6 f6     ................
    17c5:	c0 c0 f6 f6 f6 f6 f6 f6 c0 c0 f6 f6 f6 f6 f6 f6     ................
    17d5:	c0 c0 f6 f6 f6 f6 f6 f6 c0 c0 f6 f6 f6 f6 f6 f6     ................
    17e5:	a4 f6 f6 f6 f6 f6 f6 c0 a4 f6 f6 f6 f6 f6 f6 c0     ................
    17f5:	a4 f6 f6 f6 f6 f6 f6 c0 a4 f6 f6 f6 f6 c0 c0 c0     ................
    1805:	a4 f6 f6 f6 f6 c0 c0 c0 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1815:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1825:	c0 c0 f6 f6 f6 f6 f6 f6 c0 c0 f6 f6 f6 f6 f6 f6     ................
    1835:	c0 c0 f6 f6 f6 f6 f6 f6 c0 c0 c0 c0 f6 f6 f6 f6     ................
    1845:	c0 c0 c0 c0 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1855:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1865:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1875:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 20 20 20 20     ............    
    1885:	a4 f6 f6 20 20 20 20 20 a4 f6 f6 20 20 20 f6 f6     ...     ...   ..
    1895:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    18a5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    18b5:	f6 f6 f6 f6 f6 f6 f6 f6 20 20 20 20 f6 f6 f6 f6     ........    ....
    18c5:	20 20 20 20 20 f6 f6 f6 f6 f6 20 20 20 f6 f6 f6          .....   ...
    18d5:	f6 f6 20 20 20 f6 f6 f6 20 20 20 20 f6 f6 f6 f6     ..   ...    ....
    18e5:	a4 f6 f6 f6 f6 f6 20 20 a4 f6 f6 f6 20 20 20 20     ......  ....    
    18f5:	a4 f6 f6 20 20 20 20 f6 a4 f6 f6 20 20 20 20 20     ...    ....     
    1905:	a4 f6 f6 20 20 20 20 20 a4 f6 f6 f6 f6 f6 f6 f6     ...     ........
    1915:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1925:	20 20 20 f6 f6 f6 f6 f6 20 f6 f6 f6 f6 f6 f6 f6        ..... .......
    1935:	f6 f6 f6 f6 f6 f6 f6 f6 20 20 20 20 20 f6 f6 f6     ........     ...
    1945:	20 20 20 20 20 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6          ...........
    1955:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1965:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1975:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 07 07 07 07 07     ................
    1985:	a4 f6 f6 07 07 07 07 07 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1995:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 07 07     ................
    19a5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    19b5:	f6 f6 f6 f6 f6 f6 f6 f6 07 07 07 07 f6 f6 f6 f6     ................
    19c5:	07 07 07 07 07 f6 f6 f6 f6 f6 07 07 07 f6 f6 f6     ................
    19d5:	f6 f6 07 07 07 f6 f6 f6 07 07 07 07 f6 f6 f6 f6     ................
    19e5:	a4 f6 f6 f6 f6 f6 07 07 a4 f6 f6 f6 f6 f6 f6 f6     ................
    19f5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 07 07 07 07 07     ................
    1a05:	a4 f6 f6 07 07 07 07 07 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1a15:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1a25:	07 07 07 07 f6 f6 f6 f6 f6 f6 07 07 07 f6 f6 f6     ................
    1a35:	f6 f6 07 07 07 f6 f6 f6 07 07 07 07 07 f6 f6 f6     ................
    1a45:	07 07 07 07 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1a55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1a65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1a75:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 80 80 80     ................
    1a85:	a4 f6 f6 f6 f6 80 80 80 a4 f6 f6 f6 80 80 80 f6     ................
    1a95:	a4 f6 f6 f6 80 80 80 f6 a4 f6 f6 80 80 80 80 80     ................
    1aa5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1ab5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 80 80 80 f6 f6 f6 f6     ................
    1ac5:	f6 80 80 80 f6 f6 f6 f6 f6 80 80 80 f6 f6 f6 f6     ................
    1ad5:	f6 80 80 80 f6 f6 f6 f6 80 80 80 80 80 f6 f6 f6     ................
    1ae5:	a4 f6 f6 80 80 80 80 80 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1af5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1b05:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1b15:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1b25:	80 80 80 80 80 f6 f6 f6 f6 80 80 80 f6 f6 f6 f6     ................
    1b35:	f6 80 80 80 f6 f6 f6 f6 f6 80 80 80 f6 f6 f6 f6     ................
    1b45:	f6 80 80 80 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1b55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1b65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1b75:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 04 04 04 04 04     ................
    1b85:	a4 f6 f6 04 04 04 04 04 a4 f6 f6 04 04 04 f6 f6     ................
    1b95:	a4 f6 f6 04 04 04 f6 f6 a4 f6 f6 04 04 04 04 04     ................
    1ba5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1bb5:	f6 f6 f6 f6 f6 f6 f6 f6 04 04 04 04 04 f6 f6 f6     ................
    1bc5:	04 04 04 04 04 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1bd5:	f6 f6 f6 f6 f6 f6 f6 f6 04 04 04 04 f6 f6 f6 f6     ................
    1be5:	a4 f6 f6 04 04 04 04 04 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1bf5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 04 04 04 04 04     ................
    1c05:	a4 f6 f6 04 04 04 04 04 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1c15:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1c25:	04 04 04 04 04 f6 f6 f6 f6 f6 04 04 04 f6 f6 f6     ................
    1c35:	f6 f6 04 04 04 f6 f6 f6 04 04 04 04 04 f6 f6 f6     ................
    1c45:	04 04 04 04 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1c55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1c65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1c75:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 a0 a0 a0 a0     ................
    1c85:	a4 f6 f6 a0 a0 a0 a0 a0 a4 f6 f6 a0 a0 a0 f6 f6     ................
    1c95:	a4 f6 f6 a0 a0 a0 f6 f6 a4 f6 f6 a0 a0 a0 a0 a0     ................
    1ca5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1cb5:	f6 f6 f6 f6 f6 f6 f6 f6 a0 a0 a0 a0 f6 f6 f6 f6     ................
    1cc5:	a0 a0 a0 a0 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1cd5:	f6 f6 f6 f6 f6 f6 f6 f6 a0 a0 a0 a0 f6 f6 f6 f6     ................
    1ce5:	a4 f6 f6 a0 a0 a0 a0 a0 a4 f6 f6 a0 a0 a0 f6 f6     ................
    1cf5:	a4 f6 f6 a0 a0 a0 f6 f6 a4 f6 f6 a0 a0 a0 a0 a0     ................
    1d05:	a4 f6 f6 f6 a0 a0 a0 a0 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1d15:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1d25:	a0 a0 a0 a0 a0 f6 f6 f6 f6 f6 a0 a0 a0 f6 f6 f6     ................
    1d35:	f6 f6 a0 a0 a0 f6 f6 f6 a0 a0 a0 a0 a0 f6 f6 f6     ................
    1d45:	a0 a0 a0 a0 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1d55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1d65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1d75:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 00 00 00 00 00     ................
    1d85:	a4 f6 f6 00 00 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1d95:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1da5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1db5:	f6 f6 f6 f6 f6 f6 f6 f6 00 00 00 00 00 f6 f6 f6     ................
    1dc5:	00 00 00 00 00 f6 f6 f6 f6 f6 00 00 00 f6 f6 f6     ................
    1dd5:	f6 f6 00 00 00 f6 f6 f6 f6 00 00 00 f6 f6 f6 f6     ................
    1de5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1df5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 00     ................
    1e05:	a4 f6 f6 f6 f6 f6 f6 00 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1e15:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1e25:	f6 00 00 00 f6 f6 f6 f6 00 00 00 f6 f6 f6 f6 f6     ................
    1e35:	00 00 00 f6 f6 f6 f6 f6 00 00 f6 f6 f6 f6 f6 f6     ................
    1e45:	00 00 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1e55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1e65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1e75:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 a4 a4 a4 a4     ................
    1e85:	a4 f6 f6 a4 a4 a4 a4 a4 a4 f6 f6 a4 a4 a4 f6 f6     ................
    1e95:	a4 f6 f6 a4 a4 a4 f6 f6 a4 f6 f6 f6 a4 a4 a4 a4     ................
    1ea5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1eb5:	f6 f6 f6 f6 f6 f6 f6 f6 a4 a4 a4 a4 f6 f6 f6 f6     ................
    1ec5:	a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6     ................
    1ed5:	f6 f6 a4 a4 a4 f6 f6 f6 a4 a4 a4 a4 f6 f6 f6 f6     ................
    1ee5:	a4 f6 f6 f6 a4 a4 a4 a4 a4 f6 f6 a4 a4 a4 f6 f6     ................
    1ef5:	a4 f6 f6 a4 a4 a4 f6 f6 a4 f6 f6 a4 a4 a4 a4 a4     ................
    1f05:	a4 f6 f6 f6 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1f15:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1f25:	a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6     ................
    1f35:	f6 f6 a4 a4 a4 f6 f6 f6 a4 a4 a4 a4 a4 f6 f6 f6     ................
    1f45:	a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1f55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1f65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1f75:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    1f85:	a4 f6 f6 f6 00 f6 00 00 a4 f6 f6 f6 f6 00 00 00     ................
    1f95:	a4 f6 f6 f6 00 00 ff ff a4 f6 f6 f6 00 00 ff ff     ................
    1fa5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    1fb5:	00 f6 f6 f6 f6 f6 f6 f6 00 f6 f6 f6 f6 f6 f6 f6     ................
    1fc5:	00 00 00 f6 00 f6 f6 f6 00 00 00 00 f6 f6 f6 f6     ................
    1fd5:	00 00 00 00 00 f6 f6 f6 00 00 00 00 00 f6 f6 f6     ................
    1fe5:	a4 f6 00 00 00 00 00 00 a4 f6 f6 f6 00 00 00 00     ................
    1ff5:	a4 f6 f6 f6 00 00 00 00 a4 f6 f6 f6 f6 00 00 00     ................
    2005:	a4 f6 f6 f6 00 f6 00 00 a4 f6 f6 f6 f6 f6 f6 f6     ................
    2015:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    2025:	00 00 00 00 00 00 00 f6 00 00 00 00 00 f6 f6 f6     ................
    2035:	00 00 00 00 00 f6 f6 f6 00 00 00 00 f6 f6 f6 f6     ................
    2045:	00 00 00 f6 00 f6 f6 f6 00 f6 f6 f6 f6 f6 f6 f6     ................
    2055:	00 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2065:	a4 a4 a4 a4 a4 a4 a4 a4 a4 07 07 07 07 07 07 07     ................
    2075:	a4 07 07 07 07 07 07 07 a4 07 07 07 07 07 07 07     ................
    2085:	a4 07 07 07 00 07 00 00 a4 07 07 07 07 00 00 00     ................
    2095:	a4 07 07 07 00 00 ff ff a4 07 07 07 00 00 ff ff     ................
    20a5:	a4 a4 a4 a4 a4 a4 a4 a4 07 07 07 07 07 07 07 07     ................
    20b5:	00 07 07 07 07 07 07 07 00 07 07 07 07 07 07 07     ................
    20c5:	00 00 00 07 00 07 07 07 00 00 00 00 07 07 07 07     ................
    20d5:	00 00 00 00 00 07 07 07 00 00 00 00 00 07 07 07     ................
    20e5:	a4 07 00 00 00 00 00 00 a4 07 07 07 00 00 00 00     ................
    20f5:	a4 07 07 07 00 00 00 00 a4 07 07 07 07 00 00 00     ................
    2105:	a4 07 07 07 00 07 00 00 a4 07 07 07 07 07 07 07     ................
    2115:	a4 07 07 07 07 07 07 07 a4 07 07 07 07 07 07 07     ................
    2125:	00 00 00 00 00 00 00 07 00 00 00 00 00 07 07 07     ................
    2135:	00 00 00 00 00 07 07 07 00 00 00 00 07 07 07 07     ................
    2145:	00 00 00 07 00 07 07 07 00 07 07 07 07 07 07 07     ................
    2155:	00 07 07 07 07 07 07 07 07 07 07 07 07 07 07 07     ................
    2165:	ff a4 a4 a4 a4 a4 a4 a4 ff f6 f6 f6 f6 f6 f6 f6     ................
    2175:	ff f6 f6 f6 f6 f6 f6 f6 ff f6 07 07 f6 f6 f6 f6     ................
    2185:	ff f6 f6 07 07 f6 00 00 ff f6 f6 f6 07 07 00 00     ................
    2195:	ff f6 f6 f6 00 07 07 ff ff f6 f6 f6 00 00 07 07     ................
    21a5:	a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    21b5:	00 f6 f6 f6 f6 f6 f6 f6 00 f6 f6 f6 f6 07 07 f6     ................
    21c5:	00 00 00 f6 07 07 f6 f6 00 00 00 07 07 f6 f6 f6     ................
    21d5:	00 00 07 07 00 f6 f6 f6 00 07 07 00 00 f6 f6 f6     ................
    21e5:	ff f6 00 00 00 00 00 07 ff f6 f6 f6 00 00 00 07     ................
    21f5:	ff f6 f6 f6 00 00 07 07 ff f6 f6 f6 f6 07 07 00     ................
    2205:	ff f6 f6 f6 07 07 00 00 ff f6 f6 07 07 f6 f6 f6     ................
    2215:	ff f6 07 07 f6 f6 f6 f6 ff f6 f6 f6 f6 f6 f6 f6     ................
    2225:	07 07 00 00 00 00 00 f6 07 07 00 00 00 f6 f6 f6     ................
    2235:	00 07 07 00 00 f6 f6 f6 00 00 07 07 f6 f6 f6 f6     ................
    2245:	00 00 00 07 07 f6 f6 f6 00 f6 f6 f6 07 07 f6 f6     ................
    2255:	00 f6 f6 f6 f6 07 07 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2265:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2275:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 07     ................
    2285:	ff ff f6 f6 f6 07 07 07 ff ff f6 f6 07 07 07 07     ................
    2295:	ff ff f6 f6 f6 07 07 07 ff ff f6 f6 f6 f6 f6 07     ................
    22a5:	ff ff ff ff ff ff ff f6 ff ff ff ff ff ff f6 a4     ................
    22b5:	f6 f6 f6 f6 f6 f6 a4 a4 07 f6 f6 f6 f6 f6 a4 a4     ................
    22c5:	07 f6 f6 f6 f6 f6 a4 a4 07 f6 f6 f6 f6 f6 a4 a4     ................
    22d5:	07 f6 f6 f6 f6 f6 a4 a4 07 f6 f6 f6 f6 f6 a4 a4     ................
    22e5:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    22f5:	ff ff f6 f6 f6 f6 00 00 ff ff f6 f6 00 00 00 00     ................
    2305:	ff ff f6 f6 00 00 00 00 ff ff f6 f6 f6 f6 f6 f6     ................
    2315:	ff f6 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 a4 a4     ................
    2325:	00 f6 f6 f6 f6 f6 a4 a4 00 f6 f6 f6 f6 f6 a4 a4     ................
    2335:	00 00 f6 f6 f6 f6 a4 a4 00 00 00 00 f6 f6 a4 a4     ................
    2345:	00 00 00 00 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    2355:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    2365:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2375:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 00 00     ................
    2385:	ff ff f6 f6 f6 00 00 f6 ff ff f6 f6 f6 00 00 f6     ................
    2395:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 f6     ................
    23a5:	ff ff ff ff ff ff ff f6 ff ff ff ff ff ff f6 a4     ................
    23b5:	f6 f6 f6 f6 f6 f6 a4 a4 00 00 f6 f6 f6 f6 a4 a4     ................
    23c5:	f6 00 00 f6 f6 f6 a4 a4 f6 00 00 f6 f6 f6 a4 a4     ................
    23d5:	f6 00 00 f6 f6 f6 a4 a4 00 00 f6 f6 f6 f6 a4 a4     ................
    23e5:	ff ff f6 f6 f6 f6 f6 00 ff ff f6 f6 f6 f6 f6 00     ................
    23f5:	ff ff f6 f6 f6 f6 f6 f6 ff ff f6 f6 f6 f6 f6 00     ................
    2405:	ff ff f6 f6 f6 f6 f6 00 ff ff f6 f6 f6 f6 f6 f6     ................
    2415:	ff f6 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 a4 a4     ................
    2425:	00 f6 f6 f6 f6 f6 a4 a4 00 f6 f6 f6 f6 f6 a4 a4     ................
    2435:	f6 f6 f6 f6 f6 f6 a4 a4 00 f6 f6 f6 f6 f6 a4 a4     ................
    2445:	00 f6 f6 f6 f6 f6 a4 a4 f6 f6 f6 f6 f6 f6 a4 a4     ................
    2455:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    2465:	ff ff ff ff ff ff ff f6 ff ff ff ff ff ff f6 a4     ................
    2475:	ff ff f6 f6 f6 f6 a4 a4 ff ff f6 f6 f6 f6 a4 a4     ................
    2485:	ff ff f6 f6 f6 f6 a4 a4 ff ff f6 f6 f6 f6 a4 a4     ................
    2495:	ff f6 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 a4 a4     ................
    24a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 f6 f6 f6 f6     ................
    24b5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    24c5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    24d5:	a4 f6 f6 f6 f6 f6 f6 f6 a4 f6 f6 f6 f6 f6 f6 f6     ................
    24e5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 c0 c0 f6 f6     ................
    24f5:	a4 f6 c0 c0 c0 c0 f6 f6 a4 c0 c0 c0 c0 c0 f6 f6     ................
    2505:	a4 f6 f6 c0 c0 c0 f6 f6 a4 f6 f6 c0 c0 c0 f6 f6     ................
    2515:	a4 f6 f6 c0 c0 c0 f6 f6 a4 c0 c0 c0 c0 c0 c0 c0     ................
    2525:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 20 20 20 20 20 f6     ..........     .
    2535:	a4 20 20 f6 f6 f6 20 20 a4 f6 f6 f6 f6 f6 20 20     .  ...  ......  
    2545:	a4 f6 f6 20 20 20 20 f6 a4 f6 20 20 20 f6 f6 f6     ...    ...   ...
    2555:	a4 20 20 20 f6 f6 f6 f6 a4 20 20 20 20 20 20 20     .   .....       
    2565:	a4 a4 a4 a4 a4 a4 a4 a4 a4 07 07 07 07 07 07 f6     ................
    2575:	a4 f6 f6 f6 f6 f6 07 07 a4 f6 f6 f6 f6 f6 07 07     ................
    2585:	a4 f6 f6 07 07 07 07 f6 a4 f6 f6 f6 f6 f6 07 07     ................
    2595:	a4 f6 f6 f6 f6 f6 07 07 a4 07 07 07 07 07 07 f6     ................
    25a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 80 80 f6 80 80 f6     ................
    25b5:	a4 f6 80 80 f6 80 80 f6 a4 f6 80 80 f6 80 80 f6     ................
    25c5:	a4 80 80 80 80 80 80 80 a4 f6 f6 f6 f6 80 80 f6     ................
    25d5:	a4 f6 f6 f6 f6 80 80 f6 a4 f6 f6 f6 f6 80 80 f6     ................
    25e5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 04 04 04 04 04 04 04     ................
    25f5:	a4 04 04 f6 f6 f6 f6 f6 a4 04 04 f6 f6 f6 f6 f6     ................
    2605:	a4 04 04 04 04 04 04 04 a4 f6 f6 f6 f6 f6 04 04     ................
    2615:	a4 f6 f6 f6 f6 f6 04 04 a4 04 04 04 04 04 04 f6     ................
    2625:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 a0 a0 a0 a0 a0 f6     ................
    2635:	a4 a0 a0 f6 f6 f6 f6 f6 a4 a0 a0 f6 f6 f6 f6 f6     ................
    2645:	a4 a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 f6 f6 f6 a0 a0     ................
    2655:	a4 a0 a0 f6 f6 f6 a0 a0 a4 f6 a0 a0 a0 a0 a0 f6     ................
    2665:	a4 a4 a4 a4 a4 a4 a4 a4 a4 00 00 00 00 00 00 00     ................
    2675:	a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00     ................
    2685:	a4 f6 f6 f6 f6 00 00 f6 a4 f6 f6 f6 00 00 00 f6     ................
    2695:	a4 f6 f6 f6 00 00 00 f6 a4 f6 f6 f6 00 00 f6 f6     ................
    26a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 a4 a4 a4 a4 a4 f6     ................
    26b5:	a4 a4 a4 f6 f6 f6 a4 a4 a4 a4 a4 f6 f6 f6 a4 a4     ................
    26c5:	a4 f6 a4 a4 a4 a4 a4 f6 a4 a4 a4 f6 f6 f6 a4 a4     ................
    26d5:	a4 a4 a4 f6 f6 f6 a4 a4 a4 f6 a4 a4 a4 a4 a4 f6     ................
    26e5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 f6 f6 f6 00 f6 f6 f6     ................
    26f5:	a4 f6 00 00 00 00 00 f6 a4 f6 00 f6 00 00 00 f6     ................
    2705:	a4 00 00 00 00 00 00 00 a4 f6 00 00 00 00 00 f6     ................
    2715:	a4 f6 00 00 00 00 00 f6 a4 f6 f6 f6 00 f6 f6 f6     ................
    2725:	a4 a4 a4 a4 a4 a4 a4 a4 a4 07 07 07 00 07 07 07     ................
    2735:	a4 07 00 00 00 00 00 07 a4 07 00 f6 00 00 00 07     ................
    2745:	a4 00 00 00 00 00 00 00 a4 07 00 00 00 00 00 07     ................
    2755:	a4 07 00 00 00 00 00 07 a4 07 07 07 00 07 07 07     ................
    2765:	a4 a4 a4 a4 a4 a4 a4 a4 a4 07 f6 f6 00 f6 f6 07     ................
    2775:	a4 f6 07 00 00 00 07 f6 a4 f6 00 07 00 07 00 f6     ................
    2785:	a4 00 00 00 07 00 00 00 a4 f6 00 07 00 07 00 f6     ................
    2795:	a4 f6 07 00 00 00 07 f6 a4 07 f6 f6 00 f6 f6 07     ................
    27a5:	ff ff ff ff 07 07 ff f6 ff ff 07 07 07 07 f6 a4     ................
    27b5:	ff 07 07 07 07 07 a4 a4 ff ff 07 07 07 07 a4 a4     ................
    27c5:	ff ff f6 f6 07 07 a4 a4 ff ff f6 f6 f6 00 a4 a4     ................
    27d5:	ff f6 a4 a4 a4 00 a4 a4 f6 a4 a4 00 00 00 00 a4     ................
    27e5:	ff ff ff ff ff ff ff f6 ff ff 00 00 00 00 f6 a4     ................
    27f5:	ff 00 00 f6 f6 00 00 a4 ff ff f6 f6 f6 00 00 a4     ................
    2805:	ff ff f6 00 00 f6 a4 a4 ff ff f6 00 00 f6 a4 a4     ................
    2815:	ff f6 a4 a4 a4 a4 a4 a4 f6 a4 a4 00 00 a4 a4 a4     ................
	...
    2831:	07 07 07 07 00 00 00 07 00 07 07 07 00 00 00 07     ................
    2841:	07 00 07 07 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2851:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2861:	07 07 00 00 00 00 00 00 00 00 00 00 07 07 07 07     ................
    2871:	07 00 00 00 07 07 07 07 00 07 00 00 07 07 07 00     ................
    2881:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2891:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    28a1:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    28b1:	07 00 00 00 00 00 00 07 00 00 04 00 00 00 00 00     ................
    28c1:	00 04 00 04 00 00 00 07 00 00 04 00 00 00 00 07     ................
    28d1:	07 00 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    28e1:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 00     ................
    28f1:	07 07 00 00 04 00 04 00 00 07 00 00 00 04 00 04     ................
    2901:	00 00 00 00 04 00 04 00 00 07 00 00 00 00 00 00     ................
    2911:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2921:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2931:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2941:	07 00 07 07 00 00 00 07 00 07 07 07 00 00 00 00     ................
    2951:	07 07 07 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2961:	00 00 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2971:	07 07 00 00 00 00 00 07 07 07 00 00 07 07 07 00     ................
    2981:	07 07 00 00 07 07 07 07 00 07 00 00 07 07 07 07     ................
    2991:	07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29b1:	00 04 00 04 00 00 00 04 00 00 04 00 00 00 00 00     ................
    29c1:	04 00 00 04 00 00 00 04 00 04 00 00 00 00 00 00     ................
    29d1:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    29e1:	04 00 00 00 00 00 00 00 00 00 00 00 00 04 00 04     ................
    29f1:	00 00 00 00 04 00 04 00 00 07 00 00 00 04 00 00     ................
    2a01:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2a11:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2a21:	07 07 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2a31:	04 00 00 00 00 00 00 04 00 00 04 00 00 00 00 00     ................
    2a41:	00 04 00 04 00 00 00 04 00 00 04 00 00 00 00 00     ................
    2a51:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2a61:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2a71:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2a81:	04 00 00 04 00 00 00 04 00 00 04 00 00 00 00 00     ................
    2a91:	00 04 00 04 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2aa1:	00 00 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2ab1:	07 07 00 00 00 00 00 07 07 07 00 00 00 04 00 00     ................
    2ac1:	07 07 00 00 04 00 04 00 00 07 00 00 00 04 00 04     ................
	...
    2af1:	07 07 07 07 00 00 00 04 00 07 07 07 00 00 00 00     ................
    2b01:	04 00 07 07 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2b11:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2b21:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2b31:	04 00 00 00 00 00 00 04 00 07 07 07 00 00 00 00     ................
    2b41:	07 07 07 07 00 00 00 07 00 07 07 07 00 00 00 07     ................
    2b51:	07 00 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2b61:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 00     ................
    2b71:	07 07 00 00 07 07 07 07 00 07 00 00 07 07 07 07     ................
    2b81:	07 00 00 00 07 07 07 07 00 04 00 00 00 00 00 00     ................
    2b91:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2ba1:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2bb1:	04 00 00 00 00 00 00 04 00 04 00 00 07 07 07 00     ................
    2bc1:	04 00 00 00 07 07 07 07 00 04 00 00 07 07 07 07     ................
    2bd1:	07 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2be1:	00 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2bf1:	04 00 00 00 00 00 00 04 00 07 07 07 00 00 00 00     ................
    2c01:	07 07 07 07 00 00 00 04 00 07 07 07 00 00 00 00     ................
    2c11:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2c21:	04 00 00 00 00 00 00 07 07 07 00 00 00 00 00 00     ................
    2c31:	07 07 00 00 07 07 07 07 00 07 00 00 07 07 07 07     ................
    2c41:	07 00 00 00 07 07 07 07 00 07 00 00 00 00 00 00     ................
    2c51:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2c61:	07 07 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2c71:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2c81:	04 00 07 07 00 00 00 04 00 07 07 07 00 00 00 00     ................
    2c91:	07 07 07 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cb1:	00 04 00 04 00 00 00 07 00 00 04 00 00 00 00 07     ................
    2cc1:	07 00 00 04 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2cd1:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2ce1:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2cf1:	07 00 00 00 00 00 00 07 00 07 07 07 00 00 00 00     ................
    2d01:	07 07 07 07 00 00 00 04 00 07 07 07 00 00 00 00     ................
    2d11:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2d21:	04 00 00 00 00 00 00 00 00 00 00 00 07 07 07 07     ................
    2d31:	07 00 00 00 07 07 07 07 00 04 00 00 07 07 07 00     ................
    2d41:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2d51:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2d61:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2d71:	04 00 00 00 07 07 07 07 00 04 00 00 07 07 07 07     ................
    2d81:	07 00 00 00 07 07 07 07 00 07 00 00 00 00 00 00     ................
    2d91:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2da1:	07 07 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2db1:	07 00 00 00 00 00 00 07 00 07 07 07 00 00 00 00     ................
    2dc1:	07 07 07 07 00 00 00 07 00 07 07 07 00 00 00 07     ................
    2dd1:	07 00 00 00 00 00 00 07 07 07 00 00 00 00 00 07     ................
    2de1:	07 07 00 00 00 00 00 00 00 00 00 00 00 04 00 04     ................
    2df1:	00 00 00 00 04 00 04 00 00 04 00 00 00 04 00 00     ................
    2e01:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2e11:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2e21:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2e31:	04 00 00 00 07 07 07 07 00 04 00 00 07 07 07 07     ................
    2e41:	07 00 00 00 07 07 07 07 00 04 00 00 00 00 00 00     ................
    2e51:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2e61:	04 00 00 00 00 00 00 04 00 04 00 00 00 00 00 00     ................
    2e71:	04 00 00 00 00 00 00 04 00 04 00 00 00 04 00 00     ................
    2e81:	04 00 00 00 04 00 04 00 00 04 00 00 00 04 00 04     ................
	...
    2ea5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2eb5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2ec5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2ed5:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2ee5:	f6 f6 00 00 00 a4 f6 f6 f6 f6 00 00 00 a4 f6 f6     ................
    2ef5:	f6 f6 00 00 00 a4 f6 f6 f6 f6 00 00 a4 a4 f6 f6     ................
    2f05:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6     ................
    2f15:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2f25:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 00 f6 f6 f6 f6     ................
    2f35:	f6 00 f6 00 f6 00 f6 f6 f6 f6 00 00 00 f6 f6 f6     ................
    2f45:	f6 00 f6 00 f6 00 f6 f6 f6 f6 f6 00 f6 f6 f6 f6     ................
    2f55:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2f65:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2f75:	f6 f6 f6 f6 f6 f6 f6 f6 f6 00 00 00 00 00 f6 f6     ................
    2f85:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2f95:	f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2fa5:	f6 f6 00 00 00 f6 f6 f6 f6 00 a4 a4 00 00 f6 f6     ................
    2fb5:	00 00 a4 f6 a4 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    2fc5:	00 00 a4 f6 f6 00 00 f6 f6 00 00 a4 f6 00 a4 f6     ................
    2fd5:	f6 f6 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    2fe5:	f6 f6 f6 00 00 f6 f6 f6 f6 f6 00 00 00 a4 f6 f6     ................
    2ff5:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3005:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3015:	f6 00 00 00 00 00 00 f6 f6 f6 a4 a4 a4 a4 a4 a4     ................
    3025:	f6 00 00 00 00 00 a4 f6 00 00 f6 f6 f6 00 00 a4     ................
    3035:	f6 f6 f6 f6 00 00 00 a4 f6 f6 00 00 00 00 a4 f6     ................
    3045:	f6 00 00 00 00 a4 f6 f6 00 00 00 a4 a4 f6 f6 f6     ................
    3055:	00 00 00 00 00 00 00 f6 f6 a4 a4 a4 a4 a4 a4 a4     ................
    3065:	f6 00 00 00 00 00 00 f6 f6 f6 a4 a4 00 00 a4 f6     ................
    3075:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 00 00 00 00 f6 f6     ................
    3085:	f6 f6 f6 f6 f6 00 00 f6 00 00 f6 f6 f6 00 00 f6     ................
    3095:	f6 00 00 00 00 00 a4 f6 f6 f6 a4 a4 a4 a4 f6 f6     ................
    30a5:	f6 f6 f6 00 00 00 a4 f6 f6 f6 00 00 00 00 a4 f6     ................
    30b5:	f6 00 00 a4 00 00 a4 f6 00 00 a4 f6 00 00 a4 f6     ................
    30c5:	00 00 00 00 00 00 00 f6 f6 a4 a4 a4 00 00 a4 a4     ................
    30d5:	f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6     ................
    30e5:	00 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 a4 f6 f6     ................
    30f5:	00 00 00 00 00 00 f6 f6 f6 a4 a4 a4 a4 00 00 f6     ................
    3105:	f6 f6 f6 f6 a4 00 00 f6 00 00 f6 f6 a4 00 00 f6     ................
    3115:	f6 00 00 00 00 00 f6 f6 f6 a4 a4 a4 a4 a4 f6 f6     ................
    3125:	f6 f6 00 00 00 00 f6 f6 f6 00 00 a4 a4 f6 f6 f6     ................
    3135:	00 00 a4 f6 f6 f6 f6 f6 00 00 00 00 00 00 f6 f6     ................
    3145:	00 00 a4 a4 a4 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    3155:	f6 00 00 00 00 00 a4 f6 f6 f6 a4 a4 a4 a4 f6 f6     ................
    3165:	00 00 00 00 00 00 00 f6 00 00 a4 a4 a4 00 00 f6     ................
    3175:	f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3185:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6     ................
    3195:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    31a5:	f6 00 00 00 00 f6 f6 f6 00 00 a4 a4 a4 00 f6 f6     ................
    31b5:	00 00 00 a4 f6 00 f6 f6 f6 00 00 00 00 f6 f6 f6     ................
    31c5:	00 a4 a4 00 00 00 00 f6 00 a4 f6 f6 f6 00 00 f6     ................
    31d5:	f6 00 00 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    31e5:	f6 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 00 00 f6     ................
    31f5:	00 00 a4 f6 f6 00 00 f6 f6 00 00 00 00 00 00 f6     ................
    3205:	f6 f6 f6 f6 f6 00 00 f6 f6 f6 f6 f6 00 00 a4 f6     ................
    3215:	f6 00 00 00 00 a4 f6 f6 f6 f6 a4 a4 a4 f6 f6 f6     ................
    3225:	f6 f6 00 00 00 a4 f6 f6 f6 00 00 a4 00 00 a4 f6     ................
    3235:	00 00 a4 f6 a4 00 00 f6 00 00 a4 f6 f6 00 00 a4     ................
    3245:	00 00 00 00 00 00 00 a4 00 00 a4 a4 a4 00 00 a4     ................
    3255:	00 00 a4 f6 f6 00 00 a4 a4 a4 a4 f6 f6 f6 a4 a4     ................
    3265:	00 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 00 00 f6     ................
    3275:	00 00 a4 f6 f6 00 00 f6 00 00 00 00 00 00 a4 f6     ................
    3285:	00 00 a4 a4 a4 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    3295:	00 00 00 00 00 00 a4 f6 f6 a4 a4 a4 a4 a4 f6 f6     ................
    32a5:	f6 f6 00 00 00 00 a4 f6 f6 00 00 a4 a4 00 00 f6     ................
    32b5:	00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6     ................
    32c5:	00 00 a4 f6 f6 f6 f6 f6 f6 00 00 a4 a4 00 00 f6     ................
    32d5:	f6 a4 00 00 00 00 a4 f6 f6 f6 a4 a4 a4 a4 f6 f6     ................
    32e5:	00 00 00 00 00 a4 f6 f6 00 00 a4 a4 00 00 a4 f6     ................
    32f5:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    3305:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 00 00 a4 f6     ................
    3315:	00 00 00 00 00 a4 f6 f6 f6 a4 a4 a4 a4 f6 f6 f6     ................
    3325:	00 00 00 00 00 00 00 f6 00 00 a4 a4 a4 a4 f6 f6     ................
    3335:	00 00 a4 f6 f6 f6 f6 f6 00 00 00 00 00 00 f6 f6     ................
    3345:	00 00 a4 a4 a4 f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6     ................
    3355:	00 00 00 00 00 00 00 f6 f6 a4 a4 a4 a4 a4 a4 f6     ................
    3365:	00 00 00 00 00 00 00 f6 00 00 a4 a4 a4 a4 f6 f6     ................
    3375:	00 00 a4 f6 f6 f6 f6 f6 00 00 00 00 00 00 f6 f6     ................
    3385:	00 00 a4 a4 a4 f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6     ................
    3395:	00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    33a5:	f6 f6 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 f6 f6     ................
    33b5:	00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 00 00 00 f6     ................
    33c5:	00 00 a4 f6 a4 00 00 f6 f6 00 00 a4 a4 00 00 f6     ................
    33d5:	f6 f6 00 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    33e5:	00 00 f6 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 a4     ................
    33f5:	00 00 a4 f6 f6 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3405:	00 00 a4 a4 a4 00 00 a4 00 00 a4 f6 f6 00 00 a4     ................
    3415:	00 00 a4 f6 f6 00 00 a4 f6 a4 a4 f6 f6 f6 a4 a4     ................
    3425:	f6 00 00 00 00 00 00 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3435:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3445:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3455:	f6 00 00 00 00 00 00 f6 f6 f6 a4 a4 a4 a4 a4 f6     ................
    3465:	f6 f6 f6 00 00 00 00 a4 f6 f6 f6 f6 00 00 a4 f6     ................
    3475:	f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6     ................
    3485:	f6 f6 f6 f6 00 00 a4 f6 00 f6 f6 f6 00 00 a4 f6     ................
    3495:	f6 00 00 00 00 a4 f6 f6 f6 f6 a4 a4 a4 a4 f6 f6     ................
    34a5:	00 00 f6 f6 f6 00 00 f6 00 00 a4 f6 00 00 a4 f6     ................
    34b5:	00 00 a4 00 00 a4 f6 f6 00 00 00 00 a4 f6 f6 f6     ................
    34c5:	00 00 00 00 00 f6 f6 f6 00 00 a4 00 00 00 f6 f6     ................
    34d5:	00 00 a4 f6 00 00 00 f6 f6 a4 a4 f6 f6 a4 a4 f6     ................
    34e5:	f6 00 00 f6 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6     ................
    34f5:	f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6     ................
    3505:	f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6 f6     ................
    3515:	f6 00 00 00 00 00 00 f6 f6 f6 a4 a4 a4 a4 a4 f6     ................
    3525:	00 00 a4 f6 f6 00 00 f6 00 00 00 a4 00 00 00 a4     ................
    3535:	00 00 00 00 00 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3545:	00 00 a4 00 a4 00 00 a4 00 00 a4 f6 f6 00 00 a4     ................
    3555:	00 00 a4 f6 f6 00 00 a4 f6 a4 a4 f6 f6 f6 a4 a4     ................
    3565:	00 00 f6 f6 f6 00 00 f6 00 00 00 a4 f6 00 00 a4     ................
    3575:	00 00 00 00 a4 00 00 a4 00 00 00 00 00 00 00 a4     ................
    3585:	00 00 a4 00 00 00 00 a4 00 00 a4 f6 00 00 00 a4     ................
    3595:	00 00 a4 f6 f6 00 00 a4 f6 a4 a4 f6 f6 f6 a4 a4     ................
    35a5:	f6 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 00 00 f6     ................
    35b5:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    35c5:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    35d5:	f6 00 00 00 00 00 a4 f6 f6 f6 a4 a4 a4 a4 f6 f6     ................
    35e5:	00 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 00 00 f6     ................
    35f5:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    3605:	00 00 00 00 00 00 a4 f6 00 00 a4 f6 f6 f6 f6 f6     ................
    3615:	00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    3625:	f6 00 00 00 00 00 f6 f6 00 00 a4 f6 f6 00 00 f6     ................
    3635:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 f6     ................
    3645:	00 00 a4 00 00 00 00 f6 00 00 a4 f6 00 00 a4 f6     ................
    3655:	f6 00 00 00 00 a4 00 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    3665:	00 00 00 00 00 00 f6 f6 00 00 a4 a4 a4 00 00 f6     ................
    3675:	00 00 a4 f6 f6 00 00 f6 00 00 a4 f6 00 00 00 f6     ................
    3685:	00 00 00 00 00 a4 f6 f6 00 00 a4 00 00 00 a4 f6     ................
    3695:	00 00 a4 f6 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    36a5:	f6 00 00 00 00 a4 f6 f6 00 00 a4 a4 00 00 f6 f6     ................
    36b5:	00 00 a4 f6 f6 f6 f6 f6 f6 00 00 00 00 00 f6 f6     ................
    36c5:	f6 f6 f6 a4 a4 00 00 f6 00 00 f6 f6 f6 00 00 f6     ................
    36d5:	f6 00 00 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    36e5:	00 00 00 00 00 00 a4 f6 f6 f6 00 00 a4 f6 f6 f6     ................
    36f5:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6     ................
    3705:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6 f6     ................
    3715:	f6 f6 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    3725:	00 00 a4 f6 f6 00 00 a4 00 00 a4 f6 f6 00 00 a4     ................
    3735:	00 00 a4 f6 f6 00 00 a4 00 00 a4 f6 f6 00 00 a4     ................
    3745:	00 00 a4 f6 f6 00 00 a4 00 00 a4 a4 a4 00 00 a4     ................
    3755:	f6 00 00 00 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    3765:	00 00 a4 f6 f6 00 00 a4 00 00 a4 f6 f6 00 00 a4     ................
    3775:	00 00 a4 f6 f6 00 00 a4 00 00 00 a4 00 00 00 a4     ................
    3785:	f6 00 00 00 00 00 a4 f6 f6 f6 00 00 00 a4 f6 f6     ................
    3795:	f6 f6 f6 00 a4 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6     ................
    37a5:	00 00 f6 f6 f6 00 00 f6 00 00 a4 f6 f6 00 00 a4     ................
    37b5:	00 00 a4 00 a4 00 00 a4 00 00 00 00 00 00 00 a4     ................
    37c5:	00 00 00 00 00 00 00 a4 00 00 00 a4 00 00 00 a4     ................
    37d5:	00 00 a4 f6 a4 00 00 a4 f6 a4 f6 f6 f6 f6 a4 a4     ................
    37e5:	00 00 a4 f6 f6 00 00 a4 00 00 00 a4 00 00 00 a4     ................
    37f5:	f6 00 00 00 00 00 a4 f6 f6 f6 00 00 00 a4 f6 f6     ................
    3805:	f6 00 00 00 00 00 a4 f6 00 00 00 a4 00 00 00 a4     ................
    3815:	00 00 a4 f6 f6 00 00 a4 f6 f6 f6 f6 f6 f6 f6 f6     ................
    3825:	f6 00 00 a4 f6 00 00 a4 f6 00 00 a4 f6 00 00 a4     ................
    3835:	f6 00 00 a4 f6 00 00 a4 f6 f6 00 00 00 00 a4 f6     ................
    3845:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 00 00 a4 f6 f6     ................
    3855:	f6 f6 f6 00 00 a4 f6 f6 f6 f6 f6 f6 a4 a4 f6 f6     ................
    3865:	00 00 00 00 00 00 00 a4 f6 a4 a4 a4 00 00 00 a4     ................
    3875:	f6 f6 f6 00 00 00 a4 f6 f6 f6 00 00 00 a4 f6 f6     ................
    3885:	f6 00 00 00 a4 f6 f6 f6 00 00 00 a4 f6 f6 f6 f6     ................
    3895:	00 00 00 00 00 00 00 a4 f6 a4 a4 a4 a4 a4 a4 a4     ................

000038a5 <NumberMaps>:
    38a5:	01 02 03 04 05 06 07 08 09 04 0a 0b 0c 02 0d 0e     ................
    38b5:	05 0f 0c 02 10 11 12 06 13 08 14 11 0a 0b 01 15     ................
    38c5:	14 16 12 06 01 15 17 16 05 06 0c 02 09 04 0a 0b     ................
    38d5:	01 02 17 11 05 06 01 02 14 11 12 06 07 18 10 19     ................
    38e5:	0a 1a                                               ..

000038e7 <BGMap>:
    38e7:	1e 1c 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    38f7:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    3907:	02 03 04 04 04 04 04 04 05 05 05 05 05 05 05 05     ................
    3917:	05 05 05 05 05 06 04 04 04 04 04 07 05 08 09 0a     ................
    3927:	0b 0b 0b 0b 0b 0b 0c 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3937:	0d 0d 0d 0e 0b 0b 0b 0b 0b 0f 0d 10 09 0a 0b 0b     ................
    3947:	0b 0b 0b 0b 0c 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3957:	0d 0e 0b 0b 0b 0b 0b 0f 0d 10 09 0a 0b 0b 0b 0b     ................
    3967:	0b 0b 0c 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0e     ................
    3977:	0b 0b 0b 0b 0b 0f 0d 10 11 12 13 13 13 13 13 13     ................
    3987:	14 12 12 12 12 12 12 12 12 12 12 12 12 15 13 13     ................
    3997:	13 13 13 13 12 16 17 18 18 18 18 18 18 18 18 18     ................
    39a7:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    39b7:	18 18 18 19 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    39c7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    39d7:	0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    39e7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b     ................
    39f7:	1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a07:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d     ................
    3a17:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a27:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d 0d 0d     ................
    3a37:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a47:	0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d 0d 0d 0d 0d     ................
    3a57:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a67:	0d 0d 0d 0d 0d 0d 0d 1b 1a 0d 0d 0d 0d 0d 0d 0d     ................
    3a77:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a87:	0d 0d 0d 0d 0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3a97:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3aa7:	0d 0d 0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ab7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ac7:	0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ad7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b     ................
    3ae7:	1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3af7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d     ................
    3b07:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3b17:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d 0d 0d     ................
    3b27:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3b37:	0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d 0d 0d 0d 0d     ................
    3b47:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3b57:	0d 0d 0d 0d 0d 0d 0d 1b 1a 0d 0d 0d 0d 0d 0d 0d     ................
    3b67:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3b77:	0d 0d 0d 0d 0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3b87:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3b97:	0d 0d 0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3ba7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3bb7:	0d 1b 1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3bc7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b     ................
    3bd7:	1a 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3be7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1a 0d     ................
    3bf7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    3c07:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 1b 1c 01 01 01     ................
    3c17:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    3c27:	01 01 01 01 01 01 01 01 01 1d                       ..........

00003c31 <Song1>:
    3c31:	00 c2 02 00 c1 01 00 c0 00 00 b0 07 7f 00 90 3a     ...............:
    3c41:	64 00 b1 07 5a 00 b2 07 7f 00 92 1f 64 00 b3 07     d...Z.......d...
    3c51:	7f 00 ff 06 01 53 0c 90 3b 64 07 43 64 00 91 47     .....S..;d.Cd..G
    3c61:	64 00 93 04 64 0c 90 3a 64 00 91 47 64 00 93 04     d...d..:d..Gd...
    3c71:	64 07 90 3b 64 00 92 26 64 0c 90 43 64 07 3a 64     d..;d..&d..Cd.:d
    3c81:	00 91 47 64 00 93 03 64 0c 90 3b 64 08 43 64 00     ..Gd...d..;d.Cd.
    3c91:	92 1f 64 0c 90 3a 64 01 93 03 64 02 03 64 02 04     ..d..:d...d..d..
    3ca1:	64 02 90 3b 64 00 91 47 64 00 92 1f 64 00 93 04     d..;d..Gd...d...
    3cb1:	64 0c 90 43 64 00 91 47 64 00 93 04 64 07 90 41     d..Cd..Gd...d..A
    3cc1:	64 00 92 21 64 0c 90 40 64 08 3f 64 00 91 47 64     d..!d..@d.?d..Gd
    3cd1:	00 92 23 64 00 93 03 64 0c 90 3e 64 07 3c 64 00     ..#d...d..>d.<d.
    3ce1:	92 24 64 13 90 3c 64 00 91 48 64 00 93 04 64 0c     .$d..<d..Hd...d.
    3cf1:	90 3e 64 00 91 48 64 00 93 04 64 07 90 3f 64 00     .>d..Hd...d..?d.
    3d01:	92 1f 64 0c 90 40 64 08 48 64 00 91 48 64 00 93     ..d..@d.Hd..Hd..
    3d11:	03 64 13 90 46 64 00 92 24 64 13 90 45 64 00 91     .d..Fd..$d..Ed..
    3d21:	48 64 00 92 24 64 00 93 04 64 0c 91 48 64 00 93     Hd..$d...d..Hd..
    3d31:	04 64 08 90 3f 64 00 92 23 64 0c 90 40 64 07 3c     .d..?d..#d..@d.<
    3d41:	64 00 91 48 64 00 92 21 64 00 93 03 64 0c 03 64     d..Hd..!d...d..d
    3d51:	07 92 1f 64 0c 90 47 64 07 46 64 00 91 47 64 00     ...d..Gd.Fd..Gd.
    3d61:	93 04 64 0d 90 47 64 00 91 47 64 00 93 04 64 07     ..d..Gd..Gd...d.
    3d71:	90 45 64 00 92 26 64 0c 90 43 64 07 91 47 64 00     .Ed..&d..Cd..Gd.
    3d81:	93 03 64 0c 90 47 64 07 46 64 00 92 1f 64 0c 90     ..d..Gd.Fd...d..
    3d91:	47 64 01 93 03 64 02 03 64 02 04 64 03 90 45 64     Gd...d..d..d..Ed
    3da1:	00 91 47 64 00 93 04 64 0c 90 43 64 00 91 47 64     ..Gd...d..Cd..Gd
    3db1:	00 93 04 64 07 92 26 64 0c 90 45 64 07 43 64 00     ...d..&d..Ed.Cd.
    3dc1:	91 47 64 00 93 03 64 0a 03 64 02 90 45 64 08 47     .Gd...d..d..Ed.G
    3dd1:	64 00 91 48 64 00 92 24 64 00 93 04 64 13 90 48     d..Hd..$d...d..H
    3de1:	64 13 42 64 13 43 64 14 3f 64 0c 40 64 07 3f 64     d.Bd.Cd.?d.@d.?d
    3df1:	0c 40 64 07 3b 64 14 3c 64 13 37 64 00 92 1f 64     .@d.;d.<d.7d...d
    3e01:	0c 90 36 64 07 3a 64 00 91 47 64 00 93 04 64 0c     ..6d.:d..Gd...d.
    3e11:	90 3b 64 00 91 47 64 00 93 04 64 07 90 3e 64 00     .;d..Gd...d..>d.
    3e21:	92 26 64 0d 90 3b 64 07 43 64 00 91 47 64 00 93     .&d..;d.Cd..Gd..
    3e31:	03 64 13 90 41 64 00 92 1f 64 0c 90 37 64 01 93     .d..Ad...d..7d..
    3e41:	03 64 02 03 64 02 04 64 02 90 40 64 00 91 47 64     .d..d..d..@d..Gd
    3e51:	00 93 04 64 0c 90 37 64 00 91 47 64 00 93 04 64     ...d..7d..Gd...d
    3e61:	08 90 3e 64 00 92 26 64 0c 90 3f 64 07 40 64 00     ..>d..&d..?d.@d.
    3e71:	91 47 64 00 93 03 64 0c 90 37 64 07 3c 64 00 92     .Gd...d..7d.<d..
    3e81:	24 64 14 90 3c 64 00 91 48 64 00 93 04 64 0c 90     $d..<d..Hd...d..
    3e91:	3e 64 00 91 48 64 00 93 04 64 07 90 3f 64 00 92     >d..Hd...d..?d..
    3ea1:	1f 64 0c 90 40 64 07 48 64 00 91 48 64 00 93 03     .d..@d.Hd..Hd...
    3eb1:	64 13 90 46 64 00 92 24 64 14 90 45 64 00 91 48     d..Fd..$d..Ed..H
    3ec1:	64 00 92 24 64 00 93 04 64 0c 91 48 64 00 93 04     d..$d...d..Hd...
    3ed1:	64 07 90 43 64 00 92 26 64 13 90 40 64 00 91 48     d..Cd..&d..@d..H
    3ee1:	64 00 92 28 64 00 93 03 64 0c 03 64 08 90 45 64     d..(d...d..d..Ed
    3ef1:	00 91 48 64 00 92 29 64 00 93 03 64 13 90 45 64     ..Hd..)d...d..Ed
    3f01:	00 91 48 64 00 92 29 64 00 93 03 64 0c 03 64 02     ..Hd..)d...d..d.
    3f11:	92 1f 64 05 90 47 64 00 91 48 64 00 92 2b 64 00     ..d..Gd..Hd..+d.
    3f21:	93 03 64 13 90 45 64 00 91 48 64 00 92 2b 64 00     ..d..Ed..Hd..+d.
    3f31:	93 03 64 14 90 43 64 00 91 4c 64 00 92 2b 64 00     ..d..Cd..Ld..+d.
    3f41:	93 03 64 0c 90 42 64 02 93 03 64 03 03 64 02 90     ..d..Bd...d..d..
    3f51:	43 64 00 91 4c 64 00 92 2b 64 00 93 03 64 0c 90     Cd..Ld..+d...d..
    3f61:	45 64 00 93 03 64 03 92 21 64 04 91 4c 64 00 92     Ed...d..!d..Ld..
    3f71:	2d 64 00 93 03 64 0c 90 43 64 08 40 64 00 91 4c     -d...d..Cd.@d..L
    3f81:	64 00 92 2d 64 00 93 03 64 13 90 3e 64 00 91 4a     d..-d...d..>d..J
    3f91:	64 00 92 24 64 00 93 03 64 13 90 3e 64 00 91 4a     d..$d...d..>d..J
    3fa1:	64 00 92 24 64 00 93 03 64 0e 03 64 06 90 43 64     d..$d...d..d..Cd
    3fb1:	00 91 4c 64 00 92 1f 64 00 93 03 64 0c 90 3f 64     ..Ld...d...d..?d
    3fc1:	07 3e 64 00 91 4a 64 00 92 1f 64 00 93 03 64 13     .>d..Jd...d...d.
    3fd1:	90 3c 64 00 91 4c 64 00 92 24 64 00 93 03 64 0a     .<d..Ld..$d...d.
    3fe1:	03 64 09 90 37 64 00 91 4a 64 00 92 1f 64 00 93     .d..7d..Jd...d..
    3ff1:	03 64 14 90 48 64 00 91 48 64 00 92 30 64 00 93     .d..Hd..Hd..0d..
    4001:	03 64 26 92 1f 64 14 91 47 64 00 93 04 64 0c 91     .d&..d..Gd...d..
    4011:	47 64 00 93 04 64 07 92 26 64 13 91 47 64 00 93     Gd...d..&d..Gd..
    4021:	03 64 13 92 1f 64 0d 93 03 64 02 03 64 02 04 64     .d...d...d..d..d
    4031:	03 91 47 64 00 92 1f 64 00 93 04 64 0c 91 47 64     ..Gd...d...d..Gd
    4041:	00 93 04 64 07 92 21 64 13 91 47 64 00 92 23 64     ...d..!d..Gd..#d
    4051:	00 93 03 64 14 92 24 64 13 91 48 64 00 93 04 64     ...d..$d..Hd...d
    4061:	0c 91 48 64 00 93 04 64 07 92 2b 64 14 91 48 64     ..Hd...d..+d..Hd
    4071:	00 93 03 64 13 91 48 64 00 92 30 64 13 93 04 64     ...d..Hd..0d...d
    4081:	0c 04 64 1b 03 64 09 ff 06 01 45 00 ff 2f 00        ..d..d....E../.

00004090 <Song2>:
    4090:	00 c3 75 00 c2 00 00 c1 06 00 c0 05 00 b0 07 7f     ..u.............
    40a0:	00 b1 07 7f 00 07 7e 00 07 7e 00 b2 07 7e 00 07     ......~..~...~..
    40b0:	7e 03 90 50 64 00 91 28 70 00 93 08 7f 00 ff 06     ~..Pd..(p.......
    40c0:	01 53 09 90 51 64 09 50 64 00 93 09 7f 09 90 51     .S..Qd.Pd......Q
    40d0:	64 00 93 09 7f 08 90 53 64 00 93 08 7f 12 90 51     d......Sd......Q
    40e0:	64 00 91 26 70 00 93 09 7f 12 90 50 64 00 91 28     d..&p......Pd..(
    40f0:	6d 00 93 08 7f 11 90 51 64 00 93 09 7f 12 90 50     m......Qd......P
    4100:	64 00 91 29 6e 00 93 08 7f 12 90 4d 64 00 93 09     d..)n......Md...
    4110:	7f 12 90 4c 64 00 91 28 70 00 93 08 7f 08 90 4d     ...Ld..(p......M
    4120:	64 09 4c 64 00 93 09 7f 09 90 4d 64 00 93 09 7f     d.Ld......Md....
    4130:	09 90 50 64 00 93 08 7f 12 90 4d 64 00 91 26 70     ..Pd......Md..&p
    4140:	00 93 09 7f 11 90 4c 64 00 91 28 6d 00 93 08 7f     ......Ld..(m....
    4150:	12 90 4d 64 00 93 09 7f 12 90 4c 64 00 91 29 6e     ..Md......Ld..)n
    4160:	00 93 08 7f 11 90 4a 64 00 93 09 7f 12 90 47 64     ......Jd......Gd
    4170:	00 91 28 70 00 93 08 7f 09 90 48 64 09 47 64 00     ..(p......Hd.Gd.
    4180:	93 09 7f 09 90 48 64 00 93 09 7f 08 90 4b 64 00     .....Hd......Kd.
    4190:	93 08 7f 12 90 48 64 00 91 26 70 00 93 09 7f 12     .....Hd..&p.....
    41a0:	90 47 64 00 91 28 6d 00 93 08 7f 11 90 48 64 00     .Gd..(m......Hd.
    41b0:	93 09 7f 12 90 47 64 00 91 29 6e 00 93 08 7f 12     .....Gd..)n.....
    41c0:	90 45 64 00 93 09 7f 11 90 44 64 00 91 28 70 00     .Ed......Dd..(p.
    41d0:	93 08 7f 09 90 45 64 09 44 64 00 93 09 7f 09 90     .....Ed.Dd......
    41e0:	45 64 00 93 09 7f 09 90 44 64 00 93 08 7f 12 90     Ed......Dd......
    41f0:	41 64 00 91 26 70 00 93 09 7f 11 90 40 64 00 91     Ad..&p......@d..
    4200:	28 6d 00 93 08 7f 12 09 7f 23 09 7f 12 90 50 64     (m.......#....Pd
    4210:	00 91 28 70 00 93 08 7f 09 90 51 64 09 50 64 00     ..(p......Qd.Pd.
    4220:	93 09 7f 08 90 51 64 00 93 09 7f 09 90 53 64 00     .....Qd......Sd.
    4230:	93 08 7f 12 90 51 64 00 91 26 70 00 93 09 7f 12     .....Qd..&p.....
    4240:	90 50 64 00 91 28 6d 00 93 08 7f 11 90 51 64 00     .Pd..(m......Qd.
    4250:	93 09 7f 12 90 50 64 00 91 29 6e 00 93 08 7f 12     .....Pd..)n.....
    4260:	90 4d 64 00 93 09 7f 11 90 4c 64 00 91 28 70 00     .Md......Ld..(p.
    4270:	93 08 7f 09 90 4d 64 09 4c 64 00 93 09 7f 09 90     .....Md.Ld......
    4280:	4d 64 00 93 09 7f 09 90 50 64 00 93 08 7f 11 90     Md......Pd......
    4290:	4d 64 00 91 26 70 00 93 09 7f 12 90 4c 64 00 91     Md..&p......Ld..
    42a0:	28 6d 00 93 08 7f 12 90 4d 64 00 93 09 7f 11 90     (m......Md......
    42b0:	4c 64 00 91 29 6e 00 93 08 7f 12 90 4a 64 00 93     Ld..)n......Jd..
    42c0:	09 7f 12 90 47 64 00 91 28 70 00 93 08 7f 09 90     ....Gd..(p......
    42d0:	48 64 09 47 64 00 93 09 7f 08 90 48 64 00 93 09     Hd.Gd......Hd...
    42e0:	7f 09 90 4b 64 00 93 08 7f 12 90 48 64 00 91 26     ...Kd......Hd..&
    42f0:	70 00 93 09 7f 12 90 47 64 00 91 28 6d 00 93 08     p......Gd..(m...
    4300:	7f 11 90 48 64 00 93 09 7f 12 90 47 64 00 91 29     ...Hd......Gd..)
    4310:	6e 00 93 08 7f 12 90 45 64 00 93 09 7f 11 90 44     n......Ed......D
    4320:	64 00 91 28 70 00 93 08 7f 09 90 45 64 09 44 64     d..(p......Ed.Dd
    4330:	00 93 09 7f 09 90 45 64 00 93 09 7f 09 90 44 64     ......Ed......Dd
    4340:	00 93 08 7f 11 90 41 64 00 91 26 70 00 93 09 7f     ......Ad..&p....
    4350:	12 90 40 64 00 91 28 6d 12 93 09 7f 11 08 7f 04     ..@d..(m........
    4360:	08 66 04 08 66 0a 09 7f 12 90 47 64 00 91 28 70     .f..f.....Gd..(p
    4370:	00 93 08 7f 09 90 48 64 08 47 64 00 93 09 7f 09     ......Hd.Gd.....
    4380:	90 48 64 00 93 09 7f 09 90 4b 64 00 93 08 7f 12     .Hd......Kd.....
    4390:	90 48 64 00 91 26 70 00 93 09 7f 12 90 47 64 00     .Hd..&p......Gd.
    43a0:	91 28 6d 00 93 08 7f 11 90 48 64 00 93 09 7f 12     .(m......Hd.....
    43b0:	90 47 64 00 91 29 6e 00 93 08 7f 12 90 45 64 00     .Gd..)n......Ed.
    43c0:	93 09 7f 11 90 44 64 00 91 28 70 00 93 08 7f 09     .....Dd..(p.....
    43d0:	90 45 64 09 44 64 00 93 09 7f 09 90 45 64 00 93     .Ed.Dd......Ed..
    43e0:	09 7f 09 90 44 64 00 93 08 7f 11 90 41 64 00 91     ....Dd......Ad..
    43f0:	26 70 00 93 09 7f 12 90 40 64 00 91 28 6d 00 93     &p......@d..(m..
    4400:	08 7f 12 09 7f 11 09 7f 12 09 7f 12 90 47 64 00     .............Gd.
    4410:	91 28 70 00 93 08 7f 09 90 48 64 08 47 64 00 93     .(p......Hd.Gd..
    4420:	09 7f 09 90 48 64 00 93 09 7f 09 90 4b 64 00 93     ....Hd......Kd..
    4430:	08 7f 0e 91 26 70 04 90 48 64 00 93 09 7f 11 90     ....&p..Hd......
    4440:	4b 64 00 91 28 6d 00 93 08 7f 12 90 48 64 00 93     Kd..(m......Hd..
    4450:	09 7f 12 90 47 64 00 91 29 6e 00 93 08 7f 12 90     ....Gd..)n......
    4460:	45 64 00 93 09 7f 11 90 44 64 00 91 28 70 09 90     Ed......Dd..(p..
    4470:	45 64 09 44 64 09 45 64 09 44 64 11 41 64 00 91     Ed.Dd.Ed.Dd.Ad..
    4480:	26 70 12 90 40 64 00 91 28 6d 27 93 09 66 03 09     &p..@d..(m'..f..
    4490:	66 04 09 66 0b 08 66 0a 91 28 66 09 29 66 09 2c     f..f..f..(f.)f.,
    44a0:	66 09 2d 7f 09 2f 72 11 30 7f 12 33 7f 12 30 72     f.-../r.0..3..0r
    44b0:	11 2f 66 12 30 66 12 34 72 08 35 7f 09 34 72 09     ./f.0f.4r.5..4r.
    44c0:	33 72 09 30 66 12 2f 66 11 2d 66 09 2e 66 09 2d     3r.0f./f.-f..f.-
    44d0:	7f 09 2c 66 09 29 66 11 27 72 12 ff 06 01 45 00     ..,f.)f.'r....E.
    44e0:	ff 2f 00                                            ./.

000044e3 <Song3>:
    44e3:	00 c3 73 00 c1 10 00 c2 11 00 c0 0f 00 b0 07 7f     ..s.............
    44f3:	00 07 7f 00 93 12 64 00 ff 06 01 53 10 92 45 64     ......d....S..Ed
    4503:	00 93 13 66 04 92 46 64 04 91 3a 64 08 92 45 64     ...f..Fd..:d..Ed
    4513:	00 93 12 64 10 91 3d 64 00 93 13 66 10 92 46 64     ...d..=d...f..Fd
    4523:	00 91 36 64 00 93 12 64 08 92 46 64 00 91 36 64     ..6d...d..Fd..6d
    4533:	08 93 13 66 08 92 42 64 00 91 35 64 00 93 12 64     ...f..Bd..5d...d
    4543:	10 12 64 08 91 33 64 00 93 13 66 10 92 43 64 00     ..d..3d...f..Cd.
    4553:	91 31 64 00 93 12 64 04 92 44 64 0c 46 64 00 91     .1d...d..Dd.Fd..
    4563:	31 64 00 93 13 66 10 92 47 64 00 91 35 64 00 93     1d...f..Gd..5d..
    4573:	12 64 08 92 48 64 00 91 38 64 08 93 13 66 08 92     .d..Hd..8d...f..
    4583:	49 64 08 91 31 64 00 93 12 64 10 90 5c 64 08 5e     Id..1d...d..\d.^
    4593:	64 00 91 35 64 00 93 12 64 10 90 5b 64 00 93 12     d..5d...d..[d...
    45a3:	64 08 90 5c 64 00 91 30 64 00 93 13 66 10 91 2f     d..\d..0d...f../
    45b3:	64 00 93 12 64 10 92 46 64 00 93 13 66 04 92 47     d...d..Fd...f..G
    45c3:	64 04 91 33 64 08 92 42 64 00 93 12 64 10 91 36     d..3d..Bd...d..6
    45d3:	64 00 93 13 66 10 92 47 64 00 91 2f 64 00 93 12     d...f..Gd../d...
    45e3:	64 08 92 47 64 00 91 2f 64 08 93 13 66 08 92 4b     d..Gd../d...f..K
    45f3:	64 00 91 33 64 00 93 12 64 10 12 64 08 91 36 64     d..3d...d..d..6d
    4603:	00 93 13 66 10 92 49 64 00 91 36 64 00 93 12 64     ...f..Id..6d...d
    4613:	10 92 4b 64 00 93 13 66 10 92 49 64 00 91 36 64     ..Kd...f..Id..6d
    4623:	00 93 12 64 0a 92 48 64 00 91 3a 64 06 93 13 66     ...d..Hd..:d...f
    4633:	05 92 47 64 00 91 3d 64 0b 90 54 64 00 92 46 64     ..Gd..=d..Td..Fd
    4643:	00 91 36 64 00 93 12 64 04 90 55 64 0c 57 64 00     ..6d...d..Ud.Wd.
    4653:	91 36 64 00 93 13 66 08 90 55 64 00 91 3a 64 00     .6d...f..Ud..:d.
    4663:	93 12 64 08 12 66 08 90 54 64 00 93 12 64 08 90     ..d..f..Td...d..
    4673:	53 64 00 91 3d 64 00 93 13 66 08 90 52 64 08 4e     Sd..=d...f..Rd.N
    4683:	64 00 91 2f 64 00 93 12 64 08 13 66 08 90 52 64     d../d...d..f..Rd
    4693:	00 92 4a 64 04 90 53 64 00 92 4b 64 04 91 33 64     ..Jd..Sd..Kd..3d
    46a3:	08 90 4e 64 00 92 47 64 00 93 12 64 08 13 66 08     ..Nd..Gd...d..f.
    46b3:	91 36 64 08 90 53 64 00 92 4b 64 08 91 2f 64 00     .6d..Sd..Kd../d.
    46c3:	93 12 64 08 13 66 08 90 57 64 00 92 4e 64 00 91     ..d..f..Wd..Nd..
    46d3:	2f 64 00 93 13 66 08 91 33 64 00 93 13 66 08 90     /d...f..3d...f..
    46e3:	5a 64 00 92 51 64 00 93 13 66 08 13 66 04 90 59     Zd..Qd...f..f..Y
    46f3:	64 00 92 50 64 04 91 36 64 00 93 13 66 08 90 57     d..Pd..6d...f..W
    4703:	64 00 92 4e 64 00 93 13 66 08 90 55 64 00 91 36     d..Nd...f..Ud..6
    4713:	64 00 93 12 64 10 90 55 64 00 93 13 66 08 91 3a     d...d..Ud...f..:
    4723:	64 08 90 55 64 00 93 12 64 0c 90 54 64 04 91 3d     d..Ud...d..Td..=
    4733:	64 00 93 13 66 08 90 53 64 08 57 64 00 91 33 64     d...f..Sd.Wd..3d
    4743:	00 93 12 64 10 90 57 64 00 93 13 66 08 91 36 64     ...d..Wd...f..6d
    4753:	00 93 12 64 08 90 57 64 08 93 12 64 04 90 55 64     ...d..Wd...d..Ud
    4763:	04 91 3a 64 00 93 13 66 08 90 52 64 08 50 64 00     ..:d...f..Rd.Pd.
    4773:	91 31 64 00 93 12 64 08 90 50 64 08 93 13 66 08     .1d...d..Pd...f.
    4783:	90 52 64 00 91 35 64 08 93 12 64 08 90 53 64 08     .Rd..5d...d..Sd.
    4793:	54 64 00 91 38 64 00 93 13 66 10 90 55 64 00 91     Td..8d...f..Ud..
    47a3:	3b 64 00 93 12 64 10 90 57 64 00 93 13 66 08 91     ;d...d..Wd...f..
    47b3:	33 64 00 93 12 64 10 90 52 64 00 93 12 64 08 90     3d...d..Rd...d..
    47c3:	50 64 00 91 34 64 00 93 13 66 10 90 4e 64 00 91     Pd..4d...f..Nd..
    47d3:	36 64 00 93 12 64 10 13 66 08 91 3a 64 08 93 12     6d...d..f..:d...
    47e3:	64 10 91 3d 64 00 93 13 66 10 12 64 08 91 31 64     d..=d...f..d..1d
    47f3:	08 90 61 64 00 91 31 64 00 93 13 66 08 14 66 04     ..ad..1d...f..f.
    4803:	90 61 3c 04 60 5a 00 91 33 64 00 93 14 66 08 14     .a<.`Z..3d...f..
    4813:	66 04 90 60 37 04 5f 50 00 91 35 64 00 93 14 66     f..`7._P..5d...f
    4823:	0c 90 5f 32 04 50 55 00 91 36 64 00 93 14 66 02     .._2.PU..6d...f.
    4833:	90 51 64 02 93 14 66 0c 91 36 64 10 90 50 55 00     .Qd...f..6d..PU.
    4843:	91 36 64 00 93 14 66 02 90 51 64 02 93 14 66 1c     .6d...f..Qd...f.
    4853:	90 50 55 00 91 36 64 00 93 13 66 02 90 51 64 02     .PU..6d...f..Qd.
    4863:	93 12 66 0c 90 4e 64 00 91 36 64 00 93 13 66 08     ..f..Nd..6d...f.
    4873:	90 4c 64 00 91 3a 64 00 93 12 64 08 12 66 08 12     .Ld..:d...d..f..
    4883:	64 08 90 4e 64 00 91 3d 64 00 93 13 66 10 90 50     d..Nd..=d...f..P
    4893:	55 00 91 36 64 00 93 12 64 02 90 51 64 0e 50 55     U..6d...d..Qd.PU
    48a3:	00 91 36 64 00 93 13 66 02 90 51 64 0e 50 55 00     ..6d...f..Qd.PU.
    48b3:	91 36 64 00 93 12 64 02 90 51 64 0e 4e 64 00 93     .6d...d..Qd.Nd..
    48c3:	13 66 08 90 4e 64 00 91 36 64 08 90 4c 64 00 93     .f..Nd..6d..Ld..
    48d3:	12 64 08 90 48 64 00 91 36 64 08 90 48 64 00 93     .d..Hd..6d..Hd..
    48e3:	13 66 08 90 47 64 00 91 36 64 00 93 12 64 08 90     .f..Gd..6d...d..
    48f3:	45 64 00 91 3a 64 08 90 42 64 00 93 12 64 08 90     Ed..:d..Bd...d..
    4903:	42 64 00 91 3d 64 00 93 13 66 08 90 42 64 08 4e     Bd..=d...f..Bd.N
    4913:	64 00 91 2f 64 00 93 12 64 05 90 47 64 05 4e 64     d../d...d..Gd.Nd
    4923:	06 47 64 00 91 2f 64 00 93 13 66 05 90 4e 64 05     .Gd../d...f..Nd.
    4933:	47 64 03 4e 64 03 57 64 00 91 2f 64 00 93 12 64     Gd.Nd.Wd../d...d
    4943:	08 90 57 64 08 93 13 66 08 90 57 64 08 57 64 00     ..Wd...f..Wd.Wd.
    4953:	91 2f 64 00 93 12 64 08 90 53 64 08 53 64 00 91     ./d...d..Sd.Sd..
    4963:	2f 64 00 93 13 66 08 91 33 64 08 90 5a 64 00 93     /d...f..3d..Zd..
    4973:	12 66 08 90 5a 64 00 93 12 64 08 90 57 64 00 91     .f..Zd...d..Wd..
    4983:	36 64 00 93 13 66 08 90 53 64 08 4e 64 00 91 32     6d...f..Sd.Nd..2
    4993:	64 00 93 12 64 10 91 32 64 00 93 14 66 08 14 66     d...d..2d...f..f
    49a3:	08 90 51 64 00 91 36 64 00 93 14 66 08 14 66 08     ..Qd..6d...f..f.
    49b3:	90 53 64 00 91 39 64 08 34 64 08 93 12 64 08 91     .Sd..9d.4d...d..
    49c3:	34 64 08 90 52 64 00 93 13 66 08 91 34 64 00 93     4d..Rd...f..4d..
    49d3:	12 64 08 90 58 64 00 91 38 64 08 93 12 64 08 90     .d..Xd..8d...d..
    49e3:	59 64 00 91 3b 64 00 93 13 66 02 90 5a 64 0e 91     Yd..;d...f..Zd..
    49f3:	36 64 00 93 12 64 10 90 59 64 00 91 36 64 00 93     6d...d..Yd..6d..
    4a03:	13 66 02 90 5a 64 0e 91 36 64 00 93 12 64 10 90     .f..Zd..6d...d..
    4a13:	59 64 00 93 13 66 02 90 5a 64 06 59 64 00 91 35     Yd...f..Zd.Yd..5
    4a23:	64 08 93 12 64 08 91 35 64 08 90 55 64 00 93 13     d...d..5d..Ud...
    4a33:	66 08 91 35 64 00 93 12 64 08 90 52 64 00 91 3a     f..5d...d..Rd..:
    4a43:	64 00 93 12 66 08 12 64 08 90 5c 64 00 91 3d 64     d...f..d..\d..=d
    4a53:	00 93 13 66 02 90 5d 64 06 5c 64 02 5d 64 06 5c     ...f..]d.\d.]d.\
    4a63:	64 00 91 33 64 00 93 12 64 02 90 5d 64 06 5c 64     d..3d...d..]d.\d
    4a73:	02 5d 64 06 5c 64 00 91 33 64 00 93 13 66 02 90     .]d.\d..3d...f..
    4a83:	5d 64 06 5c 64 08 5d 64 00 91 33 64 00 93 12 64     ]d.\d.]d..3d...d
    4a93:	08 90 5d 64 08 93 13 66 08 91 33 64 08 90 5d 64     ..]d...f..3d..]d
    4aa3:	00 93 12 64 08 90 5d 64 00 91 33 64 08 90 5a 64     ...d..]d..3d..Zd
    4ab3:	00 93 13 66 08 90 58 64 00 5a 64 00 91 33 64 00     ...f..Xd.Zd..3d.
    4ac3:	93 12 64 08 90 58 64 00 91 36 64 08 90 54 64 00     ..d..Xd..6d..Td.
    4ad3:	93 12 64 08 90 54 64 00 91 3a 64 00 93 13 66 08     ..d..Td..:d...f.
    4ae3:	90 53 64 08 51 64 00 91 32 64 00 93 12 64 10 90     .Sd.Qd..2d...d..
    4af3:	55 64 00 91 32 64 00 93 13 66 08 90 55 64 08 55     Ud..2d...f..Ud.U
    4b03:	64 00 91 32 64 00 93 12 64 08 90 55 64 08 53 64     d..2d...d..Ud.Sd
    4b13:	00 93 13 66 08 90 53 64 00 91 32 64 08 90 58 64     ...f..Sd..2d..Xd
    4b23:	00 93 12 64 08 91 32 64 08 90 55 64 08 55 64 00     ...d..2d..Ud.Ud.
    4b33:	91 32 64 00 93 12 64 08 90 53 64 00 91 36 64 08     .2d...d..Sd..6d.
    4b43:	90 55 64 00 93 12 64 08 91 39 64 00 93 13 66 10     .Ud...d..9d...f.
    4b53:	91 31 64 00 93 12 64 08 90 49 64 00 93 13 66 08     .1d...d..Id...f.
    4b63:	90 4e 64 00 91 31 64 08 90 50 64 08 50 64 00 91     .Nd..1d..Pd.Pd..
    4b73:	36 64 00 93 12 64 08 90 55 64 00 91 38 64 00 93     6d...d..Ud..8d..
    4b83:	13 66 08 90 5a 64 08 5c 64 08 61 64 00 5c 64 00     .f..Zd.\d.ad.\d.
    4b93:	91 37 64 00 93 12 64 08 90 61 64 00 91 37 64 00     .7d...d..ad..7d.
    4ba3:	93 14 66 08 14 66 08 14 66 08 90 61 64 00 91 38     ..f..f..f..ad..8
    4bb3:	64 08 90 58 64 00 91 31 64 00 93 14 66 08 91 33     d..Xd..1d...f..3
    4bc3:	64 00 93 14 66 08 91 35 64 00 93 14 66 08 ff 06     d...f..5d...f...
    4bd3:	01 45 00 ff 2f 00                                   .E../.

00004bd9 <Song4>:
    4bd9:	00 c1 18 00 c0 17 00 c2 19 00 c3 73 06 93 1a 6c     ...........s...l
    4be9:	00 b3 07 7f 00 b2 07 7f 00 92 38 6c 00 b0 07 7f     ..........8l....
    4bf9:	00 b1 07 7f 00 91 20 6e 00 ff 06 01 53 0c 93 1c     ...... n....S...
    4c09:	6c 0d 1b 6c 00 91 24 6e 0c 93 1c 6c 00 91 27 6e     l..l..$n...l..'n
    4c19:	0d 93 1a 6c 00 91 25 6e 06 25 6e 07 93 1c 6c 00     ...l..%n.%n...l.
    4c29:	91 25 6e 0c 93 1b 6c 00 91 29 6e 0d 93 1a 6c 00     .%n...l..)n...l.
    4c39:	91 2c 6e 0c b3 07 7f 00 93 1a 6c 00 91 20 6e 0d     .,n.......l.. n.
    4c49:	93 1c 6c 0c 1b 6c 00 91 24 6e 0d 93 1c 6c 00 91     ..l..l..$n...l..
    4c59:	27 6e 0c 93 1a 6c 00 91 25 6e 07 25 6e 06 93 1c     'n...l..%n.%n...
    4c69:	6c 00 91 1d 6e 0c 93 1b 6c 00 92 36 6c 00 91 1e     l...n...l..6l...
    4c79:	6e 0d 93 1a 6c 00 91 1f 6e 0d b3 07 7f 00 93 1a     n...l...n.......
    4c89:	6c 00 92 38 6c 00 91 20 6e 0c 93 1c 6c 0d 1b 6c     l..8l.. n...l..l
    4c99:	00 91 24 6e 0c 93 1c 6c 00 91 27 6e 0d 93 1a 6c     ..$n...l..'n...l
    4ca9:	00 91 25 6e 06 25 6e 06 93 1c 6c 00 91 25 6e 0d     ..%n.%n...l..%n.
    4cb9:	93 1b 6c 00 91 29 6e 0c 93 1a 6c 00 91 2c 6e 0d     ..l..)n...l..,n.
    4cc9:	93 1a 6c 00 91 20 6e 0c 93 1c 6c 00 91 20 6e 0d     ..l.. n...l.. n.
    4cd9:	93 1b 6c 00 91 24 6e 0d 93 1a 6c 00 91 27 6e 06     ..l..$n...l..'n.
    4ce9:	93 1a 6c 06 1b 6c 00 91 25 6e 06 25 6e 07 93 1a     ..l..l..%n.%n...
    4cf9:	6c 00 91 29 6e 0c 93 1b 6c 00 91 2a 6e 0d 93 1a     l..)n...l..*n...
    4d09:	6c 00 92 36 6c 00 91 2b 6e 0c 93 1a 6c 00 b3 07     l..6l..+n...l...
    4d19:	7f 00 92 38 6c 00 91 20 6e 0d 93 1c 6c 0c 1b 6c     ...8l.. n...l..l
    4d29:	00 91 24 6e 0d 93 1c 6c 00 91 27 6e 0c 93 1a 6c     ..$n...l..'n...l
    4d39:	00 91 25 6e 07 25 6e 06 93 1c 6c 00 91 25 6e 0d     ..%n.%n...l..%n.
    4d49:	93 1b 6c 00 91 29 6e 0c 93 1a 6c 00 91 2c 6e 0d     ..l..)n...l..,n.
    4d59:	b3 07 7f 00 93 1a 6c 00 91 20 6e 0c 93 1c 6c 0d     ......l.. n...l.
    4d69:	1b 6c 00 91 24 6e 0c 93 1c 6c 00 91 27 6e 0d 93     .l..$n...l..'n..
    4d79:	1a 6c 00 91 25 6e 06 25 6e 06 93 1c 6c 00 91 1d     .l..%n.%n...l...
    4d89:	6e 0d 93 1b 6c 00 92 36 6c 00 91 1e 6e 0c 93 1a     n...l..6l...n...
    4d99:	6c 00 91 1f 6e 0d b3 07 7f 00 93 1a 6c 00 92 38     l...n.......l..8
    4da9:	6c 00 91 20 6e 0d 93 1c 6c 0c 1b 6c 00 91 24 6e     l.. n...l..l..$n
    4db9:	0d 93 1c 6c 00 91 27 6e 0c 93 1a 6c 00 91 25 6e     ...l..'n...l..%n
    4dc9:	06 25 6e 07 93 1c 6c 00 91 25 6e 0c 93 1b 6c 00     .%n...l..%n...l.
    4dd9:	91 29 6e 0d 93 1a 6c 00 91 2c 6e 0c 93 1a 6c 00     .)n...l..,n...l.
    4de9:	91 20 6e 0d 93 1c 6c 00 91 20 6e 0c 93 1b 6c 00     . n...l.. n...l.
    4df9:	91 24 6e 0d 93 1a 6c 00 91 27 6e 06 93 1a 6c 07     .$n...l..'n...l.
    4e09:	1b 6c 00 91 25 6e 06 25 6e 06 93 1a 6c 00 91 29     .l..%n.%n...l..)
    4e19:	6e 0d 93 1b 6c 00 91 2a 6e 0c 93 1a 6c 00 92 36     n...l..*n...l..6
    4e29:	6c 00 91 2b 6e 0d 93 1a 6c 00 b3 07 7f 00 92 38     l..+n...l......8
    4e39:	6c 00 90 48 6e 00 91 20 6e 0c 93 1c 6c 0d 1b 6c     l..Hn.. n...l..l
    4e49:	00 90 48 6e 00 91 24 6e 0c 93 1c 6c 00 91 27 6e     ..Hn..$n...l..'n
    4e59:	0d 93 1a 6c 00 90 46 6e 00 91 25 6e 06 25 6e 07     ...l..Fn..%n.%n.
    4e69:	93 1c 6c 00 90 46 6e 00 91 25 6e 0c 93 1b 6c 00     ..l..Fn..%n...l.
    4e79:	91 29 6e 0d 93 1a 6c 00 90 46 6e 00 91 2c 6e 0c     .)n...l..Fn..,n.
    4e89:	b3 07 7f 00 93 1a 6c 00 90 48 6e 00 91 20 6e 0d     ......l..Hn.. n.
    4e99:	93 1c 6c 0c 1b 6c 00 90 48 6e 00 91 24 6e 0d 93     ..l..l..Hn..$n..
    4ea9:	1c 6c 00 91 27 6e 0c 93 1a 6c 00 90 49 6e 00 91     .l..'n...l..In..
    4eb9:	25 6e 07 25 6e 06 93 1c 6c 00 90 49 6e 00 91 1d     %n.%n...l..In...
    4ec9:	6e 0c 93 1b 6c 00 91 1e 6e 0d 93 1a 6c 00 92 36     n...l...n...l..6
    4ed9:	6c 00 90 49 6e 00 91 1f 6e 0d b3 07 7f 00 93 1a     l..In...n.......
    4ee9:	6c 00 92 38 6c 00 90 48 6e 00 91 20 6e 0c 93 1c     l..8l..Hn.. n...
    4ef9:	6c 0d 1b 6c 00 90 48 6e 00 91 24 6e 0c 93 1c 6c     l..l..Hn..$n...l
    4f09:	00 91 27 6e 0d 93 1a 6c 00 90 46 6e 00 91 25 6e     ..'n...l..Fn..%n
    4f19:	06 25 6e 06 93 1c 6c 00 90 46 6e 00 91 25 6e 0d     .%n...l..Fn..%n.
    4f29:	93 1b 6c 00 91 29 6e 0c 93 1a 6c 00 90 46 6e 00     ..l..)n...l..Fn.
    4f39:	91 2c 6e 0d 93 1a 6c 00 90 48 6e 00 91 20 6e 0c     .,n...l..Hn.. n.
    4f49:	93 1c 6c 00 91 20 6e 0d 93 1b 6c 00 90 48 6e 00     ..l.. n...l..Hn.
    4f59:	91 24 6e 0d 93 1a 6c 00 91 27 6e 06 93 1a 6c 06     .$n...l..'n...l.
    4f69:	1b 6c 00 90 49 6e 00 91 25 6e 06 90 49 6e 00 91     .l..In..%n..In..
    4f79:	25 6e 07 93 1a 6c 00 90 49 6e 00 91 29 6e 06 90     %n...l..In..)n..
    4f89:	49 6e 06 93 1b 6c 00 90 49 6e 00 91 2a 6e 0d 93     In...l..In..*n..
    4f99:	1a 6c 00 92 36 6c 00 90 4b 6e 00 91 2b 6e 0c 93     .l..6l..Kn..+n..
    4fa9:	1a 6c 00 b3 07 7f 00 92 38 6c 00 90 48 6e 00 91     .l......8l..Hn..
    4fb9:	20 6e 0d 93 1c 6c 0c 1b 6c 00 90 48 6e 00 91 24      n...l..l..Hn..$
    4fc9:	6e 0d 93 1c 6c 00 91 27 6e 0c 93 1a 6c 00 90 46     n...l..'n...l..F
    4fd9:	6e 00 91 25 6e 07 25 6e 06 93 1c 6c 00 90 46 6e     n..%n.%n...l..Fn
    4fe9:	00 91 25 6e 0d 93 1b 6c 00 91 29 6e 0c 93 1a 6c     ..%n...l..)n...l
    4ff9:	00 90 46 6e 00 91 2c 6e 0d b3 07 7f 00 93 1a 6c     ..Fn..,n.......l
    5009:	00 90 48 6e 00 91 20 6e 0c 93 1c 6c 0d 1b 6c 00     ..Hn.. n...l..l.
    5019:	90 48 6e 00 91 24 6e 0c 93 1c 6c 00 91 27 6e 0d     .Hn..$n...l..'n.
    5029:	93 1a 6c 00 90 49 6e 00 91 25 6e 06 25 6e 06 93     ..l..In..%n.%n..
    5039:	1c 6c 00 90 49 6e 00 91 1d 6e 0d 93 1b 6c 00 91     .l..In...n...l..
    5049:	1e 6e 0c 93 1a 6c 00 92 36 6c 00 90 49 6e 00 91     .n...l..6l..In..
    5059:	1f 6e 0d b3 07 7f 00 93 1a 6c 00 92 38 6c 00 90     .n.......l..8l..
    5069:	48 6e 00 91 20 6e 0d 93 1c 6c 0c 1b 6c 00 90 48     Hn.. n...l..l..H
    5079:	6e 00 91 24 6e 0d 93 1c 6c 00 91 27 6e 0c 93 1a     n..$n...l..'n...
    5089:	6c 00 90 46 6e 00 91 25 6e 06 25 6e 07 93 1c 6c     l..Fn..%n.%n...l
    5099:	00 90 46 6e 00 91 25 6e 0c 93 1b 6c 00 91 29 6e     ..Fn..%n...l..)n
    50a9:	0d 93 1a 6c 00 90 46 6e 00 91 2c 6e 0c 93 1a 6c     ...l..Fn..,n...l
    50b9:	00 90 48 6e 00 91 20 6e 0d 93 1c 6c 00 91 20 6e     ..Hn.. n...l.. n
    50c9:	0c 93 1b 6c 00 90 48 6e 00 91 24 6e 0d 93 1a 6c     ...l..Hn..$n...l
    50d9:	00 91 27 6e 06 93 1a 6c 07 1b 6c 00 90 49 6e 00     ..'n...l..l..In.
    50e9:	91 25 6e 06 90 49 6e 00 91 25 6e 06 93 1a 6c 00     .%n..In..%n...l.
    50f9:	90 49 6e 00 91 29 6e 06 90 49 6e 07 93 1b 6c 00     .In..)n..In...l.
    5109:	90 49 6e 00 91 2a 6e 0c 93 1a 6c 00 92 36 6c 00     .In..*n...l..6l.
    5119:	90 4b 6e 00 91 2b 6e 0d b3 07 7f 00 07 7f 00 07     .Kn..+n.........
    5129:	7f 00 07 7f 00 07 7f 00 07 7f 00 07 7f 00 07 7f     ................
    5139:	00 07 7f 00 07 7f 00 07 7f 00 07 7f 00 07 7f 00     ................
    5149:	07 7f 00 07 7f 00 07 7f 00 ff 06 01 45 00 ff 2f     ............E../
	...

0000515a <Song5>:
    515a:	00 c2 20 00 c1 1f 00 c3 73 00 c0 1e 00 93 22 64     .. .....s....."d
    516a:	00 91 29 64 00 ff 06 01 53 0b 93 22 64 0b 21 64     ..)d....S.."d.!d
    517a:	0c 22 64 00 91 29 64 0b 93 22 64 00 91 2c 64 0b     ."d..)d.."d..,d.
    518a:	93 22 64 0c 21 64 0b 22 64 00 91 2c 64 0b 93 22     ."d.!d."d..,d.."
    519a:	64 00 91 2e 64 0c 93 22 64 0b 21 64 0c 22 64 00     d...d.."d.!d."d.
    51aa:	91 2e 64 0b 93 22 64 00 91 30 64 0b 93 22 64 00     ..d.."d..0d.."d.
    51ba:	91 2e 64 06 93 22 64 06 22 64 00 91 2c 64 0b 93     ..d.."d."d..,d..
    51ca:	21 64 00 91 27 64 0b 93 22 64 00 91 29 64 0c 93     !d..'d.."d..)d..
    51da:	22 64 0b 21 64 0b 22 64 00 91 29 64 0c 93 22 64     "d.!d."d..)d.."d
    51ea:	00 91 2c 64 0b 93 22 64 0c 21 64 0b 22 64 00 91     ..,d.."d.!d."d..
    51fa:	2c 64 0b 93 22 64 00 91 2e 64 0c 93 22 64 0b 21     ,d.."d...d.."d.!
    520a:	64 0b 22 64 00 91 2e 64 0c 93 22 64 00 91 30 64     d."d...d.."d..0d
    521a:	0b 2e 64 0c 93 22 64 00 91 2c 64 0b 93 22 64 00     ..d.."d..,d.."d.
    522a:	91 27 64 0b 93 22 64 00 91 29 64 0c 93 22 64 0b     .'d.."d..)d.."d.
    523a:	21 64 0b 22 64 00 91 29 64 0c 93 22 64 00 91 2c     !d."d..)d.."d..,
    524a:	64 0b 93 22 64 0b 21 64 0c 22 64 00 91 2c 64 0b     d.."d.!d."d..,d.
    525a:	93 22 64 00 91 2e 64 0c 93 22 64 0b 21 64 0b 22     ."d...d.."d.!d."
    526a:	64 00 91 2e 64 0c 93 22 64 00 91 30 64 0b 93 22     d...d.."d..0d.."
    527a:	64 00 91 2e 64 0b 93 22 66 00 91 2c 64 0c 93 21     d...d.."f..,d..!
    528a:	64 00 91 27 64 0b 90 4b 64 00 93 22 64 00 91 29     d..'d..Kd.."d..)
    529a:	64 0b 90 4d 64 00 93 22 64 0c 90 4b 64 00 93 21     d..Md.."d..Kd..!
    52aa:	64 0b 90 48 64 00 93 22 64 00 91 29 64 0c 90 4b     d..Hd.."d..)d..K
    52ba:	64 00 93 22 64 00 91 2c 64 0b 90 4d 64 00 93 22     d.."d..,d..Md.."
    52ca:	64 0b 21 64 0c 90 4b 64 00 93 22 64 00 91 2c 64     d.!d..Kd.."d..,d
    52da:	0b 93 22 64 00 91 2e 64 0b 90 4d 64 00 93 22 64     .."d...d..Md.."d
    52ea:	0c 90 4b 64 00 93 21 64 0b 90 48 64 00 93 22 64     ..Kd..!d..Hd.."d
    52fa:	00 91 2e 64 0c 90 4b 64 00 93 22 64 00 91 30 64     ...d..Kd.."d..0d
    530a:	0b 90 4d 64 00 93 22 64 00 91 2e 64 0b 90 4b 64     ..Md.."d...d..Kd
    531a:	00 93 22 64 00 91 2c 64 06 93 22 64 06 90 46 64     .."d..,d.."d..Fd
    532a:	00 93 21 64 00 91 27 64 0b 90 48 64 00 93 22 64     ..!d..'d..Hd.."d
    533a:	00 91 29 64 0b 90 48 64 00 93 22 64 0c 21 64 0b     ..)d..Hd.."d.!d.
    534a:	22 64 00 91 29 64 0b 93 22 64 00 91 2c 64 0c 93     "d..)d.."d..,d..
    535a:	22 64 0b 21 64 0c 22 64 00 91 2c 64 0b 93 22 64     "d.!d."d..,d.."d
    536a:	00 91 2e 64 0b 93 22 64 0c 21 64 0b 22 64 00 91     ...d.."d.!d."d..
    537a:	2e 64 0b 93 22 64 00 91 30 64 0c 93 22 64 00 91     .d.."d..0d.."d..
    538a:	2e 64 0b 93 21 64 00 91 2c 64 0c 93 22 64 00 91     .d..!d..,d.."d..
    539a:	27 64 0b 90 4b 64 00 93 22 64 00 91 29 64 0b 90     'd..Kd.."d..)d..
    53aa:	4d 64 00 93 22 64 0c 90 4b 64 00 93 21 64 0b 90     Md.."d..Kd..!d..
    53ba:	48 64 00 93 22 64 00 91 29 64 0b 90 4b 64 00 93     Hd.."d..)d..Kd..
    53ca:	22 64 00 91 2c 64 0c 90 4d 64 00 93 22 64 0b 21     "d..,d..Md.."d.!
    53da:	64 0b 90 4b 64 00 93 22 64 00 91 2c 64 0c 93 22     d..Kd.."d..,d.."
    53ea:	64 00 91 2e 64 0b 90 4d 64 00 93 22 64 0c 90 4b     d...d..Md.."d..K
    53fa:	64 00 93 21 64 0b 90 48 64 00 93 22 64 00 91 2e     d..!d..Hd.."d...
    540a:	64 0b 90 4b 64 00 93 22 64 00 91 30 64 0c 90 4d     d..Kd.."d..0d..M
    541a:	64 00 93 22 64 00 91 2e 64 0b 90 4b 64 00 93 21     d.."d...d..Kd..!
    542a:	64 00 91 2c 64 0b 90 46 64 00 93 22 64 00 91 27     d..,d..Fd.."d..'
    543a:	64 0c 90 48 64 00 93 22 64 00 91 29 64 0b 93 22     d..Hd.."d..)d.."
    544a:	64 0b 21 64 0c 22 64 00 91 29 64 0b 93 22 64 00     d.!d."d..)d.."d.
    545a:	91 2c 64 0c 93 22 64 0b 21 64 0b 22 64 00 91 2c     .,d.."d.!d."d..,
    546a:	64 0c 93 22 64 00 91 2e 64 0b 93 22 64 0b 21 64     d.."d...d.."d.!d
    547a:	0c 22 64 00 91 2e 64 0b 93 22 64 00 91 30 64 06     ."d...d.."d..0d.
    548a:	93 22 64 06 90 48 64 00 93 22 66 00 91 2e 64 0b     ."d..Hd.."f...d.
    549a:	90 4b 64 00 93 21 66 00 91 2c 64 0b 90 4d 64 00     .Kd..!f..,d..Md.
    54aa:	93 22 64 00 91 27 64 0c 90 50 64 00 93 22 64 00     ."d..'d..Pd.."d.
    54ba:	91 29 64 0b 93 22 64 0b 90 4d 64 00 93 21 64 0c     .)d.."d..Md..!d.
    54ca:	90 4b 64 00 93 22 64 00 91 29 64 0b 90 4d 64 00     .Kd.."d..)d..Md.
    54da:	93 22 64 00 91 2c 64 0b 93 22 64 0c 90 4b 64 00     ."d..,d.."d..Kd.
    54ea:	93 21 64 0b 90 48 64 00 93 22 64 00 91 2c 64 0c     .!d..Hd.."d..,d.
    54fa:	90 46 64 00 93 22 64 00 91 2e 64 0b 90 48 64 00     .Fd.."d...d..Hd.
    550a:	93 22 64 0b 90 44 64 00 93 21 64 0c 90 41 64 00     ."d..Dd..!d..Ad.
    551a:	93 22 64 00 91 2e 64 0b 90 46 64 00 93 22 64 00     ."d...d..Fd.."d.
    552a:	91 30 64 0b 90 48 64 00 93 22 64 00 91 2e 64 0c     .0d..Hd.."d...d.
    553a:	90 44 64 00 93 21 64 00 91 2c 64 0b 90 41 64 00     .Dd..!d..,d..Ad.
    554a:	93 22 64 00 91 27 64 0c 90 46 64 00 93 22 64 00     ."d..'d..Fd.."d.
    555a:	91 29 64 0b 90 48 64 00 93 22 64 0b 21 64 0c 22     .)d..Hd.."d.!d."
    556a:	64 00 91 29 64 0b 93 22 64 00 91 2c 64 0b 93 22     d..)d.."d..,d.."
    557a:	64 0c 21 64 0b 22 64 00 91 2c 64 0b 93 22 64 00     d.!d."d..,d.."d.
    558a:	91 2e 64 0c 93 22 64 0b 21 64 0c 22 64 00 91 2e     ..d.."d.!d."d...
    559a:	64 0b 93 22 64 00 91 30 64 0b 90 41 64 00 93 22     d.."d..0d..Ad.."
    55aa:	64 00 91 2e 64 0c 90 44 64 00 93 21 64 00 91 2c     d...d..Dd..!d..,
    55ba:	64 0b 90 46 64 00 93 22 64 00 91 27 64 0b 90 48     d..Fd.."d..'d..H
    55ca:	64 00 93 22 64 00 91 29 64 0c 93 22 64 0b 90 46     d.."d..)d.."d..F
    55da:	64 00 93 21 64 0b 90 44 64 00 93 22 64 00 91 29     d..!d..Dd.."d..)
    55ea:	64 0c 90 46 64 00 93 22 64 00 91 2c 64 0b 93 22     d..Fd.."d..,d.."
    55fa:	64 0c 90 44 64 00 93 21 64 0b 90 41 64 00 93 22     d..Dd..!d..Ad.."
    560a:	64 00 91 2c 64 0b 90 44 64 00 93 22 64 00 91 2e     d..,d..Dd.."d...
    561a:	64 0c 93 22 64 0b 90 41 64 00 93 21 64 0b 90 3f     d.."d..Ad..!d..?
    562a:	64 00 93 22 64 00 91 2e 64 0c 90 41 64 00 93 22     d.."d...d..Ad.."
    563a:	64 00 91 30 64 05 93 22 64 06 90 44 64 00 93 22     d..0d.."d..Dd.."
    564a:	64 00 91 2e 64 06 93 22 64 06 90 46 64 00 93 21     d...d.."d..Fd..!
    565a:	64 00 91 2c 64 0b 90 44 64 00 93 22 64 00 91 27     d..,d..Dd.."d..'
    566a:	64 0b 29 64 22 29 64 0c 2c 64 22 2c 64 0b 2e 64     d.)d")d.,d",d..d
    567a:	22 93 22 64 00 91 2e 64 0c 93 22 64 00 91 30 64     "."d...d.."d..0d
    568a:	05 93 22 64 06 22 64 00 91 2e 64 06 93 22 64 05     .."d."d...d.."d.
    569a:	21 64 00 91 2c 64 0c 93 22 64 00 91 27 64 0b ff     !d..,d.."d..'d..
    56aa:	06 01 45 00 ff 2f 00                                ..E../.

000056b1 <TitleTiles>:
    56b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56e1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    56f1:	ff ff ff ff f6 f6 ff f6 ff ff ff 00 f6 ff ad 5b     ...............[
    5701:	ff ff f6 5b 5b 00 00 00 ff ff ff 5b 5b 00 00 00     ...[[......[[...
    5711:	ff ff ff ff 09 00 00 09 ff ff ff ff 5b a4 00 09     ............[...
    5721:	ff ff ff ff ad ad 00 09 ff ff ff ff f6 ad 00 09     ................
    5731:	ad 5b 09 00 52 a4 ff ff 52 52 09 00 00 09 f6 a4     .[..R...RR......
    5741:	00 09 52 52 a4 a4 ad 52 09 52 52 a4 5b ff ff 5b     ..RR...R.RR.[..[
    5751:	09 52 52 a4 a4 5b 09 52 09 52 52 09 a4 52 52 5b     .RR..[.R.RR..RR[
    5761:	09 52 5b 09 ad 09 52 a4 09 52 5b 09 f6 09 5b ad     .R[...R..R[...[.
    5771:	ff ff ff ff ff 5b 09 00 ff ff ff ff 09 00 00 09     .....[..........
    5781:	ad f6 ff ff f6 ff 00 ff a4 ad ff ff ff 5b ad ff     .............[..
    5791:	a4 ad ff ff ff ff f6 f6 a4 f6 ff ff ff ff f6 a4     ................
    57a1:	ad f6 ff ff ff ff ff 5b f6 ff ff ff ff ff ff 5b     .......[.......[
    57b1:	00 52 ad ff ff ff ff ff a4 ad f6 ff ad 00 a4 ff     .R..............
    57c1:	ff ff ff 52 ff ff ad ad ff ff a4 f6 ad 5b 5b a4     ...R.........[[.
    57d1:	f6 ff 5b ad 52 09 5b a4 ad ff a4 ad 09 52 5b ad     ..[.R.[......R[.
    57e1:	ad ff a4 f6 09 5b a4 f6 ad ff ad f6 52 5b ad f6     .....[......R[..
    57f1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5801:	f6 ff ff ff ff ff ff ff f6 ff ff ff ff ff ff ff     ................
    5811:	f6 ff ff ff ff ff ff ff f6 ff ff ff ff ff ff ff     ................
    5821:	f6 ff f6 ff ff ff ff ff ad f6 ff ff ff ff ff ff     ................
    5831:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5841:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5851:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5861:	ff ff ff ff ff ff f6 ff ff ff ff ff ff a4 00 ad     ................
    5871:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5881:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5891:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58a1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ad a4     ................
    58b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    58e1:	ff ff ff ff ff ff ff ff ad f6 ff ff ff ff f6 ff     ................
    58f1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5901:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5911:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5921:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 09     ................
    5931:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5941:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5951:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5961:	ff ad a4 ad ff ff ff a4 00 00 00 a4 a4 09 00 00     ................
    5971:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5981:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5991:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    59a1:	f6 ff ff ff ff ff f6 ad ff f6 ff ff f6 a4 52 52     ..............RR
    59b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    59c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    59d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    59e1:	a4 a4 a4 a4 ad ff ff ff 09 00 00 00 00 00 ad ff     ................
    59f1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a21:	ff ff ff ff ff ff f6 f6 ff ff ff ff ff ff ff ad     ................
    5a31:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a41:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a61:	ad ad f6 ff ff ff ff ff 5b 00 00 ad f6 ff ff ff     ........[.......
    5a71:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a81:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5a91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5aa1:	f6 ad a4 a4 ad ff ff ff ff a4 09 00 09 f6 f6 ff     ................
    5ab1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ac1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ad1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ae1:	ff ff ff ff ff ff f6 ad ff ff ff ff f6 f6 ad 52     ...............R
    5af1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b21:	a4 a4 f6 ff ff ff ff ff 00 00 00 52 ad ff ff ff     ...........R....
    5b31:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b41:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b61:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b71:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b81:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5b91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ba1:	ff ff f6 f6 f6 ff ff ff ff ff f6 5b 00 00 52 f6     ...........[..R.
    5bb1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5bc1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5bd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5be1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5bf1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c21:	ff ff ff ff ff f6 ff ff 5b 52 5b ad a4 a4 ff ad     ........[R[.....
    5c31:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c41:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c61:	ff ff ff ff ff ff ff ff 09 09 a4 ff 5b 00 5b ff     ............[.[.
    5c71:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c81:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5c91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ca1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5cb1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5cc1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5cd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5ce1:	ff ff ff f6 ad ad ad ff ff ff ff ff a4 09 00 00     ................
    5cf1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d21:	ff ff ff ff ff ff ff ff a4 f6 ff ff ff ff ff ff     ................
    5d31:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d41:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d61:	ff ff ff ff ad 5b a4 ff f6 a4 09 00 00 00 ff ad     .....[..........
    5d71:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d81:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5d91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5da1:	ff ff ff a4 a4 f6 ff ff ff f6 00 00 09 ff ad ff     ................
    5db1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5dc1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5dd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5de1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    5df1:	ff ff ff ff f6 ad 00 09 ff ff ff ff f6 ad 00 09     ................
    5e01:	ff ff ff ff f6 a4 00 09 ff ff ff ff ad a4 00 09     ................
    5e11:	ff ff ff ff f6 a4 00 09 ff ff ff ff ad a4 09 09     ................
    5e21:	ff ff ff ff ad 5b 09 52 ff ff ff ff ad 09 00 52     .....[.R.......R
    5e31:	09 52 5b 09 f6 09 5b ad 52 52 5b 09 f6 09 5b ad     .R[...[.RR[...[.
    5e41:	09 52 5b 09 f6 09 5b ad 52 52 5b 09 f6 52 5b ad     .R[...[.RR[..R[.
    5e51:	52 52 5b 09 f6 52 5b ad 52 5b a4 09 ad 52 5b ad     RR[..R[.R[...R[.
    5e61:	52 5b a4 52 5b 5b 5b ad 52 5b 5b ff 00 ad 5b ad     R[.R[[[.R[[...[.
    5e71:	ff ff ff ff ff ff ff 5b ff ff ff ff ff ff ff 5b     .......[.......[
    5e81:	ff ff ff ff ff ff ff 5b ff ff ff ff ff ff ff 5b     .......[.......[
    5e91:	ff ff ff ff ff ff ff a4 ff ff ff ff ff ff ff a4     ................
    5ea1:	ff ff ff ff ff ff ff 52 ff ff ff ff ff ff ff 09     .......R........
    5eb1:	ad ff ad f6 52 5b ad f6 ad ff ad f6 52 5b ad f6     ....R[......R[..
    5ec1:	ad ff ad f6 52 5b f6 ff ad ff ad ff 52 5b f6 5b     ....R[......R[.[
    5ed1:	ad ff ad ff 52 5b ad 52 ad ff ad ff 52 5b ad f6     ....R[.R....R[..
    5ee1:	ad ff ad ff 52 5b ad f6 f6 ff 5b ff 52 5b ad f6     ....R[....[.R[..
    5ef1:	f6 ad 00 09 09 00 00 00 ff 09 ff f6 f6 00 00 00     ................
    5f01:	ad ff 5b 52 52 52 a4 00 5b ff 5b 52 52 ff f6 00     ..[RRR..[.[RR...
    5f11:	f6 ad 52 52 ad ff a4 00 ad a4 5b a4 ff ff 00 00     ..RR......[.....
    5f21:	f6 ad ad f6 ff a4 00 09 ff f6 f6 ff ff 00 00 00     ................
    5f31:	00 00 00 00 00 5b ff f6 00 09 09 09 00 ff f6 5b     .....[.........[
    5f41:	09 09 09 00 a4 ff 52 52 00 09 09 00 ff 5b 09 52     ......RR.....[.R
    5f51:	00 09 00 ad f6 52 52 5b 09 09 09 ff 5b 09 52 a4     .....RR[....[.R.
    5f61:	09 00 f6 f6 09 52 5b ad 09 09 ff 52 09 5b a4 f6     .....R[....R.[..
    5f71:	ad f6 ff ff f6 5b a4 ff a4 ad ff ad 52 f6 ff 09     .....[......R...
    5f81:	a4 ad f6 5b f6 ad a4 00 a4 f6 a4 f6 ad a4 ad 00     ...[............
    5f91:	ad f6 ad ff 5b a4 ad 00 f6 f6 ff a4 a4 a4 ad a4     ....[...........
    5fa1:	f6 ff ff 5b a4 a4 a4 ad ff ff f6 5b a4 a4 ad 00     ...[.......[....
    5fb1:	a4 52 00 52 f6 ff ad 52 a4 f6 f6 00 ad f6 f6 52     .R.R...R.......R
    5fc1:	ad 52 52 5b ff ff ff f6 52 52 52 5b ff ff f6 ff     .RR[....RRR[....
    5fd1:	a4 09 52 a4 5b ff f6 ff 52 ff ff a4 5b ff ff ff     ..R.[...R...[...
    5fe1:	5b a4 ad ad ad a4 ad f6 52 52 ad f6 ff f6 ff ff     [.......RR......
    5ff1:	ad ff ff ff ff ff 00 00 00 ad f6 ff ff 09 00 ad     ................
    6001:	00 52 ad f6 f6 00 52 ff 5b 00 ad ad ad 00 f6 ff     .R....R.[.......
    6011:	ad 00 ad a4 ad a4 ff ff f6 f6 f6 5b ad ff ff ff     ...........[....
    6021:	ad ff ad 52 a4 f6 ff ff ff ff 52 5b a4 ad 09 5b     ...R......R[...[
    6031:	52 f6 ff ad 09 00 a4 a4 ff ff ad 00 a4 00 a4 ff     R...............
    6041:	ff ff 52 a4 09 5b 09 a4 ff ff a4 5b 09 52 5b 09     ..R..[.....[.R[.
    6051:	ff ff ff ad 5b a4 5b a4 ff ff ff ff ff ff ff ad     ....[.[.........
    6061:	ff ff ff ff ff f6 f6 ff ff ff ff ff ff ff ff ff     ................
    6071:	a4 52 ad a4 52 09 09 52 ff 00 5b a4 ad a4 ff a4     .R..R..R..[.....
    6081:	ff 5b 5b a4 a4 a4 ff ad 00 ff ff 5b a4 a4 ff f6     .[[........[....
    6091:	f6 f6 5b 5b a4 ad ad ff a4 5b 5b a4 ad f6 f6 f6     ..[[.....[[.....
    60a1:	ad ad ad ad f6 f6 ff f6 ad 52 ad f6 f6 ff ff ff     .........R......
    60b1:	52 5b 5b 52 00 5b 52 a4 a4 5b 5b 52 52 a4 f6 a4     R[[R.[R..[[RR...
    60c1:	5b 5b 5b 52 09 f6 5b 5b a4 5b 52 52 09 a4 ff 5b     [[[R..[[.[RR...[
    60d1:	5b 5b 52 52 52 09 ff a4 ad 52 52 52 09 09 52 ad     [[RRR....RRR..R.
    60e1:	ff 52 52 52 09 09 09 00 f6 f6 09 52 09 09 09 00     .RRR.......R....
    60f1:	f6 5b 5b 5b 09 00 00 00 a4 f6 5b 00 00 00 00 00     .[[[......[.....
    6101:	5b ad a4 09 00 00 00 00 5b a4 ad f6 00 00 00 00     [.......[.......
    6111:	52 a4 f6 f6 00 00 00 00 f6 a4 ff 5b 00 00 00 00     R..........[....
    6121:	00 ad 5b 00 00 00 00 09 00 00 00 f6 ff ff 09 00     ..[.............
    6131:	00 00 a4 ad ad f6 5b 5b 00 09 5b ff a4 ad ad 00     ......[[..[.....
    6141:	00 52 a4 5b 52 a4 f6 a4 00 52 ff a4 52 a4 f6 ff     .R.[R....R..R...
    6151:	09 00 f6 a4 52 a4 ff ad 09 09 09 ff ad f6 ff 52     ....R..........R
    6161:	09 09 09 09 00 52 09 5b 09 09 09 09 09 00 52 a4     .....R.[......R.
    6171:	52 00 09 ad a4 5b a4 f6 00 52 a4 ff ff a4 a4 ad     R....[...R......
    6181:	09 5b f6 ad 09 52 5b a4 52 a4 ff 09 52 5b a4 ad     .[...R[.R...R[..
    6191:	52 ff ad 09 5b a4 ad f6 a4 ff 52 52 5b ad f6 ad     R...[.....RR[...
    61a1:	ff ad 52 5b a4 f6 f6 a4 ff 52 52 a4 ad ff f6 09     ..R[.....RR.....
    61b1:	ff ff ff ff ad 52 09 5b f6 ff ff 5b 09 a4 52 f6     .....R.[...[..R.
    61c1:	ff ff 52 52 a4 5b 5b 52 ff 5b 09 52 5b f6 5b 52     ..RR.[[R.[.R[.[R
    61d1:	ad 09 52 52 a4 ff 52 52 5b 52 52 5b 52 ad 5b 00     ..RR..RR[RR[R.[.
    61e1:	09 5b 52 52 52 a4 52 00 09 5b 52 52 5b f6 5b 52     .[RRR.R..[RR[.[R
    61f1:	5b a4 09 00 ad ff f6 ff a4 ff 52 52 5b ff f6 f6     [.........RR[...
    6201:	52 a4 00 09 09 ad ff 5b 52 52 00 09 09 09 ad 52     R......[RR.....R
    6211:	5b f6 a4 09 09 00 a4 5b 09 ff a4 00 09 09 5b 00     [......[......[.
    6221:	00 00 00 00 00 00 5b ad a4 a4 a4 a4 a4 ad f6 f6     ......[.........
    6231:	ff ff ff ff ff ad ff f6 f6 ff ff ff ad ff 52 09     ..............R.
    6241:	ad f6 ff f6 ff 00 00 ad a4 f6 ff ff 09 00 00 f6     ................
    6251:	ad ad ff ad 00 00 00 f6 a4 ad ff 09 00 00 00 00     ................
    6261:	5b ad ad 00 00 00 00 00 52 5b a4 00 00 00 00 ad     [.......R[......
    6271:	ad 00 a4 a4 09 00 00 5b 52 a4 ad f6 09 00 00 52     .......[R......R
    6281:	5b 52 52 5b 09 52 00 00 f6 09 52 5b a4 ad 00 00     [RR[.R....R[....
    6291:	f6 52 52 a4 ad ad 00 00 5b 52 ad ff ff 5b 00 00     .RR.....[R...[..
    62a1:	5b a4 52 52 52 00 00 00 ff 5b 5b a4 a4 a4 a4 ad     [.RRR....[[.....
    62b1:	f6 f6 ff ff ff f6 52 00 ff f6 f6 ff a4 00 5b ad     ......R.......[.
    62c1:	ff f6 a4 f6 f6 09 52 00 09 f6 09 ad 5b ff 09 00     ......R.....[...
    62d1:	00 52 a4 5b ad ad 09 52 00 09 ad 52 a4 ad ad ff     .R.[...R...R....
    62e1:	00 ff ff 52 a4 ad ff ff ff ff 5b 52 a4 ad ff ff     ...R......[R....
    62f1:	a4 ff 5b 5b 52 5b 5b 00 52 00 00 00 00 52 f6 5b     ..[[R[[.R....R.[
    6301:	00 00 00 00 00 a4 ff ff 00 00 00 00 5b ad 5b a4     ............[.[.
    6311:	00 00 00 00 ad ad 09 09 00 00 00 00 5b 5b 09 52     ............[[.R
    6321:	00 00 00 00 09 a4 09 5b 00 00 00 09 09 ad 52 5b     .......[......R[
    6331:	a4 ad a4 00 09 00 5b ff 09 00 00 00 00 00 09 ff     ......[.........
    6341:	ad 00 00 00 00 00 00 ad a4 09 00 00 00 00 00 00     ................
    6351:	52 5b 52 00 00 00 00 00 5b 5b a4 09 00 00 00 00     R[R.....[[......
    6361:	a4 ad ff 52 00 00 00 00 ad f6 ff 5b 00 00 00 00     ...R.......[....
    6371:	f6 ff ff ff ff ff ff ad ad f6 ff ff ff ff 5b ff     ..............[.
    6381:	a4 a4 f6 ff ff a4 f6 00 ff 09 ad f6 f6 f6 5b 00     ..............[.
    6391:	f6 5b 5b ad f6 ff 00 00 5b f6 52 ad ff 52 00 00     .[[.....[.R..R..
    63a1:	5b f6 52 f6 ff 00 00 00 52 52 52 ad f6 00 00 00     [.R.....RRR.....
    63b1:	ff ff ad 00 5b a4 52 00 5b 00 52 a4 f6 ad ad 09     ....[.R.[.R.....
    63c1:	00 ad a4 52 52 52 5b 00 00 a4 ff 09 52 5b 09 00     ...RRR[.....R[..
    63d1:	00 ad f6 52 52 a4 ff 00 00 09 a4 09 09 a4 ff 00     ...RR...........
    63e1:	00 00 a4 52 00 00 00 00 00 a4 ff 5b 5b a4 a4 a4     ...R.......[[...
    63f1:	00 ff ff f6 ff ff ff ad 52 ad ff ad f6 ff 52 52     ........R.....RR
    6401:	52 52 f6 5b ad f6 a4 ff 52 52 a4 09 52 ad f6 f6     RR.[....RR..R...
    6411:	52 52 5b 5b 5b 5b ad ad 52 5b 5b ad f6 52 a4 f6     RR[[[[..R[[..R..
    6421:	00 00 5b f6 ff 52 a4 f6 ad f6 ff ff a4 52 a4 f6     ..[..R.......R..
    6431:	ad 09 00 52 5b ad 00 a4 09 5b ad f6 f6 f6 ff ad     ...R[....[......
    6441:	ff ad ad ad f6 f6 ff f6 5b 5b ad ad f6 f6 ff 52     ........[[.....R
    6451:	00 52 f6 f6 f6 ff 52 ad 00 5b f6 f6 f6 ff 00 52     .R....R..[.....R
    6461:	00 5b f6 f6 f6 ff 00 5b 00 5b f6 f6 f6 ff 00 a4     .[.....[.[......
    6471:	ad 09 00 a4 ff ff 00 52 00 00 ff ff ff ff 52 52     .......R......RR
    6481:	a4 ff ff ff ff ff 5b ff 09 ff ff ff ff ad ff ff     ......[.........
    6491:	a4 00 5b a4 a4 ad f6 5b 09 52 00 f6 ff ff a4 09     ..[....[.R......
    64a1:	52 52 5b ad a4 52 09 52 52 5b a4 a4 5b 5b 5b a4     RR[..R.RR[..[[[.
    64b1:	f6 ff ff ff ff ff ff ff a4 f6 ff ff ff ff ff ff     ................
    64c1:	5b ad f6 ff ff ff ff ff 52 a4 f6 ff ff ff ff ff     [.......R.......
    64d1:	52 a4 f6 ff ff ff ff ff 5b a4 f6 ff ff ff ff ff     R.......[.......
    64e1:	a4 ad ff ff ff ff ff ff ad f6 ff ff ff ff ff ff     ................
    64f1:	ff ff ff ff ad 00 00 52 ff ff ff ff ff 00 09 52     .......R.......R
    6501:	ff ff ff ff ff 5b 00 52 ff ff ff ff ff ad ff ad     .....[.R........
    6511:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff f6 a4     ................
    6521:	ff ff ff ff ff ff ff f6 ff ff ff ff ff ff ff ff     ................
    6531:	52 5b a4 ad 5b 09 5b ad 52 5b a4 a4 ff a4 52 a4     R[..[.[.R[....R.
    6541:	52 5b a4 a4 ad ff ff ff 52 5b a4 a4 ad f6 ff a4     R[......R[......
    6551:	f6 ad a4 a4 ad f6 f6 ff 52 09 5b ff f6 f6 ff ff     ........R.[.....
    6561:	a4 09 00 00 00 5b a4 a4 f6 ad a4 ad ad ad f6 ff     .....[..........
    6571:	f6 ff ff ff ff ff a4 00 f6 ff ff ff ff ff 00 52     ...............R
    6581:	f6 ff ff ff a4 00 00 ff 5b 00 00 00 00 00 ff ff     ........[.......
    6591:	ad a4 a4 a4 f6 ff ff 52 ff ff ff ff ad a4 a4 ff     .......R........
    65a1:	ad f6 5b 5b ff ff ff a4 ff ff ff ff ad 5b 09 09     ..[[.........[..
    65b1:	ff ff 52 ff 52 5b ad ff ff 5b ff f6 52 5b ad ff     ..R.R[...[..R[..
    65c1:	ff 52 ff a4 52 a4 f6 ff 52 ff ad 09 52 a4 f6 ff     .R..R...R...R...
    65d1:	ff ad 52 52 5b ad f6 ff ad 52 09 5b a4 f6 ff ff     ..RR[....R.[....
    65e1:	09 52 52 a4 ad f6 ff a4 52 5b a4 ad f6 ff ff ff     .RR.....R[......
    65f1:	ff ff ff ff 52 00 00 09 ff ff ff f6 00 00 00 09     ....R...........
    6601:	ff ff ff 09 00 00 00 09 f6 ff ad 00 00 00 09 09     ................
    6611:	ff ff 00 00 00 00 09 09 ff 52 00 00 00 00 00 00     .........R......
    6621:	09 ff ff ff ff ff ff ff f6 f6 ad a4 a4 5b 5b 5b     .............[[[
    6631:	00 ad ad 09 52 5b ad ff 00 f6 09 52 5b ad ff 5b     ....R[.....R[..[
    6641:	00 ad 09 52 5b ad f6 52 00 a4 52 5b ad f6 ad ff     ...R[..R..R[....
    6651:	09 00 ad ff ff ff a4 ff 00 00 5b 5b a4 09 ff f6     ..........[[....
    6661:	ff ff ff f6 5b ad ad 5b 5b a4 a4 f6 ff ff a4 52     ....[..[[......R
    6671:	ff ff ff 5b a4 a4 ad 00 ff f6 ff 5b a4 a4 ad 00     ...[.......[....
    6681:	f6 f6 a4 ad a4 ad ad a4 f6 ad 09 a4 a4 ad ad f6     ................
    6691:	a4 a4 a4 00 09 ad f6 f6 52 5b ad 5b 00 00 52 ad     ........R[.[..R.
    66a1:	52 5b ad f6 ad 52 52 52 5b a4 f6 f6 f6 ad ad f6     R[...RRR[.......
    66b1:	52 09 09 52 52 52 52 09 ad 52 52 5b 5b 5b 5b a4     R..RRRR..RR[[[[.
    66c1:	00 09 5b a4 ad ad f6 52 ad 5b a4 ff ad 5b 00 00     ..[....R.[...[..
    66d1:	ad f6 ff ff f6 a4 a4 5b f6 f6 f6 ff f6 5b ad ff     .......[.....[..
    66e1:	52 ad ad 5b f6 ff ff f6 ff ff ff ff ff ad 52 09     R..[..........R.
    66f1:	09 09 52 5b ad f6 ad 09 5b 5b a4 ad 52 ad ff ad     ..R[....[[..R...
    6701:	ad a4 ad f6 00 52 ad ad 5b 52 f6 f6 f6 a4 ad 52     .....R..[R.....R
    6711:	ff ff a4 ad ff ff ff ff ff a4 5b a4 f6 f6 ff ff     ..........[.....
    6721:	52 52 5b ad f6 ad 00 ff 52 5b a4 ad f6 f6 a4 ad     RR[.....R[......
    6731:	09 ad ff ff ff ff ff f6 a4 52 ad ff ff ff ff f6     .........R......
    6741:	a4 a4 09 ff ff ff f6 f6 a4 a4 ad 52 a4 ff f6 f6     ...........R....
    6751:	ff a4 09 00 a4 ff f6 ff ad 00 00 52 ff ff ad a4     ...........R....
    6761:	ff a4 52 52 5b 5b ff ff ad f6 ff ff ff ff ad 5b     ..RR[[.........[
    6771:	f6 00 5b ad f6 ff ff ff ff 09 09 a4 f6 ff ff ff     ..[.............
    6781:	f6 52 ff 5b ad f6 ff ff f6 ad ff 5b a4 f6 ff ff     .R.[.......[....
    6791:	5b ff ad 52 a4 f6 ff ff ff f6 52 52 a4 f6 ff ff     [..R......RR....
    67a1:	f6 09 52 5b ad f6 ff ff 09 52 5b a4 ad ff ff ff     ..R[.....R[.....
    67b1:	ff f6 5b 52 09 09 00 00 ff f6 f6 09 52 09 00 00     ..[R........R...
    67c1:	ff ff f6 a4 00 09 00 00 ff ff f6 f6 09 00 00 00     ................
    67d1:	ff ff ff f6 ad 00 00 09 ff ff ff ff f6 a4 00 52     ...............R
    67e1:	ff ff ff ff f6 ff ff ff ff ff ff ff ff f6 09 a4     ................
    67f1:	00 00 ad 5b a4 5b ad 00 00 52 52 a4 09 52 ff 09     ...[.[...RR..R..
    6801:	00 52 ad 52 09 52 a4 f6 52 ad ad 09 52 5b a4 f6     .R.R.R..R...R[..
    6811:	a4 ff 52 52 5b a4 f6 ad ff ad 09 52 a4 f6 ff f6     ..RR[......R....
    6821:	ff 52 52 5b ad f6 ff ff a4 52 5b a4 f6 ff ff ff     .RR[.....R[.....
    6831:	09 09 09 09 09 09 a4 f6 00 09 09 09 09 52 5b ff     .............R[.
    6841:	00 09 09 09 09 5b f6 a4 5b 00 09 09 52 a4 ff 52     .....[..[...R..R
    6851:	ff 52 09 00 5b ff ad 09 f6 ff 5b 52 f6 ff 52 52     .R..[.....[R..RR
    6861:	f6 ff f6 a4 ff a4 09 5b ff f6 a4 09 ad 09 52 a4     .......[......R.
    6871:	ad 09 5b a4 f6 ff f6 00 52 52 5b ad f6 ff ff 00     ..[.....RR[.....
    6881:	09 5b a4 f6 ff ff ff 5b 52 5b ad f6 ff ff ff ff     .[.....[R[......
    6891:	5b a4 f6 ff ff ff ff ff 5b ad f6 ff ff ff ff ff     [.......[.......
    68a1:	a4 f6 ff ff ff ff ff ff ad ff ff ff ff ff ff ff     ................
    68b1:	09 5b 52 5b 5b ff 52 09 00 5b 5b 5b 5b ff 5b 09     .[R[[.R..[[[[.[.
    68c1:	00 52 52 52 52 f6 f6 a4 ad 5b 52 52 52 52 a4 ad     .RRRR....[RRRR..
    68d1:	ff ff f6 52 52 52 52 00 f6 ad ad ad ad 52 09 09     ...RRRR......R..
    68e1:	ff f6 5b 09 00 52 5b 09 ff ff f6 a4 5b 52 a4 f6     ..[..R[.....[R..
    68f1:	52 52 52 52 52 52 09 52 52 5b 5b 5b 5b 5b a4 5b     RRRRRR.RR[[[[[.[
    6901:	5b a4 ad ad ad f6 5b ad a4 52 ad f6 ff ff 52 52     [.....[..R....RR
    6911:	00 09 52 a4 52 ad ff ad 09 00 52 52 f6 ff f6 5b     ..R.R.....RR...[
    6921:	a4 f6 ad ff ff ad 52 5b ff ff ff a4 52 52 52 5b     ......R[....RRR[
    6931:	5b 52 09 00 00 00 00 f6 a4 5b 00 00 00 00 00 ad     [R.......[......
    6941:	ad ad 00 00 00 00 00 00 f6 f6 ad 09 00 00 00 00     ................
    6951:	ad ad f6 ff f6 09 00 00 a4 ad f6 f6 ff ff a4 09     ................
    6961:	a4 ad f6 f6 a4 5b 52 09 a4 f6 ff ff f6 ad a4 09     .....[R.........
    6971:	f6 09 52 52 52 52 52 52 ad 09 52 5b 5b 5b 5b 5b     ..RRRRRR..R[[[[[
    6981:	f6 ff 5b a4 a4 ad ad f6 00 52 52 09 f6 f6 f6 a4     ..[......RR.....
    6991:	00 00 00 a4 ff ff ff 5b 00 00 00 00 00 09 5b ff     .......[......[.
    69a1:	a4 00 00 ad a4 ff ff ff 52 a4 ff ff ff ad 5b 09     ........R.....[.
    69b1:	09 09 52 5b a4 f6 ff ff 5b 5b a4 a4 ad f6 ff ff     ..R[....[[......
    69c1:	ad ad ad ad f6 ff ff ff 5b 52 ad f6 ff ff ff ff     ........[R......
    69d1:	f6 ad a4 ad f6 ff ff ff ff a4 5b a4 f6 ff ff ff     ..........[.....
    69e1:	5b 52 5b a4 f6 ff f6 ff 52 5b a4 ad f6 ff a4 ff     [R[.....R[......
    69f1:	00 00 00 00 5b ad 52 a4 00 00 09 00 ad ad 52 a4     ....[.R.......R.
    6a01:	00 00 09 00 ad 5b 52 a4 00 00 09 09 00 5b 5b ad     .....[R......[[.
    6a11:	00 09 09 09 09 09 ff ff 00 09 09 09 09 00 00 00     ................
    6a21:	00 09 09 09 00 ad ad ff 00 09 09 09 a4 f6 52 ad     ..............R.
    6a31:	ad f6 ff 5b 00 00 00 00 f6 f6 ad 5b 00 00 00 52     ...[.......[...R
    6a41:	f6 52 f6 09 00 00 00 52 09 52 f6 00 00 00 52 ad     .R.....R.R....R.
    6a51:	ff f6 00 00 00 00 5b ff 00 00 00 00 52 a4 ff a4     ......[.....R...
    6a61:	f6 00 00 ad f6 ff a4 09 52 a4 ff ff f6 52 09 52     ........R....R.R
    6a71:	a4 f6 52 5b 52 00 00 00 00 ad 52 5b 00 00 00 00     ..R[R.....R[....
    6a81:	f6 52 52 a4 00 00 00 00 ff 09 5b a4 a4 52 00 00     .RR.......[..R..
    6a91:	52 52 5b ad f6 ff f6 09 09 52 a4 f6 f6 f6 ff ff     RR[......R......
    6aa1:	52 5b ad f6 ff f6 ad 5b 5b ad f6 ff ff ff f6 ad     R[.....[[.......
    6ab1:	00 ad ff 09 09 52 52 52 00 a4 f6 52 52 5b 5b 5b     .....RRR...RR[[[
    6ac1:	00 00 f6 f6 5b 5b ad ad 00 00 09 a4 ad 5b 5b ad     ....[[.......[[.
    6ad1:	00 00 00 09 00 00 09 09 a4 52 00 09 09 09 09 5b     .........R.....[
    6ae1:	09 00 a4 52 09 f6 a4 ff a4 52 52 ad ff ff ff f6     ...R.....RR.....
    6af1:	52 52 09 09 52 5b a4 f6 5b 5b a4 5b 5b a4 ad f6     RR..R[..[[.[[...
    6b01:	ad ad 52 ad ad ad f6 f6 ad f6 ad 00 ad f6 ff ad     ..R.............
    6b11:	09 09 ff ff ad ad f6 f6 a4 ff ff ad 5b a4 00 52     ............[..R
    6b21:	ff ff 5b 52 5b a4 ff 00 5b 09 52 5b a4 ad ad 52     ..[R[...[.R[...R
    6b31:	00 5b f6 f6 f6 ff 00 a4 00 5b f6 f6 f6 ff 00 ad     .[.......[......
    6b41:	00 5b f6 f6 f6 ff 00 ff 09 52 f6 f6 f6 ff a4 00     .[.......R......
    6b51:	00 ad f6 f6 f6 f6 ff ad ad f6 f6 f6 f6 f6 ff ff     ................
    6b61:	52 ad 5b 5b a4 ad f6 52 52 ad ff ff ff ff ff ff     R.[[...RR.......
    6b71:	52 a4 ad f6 ad ad ad f6 52 a4 f6 ff ff f6 ff ff     R.......R.......
    6b81:	52 a4 f6 ff ff ff ff ff 5b a4 f6 ff ff ff ff ff     R.......[.......
    6b91:	f6 a4 ad ff ff ff ff ff ad 09 5b f6 ff ff ff ff     ..........[.....
    6ba1:	f6 ff a4 a4 f6 ff ff ff f6 5b 52 a4 ad ff ff ff     .........[R.....
    6bb1:	f6 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6bc1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6bd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6be1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6bf1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6c01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6c11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6c21:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6c31:	ff f6 ad a4 5b 52 52 52 ff ff f6 f6 ad ad a4 a4     ....[RRR........
    6c41:	ff ff ff ff ff f6 f6 f6 ff ff ff ff ff ff ff ff     ................
    6c51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6c61:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6c71:	09 09 09 09 52 52 5b 5b a4 5b 5b 5b a4 a4 a4 ad     ....RR[[.[[[....
    6c81:	ad ad ad ad f6 f6 f6 f6 ff ff ff ff ff ff ff ff     ................
    6c91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6ca1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6cb1:	a4 ad ad f6 ff ff ff ff ad f6 ff ff ff ff ff ff     ................
    6cc1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6cd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6ce1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6cf1:	f6 ad 5b 5b 52 52 52 52 ff f6 ad ad a4 a4 a4 a4     ..[[RRRR........
    6d01:	ff ff f6 f6 f6 f6 f6 f6 ff ff ff ff ff ff ff ff     ................
    6d11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6d21:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6d31:	52 52 52 52 52 52 52 5b a4 a4 a4 a4 a4 a4 a4 a4     RRRRRRR[........
    6d41:	f6 f6 f6 f6 f6 f6 f6 f6 ff ff ff ff ff ff ff ff     ................
    6d51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6d61:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6d71:	a4 ad f6 ff ff f6 ad a4 ad f6 ff ff ff ff f6 f6     ................
    6d81:	f6 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6d91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6da1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6db1:	52 52 09 09 09 52 52 5b ad a4 a4 a4 5b a4 a4 a4     RR...RR[....[...
    6dc1:	f6 f6 f6 ad ad f6 f6 f6 ff ff ff ff ff ff ff ff     ................
    6dd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6de1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6df1:	5b a4 ad f6 ff ff f6 a4 ad f6 ff ff ff ff ff f6     [...............
    6e01:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6e11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6e21:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6e31:	5b 52 52 52 52 52 52 52 ad a4 a4 a4 a4 a4 a4 a4     [RRRRRRR........
    6e41:	f6 f6 f6 f6 f6 f6 f6 f6 ff ff ff ff ff ff ff ff     ................
    6e51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6e61:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6e71:	5b 5b a4 ad f6 ff ff ff a4 ad f6 ff ff ff ff ff     [[..............
    6e81:	f6 f6 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6e91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6ea1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6eb1:	ff ff ff ff ff f6 ad a4 ff ff ff ff ff ff f6 ad     ................
    6ec1:	ff ff ff ff ff ff ff f6 ff ff ff ff ff ff ff ff     ................
    6ed1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6ee1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6ef1:	5b 5b a4 ad ff ff ff ff a4 a4 ad f6 ff ff ff ff     [[..............
    6f01:	f6 f6 f6 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f11:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f21:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f31:	ff ff f6 ad 5b 5b 5b ad ff ff ff f6 ad a4 ad f6     ....[[[.........
    6f41:	ff ff ff ff f6 f6 f6 ff ff ff ff ff ff ff ff ff     ................
    6f51:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f61:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f71:	f6 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f81:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6f91:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6fa1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6fb1:	ff ff ff f6 ad a4 5b 52 ff ff ff ff f6 ad ad a4     ......[R........
    6fc1:	ff ff ff ff ff ff f6 f6 ff ff ff ff ff ff ff ff     ................
    6fd1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6fe1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6ff1:	09 09 09 52 52 5b a4 ad a4 5b 5b a4 a4 ad ad f6     ...RR[...[[.....
    7001:	f6 ad ad f6 f6 f6 ff ff ff ff ff ff ff ff ff ff     ................
    7011:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7021:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7031:	f6 ff ff ff ff f6 ad a4 ff ff ff ff ff ff f6 f6     ................
    7041:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7051:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7061:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7071:	5b 52 52 09 09 52 52 5b ad a4 a4 a4 5b a4 a4 a4     [RR..RR[....[...
    7081:	f6 f6 f6 ad ad ad f6 f6 ff ff ff ff ff ff ff ff     ................
    7091:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    70a1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    70b1:	5b a4 ad f6 ff f6 09 f6 ad f6 f6 ff ad 00 5b 52     [.............[R
    70c1:	f6 ff ff ff a4 5b 52 00 ff ff ff ff ad ff f6 52     .....[R........R
    70d1:	ff ff ff ff ff f6 ad 5b ff ff ff ff ff ff ad a4     .......[........
    70e1:	ff ff ff ff ff ff f6 ad ff ff ff ff ff ff ff ff     ................
    70f1:	00 09 09 09 f6 ff 09 09 00 09 09 09 52 f6 52 52     ............R.RR
    7101:	00 09 09 09 00 52 ff f6 a4 52 00 09 00 09 ad 00     .....R...R......
    7111:	00 00 00 00 ad ff ff a4 a4 ad ad ad ad a4 52 52     ..............RR
    7121:	a4 5b 5b 52 52 52 5b 5b f6 f6 ad ad ad ad ad ad     .[[RRR[[........
    7131:	52 52 52 09 52 52 5b a4 5b a4 a4 a4 a4 a4 a4 ad     RRR.RR[.[.......
    7141:	a4 ad ad ad ad f6 f6 ff a4 ad f6 ff ff ff ff ff     ................
    7151:	5b ad f6 ff ff ff ff ff 5b ad f6 ff ff ff ff ff     [.......[.......
    7161:	a4 ad f6 ff ff ff ff ff ad f6 ff ff ff ff ff ff     ................
    7171:	ad f6 ff ff ff ff ff f6 f6 ff ff ff ff ff ff ff     ................
    7181:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7191:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    71a1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    71b1:	ad a4 5b 52 52 09 09 52 f6 f6 ad a4 a4 a4 5b a4     ..[RR..R......[.
    71c1:	ff ff f6 f6 f6 ad ad ad ff ff ff ff ff ff ff ff     ................
    71d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    71e1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    71f1:	52 5b 5b a4 ad f6 f6 f6 a4 a4 ad f6 f6 ff ff f6     R[[.............
    7201:	f6 f6 f6 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7211:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7221:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7231:	ad 5b 52 09 09 09 09 09 f6 ad a4 a4 5b 5b 5b 5b     .[R.........[[[[
    7241:	ff f6 f6 ad ad ad ad ad ff ff ff ff ff ff ff ff     ................
    7251:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7261:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7271:	52 52 5b a4 f6 ff ff ff a4 a4 a4 ad f6 ff ff ff     RR[.............
    7281:	ad f6 f6 f6 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    7291:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    72a1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    72b1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    72c1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    72d1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    72e1:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

000072f1 <TitleMap>:
    72f1:	1c 04 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e     ................
    7301:	0f 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e     ................
    7311:	1f 20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e     . !"#$%&'()*+,-.
    7321:	2f 30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e     /0123456789:;<=>
    7331:	3f 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e     ?@ABCDEFGHIJKLMN
    7341:	4f 50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e     OPQRSTUVWXYZ[\]^
    7351:	5f 60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e     _`abcdefghijklmn
    7361:	6f 70                                               op

00007363 <musicData>:
    7363:	00 00 31 3c 90 40 e3 44 d9 4b 5a 51                 ..1<.@.D.KZQ

0000736f <__c.2403>:
    736f:	57 4f 4e 00                                         WON.

00007373 <__c.2398>:
    7373:	09 20 00                                            . .

00007376 <__c.2395>:
    7376:	4e 55 4c 4c 00                                      NULL.

0000737b <__c.2390>:
    737b:	4e 55 4c 4c 00                                      NULL.

00007380 <__c.2387>:
    7380:	56 00                                               V.

00007382 <__c.2385>:
    7382:	47 00                                               G.

00007384 <__c.2383>:
    7384:	59 00                                               Y.

00007386 <__c.2381>:
    7386:	58 00                                               X.

00007388 <__c.2314>:
    7388:	45 58 50 45 52 54 00                                EXPERT.

0000738f <__c.2312>:
    738f:	4d 49 44 44 4c 45 00                                MIDDLE.

00007396 <__c.2310>:
    7396:	4e 4f 56 49 43 45 00                                NOVICE.

0000739d <__c.2308>:
    739d:	4f 4b 00                                            OK.

000073a0 <__c.2306>:
    73a0:	50 4c 45 41 53 45 20 45 4e 54 45 52 20 59 4f 55     PLEASE ENTER YOU
    73b0:	52 20 4e 41 4d 45 00                                R NAME.

000073b7 <__c.2304>:
    73b7:	09 46 4f 52 09 09 09 4c 45 56 45 4c 09 00           .FOR...LEVEL..

000073c5 <__c.2302>:
    73c5:	59 4f 55 20 48 41 56 45 20 54 48 45 20 42 45 53     YOU HAVE THE BES
    73d5:	54 20 54 49 4d 45 00                                T TIME.

000073dc <__c.2268>:
    73dc:	20 20 20 20 20 20 20 20 4f 4b 00                            OK.

000073e7 <__c.2266>:
    73e7:	45 58 50 45 52 54 00                                EXPERT.

000073ee <__c.2264>:
    73ee:	4d 49 44 44 4c 45 00                                MIDDLE.

000073f5 <__c.2262>:
    73f5:	4e 4f 56 49 43 45 00                                NOVICE.

000073fc <__c.2260>:
    73fc:	42 45 53 54 20 4d 49 4e 45 20 53 57 45 45 50 45     BEST MINE SWEEPE
    740c:	52 53 00                                            RS.

0000740f <__c.2246>:
    740f:	4f 4b 00                                            OK.

00007412 <__c.2244>:
    7412:	4c 45 45 20 57 45 42 45 52 20 58 58 58 58 00        LEE WEBER XXXX.

00007421 <__c.2242>:
    7421:	09 55 5a 45 53 57 45 45 50 45 52 00                 .UZESWEEPER.

0000742d <__c.2206>:
    742d:	09 00                                               ..

0000742f <__c.2204>:
    742f:	09 00                                               ..

00007431 <__c.2202>:
    7431:	09 00                                               ..

00007433 <__c.2200>:
    7433:	4f 4b 00                                            OK.

00007436 <__c.2198>:
    7436:	4d 49 4e 45 53 00                                   MINES.

0000743c <__c.2196>:
    743c:	57 49 44 54 48 00                                   WIDTH.

00007442 <__c.2194>:
    7442:	48 45 49 47 48 54 00                                HEIGHT.

00007449 <__c.2141>:
    7449:	44 45 42 55 47 20 4d 4f 44 45 00                    DEBUG MODE.

00007454 <__c.2138>:
    7454:	41 42 4f 55 54 00                                   ABOUT.

0000745a <__c.2136>:
    745a:	53 43 4f 52 45 00                                   SCORE.

00007460 <__c.2134>:
    7460:	4d 55 53 49 43 00                                   MUSIC.

00007466 <__c.2132>:
    7466:	53 4f 55 4e 44 00                                   SOUND.

0000746c <__c.2130>:
    746c:	4d 41 52 4b 53 00                                   MARKS.

00007472 <__c.2128>:
    7472:	43 55 53 54 4f 4d 00                                CUSTOM.

00007479 <__c.2126>:
    7479:	45 58 50 45 52 54 00                                EXPERT.

00007480 <__c.2124>:
    7480:	4d 49 44 44 4c 45 00                                MIDDLE.

00007487 <__c.2122>:
    7487:	4e 4f 56 49 43 45 00                                NOVICE.

0000748e <__c.2120>:
    748e:	4e 45 57 00                                         NEW.

00007492 <__c.2118>:
    7492:	42 41 43 4b 00 00                                   BACK..

00007498 <__ctors_end>:
    7498:	11 24       	eor	r1, r1
    749a:	1f be       	out	0x3f, r1	; 63
    749c:	cf ef       	ldi	r28, 0xFF	; 255
    749e:	d0 e1       	ldi	r29, 0x10	; 16
    74a0:	de bf       	out	0x3e, r29	; 62
    74a2:	cd bf       	out	0x3d, r28	; 61

000074a4 <wdt_init>:
void Initialize(void) __attribute__((naked)) __attribute__((section(".init8")));


void wdt_init(void)
{
    MCUSR = 0;
    74a4:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    74a6:	88 e1       	ldi	r24, 0x18	; 24
    74a8:	0f b6       	in	r0, 0x3f	; 63
    74aa:	f8 94       	cli
    74ac:	80 93 60 00 	sts	0x0060, r24
    74b0:	10 92 60 00 	sts	0x0060, r1
    74b4:	0f be       	out	0x3f, r0	; 63

000074b6 <__do_copy_data>:
    74b6:	11 e0       	ldi	r17, 0x01	; 1
    74b8:	a0 e0       	ldi	r26, 0x00	; 0
    74ba:	b1 e0       	ldi	r27, 0x01	; 1
    74bc:	ec ea       	ldi	r30, 0xAC	; 172
    74be:	f4 eb       	ldi	r31, 0xB4	; 180
    74c0:	02 c0       	rjmp	.+4      	; 0x74c6 <.do_copy_data_start>

000074c2 <.do_copy_data_loop>:
    74c2:	05 90       	lpm	r0, Z+
    74c4:	0d 92       	st	X+, r0

000074c6 <.do_copy_data_start>:
    74c6:	a2 32       	cpi	r26, 0x22	; 34
    74c8:	b1 07       	cpc	r27, r17
    74ca:	d9 f7       	brne	.-10     	; 0x74c2 <.do_copy_data_loop>

000074cc <__do_clear_bss>:
    74cc:	1d e0       	ldi	r17, 0x0D	; 13
    74ce:	a0 e4       	ldi	r26, 0x40	; 64
    74d0:	b1 e0       	ldi	r27, 0x01	; 1
    74d2:	01 c0       	rjmp	.+2      	; 0x74d6 <.do_clear_bss_start>

000074d4 <.do_clear_bss_loop>:
    74d4:	1d 92       	st	X+, r1

000074d6 <.do_clear_bss_start>:
    74d6:	a8 3d       	cpi	r26, 0xD8	; 216
    74d8:	b1 07       	cpc	r27, r17
    74da:	e1 f7       	brne	.-8      	; 0x74d4 <.do_clear_bss_loop>

000074dc <Initialize>:
	io_set(OCR1BL,0x4f),		//lo8(0x36e-31) eq pulse pulse restore
	io_set(OCR1BH,0x03)			//hi8(0x36e-31)	
};


void Initialize(void){
    74dc:	0e 94 c1 3e 	call	0x7d82	; 0x7d82 <isEepromFormatted>
    74e0:	88 23       	and	r24, r24
    74e2:	11 f4       	brne	.+4      	; 0x74e8 <Initialize+0xc>
    74e4:	0e 94 91 3f 	call	0x7f22	; 0x7f22 <FormatEeprom>
	int i;

	if(!isEepromFormatted()) FormatEeprom();

	cli();
    74e8:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    74ea:	91 e0       	ldi	r25, 0x01	; 1
    74ec:	90 93 76 09 	sts	0x0976, r25
		tr4_barrel_hi=1;		
    74f0:	90 93 77 09 	sts	0x0977, r25
		tr4_params=0b00000001; //15 bits no divider (1)
    74f4:	90 93 75 09 	sts	0x0975, r25
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    74f8:	10 92 62 09 	sts	0x0962, r1
    74fc:	10 92 68 09 	sts	0x0968, r1
    7500:	10 92 6e 09 	sts	0x096E, r1
    7504:	10 92 74 09 	sts	0x0974, r1
    7508:	10 92 7a 09 	sts	0x097A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    750c:	10 92 42 09 	sts	0x0942, r1
	sync_flags=0;
    7510:	10 92 44 09 	sts	0x0944, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7514:	82 e1       	ldi	r24, 0x12	; 18
    7516:	80 93 43 09 	sts	0x0943, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    751a:	80 ee       	ldi	r24, 0xE0	; 224
    751c:	80 93 4c 09 	sts	0x094C, r24
	render_lines_count=FRAME_LINES;
    7520:	80 93 4a 09 	sts	0x094A, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    7524:	84 e1       	ldi	r24, 0x14	; 20
    7526:	80 93 4b 09 	sts	0x094B, r24
	first_render_line=FIRST_RENDER_LINE;
    752a:	80 93 49 09 	sts	0x0949, r24

//	joypad1_status_hi=0;
//	joypad2_status_hi=0;
	sound_enabled=1;
    752e:	90 93 61 09 	sts	0x0961, r25

	InitializeVideoMode();
    7532:	0e 94 18 48 	call	0x9030	; 0x9030 <InitializeVideoMode>
    7536:	20 e9       	ldi	r18, 0x90	; 144
    7538:	30 e0       	ldi	r19, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    753a:	f9 01       	movw	r30, r18
    753c:	85 91       	lpm	r24, Z+
    753e:	94 91       	lpm	r25, Z+
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
    7540:	fc 01       	movw	r30, r24
    7542:	f0 70       	andi	r31, 0x00	; 0
    7544:	90 83       	st	Z, r25
    7546:	2e 5f       	subi	r18, 0xFE	; 254
    7548:	3f 4f       	sbci	r19, 0xFF	; 255
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    754a:	80 e0       	ldi	r24, 0x00	; 0
    754c:	2e 3b       	cpi	r18, 0xBE	; 190
    754e:	38 07       	cpc	r19, r24
    7550:	a1 f7       	brne	.-24     	; 0x753a <Initialize+0x5e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7552:	78 94       	sei
	
	DisplayLogo();
    7554:	0e 94 17 48 	call	0x902e	; 0x902e <DisplayLogo>
    7558:	0e 94 aa 59 	call	0xb354	; 0xb354 <main>
    755c:	0c 94 54 5a 	jmp	0xb4a8	; 0xb4a8 <_exit>

00007560 <__bad_interrupt>:
    7560:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007564 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    7564:	0c e0       	ldi	r16, 0x0C	; 12
    7566:	0a 95       	dec	r16
    7568:	f1 f7       	brne	.-4      	; 0x7566 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    756a:	e0 e0       	ldi	r30, 0x00	; 0
		ldi ZH,hi8(ram_tiles_restore);
    756c:	f9 e0       	ldi	r31, 0x09	; 9

		ldi YL,lo8(vram)
    756e:	c0 e4       	ldi	r28, 0x40	; 64
		ldi YH,hi8(vram)
    7570:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7572:	20 91 06 0a 	lds	r18, 0x0A06


		clr r16
    7576:	00 27       	eor	r16, r16

00007578 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    7578:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    757a:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    757c:	ac 0f       	add	r26, r28
		adc XH,YH
    757e:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    7580:	1c 91       	ld	r17, X
		std Z+2,r17
    7582:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    7584:	02 17       	cp	r16, r18
		brsh noov
    7586:	08 f4       	brcc	.+2      	; 0x758a <noov>
		mov r17,r16
    7588:	10 2f       	mov	r17, r16

0000758a <noov>:
	noov:
		st X,r17
    758a:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    758c:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    758e:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    7590:	01 31       	cpi	r16, 0x11	; 17
		brlo upd_loop ;23
    7592:	90 f3       	brcs	.-28     	; 0x7578 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    7594:	0c e2       	ldi	r16, 0x2C	; 44

00007596 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    7596:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    7598:	1a 95       	dec	r17
		brne .-4
    759a:	f1 f7       	brne	.-4      	; 0x7598 <wait_loop+0x2>

		dec r16
    759c:	0a 95       	dec	r16
		brne wait_loop
    759e:	d9 f7       	brne	.-10     	; 0x7596 <wait_loop>

		lds r2,overlay_tile_table
    75a0:	20 90 3f 09 	lds	r2, 0x093F
		lds r3,overlay_tile_table+1
    75a4:	30 90 40 09 	lds	r3, 0x0940
		lds r16,tile_table_lo 
    75a8:	00 91 3b 09 	lds	r16, 0x093B
		lds r17,tile_table_hi
    75ac:	10 91 3c 09 	lds	r17, 0x093C
		movw r12,r16
    75b0:	68 01       	movw	r12, r16
		movw r6,r16
    75b2:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    75b4:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    75b6:	c0 e4       	ldi	r28, 0x40	; 64
		ldi YH,hi8(vram)
    75b8:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    75ba:	4e 01       	movw	r8, r28
		clr r0
    75bc:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    75be:	30 91 3e 09 	lds	r19, 0x093E
		cpi r19,0
    75c2:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    75c4:	09 f0       	breq	.+2      	; 0x75c8 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    75c6:	c8 e8       	ldi	r28, 0x88	; 136
		
		breq .+2
    75c8:	09 f0       	breq	.+2      	; 0x75cc <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    75ca:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    75cc:	09 f0       	breq	.+2      	; 0x75d0 <wait_loop+0x3a>
		mov r24,r19
    75ce:	83 2f       	mov	r24, r19

		breq .+2
    75d0:	09 f0       	breq	.+2      	; 0x75d4 <wait_loop+0x3e>
		movw r12,r2
    75d2:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    75d4:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    75d6:	a0 2e       	mov	r10, r16
		clr r22
    75d8:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    75da:	78 e0       	ldi	r23, 0x08	; 8

000075dc <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    75dc:	7d d2       	rcall	.+1274   	; 0x7ad8 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    75de:	3c e0       	ldi	r19, 0x0C	; 12
    75e0:	3a 95       	dec	r19
    75e2:	f1 f7       	brne	.-4      	; 0x75e0 <next_tile_line+0x4>
    75e4:	00 00       	nop
    75e6:	00 00       	nop

		;***draw line***
		call render_tile_line
    75e8:	0e 94 25 3b 	call	0x764a	; 0x764a <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    75ec:	3f e0       	ldi	r19, 0x0F	; 15
    75ee:	3a 95       	dec	r19
    75f0:	f1 f7       	brne	.-4      	; 0x75ee <next_tile_line+0x12>
    75f2:	00 00       	nop
    75f4:	00 00       	nop

		dec r10
    75f6:	aa 94       	dec	r10
		breq frame_end
    75f8:	a9 f0       	breq	.+42     	; 0x7624 <frame_end>
	
		inc r22
    75fa:	63 95       	inc	r22
		lpm ;3 nop
    75fc:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    75fe:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    7600:	31 f0       	breq	.+12     	; 0x760e <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    7602:	33 e0       	ldi	r19, 0x03	; 3
    7604:	3a 95       	dec	r19
    7606:	f1 f7       	brne	.-4      	; 0x7604 <next_tile_line+0x28>
    7608:	00 00       	nop
    760a:	00 00       	nop
		
		rjmp next_tile_line	
    760c:	e7 cf       	rjmp	.-50     	; 0x75dc <next_tile_line>

0000760e <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    760e:	66 27       	eor	r22, r22

		clr r0
    7610:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    7612:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7614:	c3 0f       	add	r28, r19
		adc YH,r0
    7616:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7618:	8a 95       	dec	r24
		brne .+2
    761a:	09 f4       	brne	.+2      	; 0x761e <next_tile_row+0x10>
		movw YL,r8	;main vram
    761c:	e4 01       	movw	r28, r8
		brne .+2
    761e:	09 f4       	brne	.+2      	; 0x7622 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    7620:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    7622:	dc cf       	rjmp	.-72     	; 0x75dc <next_tile_line>

00007624 <frame_end>:

	frame_end:

		WAIT r19,18
    7624:	36 e0       	ldi	r19, 0x06	; 6
    7626:	3a 95       	dec	r19
    7628:	f1 f7       	brne	.-4      	; 0x7626 <frame_end+0x2>

		rcall hsync_pulse ;145
    762a:	56 d2       	rcall	.+1196   	; 0x7ad8 <hsync_pulse>
	
		clr r1
    762c:	11 24       	eor	r1, r1
		call RestoreBackground
    762e:	0e 94 00 48 	call	0x9000	; 0x9000 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7632:	e0 91 44 09 	lds	r30, 0x0944
		ldi r20,SYNC_FLAG_FIELD
    7636:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7638:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    763a:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    763c:	e0 93 44 09 	sts	0x0944, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7640:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7642:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    7646:	11 24       	eor	r1, r1


		ret
    7648:	08 95       	ret

0000764a <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    764a:	de 01       	movw	r26, r28

		mul r22,r23
    764c:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    764e:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7650:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7652:	14 40       	sbci	r17, 0x04	; 4

		add r16,r0
    7654:	00 0d       	add	r16, r0
		adc r17,r1
    7656:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    7658:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    765a:	00 ec       	ldi	r16, 0xC0	; 192
		ldi r17,hi8(ram_tiles)
    765c:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    765e:	00 0d       	add	r16, r0
		adc r17,r1
    7660:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    7662:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7664:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    7666:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    7668:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    766a:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    766c:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    766e:	21 31       	cpi	r18, 0x11	; 17
		brcc .+2
    7670:	08 f4       	brcc	.+2      	; 0x7674 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    7672:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    7674:	04 0e       	add	r0, r20
	    adc r1,r21
    7676:	15 1e       	adc	r1, r21

		movw ZL,r0
    7678:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    767a:	21 31       	cpi	r18, 0x11	; 17
		brcs ramloop
    767c:	f0 f0       	brcs	.+60     	; 0x76ba <ramloop>

0000767e <romloop>:
	

	romloop:
	    lpm r16,Z+
    767e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7680:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7682:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    7684:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7686:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7688:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    768a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    768c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    768e:	21 31       	cpi	r18, 0x11	; 17
		nop
    7690:	00 00       	nop

	    lpm r16,Z+
    7692:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7694:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    7696:	08 f4       	brcc	.+2      	; 0x769a <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7698:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    769a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    769c:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    769e:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    76a0:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    76a2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    76a4:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    76a6:	21 31       	cpi	r18, 0x11	; 17
		dec r17			;decrement tiles to draw on line
    76a8:	1a 95       	dec	r17
   
	    lpm r16,Z+
    76aa:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    76ac:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    76ae:	05 91       	lpm	r16, Z+

		breq end	
    76b0:	31 f1       	breq	.+76     	; 0x76fe <end>
	    movw ZL,r0   	;copy next tile adress
    76b2:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    76b4:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    76b6:	18 f7       	brcc	.-58     	; 0x767e <romloop>
	
		rjmp .
    76b8:	00 c0       	rjmp	.+0      	; 0x76ba <ramloop>

000076ba <ramloop>:

	ramloop:

	    ld r16,Z+
    76ba:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    76bc:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    76be:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    76c0:	01 91       	ld	r16, Z+
		nop   
    76c2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    76c4:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    76c6:	23 9f       	mul	r18, r19


	    ld r16,Z+
    76c8:	01 91       	ld	r16, Z+
		nop
    76ca:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    76cc:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    76ce:	21 31       	cpi	r18, 0x11	; 17
   		rjmp .
    76d0:	00 c0       	rjmp	.+0      	; 0x76d2 <ramloop+0x18>

	    ld r16,Z+
    76d2:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    76d4:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    76d6:	08 f0       	brcs	.+2      	; 0x76da <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    76d8:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    76da:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    76dc:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    76de:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    76e0:	15 1e       	adc	r1, r21
		rjmp .
    76e2:	00 c0       	rjmp	.+0      	; 0x76e4 <ramloop+0x2a>
    
		ld r16,Z+		
    76e4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    76e6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    76e8:	21 31       	cpi	r18, 0x11	; 17
		rjmp .  
    76ea:	00 c0       	rjmp	.+0      	; 0x76ec <ramloop+0x32>

	    ld r16,Z+	
    76ec:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    76ee:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    76f0:	01 91       	ld	r16, Z+

	    dec r17
    76f2:	1a 95       	dec	r17
	    breq end
    76f4:	21 f0       	breq	.+8      	; 0x76fe <end>
	
		movw ZL,r0
    76f6:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    76f8:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    76fa:	08 f6       	brcc	.-126    	; 0x767e <romloop>
		rjmp ramloop
    76fc:	de cf       	rjmp	.-68     	; 0x76ba <ramloop>

000076fe <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    76fe:	08 b9       	out	0x08, r16	; 8
		clr r16	
    7700:	00 27       	eor	r16, r16
		lpm	
    7702:	c8 95       	lpm
		nop
    7704:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    7706:	08 b9       	out	0x08, r16	; 8

		ret
    7708:	08 95       	ret

0000770a <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    770a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    770c:	e0 91 3b 09 	lds	r30, 0x093B
	lds ZH,tile_table_hi
    7710:	f0 91 3c 09 	lds	r31, 0x093C
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    7714:	81 51       	subi	r24, 0x11	; 17
	mul r24,r18
    7716:	82 9f       	mul	r24, r18
	add ZL,r0
    7718:	e0 0d       	add	r30, r0
	adc ZH,r1
    771a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    771c:	a0 ec       	ldi	r26, 0xC0	; 192
	ldi XH,hi8(ram_tiles)
    771e:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7720:	62 9f       	mul	r22, r18
	add XL,r0
    7722:	a0 0d       	add	r26, r0
	adc XH,r1
    7724:	b1 1d       	adc	r27, r1

	clr r0
    7726:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    7728:	05 90       	lpm	r0, Z+
    772a:	0d 92       	st	X+, r0
    772c:	05 90       	lpm	r0, Z+
    772e:	0d 92       	st	X+, r0
    7730:	05 90       	lpm	r0, Z+
    7732:	0d 92       	st	X+, r0
    7734:	05 90       	lpm	r0, Z+
    7736:	0d 92       	st	X+, r0
    7738:	05 90       	lpm	r0, Z+
    773a:	0d 92       	st	X+, r0
    773c:	05 90       	lpm	r0, Z+
    773e:	0d 92       	st	X+, r0
    7740:	05 90       	lpm	r0, Z+
    7742:	0d 92       	st	X+, r0
    7744:	05 90       	lpm	r0, Z+
    7746:	0d 92       	st	X+, r0
    7748:	05 90       	lpm	r0, Z+
    774a:	0d 92       	st	X+, r0
    774c:	05 90       	lpm	r0, Z+
    774e:	0d 92       	st	X+, r0
    7750:	05 90       	lpm	r0, Z+
    7752:	0d 92       	st	X+, r0
    7754:	05 90       	lpm	r0, Z+
    7756:	0d 92       	st	X+, r0
    7758:	05 90       	lpm	r0, Z+
    775a:	0d 92       	st	X+, r0
    775c:	05 90       	lpm	r0, Z+
    775e:	0d 92       	st	X+, r0
    7760:	05 90       	lpm	r0, Z+
    7762:	0d 92       	st	X+, r0
    7764:	05 90       	lpm	r0, Z+
    7766:	0d 92       	st	X+, r0
    7768:	05 90       	lpm	r0, Z+
    776a:	0d 92       	st	X+, r0
    776c:	05 90       	lpm	r0, Z+
    776e:	0d 92       	st	X+, r0
    7770:	05 90       	lpm	r0, Z+
    7772:	0d 92       	st	X+, r0
    7774:	05 90       	lpm	r0, Z+
    7776:	0d 92       	st	X+, r0
    7778:	05 90       	lpm	r0, Z+
    777a:	0d 92       	st	X+, r0
    777c:	05 90       	lpm	r0, Z+
    777e:	0d 92       	st	X+, r0
    7780:	05 90       	lpm	r0, Z+
    7782:	0d 92       	st	X+, r0
    7784:	05 90       	lpm	r0, Z+
    7786:	0d 92       	st	X+, r0
    7788:	05 90       	lpm	r0, Z+
    778a:	0d 92       	st	X+, r0
    778c:	05 90       	lpm	r0, Z+
    778e:	0d 92       	st	X+, r0
    7790:	05 90       	lpm	r0, Z+
    7792:	0d 92       	st	X+, r0
    7794:	05 90       	lpm	r0, Z+
    7796:	0d 92       	st	X+, r0
    7798:	05 90       	lpm	r0, Z+
    779a:	0d 92       	st	X+, r0
    779c:	05 90       	lpm	r0, Z+
    779e:	0d 92       	st	X+, r0
    77a0:	05 90       	lpm	r0, Z+
    77a2:	0d 92       	st	X+, r0
    77a4:	05 90       	lpm	r0, Z+
    77a6:	0d 92       	st	X+, r0
    77a8:	05 90       	lpm	r0, Z+
    77aa:	0d 92       	st	X+, r0
    77ac:	05 90       	lpm	r0, Z+
    77ae:	0d 92       	st	X+, r0
    77b0:	05 90       	lpm	r0, Z+
    77b2:	0d 92       	st	X+, r0
    77b4:	05 90       	lpm	r0, Z+
    77b6:	0d 92       	st	X+, r0
    77b8:	05 90       	lpm	r0, Z+
    77ba:	0d 92       	st	X+, r0
    77bc:	05 90       	lpm	r0, Z+
    77be:	0d 92       	st	X+, r0
    77c0:	05 90       	lpm	r0, Z+
    77c2:	0d 92       	st	X+, r0
    77c4:	05 90       	lpm	r0, Z+
    77c6:	0d 92       	st	X+, r0
    77c8:	05 90       	lpm	r0, Z+
    77ca:	0d 92       	st	X+, r0
    77cc:	05 90       	lpm	r0, Z+
    77ce:	0d 92       	st	X+, r0
    77d0:	05 90       	lpm	r0, Z+
    77d2:	0d 92       	st	X+, r0
    77d4:	05 90       	lpm	r0, Z+
    77d6:	0d 92       	st	X+, r0
    77d8:	05 90       	lpm	r0, Z+
    77da:	0d 92       	st	X+, r0
    77dc:	05 90       	lpm	r0, Z+
    77de:	0d 92       	st	X+, r0
    77e0:	05 90       	lpm	r0, Z+
    77e2:	0d 92       	st	X+, r0
    77e4:	05 90       	lpm	r0, Z+
    77e6:	0d 92       	st	X+, r0
    77e8:	05 90       	lpm	r0, Z+
    77ea:	0d 92       	st	X+, r0
    77ec:	05 90       	lpm	r0, Z+
    77ee:	0d 92       	st	X+, r0
    77f0:	05 90       	lpm	r0, Z+
    77f2:	0d 92       	st	X+, r0
    77f4:	05 90       	lpm	r0, Z+
    77f6:	0d 92       	st	X+, r0
    77f8:	05 90       	lpm	r0, Z+
    77fa:	0d 92       	st	X+, r0
    77fc:	05 90       	lpm	r0, Z+
    77fe:	0d 92       	st	X+, r0
    7800:	05 90       	lpm	r0, Z+
    7802:	0d 92       	st	X+, r0
    7804:	05 90       	lpm	r0, Z+
    7806:	0d 92       	st	X+, r0
    7808:	05 90       	lpm	r0, Z+
    780a:	0d 92       	st	X+, r0
    780c:	05 90       	lpm	r0, Z+
    780e:	0d 92       	st	X+, r0
    7810:	05 90       	lpm	r0, Z+
    7812:	0d 92       	st	X+, r0
    7814:	05 90       	lpm	r0, Z+
    7816:	0d 92       	st	X+, r0
    7818:	05 90       	lpm	r0, Z+
    781a:	0d 92       	st	X+, r0
    781c:	05 90       	lpm	r0, Z+
    781e:	0d 92       	st	X+, r0
    7820:	05 90       	lpm	r0, Z+
    7822:	0d 92       	st	X+, r0
    7824:	05 90       	lpm	r0, Z+
    7826:	0d 92       	st	X+, r0


	clr r1
    7828:	11 24       	eor	r1, r1
	ret
    782a:	08 95       	ret

0000782c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    782c:	0f 93       	push	r16
	push r17
    782e:	1f 93       	push	r17
	push YL
    7830:	cf 93       	push	r28
	push YH
    7832:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7834:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7836:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7838:	e8 e8       	ldi	r30, 0x88	; 136
	ldi ZH,hi8(sprites)	
    783a:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    783c:	e0 0d       	add	r30, r0
	adc ZH,r1
    783e:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7840:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7842:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7844:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7846:	8e 9f       	mul	r24, r30
	movw r26,r0
    7848:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    784a:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    784c:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    784e:	c3 e3       	ldi	r28, 0x33	; 51
	ldi YH,hi8(sprites_tile_banks)	
    7850:	d9 e0       	ldi	r29, 0x09	; 9
	clr r0
    7852:	00 24       	eor	r0, r0
	add YL,r1
    7854:	c1 0d       	add	r28, r1
	adc YH,r0		
    7856:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7858:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    785a:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    785c:	ea 0f       	add	r30, r26
	adc ZH,r27
    785e:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7860:	a0 ec       	ldi	r26, 0xC0	; 192
	ldi XH,hi8(ram_tiles)
    7862:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7864:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7866:	69 9f       	mul	r22, r25
	add XL,r0
    7868:	a0 0d       	add	r26, r0
	adc XH,r1
    786a:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    786c:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    786e:	dd 27       	eor	r29, r29

	cpi r20,0	
    7870:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7872:	51 f4       	brne	.+20     	; 0x7888 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7874:	a2 0f       	add	r26, r18
	adc XH,r1
    7876:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7878:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    787a:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    787c:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    787e:	11 c0       	rjmp	.+34     	; 0x78a2 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7880:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7882:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7884:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7886:	0d c0       	rjmp	.+26     	; 0x78a2 <x_check_end>

00007888 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7888:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    788a:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    788c:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    788e:	04 c0       	rjmp	.+8      	; 0x7898 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7890:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7892:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7894:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7896:	05 c0       	rjmp	.+10     	; 0x78a2 <x_check_end>

00007898 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7898:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    789a:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    789c:	e2 0f       	add	r30, r18
	adc ZH,r1
    789e:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    78a0:	31 97       	sbiw	r30, 0x01	; 1

000078a2 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    78a2:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    78a4:	41 f4       	brne	.+16     	; 0x78b6 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    78a6:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    78a8:	93 9f       	mul	r25, r19
	add XL,r0
    78aa:	a0 0d       	add	r26, r0
	adc XH,r1
    78ac:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    78ae:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    78b0:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    78b2:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    78b4:	0a c0       	rjmp	.+20     	; 0x78ca <y_check_end>

000078b6 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    78b6:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    78b8:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    78ba:	63 2f       	mov	r22, r19
	dec r22
    78bc:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    78be:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    78c0:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    78c2:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    78c4:	56 9f       	mul	r21, r22
	add ZL,r0
    78c6:	e0 0d       	add	r30, r0
	adc ZH,r1	
    78c8:	f1 1d       	adc	r31, r1

000078ca <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    78ca:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    78cc:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    78ce:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    78d0:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    78d2:	00 ff       	sbrs	r16, 0
	clr r23
    78d4:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    78d6:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    78d8:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    78da:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    78dc:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    78de:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    78e0:	59 1b       	sub	r21, r25

000078e2 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    78e2:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    78e4:	48 1b       	sub	r20, r24

000078e6 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    78e6:	24 91       	lpm	r18, Z+
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    78e8:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    78ea:	2c 93       	st	X, r18
	adiw XL,1
    78ec:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    78ee:	e6 0f       	add	r30, r22
	adc ZH,r23
    78f0:	f7 1f       	adc	r31, r23
	dec r20
    78f2:	4a 95       	dec	r20
	brne x_loop
    78f4:	c1 f7       	brne	.-16     	; 0x78e6 <x_loop>

	add ZL,YL		;src+=srcXdiff
    78f6:	ec 0f       	add	r30, r28
	adc ZH,YH
    78f8:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    78fa:	a8 0f       	add	r26, r24
	adc XH,r1
    78fc:	b1 1d       	adc	r27, r1
	dec r21
    78fe:	5a 95       	dec	r21
	brne y_loop
    7900:	81 f7       	brne	.-32     	; 0x78e2 <y_loop>


	pop YH
    7902:	df 91       	pop	r29
	pop YL
    7904:	cf 91       	pop	r28
	pop r17
    7906:	1f 91       	pop	r17
	pop r16
    7908:	0f 91       	pop	r16
	ret
    790a:	08 95       	ret

0000790c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    790c:	0f 92       	push	r0
	push r1
    790e:	1f 92       	push	r1
	push ZL;2
    7910:	ef 93       	push	r30
	push ZH;2
    7912:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7914:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7916:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7918:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    791c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    791e:	f1 e0       	ldi	r31, 0x01	; 1

00007920 <latency_loop>:
latency_loop:
	cp ZL,ZH
    7920:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7922:	00 f0       	brcs	.+0      	; 0x7924 <latency_loop+0x4>
	inc ZH
    7924:	f3 95       	inc	r31
	cpi ZH,10
    7926:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7928:	d8 f3       	brcs	.-10     	; 0x7920 <latency_loop>
	jmp .
    792a:	0c 94 97 3c 	jmp	0x792e	; 0x792e <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    792e:	e0 91 43 09 	lds	r30, 0x0943
	dec ZL
    7932:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7934:	e0 93 43 09 	sts	0x0943, r30

	;process sync phases
	lds ZH,sync_phase
    7938:	f0 91 42 09 	lds	r31, 0x0942
	sbrc ZH,0
    793c:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    793e:	57 c0       	rjmp	.+174    	; 0x79ee <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7940:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7942:	98 f0       	brcs	.+38     	; 0x796a <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7944:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7946:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    794a:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    794c:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7950:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7952:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7954:	26 f4       	brtc	.+8      	; 0x795e <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7956:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7958:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <update_sound>
	rjmp sync_end
    795c:	b6 c0       	rjmp	.+364    	; 0x7aca <sync_end>

0000795e <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    795e:	e5 e1       	ldi	r30, 0x15	; 21
    7960:	ea 95       	dec	r30
    7962:	f1 f7       	brne	.-4      	; 0x7960 <sync_pre_eq_no_sound_update+0x2>
    7964:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7966:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7968:	b0 c0       	rjmp	.+352    	; 0x7aca <sync_end>

0000796a <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    796a:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    796c:	38 f1       	brcs	.+78     	; 0x79bc <sync_post_eq>

	rjmp .
    796e:	00 c0       	rjmp	.+0      	; 0x7970 <sync_eq+0x6>
	rjmp .
    7970:	00 c0       	rjmp	.+0      	; 0x7972 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7972:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7974:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7976:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7978:	16 f4       	brtc	.+4      	; 0x797e <sync_eq_skip>
	
	call update_sound
    797a:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <update_sound>

0000797e <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    797e:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7980:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7984:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7986:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    798a:	9f c0       	rjmp	.+318    	; 0x7aca <sync_end>

0000798c <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    798c:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    798e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7990:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7992:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7996:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7998:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    799a:	00 f0       	brcs	.+0      	; 0x799c <__vector_14+0x10>

	cpi ZL,2
    799c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    799e:	00 f0       	brcs	.+0      	; 0x79a0 <__vector_14+0x14>

	cpi ZL,3
    79a0:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    79a2:	00 f0       	brcs	.+0      	; 0x79a4 <__vector_14+0x18>

	cpi ZL,4
    79a4:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    79a6:	00 f0       	brcs	.+0      	; 0x79a8 <__vector_14+0x1c>

	cpi ZL,5
    79a8:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    79aa:	00 f0       	brcs	.+0      	; 0x79ac <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    79ac:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    79ae:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    79b0:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    79b4:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    79b6:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    79b8:	ef 91       	pop	r30
	reti
    79ba:	18 95       	reti

000079bc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    79bc:	00 c0       	rjmp	.+0      	; 0x79be <sync_post_eq+0x2>

	bst ZL,0
    79be:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79c0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    79c2:	26 f4       	brtc	.+8      	; 0x79cc <sync_post_eq_no_sound_update>
	ldi ZL,1	
    79c4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    79c6:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <update_sound>
	rjmp sync_pre_eq_cont
    79ca:	05 c0       	rjmp	.+10     	; 0x79d6 <sync_pre_eq_cont>

000079cc <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    79cc:	e5 e1       	ldi	r30, 0x15	; 21
    79ce:	ea 95       	dec	r30
    79d0:	f1 f7       	brne	.-4      	; 0x79ce <sync_post_eq_no_sound_update+0x2>
    79d2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    79d4:	28 9a       	sbi	0x05, 0	; 5

000079d6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    79d6:	e0 91 43 09 	lds	r30, 0x0943
	cpi ZL,0
    79da:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    79dc:	09 f0       	breq	.+2      	; 0x79e0 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    79de:	75 c0       	rjmp	.+234    	; 0x7aca <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    79e0:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    79e2:	e0 93 43 09 	sts	0x0943, r30
	ldi ZL,1
    79e6:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    79e8:	e0 93 42 09 	sts	0x0942, r30
	
	rjmp sync_end
    79ec:	6e c0       	rjmp	.+220    	; 0x7aca <sync_end>

000079ee <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    79ee:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    79f0:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    79f4:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    79f6:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    79fa:	00 c0       	rjmp	.+0      	; 0x79fc <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    79fc:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    79fe:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7a00:	00 c0       	rjmp	.+0      	; 0x7a02 <sync_hsync+0x14>
	call update_sound
    7a02:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7a06:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7a08:	00 90 49 09 	lds	r0, 0x0949
	sub ZH,r0				
    7a0c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7a0e:	e0 91 43 09 	lds	r30, 0x0943
	cp ZL,ZH
    7a12:	ef 17       	cp	r30, r31
	brsh no_render
    7a14:	d0 f4       	brcc	.+52     	; 0x7a4a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7a16:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7a18:	00 90 49 09 	lds	r0, 0x0949
	sub ZH,r0				
    7a1c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7a1e:	00 90 4a 09 	lds	r0, 0x094A
	sub ZH,r0			
    7a22:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7a24:	ef 17       	cp	r30, r31
	brlo no_render
    7a26:	88 f0       	brcs	.+34     	; 0x7a4a <no_render>

	;push r1-r29
	ldi ZL,29
    7a28:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7a2a:	ff 27       	eor	r31, r31

00007a2c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7a2c:	00 80       	ld	r0, Z
	push r0
    7a2e:	0f 92       	push	r0
	dec ZL
    7a30:	ea 95       	dec	r30
	brne push_loop	
    7a32:	e1 f7       	brne	.-8      	; 0x7a2c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,18+212-AUDIO_OUT_HSYNC_CYCLES
    7a34:	06 e0       	ldi	r16, 0x06	; 6
    7a36:	0a 95       	dec	r16
    7a38:	f1 f7       	brne	.-4      	; 0x7a36 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7a3a:	0e 94 b2 3a 	call	0x7564	; 0x7564 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7a3e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7a40:	ff 27       	eor	r31, r31

00007a42 <pop_loop>:
pop_loop:
	pop r0
    7a42:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7a44:	01 92       	st	Z+, r0
	cpi ZL,30
    7a46:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7a48:	e0 f3       	brcs	.-8      	; 0x7a42 <pop_loop>

00007a4a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7a4a:	e0 91 43 09 	lds	r30, 0x0943
	cpi ZL,0
    7a4e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7a50:	09 f0       	breq	.+2      	; 0x7a54 <no_render+0xa>
	rjmp sync_end
    7a52:	3b c0       	rjmp	.+118    	; 0x7aca <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7a54:	2f 93       	push	r18
	push r19
    7a56:	3f 93       	push	r19
	push r20
    7a58:	4f 93       	push	r20
	push r21
    7a5a:	5f 93       	push	r21
	push r22
    7a5c:	6f 93       	push	r22
	push r23
    7a5e:	7f 93       	push	r23
	push r24
    7a60:	8f 93       	push	r24
	push r25
    7a62:	9f 93       	push	r25
	push r26
    7a64:	af 93       	push	r26
	push r27
    7a66:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7a68:	78 94       	sei
	clr r1
    7a6a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7a6c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7a6e:	e0 93 42 09 	sts	0x0942, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7a72:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7a74:	e0 93 43 09 	sts	0x0943, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    7a78:	f0 91 4b 09 	lds	r31, 0x094B
	sts first_render_line,ZH
    7a7c:	f0 93 49 09 	sts	0x0949, r31
	
	lds ZH,render_lines_count_tmp
    7a80:	f0 91 4c 09 	lds	r31, 0x094C
	sts render_lines_count,ZH
    7a84:	f0 93 4a 09 	sts	0x094A, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7a88:	e0 91 45 09 	lds	r30, 0x0945
	lds ZH,pre_vsync_user_callback+1
    7a8c:	f0 91 46 09 	lds	r31, 0x0946
	cp  ZL,r1
    7a90:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7a92:	f1 05       	cpc	r31, r1
	breq .+2 
    7a94:	09 f0       	breq	.+2      	; 0x7a98 <no_render+0x4e>
	icall
    7a96:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7a98:	0e 94 b0 3e 	call	0x7d60	; 0x7d60 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7a9c:	0e 94 73 49 	call	0x92e6	; 0x92e6 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7aa0:	0e 94 77 3d 	call	0x7aee	; 0x7aee <process_music>
	clr r1
    7aa4:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7aa6:	e0 91 47 09 	lds	r30, 0x0947
	lds ZH,post_vsync_user_callback+1
    7aaa:	f0 91 48 09 	lds	r31, 0x0948
	cp  ZL,r1
    7aae:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7ab0:	f1 05       	cpc	r31, r1
	breq .+2 
    7ab2:	09 f0       	breq	.+2      	; 0x7ab6 <no_render+0x6c>
	icall
    7ab4:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7ab6:	bf 91       	pop	r27
	pop r26
    7ab8:	af 91       	pop	r26
	pop r25
    7aba:	9f 91       	pop	r25
	pop r24
    7abc:	8f 91       	pop	r24
	pop r23
    7abe:	7f 91       	pop	r23
	pop r22
    7ac0:	6f 91       	pop	r22
	pop r21
    7ac2:	5f 91       	pop	r21
	pop r20
    7ac4:	4f 91       	pop	r20
	pop r19
    7ac6:	3f 91       	pop	r19
	pop r18
    7ac8:	2f 91       	pop	r18

00007aca <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7aca:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7acc:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7ace:	ff 91       	pop	r31
	pop ZL
    7ad0:	ef 91       	pop	r30
	pop r1
    7ad2:	1f 90       	pop	r1
	pop r0
    7ad4:	0f 90       	pop	r0
	reti
    7ad6:	18 95       	reti

00007ad8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7ad8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7ada:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7adc:	00 c0       	rjmp	.+0      	; 0x7ade <hsync_pulse+0x6>
	call update_sound
    7ade:	0e 94 7d 3d 	call	0x7afa	; 0x7afa <update_sound>

	lds ZL,sync_pulse
    7ae2:	e0 91 43 09 	lds	r30, 0x0943
	dec ZL
    7ae6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7ae8:	e0 93 43 09 	sts	0x0943, r30

	ret
    7aec:	08 95       	ret

00007aee <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7aee:	e0 91 61 09 	lds	r30, 0x0961
	sbrc ZL,0
    7af2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7af4:	0e 94 8a 41 	call	0x8314	; 0x8314 <ProcessMusic>
#endif

	ret
    7af8:	08 95       	ret

00007afa <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    7afa:	0f 93       	push	r16
	push r17
    7afc:	1f 93       	push	r17
	push r18
    7afe:	2f 93       	push	r18
	push r28
    7b00:	cf 93       	push	r28
	push r29
    7b02:	df 93       	push	r29

	mov r18,ZL
    7b04:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7b06:	00 91 63 09 	lds	r16, 0x0963
	lds r17,tr1_pos_frac
    7b0a:	10 91 65 09 	lds	r17, 0x0965
	add	r17,r16	;add step to fractional part of sample pos
    7b0e:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7b10:	00 91 64 09 	lds	r16, 0x0964
	lds ZL,tr1_pos_lo
    7b14:	e0 91 66 09 	lds	r30, 0x0966
	lds ZH,tr1_pos_hi 
    7b18:	f0 91 67 09 	lds	r31, 0x0967
	adc ZL,r16	;add step to low byte of sample pos
    7b1c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7b1e:	04 91       	lpm	r16, Z+
	sts tr1_pos_lo,ZL
    7b20:	e0 93 66 09 	sts	0x0966, r30
	sts tr1_pos_frac,r17
    7b24:	10 93 65 09 	sts	0x0965, r17
	lds r17,tr1_vol
    7b28:	10 91 62 09 	lds	r17, 0x0962
	mulsu r16,r17;(sample*mixing vol)
    7b2c:	01 03       	mulsu	r16, r17
	clr r0
    7b2e:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend	
    7b30:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7b32:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7b34:	d0 2d       	mov	r29, r0

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7b36:	00 91 69 09 	lds	r16, 0x0969
	lds r17,tr2_pos_frac
    7b3a:	10 91 6b 09 	lds	r17, 0x096B
	add	r17,r16	;add step to fractional part of sample pos
    7b3e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7b40:	00 91 6a 09 	lds	r16, 0x096A
	lds ZL,tr2_pos_lo
    7b44:	e0 91 6c 09 	lds	r30, 0x096C
	lds ZH,tr2_pos_hi 
    7b48:	f0 91 6d 09 	lds	r31, 0x096D
	adc ZL,r16	;add step to low byte of sample pos
    7b4c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7b4e:	04 91       	lpm	r16, Z+
	sts tr2_pos_lo,ZL
    7b50:	e0 93 6c 09 	sts	0x096C, r30
	sts tr2_pos_frac,r17
    7b54:	10 93 6b 09 	sts	0x096B, r17
	lds r17,tr2_vol
    7b58:	10 91 68 09 	lds	r17, 0x0968
	;clr r17
	;nop

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7b5c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7b5e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7b60:	20 ff       	sbrs	r18, 0
	rjmp .
    7b62:	00 c0       	rjmp	.+0      	; 0x7b64 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7b64:	01 03       	mulsu	r16, r17
	clr r0
    7b66:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7b68:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7b6a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7b6c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7b6e:	00 91 6f 09 	lds	r16, 0x096F
	lds r17,tr3_pos_frac
    7b72:	10 91 71 09 	lds	r17, 0x0971
	add	r17,r16				;add step to fractional part of sample pos
    7b76:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7b78:	00 91 70 09 	lds	r16, 0x0970
	lds ZL,tr3_pos_lo
    7b7c:	e0 91 72 09 	lds	r30, 0x0972
	lds ZH,tr3_pos_hi 
    7b80:	f0 91 73 09 	lds	r31, 0x0973
	adc ZL,r16				;add step to low byte of sample pos
    7b84:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7b86:	04 91       	lpm	r16, Z+
	sts tr3_pos_lo,ZL
    7b88:	e0 93 72 09 	sts	0x0972, r30
	sts tr3_pos_frac,r17
    7b8c:	10 93 71 09 	sts	0x0971, r17
	lds r17,tr3_vol
    7b90:	10 91 6e 09 	lds	r17, 0x096E
	mulsu r16,r17			;(sample*mixing vol)
    7b94:	01 03       	mulsu	r16, r17
	clr r0
    7b96:	00 24       	eor	r0, r0
	sbc r0,r0				;sign extend
    7b98:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7b9a:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7b9c:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7b9e:	00 91 76 09 	lds	r16, 0x0976
	lds r17,tr4_barrel_hi
    7ba2:	10 91 77 09 	lds	r17, 0x0977
	lds ZL,tr4_divider
    7ba6:	e0 91 78 09 	lds	r30, 0x0978
	dec ZL	
    7baa:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7bac:	92 f4       	brpl	.+36     	; 0x7bd2 <ch4_no_shift>

	lds ZH,tr4_params
    7bae:	f0 91 75 09 	lds	r31, 0x0975
	mov ZL,ZH
    7bb2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7bb4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7bb6:	00 2e       	mov	r0, r16
	lsr r0
    7bb8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7bba:	00 26       	eor	r0, r16
	bst r0,0
    7bbc:	00 fa       	bst	r0, 0
	lsr r17
    7bbe:	16 95       	lsr	r17
	ror r16
    7bc0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7bc2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7bc4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7bc6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7bc8:	00 93 76 09 	sts	0x0976, r16
	sts tr4_barrel_hi,r17
    7bcc:	10 93 77 09 	sts	0x0977, r17

	rjmp ch4_end
    7bd0:	03 c0       	rjmp	.+6      	; 0x7bd8 <ch4_end>

00007bd2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7bd2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7bd4:	1a 95       	dec	r17
	brne .-4
    7bd6:	f1 f7       	brne	.-4      	; 0x7bd4 <ch4_no_shift+0x2>

00007bd8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7bd8:	e0 93 78 09 	sts	0x0978, r30
;126
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7bdc:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7bde:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7be0:	21 ff       	sbrs	r18, 1
	rjmp .
    7be2:	00 c0       	rjmp	.+0      	; 0x7be4 <ch4_end+0xc>
	;*************************
	
	ldi r17,0x80 ;-128
    7be4:	10 e8       	ldi	r17, 0x80	; 128
	sbrc r16,0
    7be6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7be8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7bea:	00 91 74 09 	lds	r16, 0x0974

	mulsu r17,r16;(sample*mixing vol)
    7bee:	10 03       	mulsu	r17, r16
	clr r0
    7bf0:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7bf2:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7bf4:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7bf6:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 43 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7bf8:	00 91 7d 09 	lds	r16, 0x097D
	lds r17,tr5_step_lo 
    7bfc:	10 91 7b 09 	lds	r17, 0x097B
	add r16,r17
    7c00:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7c02:	00 93 7d 09 	sts	0x097D, r16

	;add lo
	lds ZL,tr5_pos_lo
    7c06:	e0 91 7e 09 	lds	r30, 0x097E
	lds r17,tr5_step_hi 
    7c0a:	10 91 7c 09 	lds	r17, 0x097C
	adc ZL,r17
    7c0e:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7c10:	f0 91 7f 09 	lds	r31, 0x097F
	ldi r16,0
    7c14:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7c16:	f0 1f       	adc	r31, r16

	lds r0,tr5_loop_end_lo
    7c18:	00 90 82 09 	lds	r0, 0x0982
	lds r1,tr5_loop_end_hi
    7c1c:	10 90 83 09 	lds	r1, 0x0983

	lds r16,tr5_loop_start_lo
    7c20:	00 91 80 09 	lds	r16, 0x0980
	lds r17,tr5_loop_start_hi	
    7c24:	10 91 81 09 	lds	r17, 0x0981

	cp ZL,r0
    7c28:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7c2a:	f1 05       	cpc	r31, r1
	brlo .+2
    7c2c:	08 f0       	brcs	.+2      	; 0x7c30 <ch4_end+0x58>
	movw ZL,r16
    7c2e:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7c30:	e0 93 7e 09 	sts	0x097E, r30
	sts tr5_pos_hi,ZH
    7c34:	f0 93 7f 09 	sts	0x097F, r31

	lpm	r16,Z	;load sample
    7c38:	04 91       	lpm	r16, Z+
	lds r17,tr5_vol
    7c3a:	10 91 7a 09 	lds	r17, 0x097A

	mulsu r16,r17;(sample*mixing vol)
    7c3e:	01 03       	mulsu	r16, r17
	clr r0
    7c40:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7c42:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7c44:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7c46:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7c48:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7c4a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7c4c:	d0 05       	cpc	r29, r0
	brlt .+2
    7c4e:	0c f0       	brlt	.+2      	; 0x7c52 <ch4_end+0x7a>
	ldi r28,127
    7c50:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7c52:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7c54:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7c56:	d0 05       	cpc	r29, r0
	brge .+2
    7c58:	0c f4       	brge	.+2      	; 0x7c5c <ch4_end+0x84>
	ldi r28,-128
    7c5a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7c5c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7c5e:	c0 93 b3 00 	sts	0x00B3, r28
	
	pop r29
    7c62:	df 91       	pop	r29
	pop r28
    7c64:	cf 91       	pop	r28
	pop r18
    7c66:	2f 91       	pop	r18
	pop r17
    7c68:	1f 91       	pop	r17
	pop r16
    7c6a:	0f 91       	pop	r16
	
	ret
    7c6c:	08 95       	ret

00007c6e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7c6e:	80 93 33 09 	sts	0x0933, r24
	sts sprites_tile_banks+1,r25
    7c72:	90 93 34 09 	sts	0x0934, r25
	ret
    7c76:	08 95       	ret

00007c78 <SetTile>:

	ret

#else

	clr r25
    7c78:	99 27       	eor	r25, r25
	clr r23	
    7c7a:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7c7c:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7c7e:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7c80:	08 0e       	add	r0, r24
	adc r1,r25
    7c82:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7c84:	a0 e4       	ldi	r26, 0x40	; 64
	ldi XH,hi8(vram)
    7c86:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7c88:	a0 0d       	add	r26, r0
	adc XH,r1
    7c8a:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7c8c:	4f 5e       	subi	r20, 0xEF	; 239
	st X,r20
    7c8e:	4c 93       	st	X, r20

	clr r1
    7c90:	11 24       	eor	r1, r1

	ret
    7c92:	08 95       	ret

00007c94 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    7c94:	80 93 3d 09 	sts	0x093D, r24
	ret
    7c98:	08 95       	ret

00007c9a <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7c9a:	80 93 3b 09 	sts	0x093B, r24
	sts tile_table_hi,r25	
    7c9e:	90 93 3c 09 	sts	0x093C, r25
	ret
    7ca2:	08 95       	ret

00007ca4 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7ca4:	80 91 44 09 	lds	r24, 0x0944
	andi r24,SYNC_FLAG_VSYNC
    7ca8:	81 70       	andi	r24, 0x01	; 1
	ret
    7caa:	08 95       	ret

00007cac <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7cac:	20 91 44 09 	lds	r18, 0x0944
	andi r18,~SYNC_FLAG_VSYNC
    7cb0:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7cb2:	20 93 44 09 	sts	0x0944, r18
	ret
    7cb6:	08 95       	ret

00007cb8 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7cb8:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7cba:	fe cf       	rjmp	.-4      	; 0x7cb8 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7cbc:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7cbe:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7cc0:	60 bd       	out	0x20, r22	; 32
   cli
    7cc2:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7cc4:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7cc6:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7cc8:	78 94       	sei
   ret
    7cca:	08 95       	ret

00007ccc <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7ccc:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7cce:	fe cf       	rjmp	.-4      	; 0x7ccc <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7cd0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7cd2:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7cd4:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7cd6:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7cd8:	80 b5       	in	r24, 0x20	; 32
   sei
    7cda:	78 94       	sei
   ret
    7cdc:	08 95       	ret

00007cde <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7cde:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7ce0:	c8 95       	lpm
    7ce2:	c8 95       	lpm
		Wait200ns();
    7ce4:	c8 95       	lpm
    7ce6:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7ce8:	12 98       	cbi	0x02, 2	; 2
    7cea:	20 e0       	ldi	r18, 0x00	; 0
    7cec:	30 e0       	ldi	r19, 0x00	; 0
    7cee:	80 e0       	ldi	r24, 0x00	; 0
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	40 e0       	ldi	r20, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7cf4:	36 95       	lsr	r19
    7cf6:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7cf8:	96 95       	lsr	r25
    7cfa:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7cfc:	c8 95       	lpm
    7cfe:	c8 95       	lpm
			Wait200ns();
    7d00:	c8 95       	lpm
    7d02:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7d04:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7d06:	00 9b       	sbis	0x00, 0	; 0
    7d08:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7d0a:	01 9b       	sbis	0x00, 1	; 0
    7d0c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7d0e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d10:	c8 95       	lpm
    7d12:	c8 95       	lpm
			Wait200ns();
    7d14:	c8 95       	lpm
    7d16:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7d18:	4f 5f       	subi	r20, 0xFF	; 255
    7d1a:	40 31       	cpi	r20, 0x10	; 16
    7d1c:	59 f7       	brne	.-42     	; 0x7cf4 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7d1e:	30 93 4e 09 	sts	0x094E, r19
    7d22:	20 93 4d 09 	sts	0x094D, r18
		joypad2_status_lo=p2ButtonsLo;
    7d26:	90 93 50 09 	sts	0x0950, r25
    7d2a:	80 93 4f 09 	sts	0x094F, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7d2e:	80 91 4d 09 	lds	r24, 0x094D
    7d32:	90 91 4e 09 	lds	r25, 0x094E
    7d36:	0f 97       	sbiw	r24, 0x0f	; 15
    7d38:	31 f0       	breq	.+12     	; 0x7d46 <ReadButtons+0x68>
    7d3a:	80 91 4f 09 	lds	r24, 0x094F
    7d3e:	90 91 50 09 	lds	r25, 0x0950
    7d42:	0f 97       	sbiw	r24, 0x0f	; 15
    7d44:	61 f4       	brne	.+24     	; 0x7d5e <ReadButtons+0x80>

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7d46:	28 e0       	ldi	r18, 0x08	; 8
    7d48:	88 e1       	ldi	r24, 0x18	; 24
    7d4a:	90 e0       	ldi	r25, 0x00	; 0
    7d4c:	0f b6       	in	r0, 0x3f	; 63
    7d4e:	f8 94       	cli
    7d50:	a8 95       	wdr
    7d52:	80 93 60 00 	sts	0x0060, r24
    7d56:	0f be       	out	0x3f, r0	; 63
    7d58:	20 93 60 00 	sts	0x0060, r18
    7d5c:	ff cf       	rjmp	.-2      	; 0x7d5c <ReadButtons+0x7e>
    7d5e:	08 95       	ret

00007d60 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    7d60:	10 92 86 09 	sts	0x0986, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7d64:	00 99       	sbic	0x00, 0	; 0
    7d66:	03 c0       	rjmp	.+6      	; 0x7d6e <ReadControllers+0xe>
    7d68:	81 e0       	ldi	r24, 0x01	; 1
    7d6a:	80 93 86 09 	sts	0x0986, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7d6e:	01 99       	sbic	0x00, 1	; 0
    7d70:	05 c0       	rjmp	.+10     	; 0x7d7c <ReadControllers+0x1c>
    7d72:	80 91 86 09 	lds	r24, 0x0986
    7d76:	82 60       	ori	r24, 0x02	; 2
    7d78:	80 93 86 09 	sts	0x0986, r24
			
	//read the standard buttons
	ReadButtons();
    7d7c:	0e 94 6f 3e 	call	0x7cde	; 0x7cde <ReadButtons>
}
    7d80:	08 95       	ret

00007d82 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7d82:	1f 93       	push	r17
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7d84:	80 e0       	ldi	r24, 0x00	; 0
    7d86:	90 e0       	ldi	r25, 0x00	; 0
    7d88:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
    7d8c:	18 2f       	mov	r17, r24
    7d8e:	81 e0       	ldi	r24, 0x01	; 1
    7d90:	90 e0       	ldi	r25, 0x00	; 0
    7d92:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
    7d96:	90 e0       	ldi	r25, 0x00	; 0
    7d98:	38 2f       	mov	r19, r24
    7d9a:	20 e0       	ldi	r18, 0x00	; 0
    7d9c:	21 0f       	add	r18, r17
    7d9e:	31 1d       	adc	r19, r1
    7da0:	2a 55       	subi	r18, 0x5A	; 90
    7da2:	35 45       	sbci	r19, 0x55	; 85
    7da4:	09 f4       	brne	.+2      	; 0x7da8 <isEepromFormatted+0x26>
    7da6:	91 e0       	ldi	r25, 0x01	; 1
	return (id==EEPROM_SIGNATURE);
}
    7da8:	89 2f       	mov	r24, r25
    7daa:	1f 91       	pop	r17
    7dac:	08 95       	ret

00007dae <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    7dae:	a0 e0       	ldi	r26, 0x00	; 0
    7db0:	b0 e0       	ldi	r27, 0x00	; 0
    7db2:	ed ed       	ldi	r30, 0xDD	; 221
    7db4:	fe e3       	ldi	r31, 0x3E	; 62
    7db6:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <__prologue_saves__+0x12>
    7dba:	6c 01       	movw	r12, r24
    7dbc:	06 2f       	mov	r16, r22
    7dbe:	b7 2e       	mov	r11, r23
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7dc0:	0e 94 c1 3e 	call	0x7d82	; 0x7d82 <isEepromFormatted>
    7dc4:	88 23       	and	r24, r24
    7dc6:	09 f4       	brne	.+2      	; 0x7dca <EepromReadBlock+0x1c>
    7dc8:	40 c0       	rjmp	.+128    	; 0x7e4a <EepromReadBlock+0x9c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7dca:	8f ef       	ldi	r24, 0xFF	; 255
    7dcc:	c8 16       	cp	r12, r24
    7dce:	8f ef       	ldi	r24, 0xFF	; 255
    7dd0:	d8 06       	cpc	r13, r24
    7dd2:	11 f4       	brne	.+4      	; 0x7dd8 <EepromReadBlock+0x2a>
    7dd4:	81 e0       	ldi	r24, 0x01	; 1
    7dd6:	3c c0       	rjmp	.+120    	; 0x7e50 <EepromReadBlock+0xa2>
    7dd8:	ee 24       	eor	r14, r14
    7dda:	ff 24       	eor	r15, r15

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7ddc:	c7 01       	movw	r24, r14
    7dde:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
    7de2:	18 2f       	mov	r17, r24
    7de4:	c7 01       	movw	r24, r14
    7de6:	01 96       	adiw	r24, 0x01	; 1
    7de8:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
		if(id==blockId){
    7dec:	d8 2f       	mov	r29, r24
    7dee:	c0 e0       	ldi	r28, 0x00	; 0
    7df0:	ce 01       	movw	r24, r28
    7df2:	81 0f       	add	r24, r17
    7df4:	91 1d       	adc	r25, r1
    7df6:	8c 15       	cp	r24, r12
    7df8:	9d 05       	cpc	r25, r13
    7dfa:	31 f4       	brne	.+12     	; 0x7e08 <EepromReadBlock+0x5a>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7dfc:	9f ef       	ldi	r25, 0xFF	; 255
    7dfe:	e9 16       	cp	r14, r25
    7e00:	9f ef       	ldi	r25, 0xFF	; 255
    7e02:	f9 06       	cpc	r15, r25
    7e04:	59 f4       	brne	.+22     	; 0x7e1c <EepromReadBlock+0x6e>
    7e06:	23 c0       	rjmp	.+70     	; 0x7e4e <EepromReadBlock+0xa0>
    7e08:	80 e2       	ldi	r24, 0x20	; 32
    7e0a:	90 e0       	ldi	r25, 0x00	; 0
    7e0c:	e8 0e       	add	r14, r24
    7e0e:	f9 1e       	adc	r15, r25

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    7e10:	90 e0       	ldi	r25, 0x00	; 0
    7e12:	e9 16       	cp	r14, r25
    7e14:	94 e0       	ldi	r25, 0x04	; 4
    7e16:	f9 06       	cpc	r15, r25
    7e18:	09 f7       	brne	.-62     	; 0x7ddc <EepromReadBlock+0x2e>
    7e1a:	19 c0       	rjmp	.+50     	; 0x7e4e <EepromReadBlock+0xa0>
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;
    7e1c:	80 2f       	mov	r24, r16
    7e1e:	9b 2d       	mov	r25, r11
    7e20:	9c 01       	movw	r18, r24
    7e22:	e9 01       	movw	r28, r18
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7e24:	70 e2       	ldi	r23, 0x20	; 32
    7e26:	c7 2e       	mov	r12, r23
    7e28:	d1 2c       	mov	r13, r1
    7e2a:	c2 0e       	add	r12, r18
    7e2c:	d3 1e       	adc	r13, r19
		*destPtr=ReadEeprom(destAddr++);
    7e2e:	87 01       	movw	r16, r14
    7e30:	0f 5f       	subi	r16, 0xFF	; 255
    7e32:	1f 4f       	sbci	r17, 0xFF	; 255
    7e34:	c7 01       	movw	r24, r14
    7e36:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
    7e3a:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7e3c:	cc 15       	cp	r28, r12
    7e3e:	dd 05       	cpc	r29, r13
    7e40:	11 f4       	brne	.+4      	; 0x7e46 <EepromReadBlock+0x98>
    7e42:	80 e0       	ldi	r24, 0x00	; 0
    7e44:	05 c0       	rjmp	.+10     	; 0x7e50 <EepromReadBlock+0xa2>
    7e46:	78 01       	movw	r14, r16
    7e48:	f2 cf       	rjmp	.-28     	; 0x7e2e <EepromReadBlock+0x80>
    7e4a:	84 e0       	ldi	r24, 0x04	; 4
    7e4c:	01 c0       	rjmp	.+2      	; 0x7e50 <EepromReadBlock+0xa2>
    7e4e:	83 e0       	ldi	r24, 0x03	; 3
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    7e50:	cd b7       	in	r28, 0x3d	; 61
    7e52:	de b7       	in	r29, 0x3e	; 62
    7e54:	e9 e0       	ldi	r30, 0x09	; 9
    7e56:	0c 94 3b 5a 	jmp	0xb476	; 0xb476 <__epilogue_restores__+0x12>

00007e5a <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7e5a:	a0 e0       	ldi	r26, 0x00	; 0
    7e5c:	b0 e0       	ldi	r27, 0x00	; 0
    7e5e:	e3 e3       	ldi	r30, 0x33	; 51
    7e60:	ff e3       	ldi	r31, 0x3F	; 63
    7e62:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <__prologue_saves__+0x12>
    7e66:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7e68:	0e 94 c1 3e 	call	0x7d82	; 0x7d82 <isEepromFormatted>
    7e6c:	88 23       	and	r24, r24
    7e6e:	11 f4       	brne	.+4      	; 0x7e74 <EepromWriteBlock+0x1a>
    7e70:	84 e0       	ldi	r24, 0x04	; 4
    7e72:	4e c0       	rjmp	.+156    	; 0x7f10 <EepromWriteBlock+0xb6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7e74:	f6 01       	movw	r30, r12
    7e76:	80 81       	ld	r24, Z
    7e78:	91 81       	ldd	r25, Z+1	; 0x01
    7e7a:	ff ef       	ldi	r31, 0xFF	; 255
    7e7c:	8f 3f       	cpi	r24, 0xFF	; 255
    7e7e:	9f 07       	cpc	r25, r31
    7e80:	09 f4       	brne	.+2      	; 0x7e84 <EepromWriteBlock+0x2a>
    7e82:	45 c0       	rjmp	.+138    	; 0x7f0e <EepromWriteBlock+0xb4>
    7e84:	8a 55       	subi	r24, 0x5A	; 90
    7e86:	95 45       	sbci	r25, 0x55	; 85
    7e88:	09 f4       	brne	.+2      	; 0x7e8c <EepromWriteBlock+0x32>
    7e8a:	41 c0       	rjmp	.+130    	; 0x7f0e <EepromWriteBlock+0xb4>
    7e8c:	01 e0       	ldi	r16, 0x01	; 1
    7e8e:	10 e0       	ldi	r17, 0x00	; 0
    7e90:	f0 e2       	ldi	r31, 0x20	; 32
    7e92:	ef 2e       	mov	r14, r31
    7e94:	f1 2c       	mov	r15, r1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7e96:	c7 01       	movw	r24, r14
    7e98:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
    7e9c:	b8 2e       	mov	r11, r24
    7e9e:	c7 01       	movw	r24, r14
    7ea0:	01 96       	adiw	r24, 0x01	; 1
    7ea2:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <ReadEeprom>
    7ea6:	d8 2f       	mov	r29, r24
    7ea8:	c0 e0       	ldi	r28, 0x00	; 0
    7eaa:	9e 01       	movw	r18, r28
    7eac:	2b 0d       	add	r18, r11
    7eae:	31 1d       	adc	r19, r1
		if(id==block->id){
    7eb0:	f6 01       	movw	r30, r12
    7eb2:	80 81       	ld	r24, Z
    7eb4:	91 81       	ldd	r25, Z+1	; 0x01
    7eb6:	28 17       	cp	r18, r24
    7eb8:	39 07       	cpc	r19, r25
    7eba:	19 f4       	brne	.+6      	; 0x7ec2 <EepromWriteBlock+0x68>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7ebc:	11 23       	and	r17, r17
    7ebe:	b1 f0       	breq	.+44     	; 0x7eec <EepromWriteBlock+0x92>
    7ec0:	0e c0       	rjmp	.+28     	; 0x7ede <EepromWriteBlock+0x84>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    7ec2:	2f 5f       	subi	r18, 0xFF	; 255
    7ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    7ec6:	19 f4       	brne	.+6      	; 0x7ece <EepromWriteBlock+0x74>
    7ec8:	11 23       	and	r17, r17
    7eca:	09 f4       	brne	.+2      	; 0x7ece <EepromWriteBlock+0x74>
    7ecc:	10 2f       	mov	r17, r16

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    7ece:	0f 5f       	subi	r16, 0xFF	; 255
    7ed0:	80 e2       	ldi	r24, 0x20	; 32
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
    7ed4:	e8 0e       	add	r14, r24
    7ed6:	f9 1e       	adc	r15, r25
    7ed8:	00 34       	cpi	r16, 0x40	; 64
    7eda:	e9 f6       	brne	.-70     	; 0x7e96 <EepromWriteBlock+0x3c>
    7edc:	1e c0       	rjmp	.+60     	; 0x7f1a <EepromWriteBlock+0xc0>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7ede:	e1 2e       	mov	r14, r17
    7ee0:	ff 24       	eor	r15, r15
    7ee2:	e5 e0       	ldi	r30, 0x05	; 5
    7ee4:	ee 0c       	add	r14, r14
    7ee6:	ff 1c       	adc	r15, r15
    7ee8:	ea 95       	dec	r30
    7eea:	e1 f7       	brne	.-8      	; 0x7ee4 <EepromWriteBlock+0x8a>
    7eec:	c0 e0       	ldi	r28, 0x00	; 0
    7eee:	d0 e0       	ldi	r29, 0x00	; 0

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    7ef0:	f6 01       	movw	r30, r12
    7ef2:	ec 0f       	add	r30, r28
    7ef4:	fd 1f       	adc	r31, r29
    7ef6:	ce 01       	movw	r24, r28
    7ef8:	8e 0d       	add	r24, r14
    7efa:	9f 1d       	adc	r25, r15
    7efc:	60 81       	ld	r22, Z
    7efe:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <WriteEeprom>
    7f02:	21 96       	adiw	r28, 0x01	; 1
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7f04:	c0 32       	cpi	r28, 0x20	; 32
    7f06:	d1 05       	cpc	r29, r1
    7f08:	99 f7       	brne	.-26     	; 0x7ef0 <EepromWriteBlock+0x96>
    7f0a:	80 e0       	ldi	r24, 0x00	; 0
    7f0c:	01 c0       	rjmp	.+2      	; 0x7f10 <EepromWriteBlock+0xb6>
    7f0e:	81 e0       	ldi	r24, 0x01	; 1
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    7f10:	cd b7       	in	r28, 0x3d	; 61
    7f12:	de b7       	in	r29, 0x3e	; 62
    7f14:	e9 e0       	ldi	r30, 0x09	; 9
    7f16:	0c 94 3b 5a 	jmp	0xb476	; 0xb476 <__epilogue_restores__+0x12>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7f1a:	11 23       	and	r17, r17
    7f1c:	01 f7       	brne	.-64     	; 0x7ede <EepromWriteBlock+0x84>
    7f1e:	82 e0       	ldi	r24, 0x02	; 2
    7f20:	f7 cf       	rjmp	.-18     	; 0x7f10 <EepromWriteBlock+0xb6>

00007f22 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7f22:	cf 93       	push	r28
    7f24:	df 93       	push	r29
    7f26:	c0 e0       	ldi	r28, 0x00	; 0
    7f28:	d0 e0       	ldi	r29, 0x00	; 0

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7f2a:	fe 01       	movw	r30, r28
    7f2c:	e0 59       	subi	r30, 0x90	; 144
    7f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    7f30:	e4 91       	lpm	r30, Z+
    7f32:	ce 01       	movw	r24, r28
    7f34:	6e 2f       	mov	r22, r30
    7f36:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <WriteEeprom>
    7f3a:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7f3c:	c0 32       	cpi	r28, 0x20	; 32
    7f3e:	d1 05       	cpc	r29, r1
    7f40:	a1 f7       	brne	.-24     	; 0x7f2a <FormatEeprom+0x8>
    7f42:	c0 e2       	ldi	r28, 0x20	; 32
    7f44:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7f46:	ce 01       	movw	r24, r28
    7f48:	6f ef       	ldi	r22, 0xFF	; 255
    7f4a:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7f4e:	ce 01       	movw	r24, r28
    7f50:	01 96       	adiw	r24, 0x01	; 1
    7f52:	6f ef       	ldi	r22, 0xFF	; 255
    7f54:	0e 94 5c 3e 	call	0x7cb8	; 0x7cb8 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7f58:	a0 96       	adiw	r28, 0x20	; 32
    7f5a:	88 e0       	ldi	r24, 0x08	; 8
    7f5c:	c0 30       	cpi	r28, 0x00	; 0
    7f5e:	d8 07       	cpc	r29, r24
    7f60:	91 f7       	brne	.-28     	; 0x7f46 <FormatEeprom+0x24>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7f62:	df 91       	pop	r29
    7f64:	cf 91       	pop	r28
    7f66:	08 95       	ret

00007f68 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7f68:	fc 01       	movw	r30, r24
    7f6a:	45 87       	std	Z+13, r20	; 0x0d
}
    7f6c:	08 95       	ret

00007f6e <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7f6e:	81 e0       	ldi	r24, 0x01	; 1
    7f70:	91 e0       	ldi	r25, 0x01	; 1
    7f72:	90 93 77 09 	sts	0x0977, r25
    7f76:	80 93 76 09 	sts	0x0976, r24
		mixer.channels.type.noise.params=param;
    7f7a:	40 93 75 09 	sts	0x0975, r20
	#endif
}
    7f7e:	08 95       	ret

00007f80 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    7f80:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7f82:	80 81       	ld	r24, Z
    7f84:	8f 75       	andi	r24, 0x5F	; 95
    7f86:	80 83       	st	Z, r24
}
    7f88:	08 95       	ret

00007f8a <PatchCommand06>:

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    7f8a:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7f8c:	80 81       	ld	r24, Z
    7f8e:	80 64       	ori	r24, 0x40	; 64
    7f90:	80 83       	st	Z, r24
}
    7f92:	08 95       	ret

00007f94 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    7f94:	fc 01       	movw	r30, r24
    7f96:	44 87       	std	Z+12, r20	; 0x0c
}
    7f98:	08 95       	ret

00007f9a <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    7f9a:	fc 01       	movw	r30, r24
    7f9c:	47 83       	std	Z+7, r20	; 0x07
}
    7f9e:	08 95       	ret

00007fa0 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    7fa0:	fc 01       	movw	r30, r24
    7fa2:	40 87       	std	Z+8, r20	; 0x08
}
    7fa4:	08 95       	ret

00007fa6 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    7fa6:	1f 93       	push	r17
    7fa8:	cf 93       	push	r28
    7faa:	df 93       	push	r29
    7fac:	ec 01       	movw	r28, r24
    7fae:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7fb0:	89 81       	ldd	r24, Y+1	; 0x01
    7fb2:	90 e0       	ldi	r25, 0x00	; 0
    7fb4:	fc 01       	movw	r30, r24
    7fb6:	ee 0f       	add	r30, r30
    7fb8:	ff 1f       	adc	r31, r31
    7fba:	e8 5f       	subi	r30, 0xF8	; 248
    7fbc:	f6 47       	sbci	r31, 0x76	; 118
    7fbe:	25 91       	lpm	r18, Z+
    7fc0:	34 91       	lpm	r19, Z+
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7fc2:	e4 2f       	mov	r30, r20
    7fc4:	ff 27       	eor	r31, r31
    7fc6:	e7 fd       	sbrc	r30, 7
    7fc8:	f0 95       	com	r31
    7fca:	e8 0f       	add	r30, r24
    7fcc:	f9 1f       	adc	r31, r25
    7fce:	ee 0f       	add	r30, r30
    7fd0:	ff 1f       	adc	r31, r31
    7fd2:	e8 5f       	subi	r30, 0xF8	; 248
    7fd4:	f6 47       	sbci	r31, 0x76	; 118
    7fd6:	85 91       	lpm	r24, Z+
    7fd8:	94 91       	lpm	r25, Z+
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    7fda:	60 91 8e 09 	lds	r22, 0x098E
    7fde:	82 1b       	sub	r24, r18
    7fe0:	93 0b       	sbc	r25, r19
    7fe2:	70 e0       	ldi	r23, 0x00	; 0
    7fe4:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    7fe8:	9b 01       	movw	r18, r22
	if(delta==0)delta++;
    7fea:	61 15       	cp	r22, r1
    7fec:	71 05       	cpc	r23, r1
    7fee:	11 f4       	brne	.+4      	; 0x7ff4 <PatchCommand11+0x4e>
    7ff0:	21 e0       	ldi	r18, 0x01	; 1
    7ff2:	30 e0       	ldi	r19, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    7ff4:	81 2f       	mov	r24, r17
    7ff6:	90 e0       	ldi	r25, 0x00	; 0
    7ff8:	fc 01       	movw	r30, r24
    7ffa:	ee 0f       	add	r30, r30
    7ffc:	ff 1f       	adc	r31, r31
    7ffe:	e8 0f       	add	r30, r24
    8000:	f9 1f       	adc	r31, r25
    8002:	ee 0f       	add	r30, r30
    8004:	ff 1f       	adc	r31, r31
    8006:	ee 59       	subi	r30, 0x9E	; 158
    8008:	f6 4f       	sbci	r31, 0xF6	; 246
    800a:	81 81       	ldd	r24, Z+1	; 0x01
    800c:	92 81       	ldd	r25, Z+2	; 0x02
    800e:	82 0f       	add	r24, r18
    8010:	93 1f       	adc	r25, r19
    8012:	92 83       	std	Z+2, r25	; 0x02
    8014:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8016:	3b 83       	std	Y+3, r19	; 0x03
    8018:	2a 83       	std	Y+2, r18	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    801a:	88 81       	ld	r24, Y
    801c:	88 60       	ori	r24, 0x08	; 8
    801e:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8020:	89 81       	ldd	r24, Y+1	; 0x01
    8022:	84 0f       	add	r24, r20
    8024:	8c 83       	std	Y+4, r24	; 0x04
}
    8026:	df 91       	pop	r29
    8028:	cf 91       	pop	r28
    802a:	1f 91       	pop	r17
    802c:	08 95       	ret

0000802e <PatchCommand12>:

/*
* Command 12: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    802e:	40 93 8e 09 	sts	0x098E, r20
}
    8032:	08 95       	ret

00008034 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    8034:	90 93 fa 09 	sts	0x09FA, r25
    8038:	80 93 f9 09 	sts	0x09F9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    803c:	8f e6       	ldi	r24, 0x6F	; 111
    803e:	80 93 fc 09 	sts	0x09FC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8042:	10 92 60 09 	sts	0x0960, r1
    8046:	e9 e8       	ldi	r30, 0x89	; 137
    8048:	f9 e0       	ldi	r31, 0x09	; 9

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    804a:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    804c:	8f ef       	ldi	r24, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    804e:	28 e1       	ldi	r18, 0x18	; 24

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8050:	90 83       	st	Z, r25
		tracks[t].noteVol=0;
    8052:	13 86       	std	Z+11, r1	; 0x0b
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    8054:	81 87       	std	Z+9, r24	; 0x09
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8056:	82 87       	std	Z+10, r24	; 0x0a
		tracks[t].patchNo=DEFAULT_PATCH;
    8058:	16 86       	std	Z+14, r1	; 0x0e
		tracks[t].tremoloRate=24; //~6hz
    805a:	20 87       	std	Z+8, r18	; 0x08
		tracks[t].slideSpeed=0x10;
    805c:	95 83       	std	Z+5, r25	; 0x05
    805e:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8060:	39 e0       	ldi	r19, 0x09	; 9
    8062:	e7 3f       	cpi	r30, 0xF7	; 247
    8064:	f3 07       	cpc	r31, r19
    8066:	a1 f7       	brne	.-24     	; 0x8050 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8068:	08 95       	ret

0000806a <StartSong>:

void StartSong(const char *midiSong){
    806a:	9c 01       	movw	r18, r24
    806c:	e9 e8       	ldi	r30, 0x89	; 137
    806e:	f9 e0       	ldi	r31, 0x09	; 9
	for(unsigned char t=0;t<CHANNELS;t++){
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    8070:	80 81       	ld	r24, Z
    8072:	8f 77       	andi	r24, 0x7F	; 127
    8074:	80 83       	st	Z, r24
    8076:	76 96       	adiw	r30, 0x16	; 22
	}

}

void StartSong(const char *midiSong){
	for(unsigned char t=0;t<CHANNELS;t++){
    8078:	89 e0       	ldi	r24, 0x09	; 9
    807a:	e7 3f       	cpi	r30, 0xF7	; 247
    807c:	f8 07       	cpc	r31, r24
    807e:	c1 f7       	brne	.-16     	; 0x8070 <StartSong+0x6>
		tracks[t].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
	}

	songPos=midiSong+1; //skip first delta-time
    8080:	c9 01       	movw	r24, r18
    8082:	01 96       	adiw	r24, 0x01	; 1
    8084:	90 93 01 0a 	sts	0x0A01, r25
    8088:	80 93 00 0a 	sts	0x0A00, r24
	songStart=midiSong+1;//skip first delta-time
    808c:	90 93 88 09 	sts	0x0988, r25
    8090:	80 93 87 09 	sts	0x0987, r24
	loopStart=midiSong+1;
    8094:	90 93 03 0a 	sts	0x0A03, r25
    8098:	80 93 02 0a 	sts	0x0A02, r24
	nextDeltaTime=0;
    809c:	10 92 fe 09 	sts	0x09FE, r1
    80a0:	10 92 fd 09 	sts	0x09FD, r1
	currDeltaTime=0;
    80a4:	10 92 f8 09 	sts	0x09F8, r1
    80a8:	10 92 f7 09 	sts	0x09F7, r1
	lastStatus=0;
    80ac:	10 92 fb 09 	sts	0x09FB, r1
	songSpeed=0;
    80b0:	10 92 ff 09 	sts	0x09FF, r1
	playSong=true;
    80b4:	81 e0       	ldi	r24, 0x01	; 1
    80b6:	80 93 60 09 	sts	0x0960, r24
}
    80ba:	08 95       	ret

000080bc <StopSong>:


void StopSong(){

	for(u8 i=0;i<CHANNELS;i++){
		tracks[i].envelopeStep=-6;
    80bc:	8a ef       	ldi	r24, 0xFA	; 250
    80be:	80 93 96 09 	sts	0x0996, r24
    80c2:	80 93 ac 09 	sts	0x09AC, r24
    80c6:	80 93 c2 09 	sts	0x09C2, r24
    80ca:	80 93 d8 09 	sts	0x09D8, r24
    80ce:	80 93 ee 09 	sts	0x09EE, r24
	}

	playSong=false;
    80d2:	10 92 60 09 	sts	0x0960, r1
}
    80d6:	08 95       	ret

000080d8 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    80d8:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    80da:	ed 91       	ld	r30, X+
    80dc:	fc 91       	ld	r31, X
    80de:	11 97       	sbiw	r26, 0x01	; 1
    80e0:	af 01       	movw	r20, r30
    80e2:	4f 5f       	subi	r20, 0xFF	; 255
    80e4:	5f 4f       	sbci	r21, 0xFF	; 255
    80e6:	11 96       	adiw	r26, 0x01	; 1
    80e8:	5c 93       	st	X, r21
    80ea:	4e 93       	st	-X, r20
    80ec:	e4 91       	lpm	r30, Z+
    80ee:	2e 2f       	mov	r18, r30
    80f0:	30 e0       	ldi	r19, 0x00	; 0
    80f2:	e7 ff       	sbrs	r30, 7
    80f4:	13 c0       	rjmp	.+38     	; 0x811c <ReadVarLen+0x44>
    {
       value &= 0x7F;
    80f6:	2f 77       	andi	r18, 0x7F	; 127
    80f8:	30 70       	andi	r19, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    80fa:	36 95       	lsr	r19
    80fc:	32 2f       	mov	r19, r18
    80fe:	22 27       	eor	r18, r18
    8100:	37 95       	ror	r19
    8102:	27 95       	ror	r18
    8104:	fa 01       	movw	r30, r20
    8106:	4f 5f       	subi	r20, 0xFF	; 255
    8108:	5f 4f       	sbci	r21, 0xFF	; 255
    810a:	e4 91       	lpm	r30, Z+
    810c:	8e 2f       	mov	r24, r30
    810e:	8f 77       	andi	r24, 0x7F	; 127
    8110:	28 0f       	add	r18, r24
    8112:	31 1d       	adc	r19, r1
       } while (c & 0x80);
    8114:	e7 fd       	sbrc	r30, 7
    8116:	f1 cf       	rjmp	.-30     	; 0x80fa <ReadVarLen+0x22>
    8118:	4d 93       	st	X+, r20
    811a:	5c 93       	st	X, r21
    }


    return value;
}
    811c:	c9 01       	movw	r24, r18
    811e:	08 95       	ret

00008120 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8120:	80 93 fc 09 	sts	0x09FC, r24
}
    8124:	08 95       	ret

00008126 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    8126:	ff 92       	push	r15
    8128:	0f 93       	push	r16
    812a:	1f 93       	push	r17
    812c:	8c 01       	movw	r16, r24
    812e:	86 2f       	mov	r24, r22
    8130:	f4 2e       	mov	r15, r20
	SetMixerNote(trackNo,param);
    8132:	64 2f       	mov	r22, r20
    8134:	0e 94 01 44 	call	0x8802	; 0x8802 <SetMixerNote>
	track->note=param;
    8138:	f8 01       	movw	r30, r16
    813a:	f1 82       	std	Z+1, r15	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    813c:	80 81       	ld	r24, Z
    813e:	87 7f       	andi	r24, 0xF7	; 247
    8140:	80 83       	st	Z, r24
}
    8142:	1f 91       	pop	r17
    8144:	0f 91       	pop	r16
    8146:	ff 90       	pop	r15
    8148:	08 95       	ret

0000814a <PatchCommand04>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    814a:	fc 01       	movw	r30, r24
    814c:	86 2f       	mov	r24, r22
	track->note-=param;
    814e:	61 81       	ldd	r22, Z+1	; 0x01
    8150:	64 1b       	sub	r22, r20
    8152:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    8154:	0e 94 01 44 	call	0x8802	; 0x8802 <SetMixerNote>
}
    8158:	08 95       	ret

0000815a <PatchCommand03>:
	SetMixerWave(trackNo,param);
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    815a:	fc 01       	movw	r30, r24
    815c:	86 2f       	mov	r24, r22
	track->note+=param;
    815e:	91 81       	ldd	r25, Z+1	; 0x01
    8160:	49 0f       	add	r20, r25
    8162:	41 83       	std	Z+1, r20	; 0x01
	SetMixerNote(trackNo,track->note);
    8164:	64 2f       	mov	r22, r20
    8166:	0e 94 01 44 	call	0x8802	; 0x8802 <SetMixerNote>
}
    816a:	08 95       	ret

0000816c <TriggerCommon>:
}




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    816c:	ef 92       	push	r14
    816e:	ff 92       	push	r15
    8170:	0f 93       	push	r16
    8172:	1f 93       	push	r17
    8174:	cf 93       	push	r28
    8176:	df 93       	push	r29
    8178:	18 2f       	mov	r17, r24
    817a:	f6 2e       	mov	r15, r22
    817c:	02 2f       	mov	r16, r18
	struct TrackStruct* track=&tracks[channel];
    817e:	86 e1       	ldi	r24, 0x16	; 22
    8180:	18 9f       	mul	r17, r24
    8182:	e0 01       	movw	r28, r0
    8184:	11 24       	eor	r1, r1
    8186:	c7 57       	subi	r28, 0x77	; 119
    8188:	d6 4f       	sbci	r29, 0xF6	; 246
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    818a:	ee 24       	eor	r14, r14
    818c:	88 81       	ld	r24, Y
    818e:	87 ff       	sbrs	r24, 7
    8190:	02 c0       	rjmp	.+4      	; 0x8196 <TriggerCommon+0x2a>
    8192:	ee 24       	eor	r14, r14
    8194:	e3 94       	inc	r14

	track->patchCurrDeltaTime=0;
    8196:	1a 8a       	std	Y+18, r1	; 0x12
	track->envelopeStep=0; 
    8198:	1d 86       	std	Y+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    819a:	9f ef       	ldi	r25, 0xFF	; 255
    819c:	9c 87       	std	Y+12, r25	; 0x0c
	track->noteVol=volume;
    819e:	4b 87       	std	Y+11, r20	; 0x0b
	track->patchPlayingTime=0;
    81a0:	1b 8a       	std	Y+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    81a2:	88 81       	ld	r24, Y
    81a4:	80 62       	ori	r24, 0x20	; 32
    81a6:	87 7b       	andi	r24, 0xB7	; 183
    81a8:	88 83       	st	Y, r24
	track->tremoloLevel=0;
    81aa:	1f 82       	std	Y+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    81ac:	99 87       	std	Y+9, r25	; 0x09
	track->note=note;
    81ae:	09 83       	std	Y+1, r16	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    81b0:	13 30       	cpi	r17, 0x03	; 3
    81b2:	69 f4       	brne	.+26     	; 0x81ce <TriggerCommon+0x62>
			//noise channel		
			if(!isFx) patch=note;			
    81b4:	ee 20       	and	r14, r14
    81b6:	09 f4       	brne	.+2      	; 0x81ba <TriggerCommon+0x4e>
    81b8:	f0 2e       	mov	r15, r16
			mixer.channels.type.noise.barrel=0x0101;				
    81ba:	81 e0       	ldi	r24, 0x01	; 1
    81bc:	91 e0       	ldi	r25, 0x01	; 1
    81be:	90 93 77 09 	sts	0x0977, r25
    81c2:	80 93 76 09 	sts	0x0976, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    81c6:	81 e0       	ldi	r24, 0x01	; 1
    81c8:	80 93 75 09 	sts	0x0975, r24
    81cc:	34 c0       	rjmp	.+104    	; 0x8236 <TriggerCommon+0xca>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    81ce:	14 30       	cpi	r17, 0x04	; 4
    81d0:	51 f5       	brne	.+84     	; 0x8226 <TriggerCommon+0xba>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    81d2:	10 92 7d 09 	sts	0x097D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    81d6:	89 e0       	ldi	r24, 0x09	; 9
    81d8:	f8 9e       	mul	r15, r24
    81da:	c0 01       	movw	r24, r0
    81dc:	11 24       	eor	r1, r1
    81de:	20 91 f9 09 	lds	r18, 0x09F9
    81e2:	30 91 fa 09 	lds	r19, 0x09FA
    81e6:	28 0f       	add	r18, r24
    81e8:	39 1f       	adc	r19, r25
    81ea:	f9 01       	movw	r30, r18
    81ec:	31 96       	adiw	r30, 0x01	; 1
    81ee:	45 91       	lpm	r20, Z+
    81f0:	54 91       	lpm	r21, Z+
				mixer.channels.type.pcm.position=pos;
    81f2:	50 93 7f 09 	sts	0x097F, r21
    81f6:	40 93 7e 09 	sts	0x097E, r20
				mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
    81fa:	f9 01       	movw	r30, r18
    81fc:	35 96       	adiw	r30, 0x05	; 5
    81fe:	85 91       	lpm	r24, Z+
    8200:	94 91       	lpm	r25, Z+
    8202:	84 0f       	add	r24, r20
    8204:	95 1f       	adc	r25, r21
    8206:	90 93 81 09 	sts	0x0981, r25
    820a:	80 93 80 09 	sts	0x0980, r24
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    820e:	f9 01       	movw	r30, r18
    8210:	37 96       	adiw	r30, 0x07	; 7
    8212:	85 91       	lpm	r24, Z+
    8214:	94 91       	lpm	r25, Z+
    8216:	48 0f       	add	r20, r24
    8218:	59 1f       	adc	r21, r25
    821a:	50 93 83 09 	sts	0x0983, r21
    821e:	40 93 82 09 	sts	0x0982, r20
				SetMixerNote(channel,note);
    8222:	84 e0       	ldi	r24, 0x04	; 4
    8224:	05 c0       	rjmp	.+10     	; 0x8230 <TriggerCommon+0xc4>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    8226:	81 2f       	mov	r24, r17
    8228:	60 e0       	ldi	r22, 0x00	; 0
    822a:	0e 94 18 44 	call	0x8830	; 0x8830 <SetMixerWave>
			SetMixerNote(channel,note);
    822e:	81 2f       	mov	r24, r17
    8230:	60 2f       	mov	r22, r16
    8232:	0e 94 01 44 	call	0x8802	; 0x8802 <SetMixerNote>

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8236:	ee 20       	and	r14, r14
    8238:	11 f0       	breq	.+4      	; 0x823e <TriggerCommon+0xd2>
		track->fxPatchNo=patch;
    823a:	ff 86       	std	Y+15, r15	; 0x0f
    823c:	01 c0       	rjmp	.+2      	; 0x8240 <TriggerCommon+0xd4>
	}else{
		track->patchNo=patch;	
    823e:	fe 86       	std	Y+14, r15	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8240:	89 e0       	ldi	r24, 0x09	; 9
    8242:	f8 9e       	mul	r15, r24
    8244:	c0 01       	movw	r24, r0
    8246:	11 24       	eor	r1, r1
    8248:	e0 91 f9 09 	lds	r30, 0x09F9
    824c:	f0 91 fa 09 	lds	r31, 0x09FA
    8250:	e8 0f       	add	r30, r24
    8252:	f9 1f       	adc	r31, r25
    8254:	33 96       	adiw	r30, 0x03	; 3
    8256:	25 91       	lpm	r18, Z+
    8258:	34 91       	lpm	r19, Z+
	if(pos==NULL){
    825a:	21 15       	cp	r18, r1
    825c:	31 05       	cpc	r19, r1
    825e:	19 f4       	brne	.+6      	; 0x8266 <TriggerCommon+0xfa>
		track->patchCommandStreamPos=NULL;
    8260:	1d 8a       	std	Y+21, r1	; 0x15
    8262:	1c 8a       	std	Y+20, r1	; 0x14
    8264:	07 c0       	rjmp	.+14     	; 0x8274 <TriggerCommon+0x108>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8266:	f9 01       	movw	r30, r18
    8268:	84 91       	lpm	r24, Z+
    826a:	89 8b       	std	Y+17, r24	; 0x11
		track->patchCommandStreamPos=pos;
    826c:	2f 5f       	subi	r18, 0xFF	; 255
    826e:	3f 4f       	sbci	r19, 0xFF	; 255
    8270:	3d 8b       	std	Y+21, r19	; 0x15
    8272:	2c 8b       	std	Y+20, r18	; 0x14
	}

}
    8274:	cd b7       	in	r28, 0x3d	; 61
    8276:	de b7       	in	r29, 0x3e	; 62
    8278:	e6 e0       	ldi	r30, 0x06	; 6
    827a:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__epilogue_restores__+0x18>

0000827e <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    827e:	1f 93       	push	r17
    8280:	78 2f       	mov	r23, r24
    8282:	14 2f       	mov	r17, r20

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    8284:	a8 2f       	mov	r26, r24
    8286:	b0 e0       	ldi	r27, 0x00	; 0
    8288:	86 e1       	ldi	r24, 0x16	; 22
    828a:	90 e0       	ldi	r25, 0x00	; 0
    828c:	a8 9f       	mul	r26, r24
    828e:	f0 01       	movw	r30, r0
    8290:	a9 9f       	mul	r26, r25
    8292:	f0 0d       	add	r31, r0
    8294:	b8 9f       	mul	r27, r24
    8296:	f0 0d       	add	r31, r0
    8298:	11 24       	eor	r1, r1
    829a:	e7 57       	subi	r30, 0x77	; 119
    829c:	f6 4f       	sbci	r31, 0xF6	; 246
    829e:	30 81       	ld	r19, Z
    82a0:	53 2f       	mov	r21, r19
    82a2:	35 ff       	sbrs	r19, 5
    82a4:	02 c0       	rjmp	.+4      	; 0x82aa <TriggerNote+0x2c>
    82a6:	37 fd       	sbrc	r19, 7
    82a8:	33 c0       	rjmp	.+102    	; 0x8310 <TriggerNote+0x92>
			
		if(volume==0){ //note-off received
    82aa:	22 23       	and	r18, r18
    82ac:	f9 f4       	brne	.+62     	; 0x82ec <TriggerNote+0x6e>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    82ae:	86 e1       	ldi	r24, 0x16	; 22
    82b0:	90 e0       	ldi	r25, 0x00	; 0
    82b2:	a8 9f       	mul	r26, r24
    82b4:	f0 01       	movw	r30, r0
    82b6:	a9 9f       	mul	r26, r25
    82b8:	f0 0d       	add	r31, r0
    82ba:	b8 9f       	mul	r27, r24
    82bc:	f0 0d       	add	r31, r0
    82be:	11 24       	eor	r1, r1
    82c0:	e7 57       	subi	r30, 0x77	; 119
    82c2:	f6 4f       	sbci	r31, 0xF6	; 246
    82c4:	85 85       	ldd	r24, Z+13	; 0x0d
    82c6:	88 23       	and	r24, r24
    82c8:	11 f4       	brne	.+4      	; 0x82ce <TriggerNote+0x50>
    82ca:	56 ff       	sbrs	r21, 6
				tracks[channel].noteVol=0;	
    82cc:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    82ce:	86 e1       	ldi	r24, 0x16	; 22
    82d0:	90 e0       	ldi	r25, 0x00	; 0
    82d2:	a8 9f       	mul	r26, r24
    82d4:	f0 01       	movw	r30, r0
    82d6:	a9 9f       	mul	r26, r25
    82d8:	f0 0d       	add	r31, r0
    82da:	b8 9f       	mul	r27, r24
    82dc:	f0 0d       	add	r31, r0
    82de:	11 24       	eor	r1, r1
    82e0:	e7 57       	subi	r30, 0x77	; 119
    82e2:	f6 4f       	sbci	r31, 0xF6	; 246
    82e4:	80 81       	ld	r24, Z
    82e6:	8f 7b       	andi	r24, 0xBF	; 191
    82e8:	80 83       	st	Z, r24
    82ea:	12 c0       	rjmp	.+36     	; 0x8310 <TriggerNote+0x92>
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    82ec:	86 e1       	ldi	r24, 0x16	; 22
    82ee:	90 e0       	ldi	r25, 0x00	; 0
    82f0:	a8 9f       	mul	r26, r24
    82f2:	f0 01       	movw	r30, r0
    82f4:	a9 9f       	mul	r26, r25
    82f6:	f0 0d       	add	r31, r0
    82f8:	b8 9f       	mul	r27, r24
    82fa:	f0 0d       	add	r31, r0
    82fc:	11 24       	eor	r1, r1
    82fe:	e7 57       	subi	r30, 0x77	; 119
    8300:	f6 4f       	sbci	r31, 0xF6	; 246
    8302:	3f 77       	andi	r19, 0x7F	; 127
    8304:	30 83       	st	Z, r19
			TriggerCommon(channel,patch,volume,note);
    8306:	87 2f       	mov	r24, r23
    8308:	42 2f       	mov	r20, r18
    830a:	21 2f       	mov	r18, r17
    830c:	0e 94 b6 40 	call	0x816c	; 0x816c <TriggerCommon>
		}

	}
}
    8310:	1f 91       	pop	r17
    8312:	08 95       	ret

00008314 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8314:	af 92       	push	r10
    8316:	bf 92       	push	r11
    8318:	df 92       	push	r13
    831a:	ef 92       	push	r14
    831c:	ff 92       	push	r15
    831e:	0f 93       	push	r16
    8320:	1f 93       	push	r17
    8322:	cf 93       	push	r28
    8324:	df 93       	push	r29
    8326:	a9 e8       	ldi	r26, 0x89	; 137
    8328:	b9 e0       	ldi	r27, 0x09	; 9
    832a:	c3 e6       	ldi	r28, 0x63	; 99
    832c:	d9 e0       	ldi	r29, 0x09	; 9
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    832e:	1d 96       	adiw	r26, 0x0d	; 13
    8330:	8c 91       	ld	r24, X
    8332:	1d 97       	sbiw	r26, 0x0d	; 13
    8334:	88 23       	and	r24, r24
    8336:	b9 f0       	breq	.+46     	; 0x8366 <ProcessMusic+0x52>
			vol=track->envelopeVol+track->envelopeStep;		
    8338:	28 2f       	mov	r18, r24
    833a:	33 27       	eor	r19, r19
    833c:	27 fd       	sbrc	r18, 7
    833e:	30 95       	com	r19
    8340:	1c 96       	adiw	r26, 0x0c	; 12
    8342:	8c 91       	ld	r24, X
    8344:	1c 97       	sbiw	r26, 0x0c	; 12
    8346:	28 0f       	add	r18, r24
    8348:	31 1d       	adc	r19, r1
    834a:	2f 3f       	cpi	r18, 0xFF	; 255
    834c:	31 05       	cpc	r19, r1
    834e:	19 f0       	breq	.+6      	; 0x8356 <ProcessMusic+0x42>
    8350:	14 f0       	brlt	.+4      	; 0x8356 <ProcessMusic+0x42>
    8352:	2f ef       	ldi	r18, 0xFF	; 255
    8354:	30 e0       	ldi	r19, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8356:	c9 01       	movw	r24, r18
    8358:	37 ff       	sbrs	r19, 7
    835a:	02 c0       	rjmp	.+4      	; 0x8360 <ProcessMusic+0x4c>
    835c:	80 e0       	ldi	r24, 0x00	; 0
    835e:	90 e0       	ldi	r25, 0x00	; 0
    8360:	1c 96       	adiw	r26, 0x0c	; 12
    8362:	8c 93       	st	X, r24
    8364:	1c 97       	sbiw	r26, 0x0c	; 12
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    8366:	8c 91       	ld	r24, X
    8368:	83 ff       	sbrs	r24, 3
    836a:	26 c0       	rjmp	.+76     	; 0x83b8 <ProcessMusic+0xa4>

			mixer.channels.all[trackNo].step+=track->slideStep;
    836c:	12 96       	adiw	r26, 0x02	; 2
    836e:	4d 91       	ld	r20, X+
    8370:	5c 91       	ld	r21, X
    8372:	13 97       	sbiw	r26, 0x03	; 3
    8374:	28 81       	ld	r18, Y
    8376:	39 81       	ldd	r19, Y+1	; 0x01
    8378:	24 0f       	add	r18, r20
    837a:	35 1f       	adc	r19, r21
    837c:	39 83       	std	Y+1, r19	; 0x01
    837e:	28 83       	st	Y, r18
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8380:	14 96       	adiw	r26, 0x04	; 4
    8382:	8c 91       	ld	r24, X
    8384:	14 97       	sbiw	r26, 0x04	; 4
    8386:	e8 2f       	mov	r30, r24
    8388:	f0 e0       	ldi	r31, 0x00	; 0
    838a:	ee 0f       	add	r30, r30
    838c:	ff 1f       	adc	r31, r31
    838e:	e8 5f       	subi	r30, 0xF8	; 248
    8390:	f6 47       	sbci	r31, 0x76	; 118
    8392:	85 91       	lpm	r24, Z+
    8394:	94 91       	lpm	r25, Z+

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8396:	14 16       	cp	r1, r20
    8398:	15 06       	cpc	r1, r21
    839a:	24 f4       	brge	.+8      	; 0x83a4 <ProcessMusic+0x90>
    839c:	28 17       	cp	r18, r24
    839e:	39 07       	cpc	r19, r25
    83a0:	30 f4       	brcc	.+12     	; 0x83ae <ProcessMusic+0x9a>
    83a2:	0a c0       	rjmp	.+20     	; 0x83b8 <ProcessMusic+0xa4>
    83a4:	45 2b       	or	r20, r21
    83a6:	41 f0       	breq	.+16     	; 0x83b8 <ProcessMusic+0xa4>
    83a8:	82 17       	cp	r24, r18
    83aa:	93 07       	cpc	r25, r19
    83ac:	28 f0       	brcs	.+10     	; 0x83b8 <ProcessMusic+0xa4>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
			{					
				mixer.channels.all[trackNo].step = tStep;					
    83ae:	99 83       	std	Y+1, r25	; 0x01
    83b0:	88 83       	st	Y, r24
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    83b2:	8c 91       	ld	r24, X
    83b4:	87 7f       	andi	r24, 0xF7	; 247
    83b6:	8c 93       	st	X, r24
    83b8:	56 96       	adiw	r26, 0x16	; 22
    83ba:	26 96       	adiw	r28, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    83bc:	29 e0       	ldi	r18, 0x09	; 9
    83be:	a7 3f       	cpi	r26, 0xF7	; 247
    83c0:	b2 07       	cpc	r27, r18
    83c2:	09 f0       	breq	.+2      	; 0x83c6 <ProcessMusic+0xb2>
    83c4:	b4 cf       	rjmp	.-152    	; 0x832e <ProcessMusic+0x1a>
	}



	//Process song MIDI notes
	if(playSong){
    83c6:	80 91 60 09 	lds	r24, 0x0960
    83ca:	88 23       	and	r24, r24
    83cc:	09 f0       	breq	.+2      	; 0x83d0 <ProcessMusic+0xbc>
    83ce:	de c0       	rjmp	.+444    	; 0x858c <ProcessMusic+0x278>
    83d0:	f6 c0       	rjmp	.+492    	; 0x85be <ProcessMusic+0x2aa>
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){

			c1=pgm_read_byte(songPos++);
    83d2:	e0 91 00 0a 	lds	r30, 0x0A00
    83d6:	f0 91 01 0a 	lds	r31, 0x0A01
    83da:	cf 01       	movw	r24, r30
    83dc:	01 96       	adiw	r24, 0x01	; 1
    83de:	90 93 01 0a 	sts	0x0A01, r25
    83e2:	80 93 00 0a 	sts	0x0A00, r24
    83e6:	44 91       	lpm	r20, Z+
			
			if(c1==0xff){
    83e8:	4f 3f       	cpi	r20, 0xFF	; 255
    83ea:	69 f5       	brne	.+90     	; 0x8446 <ProcessMusic+0x132>
				//META data type event
				c1=pgm_read_byte(songPos++);
    83ec:	ac 01       	movw	r20, r24
    83ee:	4f 5f       	subi	r20, 0xFF	; 255
    83f0:	5f 4f       	sbci	r21, 0xFF	; 255
    83f2:	50 93 01 0a 	sts	0x0A01, r21
    83f6:	40 93 00 0a 	sts	0x0A00, r20
    83fa:	fc 01       	movw	r30, r24
    83fc:	84 91       	lpm	r24, Z+

				
				if(c1==0x2f){ //end of song
    83fe:	8f 32       	cpi	r24, 0x2F	; 47
    8400:	19 f4       	brne	.+6      	; 0x8408 <ProcessMusic+0xf4>
					playSong=false;
    8402:	10 92 60 09 	sts	0x0960, r1
    8406:	d0 c0       	rjmp	.+416    	; 0x85a8 <ProcessMusic+0x294>
					break;	
				}else if(c1==0x6){ //marker
    8408:	86 30       	cpi	r24, 0x06	; 6
    840a:	09 f0       	breq	.+2      	; 0x840e <ProcessMusic+0xfa>
    840c:	b2 c0       	rjmp	.+356    	; 0x8572 <ProcessMusic+0x25e>
					c1=pgm_read_byte(songPos++); //read len
    840e:	fa 01       	movw	r30, r20
    8410:	31 96       	adiw	r30, 0x01	; 1
					c2=pgm_read_byte(songPos++); //read data
    8412:	cf 01       	movw	r24, r30
    8414:	01 96       	adiw	r24, 0x01	; 1
    8416:	90 93 01 0a 	sts	0x0A01, r25
    841a:	80 93 00 0a 	sts	0x0A00, r24
    841e:	e4 91       	lpm	r30, Z+
					if(c2=='S'){ //loop start
    8420:	e3 35       	cpi	r30, 0x53	; 83
    8422:	29 f4       	brne	.+10     	; 0x842e <ProcessMusic+0x11a>
						loopStart=songPos;
    8424:	90 93 03 0a 	sts	0x0A03, r25
    8428:	80 93 02 0a 	sts	0x0A02, r24
    842c:	a2 c0       	rjmp	.+324    	; 0x8572 <ProcessMusic+0x25e>
					}else if(c2=='E'){//loop end
    842e:	e5 34       	cpi	r30, 0x45	; 69
    8430:	09 f0       	breq	.+2      	; 0x8434 <ProcessMusic+0x120>
    8432:	9f c0       	rjmp	.+318    	; 0x8572 <ProcessMusic+0x25e>
						songPos=loopStart;
    8434:	80 91 02 0a 	lds	r24, 0x0A02
    8438:	90 91 03 0a 	lds	r25, 0x0A03
    843c:	90 93 01 0a 	sts	0x0A01, r25
    8440:	80 93 00 0a 	sts	0x0A00, r24
    8444:	96 c0       	rjmp	.+300    	; 0x8572 <ProcessMusic+0x25e>
				}
				

			}else{

				if(c1&0x80) lastStatus=c1;					
    8446:	47 ff       	sbrs	r20, 7
    8448:	02 c0       	rjmp	.+4      	; 0x844e <ProcessMusic+0x13a>
    844a:	40 93 fb 09 	sts	0x09FB, r20
				channel=lastStatus&0x0f;
    844e:	20 91 fb 09 	lds	r18, 0x09FB
    8452:	32 2f       	mov	r19, r18
    8454:	3f 70       	andi	r19, 0x0F	; 15
				
				//get next data byte
				//Note: maybe we should not advance the cursor
				//in case we receive an unsupported command				
				if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8456:	47 ff       	sbrs	r20, 7
    8458:	08 c0       	rjmp	.+16     	; 0x846a <ProcessMusic+0x156>
    845a:	01 96       	adiw	r24, 0x01	; 1
    845c:	90 93 01 0a 	sts	0x0A01, r25
    8460:	80 93 00 0a 	sts	0x0A00, r24
    8464:	01 97       	sbiw	r24, 0x01	; 1
    8466:	fc 01       	movw	r30, r24
    8468:	44 91       	lpm	r20, Z+

				switch(lastStatus&0xf0){
    846a:	82 2f       	mov	r24, r18
    846c:	90 e0       	ldi	r25, 0x00	; 0
    846e:	80 7f       	andi	r24, 0xF0	; 240
    8470:	90 70       	andi	r25, 0x00	; 0
    8472:	80 3b       	cpi	r24, 0xB0	; 176
    8474:	91 05       	cpc	r25, r1
    8476:	31 f1       	breq	.+76     	; 0x84c4 <ProcessMusic+0x1b0>
    8478:	80 3c       	cpi	r24, 0xC0	; 192
    847a:	91 05       	cpc	r25, r1
    847c:	09 f4       	brne	.+2      	; 0x8480 <ProcessMusic+0x16c>
    847e:	6d c0       	rjmp	.+218    	; 0x855a <ProcessMusic+0x246>
    8480:	80 39       	cpi	r24, 0x90	; 144
    8482:	91 05       	cpc	r25, r1
    8484:	09 f0       	breq	.+2      	; 0x8488 <ProcessMusic+0x174>
    8486:	75 c0       	rjmp	.+234    	; 0x8572 <ProcessMusic+0x25e>

					//note-on
					case 0x90:
						//c1 = note						
						c2=pgm_read_byte(songPos++)<<1; //get volume
    8488:	e0 91 00 0a 	lds	r30, 0x0A00
    848c:	f0 91 01 0a 	lds	r31, 0x0A01
    8490:	31 96       	adiw	r30, 0x01	; 1
    8492:	f0 93 01 0a 	sts	0x0A01, r31
    8496:	e0 93 00 0a 	sts	0x0A00, r30
    849a:	31 97       	sbiw	r30, 0x01	; 1
    849c:	e4 91       	lpm	r30, Z+
						
						if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
							TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    849e:	83 2f       	mov	r24, r19
    84a0:	90 e0       	ldi	r25, 0x00	; 0
    84a2:	8c 9f       	mul	r24, r28
    84a4:	d0 01       	movw	r26, r0
    84a6:	8d 9f       	mul	r24, r29
    84a8:	b0 0d       	add	r27, r0
    84aa:	9c 9f       	mul	r25, r28
    84ac:	b0 0d       	add	r27, r0
    84ae:	11 24       	eor	r1, r1
    84b0:	a7 57       	subi	r26, 0x77	; 119
    84b2:	b6 4f       	sbci	r27, 0xF6	; 246
    84b4:	ee 0f       	add	r30, r30
    84b6:	83 2f       	mov	r24, r19
    84b8:	1e 96       	adiw	r26, 0x0e	; 14
    84ba:	6c 91       	ld	r22, X
    84bc:	2e 2f       	mov	r18, r30
    84be:	0e 94 3f 41 	call	0x827e	; 0x827e <TriggerNote>
    84c2:	57 c0       	rjmp	.+174    	; 0x8572 <ProcessMusic+0x25e>
						break;

					//controllers
					case 0xb0:
						///c1 = controller #
						c2=pgm_read_byte(songPos++); //get controller value
    84c4:	e0 91 00 0a 	lds	r30, 0x0A00
    84c8:	f0 91 01 0a 	lds	r31, 0x0A01
    84cc:	31 96       	adiw	r30, 0x01	; 1
    84ce:	f0 93 01 0a 	sts	0x0A01, r31
    84d2:	e0 93 00 0a 	sts	0x0A00, r30
    84d6:	31 97       	sbiw	r30, 0x01	; 1
    84d8:	24 91       	lpm	r18, Z+
						
						if(c1==CONTROLER_VOL){
    84da:	47 30       	cpi	r20, 0x07	; 7
    84dc:	71 f4       	brne	.+28     	; 0x84fa <ProcessMusic+0x1e6>
							tracks[channel].trackVol=c2<<1;
    84de:	83 2f       	mov	r24, r19
    84e0:	90 e0       	ldi	r25, 0x00	; 0
    84e2:	8c 9f       	mul	r24, r28
    84e4:	f0 01       	movw	r30, r0
    84e6:	8d 9f       	mul	r24, r29
    84e8:	f0 0d       	add	r31, r0
    84ea:	9c 9f       	mul	r25, r28
    84ec:	f0 0d       	add	r31, r0
    84ee:	11 24       	eor	r1, r1
    84f0:	e7 57       	subi	r30, 0x77	; 119
    84f2:	f6 4f       	sbci	r31, 0xF6	; 246
    84f4:	22 0f       	add	r18, r18
    84f6:	22 87       	std	Z+10, r18	; 0x0a
    84f8:	3c c0       	rjmp	.+120    	; 0x8572 <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_EXPRESSION){
    84fa:	4b 30       	cpi	r20, 0x0B	; 11
    84fc:	71 f4       	brne	.+28     	; 0x851a <ProcessMusic+0x206>
							tracks[channel].expressionVol=c2<<1;
    84fe:	83 2f       	mov	r24, r19
    8500:	90 e0       	ldi	r25, 0x00	; 0
    8502:	8c 9f       	mul	r24, r28
    8504:	f0 01       	movw	r30, r0
    8506:	8d 9f       	mul	r24, r29
    8508:	f0 0d       	add	r31, r0
    850a:	9c 9f       	mul	r25, r28
    850c:	f0 0d       	add	r31, r0
    850e:	11 24       	eor	r1, r1
    8510:	e7 57       	subi	r30, 0x77	; 119
    8512:	f6 4f       	sbci	r31, 0xF6	; 246
    8514:	22 0f       	add	r18, r18
    8516:	21 87       	std	Z+9, r18	; 0x09
    8518:	2c c0       	rjmp	.+88     	; 0x8572 <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_TREMOLO){
    851a:	4c 35       	cpi	r20, 0x5C	; 92
    851c:	71 f4       	brne	.+28     	; 0x853a <ProcessMusic+0x226>
							tracks[channel].tremoloLevel=c2<<1;
    851e:	83 2f       	mov	r24, r19
    8520:	90 e0       	ldi	r25, 0x00	; 0
    8522:	8c 9f       	mul	r24, r28
    8524:	f0 01       	movw	r30, r0
    8526:	8d 9f       	mul	r24, r29
    8528:	f0 0d       	add	r31, r0
    852a:	9c 9f       	mul	r25, r28
    852c:	f0 0d       	add	r31, r0
    852e:	11 24       	eor	r1, r1
    8530:	e7 57       	subi	r30, 0x77	; 119
    8532:	f6 4f       	sbci	r31, 0xF6	; 246
    8534:	22 0f       	add	r18, r18
    8536:	27 83       	std	Z+7, r18	; 0x07
    8538:	1c c0       	rjmp	.+56     	; 0x8572 <ProcessMusic+0x25e>
						}else if(c1==CONTROLER_TREMOLO_RATE){
    853a:	44 36       	cpi	r20, 0x64	; 100
    853c:	d1 f4       	brne	.+52     	; 0x8572 <ProcessMusic+0x25e>
							tracks[channel].tremoloRate=c2<<1;
    853e:	83 2f       	mov	r24, r19
    8540:	90 e0       	ldi	r25, 0x00	; 0
    8542:	8c 9f       	mul	r24, r28
    8544:	f0 01       	movw	r30, r0
    8546:	8d 9f       	mul	r24, r29
    8548:	f0 0d       	add	r31, r0
    854a:	9c 9f       	mul	r25, r28
    854c:	f0 0d       	add	r31, r0
    854e:	11 24       	eor	r1, r1
    8550:	e7 57       	subi	r30, 0x77	; 119
    8552:	f6 4f       	sbci	r31, 0xF6	; 246
    8554:	22 0f       	add	r18, r18
    8556:	20 87       	std	Z+8, r18	; 0x08
    8558:	0c c0       	rjmp	.+24     	; 0x8572 <ProcessMusic+0x25e>
						break;

					//program change
					case 0xc0:
						// c1 = patch #						
						tracks[channel].patchNo=c1;
    855a:	83 2f       	mov	r24, r19
    855c:	90 e0       	ldi	r25, 0x00	; 0
    855e:	8c 9f       	mul	r24, r28
    8560:	f0 01       	movw	r30, r0
    8562:	8d 9f       	mul	r24, r29
    8564:	f0 0d       	add	r31, r0
    8566:	9c 9f       	mul	r25, r28
    8568:	f0 0d       	add	r31, r0
    856a:	11 24       	eor	r1, r1
    856c:	e7 57       	subi	r30, 0x77	; 119
    856e:	f6 4f       	sbci	r31, 0xF6	; 246
    8570:	46 87       	std	Z+14, r20	; 0x0e


			}//end if(c1==0xff)

			//read next delta time
			nextDeltaTime=ReadVarLen(&songPos);			
    8572:	80 e0       	ldi	r24, 0x00	; 0
    8574:	9a e0       	ldi	r25, 0x0A	; 10
    8576:	0e 94 6c 40 	call	0x80d8	; 0x80d8 <ReadVarLen>
    857a:	90 93 fe 09 	sts	0x09FE, r25
    857e:	80 93 fd 09 	sts	0x09FD, r24
			currDeltaTime=0;
    8582:	10 92 f8 09 	sts	0x09F8, r1
    8586:	10 92 f7 09 	sts	0x09F7, r1
    858a:	02 c0       	rjmp	.+4      	; 0x8590 <ProcessMusic+0x27c>
						}else if(c1==CONTROLER_EXPRESSION){
							tracks[channel].expressionVol=c2<<1;
						}else if(c1==CONTROLER_TREMOLO){
							tracks[channel].tremoloLevel=c2<<1;
						}else if(c1==CONTROLER_TREMOLO_RATE){
							tracks[channel].tremoloRate=c2<<1;
    858c:	c6 e1       	ldi	r28, 0x16	; 22
    858e:	d0 e0       	ldi	r29, 0x00	; 0


	//Process song MIDI notes
	if(playSong){
		//process all simultaneous events
		while(currDeltaTime==nextDeltaTime){
    8590:	20 91 f7 09 	lds	r18, 0x09F7
    8594:	30 91 f8 09 	lds	r19, 0x09F8
    8598:	80 91 fd 09 	lds	r24, 0x09FD
    859c:	90 91 fe 09 	lds	r25, 0x09FE
    85a0:	28 17       	cp	r18, r24
    85a2:	39 07       	cpc	r19, r25
    85a4:	09 f4       	brne	.+2      	; 0x85a8 <ProcessMusic+0x294>
    85a6:	15 cf       	rjmp	.-470    	; 0x83d2 <ProcessMusic+0xbe>
				}
			#endif

		}//end while
		
		if(++currDeltaTime == 65535)
    85a8:	c9 01       	movw	r24, r18
    85aa:	01 96       	adiw	r24, 0x01	; 1
    85ac:	90 93 f8 09 	sts	0x09F8, r25
    85b0:	80 93 f7 09 	sts	0x09F7, r24
    85b4:	8f 5f       	subi	r24, 0xFF	; 255
    85b6:	9f 4f       	sbci	r25, 0xFF	; 255
    85b8:	11 f4       	brne	.+4      	; 0x85be <ProcessMusic+0x2aa>
			playSong = false;
    85ba:	10 92 60 09 	sts	0x0960, r1
    85be:	c9 e8       	ldi	r28, 0x89	; 137
    85c0:	d9 e0       	ldi	r29, 0x09	; 9
    85c2:	02 e6       	ldi	r16, 0x62	; 98
    85c4:	19 e0       	ldi	r17, 0x09	; 9
    85c6:	ff 24       	eor	r15, r15
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    85c8:	ef ef       	ldi	r30, 0xFF	; 255
    85ca:	ae 2e       	mov	r10, r30
    85cc:	b1 2c       	mov	r11, r1
			#endif

		}//end while
		
		if(++currDeltaTime == 65535)
			playSong = false;
    85ce:	dc 2e       	mov	r13, r28
    85d0:	ed 2e       	mov	r14, r29
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    85d2:	88 81       	ld	r24, Y
    85d4:	86 fd       	sbrc	r24, 6
    85d6:	3d c0       	rjmp	.+122    	; 0x8652 <ProcessMusic+0x33e>

			if(track->patchCommandStreamPos!=NULL && 
    85d8:	8c 89       	ldd	r24, Y+20	; 0x14
    85da:	9d 89       	ldd	r25, Y+21	; 0x15
    85dc:	89 2b       	or	r24, r25
    85de:	09 f4       	brne	.+2      	; 0x85e2 <ProcessMusic+0x2ce>
    85e0:	35 c0       	rjmp	.+106    	; 0x864c <ProcessMusic+0x338>
    85e2:	9a 89       	ldd	r25, Y+18	; 0x12
    85e4:	89 89       	ldd	r24, Y+17	; 0x11
    85e6:	98 17       	cp	r25, r24
    85e8:	68 f5       	brcc	.+90     	; 0x8644 <ProcessMusic+0x330>
    85ea:	30 c0       	rjmp	.+96     	; 0x864c <ProcessMusic+0x338>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    85ec:	ec 89       	ldd	r30, Y+20	; 0x14
    85ee:	fd 89       	ldd	r31, Y+21	; 0x15
    85f0:	cf 01       	movw	r24, r30
    85f2:	01 96       	adiw	r24, 0x01	; 1
    85f4:	9d 8b       	std	Y+21, r25	; 0x15
    85f6:	8c 8b       	std	Y+20, r24	; 0x14
    85f8:	24 91       	lpm	r18, Z+
					if(c1==0xff){					
    85fa:	2f 3f       	cpi	r18, 0xFF	; 255
    85fc:	31 f4       	brne	.+12     	; 0x860a <ProcessMusic+0x2f6>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    85fe:	88 81       	ld	r24, Y
    8600:	8f 77       	andi	r24, 0x7F	; 127
    8602:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    8604:	1d 8a       	std	Y+21, r1	; 0x15
    8606:	1c 8a       	std	Y+20, r1	; 0x14
    8608:	21 c0       	rjmp	.+66     	; 0x864c <ProcessMusic+0x338>
						break;

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    860a:	01 96       	adiw	r24, 0x01	; 1
    860c:	9d 8b       	std	Y+21, r25	; 0x15
    860e:	8c 8b       	std	Y+20, r24	; 0x14
    8610:	01 97       	sbiw	r24, 0x01	; 1
    8612:	fc 01       	movw	r30, r24
    8614:	44 91       	lpm	r20, Z+
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    8616:	82 2f       	mov	r24, r18
    8618:	90 e0       	ldi	r25, 0x00	; 0
    861a:	88 0f       	add	r24, r24
    861c:	99 1f       	adc	r25, r25
    861e:	82 54       	subi	r24, 0x42	; 66
    8620:	9f 4f       	sbci	r25, 0xFF	; 255
    8622:	fc 01       	movw	r30, r24
    8624:	25 91       	lpm	r18, Z+
    8626:	34 91       	lpm	r19, Z+
    8628:	8d 2d       	mov	r24, r13
    862a:	9e 2d       	mov	r25, r14
    862c:	6f 2d       	mov	r22, r15
    862e:	f9 01       	movw	r30, r18
    8630:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    8632:	ec 89       	ldd	r30, Y+20	; 0x14
    8634:	fd 89       	ldd	r31, Y+21	; 0x15
    8636:	31 96       	adiw	r30, 0x01	; 1
    8638:	fd 8b       	std	Y+21, r31	; 0x15
    863a:	ec 8b       	std	Y+20, r30	; 0x14
    863c:	31 97       	sbiw	r30, 0x01	; 1
    863e:	e4 91       	lpm	r30, Z+
    8640:	e9 8b       	std	Y+17, r30	; 0x11
					
					track->patchCurrDeltaTime=0;	
    8642:	1a 8a       	std	Y+18, r1	; 0x12

			if(track->patchCommandStreamPos!=NULL && 
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    8644:	9a 89       	ldd	r25, Y+18	; 0x12
    8646:	89 89       	ldd	r24, Y+17	; 0x11
    8648:	98 17       	cp	r25, r24
    864a:	81 f2       	breq	.-96     	; 0x85ec <ProcessMusic+0x2d8>
					track->patchCurrDeltaTime=0;	

				}		
			}				
			
			track->patchCurrDeltaTime++;
    864c:	8a 89       	ldd	r24, Y+18	; 0x12
    864e:	8f 5f       	subi	r24, 0xFF	; 255
    8650:	8a 8b       	std	Y+18, r24	; 0x12
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    8652:	88 81       	ld	r24, Y
    8654:	85 fd       	sbrc	r24, 5
    8656:	03 c0       	rjmp	.+6      	; 0x865e <ProcessMusic+0x34a>
    8658:	20 e0       	ldi	r18, 0x00	; 0
    865a:	30 e0       	ldi	r19, 0x00	; 0
    865c:	70 c0       	rjmp	.+224    	; 0x873e <ProcessMusic+0x42a>
		
			if(track->patchPlayingTime<0xff){
    865e:	8b 89       	ldd	r24, Y+19	; 0x13
    8660:	8f 3f       	cpi	r24, 0xFF	; 255
    8662:	11 f0       	breq	.+4      	; 0x8668 <ProcessMusic+0x354>
				track->patchPlayingTime++;
    8664:	8f 5f       	subi	r24, 0xFF	; 255
    8666:	8b 8b       	std	Y+19, r24	; 0x13
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8668:	88 81       	ld	r24, Y
    866a:	87 ff       	sbrs	r24, 7
    866c:	02 c0       	rjmp	.+4      	; 0x8672 <ProcessMusic+0x35e>
    866e:	8f ef       	ldi	r24, 0xFF	; 255
    8670:	01 c0       	rjmp	.+2      	; 0x8674 <ProcessMusic+0x360>
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8672:	8a 85       	ldd	r24, Y+10	; 0x0a
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8674:	9b 85       	ldd	r25, Y+11	; 0x0b
    8676:	99 23       	and	r25, r25
    8678:	09 f4       	brne	.+2      	; 0x867c <ProcessMusic+0x368>
    867a:	5b c0       	rjmp	.+182    	; 0x8732 <ProcessMusic+0x41e>
    867c:	2c 85       	ldd	r18, Y+12	; 0x0c
    867e:	22 23       	and	r18, r18
    8680:	09 f4       	brne	.+2      	; 0x8684 <ProcessMusic+0x370>
    8682:	57 c0       	rjmp	.+174    	; 0x8732 <ProcessMusic+0x41e>
    8684:	88 23       	and	r24, r24
    8686:	09 f4       	brne	.+2      	; 0x868a <ProcessMusic+0x376>
    8688:	54 c0       	rjmp	.+168    	; 0x8732 <ProcessMusic+0x41e>
    868a:	40 91 fc 09 	lds	r20, 0x09FC
    868e:	44 23       	and	r20, r20
    8690:	09 f4       	brne	.+2      	; 0x8694 <ProcessMusic+0x380>
    8692:	4f c0       	rjmp	.+158    	; 0x8732 <ProcessMusic+0x41e>

				uVol=(track->noteVol*trackVol)+0x100;
    8694:	89 9f       	mul	r24, r25
    8696:	c0 01       	movw	r24, r0
    8698:	11 24       	eor	r1, r1
    869a:	80 50       	subi	r24, 0x00	; 0
    869c:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->envelopeVol)+0x100;
    869e:	89 2f       	mov	r24, r25
    86a0:	99 27       	eor	r25, r25
    86a2:	30 e0       	ldi	r19, 0x00	; 0
    86a4:	b9 01       	movw	r22, r18
    86a6:	86 9f       	mul	r24, r22
    86a8:	90 01       	movw	r18, r0
    86aa:	87 9f       	mul	r24, r23
    86ac:	30 0d       	add	r19, r0
    86ae:	96 9f       	mul	r25, r22
    86b0:	30 0d       	add	r19, r0
    86b2:	11 24       	eor	r1, r1
    86b4:	20 50       	subi	r18, 0x00	; 0
    86b6:	3f 4f       	sbci	r19, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*track->expressionVol)+0x100;
    86b8:	23 2f       	mov	r18, r19
    86ba:	33 27       	eor	r19, r19
    86bc:	89 85       	ldd	r24, Y+9	; 0x09
    86be:	90 e0       	ldi	r25, 0x00	; 0
    86c0:	fc 01       	movw	r30, r24
    86c2:	2e 9f       	mul	r18, r30
    86c4:	c0 01       	movw	r24, r0
    86c6:	2f 9f       	mul	r18, r31
    86c8:	90 0d       	add	r25, r0
    86ca:	3e 9f       	mul	r19, r30
    86cc:	90 0d       	add	r25, r0
    86ce:	11 24       	eor	r1, r1
    86d0:	80 50       	subi	r24, 0x00	; 0
    86d2:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
				uVol=(uVol*masterVolume)+0x100;
    86d4:	89 2f       	mov	r24, r25
    86d6:	99 27       	eor	r25, r25
    86d8:	24 2f       	mov	r18, r20
    86da:	30 e0       	ldi	r19, 0x00	; 0
    86dc:	ac 01       	movw	r20, r24
    86de:	42 9f       	mul	r20, r18
    86e0:	c0 01       	movw	r24, r0
    86e2:	43 9f       	mul	r20, r19
    86e4:	90 0d       	add	r25, r0
    86e6:	52 9f       	mul	r21, r18
    86e8:	90 0d       	add	r25, r0
    86ea:	11 24       	eor	r1, r1
    86ec:	80 50       	subi	r24, 0x00	; 0
    86ee:	9f 4f       	sbci	r25, 0xFF	; 255
				uVol>>=8;
    86f0:	29 2f       	mov	r18, r25
    86f2:	33 27       	eor	r19, r19

				if(track->tremoloLevel>0){					
    86f4:	8f 81       	ldd	r24, Y+7	; 0x07
    86f6:	88 23       	and	r24, r24
    86f8:	f1 f0       	breq	.+60     	; 0x8736 <ProcessMusic+0x422>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    86fa:	ee 81       	ldd	r30, Y+6	; 0x06
    86fc:	f0 e0       	ldi	r31, 0x00	; 0
    86fe:	e0 50       	subi	r30, 0x00	; 0
    8700:	f5 47       	sbci	r31, 0x75	; 117
    8702:	e4 91       	lpm	r30, Z+
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
    8704:	e0 58       	subi	r30, 0x80	; 128
    8706:	e8 9f       	mul	r30, r24
    8708:	c0 01       	movw	r24, r0
    870a:	11 24       	eor	r1, r1
    870c:	80 50       	subi	r24, 0x00	; 0
    870e:	9f 4f       	sbci	r25, 0xFF	; 255
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8710:	89 2f       	mov	r24, r25
    8712:	99 27       	eor	r25, r25
    8714:	b5 01       	movw	r22, r10
    8716:	68 1b       	sub	r22, r24
    8718:	79 0b       	sbc	r23, r25
    871a:	62 9f       	mul	r22, r18
    871c:	c0 01       	movw	r24, r0
    871e:	63 9f       	mul	r22, r19
    8720:	90 0d       	add	r25, r0
    8722:	72 9f       	mul	r23, r18
    8724:	90 0d       	add	r25, r0
    8726:	11 24       	eor	r1, r1
    8728:	80 50       	subi	r24, 0x00	; 0
    872a:	9f 4f       	sbci	r25, 0xFF	; 255
					uVol>>=8;
    872c:	29 2f       	mov	r18, r25
    872e:	33 27       	eor	r19, r19
    8730:	02 c0       	rjmp	.+4      	; 0x8736 <ProcessMusic+0x422>
    8732:	20 e0       	ldi	r18, 0x00	; 0
    8734:	30 e0       	ldi	r19, 0x00	; 0
			
			}else{
				uVol=0;
			}	

			track->tremoloPos+=track->tremoloRate;	
    8736:	8e 81       	ldd	r24, Y+6	; 0x06
    8738:	98 85       	ldd	r25, Y+8	; 0x08
    873a:	89 0f       	add	r24, r25
    873c:	8e 83       	std	Y+6, r24	; 0x06

		}else{
			uVol=0;
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    873e:	f8 01       	movw	r30, r16
    8740:	20 83       	st	Z, r18


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8742:	f3 94       	inc	r15
    8744:	66 96       	adiw	r28, 0x16	; 22
    8746:	0a 5f       	subi	r16, 0xFA	; 250
    8748:	1f 4f       	sbci	r17, 0xFF	; 255
    874a:	f5 e0       	ldi	r31, 0x05	; 5
    874c:	ff 16       	cp	r15, r31
    874e:	09 f0       	breq	.+2      	; 0x8752 <ProcessMusic+0x43e>
    8750:	3e cf       	rjmp	.-388    	; 0x85ce <ProcessMusic+0x2ba>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8752:	df 91       	pop	r29
    8754:	cf 91       	pop	r28
    8756:	1f 91       	pop	r17
    8758:	0f 91       	pop	r16
    875a:	ff 90       	pop	r15
    875c:	ef 90       	pop	r14
    875e:	df 90       	pop	r13
    8760:	bf 90       	pop	r11
    8762:	af 90       	pop	r10
    8764:	08 95       	ret

00008766 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8766:	58 2f       	mov	r21, r24
    8768:	76 2f       	mov	r23, r22
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    876a:	89 e0       	ldi	r24, 0x09	; 9
    876c:	58 9f       	mul	r21, r24
    876e:	c0 01       	movw	r24, r0
    8770:	11 24       	eor	r1, r1
    8772:	e0 91 f9 09 	lds	r30, 0x09F9
    8776:	f0 91 fa 09 	lds	r31, 0x09FA
    877a:	e8 0f       	add	r30, r24
    877c:	f9 1f       	adc	r31, r25
    877e:	84 91       	lpm	r24, Z+

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8780:	81 30       	cpi	r24, 0x01	; 1
    8782:	11 f4       	brne	.+4      	; 0x8788 <TriggerFx+0x22>
    8784:	43 e0       	ldi	r20, 0x03	; 3
    8786:	21 c0       	rjmp	.+66     	; 0x87ca <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8788:	82 30       	cpi	r24, 0x02	; 2
    878a:	11 f4       	brne	.+4      	; 0x8790 <TriggerFx+0x2a>
    878c:	44 e0       	ldi	r20, 0x04	; 4
    878e:	1d c0       	rjmp	.+58     	; 0x87ca <TriggerFx+0x64>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8790:	80 91 9f 09 	lds	r24, 0x099F
    8794:	87 ff       	sbrs	r24, 7
    8796:	16 c0       	rjmp	.+44     	; 0x87c4 <TriggerFx+0x5e>
    8798:	80 91 ae 09 	lds	r24, 0x09AE
    879c:	85 17       	cp	r24, r21
    879e:	11 f4       	brne	.+4      	; 0x87a4 <TriggerFx+0x3e>
    87a0:	44 23       	and	r20, r20
    87a2:	81 f4       	brne	.+32     	; 0x87c4 <TriggerFx+0x5e>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    87a4:	80 91 b5 09 	lds	r24, 0x09B5
    87a8:	87 ff       	sbrs	r24, 7
    87aa:	0e c0       	rjmp	.+28     	; 0x87c8 <TriggerFx+0x62>
    87ac:	80 91 c4 09 	lds	r24, 0x09C4
    87b0:	85 17       	cp	r24, r21
    87b2:	11 f4       	brne	.+4      	; 0x87b8 <TriggerFx+0x52>
    87b4:	44 23       	and	r20, r20
    87b6:	41 f4       	brne	.+16     	; 0x87c8 <TriggerFx+0x62>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    87b8:	90 91 b2 09 	lds	r25, 0x09B2
    87bc:	80 91 c8 09 	lds	r24, 0x09C8
    87c0:	89 17       	cp	r24, r25
    87c2:	10 f4       	brcc	.+4      	; 0x87c8 <TriggerFx+0x62>
    87c4:	41 e0       	ldi	r20, 0x01	; 1
    87c6:	01 c0       	rjmp	.+2      	; 0x87ca <TriggerFx+0x64>
    87c8:	42 e0       	ldi	r20, 0x02	; 2
		}else{
			channel=2;
		}
	}				

	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
    87ca:	24 2f       	mov	r18, r20
    87cc:	30 e0       	ldi	r19, 0x00	; 0
    87ce:	86 e1       	ldi	r24, 0x16	; 22
    87d0:	90 e0       	ldi	r25, 0x00	; 0
    87d2:	28 9f       	mul	r18, r24
    87d4:	f0 01       	movw	r30, r0
    87d6:	29 9f       	mul	r18, r25
    87d8:	f0 0d       	add	r31, r0
    87da:	38 9f       	mul	r19, r24
    87dc:	f0 0d       	add	r31, r0
    87de:	11 24       	eor	r1, r1
    87e0:	e7 57       	subi	r30, 0x77	; 119
    87e2:	f6 4f       	sbci	r31, 0xF6	; 246
    87e4:	80 81       	ld	r24, Z
    87e6:	80 68       	ori	r24, 0x80	; 128
    87e8:	80 83       	st	Z, r24
	TriggerCommon(channel,patch,volume,80);
    87ea:	84 2f       	mov	r24, r20
    87ec:	65 2f       	mov	r22, r21
    87ee:	47 2f       	mov	r20, r23
    87f0:	20 e5       	ldi	r18, 0x50	; 80
    87f2:	0e 94 b6 40 	call	0x816c	; 0x816c <TriggerCommon>
}
    87f6:	08 95       	ret

000087f8 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    87f8:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    87fa:	64 2f       	mov	r22, r20
    87fc:	0e 94 18 44 	call	0x8830	; 0x8830 <SetMixerWave>
}
    8800:	08 95       	ret

00008802 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8802:	99 27       	eor	r25, r25
	clr r23
    8804:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8806:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8808:	09 f4       	brne	.+2      	; 0x880c <set_note_waves>
		ret
    880a:	08 95       	ret

0000880c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    880c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    880e:	f9 e8       	ldi	r31, 0x89	; 137
	lsl r22
    8810:	66 0f       	add	r22, r22
	rol r23
    8812:	77 1f       	adc	r23, r23
	add ZL,r22
    8814:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8816:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8818:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    881a:	b4 91       	lpm	r27, Z+

	ldi ZL,lo8(mixerStruct)
    881c:	e2 e6       	ldi	r30, 0x62	; 98
	ldi ZH,hi8(mixerStruct)
    881e:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    8820:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8822:	28 9f       	mul	r18, r24
	add ZL,r0
    8824:	e0 0d       	add	r30, r0
	adc ZH,r1
    8826:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8828:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    882a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    882c:	11 24       	eor	r1, r1
	

	ret
    882e:	08 95       	ret

00008830 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8830:	99 27       	eor	r25, r25
	clr r23
    8832:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8834:	e2 e6       	ldi	r30, 0x62	; 98
	ldi ZH,hi8(mixerStruct)
    8836:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    8838:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    883a:	28 9f       	mul	r18, r24
	add ZL,r0
    883c:	e0 0d       	add	r30, r0
	adc ZH,r1
    883e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8840:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8842:	31 f4       	brne	.+12     	; 0x8850 <smw1>
	lds r22,tr4_params
    8844:	60 91 75 09 	lds	r22, 0x0975
	andi r22,0xfe;
    8848:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    884a:	60 93 75 09 	sts	0x0975, r22
	rjmp esmw	
    884e:	0b c0       	rjmp	.+22     	; 0x8866 <esmw>

00008850 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8850:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8852:	31 f4       	brne	.+12     	; 0x8860 <smw2>
	lds r22,tr4_params
    8854:	60 91 75 09 	lds	r22, 0x0975
	ori r22,0xfe;
    8858:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    885a:	60 93 75 09 	sts	0x0975, r22
	rjmp esmw
    885e:	03 c0       	rjmp	.+6      	; 0x8866 <esmw>

00008860 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8860:	7b e8       	ldi	r23, 0x8B	; 139
	add r23,r22
    8862:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8864:	75 83       	std	Z+5, r23	; 0x05

00008866 <esmw>:

esmw:
	clr r1	
    8866:	11 24       	eor	r1, r1
	ret
    8868:	08 95       	ret
	...

00008900 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8900:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8902:	80 93 61 09 	sts	0x0961, r24
	ret
    8906:	08 95       	ret

00008908 <steptable>:
    8908:	22 00       	.word	0x0022	; ????
    890a:	24 00       	.word	0x0024	; ????
    890c:	26 00       	.word	0x0026	; ????
    890e:	28 00       	.word	0x0028	; ????
    8910:	2b 00       	.word	0x002b	; ????
    8912:	2d 00       	.word	0x002d	; ????
    8914:	30 00       	.word	0x0030	; ????
    8916:	33 00       	.word	0x0033	; ????
    8918:	36 00       	.word	0x0036	; ????
    891a:	39 00       	.word	0x0039	; ????
    891c:	3d 00       	.word	0x003d	; ????
    891e:	40 00       	.word	0x0040	; ????
    8920:	44 00       	.word	0x0044	; ????
    8922:	48 00       	.word	0x0048	; ????
    8924:	4c 00       	.word	0x004c	; ????
    8926:	51 00       	.word	0x0051	; ????
    8928:	56 00       	.word	0x0056	; ????
    892a:	5b 00       	.word	0x005b	; ????
    892c:	60 00       	.word	0x0060	; ????
    892e:	66 00       	.word	0x0066	; ????
    8930:	6c 00       	.word	0x006c	; ????
    8932:	73 00       	.word	0x0073	; ????
    8934:	79 00       	.word	0x0079	; ????
    8936:	81 00       	.word	0x0081	; ????
    8938:	88 00       	.word	0x0088	; ????
    893a:	90 00       	.word	0x0090	; ????
    893c:	99 00       	.word	0x0099	; ????
    893e:	a2 00       	.word	0x00a2	; ????
    8940:	ac 00       	.word	0x00ac	; ????
    8942:	b6 00       	.word	0x00b6	; ????
    8944:	c1 00       	.word	0x00c1	; ????
    8946:	cc 00       	.word	0x00cc	; ????
    8948:	d8 00       	.word	0x00d8	; ????
    894a:	e5 00       	.word	0x00e5	; ????
    894c:	f3 00       	.word	0x00f3	; ????
    894e:	01 01       	movw	r0, r2
    8950:	10 01       	movw	r2, r0
    8952:	21 01       	movw	r4, r2
    8954:	32 01       	movw	r6, r4
    8956:	44 01       	movw	r8, r8
    8958:	57 01       	movw	r10, r14
    895a:	6c 01       	movw	r12, r24
    895c:	81 01       	movw	r16, r2
    895e:	98 01       	movw	r18, r16
    8960:	b0 01       	movw	r22, r0
    8962:	ca 01       	movw	r24, r20
    8964:	e5 01       	movw	r28, r10
    8966:	02 02       	muls	r16, r18
    8968:	21 02       	muls	r18, r17
    896a:	41 02       	muls	r20, r17
    896c:	64 02       	muls	r22, r20
    896e:	88 02       	muls	r24, r24
    8970:	ae 02       	muls	r26, r30
    8972:	d7 02       	muls	r29, r23
    8974:	03 03       	mulsu	r16, r19
    8976:	30 03       	mulsu	r19, r16
    8978:	61 03       	mulsu	r22, r17
    897a:	94 03       	fmuls	r17, r20
    897c:	cb 03       	fmulsu	r20, r19
    897e:	05 04       	cpc	r0, r5
    8980:	42 04       	cpc	r4, r2
    8982:	83 04       	cpc	r8, r3
    8984:	c7 04       	cpc	r12, r7
    8986:	10 05       	cpc	r17, r0
    8988:	5d 05       	cpc	r21, r13
    898a:	af 05       	cpc	r26, r15
    898c:	05 06       	cpc	r0, r21
    898e:	61 06       	cpc	r6, r17
    8990:	c2 06       	cpc	r12, r18
    8992:	29 07       	cpc	r18, r25
    8994:	96 07       	cpc	r25, r22
    8996:	09 08       	sbc	r0, r9
    8998:	83 08       	sbc	r8, r3
    899a:	05 09       	sbc	r16, r5
    899c:	8e 09       	sbc	r24, r14
    899e:	20 0a       	sbc	r2, r16
    89a0:	ba 0a       	sbc	r11, r26
    89a2:	5d 0b       	sbc	r21, r29
    89a4:	0a 0c       	add	r0, r10
    89a6:	c1 0c       	add	r12, r1
    89a8:	84 0d       	add	r24, r4
    89aa:	51 0e       	add	r5, r17
    89ac:	2b 0f       	add	r18, r27
    89ae:	12 10       	cpse	r1, r2
    89b0:	07 11       	cpse	r16, r7
    89b2:	0a 12       	cpse	r0, r26
    89b4:	1d 13       	cpse	r17, r29
    89b6:	40 14       	cp	r4, r0
    89b8:	74 15       	cp	r23, r4
    89ba:	ba 16       	cp	r11, r26
    89bc:	14 18       	sub	r1, r4
    89be:	83 19       	sub	r24, r3
    89c0:	07 1b       	sub	r16, r23
    89c2:	a3 1c       	adc	r10, r3
    89c4:	57 1e       	adc	r5, r23
    89c6:	24 20       	and	r2, r4
    89c8:	0e 22       	and	r0, r30
    89ca:	14 24       	eor	r1, r4
    89cc:	39 26       	eor	r3, r25
    89ce:	7f 28       	or	r7, r15
    89d0:	e8 2a       	or	r14, r24
    89d2:	75 2d       	mov	r23, r5
    89d4:	29 30       	cpi	r18, 0x09	; 9
    89d6:	06 33       	cpi	r16, 0x36	; 54
    89d8:	0f 36       	cpi	r16, 0x6F	; 111
    89da:	45 39       	cpi	r20, 0x95	; 149
    89dc:	ad 3c       	cpi	r26, 0xCD	; 205
    89de:	49 40       	sbci	r20, 0x09	; 9
    89e0:	1b 44       	sbci	r17, 0x4B	; 75
    89e2:	28 48       	sbci	r18, 0x88	; 136
    89e4:	73 4c       	sbci	r23, 0xC3	; 195
    89e6:	fe 50       	subi	r31, 0x0E	; 14
    89e8:	cf 55       	subi	r28, 0x5F	; 95
    89ea:	ea 5a       	subi	r30, 0xAA	; 170
    89ec:	51 60       	ori	r21, 0x01	; 1
    89ee:	0c 66       	ori	r16, 0x6C	; 108
    89f0:	1d 6c       	ori	r17, 0xCD	; 205
    89f2:	8b 72       	andi	r24, 0x2B	; 43
    89f4:	5a 79       	andi	r21, 0x9A	; 154
    89f6:	92 80       	ldd	r9, Z+2	; 0x02
    89f8:	37 88       	ldd	r3, Z+23	; 0x17
    89fa:	50 90 e5 98 	lds	r5, 0x98E5
    89fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8a00:	9f ab       	std	Y+55, r25	; 0x37
    8a02:	d3 b5       	in	r29, 0x23	; 35
    8a04:	a3 c0       	rjmp	.+326    	; 0x8b4c <waves+0x4c>
	...

00008b00 <waves>:
    8b00:	80 81       	ld	r24, Z
    8b02:	82 83       	std	Z+2, r24	; 0x02
    8b04:	84 85       	ldd	r24, Z+12	; 0x0c
    8b06:	86 87       	std	Z+14, r24	; 0x0e
    8b08:	88 89       	ldd	r24, Y+16	; 0x10
    8b0a:	8a 8b       	std	Y+18, r24	; 0x12
    8b0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8b0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8b10:	90 91 92 93 	lds	r25, 0x9392
    8b14:	94 95       	.word	0x9594	; ????
    8b16:	96 97       	sbiw	r26, 0x26	; 38
    8b18:	98 99       	sbic	0x13, 0	; 19
    8b1a:	9a 9b       	sbis	0x13, 2	; 19
    8b1c:	9c 9d       	mul	r25, r12
    8b1e:	9e 9f       	mul	r25, r30
    8b20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8b22:	a2 a3       	std	Z+34, r26	; 0x22
    8b24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8b26:	a6 a7       	std	Z+46, r26	; 0x2e
    8b28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8b2a:	aa ab       	std	Y+50, r26	; 0x32
    8b2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8b2e:	ae af       	std	Y+62, r26	; 0x3e
    8b30:	b0 b1       	in	r27, 0x00	; 0
    8b32:	b2 b3       	in	r27, 0x12	; 18
    8b34:	b4 b5       	in	r27, 0x24	; 36
    8b36:	b6 b7       	in	r27, 0x36	; 54
    8b38:	b8 b9       	out	0x08, r27	; 8
    8b3a:	ba bb       	out	0x1a, r27	; 26
    8b3c:	bc bd       	out	0x2c, r27	; 44
    8b3e:	be bf       	out	0x3e, r27	; 62
    8b40:	c0 c1       	rjmp	.+896    	; 0x8ec2 <waves+0x3c2>
    8b42:	c2 c3       	rjmp	.+1924   	; 0x92c8 <ProcessSprites+0x14a>
    8b44:	c4 c5       	rjmp	.+2952   	; 0x96ce <hunt+0xa6>
    8b46:	c6 c7       	rjmp	.+3980   	; 0x9ad4 <SetVidGrid+0xa0>
    8b48:	c8 c9       	rjmp	.-3184   	; 0x7eda <EepromWriteBlock+0x80>
    8b4a:	ca cb       	rjmp	.-2156   	; 0x82e0 <TriggerNote+0x62>
    8b4c:	cc cd       	rjmp	.-1128   	; 0x86e6 <ProcessMusic+0x3d2>
    8b4e:	ce cf       	rjmp	.-100    	; 0x8aec <steptable+0x1e4>
    8b50:	d0 d1       	rcall	.+928    	; 0x8ef2 <waves+0x3f2>
    8b52:	d2 d3       	rcall	.+1956   	; 0x92f8 <SaveBG+0x8>
    8b54:	d4 d5       	rcall	.+2984   	; 0x96fe <hunt+0xd6>
    8b56:	d6 d7       	rcall	.+4012   	; 0x9b04 <FloodFill+0x26>
    8b58:	d8 d9       	rcall	.-3152   	; 0x7f0a <EepromWriteBlock+0xb0>
    8b5a:	da db       	rcall	.-2124   	; 0x8310 <TriggerNote+0x92>
    8b5c:	dc dd       	rcall	.-1096   	; 0x8716 <ProcessMusic+0x402>
    8b5e:	de df       	rcall	.-68     	; 0x8b1c <waves+0x1c>
    8b60:	e0 e1       	ldi	r30, 0x10	; 16
    8b62:	e2 e3       	ldi	r30, 0x32	; 50
    8b64:	e4 e5       	ldi	r30, 0x54	; 84
    8b66:	e6 e7       	ldi	r30, 0x76	; 118
    8b68:	e8 e9       	ldi	r30, 0x98	; 152
    8b6a:	ea eb       	ldi	r30, 0xBA	; 186
    8b6c:	ec ed       	ldi	r30, 0xDC	; 220
    8b6e:	ee ef       	ldi	r30, 0xFE	; 254
    8b70:	f0 f1       	brcs	.+124    	; 0x8bee <waves+0xee>
    8b72:	f2 f3       	brmi	.-4      	; 0x8b70 <waves+0x70>
    8b74:	f4 f5       	brge	.+124    	; 0x8bf2 <waves+0xf2>
    8b76:	f6 f7       	brtc	.-4      	; 0x8b74 <waves+0x74>
    8b78:	f8 f9       	.word	0xf9f8	; ????
    8b7a:	fa fb       	.word	0xfbfa	; ????
    8b7c:	fc fd       	.word	0xfdfc	; ????
    8b7e:	fe ff       	.word	0xfffe	; ????
    8b80:	00 01       	movw	r0, r0
    8b82:	02 03       	mulsu	r16, r18
    8b84:	04 05       	cpc	r16, r4
    8b86:	06 07       	cpc	r16, r22
    8b88:	08 09       	sbc	r16, r8
    8b8a:	0a 0b       	sbc	r16, r26
    8b8c:	0c 0d       	add	r16, r12
    8b8e:	0e 0f       	add	r16, r30
    8b90:	10 11       	cpse	r17, r0
    8b92:	12 13       	cpse	r17, r18
    8b94:	14 15       	cp	r17, r4
    8b96:	16 17       	cp	r17, r22
    8b98:	18 19       	sub	r17, r8
    8b9a:	1a 1b       	sub	r17, r26
    8b9c:	1c 1d       	adc	r17, r12
    8b9e:	1e 1f       	adc	r17, r30
    8ba0:	20 21       	and	r18, r0
    8ba2:	22 23       	and	r18, r18
    8ba4:	24 25       	eor	r18, r4
    8ba6:	26 27       	eor	r18, r22
    8ba8:	28 29       	or	r18, r8
    8baa:	2a 2b       	or	r18, r26
    8bac:	2c 2d       	mov	r18, r12
    8bae:	2e 2f       	mov	r18, r30
    8bb0:	30 31       	cpi	r19, 0x10	; 16
    8bb2:	32 33       	cpi	r19, 0x32	; 50
    8bb4:	34 35       	cpi	r19, 0x54	; 84
    8bb6:	36 37       	cpi	r19, 0x76	; 118
    8bb8:	38 39       	cpi	r19, 0x98	; 152
    8bba:	3a 3b       	cpi	r19, 0xBA	; 186
    8bbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8bbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8bc0:	40 41       	sbci	r20, 0x10	; 16
    8bc2:	42 43       	sbci	r20, 0x32	; 50
    8bc4:	44 45       	sbci	r20, 0x54	; 84
    8bc6:	46 47       	sbci	r20, 0x76	; 118
    8bc8:	48 49       	sbci	r20, 0x98	; 152
    8bca:	4a 4b       	sbci	r20, 0xBA	; 186
    8bcc:	4c 4d       	sbci	r20, 0xDC	; 220
    8bce:	4e 4f       	sbci	r20, 0xFE	; 254
    8bd0:	50 51       	subi	r21, 0x10	; 16
    8bd2:	52 53       	subi	r21, 0x32	; 50
    8bd4:	54 55       	subi	r21, 0x54	; 84
    8bd6:	56 57       	subi	r21, 0x76	; 118
    8bd8:	58 59       	subi	r21, 0x98	; 152
    8bda:	5a 5b       	subi	r21, 0xBA	; 186
    8bdc:	5c 5d       	subi	r21, 0xDC	; 220
    8bde:	5e 5f       	subi	r21, 0xFE	; 254
    8be0:	60 61       	ori	r22, 0x10	; 16
    8be2:	62 63       	ori	r22, 0x32	; 50
    8be4:	64 65       	ori	r22, 0x54	; 84
    8be6:	66 67       	ori	r22, 0x76	; 118
    8be8:	68 69       	ori	r22, 0x98	; 152
    8bea:	6a 6b       	ori	r22, 0xBA	; 186
    8bec:	6c 6d       	ori	r22, 0xDC	; 220
    8bee:	6e 6f       	ori	r22, 0xFE	; 254
    8bf0:	70 71       	andi	r23, 0x10	; 16
    8bf2:	72 73       	andi	r23, 0x32	; 50
    8bf4:	74 75       	andi	r23, 0x54	; 84
    8bf6:	76 77       	andi	r23, 0x76	; 118
    8bf8:	78 79       	andi	r23, 0x98	; 152
    8bfa:	7a 7b       	andi	r23, 0xBA	; 186
    8bfc:	7c 7d       	andi	r23, 0xDC	; 220
    8bfe:	7e 7f       	andi	r23, 0xFE	; 254
    8c00:	00 02       	muls	r16, r16
    8c02:	04 06       	cpc	r0, r20
    8c04:	08 0a       	sbc	r0, r24
    8c06:	0c 0e       	add	r0, r28
    8c08:	10 12       	cpse	r1, r16
    8c0a:	14 16       	cp	r1, r20
    8c0c:	18 1a       	sub	r1, r24
    8c0e:	1c 1e       	adc	r1, r28
    8c10:	20 22       	and	r2, r16
    8c12:	24 26       	eor	r2, r20
    8c14:	28 2a       	or	r2, r24
    8c16:	2c 2e       	mov	r2, r28
    8c18:	30 32       	cpi	r19, 0x20	; 32
    8c1a:	34 36       	cpi	r19, 0x64	; 100
    8c1c:	38 3a       	cpi	r19, 0xA8	; 168
    8c1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8c20:	40 42       	sbci	r20, 0x20	; 32
    8c22:	44 46       	sbci	r20, 0x64	; 100
    8c24:	48 4a       	sbci	r20, 0xA8	; 168
    8c26:	4c 4e       	sbci	r20, 0xEC	; 236
    8c28:	50 52       	subi	r21, 0x20	; 32
    8c2a:	54 56       	subi	r21, 0x64	; 100
    8c2c:	58 5a       	subi	r21, 0xA8	; 168
    8c2e:	5c 5e       	subi	r21, 0xEC	; 236
    8c30:	60 62       	ori	r22, 0x20	; 32
    8c32:	64 66       	ori	r22, 0x64	; 100
    8c34:	68 6a       	ori	r22, 0xA8	; 168
    8c36:	6c 6e       	ori	r22, 0xEC	; 236
    8c38:	70 72       	andi	r23, 0x20	; 32
    8c3a:	74 76       	andi	r23, 0x64	; 100
    8c3c:	78 7a       	andi	r23, 0xA8	; 168
    8c3e:	7c 7e       	andi	r23, 0xEC	; 236
    8c40:	7f 7d       	andi	r23, 0xDF	; 223
    8c42:	7b 79       	andi	r23, 0x9B	; 155
    8c44:	77 75       	andi	r23, 0x57	; 87
    8c46:	73 71       	andi	r23, 0x13	; 19
    8c48:	6f 6d       	ori	r22, 0xDF	; 223
    8c4a:	6b 69       	ori	r22, 0x9B	; 155
    8c4c:	67 65       	ori	r22, 0x57	; 87
    8c4e:	63 61       	ori	r22, 0x13	; 19
    8c50:	5f 5d       	subi	r21, 0xDF	; 223
    8c52:	5b 59       	subi	r21, 0x9B	; 155
    8c54:	57 55       	subi	r21, 0x57	; 87
    8c56:	53 51       	subi	r21, 0x13	; 19
    8c58:	4f 4d       	sbci	r20, 0xDF	; 223
    8c5a:	4b 49       	sbci	r20, 0x9B	; 155
    8c5c:	47 45       	sbci	r20, 0x57	; 87
    8c5e:	43 41       	sbci	r20, 0x13	; 19
    8c60:	3f 3d       	cpi	r19, 0xDF	; 223
    8c62:	3b 39       	cpi	r19, 0x9B	; 155
    8c64:	37 35       	cpi	r19, 0x57	; 87
    8c66:	33 31       	cpi	r19, 0x13	; 19
    8c68:	2f 2d       	mov	r18, r15
    8c6a:	2b 29       	or	r18, r11
    8c6c:	27 25       	eor	r18, r7
    8c6e:	23 21       	and	r18, r3
    8c70:	1f 1d       	adc	r17, r15
    8c72:	1b 19       	sub	r17, r11
    8c74:	17 15       	cp	r17, r7
    8c76:	13 11       	cpse	r17, r3
    8c78:	0f 0d       	add	r16, r15
    8c7a:	0b 09       	sbc	r16, r11
    8c7c:	07 05       	cpc	r16, r7
    8c7e:	03 01       	movw	r0, r6
    8c80:	ff fd       	.word	0xfdff	; ????
    8c82:	fb f9       	.word	0xf9fb	; ????
    8c84:	f7 f5       	brid	.+124    	; 0x8d02 <waves+0x202>
    8c86:	f3 f1       	brvs	.+124    	; 0x8d04 <waves+0x204>
    8c88:	ef ed       	ldi	r30, 0xDF	; 223
    8c8a:	eb e9       	ldi	r30, 0x9B	; 155
    8c8c:	e7 e5       	ldi	r30, 0x57	; 87
    8c8e:	e3 e1       	ldi	r30, 0x13	; 19
    8c90:	df dd       	rcall	.-1090   	; 0x8850 <smw1>
    8c92:	db d9       	rcall	.-3146   	; 0x804a <InitMusicPlayer+0x16>
    8c94:	d7 d5       	rcall	.+2990   	; 0x9844 <LoadHighScore+0x58>
    8c96:	d3 d1       	rcall	.+934    	; 0x903e <InitializeVideoMode+0xe>
    8c98:	cf cd       	rjmp	.-1122   	; 0x8838 <SetMixerWave+0x8>
    8c9a:	cb c9       	rjmp	.-3178   	; 0x8032 <PatchCommand12+0x4>
    8c9c:	c7 c5       	rjmp	.+2958   	; 0x982c <LoadHighScore+0x40>
    8c9e:	c3 c1       	rjmp	.+902    	; 0x9026 <RestoreBackground+0x26>
    8ca0:	bf bd       	out	0x2f, r27	; 47
    8ca2:	bb b9       	out	0x0b, r27	; 11
    8ca4:	b7 b5       	in	r27, 0x27	; 39
    8ca6:	b3 b1       	in	r27, 0x03	; 3
    8ca8:	af ad       	ldd	r26, Y+63	; 0x3f
    8caa:	ab a9       	ldd	r26, Y+51	; 0x33
    8cac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8cae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8cb0:	9f 9d       	mul	r25, r15
    8cb2:	9b 99       	sbic	0x13, 3	; 19
    8cb4:	97 95       	ror	r25
    8cb6:	93 91       	.word	0x9193	; ????
    8cb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8cba:	8b 89       	ldd	r24, Y+19	; 0x13
    8cbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8cbe:	83 81       	ldd	r24, Z+3	; 0x03
    8cc0:	80 82       	st	Z, r8
    8cc2:	84 86       	std	Z+12, r8	; 0x0c
    8cc4:	88 8a       	std	Y+16, r8	; 0x10
    8cc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8cc8:	90 92 94 96 	sts	0x9694, r9
    8ccc:	98 9a       	sbi	0x13, 0	; 19
    8cce:	9c 9e       	mul	r9, r28
    8cd0:	a0 a2       	std	Z+32, r10	; 0x20
    8cd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8cd4:	a8 aa       	std	Y+48, r10	; 0x30
    8cd6:	ac ae       	std	Y+60, r10	; 0x3c
    8cd8:	b0 b2       	in	r11, 0x10	; 16
    8cda:	b4 b6       	in	r11, 0x34	; 52
    8cdc:	b8 ba       	out	0x18, r11	; 24
    8cde:	bc be       	out	0x3c, r11	; 60
    8ce0:	c0 c2       	rjmp	.+1408   	; 0x9262 <ProcessSprites+0xe4>
    8ce2:	c4 c6       	rjmp	.+3464   	; 0x9a6c <SetVidGrid+0x38>
    8ce4:	c8 ca       	rjmp	.-2672   	; 0x8276 <TriggerCommon+0x10a>
    8ce6:	cc ce       	rjmp	.-616    	; 0x8a80 <steptable+0x178>
    8ce8:	d0 d2       	rcall	.+1440   	; 0x928a <ProcessSprites+0x10c>
    8cea:	d4 d6       	rcall	.+3496   	; 0x9a94 <SetVidGrid+0x60>
    8cec:	d8 da       	rcall	.-2640   	; 0x829e <TriggerNote+0x20>
    8cee:	dc de       	rcall	.-584    	; 0x8aa8 <steptable+0x1a0>
    8cf0:	e0 e2       	ldi	r30, 0x20	; 32
    8cf2:	e4 e6       	ldi	r30, 0x64	; 100
    8cf4:	e8 ea       	ldi	r30, 0xA8	; 168
    8cf6:	ec ee       	ldi	r30, 0xEC	; 236
    8cf8:	f0 f2       	brcs	.-68     	; 0x8cb6 <waves+0x1b6>
    8cfa:	f4 f6       	brge	.-68     	; 0x8cb8 <waves+0x1b8>
    8cfc:	f8 fa       	.word	0xfaf8	; ????
    8cfe:	fc fe       	.word	0xfefc	; ????
    8d00:	7f 7f       	andi	r23, 0xFF	; 255
    8d02:	7f 7f       	andi	r23, 0xFF	; 255
    8d04:	7f 7f       	andi	r23, 0xFF	; 255
    8d06:	7f 7f       	andi	r23, 0xFF	; 255
    8d08:	7f 7f       	andi	r23, 0xFF	; 255
    8d0a:	7f 7f       	andi	r23, 0xFF	; 255
    8d0c:	7f 7f       	andi	r23, 0xFF	; 255
    8d0e:	7f 7f       	andi	r23, 0xFF	; 255
    8d10:	7f 7f       	andi	r23, 0xFF	; 255
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	7f 7f       	andi	r23, 0xFF	; 255
    8d42:	7f 7f       	andi	r23, 0xFF	; 255
    8d44:	7f 7f       	andi	r23, 0xFF	; 255
    8d46:	7f 7f       	andi	r23, 0xFF	; 255
    8d48:	7f 7f       	andi	r23, 0xFF	; 255
    8d4a:	7f 7f       	andi	r23, 0xFF	; 255
    8d4c:	7f 7f       	andi	r23, 0xFF	; 255
    8d4e:	7f 7f       	andi	r23, 0xFF	; 255
    8d50:	7f 7f       	andi	r23, 0xFF	; 255
    8d52:	7f 7f       	andi	r23, 0xFF	; 255
    8d54:	7f 7f       	andi	r23, 0xFF	; 255
    8d56:	7f 7f       	andi	r23, 0xFF	; 255
    8d58:	7f 7f       	andi	r23, 0xFF	; 255
    8d5a:	7f 7f       	andi	r23, 0xFF	; 255
    8d5c:	7f 7f       	andi	r23, 0xFF	; 255
    8d5e:	7f 7f       	andi	r23, 0xFF	; 255
    8d60:	7f 7f       	andi	r23, 0xFF	; 255
    8d62:	7f 7f       	andi	r23, 0xFF	; 255
    8d64:	7f 7f       	andi	r23, 0xFF	; 255
    8d66:	7f 7f       	andi	r23, 0xFF	; 255
    8d68:	7f 7f       	andi	r23, 0xFF	; 255
    8d6a:	7f 7f       	andi	r23, 0xFF	; 255
    8d6c:	7f 7f       	andi	r23, 0xFF	; 255
    8d6e:	7f 7f       	andi	r23, 0xFF	; 255
    8d70:	7f 7f       	andi	r23, 0xFF	; 255
    8d72:	7f 7f       	andi	r23, 0xFF	; 255
    8d74:	7f 7f       	andi	r23, 0xFF	; 255
    8d76:	7f 7f       	andi	r23, 0xFF	; 255
    8d78:	7f 7f       	andi	r23, 0xFF	; 255
    8d7a:	7f 7f       	andi	r23, 0xFF	; 255
    8d7c:	7f 7f       	andi	r23, 0xFF	; 255
    8d7e:	7f 7f       	andi	r23, 0xFF	; 255
    8d80:	80 80       	ld	r8, Z
    8d82:	80 80       	ld	r8, Z
    8d84:	80 80       	ld	r8, Z
    8d86:	80 80       	ld	r8, Z
    8d88:	80 80       	ld	r8, Z
    8d8a:	80 80       	ld	r8, Z
    8d8c:	80 80       	ld	r8, Z
    8d8e:	80 80       	ld	r8, Z
    8d90:	80 80       	ld	r8, Z
    8d92:	80 80       	ld	r8, Z
    8d94:	80 80       	ld	r8, Z
    8d96:	80 80       	ld	r8, Z
    8d98:	80 80       	ld	r8, Z
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 80       	ld	r8, Z
    8df6:	80 80       	ld	r8, Z
    8df8:	80 80       	ld	r8, Z
    8dfa:	80 80       	ld	r8, Z
    8dfc:	80 80       	ld	r8, Z
    8dfe:	80 80       	ld	r8, Z
    8e00:	7f 7f       	andi	r23, 0xFF	; 255
    8e02:	7f 7f       	andi	r23, 0xFF	; 255
    8e04:	7f 7f       	andi	r23, 0xFF	; 255
    8e06:	7f 7f       	andi	r23, 0xFF	; 255
    8e08:	7f 7f       	andi	r23, 0xFF	; 255
    8e0a:	7f 7f       	andi	r23, 0xFF	; 255
    8e0c:	7f 7f       	andi	r23, 0xFF	; 255
    8e0e:	7f 7f       	andi	r23, 0xFF	; 255
    8e10:	7f 7f       	andi	r23, 0xFF	; 255
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	7f 7f       	andi	r23, 0xFF	; 255
    8e42:	7f 7f       	andi	r23, 0xFF	; 255
    8e44:	7f 7f       	andi	r23, 0xFF	; 255
    8e46:	7f 7f       	andi	r23, 0xFF	; 255
    8e48:	7f 7f       	andi	r23, 0xFF	; 255
    8e4a:	7f 7f       	andi	r23, 0xFF	; 255
    8e4c:	7f 7f       	andi	r23, 0xFF	; 255
    8e4e:	7f 7f       	andi	r23, 0xFF	; 255
    8e50:	7f 7f       	andi	r23, 0xFF	; 255
    8e52:	7f 7f       	andi	r23, 0xFF	; 255
    8e54:	7f 7f       	andi	r23, 0xFF	; 255
    8e56:	7f 7f       	andi	r23, 0xFF	; 255
    8e58:	7f 7f       	andi	r23, 0xFF	; 255
    8e5a:	7f 7f       	andi	r23, 0xFF	; 255
    8e5c:	7f 7f       	andi	r23, 0xFF	; 255
    8e5e:	7f 7f       	andi	r23, 0xFF	; 255
    8e60:	7f 7f       	andi	r23, 0xFF	; 255
    8e62:	7f 7f       	andi	r23, 0xFF	; 255
    8e64:	7f 7f       	andi	r23, 0xFF	; 255
    8e66:	7f 7f       	andi	r23, 0xFF	; 255
    8e68:	7f 7f       	andi	r23, 0xFF	; 255
    8e6a:	7f 7f       	andi	r23, 0xFF	; 255
    8e6c:	7f 7f       	andi	r23, 0xFF	; 255
    8e6e:	7f 7f       	andi	r23, 0xFF	; 255
    8e70:	7f 7f       	andi	r23, 0xFF	; 255
    8e72:	7f 7f       	andi	r23, 0xFF	; 255
    8e74:	7f 7f       	andi	r23, 0xFF	; 255
    8e76:	7f 7f       	andi	r23, 0xFF	; 255
    8e78:	7f 7f       	andi	r23, 0xFF	; 255
    8e7a:	7f 7f       	andi	r23, 0xFF	; 255
    8e7c:	7f 7f       	andi	r23, 0xFF	; 255
    8e7e:	7f 7f       	andi	r23, 0xFF	; 255
    8e80:	7f 7f       	andi	r23, 0xFF	; 255
    8e82:	7f 7f       	andi	r23, 0xFF	; 255
    8e84:	7f 7f       	andi	r23, 0xFF	; 255
    8e86:	7f 7f       	andi	r23, 0xFF	; 255
    8e88:	7f 7f       	andi	r23, 0xFF	; 255
    8e8a:	7f 7f       	andi	r23, 0xFF	; 255
    8e8c:	7f 7f       	andi	r23, 0xFF	; 255
    8e8e:	7f 7f       	andi	r23, 0xFF	; 255
    8e90:	7f 7f       	andi	r23, 0xFF	; 255
    8e92:	7f 7f       	andi	r23, 0xFF	; 255
    8e94:	7f 7f       	andi	r23, 0xFF	; 255
    8e96:	7f 7f       	andi	r23, 0xFF	; 255
    8e98:	7f 7f       	andi	r23, 0xFF	; 255
    8e9a:	7f 7f       	andi	r23, 0xFF	; 255
    8e9c:	7f 7f       	andi	r23, 0xFF	; 255
    8e9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ea0:	7f 7f       	andi	r23, 0xFF	; 255
    8ea2:	7f 7f       	andi	r23, 0xFF	; 255
    8ea4:	7f 7f       	andi	r23, 0xFF	; 255
    8ea6:	7f 7f       	andi	r23, 0xFF	; 255
    8ea8:	7f 7f       	andi	r23, 0xFF	; 255
    8eaa:	7f 7f       	andi	r23, 0xFF	; 255
    8eac:	7f 7f       	andi	r23, 0xFF	; 255
    8eae:	7f 7f       	andi	r23, 0xFF	; 255
    8eb0:	7f 7f       	andi	r23, 0xFF	; 255
    8eb2:	7f 7f       	andi	r23, 0xFF	; 255
    8eb4:	7f 7f       	andi	r23, 0xFF	; 255
    8eb6:	7f 7f       	andi	r23, 0xFF	; 255
    8eb8:	7f 7f       	andi	r23, 0xFF	; 255
    8eba:	7f 7f       	andi	r23, 0xFF	; 255
    8ebc:	7f 7f       	andi	r23, 0xFF	; 255
    8ebe:	7f 7f       	andi	r23, 0xFF	; 255
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 80       	ld	r8, Z
    8ef6:	80 80       	ld	r8, Z
    8ef8:	80 80       	ld	r8, Z
    8efa:	80 80       	ld	r8, Z
    8efc:	80 80       	ld	r8, Z
    8efe:	80 80       	ld	r8, Z
    8f00:	03 09       	sbc	r16, r3
    8f02:	13 1e       	adc	r1, r19
    8f04:	28 31       	cpi	r18, 0x18	; 24
    8f06:	3a 40       	sbci	r19, 0x0A	; 10
    8f08:	46 4c       	sbci	r20, 0xC6	; 198
    8f0a:	50 54       	subi	r21, 0x40	; 64
    8f0c:	58 5b       	subi	r21, 0xB8	; 184
    8f0e:	5e 61       	ori	r21, 0x1E	; 30
    8f10:	63 65       	ori	r22, 0x53	; 83
    8f12:	67 69       	ori	r22, 0x97	; 151
    8f14:	6b 6c       	ori	r22, 0xCB	; 203
    8f16:	6e 6f       	ori	r22, 0xFE	; 254
    8f18:	70 71       	andi	r23, 0x10	; 16
    8f1a:	72 73       	andi	r23, 0x32	; 50
    8f1c:	74 75       	andi	r23, 0x54	; 84
    8f1e:	76 77       	andi	r23, 0x76	; 118
    8f20:	77 78       	andi	r23, 0x87	; 135
    8f22:	79 79       	andi	r23, 0x99	; 153
    8f24:	7a 7a       	andi	r23, 0xAA	; 170
    8f26:	7b 7b       	andi	r23, 0xBB	; 187
    8f28:	7c 7c       	andi	r23, 0xCC	; 204
    8f2a:	7c 7d       	andi	r23, 0xDC	; 220
    8f2c:	7d 7d       	andi	r23, 0xDD	; 221
    8f2e:	7e 7e       	andi	r23, 0xEE	; 238
    8f30:	7e 7e       	andi	r23, 0xEE	; 238
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7f 7f       	andi	r23, 0xFF	; 255
    8f46:	7f 7f       	andi	r23, 0xFF	; 255
    8f48:	7f 7f       	andi	r23, 0xFF	; 255
    8f4a:	7f 7f       	andi	r23, 0xFF	; 255
    8f4c:	7f 7e       	andi	r23, 0xEF	; 239
    8f4e:	7e 7e       	andi	r23, 0xEE	; 238
    8f50:	7e 7d       	andi	r23, 0xDE	; 222
    8f52:	7d 7d       	andi	r23, 0xDD	; 221
    8f54:	7c 7c       	andi	r23, 0xCC	; 204
    8f56:	7c 7b       	andi	r23, 0xBC	; 188
    8f58:	7b 7a       	andi	r23, 0xAB	; 171
    8f5a:	7a 79       	andi	r23, 0x9A	; 154
    8f5c:	79 78       	andi	r23, 0x89	; 137
    8f5e:	77 77       	andi	r23, 0x77	; 119
    8f60:	76 75       	andi	r23, 0x56	; 86
    8f62:	74 73       	andi	r23, 0x34	; 52
    8f64:	72 71       	andi	r23, 0x12	; 18
    8f66:	70 6f       	ori	r23, 0xF0	; 240
    8f68:	6e 6c       	ori	r22, 0xCE	; 206
    8f6a:	6b 69       	ori	r22, 0x9B	; 155
    8f6c:	67 65       	ori	r22, 0x57	; 87
    8f6e:	63 61       	ori	r22, 0x13	; 19
    8f70:	5e 5b       	subi	r21, 0xBE	; 190
    8f72:	58 54       	subi	r21, 0x48	; 72
    8f74:	50 4c       	sbci	r21, 0xC0	; 192
    8f76:	46 40       	sbci	r20, 0x06	; 6
    8f78:	3a 31       	cpi	r19, 0x1A	; 26
    8f7a:	28 1e       	adc	r2, r24
    8f7c:	13 09       	sbc	r17, r3
    8f7e:	03 00       	.word	0x0003	; ????
    8f80:	c6 cc       	rjmp	.-1652   	; 0x890e <steptable+0x6>
    8f82:	d5 db       	rcall	.-2134   	; 0x872e <ProcessMusic+0x41a>
    8f84:	df e3       	ldi	r29, 0x3F	; 63
    8f86:	e5 e7       	ldi	r30, 0x75	; 117
    8f88:	e9 ea       	ldi	r30, 0xA9	; 169
    8f8a:	eb ec       	ldi	r30, 0xCB	; 203
    8f8c:	ed ee       	ldi	r30, 0xED	; 237
    8f8e:	ef ef       	ldi	r30, 0xFF	; 255
    8f90:	f0 f0       	brcs	.+60     	; 0x8fce <waves+0x4ce>
    8f92:	f0 f1       	brcs	.+124    	; 0x9010 <RestoreBackground+0x10>
    8f94:	f1 f1       	breq	.+124    	; 0x9012 <RestoreBackground+0x12>
    8f96:	f1 f2       	breq	.-68     	; 0x8f54 <waves+0x454>
    8f98:	f2 f2       	brmi	.-68     	; 0x8f56 <waves+0x456>
    8f9a:	f2 f2       	brmi	.-68     	; 0x8f58 <waves+0x458>
    8f9c:	f2 f2       	brmi	.-68     	; 0x8f5a <waves+0x45a>
    8f9e:	f2 f3       	brmi	.-4      	; 0x8f9c <waves+0x49c>
    8fa0:	f3 f3       	brvs	.-4      	; 0x8f9e <waves+0x49e>
    8fa2:	f3 f3       	brvs	.-4      	; 0x8fa0 <waves+0x4a0>
    8fa4:	f3 f3       	brvs	.-4      	; 0x8fa2 <waves+0x4a2>
    8fa6:	f3 f3       	brvs	.-4      	; 0x8fa4 <waves+0x4a4>
    8fa8:	f3 f3       	brvs	.-4      	; 0x8fa6 <waves+0x4a6>
    8faa:	f3 f3       	brvs	.-4      	; 0x8fa8 <waves+0x4a8>
    8fac:	f3 f3       	brvs	.-4      	; 0x8faa <waves+0x4aa>
    8fae:	f3 f3       	brvs	.-4      	; 0x8fac <waves+0x4ac>
    8fb0:	f3 f3       	brvs	.-4      	; 0x8fae <waves+0x4ae>
    8fb2:	f3 f3       	brvs	.-4      	; 0x8fb0 <waves+0x4b0>
    8fb4:	f3 f3       	brvs	.-4      	; 0x8fb2 <waves+0x4b2>
    8fb6:	f3 f3       	brvs	.-4      	; 0x8fb4 <waves+0x4b4>
    8fb8:	f3 f3       	brvs	.-4      	; 0x8fb6 <waves+0x4b6>
    8fba:	f3 f3       	brvs	.-4      	; 0x8fb8 <waves+0x4b8>
    8fbc:	f3 f3       	brvs	.-4      	; 0x8fba <waves+0x4ba>
    8fbe:	f3 f3       	brvs	.-4      	; 0x8fbc <waves+0x4bc>
    8fc0:	f3 f3       	brvs	.-4      	; 0x8fbe <waves+0x4be>
    8fc2:	f3 f3       	brvs	.-4      	; 0x8fc0 <waves+0x4c0>
    8fc4:	f3 f3       	brvs	.-4      	; 0x8fc2 <waves+0x4c2>
    8fc6:	f3 f3       	brvs	.-4      	; 0x8fc4 <waves+0x4c4>
    8fc8:	f3 f3       	brvs	.-4      	; 0x8fc6 <waves+0x4c6>
    8fca:	f3 f3       	brvs	.-4      	; 0x8fc8 <waves+0x4c8>
    8fcc:	f3 f3       	brvs	.-4      	; 0x8fca <waves+0x4ca>
    8fce:	f3 f3       	brvs	.-4      	; 0x8fcc <waves+0x4cc>
    8fd0:	f3 f3       	brvs	.-4      	; 0x8fce <waves+0x4ce>
    8fd2:	f3 f3       	brvs	.-4      	; 0x8fd0 <waves+0x4d0>
    8fd4:	f3 f3       	brvs	.-4      	; 0x8fd2 <waves+0x4d2>
    8fd6:	f3 f3       	brvs	.-4      	; 0x8fd4 <waves+0x4d4>
    8fd8:	f3 f3       	brvs	.-4      	; 0x8fd6 <waves+0x4d6>
    8fda:	f3 f3       	brvs	.-4      	; 0x8fd8 <waves+0x4d8>
    8fdc:	f3 f3       	brvs	.-4      	; 0x8fda <waves+0x4da>
    8fde:	f3 f3       	brvs	.-4      	; 0x8fdc <waves+0x4dc>
    8fe0:	f2 f2       	brmi	.-68     	; 0x8f9e <waves+0x49e>
    8fe2:	f2 f2       	brmi	.-68     	; 0x8fa0 <waves+0x4a0>
    8fe4:	f2 f2       	brmi	.-68     	; 0x8fa2 <waves+0x4a2>
    8fe6:	f2 f2       	brmi	.-68     	; 0x8fa4 <waves+0x4a4>
    8fe8:	f1 f1       	breq	.+124    	; 0x9066 <FadeIn+0x22>
    8fea:	f1 f1       	breq	.+124    	; 0x9068 <FadeIn+0x24>
    8fec:	f0 f0       	brcs	.+60     	; 0x902a <RestoreBackground+0x2a>
    8fee:	f0 ef       	ldi	r31, 0xF0	; 240
    8ff0:	ef ee       	ldi	r30, 0xEF	; 239
    8ff2:	ed ec       	ldi	r30, 0xCD	; 205
    8ff4:	eb ea       	ldi	r30, 0xAB	; 171
    8ff6:	e9 e7       	ldi	r30, 0x79	; 121
    8ff8:	e5 e3       	ldi	r30, 0x35	; 53
    8ffa:	df db       	rcall	.-2114   	; 0x87ba <TriggerFx+0x54>
    8ffc:	d5 cc       	rjmp	.-1622   	; 0x89a8 <steptable+0xa0>
    8ffe:	c6 00       	.word	0x00c6	; ????

00009000 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9000:	30 91 06 0a 	lds	r19, 0x0A06
    9004:	20 e0       	ldi	r18, 0x00	; 0
    9006:	10 c0       	rjmp	.+32     	; 0x9028 <RestoreBackground+0x28>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    9008:	82 2f       	mov	r24, r18
    900a:	90 e0       	ldi	r25, 0x00	; 0
    900c:	fc 01       	movw	r30, r24
    900e:	ee 0f       	add	r30, r30
    9010:	ff 1f       	adc	r31, r31
    9012:	e8 0f       	add	r30, r24
    9014:	f9 1f       	adc	r31, r25
    9016:	e0 50       	subi	r30, 0x00	; 0
    9018:	f7 4f       	sbci	r31, 0xF7	; 247
    901a:	a0 81       	ld	r26, Z
    901c:	b1 81       	ldd	r27, Z+1	; 0x01
    901e:	a0 5c       	subi	r26, 0xC0	; 192
    9020:	be 4f       	sbci	r27, 0xFE	; 254
    9022:	82 81       	ldd	r24, Z+2	; 0x02
    9024:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9026:	2f 5f       	subi	r18, 0xFF	; 255
    9028:	23 17       	cp	r18, r19
    902a:	70 f3       	brcs	.-36     	; 0x9008 <RestoreBackground+0x8>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    902c:	08 95       	ret

0000902e <DisplayLogo>:
		
			WaitVsync(65);
			ClearVram();
			WaitVsync(20);
		#endif	
	}
    902e:	08 95       	ret

00009030 <InitializeVideoMode>:


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9030:	e8 e8       	ldi	r30, 0x88	; 136
    9032:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9034:	80 ef       	ldi	r24, 0xF0	; 240
    9036:	80 83       	st	Z, r24
    9038:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    903a:	94 e0       	ldi	r25, 0x04	; 4
    903c:	e0 3c       	cpi	r30, 0xC0	; 192
    903e:	f9 07       	cpc	r31, r25
    9040:	d1 f7       	brne	.-12     	; 0x9036 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    9042:	08 95       	ret

00009044 <FadeIn>:
	}
	
	
}

void FadeIn(unsigned char speed,bool blocking){
    9044:	98 2f       	mov	r25, r24
	if(speed==0){
    9046:	88 23       	and	r24, r24
    9048:	19 f4       	brne	.+6      	; 0x9050 <FadeIn+0xc>
		DDRC=0xff;
    904a:	8f ef       	ldi	r24, 0xFF	; 255
    904c:	87 b9       	out	0x07, r24	; 7
    904e:	08 95       	ret
		return;
	}
	fadeStep=1;
    9050:	81 e0       	ldi	r24, 0x01	; 1
    9052:	80 93 09 0a 	sts	0x0A09, r24
	fadeDir=1;
    9056:	80 93 05 0a 	sts	0x0A05, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    905a:	90 93 04 0a 	sts	0x0A04, r25
	currFadeFrame=0;
    905e:	10 92 08 0a 	sts	0x0A08, r1
	fadeActive=true;
    9062:	80 93 07 0a 	sts	0x0A07, r24
		
	if(blocking){
    9066:	66 23       	and	r22, r22
    9068:	21 f0       	breq	.+8      	; 0x9072 <FadeIn+0x2e>
		while(fadeActive==true);
    906a:	80 91 07 0a 	lds	r24, 0x0A07
    906e:	88 23       	and	r24, r24
    9070:	e1 f7       	brne	.-8      	; 0x906a <FadeIn+0x26>
    9072:	08 95       	ret

00009074 <FadeOut>:
	fadeStep=1;
	fadeDir=1;
	doFade(speed,blocking);
}

void FadeOut(unsigned char speed,bool blocking){
    9074:	98 2f       	mov	r25, r24
	if(speed==0){
    9076:	88 23       	and	r24, r24
    9078:	11 f4       	brne	.+4      	; 0x907e <FadeOut+0xa>
		DDRC=0;
    907a:	17 b8       	out	0x07, r1	; 7
    907c:	08 95       	ret
		return;
	}
	
	fadeStep=FADER_STEPS;
    907e:	8c e0       	ldi	r24, 0x0C	; 12
    9080:	80 93 09 0a 	sts	0x0A09, r24
	fadeDir=-1;
    9084:	8f ef       	ldi	r24, 0xFF	; 255
    9086:	80 93 05 0a 	sts	0x0A05, r24
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    908a:	90 93 04 0a 	sts	0x0A04, r25
	currFadeFrame=0;
    908e:	10 92 08 0a 	sts	0x0A08, r1
	fadeActive=true;
    9092:	81 e0       	ldi	r24, 0x01	; 1
    9094:	80 93 07 0a 	sts	0x0A07, r24
		
	if(blocking){
    9098:	66 23       	and	r22, r22
    909a:	21 f0       	breq	.+8      	; 0x90a4 <FadeOut+0x30>
		while(fadeActive==true);
    909c:	80 91 07 0a 	lds	r24, 0x0A07
    90a0:	88 23       	and	r24, r24
    90a2:	e1 f7       	brne	.-8      	; 0x909c <FadeOut+0x28>
    90a4:	08 95       	ret

000090a6 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    90a6:	80 91 07 0a 	lds	r24, 0x0A07
    90aa:	88 23       	and	r24, r24
    90ac:	f9 f0       	breq	.+62     	; 0x90ec <ProcessFading+0x46>
		if(currFadeFrame==0){
    90ae:	80 91 08 0a 	lds	r24, 0x0A08
    90b2:	88 23       	and	r24, r24
    90b4:	c1 f4       	brne	.+48     	; 0x90e6 <ProcessFading+0x40>
			currFadeFrame=fadeSpeed;
    90b6:	80 91 04 0a 	lds	r24, 0x0A04
    90ba:	80 93 08 0a 	sts	0x0A08, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    90be:	80 91 09 0a 	lds	r24, 0x0A09
    90c2:	e8 2f       	mov	r30, r24
    90c4:	f0 e0       	ldi	r31, 0x00	; 0
    90c6:	e9 52       	subi	r30, 0x29	; 41
    90c8:	ff 4f       	sbci	r31, 0xFF	; 255
    90ca:	e4 91       	lpm	r30, Z+
    90cc:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    90ce:	90 91 05 0a 	lds	r25, 0x0A05
    90d2:	98 0f       	add	r25, r24
    90d4:	90 93 09 0a 	sts	0x0A09, r25
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    90d8:	99 23       	and	r25, r25
    90da:	11 f0       	breq	.+4      	; 0x90e0 <ProcessFading+0x3a>
    90dc:	9d 30       	cpi	r25, 0x0D	; 13
    90de:	31 f4       	brne	.+12     	; 0x90ec <ProcessFading+0x46>
				fadeActive=false;
    90e0:	10 92 07 0a 	sts	0x0A07, r1
    90e4:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    90e6:	81 50       	subi	r24, 0x01	; 1
    90e8:	80 93 08 0a 	sts	0x0A08, r24
    90ec:	08 95       	ret

000090ee <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    90ee:	0f 93       	push	r16
    90f0:	1f 93       	push	r17
    90f2:	cf 93       	push	r28
    90f4:	df 93       	push	r29
    90f6:	8c 01       	movw	r16, r24
    90f8:	c0 e0       	ldi	r28, 0x00	; 0
    90fa:	d0 e0       	ldi	r29, 0x00	; 0
    90fc:	07 c0       	rjmp	.+14     	; 0x910c <WaitVsync+0x1e>
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
		while(!GetVsyncFlag());
    90fe:	0e 94 52 3e 	call	0x7ca4	; 0x7ca4 <GetVsyncFlag>
    9102:	88 23       	and	r24, r24
    9104:	e1 f3       	breq	.-8      	; 0x90fe <WaitVsync+0x10>
		ClearVsyncFlag();		
    9106:	0e 94 56 3e 	call	0x7cac	; 0x7cac <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    910a:	21 96       	adiw	r28, 0x01	; 1
    910c:	c0 17       	cp	r28, r16
    910e:	d1 07       	cpc	r29, r17
    9110:	b4 f3       	brlt	.-20     	; 0x90fe <WaitVsync+0x10>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9112:	df 91       	pop	r29
    9114:	cf 91       	pop	r28
    9116:	1f 91       	pop	r17
    9118:	0f 91       	pop	r16
    911a:	08 95       	ret

0000911c <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    911c:	a1 e0       	ldi	r26, 0x01	; 1
    911e:	b0 e0       	ldi	r27, 0x00	; 0
    9120:	e4 e9       	ldi	r30, 0x94	; 148
    9122:	f8 e4       	ldi	r31, 0x48	; 72
    9124:	0c 94 1a 5a 	jmp	0xb434	; 0xb434 <__prologue_saves__+0x8>
    9128:	88 2e       	mov	r8, r24
    912a:	96 2e       	mov	r9, r22
    912c:	fa 01       	movw	r30, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    912e:	b4 90       	lpm	r11, Z+
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9130:	31 96       	adiw	r30, 0x01	; 1
    9132:	a4 90       	lpm	r10, Z+
    9134:	cb 2c       	mov	r12, r11
    9136:	dd 24       	eor	r13, r13
    9138:	8f 01       	movw	r16, r30
    913a:	0f 5f       	subi	r16, 0xFF	; 255
    913c:	1f 4f       	sbci	r17, 0xFF	; 255
    913e:	ff 24       	eor	r15, r15
    9140:	13 c0       	rjmp	.+38     	; 0x9168 <DrawMap2+0x4c>
	for(u8 dy=0;dy<mapHeight;dy++){
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9142:	f3 01       	movw	r30, r6
    9144:	44 91       	lpm	r20, Z+
    9146:	89 2f       	mov	r24, r25
    9148:	88 0d       	add	r24, r8
    914a:	6e 2d       	mov	r22, r14
    914c:	50 e0       	ldi	r21, 0x00	; 0
    914e:	99 83       	std	Y+1, r25	; 0x01
    9150:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
		for(u8 dx=0;dx<mapWidth;dx++){			
    9154:	99 81       	ldd	r25, Y+1	; 0x01
    9156:	9f 5f       	subi	r25, 0xFF	; 255
    9158:	08 94       	sec
    915a:	61 1c       	adc	r6, r1
    915c:	71 1c       	adc	r7, r1
    915e:	9b 15       	cp	r25, r11
    9160:	80 f3       	brcs	.-32     	; 0x9142 <DrawMap2+0x26>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    9162:	f3 94       	inc	r15
    9164:	0c 0d       	add	r16, r12
    9166:	1d 1d       	adc	r17, r13
    9168:	fa 14       	cp	r15, r10
    916a:	28 f4       	brcc	.+10     	; 0x9176 <DrawMap2+0x5a>
    916c:	38 01       	movw	r6, r16
    916e:	90 e0       	ldi	r25, 0x00	; 0
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9170:	ef 2c       	mov	r14, r15
    9172:	e9 0c       	add	r14, r9
    9174:	f4 cf       	rjmp	.-24     	; 0x915e <DrawMap2+0x42>
		}
	}

}
    9176:	21 96       	adiw	r28, 0x01	; 1
    9178:	ee e0       	ldi	r30, 0x0E	; 14
    917a:	0c 94 36 5a 	jmp	0xb46c	; 0xb46c <__epilogue_restores__+0x8>

0000917e <ProcessSprites>:
		}

	}
	

void ProcessSprites(){
    917e:	a3 e0       	ldi	r26, 0x03	; 3
    9180:	b0 e0       	ldi	r27, 0x00	; 0
    9182:	e5 ec       	ldi	r30, 0xC5	; 197
    9184:	f8 e4       	ldi	r31, 0x48	; 72
    9186:	0c 94 16 5a 	jmp	0xb42c	; 0xb42c <__prologue_saves__>
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    918a:	10 92 06 0a 	sts	0x0A06, r1
		if(!spritesOn) return;
    918e:	80 91 00 01 	lds	r24, 0x0100
    9192:	88 23       	and	r24, r24
    9194:	09 f4       	brne	.+2      	; 0x9198 <ProcessSprites+0x1a>
    9196:	a3 c0       	rjmp	.+326    	; 0x92de <ProcessSprites+0x160>
    9198:	e8 e8       	ldi	r30, 0x88	; 136
    919a:	8e 2e       	mov	r8, r30
    919c:	e4 e0       	ldi	r30, 0x04	; 4
    919e:	9e 2e       	mov	r9, r30
    91a0:	77 24       	eor	r7, r7
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    91a2:	f4 01       	movw	r30, r8
    91a4:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    91a6:	80 3f       	cpi	r24, 0xF0	; 240
    91a8:	09 f4       	brne	.+2      	; 0x91ac <ProcessSprites+0x2e>
    91aa:	7a c0       	rjmp	.+244    	; 0x92a0 <ProcessSprites+0x122>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    91ac:	91 81       	ldd	r25, Z+1	; 0x01

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    91ae:	f8 2f       	mov	r31, r24
    91b0:	f6 95       	lsr	r31
    91b2:	f6 95       	lsr	r31
    91b4:	f6 95       	lsr	r31
    91b6:	f9 83       	std	Y+1, r31	; 0x01
				dx=ssx&0x7;
    91b8:	28 2f       	mov	r18, r24
    91ba:	27 70       	andi	r18, 0x07	; 7
				if(dx>0) tx++;
    91bc:	19 f0       	breq	.+6      	; 0x91c4 <ProcessSprites+0x46>
    91be:	72 e0       	ldi	r23, 0x02	; 2
    91c0:	27 2e       	mov	r2, r23
    91c2:	02 c0       	rjmp	.+4      	; 0x91c8 <ProcessSprites+0x4a>
    91c4:	22 24       	eor	r2, r2
    91c6:	23 94       	inc	r2

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    91c8:	39 2f       	mov	r19, r25
    91ca:	36 95       	lsr	r19
    91cc:	36 95       	lsr	r19
    91ce:	36 95       	lsr	r19
				dy=ssy%TILE_HEIGHT;
    91d0:	89 2f       	mov	r24, r25
    91d2:	87 70       	andi	r24, 0x07	; 7
				if(dy>0) ty++;			
    91d4:	19 f0       	breq	.+6      	; 0x91dc <ProcessSprites+0x5e>
    91d6:	62 e0       	ldi	r22, 0x02	; 2
    91d8:	66 2e       	mov	r6, r22
    91da:	02 c0       	rjmp	.+4      	; 0x91e0 <ProcessSprites+0x62>
    91dc:	66 24       	eor	r6, r6
    91de:	63 94       	inc	r6
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    91e0:	b8 2e       	mov	r11, r24
    91e2:	aa 24       	eor	r10, r10
    91e4:	25 01       	movw	r4, r10
    91e6:	42 0e       	add	r4, r18
    91e8:	51 1c       	adc	r5, r1
    91ea:	c3 2e       	mov	r12, r19
    91ec:	ee 24       	eor	r14, r14
    91ee:	ff 24       	eor	r15, r15
    91f0:	4d c0       	rjmp	.+154    	; 0x928c <ProcessSprites+0x10e>

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    91f2:	2b e1       	ldi	r18, 0x1B	; 27
    91f4:	2c 15       	cp	r18, r12
    91f6:	10 f0       	brcs	.+4      	; 0x91fc <ProcessSprites+0x7e>
    91f8:	9c 2d       	mov	r25, r12
    91fa:	01 c0       	rjmp	.+2      	; 0x91fe <ProcessSprites+0x80>
    91fc:	93 2d       	mov	r25, r3
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    91fe:	4d e1       	ldi	r20, 0x1D	; 29
    9200:	4d 15       	cp	r20, r13
    9202:	10 f0       	brcs	.+4      	; 0x9208 <ProcessSprites+0x8a>
    9204:	8d 2d       	mov	r24, r13
    9206:	02 c0       	rjmp	.+4      	; 0x920c <ProcessSprites+0x8e>
    9208:	8d 2d       	mov	r24, r13
    920a:	8e 51       	subi	r24, 0x1E	; 30

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    920c:	ee e1       	ldi	r30, 0x1E	; 30
    920e:	9e 9f       	mul	r25, r30
    9210:	90 01       	movw	r18, r0
    9212:	11 24       	eor	r1, r1
    9214:	28 0f       	add	r18, r24
    9216:	31 1d       	adc	r19, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    9218:	89 01       	movw	r16, r18
    921a:	00 5c       	subi	r16, 0xC0	; 192
    921c:	1e 4f       	sbci	r17, 0xFE	; 254
    921e:	f8 01       	movw	r30, r16
    9220:	60 81       	ld	r22, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    9222:	61 31       	cpi	r22, 0x11	; 17
    9224:	f0 f0       	brcs	.+60     	; 0x9262 <ProcessSprites+0xe4>
    9226:	40 91 06 0a 	lds	r20, 0x0A06
    922a:	41 31       	cpi	r20, 0x11	; 17
    922c:	00 f5       	brcc	.+64     	; 0x926e <ProcessSprites+0xf0>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    922e:	84 2f       	mov	r24, r20
    9230:	90 e0       	ldi	r25, 0x00	; 0
    9232:	fc 01       	movw	r30, r24
    9234:	ee 0f       	add	r30, r30
    9236:	ff 1f       	adc	r31, r31
    9238:	e8 0f       	add	r30, r24
    923a:	f9 1f       	adc	r31, r25
    923c:	e0 50       	subi	r30, 0x00	; 0
    923e:	f7 4f       	sbci	r31, 0xF7	; 247
    9240:	31 83       	std	Z+1, r19	; 0x01
    9242:	20 83       	st	Z, r18
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9244:	62 83       	std	Z+2, r22	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    9246:	86 2f       	mov	r24, r22
    9248:	64 2f       	mov	r22, r20
    924a:	0e 94 85 3b 	call	0x770a	; 0x770a <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    924e:	60 91 06 0a 	lds	r22, 0x0A06
    9252:	f8 01       	movw	r30, r16
    9254:	60 83       	st	Z, r22
								bt=free_tile_index;
								free_tile_index++;										
    9256:	6f 5f       	subi	r22, 0xFF	; 255
    9258:	60 93 06 0a 	sts	0x0A06, r22
    925c:	61 50       	subi	r22, 0x01	; 1
							}
				
							if(bt<RAM_TILES_COUNT){				
    925e:	61 31       	cpi	r22, 0x11	; 17
    9260:	30 f4       	brcc	.+12     	; 0x926e <ProcessSprites+0xf0>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9262:	87 2d       	mov	r24, r7
    9264:	4a 81       	ldd	r20, Y+2	; 0x02
    9266:	5b 81       	ldd	r21, Y+3	; 0x03
    9268:	92 01       	movw	r18, r4
    926a:	0e 94 16 3c 	call	0x782c	; 0x782c <BlitSprite>
    926e:	8a 81       	ldd	r24, Y+2	; 0x02
    9270:	9b 81       	ldd	r25, Y+3	; 0x03
    9272:	01 96       	adiw	r24, 0x01	; 1
    9274:	9b 83       	std	Y+3, r25	; 0x03
    9276:	8a 83       	std	Y+2, r24	; 0x02
    9278:	d3 94       	inc	r13
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    927a:	82 15       	cp	r24, r2
    927c:	08 f4       	brcc	.+2      	; 0x9280 <ProcessSprites+0x102>
    927e:	b9 cf       	rjmp	.-142    	; 0x91f2 <ProcessSprites+0x74>
    9280:	08 94       	sec
    9282:	e1 1c       	adc	r14, r1
    9284:	f1 1c       	adc	r15, r1
    9286:	c3 94       	inc	r12
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9288:	e6 14       	cp	r14, r6
    928a:	50 f4       	brcc	.+20     	; 0x92a0 <ProcessSprites+0x122>
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    928c:	80 e0       	ldi	r24, 0x00	; 0
    928e:	9e 2d       	mov	r25, r14
    9290:	9c 01       	movw	r18, r24
    9292:	3b 83       	std	Y+3, r19	; 0x03
    9294:	2a 83       	std	Y+2, r18	; 0x02
    9296:	d9 80       	ldd	r13, Y+1	; 0x01

							//process X-Y wrapping
                            #if SCROLLING == 0
							    if(wy>=(VRAM_TILES_V*2)){
								    wy-=(VRAM_TILES_V*2);
							    }else if(wy>=VRAM_TILES_V){
    9298:	14 ee       	ldi	r17, 0xE4	; 228
    929a:	31 2e       	mov	r3, r17
    929c:	3c 0c       	add	r3, r12
    929e:	a9 cf       	rjmp	.-174    	; 0x91f2 <ProcessSprites+0x74>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    92a0:	73 94       	inc	r7
    92a2:	e4 e0       	ldi	r30, 0x04	; 4
    92a4:	f0 e0       	ldi	r31, 0x00	; 0
    92a6:	8e 0e       	add	r8, r30
    92a8:	9f 1e       	adc	r9, r31
    92aa:	fe e0       	ldi	r31, 0x0E	; 14
    92ac:	7f 16       	cp	r7, r31
    92ae:	09 f0       	breq	.+2      	; 0x92b2 <ProcessSprites+0x134>
    92b0:	78 cf       	rjmp	.-272    	; 0x91a2 <ProcessSprites+0x24>
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    92b2:	30 91 06 0a 	lds	r19, 0x0A06
    92b6:	20 e0       	ldi	r18, 0x00	; 0
    92b8:	10 c0       	rjmp	.+32     	; 0x92da <ProcessSprites+0x15c>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    92ba:	82 2f       	mov	r24, r18
    92bc:	90 e0       	ldi	r25, 0x00	; 0
    92be:	fc 01       	movw	r30, r24
    92c0:	ee 0f       	add	r30, r30
    92c2:	ff 1f       	adc	r31, r31
    92c4:	e8 0f       	add	r30, r24
    92c6:	f9 1f       	adc	r31, r25
    92c8:	e0 50       	subi	r30, 0x00	; 0
    92ca:	f7 4f       	sbci	r31, 0xF7	; 247
    92cc:	a0 81       	ld	r26, Z
    92ce:	b1 81       	ldd	r27, Z+1	; 0x01
    92d0:	a0 5c       	subi	r26, 0xC0	; 192
    92d2:	be 4f       	sbci	r27, 0xFE	; 254
    92d4:	82 81       	ldd	r24, Z+2	; 0x02
    92d6:	8c 93       	st	X, r24
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    92d8:	2f 5f       	subi	r18, 0xFF	; 255
    92da:	23 17       	cp	r18, r19
    92dc:	70 f3       	brcs	.-36     	; 0x92ba <ProcessSprites+0x13c>


		//restore BG tiles
		RestoreBackground();

	}
    92de:	23 96       	adiw	r28, 0x03	; 3
    92e0:	e2 e1       	ldi	r30, 0x12	; 18
    92e2:	0c 94 32 5a 	jmp	0xb464	; 0xb464 <__epilogue_restores__>

000092e6 <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    92e6:	0e 94 53 48 	call	0x90a6	; 0x90a6 <ProcessFading>
		ProcessSprites();
    92ea:	0e 94 bf 48 	call	0x917e	; 0x917e <ProcessSprites>

	}
    92ee:	08 95       	ret

000092f0 <SaveBG>:
u8 menulastx, menulasty, menulastwidth, menulastheight;

void SaveBG(){//store tile values to be covered by menu and restored later
    92f0:	20 e0       	ldi	r18, 0x00	; 0
    92f2:	30 e0       	ldi	r19, 0x00	; 0
	for(u8 x=0;x<MAXWIDTH;x++)
    92f4:	66 e1       	ldi	r22, 0x16	; 22
    92f6:	70 e0       	ldi	r23, 0x00	; 0
    92f8:	0b c0       	rjmp	.+22     	; 0x9310 <SaveBG+0x20>
	for(u8 y=0;y<MAXHEIGHT;y++)
		searchgrid[x][y] = vram[((y+7)*30)+x+1];//use search grid memory, low on ram during gui
    92fa:	8c 91       	ld	r24, X
    92fc:	81 93       	st	Z+, r24
    92fe:	5e 96       	adiw	r26, 0x1e	; 30
u8 menulastx, menulasty, menulastwidth, menulastheight;

void SaveBG(){//store tile values to be covered by menu and restored later
	for(u8 x=0;x<MAXWIDTH;x++)
	for(u8 y=0;y<MAXHEIGHT;y++)
    9300:	a4 17       	cp	r26, r20
    9302:	b5 07       	cpc	r27, r21
    9304:	d1 f7       	brne	.-12     	; 0x92fa <SaveBG+0xa>
    9306:	2f 5f       	subi	r18, 0xFF	; 255
    9308:	3f 4f       	sbci	r19, 0xFF	; 255
u8 menulastx, menulasty, menulastwidth, menulastheight;

void SaveBG(){//store tile values to be covered by menu and restored later
	for(u8 x=0;x<MAXWIDTH;x++)
    930a:	2c 31       	cpi	r18, 0x1C	; 28
    930c:	31 05       	cpc	r19, r1
    930e:	81 f0       	breq	.+32     	; 0x9330 <SaveBG+0x40>
    9310:	d9 01       	movw	r26, r18
    9312:	ad 5e       	subi	r26, 0xED	; 237
    9314:	bd 4f       	sbci	r27, 0xFD	; 253
    9316:	26 9f       	mul	r18, r22
    9318:	f0 01       	movw	r30, r0
    931a:	27 9f       	mul	r18, r23
    931c:	f0 0d       	add	r31, r0
    931e:	36 9f       	mul	r19, r22
    9320:	f0 0d       	add	r31, r0
    9322:	11 24       	eor	r1, r1
    9324:	e5 5f       	subi	r30, 0xF5	; 245
    9326:	f5 4f       	sbci	r31, 0xF5	; 245
	for(u8 y=0;y<MAXHEIGHT;y++)
    9328:	a9 01       	movw	r20, r18
    932a:	45 59       	subi	r20, 0x95	; 149
    932c:	5b 4f       	sbci	r21, 0xFB	; 251
    932e:	e5 cf       	rjmp	.-54     	; 0x92fa <SaveBG+0xa>
    9330:	08 95       	ret

00009332 <RestoreBG>:
		searchgrid[x][y] = vram[((y+7)*30)+x+1];//use search grid memory, low on ram during gui
}

void RestoreBG(){
    9332:	4f e1       	ldi	r20, 0x1F	; 31
    9334:	5a e0       	ldi	r21, 0x0A	; 10
    9336:	20 e0       	ldi	r18, 0x00	; 0
    9338:	30 e0       	ldi	r19, 0x00	; 0
	for(u8 x=0;x<MAXWIDTH;x++)
    933a:	66 e1       	ldi	r22, 0x16	; 22
    933c:	70 e0       	ldi	r23, 0x00	; 0
    933e:	0e c0       	rjmp	.+28     	; 0x935c <RestoreBG+0x2a>
	for(u8 y=0;y<MAXHEIGHT;y++)
		vram[((y+7)*30)+x+1] = searchgrid[x][y];
    9340:	81 91       	ld	r24, Z+
    9342:	8c 93       	st	X, r24
    9344:	5e 96       	adiw	r26, 0x1e	; 30
		searchgrid[x][y] = vram[((y+7)*30)+x+1];//use search grid memory, low on ram during gui
}

void RestoreBG(){
	for(u8 x=0;x<MAXWIDTH;x++)
	for(u8 y=0;y<MAXHEIGHT;y++)
    9346:	e4 17       	cp	r30, r20
    9348:	f5 07       	cpc	r31, r21
    934a:	d1 f7       	brne	.-12     	; 0x9340 <RestoreBG+0xe>
    934c:	2f 5f       	subi	r18, 0xFF	; 255
    934e:	3f 4f       	sbci	r19, 0xFF	; 255
    9350:	af 01       	movw	r20, r30
    9352:	4a 5e       	subi	r20, 0xEA	; 234
    9354:	5f 4f       	sbci	r21, 0xFF	; 255
	for(u8 y=0;y<MAXHEIGHT;y++)
		searchgrid[x][y] = vram[((y+7)*30)+x+1];//use search grid memory, low on ram during gui
}

void RestoreBG(){
	for(u8 x=0;x<MAXWIDTH;x++)
    9356:	2c 31       	cpi	r18, 0x1C	; 28
    9358:	31 05       	cpc	r19, r1
    935a:	69 f0       	breq	.+26     	; 0x9376 <RestoreBG+0x44>
    935c:	26 9f       	mul	r18, r22
    935e:	f0 01       	movw	r30, r0
    9360:	27 9f       	mul	r18, r23
    9362:	f0 0d       	add	r31, r0
    9364:	36 9f       	mul	r19, r22
    9366:	f0 0d       	add	r31, r0
    9368:	11 24       	eor	r1, r1
    936a:	e5 5f       	subi	r30, 0xF5	; 245
    936c:	f5 4f       	sbci	r31, 0xF5	; 245
    936e:	d9 01       	movw	r26, r18
    9370:	ad 5e       	subi	r26, 0xED	; 237
    9372:	bd 4f       	sbci	r27, 0xFD	; 253
    9374:	e5 cf       	rjmp	.-54     	; 0x9340 <RestoreBG+0xe>
    9376:	08 95       	ret

00009378 <UpdateTimer>:
}



void UpdateTimer(){
	if(!(flags & STARTED) || flags & LOST)
    9378:	80 91 d3 0d 	lds	r24, 0x0DD3
    937c:	82 ff       	sbrs	r24, 2
    937e:	1d c0       	rjmp	.+58     	; 0x93ba <UpdateTimer+0x42>
    9380:	80 fd       	sbrc	r24, 0
    9382:	1b c0       	rjmp	.+54     	; 0x93ba <UpdateTimer+0x42>
		return;

	if(++fracs > 60){
    9384:	80 91 a7 0c 	lds	r24, 0x0CA7
    9388:	8f 5f       	subi	r24, 0xFF	; 255
    938a:	80 93 a7 0c 	sts	0x0CA7, r24
    938e:	8d 33       	cpi	r24, 0x3D	; 61
    9390:	a0 f0       	brcs	.+40     	; 0x93ba <UpdateTimer+0x42>
		fracs = 0;
    9392:	10 92 a7 0c 	sts	0x0CA7, r1
		if(++seconds > 999)
    9396:	80 91 b6 0c 	lds	r24, 0x0CB6
    939a:	90 91 b7 0c 	lds	r25, 0x0CB7
    939e:	01 96       	adiw	r24, 0x01	; 1
    93a0:	90 93 b7 0c 	sts	0x0CB7, r25
    93a4:	80 93 b6 0c 	sts	0x0CB6, r24
    93a8:	88 5e       	subi	r24, 0xE8	; 232
    93aa:	93 40       	sbci	r25, 0x03	; 3
    93ac:	34 f0       	brlt	.+12     	; 0x93ba <UpdateTimer+0x42>
			seconds = 999;
    93ae:	87 ee       	ldi	r24, 0xE7	; 231
    93b0:	93 e0       	ldi	r25, 0x03	; 3
    93b2:	90 93 b7 0c 	sts	0x0CB7, r25
    93b6:	80 93 b6 0c 	sts	0x0CB6, r24
    93ba:	08 95       	ret

000093bc <prand>:
	}
}

uint16_t prand(){
	static uint16_t prng_state = 0xACE1u;
	uint16_t bit	= (uint16_t)(((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1);
    93bc:	80 91 1f 01 	lds	r24, 0x011F
    93c0:	90 91 20 01 	lds	r25, 0x0120
	prng_state =	(uint16_t)((prng_state >> 1) | (bit << 15));
    93c4:	9c 01       	movw	r18, r24
    93c6:	36 95       	lsr	r19
    93c8:	27 95       	ror	r18
    93ca:	36 95       	lsr	r19
    93cc:	27 95       	ror	r18
    93ce:	ac 01       	movw	r20, r24
    93d0:	73 e0       	ldi	r23, 0x03	; 3
    93d2:	56 95       	lsr	r21
    93d4:	47 95       	ror	r20
    93d6:	7a 95       	dec	r23
    93d8:	e1 f7       	brne	.-8      	; 0x93d2 <prand+0x16>
    93da:	24 27       	eor	r18, r20
    93dc:	35 27       	eor	r19, r21
    93de:	28 27       	eor	r18, r24
    93e0:	39 27       	eor	r19, r25
    93e2:	ac 01       	movw	r20, r24
    93e4:	65 e0       	ldi	r22, 0x05	; 5
    93e6:	56 95       	lsr	r21
    93e8:	47 95       	ror	r20
    93ea:	6a 95       	dec	r22
    93ec:	e1 f7       	brne	.-8      	; 0x93e6 <prand+0x2a>
    93ee:	24 27       	eor	r18, r20
    93f0:	35 27       	eor	r19, r21
    93f2:	33 27       	eor	r19, r19
    93f4:	26 95       	lsr	r18
    93f6:	37 95       	ror	r19
    93f8:	22 27       	eor	r18, r18
    93fa:	96 95       	lsr	r25
    93fc:	87 95       	ror	r24
    93fe:	28 2b       	or	r18, r24
    9400:	39 2b       	or	r19, r25
    9402:	30 93 20 01 	sts	0x0120, r19
    9406:	20 93 1f 01 	sts	0x011F, r18
	return prng_state;
}
    940a:	c9 01       	movw	r24, r18
    940c:	08 95       	ret

0000940e <SetGrid>:

void SetGrid(uint8_t x, uint8_t y, uint8_t g){
	uint8_t t;

	if(x%2 || x == 1){
    940e:	80 fd       	sbrc	r24, 0
    9410:	02 c0       	rjmp	.+4      	; 0x9416 <SetGrid+0x8>
    9412:	81 30       	cpi	r24, 0x01	; 1
    9414:	99 f4       	brne	.+38     	; 0x943c <SetGrid+0x2e>
		t = (field[x/2][y] & 0b11110000);
    9416:	86 95       	lsr	r24
    9418:	28 2f       	mov	r18, r24
    941a:	30 e0       	ldi	r19, 0x00	; 0
		field[x/2][y] = (t|g);
    941c:	84 e1       	ldi	r24, 0x14	; 20
    941e:	90 e0       	ldi	r25, 0x00	; 0
    9420:	28 9f       	mul	r18, r24
    9422:	f0 01       	movw	r30, r0
    9424:	29 9f       	mul	r18, r25
    9426:	f0 0d       	add	r31, r0
    9428:	38 9f       	mul	r19, r24
    942a:	f0 0d       	add	r31, r0
    942c:	11 24       	eor	r1, r1
    942e:	e6 0f       	add	r30, r22
    9430:	f1 1d       	adc	r31, r1
    9432:	e5 54       	subi	r30, 0x45	; 69
    9434:	f3 4f       	sbci	r31, 0xF3	; 243
    9436:	80 81       	ld	r24, Z
    9438:	80 7f       	andi	r24, 0xF0	; 240
    943a:	14 c0       	rjmp	.+40     	; 0x9464 <SetGrid+0x56>
	}
	else{
		t = (field[x/2][y] & 0b00001111);
    943c:	86 95       	lsr	r24
    943e:	28 2f       	mov	r18, r24
    9440:	30 e0       	ldi	r19, 0x00	; 0
		g <<= 4;
		field[x/2][y] = (t|g);
    9442:	84 e1       	ldi	r24, 0x14	; 20
    9444:	90 e0       	ldi	r25, 0x00	; 0
    9446:	28 9f       	mul	r18, r24
    9448:	f0 01       	movw	r30, r0
    944a:	29 9f       	mul	r18, r25
    944c:	f0 0d       	add	r31, r0
    944e:	38 9f       	mul	r19, r24
    9450:	f0 0d       	add	r31, r0
    9452:	11 24       	eor	r1, r1
    9454:	e6 0f       	add	r30, r22
    9456:	f1 1d       	adc	r31, r1
    9458:	e5 54       	subi	r30, 0x45	; 69
    945a:	f3 4f       	sbci	r31, 0xF3	; 243
    945c:	80 81       	ld	r24, Z
    945e:	8f 70       	andi	r24, 0x0F	; 15
    9460:	42 95       	swap	r20
    9462:	40 7f       	andi	r20, 0xF0	; 240
    9464:	84 2b       	or	r24, r20
    9466:	80 83       	st	Z, r24
    9468:	08 95       	ret

0000946a <GetGrid>:
	}
}

uint8_t GetGrid(uint8_t x, uint8_t y){

	if(x%2 || x == 1)
    946a:	80 fd       	sbrc	r24, 0
    946c:	02 c0       	rjmp	.+4      	; 0x9472 <GetGrid+0x8>
    946e:	81 30       	cpi	r24, 0x01	; 1
    9470:	99 f4       	brne	.+38     	; 0x9498 <GetGrid+0x2e>
		return (field[x/2][y] & 0b00001111);
    9472:	86 95       	lsr	r24
    9474:	28 2f       	mov	r18, r24
    9476:	30 e0       	ldi	r19, 0x00	; 0
    9478:	84 e1       	ldi	r24, 0x14	; 20
    947a:	90 e0       	ldi	r25, 0x00	; 0
    947c:	28 9f       	mul	r18, r24
    947e:	f0 01       	movw	r30, r0
    9480:	29 9f       	mul	r18, r25
    9482:	f0 0d       	add	r31, r0
    9484:	38 9f       	mul	r19, r24
    9486:	f0 0d       	add	r31, r0
    9488:	11 24       	eor	r1, r1
    948a:	e6 0f       	add	r30, r22
    948c:	f1 1d       	adc	r31, r1
    948e:	e5 54       	subi	r30, 0x45	; 69
    9490:	f3 4f       	sbci	r31, 0xF3	; 243
    9492:	80 81       	ld	r24, Z
    9494:	8f 70       	andi	r24, 0x0F	; 15
    9496:	08 95       	ret
	else
		return (field[x/2][y] & 0b11110000)>>4;
    9498:	86 95       	lsr	r24
    949a:	28 2f       	mov	r18, r24
    949c:	30 e0       	ldi	r19, 0x00	; 0
    949e:	84 e1       	ldi	r24, 0x14	; 20
    94a0:	90 e0       	ldi	r25, 0x00	; 0
    94a2:	28 9f       	mul	r18, r24
    94a4:	f0 01       	movw	r30, r0
    94a6:	29 9f       	mul	r18, r25
    94a8:	f0 0d       	add	r31, r0
    94aa:	38 9f       	mul	r19, r24
    94ac:	f0 0d       	add	r31, r0
    94ae:	11 24       	eor	r1, r1
    94b0:	e6 0f       	add	r30, r22
    94b2:	f1 1d       	adc	r31, r1
    94b4:	e5 54       	subi	r30, 0x45	; 69
    94b6:	f3 4f       	sbci	r31, 0xF3	; 243
    94b8:	80 81       	ld	r24, Z
    94ba:	82 95       	swap	r24
    94bc:	8f 70       	andi	r24, 0x0F	; 15
}
    94be:	08 95       	ret

000094c0 <GetVidGrid>:

uint8_t GetVidGrid(uint8_t x, uint8_t y){
    94c0:	98 2f       	mov	r25, r24
	static uint8_t t;
	if(!(flags & BIGFIELD)){
    94c2:	80 91 d3 0d 	lds	r24, 0x0DD3
    94c6:	30 91 a8 0c 	lds	r19, 0x0CA8
    94ca:	20 91 b2 0c 	lds	r18, 0x0CB2
    94ce:	86 fd       	sbrc	r24, 6
    94d0:	1e c0       	rjmp	.+60     	; 0x950e <GetVidGrid+0x4e>
		x *= 2;
    94d2:	99 0f       	add	r25, r25
		y *= 2;
    94d4:	66 0f       	add	r22, r22
		x += 2*xoff;
    94d6:	33 0f       	add	r19, r19
    94d8:	3f 5f       	subi	r19, 0xFF	; 255
		y += 2*yoff;
    94da:	22 0f       	add	r18, r18
    94dc:	29 5f       	subi	r18, 0xF9	; 249
		x += 1;//adjust for hud offset
		y += 7;
				
		t = vram[(y*30)+x]-RAM_TILES_COUNT;
		t /= 4;
    94de:	39 0f       	add	r19, r25
    94e0:	82 2f       	mov	r24, r18
    94e2:	86 0f       	add	r24, r22
    94e4:	90 e0       	ldi	r25, 0x00	; 0
    94e6:	fc 01       	movw	r30, r24
    94e8:	45 e0       	ldi	r20, 0x05	; 5
    94ea:	ee 0f       	add	r30, r30
    94ec:	ff 1f       	adc	r31, r31
    94ee:	4a 95       	dec	r20
    94f0:	e1 f7       	brne	.-8      	; 0x94ea <GetVidGrid+0x2a>
    94f2:	88 0f       	add	r24, r24
    94f4:	99 1f       	adc	r25, r25
    94f6:	e8 1b       	sub	r30, r24
    94f8:	f9 0b       	sbc	r31, r25
    94fa:	e3 0f       	add	r30, r19
    94fc:	f1 1d       	adc	r31, r1
    94fe:	e0 5c       	subi	r30, 0xC0	; 192
    9500:	fe 4f       	sbci	r31, 0xFE	; 254
    9502:	80 81       	ld	r24, Z
    9504:	81 51       	subi	r24, 0x11	; 17
    9506:	86 95       	lsr	r24
    9508:	86 95       	lsr	r24
		t -= 7;
    950a:	87 50       	subi	r24, 0x07	; 7
    950c:	16 c0       	rjmp	.+44     	; 0x953a <GetVidGrid+0x7a>
	}
	else{
		x += xoff;
    950e:	3f 5f       	subi	r19, 0xFF	; 255
		y += yoff;
    9510:	29 5f       	subi	r18, 0xF9	; 249
		x += 1;//adjust for hud offset
		y += 7;
		t = vram[(y*30)+x]-RAM_TILES_COUNT;
		t -= 60;//...
    9512:	39 0f       	add	r19, r25
    9514:	82 2f       	mov	r24, r18
    9516:	86 0f       	add	r24, r22
    9518:	90 e0       	ldi	r25, 0x00	; 0
    951a:	fc 01       	movw	r30, r24
    951c:	b5 e0       	ldi	r27, 0x05	; 5
    951e:	ee 0f       	add	r30, r30
    9520:	ff 1f       	adc	r31, r31
    9522:	ba 95       	dec	r27
    9524:	e1 f7       	brne	.-8      	; 0x951e <GetVidGrid+0x5e>
    9526:	88 0f       	add	r24, r24
    9528:	99 1f       	adc	r25, r25
    952a:	e8 1b       	sub	r30, r24
    952c:	f9 0b       	sbc	r31, r25
    952e:	e3 0f       	add	r30, r19
    9530:	f1 1d       	adc	r31, r1
    9532:	e0 5c       	subi	r30, 0xC0	; 192
    9534:	fe 4f       	sbci	r31, 0xFE	; 254
    9536:	80 81       	ld	r24, Z
		t -= 30;
    9538:	8b 56       	subi	r24, 0x6B	; 107
    953a:	80 93 85 09 	sts	0x0985, r24
	}
		

	return t;
}
    953e:	80 91 85 09 	lds	r24, 0x0985
    9542:	08 95       	ret

00009544 <DrawFace>:
		 DrawNumber(2,2,10);
	}
 
}

void DrawFace(uint8_t x, uint8_t y, uint8_t override){
    9544:	0f 93       	push	r16
    9546:	1f 93       	push	r17
    9548:	cf 93       	push	r28
    954a:	df 93       	push	r29
    954c:	18 2f       	mov	r17, r24
    954e:	06 2f       	mov	r16, r22
	
	uint8_t face=0;
	
	if(override != 255)
    9550:	4f 3f       	cpi	r20, 0xFF	; 255
    9552:	61 f4       	brne	.+24     	; 0x956c <DrawFace+0x28>
		face = override;
	else if(flags & LOST)
    9554:	80 91 d3 0d 	lds	r24, 0x0DD3
    9558:	80 ff       	sbrs	r24, 0
    955a:	02 c0       	rjmp	.+4      	; 0x9560 <DrawFace+0x1c>
    955c:	42 e0       	ldi	r20, 0x02	; 2
    955e:	06 c0       	rjmp	.+12     	; 0x956c <DrawFace+0x28>
		face = 2;
	else if(flags & WON)
    9560:	81 ff       	sbrs	r24, 1
    9562:	02 c0       	rjmp	.+4      	; 0x9568 <DrawFace+0x24>
    9564:	44 e0       	ldi	r20, 0x04	; 4
    9566:	02 c0       	rjmp	.+4      	; 0x956c <DrawFace+0x28>
    9568:	40 91 a4 0c 	lds	r20, 0x0CA4
    956c:	89 e0       	ldi	r24, 0x09	; 9
    956e:	48 9f       	mul	r20, r24
    9570:	a0 01       	movw	r20, r0
    9572:	11 24       	eor	r1, r1
    9574:	48 54       	subi	r20, 0x48	; 72
    9576:	52 4f       	sbci	r21, 0xF2	; 242
    9578:	6c ea       	ldi	r22, 0xAC	; 172
    957a:	74 e0       	ldi	r23, 0x04	; 4
    957c:	a0 e0       	ldi	r26, 0x00	; 0
    957e:	b0 e0       	ldi	r27, 0x00	; 0
    9580:	17 c0       	rjmp	.+46     	; 0x95b0 <DrawFace+0x6c>
	else if(mlb)
		face = 1;
	
	for(uint8_t xo=0;xo<3;xo++)
	for(uint8_t yo=0;yo<3;yo++){
		sprites[xo+(yo*3)].x = (xo*8)+x;
    9582:	18 83       	st	Y, r17
		sprites[xo+(yo*3)].y = (yo*8)+y;
    9584:	99 83       	std	Y+1, r25	; 0x01
		sprites[xo+(yo*3)].tileIndex = FACESTART+pgm_read_byte(&FaceMaps[face*9+((yo*3)+xo)])-1;
    9586:	f9 01       	movw	r30, r18
    9588:	84 91       	lpm	r24, Z+
    958a:	81 50       	subi	r24, 0x01	; 1
    958c:	8a 83       	std	Y+2, r24	; 0x02
    958e:	2c 96       	adiw	r28, 0x0c	; 12
    9590:	98 5f       	subi	r25, 0xF8	; 248
    9592:	2d 5f       	subi	r18, 0xFD	; 253
    9594:	3f 4f       	sbci	r19, 0xFF	; 255
		face = 4;
	else if(mlb)
		face = 1;
	
	for(uint8_t xo=0;xo<3;xo++)
	for(uint8_t yo=0;yo<3;yo++){
    9596:	c6 17       	cp	r28, r22
    9598:	d7 07       	cpc	r29, r23
    959a:	99 f7       	brne	.-26     	; 0x9582 <DrawFace+0x3e>
    959c:	11 96       	adiw	r26, 0x01	; 1
    959e:	4f 5f       	subi	r20, 0xFF	; 255
    95a0:	5f 4f       	sbci	r21, 0xFF	; 255
    95a2:	18 5f       	subi	r17, 0xF8	; 248
    95a4:	be 01       	movw	r22, r28
    95a6:	6c 5f       	subi	r22, 0xFC	; 252
    95a8:	7f 4f       	sbci	r23, 0xFF	; 255
	else if(flags & WON)
		face = 4;
	else if(mlb)
		face = 1;
	
	for(uint8_t xo=0;xo<3;xo++)
    95aa:	a3 30       	cpi	r26, 0x03	; 3
    95ac:	b1 05       	cpc	r27, r1
    95ae:	51 f0       	breq	.+20     	; 0x95c4 <DrawFace+0x80>
    95b0:	ed 01       	movw	r28, r26
    95b2:	cc 0f       	add	r28, r28
    95b4:	dd 1f       	adc	r29, r29
    95b6:	cc 0f       	add	r28, r28
    95b8:	dd 1f       	adc	r29, r29
    95ba:	c8 57       	subi	r28, 0x78	; 120
    95bc:	db 4f       	sbci	r29, 0xFB	; 251
    95be:	90 2f       	mov	r25, r16
    95c0:	9a 01       	movw	r18, r20
    95c2:	df cf       	rjmp	.-66     	; 0x9582 <DrawFace+0x3e>
		sprites[xo+(yo*3)].x = (xo*8)+x;
		sprites[xo+(yo*3)].y = (yo*8)+y;
		sprites[xo+(yo*3)].tileIndex = FACESTART+pgm_read_byte(&FaceMaps[face*9+((yo*3)+xo)])-1;
	}
		
}
    95c4:	df 91       	pop	r29
    95c6:	cf 91       	pop	r28
    95c8:	1f 91       	pop	r17
    95ca:	0f 91       	pop	r16
    95cc:	08 95       	ret

000095ce <CheckVictory>:
	sprites[9].x = mx;
	sprites[9].y = my;
	sprites[9].tileIndex = 28;
}

bool CheckVictory(){
    95ce:	ff 92       	push	r15
    95d0:	0f 93       	push	r16
    95d2:	1f 93       	push	r17
    95d4:	00 e0       	ldi	r16, 0x00	; 0
    95d6:	1b c0       	rjmp	.+54     	; 0x960e <CheckVictory+0x40>
	uint8_t t,t2;

	for(uint8_t x=0;x<fwidth;x++)
	for(uint8_t y=0;y<fheight;y++){
		t = GetGrid(x,y);
    95d8:	80 2f       	mov	r24, r16
    95da:	61 2f       	mov	r22, r17
    95dc:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    95e0:	f8 2e       	mov	r15, r24
		if((t2 = GetVidGrid(x,y)) != FLAG && t == MINE)//unmarked mine
    95e2:	80 2f       	mov	r24, r16
    95e4:	61 2f       	mov	r22, r17
    95e6:	0e 94 60 4a 	call	0x94c0	; 0x94c0 <GetVidGrid>
    95ea:	8d 30       	cpi	r24, 0x0D	; 13
    95ec:	21 f0       	breq	.+8      	; 0x95f6 <CheckVictory+0x28>
    95ee:	9a e0       	ldi	r25, 0x0A	; 10
    95f0:	f9 16       	cp	r15, r25
    95f2:	29 f4       	brne	.+10     	; 0x95fe <CheckVictory+0x30>
    95f4:	14 c0       	rjmp	.+40     	; 0x961e <CheckVictory+0x50>
			return false;
		else if(t2 == FLAG && t != MINE)//falsely marked mine
    95f6:	8a e0       	ldi	r24, 0x0A	; 10
    95f8:	f8 16       	cp	r15, r24
    95fa:	19 f0       	breq	.+6      	; 0x9602 <CheckVictory+0x34>
    95fc:	10 c0       	rjmp	.+32     	; 0x961e <CheckVictory+0x50>
		 return false;
		else if(t2 == 0)//unclicked spot
    95fe:	88 23       	and	r24, r24
    9600:	71 f0       	breq	.+28     	; 0x961e <CheckVictory+0x50>

bool CheckVictory(){
	uint8_t t,t2;

	for(uint8_t x=0;x<fwidth;x++)
	for(uint8_t y=0;y<fheight;y++){
    9602:	1f 5f       	subi	r17, 0xFF	; 255
    9604:	80 91 b0 0c 	lds	r24, 0x0CB0
    9608:	18 17       	cp	r17, r24
    960a:	30 f3       	brcs	.-52     	; 0x95d8 <CheckVictory+0xa>
}

bool CheckVictory(){
	uint8_t t,t2;

	for(uint8_t x=0;x<fwidth;x++)
    960c:	0f 5f       	subi	r16, 0xFF	; 255
    960e:	80 91 ba 0c 	lds	r24, 0x0CBA
    9612:	08 17       	cp	r16, r24
    9614:	10 f0       	brcs	.+4      	; 0x961a <CheckVictory+0x4c>
    9616:	81 e0       	ldi	r24, 0x01	; 1
    9618:	03 c0       	rjmp	.+6      	; 0x9620 <CheckVictory+0x52>
    961a:	10 e0       	ldi	r17, 0x00	; 0
    961c:	f3 cf       	rjmp	.-26     	; 0x9604 <CheckVictory+0x36>
    961e:	80 e0       	ldi	r24, 0x00	; 0
		else if(t2 == 0)//unclicked spot
			return false;
	}

	return true;
}
    9620:	1f 91       	pop	r17
    9622:	0f 91       	pop	r16
    9624:	ff 90       	pop	r15
    9626:	08 95       	ret

00009628 <hunt>:

bool hunt(char val){
    9628:	b8 2f       	mov	r27, r24
	if(fx < 1){fx = 1;}
    962a:	20 91 d4 0d 	lds	r18, 0x0DD4
    962e:	12 16       	cp	r1, r18
    9630:	24 f0       	brlt	.+8      	; 0x963a <hunt+0x12>
    9632:	81 e0       	ldi	r24, 0x01	; 1
    9634:	80 93 d4 0d 	sts	0x0DD4, r24
    9638:	0c c0       	rjmp	.+24     	; 0x9652 <hunt+0x2a>
	else if(fx > fwidth){fx = fwidth;}
    963a:	40 91 ba 0c 	lds	r20, 0x0CBA
    963e:	33 27       	eor	r19, r19
    9640:	27 fd       	sbrc	r18, 7
    9642:	30 95       	com	r19
    9644:	84 2f       	mov	r24, r20
    9646:	90 e0       	ldi	r25, 0x00	; 0
    9648:	82 17       	cp	r24, r18
    964a:	93 07       	cpc	r25, r19
    964c:	14 f4       	brge	.+4      	; 0x9652 <hunt+0x2a>
    964e:	40 93 d4 0d 	sts	0x0DD4, r20
	if(fy < 1){fy = 1;}
    9652:	20 91 a6 0c 	lds	r18, 0x0CA6
    9656:	12 16       	cp	r1, r18
    9658:	24 f0       	brlt	.+8      	; 0x9662 <hunt+0x3a>
    965a:	81 e0       	ldi	r24, 0x01	; 1
    965c:	80 93 a6 0c 	sts	0x0CA6, r24
    9660:	0c c0       	rjmp	.+24     	; 0x967a <hunt+0x52>
	else if(fy > fheight){fy = fheight;}
    9662:	40 91 b0 0c 	lds	r20, 0x0CB0
    9666:	33 27       	eor	r19, r19
    9668:	27 fd       	sbrc	r18, 7
    966a:	30 95       	com	r19
    966c:	84 2f       	mov	r24, r20
    966e:	90 e0       	ldi	r25, 0x00	; 0
    9670:	82 17       	cp	r24, r18
    9672:	93 07       	cpc	r25, r19
    9674:	14 f4       	brge	.+4      	; 0x967a <hunt+0x52>
    9676:	40 93 a6 0c 	sts	0x0CA6, r20

	if(searchgrid[(uint8_t)(fx-1)][(uint8_t)(fy)] == val){fx--;return true;}
    967a:	60 91 d4 0d 	lds	r22, 0x0DD4
    967e:	a0 91 a6 0c 	lds	r26, 0x0CA6
    9682:	2a 2f       	mov	r18, r26
    9684:	30 e0       	ldi	r19, 0x00	; 0
    9686:	76 2f       	mov	r23, r22
    9688:	71 50       	subi	r23, 0x01	; 1
    968a:	87 2f       	mov	r24, r23
    968c:	90 e0       	ldi	r25, 0x00	; 0
    968e:	46 e1       	ldi	r20, 0x16	; 22
    9690:	50 e0       	ldi	r21, 0x00	; 0
    9692:	84 9f       	mul	r24, r20
    9694:	f0 01       	movw	r30, r0
    9696:	85 9f       	mul	r24, r21
    9698:	f0 0d       	add	r31, r0
    969a:	94 9f       	mul	r25, r20
    969c:	f0 0d       	add	r31, r0
    969e:	11 24       	eor	r1, r1
    96a0:	e2 0f       	add	r30, r18
    96a2:	f3 1f       	adc	r31, r19
    96a4:	e5 5f       	subi	r30, 0xF5	; 245
    96a6:	f5 4f       	sbci	r31, 0xF5	; 245
    96a8:	80 81       	ld	r24, Z
    96aa:	8b 17       	cp	r24, r27
    96ac:	91 f0       	breq	.+36     	; 0x96d2 <hunt+0xaa>
	if(searchgrid[(uint8_t)(fx+1)][(uint8_t)(fy)] == val){fx++;return true;}
    96ae:	76 2f       	mov	r23, r22
    96b0:	7f 5f       	subi	r23, 0xFF	; 255
    96b2:	87 2f       	mov	r24, r23
    96b4:	90 e0       	ldi	r25, 0x00	; 0
    96b6:	84 9f       	mul	r24, r20
    96b8:	f0 01       	movw	r30, r0
    96ba:	85 9f       	mul	r24, r21
    96bc:	f0 0d       	add	r31, r0
    96be:	94 9f       	mul	r25, r20
    96c0:	f0 0d       	add	r31, r0
    96c2:	11 24       	eor	r1, r1
    96c4:	e2 0f       	add	r30, r18
    96c6:	f3 1f       	adc	r31, r19
    96c8:	e5 5f       	subi	r30, 0xF5	; 245
    96ca:	f5 4f       	sbci	r31, 0xF5	; 245
    96cc:	80 81       	ld	r24, Z
    96ce:	8b 17       	cp	r24, r27
    96d0:	19 f4       	brne	.+6      	; 0x96d8 <hunt+0xb0>
    96d2:	70 93 d4 0d 	sts	0x0DD4, r23
    96d6:	15 c0       	rjmp	.+42     	; 0x9702 <hunt+0xda>
	if(searchgrid[(uint8_t)(fx)][(uint8_t)(fy-1)] == val){fy--;return true;}
    96d8:	86 2f       	mov	r24, r22
    96da:	90 e0       	ldi	r25, 0x00	; 0
    96dc:	6a 2f       	mov	r22, r26
    96de:	61 50       	subi	r22, 0x01	; 1
    96e0:	84 9f       	mul	r24, r20
    96e2:	90 01       	movw	r18, r0
    96e4:	85 9f       	mul	r24, r21
    96e6:	30 0d       	add	r19, r0
    96e8:	94 9f       	mul	r25, r20
    96ea:	30 0d       	add	r19, r0
    96ec:	11 24       	eor	r1, r1
    96ee:	f9 01       	movw	r30, r18
    96f0:	e6 0f       	add	r30, r22
    96f2:	f1 1d       	adc	r31, r1
    96f4:	e5 5f       	subi	r30, 0xF5	; 245
    96f6:	f5 4f       	sbci	r31, 0xF5	; 245
    96f8:	80 81       	ld	r24, Z
    96fa:	8b 17       	cp	r24, r27
    96fc:	21 f4       	brne	.+8      	; 0x9706 <hunt+0xde>
    96fe:	60 93 a6 0c 	sts	0x0CA6, r22
    9702:	81 e0       	ldi	r24, 0x01	; 1
    9704:	08 95       	ret
	if(searchgrid[(uint8_t)(fx)][(uint8_t)(fy+1)] == val){fy++;return true;}
    9706:	9a 2f       	mov	r25, r26
    9708:	9f 5f       	subi	r25, 0xFF	; 255
    970a:	f9 01       	movw	r30, r18
    970c:	e9 0f       	add	r30, r25
    970e:	f1 1d       	adc	r31, r1
    9710:	e5 5f       	subi	r30, 0xF5	; 245
    9712:	f5 4f       	sbci	r31, 0xF5	; 245
    9714:	80 81       	ld	r24, Z
    9716:	8b 17       	cp	r24, r27
    9718:	11 f0       	breq	.+4      	; 0x971e <hunt+0xf6>
    971a:	80 e0       	ldi	r24, 0x00	; 0
    971c:	08 95       	ret
    971e:	90 93 a6 0c 	sts	0x0CA6, r25
    9722:	81 e0       	ldi	r24, 0x01	; 1
	
	return false;
}
    9724:	08 95       	ret

00009726 <SaveHighScore>:
		}
	}
	
}

void SaveHighScore(uint8_t slot, unsigned short time, char *name){
    9726:	a0 e2       	ldi	r26, 0x20	; 32
    9728:	b0 e0       	ldi	r27, 0x00	; 0
    972a:	e9 e9       	ldi	r30, 0x99	; 153
    972c:	fb e4       	ldi	r31, 0x4B	; 75
    972e:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <__prologue_saves__+0x12>
    9732:	d8 2e       	mov	r13, r24
    9734:	c6 2e       	mov	r12, r22
    9736:	b7 2e       	mov	r11, r23
    9738:	7a 01       	movw	r14, r20
	struct EepromBlockStruct ebs;
	ebs.id = MINE_SWEEPER_ID;
    973a:	84 e4       	ldi	r24, 0x44	; 68
    973c:	90 e0       	ldi	r25, 0x00	; 0
    973e:	9a 83       	std	Y+2, r25	; 0x02
    9740:	89 83       	std	Y+1, r24	; 0x01

	if(EepromReadBlock(ebs.id, &ebs) != 0){
    9742:	8e 01       	movw	r16, r28
    9744:	0f 5f       	subi	r16, 0xFF	; 255
    9746:	1f 4f       	sbci	r17, 0xFF	; 255
    9748:	b8 01       	movw	r22, r16
    974a:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <EepromReadBlock>
    974e:	88 23       	and	r24, r24
    9750:	49 f1       	breq	.+82     	; 0x97a4 <SaveHighScore+0x7e>
		EepromWriteBlock(&ebs);
    9752:	c8 01       	movw	r24, r16
    9754:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <EepromWriteBlock>
		ebs.data[0] = ebs.data[10] = ebs.data[20] = 'P';
    9758:	80 e5       	ldi	r24, 0x50	; 80
    975a:	8f 8b       	std	Y+23, r24	; 0x17
    975c:	8d 87       	std	Y+13, r24	; 0x0d
    975e:	8b 83       	std	Y+3, r24	; 0x03
		ebs.data[1] = ebs.data[11] = ebs.data[21] = 'L';
    9760:	8c e4       	ldi	r24, 0x4C	; 76
    9762:	88 8f       	std	Y+24, r24	; 0x18
    9764:	8e 87       	std	Y+14, r24	; 0x0e
    9766:	8c 83       	std	Y+4, r24	; 0x04
		ebs.data[2] = ebs.data[12] = ebs.data[22] = 'A';
    9768:	81 e4       	ldi	r24, 0x41	; 65
    976a:	89 8f       	std	Y+25, r24	; 0x19
    976c:	8f 87       	std	Y+15, r24	; 0x0f
    976e:	8d 83       	std	Y+5, r24	; 0x05
		ebs.data[3] = ebs.data[13] = ebs.data[23] = 'Y';
    9770:	89 e5       	ldi	r24, 0x59	; 89
    9772:	8a 8f       	std	Y+26, r24	; 0x1a
    9774:	88 8b       	std	Y+16, r24	; 0x10
    9776:	8e 83       	std	Y+6, r24	; 0x06
		ebs.data[4] = ebs.data[14] = ebs.data[24] = 'E';
    9778:	85 e4       	ldi	r24, 0x45	; 69
    977a:	8b 8f       	std	Y+27, r24	; 0x1b
    977c:	89 8b       	std	Y+17, r24	; 0x11
    977e:	8f 83       	std	Y+7, r24	; 0x07
		ebs.data[5] = ebs.data[15] = ebs.data[25] = 'R';
    9780:	82 e5       	ldi	r24, 0x52	; 82
    9782:	8c 8f       	std	Y+28, r24	; 0x1c
    9784:	8a 8b       	std	Y+18, r24	; 0x12
    9786:	88 87       	std	Y+8, r24	; 0x08
		ebs.data[6] = ebs.data[16] = ebs.data[26] = ' ';
    9788:	80 e2       	ldi	r24, 0x20	; 32
    978a:	8d 8f       	std	Y+29, r24	; 0x1d
    978c:	8b 8b       	std	Y+19, r24	; 0x13
    978e:	89 87       	std	Y+9, r24	; 0x09
		ebs.data[7] = ebs.data[17] = ebs.data[27] = ' ';
    9790:	8e 8f       	std	Y+30, r24	; 0x1e
    9792:	8c 8b       	std	Y+20, r24	; 0x14
    9794:	8a 87       	std	Y+10, r24	; 0x0a
		ebs.data[8] = ebs.data[18] = ebs.data[28] = 255;
    9796:	8f ef       	ldi	r24, 0xFF	; 255
    9798:	8f 8f       	std	Y+31, r24	; 0x1f
    979a:	8d 8b       	std	Y+21, r24	; 0x15
    979c:	8b 87       	std	Y+11, r24	; 0x0b
		ebs.data[9] = ebs.data[19] = ebs.data[29] = 255;
    979e:	88 a3       	std	Y+32, r24	; 0x20
    97a0:	8e 8b       	std	Y+22, r24	; 0x16
    97a2:	8c 87       	std	Y+12, r24	; 0x0c
	}

	for(uint8_t i=0;i<8;i++)
		ebs.data[i+(slot*10)] = name[i];
    97a4:	8a e0       	ldi	r24, 0x0A	; 10
    97a6:	d8 9e       	mul	r13, r24
    97a8:	a0 01       	movw	r20, r0
    97aa:	11 24       	eor	r1, r1
    97ac:	de 01       	movw	r26, r28
    97ae:	a4 0f       	add	r26, r20
    97b0:	b5 1f       	adc	r27, r21
    97b2:	13 96       	adiw	r26, 0x03	; 3
    97b4:	20 e0       	ldi	r18, 0x00	; 0
    97b6:	30 e0       	ldi	r19, 0x00	; 0
    97b8:	f7 01       	movw	r30, r14
    97ba:	e2 0f       	add	r30, r18
    97bc:	f3 1f       	adc	r31, r19
    97be:	80 81       	ld	r24, Z
    97c0:	8d 93       	st	X+, r24
    97c2:	2f 5f       	subi	r18, 0xFF	; 255
    97c4:	3f 4f       	sbci	r19, 0xFF	; 255
		ebs.data[7] = ebs.data[17] = ebs.data[27] = ' ';
		ebs.data[8] = ebs.data[18] = ebs.data[28] = 255;
		ebs.data[9] = ebs.data[19] = ebs.data[29] = 255;
	}

	for(uint8_t i=0;i<8;i++)
    97c6:	28 30       	cpi	r18, 0x08	; 8
    97c8:	31 05       	cpc	r19, r1
    97ca:	b1 f7       	brne	.-20     	; 0x97b8 <SaveHighScore+0x92>
		ebs.data[i+(slot*10)] = name[i];

	ebs.data[8+(slot*10)] = time & 255;
    97cc:	fe 01       	movw	r30, r28
    97ce:	e4 0f       	add	r30, r20
    97d0:	f5 1f       	adc	r31, r21
    97d2:	c3 86       	std	Z+11, r12	; 0x0b
	ebs.data[9+(slot*10)] = (time>>8)&255;
    97d4:	fa 01       	movw	r30, r20
    97d6:	ec 0f       	add	r30, r28
    97d8:	fd 1f       	adc	r31, r29
    97da:	b4 86       	std	Z+12, r11	; 0x0c
	
	EepromWriteBlock(&ebs);
    97dc:	ce 01       	movw	r24, r28
    97de:	01 96       	adiw	r24, 0x01	; 1
    97e0:	0e 94 2d 3f 	call	0x7e5a	; 0x7e5a <EepromWriteBlock>
}
    97e4:	a0 96       	adiw	r28, 0x20	; 32
    97e6:	e9 e0       	ldi	r30, 0x09	; 9
    97e8:	0c 94 3b 5a 	jmp	0xb476	; 0xb476 <__epilogue_restores__+0x12>

000097ec <LoadHighScore>:

void LoadHighScore(uint8_t slot){
    97ec:	a0 e2       	ldi	r26, 0x20	; 32
    97ee:	b0 e0       	ldi	r27, 0x00	; 0
    97f0:	ec ef       	ldi	r30, 0xFC	; 252
    97f2:	fb e4       	ldi	r31, 0x4B	; 75
    97f4:	0c 94 23 5a 	jmp	0xb446	; 0xb446 <__prologue_saves__+0x1a>
    97f8:	f8 2e       	mov	r15, r24
	struct EepromBlockStruct ebs;
	ebs.id = MINE_SWEEPER_ID;
    97fa:	84 e4       	ldi	r24, 0x44	; 68
    97fc:	90 e0       	ldi	r25, 0x00	; 0
    97fe:	9a 83       	std	Y+2, r25	; 0x02
    9800:	89 83       	std	Y+1, r24	; 0x01

	if(EepromReadBlock(ebs.id, &ebs) != 0){//no save game
    9802:	8e 01       	movw	r16, r28
    9804:	0f 5f       	subi	r16, 0xFF	; 255
    9806:	1f 4f       	sbci	r17, 0xFF	; 255
    9808:	b8 01       	movw	r22, r16
    980a:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <EepromReadBlock>
    980e:	88 23       	and	r24, r24
    9810:	49 f1       	breq	.+82     	; 0x9864 <LoadHighScore+0x78>
		for(uint8_t i=0;i<3;i++)
			SaveHighScore(i,999,"PLAYER ");//make default save
    9812:	80 e0       	ldi	r24, 0x00	; 0
    9814:	67 ee       	ldi	r22, 0xE7	; 231
    9816:	73 e0       	ldi	r23, 0x03	; 3
    9818:	41 e0       	ldi	r20, 0x01	; 1
    981a:	51 e0       	ldi	r21, 0x01	; 1
    981c:	0e 94 93 4b 	call	0x9726	; 0x9726 <SaveHighScore>
    9820:	81 e0       	ldi	r24, 0x01	; 1
    9822:	67 ee       	ldi	r22, 0xE7	; 231
    9824:	73 e0       	ldi	r23, 0x03	; 3
    9826:	41 e0       	ldi	r20, 0x01	; 1
    9828:	51 e0       	ldi	r21, 0x01	; 1
    982a:	0e 94 93 4b 	call	0x9726	; 0x9726 <SaveHighScore>
    982e:	82 e0       	ldi	r24, 0x02	; 2
    9830:	67 ee       	ldi	r22, 0xE7	; 231
    9832:	73 e0       	ldi	r23, 0x03	; 3
    9834:	41 e0       	ldi	r20, 0x01	; 1
    9836:	51 e0       	ldi	r21, 0x01	; 1
    9838:	0e 94 93 4b 	call	0x9726	; 0x9726 <SaveHighScore>
		
		if(EepromReadBlock(ebs.id, &ebs) != 0){
    983c:	89 81       	ldd	r24, Y+1	; 0x01
    983e:	9a 81       	ldd	r25, Y+2	; 0x02
    9840:	b8 01       	movw	r22, r16
    9842:	0e 94 d7 3e 	call	0x7dae	; 0x7dae <EepromReadBlock>
    9846:	88 23       	and	r24, r24
    9848:	79 f1       	breq	.+94     	; 0x98a8 <LoadHighScore+0xbc>
			time = 999;
    984a:	87 ee       	ldi	r24, 0xE7	; 231
    984c:	93 e0       	ldi	r25, 0x03	; 3
    984e:	90 93 b5 0c 	sts	0x0CB5, r25
    9852:	80 93 b4 0c 	sts	0x0CB4, r24
		 strcpy(name,"ERROR");
    9856:	87 e1       	ldi	r24, 0x17	; 23
    9858:	91 e0       	ldi	r25, 0x01	; 1
    985a:	69 e0       	ldi	r22, 0x09	; 9
    985c:	71 e0       	ldi	r23, 0x01	; 1
    985e:	0e 94 4d 5a 	call	0xb49a	; 0xb49a <strcpy>
    9862:	22 c0       	rjmp	.+68     	; 0x98a8 <LoadHighScore+0xbc>
		}
	}
	else{
		for(uint8_t i=0;i<8;i++)
			name[i] = ebs.data[i+(slot*10)];
    9864:	8a e0       	ldi	r24, 0x0A	; 10
    9866:	f8 9e       	mul	r15, r24
    9868:	90 01       	movw	r18, r0
    986a:	11 24       	eor	r1, r1
    986c:	2e 5f       	subi	r18, 0xFE	; 254
    986e:	3f 4f       	sbci	r19, 0xFF	; 255
    9870:	d8 01       	movw	r26, r16
    9872:	a2 0f       	add	r26, r18
    9874:	b3 1f       	adc	r27, r19
    9876:	22 50       	subi	r18, 0x02	; 2
    9878:	30 40       	sbci	r19, 0x00	; 0
    987a:	e7 e1       	ldi	r30, 0x17	; 23
    987c:	f1 e0       	ldi	r31, 0x01	; 1
    987e:	8d 91       	ld	r24, X+
    9880:	81 93       	st	Z+, r24
			time = 999;
		 strcpy(name,"ERROR");
		}
	}
	else{
		for(uint8_t i=0;i<8;i++)
    9882:	81 e0       	ldi	r24, 0x01	; 1
    9884:	ef 31       	cpi	r30, 0x1F	; 31
    9886:	f8 07       	cpc	r31, r24
    9888:	d1 f7       	brne	.-12     	; 0x987e <LoadHighScore+0x92>
			name[i] = ebs.data[i+(slot*10)];

		time = (ebs.data[8+(slot*10)] & 255)+(ebs.data[9+(slot*10)]<<8);
    988a:	fe 01       	movw	r30, r28
    988c:	e2 0f       	add	r30, r18
    988e:	f3 1f       	adc	r31, r19
    9890:	94 85       	ldd	r25, Z+12	; 0x0c
    9892:	80 e0       	ldi	r24, 0x00	; 0
    9894:	f9 01       	movw	r30, r18
    9896:	ec 0f       	add	r30, r28
    9898:	fd 1f       	adc	r31, r29
    989a:	23 85       	ldd	r18, Z+11	; 0x0b
    989c:	82 0f       	add	r24, r18
    989e:	91 1d       	adc	r25, r1
    98a0:	90 93 b5 0c 	sts	0x0CB5, r25
    98a4:	80 93 b4 0c 	sts	0x0CB4, r24
	}
}
    98a8:	a0 96       	adiw	r28, 0x20	; 32
    98aa:	e5 e0       	ldi	r30, 0x05	; 5
    98ac:	0c 94 3f 5a 	jmp	0xb47e	; 0xb47e <__epilogue_restores__+0x1a>

000098b0 <DrawNumber>:
	}

	return (my-8)/16;
}

void DrawNumber(uint8_t x, uint8_t y, int num){
    98b0:	ef 92       	push	r14
    98b2:	ff 92       	push	r15
    98b4:	0f 93       	push	r16
    98b6:	1f 93       	push	r17
    98b8:	cf 93       	push	r28
    98ba:	df 93       	push	r29
    98bc:	f8 2e       	mov	r15, r24
    98be:	06 2f       	mov	r16, r22
    98c0:	ea 01       	movw	r28, r20
    98c2:	cc 0f       	add	r28, r28
    98c4:	dd 1f       	adc	r29, r29
    98c6:	c4 0f       	add	r28, r20
    98c8:	d5 1f       	adc	r29, r21
    98ca:	cc 0f       	add	r28, r28
    98cc:	dd 1f       	adc	r29, r29
    98ce:	cb 55       	subi	r28, 0x5B	; 91
    98d0:	d7 4c       	sbci	r29, 0xC7	; 199
    98d2:	10 e0       	ldi	r17, 0x00	; 0

	for(uint8_t yo=0;yo<3;yo++)
	for(uint8_t xo=0;xo<2;xo++)
		SetTile(x+xo,y+yo,pgm_read_byte(&NumberMaps[(num*6)+(yo*2)+xo])+NUMBERSTART-1);
    98d4:	e8 2e       	mov	r14, r24
    98d6:	e3 94       	inc	r14
    98d8:	fe 01       	movw	r30, r28
    98da:	44 91       	lpm	r20, Z+
    98dc:	50 e0       	ldi	r21, 0x00	; 0
    98de:	48 59       	subi	r20, 0x98	; 152
    98e0:	5f 4f       	sbci	r21, 0xFF	; 255
    98e2:	8f 2d       	mov	r24, r15
    98e4:	60 2f       	mov	r22, r16
    98e6:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    98ea:	21 96       	adiw	r28, 0x01	; 1
    98ec:	fe 01       	movw	r30, r28
    98ee:	44 91       	lpm	r20, Z+
    98f0:	50 e0       	ldi	r21, 0x00	; 0
    98f2:	48 59       	subi	r20, 0x98	; 152
    98f4:	5f 4f       	sbci	r21, 0xFF	; 255
    98f6:	8e 2d       	mov	r24, r14
    98f8:	60 2f       	mov	r22, r16
    98fa:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	return (my-8)/16;
}

void DrawNumber(uint8_t x, uint8_t y, int num){

	for(uint8_t yo=0;yo<3;yo++)
    98fe:	1f 5f       	subi	r17, 0xFF	; 255
    9900:	21 96       	adiw	r28, 0x01	; 1
    9902:	0f 5f       	subi	r16, 0xFF	; 255
    9904:	13 30       	cpi	r17, 0x03	; 3
    9906:	41 f7       	brne	.-48     	; 0x98d8 <DrawNumber+0x28>
	for(uint8_t xo=0;xo<2;xo++)
		SetTile(x+xo,y+yo,pgm_read_byte(&NumberMaps[(num*6)+(yo*2)+xo])+NUMBERSTART-1);
}
    9908:	cd b7       	in	r28, 0x3d	; 61
    990a:	de b7       	in	r29, 0x3e	; 62
    990c:	e6 e0       	ldi	r30, 0x06	; 6
    990e:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__epilogue_restores__+0x18>

00009912 <DrawMineCount>:
		}
		val=val/10;
	}
}

void DrawMineCount(){
    9912:	0f 93       	push	r16
    9914:	1f 93       	push	r17
    9916:	cf 93       	push	r28
    9918:	df 93       	push	r29
	uint8_t c,i,x;

	x = 6;
	 int val = abs(nummines-numflags);	
    991a:	80 91 af 0c 	lds	r24, 0x0CAF
    991e:	28 2f       	mov	r18, r24
    9920:	30 e0       	ldi	r19, 0x00	; 0
    9922:	80 91 a5 0c 	lds	r24, 0x0CA5
    9926:	28 1b       	sub	r18, r24
    9928:	31 09       	sbc	r19, r1
    992a:	37 ff       	sbrs	r19, 7
    992c:	03 c0       	rjmp	.+6      	; 0x9934 <DrawMineCount+0x22>
    992e:	30 95       	com	r19
    9930:	21 95       	neg	r18
    9932:	3f 4f       	sbci	r19, 0xFF	; 255
    9934:	e9 01       	movw	r28, r18
    9936:	24 36       	cpi	r18, 0x64	; 100
    9938:	31 05       	cpc	r19, r1
    993a:	14 f0       	brlt	.+4      	; 0x9940 <DrawMineCount+0x2e>
    993c:	c3 e6       	ldi	r28, 0x63	; 99
    993e:	d0 e0       	ldi	r29, 0x00	; 0
    9940:	10 e0       	ldi	r17, 0x00	; 0
    9942:	04 e0       	ldi	r16, 0x04	; 4
    9944:	20 2f       	mov	r18, r16
    9946:	2e 5f       	subi	r18, 0xFE	; 254
	 if(val > 99)
		val = 99;

	for(i=0;i<3;i++){
		c=val%10;
		if(val>0 || i==0){
    9948:	20 97       	sbiw	r28, 0x00	; 0
    994a:	11 f4       	brne	.+4      	; 0x9950 <DrawMineCount+0x3e>
    994c:	11 23       	and	r17, r17
    994e:	51 f4       	brne	.+20     	; 0x9964 <DrawMineCount+0x52>
			DrawNumber(x,2,c);
    9950:	ce 01       	movw	r24, r28
    9952:	6a e0       	ldi	r22, 0x0A	; 10
    9954:	70 e0       	ldi	r23, 0x00	; 0
    9956:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    995a:	48 2f       	mov	r20, r24
    995c:	82 2f       	mov	r24, r18
    995e:	62 e0       	ldi	r22, 0x02	; 2
    9960:	50 e0       	ldi	r21, 0x00	; 0
    9962:	04 c0       	rjmp	.+8      	; 0x996c <DrawMineCount+0x5a>
			 x -= 2;
		}else{
			DrawNumber(x,2,0);
    9964:	82 2f       	mov	r24, r18
    9966:	62 e0       	ldi	r22, 0x02	; 2
    9968:	40 e0       	ldi	r20, 0x00	; 0
    996a:	50 e0       	ldi	r21, 0x00	; 0
    996c:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <DrawNumber>
	x = 6;
	 int val = abs(nummines-numflags);	
	 if(val > 99)
		val = 99;

	for(i=0;i<3;i++){
    9970:	1f 5f       	subi	r17, 0xFF	; 255
    9972:	02 50       	subi	r16, 0x02	; 2
    9974:	13 30       	cpi	r17, 0x03	; 3
    9976:	39 f0       	breq	.+14     	; 0x9986 <DrawMineCount+0x74>
			 x -= 2;
		}else{
			DrawNumber(x,2,0);
			x -= 2;
		}
		val=val/10;
    9978:	ce 01       	movw	r24, r28
    997a:	6a e0       	ldi	r22, 0x0A	; 10
    997c:	70 e0       	ldi	r23, 0x00	; 0
    997e:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    9982:	eb 01       	movw	r28, r22
    9984:	df cf       	rjmp	.-66     	; 0x9944 <DrawMineCount+0x32>
	}

	if(numflags > nummines){//draw negative sign
    9986:	90 91 a5 0c 	lds	r25, 0x0CA5
    998a:	80 91 af 0c 	lds	r24, 0x0CAF
    998e:	89 17       	cp	r24, r25
    9990:	30 f4       	brcc	.+12     	; 0x999e <DrawMineCount+0x8c>
		 DrawNumber(2,2,10);
    9992:	82 e0       	ldi	r24, 0x02	; 2
    9994:	62 e0       	ldi	r22, 0x02	; 2
    9996:	4a e0       	ldi	r20, 0x0A	; 10
    9998:	50 e0       	ldi	r21, 0x00	; 0
    999a:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <DrawNumber>
	}
 
}
    999e:	df 91       	pop	r29
    99a0:	cf 91       	pop	r28
    99a2:	1f 91       	pop	r17
    99a4:	0f 91       	pop	r16
    99a6:	08 95       	ret

000099a8 <DrawTimer>:
	for(uint8_t yo=0;yo<3;yo++)
	for(uint8_t xo=0;xo<2;xo++)
		SetTile(x+xo,y+yo,pgm_read_byte(&NumberMaps[(num*6)+(yo*2)+xo])+NUMBERSTART-1);
}

void DrawTimer(){
    99a8:	0f 93       	push	r16
    99aa:	1f 93       	push	r17
    99ac:	cf 93       	push	r28
    99ae:	df 93       	push	r29
	uint8_t c,i,x;

	x = 26;
	int val = seconds;
    99b0:	c0 91 b6 0c 	lds	r28, 0x0CB6
    99b4:	d0 91 b7 0c 	lds	r29, 0x0CB7
    99b8:	10 e0       	ldi	r17, 0x00	; 0
    99ba:	08 e1       	ldi	r16, 0x18	; 24
    99bc:	20 2f       	mov	r18, r16
    99be:	2e 5f       	subi	r18, 0xFE	; 254
	 
	for(i=0;i<3;i++){
		c=val%10;
		if(val>0 || i==0){
    99c0:	1c 16       	cp	r1, r28
    99c2:	1d 06       	cpc	r1, r29
    99c4:	14 f0       	brlt	.+4      	; 0x99ca <DrawTimer+0x22>
    99c6:	11 23       	and	r17, r17
    99c8:	51 f4       	brne	.+20     	; 0x99de <DrawTimer+0x36>
			DrawNumber(x,2,c);
    99ca:	ce 01       	movw	r24, r28
    99cc:	6a e0       	ldi	r22, 0x0A	; 10
    99ce:	70 e0       	ldi	r23, 0x00	; 0
    99d0:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    99d4:	48 2f       	mov	r20, r24
    99d6:	82 2f       	mov	r24, r18
    99d8:	62 e0       	ldi	r22, 0x02	; 2
    99da:	50 e0       	ldi	r21, 0x00	; 0
    99dc:	04 c0       	rjmp	.+8      	; 0x99e6 <DrawTimer+0x3e>
			 x -= 2;
		}else{
			DrawNumber(x,2,0);
    99de:	82 2f       	mov	r24, r18
    99e0:	62 e0       	ldi	r22, 0x02	; 2
    99e2:	40 e0       	ldi	r20, 0x00	; 0
    99e4:	50 e0       	ldi	r21, 0x00	; 0
    99e6:	0e 94 58 4c 	call	0x98b0	; 0x98b0 <DrawNumber>
	uint8_t c,i,x;

	x = 26;
	int val = seconds;
	 
	for(i=0;i<3;i++){
    99ea:	1f 5f       	subi	r17, 0xFF	; 255
    99ec:	02 50       	subi	r16, 0x02	; 2
    99ee:	13 30       	cpi	r17, 0x03	; 3
    99f0:	39 f0       	breq	.+14     	; 0x9a00 <DrawTimer+0x58>
			 x -= 2;
		}else{
			DrawNumber(x,2,0);
			x -= 2;
		}
		val=val/10;
    99f2:	ce 01       	movw	r24, r28
    99f4:	6a e0       	ldi	r22, 0x0A	; 10
    99f6:	70 e0       	ldi	r23, 0x00	; 0
    99f8:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    99fc:	eb 01       	movw	r28, r22
    99fe:	de cf       	rjmp	.-68     	; 0x99bc <DrawTimer+0x14>
	}
}
    9a00:	df 91       	pop	r29
    9a02:	cf 91       	pop	r28
    9a04:	1f 91       	pop	r17
    9a06:	0f 91       	pop	r16
    9a08:	08 95       	ret

00009a0a <Draw>:

	}
}

void Draw(){
	DrawTimer();
    9a0a:	0e 94 d4 4c 	call	0x99a8	; 0x99a8 <DrawTimer>
	DrawFace(108,16,255);
    9a0e:	8c e6       	ldi	r24, 0x6C	; 108
    9a10:	60 e1       	ldi	r22, 0x10	; 16
    9a12:	4f ef       	ldi	r20, 0xFF	; 255
    9a14:	0e 94 a2 4a 	call	0x9544	; 0x9544 <DrawFace>
	DrawMineCount();
    9a18:	0e 94 89 4c 	call	0x9912	; 0x9912 <DrawMineCount>
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    9a1c:	80 91 d6 0d 	lds	r24, 0x0DD6
    9a20:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    9a24:	80 91 ac 0c 	lds	r24, 0x0CAC
    9a28:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    9a2c:	8c e1       	ldi	r24, 0x1C	; 28
    9a2e:	80 93 ae 04 	sts	0x04AE, r24
void Draw(){
	DrawTimer();
	DrawFace(108,16,255);
	DrawMineCount();
	DrawCursor();
}
    9a32:	08 95       	ret

00009a34 <SetVidGrid>:
		

	return t;
}

void SetVidGrid(uint8_t x, uint8_t y, uint8_t t){
    9a34:	cf 92       	push	r12
    9a36:	df 92       	push	r13
    9a38:	ef 92       	push	r14
    9a3a:	ff 92       	push	r15
    9a3c:	0f 93       	push	r16
    9a3e:	1f 93       	push	r17
    9a40:	98 2f       	mov	r25, r24
    9a42:	f6 2e       	mov	r15, r22
	if(x >= fwidth || y >= fheight)
    9a44:	80 91 ba 0c 	lds	r24, 0x0CBA
    9a48:	98 17       	cp	r25, r24
    9a4a:	08 f0       	brcs	.+2      	; 0x9a4e <SetVidGrid+0x1a>
    9a4c:	41 c0       	rjmp	.+130    	; 0x9ad0 <SetVidGrid+0x9c>
    9a4e:	80 91 b0 0c 	lds	r24, 0x0CB0
    9a52:	68 17       	cp	r22, r24
    9a54:	e8 f5       	brcc	.+122    	; 0x9ad0 <SetVidGrid+0x9c>
		return;

	if(!(flags & BIGFIELD)){
    9a56:	80 91 d3 0d 	lds	r24, 0x0DD3
    9a5a:	e0 90 a8 0c 	lds	r14, 0x0CA8
    9a5e:	60 91 b2 0c 	lds	r22, 0x0CB2
    9a62:	86 fd       	sbrc	r24, 6
    9a64:	2c c0       	rjmp	.+88     	; 0x9abe <SetVidGrid+0x8a>
		x *= 2;
		y *= 2;
		t *= 4;
    9a66:	04 2f       	mov	r16, r20
    9a68:	00 0f       	add	r16, r16
    9a6a:	00 0f       	add	r16, r16
		x += xoff*2;
    9a6c:	e9 0e       	add	r14, r25
    9a6e:	ee 0c       	add	r14, r14
		y += yoff*2;
    9a70:	f6 0e       	add	r15, r22
    9a72:	ff 0c       	add	r15, r15
		t += GRIDSTART;
    9a74:	02 5e       	subi	r16, 0xE2	; 226
		SetTile(x+1,y+7,t+0);
    9a76:	ce 2c       	mov	r12, r14
    9a78:	c3 94       	inc	r12
    9a7a:	b7 e0       	ldi	r27, 0x07	; 7
    9a7c:	db 2e       	mov	r13, r27
    9a7e:	df 0c       	add	r13, r15
    9a80:	8c 2d       	mov	r24, r12
    9a82:	6d 2d       	mov	r22, r13
    9a84:	40 2f       	mov	r20, r16
    9a86:	50 e0       	ldi	r21, 0x00	; 0
    9a88:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
		SetTile(x+2,y+7,t+1);
    9a8c:	82 e0       	ldi	r24, 0x02	; 2
    9a8e:	e8 0e       	add	r14, r24
    9a90:	10 e0       	ldi	r17, 0x00	; 0
    9a92:	0f 5f       	subi	r16, 0xFF	; 255
    9a94:	1f 4f       	sbci	r17, 0xFF	; 255
    9a96:	8e 2d       	mov	r24, r14
    9a98:	6d 2d       	mov	r22, r13
    9a9a:	a8 01       	movw	r20, r16
    9a9c:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
		SetTile(x+1,y+8,t+2);
    9aa0:	88 e0       	ldi	r24, 0x08	; 8
    9aa2:	f8 0e       	add	r15, r24
    9aa4:	0f 5f       	subi	r16, 0xFF	; 255
    9aa6:	1f 4f       	sbci	r17, 0xFF	; 255
    9aa8:	8c 2d       	mov	r24, r12
    9aaa:	6f 2d       	mov	r22, r15
    9aac:	a8 01       	movw	r20, r16
    9aae:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
		SetTile(x+2,y+8,t+3);
    9ab2:	0f 5f       	subi	r16, 0xFF	; 255
    9ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    9ab6:	8e 2d       	mov	r24, r14
    9ab8:	6f 2d       	mov	r22, r15
    9aba:	a8 01       	movw	r20, r16
    9abc:	07 c0       	rjmp	.+14     	; 0x9acc <SetVidGrid+0x98>
	}
	else{
		x += xoff;
		y += yoff;
		t += GRIDSTART+60;//offset to small tiles
		SetTile(x+1,y+7,t);
    9abe:	e3 94       	inc	r14
    9ac0:	69 5f       	subi	r22, 0xF9	; 249
    9ac2:	6f 0d       	add	r22, r15
    9ac4:	46 5a       	subi	r20, 0xA6	; 166
    9ac6:	8e 2d       	mov	r24, r14
    9ac8:	89 0f       	add	r24, r25
    9aca:	50 e0       	ldi	r21, 0x00	; 0
    9acc:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	}
}
    9ad0:	1f 91       	pop	r17
    9ad2:	0f 91       	pop	r16
    9ad4:	ff 90       	pop	r15
    9ad6:	ef 90       	pop	r14
    9ad8:	df 90       	pop	r13
    9ada:	cf 90       	pop	r12
    9adc:	08 95       	ret

00009ade <FloodFill>:
	if(searchgrid[(uint8_t)(fx)][(uint8_t)(fy+1)] == val){fy++;return true;}
	
	return false;
}

void FloodFill(uint8_t x, uint8_t y){//uncover open connected spaces
    9ade:	a0 e0       	ldi	r26, 0x00	; 0
    9ae0:	b0 e0       	ldi	r27, 0x00	; 0
    9ae2:	e5 e7       	ldi	r30, 0x75	; 117
    9ae4:	fd e4       	ldi	r31, 0x4D	; 77
    9ae6:	0c 94 1f 5a 	jmp	0xb43e	; 0xb43e <__prologue_saves__+0x12>
    9aea:	e8 2e       	mov	r14, r24
    9aec:	d6 2e       	mov	r13, r22
    9aee:	28 e2       	ldi	r18, 0x28	; 40
    9af0:	3a e0       	ldi	r19, 0x0A	; 10
    9af2:	80 e0       	ldi	r24, 0x00	; 0
    9af4:	90 e0       	ldi	r25, 0x00	; 0
//FLOODTOP:	
	for(uint8_t i=0;i<MAXHEIGHT+1;i++)//mark boundaries
    9af6:	46 e1       	ldi	r20, 0x16	; 22
    9af8:	50 e0       	ldi	r21, 0x00	; 0
	for(uint8_t j=0;j<MAXWIDTH+1;j++)
		searchgrid[i][j] = 1;
    9afa:	61 e0       	ldi	r22, 0x01	; 1
    9afc:	10 c0       	rjmp	.+32     	; 0x9b1e <FloodFill+0x40>
    9afe:	61 93       	st	Z+, r22
}

void FloodFill(uint8_t x, uint8_t y){//uncover open connected spaces
//FLOODTOP:	
	for(uint8_t i=0;i<MAXHEIGHT+1;i++)//mark boundaries
	for(uint8_t j=0;j<MAXWIDTH+1;j++)
    9b00:	e2 17       	cp	r30, r18
    9b02:	f3 07       	cpc	r31, r19
    9b04:	e1 f7       	brne	.-8      	; 0x9afe <FloodFill+0x20>
    9b06:	01 96       	adiw	r24, 0x01	; 1
    9b08:	9f 01       	movw	r18, r30
    9b0a:	2a 5e       	subi	r18, 0xEA	; 234
    9b0c:	3f 4f       	sbci	r19, 0xFF	; 255
	return false;
}

void FloodFill(uint8_t x, uint8_t y){//uncover open connected spaces
//FLOODTOP:	
	for(uint8_t i=0;i<MAXHEIGHT+1;i++)//mark boundaries
    9b0e:	85 31       	cpi	r24, 0x15	; 21
    9b10:	91 05       	cpc	r25, r1
    9b12:	29 f4       	brne	.+10     	; 0x9b1e <FloodFill+0x40>
    9b14:	01 e0       	ldi	r16, 0x01	; 1
    9b16:	10 e0       	ldi	r17, 0x00	; 0
	for(uint8_t i=0;i<MAXHEIGHT;i++)
	for(uint8_t j=0;j<MAXWIDTH;j++){//setup the search grid
		if(GetGrid(j,i) < 2 && !GetVidGrid(j,i))
			searchgrid[j+1][i+1] = 0;
		else
			searchgrid[j+1][i+1] = 1;
    9b18:	bb 24       	eor	r11, r11
    9b1a:	b3 94       	inc	r11
    9b1c:	23 c0       	rjmp	.+70     	; 0x9b64 <FloodFill+0x86>
	return false;
}

void FloodFill(uint8_t x, uint8_t y){//uncover open connected spaces
//FLOODTOP:	
	for(uint8_t i=0;i<MAXHEIGHT+1;i++)//mark boundaries
    9b1e:	84 9f       	mul	r24, r20
    9b20:	f0 01       	movw	r30, r0
    9b22:	85 9f       	mul	r24, r21
    9b24:	f0 0d       	add	r31, r0
    9b26:	94 9f       	mul	r25, r20
    9b28:	f0 0d       	add	r31, r0
    9b2a:	11 24       	eor	r1, r1
    9b2c:	e5 5f       	subi	r30, 0xF5	; 245
    9b2e:	f5 4f       	sbci	r31, 0xF5	; 245
    9b30:	e6 cf       	rjmp	.-52     	; 0x9afe <FloodFill+0x20>
	for(uint8_t j=0;j<MAXWIDTH+1;j++)
		searchgrid[i][j] = 1;

	for(uint8_t i=0;i<MAXHEIGHT;i++)
	for(uint8_t j=0;j<MAXWIDTH;j++){//setup the search grid
		if(GetGrid(j,i) < 2 && !GetVidGrid(j,i))
    9b32:	8f 2d       	mov	r24, r15
    9b34:	6c 2d       	mov	r22, r12
    9b36:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9b3a:	82 30       	cpi	r24, 0x02	; 2
    9b3c:	40 f4       	brcc	.+16     	; 0x9b4e <FloodFill+0x70>
    9b3e:	8f 2d       	mov	r24, r15
    9b40:	6c 2d       	mov	r22, r12
    9b42:	0e 94 60 4a 	call	0x94c0	; 0x94c0 <GetVidGrid>
    9b46:	88 23       	and	r24, r24
    9b48:	11 f4       	brne	.+4      	; 0x9b4e <FloodFill+0x70>
			searchgrid[j+1][i+1] = 0;
    9b4a:	18 82       	st	Y, r1
    9b4c:	01 c0       	rjmp	.+2      	; 0x9b50 <FloodFill+0x72>
		else
			searchgrid[j+1][i+1] = 1;
    9b4e:	b8 82       	st	Y, r11
	for(uint8_t i=0;i<MAXHEIGHT+1;i++)//mark boundaries
	for(uint8_t j=0;j<MAXWIDTH+1;j++)
		searchgrid[i][j] = 1;

	for(uint8_t i=0;i<MAXHEIGHT;i++)
	for(uint8_t j=0;j<MAXWIDTH;j++){//setup the search grid
    9b50:	f3 94       	inc	r15
    9b52:	66 96       	adiw	r28, 0x16	; 22
    9b54:	8c e1       	ldi	r24, 0x1C	; 28
    9b56:	f8 16       	cp	r15, r24
    9b58:	61 f7       	brne	.-40     	; 0x9b32 <FloodFill+0x54>
    9b5a:	0f 5f       	subi	r16, 0xFF	; 255
    9b5c:	1f 4f       	sbci	r17, 0xFF	; 255
//FLOODTOP:	
	for(uint8_t i=0;i<MAXHEIGHT+1;i++)//mark boundaries
	for(uint8_t j=0;j<MAXWIDTH+1;j++)
		searchgrid[i][j] = 1;

	for(uint8_t i=0;i<MAXHEIGHT;i++)
    9b5e:	05 31       	cpi	r16, 0x15	; 21
    9b60:	11 05       	cpc	r17, r1
    9b62:	39 f0       	breq	.+14     	; 0x9b72 <FloodFill+0x94>
    9b64:	c0 2e       	mov	r12, r16
    9b66:	ca 94       	dec	r12
    9b68:	e8 01       	movw	r28, r16
    9b6a:	cf 5d       	subi	r28, 0xDF	; 223
    9b6c:	d5 4f       	sbci	r29, 0xF5	; 245
    9b6e:	ff 24       	eor	r15, r15
    9b70:	e0 cf       	rjmp	.-64     	; 0x9b32 <FloodFill+0x54>
	}				
	
//	WaitVsync(1);
	uint8_t t;

	t = GetGrid(x,y);
    9b72:	8e 2d       	mov	r24, r14
    9b74:	6d 2d       	mov	r22, r13
    9b76:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9b7a:	18 2f       	mov	r17, r24
	SetVidGrid(x,y,t);//atleast this node gets drawn
    9b7c:	8e 2d       	mov	r24, r14
    9b7e:	6d 2d       	mov	r22, r13
    9b80:	41 2f       	mov	r20, r17
    9b82:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
	if(t > 1)
    9b86:	12 30       	cpi	r17, 0x02	; 2
    9b88:	08 f0       	brcs	.+2      	; 0x9b8c <FloodFill+0xae>
    9b8a:	08 c1       	rjmp	.+528    	; 0x9d9c <FloodFill+0x2be>
		return;	

	fx = x+1;
    9b8c:	e3 94       	inc	r14
    9b8e:	e0 92 d4 0d 	sts	0x0DD4, r14
	fy = y+1;
    9b92:	d3 94       	inc	r13
    9b94:	d0 92 a6 0c 	sts	0x0CA6, r13
    9b98:	ff 24       	eor	r15, r15
    9b9a:	fa 94       	dec	r15
	int iterations = 0;

//	WaitVsync(1);

	while(c < 0){
		searchgrid[(uint8_t)(fx)][(uint8_t)(fy)] = c--;
    9b9c:	c6 e1       	ldi	r28, 0x16	; 22
    9b9e:	d0 e0       	ldi	r29, 0x00	; 0
			}
		 if(fy > 1){SetVidGrid(fx-1,fy-2,GetGrid(fx-1,fy-2));}
		 if(fy < fheight){SetVidGrid(fx-1,fy+0,GetGrid(fx-1,fy+0));}


			searchgrid[(uint8_t)(fx)][(uint8_t)(fy)] = 1;
    9ba0:	ee 24       	eor	r14, r14
    9ba2:	e3 94       	inc	r14
	int iterations = 0;

//	WaitVsync(1);

	while(c < 0){
		searchgrid[(uint8_t)(fx)][(uint8_t)(fy)] = c--;
    9ba4:	10 91 d4 0d 	lds	r17, 0x0DD4
    9ba8:	00 91 a6 0c 	lds	r16, 0x0CA6
    9bac:	81 2f       	mov	r24, r17
    9bae:	90 e0       	ldi	r25, 0x00	; 0
    9bb0:	8c 9f       	mul	r24, r28
    9bb2:	f0 01       	movw	r30, r0
    9bb4:	8d 9f       	mul	r24, r29
    9bb6:	f0 0d       	add	r31, r0
    9bb8:	9c 9f       	mul	r25, r28
    9bba:	f0 0d       	add	r31, r0
    9bbc:	11 24       	eor	r1, r1
    9bbe:	e0 0f       	add	r30, r16
    9bc0:	f1 1d       	adc	r31, r1
    9bc2:	e5 5f       	subi	r30, 0xF5	; 245
    9bc4:	f5 4f       	sbci	r31, 0xF5	; 245
    9bc6:	f0 82       	st	Z, r15
    9bc8:	fa 94       	dec	r15
		SetVidGrid(fx-1,fy-1,GetGrid(fx-1,fy-1));
    9bca:	11 50       	subi	r17, 0x01	; 1
    9bcc:	01 50       	subi	r16, 0x01	; 1
    9bce:	81 2f       	mov	r24, r17
    9bd0:	60 2f       	mov	r22, r16
    9bd2:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9bd6:	48 2f       	mov	r20, r24
    9bd8:	81 2f       	mov	r24, r17
    9bda:	60 2f       	mov	r22, r16
    9bdc:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>

		
		if(!hunt(0)){
    9be0:	80 e0       	ldi	r24, 0x00	; 0
    9be2:	0e 94 14 4b 	call	0x9628	; 0x9628 <hunt>
    9be6:	88 23       	and	r24, r24
    9be8:	09 f0       	breq	.+2      	; 0x9bec <FloodFill+0x10e>
    9bea:	c7 c0       	rjmp	.+398    	; 0x9d7a <FloodFill+0x29c>
		 if(fx > 1){
    9bec:	10 91 d4 0d 	lds	r17, 0x0DD4
    9bf0:	12 30       	cpi	r17, 0x02	; 2
    9bf2:	b4 f1       	brlt	.+108    	; 0x9c60 <FloodFill+0x182>
			 SetVidGrid(fx-2,fy-1,GetGrid(fx-2,fy-1));
    9bf4:	12 50       	subi	r17, 0x02	; 2
    9bf6:	00 91 a6 0c 	lds	r16, 0x0CA6
    9bfa:	01 50       	subi	r16, 0x01	; 1
    9bfc:	81 2f       	mov	r24, r17
    9bfe:	60 2f       	mov	r22, r16
    9c00:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9c04:	48 2f       	mov	r20, r24
    9c06:	81 2f       	mov	r24, r17
    9c08:	60 2f       	mov	r22, r16
    9c0a:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
			if(fy > 1)
    9c0e:	00 91 a6 0c 	lds	r16, 0x0CA6
    9c12:	02 30       	cpi	r16, 0x02	; 2
    9c14:	6c f0       	brlt	.+26     	; 0x9c30 <FloodFill+0x152>
				SetVidGrid(fx-2,fy-2,GetGrid(fx-2,fy-2));
    9c16:	10 91 d4 0d 	lds	r17, 0x0DD4
    9c1a:	12 50       	subi	r17, 0x02	; 2
    9c1c:	02 50       	subi	r16, 0x02	; 2
    9c1e:	81 2f       	mov	r24, r17
    9c20:	60 2f       	mov	r22, r16
    9c22:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9c26:	48 2f       	mov	r20, r24
    9c28:	81 2f       	mov	r24, r17
    9c2a:	60 2f       	mov	r22, r16
    9c2c:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
			 if(fy < fheight)
    9c30:	00 91 a6 0c 	lds	r16, 0x0CA6
    9c34:	20 2f       	mov	r18, r16
    9c36:	33 27       	eor	r19, r19
    9c38:	27 fd       	sbrc	r18, 7
    9c3a:	30 95       	com	r19
    9c3c:	80 91 b0 0c 	lds	r24, 0x0CB0
    9c40:	90 e0       	ldi	r25, 0x00	; 0
    9c42:	28 17       	cp	r18, r24
    9c44:	39 07       	cpc	r19, r25
    9c46:	64 f4       	brge	.+24     	; 0x9c60 <FloodFill+0x182>
				SetVidGrid(fx-2,fy+0,GetGrid(fx-2,fy+0));		
    9c48:	10 91 d4 0d 	lds	r17, 0x0DD4
    9c4c:	12 50       	subi	r17, 0x02	; 2
    9c4e:	81 2f       	mov	r24, r17
    9c50:	60 2f       	mov	r22, r16
    9c52:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9c56:	48 2f       	mov	r20, r24
    9c58:	81 2f       	mov	r24, r17
    9c5a:	60 2f       	mov	r22, r16
    9c5c:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
		 }
		 if(fx < fwidth){
    9c60:	00 91 d4 0d 	lds	r16, 0x0DD4
    9c64:	20 2f       	mov	r18, r16
    9c66:	33 27       	eor	r19, r19
    9c68:	27 fd       	sbrc	r18, 7
    9c6a:	30 95       	com	r19
    9c6c:	80 91 ba 0c 	lds	r24, 0x0CBA
    9c70:	90 e0       	ldi	r25, 0x00	; 0
    9c72:	28 17       	cp	r18, r24
    9c74:	39 07       	cpc	r19, r25
    9c76:	9c f5       	brge	.+102    	; 0x9cde <FloodFill+0x200>
			 SetVidGrid(fx+0,fy-1,GetGrid(fx+0,fy-1));
    9c78:	10 91 a6 0c 	lds	r17, 0x0CA6
    9c7c:	11 50       	subi	r17, 0x01	; 1
    9c7e:	80 2f       	mov	r24, r16
    9c80:	61 2f       	mov	r22, r17
    9c82:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9c86:	48 2f       	mov	r20, r24
    9c88:	80 2f       	mov	r24, r16
    9c8a:	61 2f       	mov	r22, r17
    9c8c:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
			 if(fy > 1)
    9c90:	00 91 a6 0c 	lds	r16, 0x0CA6
    9c94:	02 30       	cpi	r16, 0x02	; 2
    9c96:	64 f0       	brlt	.+24     	; 0x9cb0 <FloodFill+0x1d2>
				SetVidGrid(fx+0,fy-2,GetGrid(fx+0,fy-2));
    9c98:	10 91 d4 0d 	lds	r17, 0x0DD4
    9c9c:	02 50       	subi	r16, 0x02	; 2
    9c9e:	81 2f       	mov	r24, r17
    9ca0:	60 2f       	mov	r22, r16
    9ca2:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9ca6:	48 2f       	mov	r20, r24
    9ca8:	81 2f       	mov	r24, r17
    9caa:	60 2f       	mov	r22, r16
    9cac:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
				if(fy < fheight)
    9cb0:	00 91 a6 0c 	lds	r16, 0x0CA6
    9cb4:	20 2f       	mov	r18, r16
    9cb6:	33 27       	eor	r19, r19
    9cb8:	27 fd       	sbrc	r18, 7
    9cba:	30 95       	com	r19
    9cbc:	80 91 b0 0c 	lds	r24, 0x0CB0
    9cc0:	90 e0       	ldi	r25, 0x00	; 0
    9cc2:	28 17       	cp	r18, r24
    9cc4:	39 07       	cpc	r19, r25
    9cc6:	5c f4       	brge	.+22     	; 0x9cde <FloodFill+0x200>
				SetVidGrid(fx+0,fy+0,GetGrid(fx+0,fy+0));
    9cc8:	10 91 d4 0d 	lds	r17, 0x0DD4
    9ccc:	81 2f       	mov	r24, r17
    9cce:	60 2f       	mov	r22, r16
    9cd0:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9cd4:	48 2f       	mov	r20, r24
    9cd6:	81 2f       	mov	r24, r17
    9cd8:	60 2f       	mov	r22, r16
    9cda:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
			}
		 if(fy > 1){SetVidGrid(fx-1,fy-2,GetGrid(fx-1,fy-2));}
    9cde:	00 91 a6 0c 	lds	r16, 0x0CA6
    9ce2:	02 30       	cpi	r16, 0x02	; 2
    9ce4:	6c f0       	brlt	.+26     	; 0x9d00 <FloodFill+0x222>
    9ce6:	10 91 d4 0d 	lds	r17, 0x0DD4
    9cea:	11 50       	subi	r17, 0x01	; 1
    9cec:	02 50       	subi	r16, 0x02	; 2
    9cee:	81 2f       	mov	r24, r17
    9cf0:	60 2f       	mov	r22, r16
    9cf2:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9cf6:	48 2f       	mov	r20, r24
    9cf8:	81 2f       	mov	r24, r17
    9cfa:	60 2f       	mov	r22, r16
    9cfc:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
		 if(fy < fheight){SetVidGrid(fx-1,fy+0,GetGrid(fx-1,fy+0));}
    9d00:	00 91 a6 0c 	lds	r16, 0x0CA6
    9d04:	20 2f       	mov	r18, r16
    9d06:	33 27       	eor	r19, r19
    9d08:	27 fd       	sbrc	r18, 7
    9d0a:	30 95       	com	r19
    9d0c:	80 91 b0 0c 	lds	r24, 0x0CB0
    9d10:	90 e0       	ldi	r25, 0x00	; 0
    9d12:	28 17       	cp	r18, r24
    9d14:	39 07       	cpc	r19, r25
    9d16:	64 f4       	brge	.+24     	; 0x9d30 <FloodFill+0x252>
    9d18:	10 91 d4 0d 	lds	r17, 0x0DD4
    9d1c:	11 50       	subi	r17, 0x01	; 1
    9d1e:	81 2f       	mov	r24, r17
    9d20:	60 2f       	mov	r22, r16
    9d22:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9d26:	48 2f       	mov	r20, r24
    9d28:	81 2f       	mov	r24, r17
    9d2a:	60 2f       	mov	r22, r16
    9d2c:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>


			searchgrid[(uint8_t)(fx)][(uint8_t)(fy)] = 1;
    9d30:	20 91 a6 0c 	lds	r18, 0x0CA6
    9d34:	80 91 d4 0d 	lds	r24, 0x0DD4
    9d38:	90 e0       	ldi	r25, 0x00	; 0
    9d3a:	8c 9f       	mul	r24, r28
    9d3c:	f0 01       	movw	r30, r0
    9d3e:	8d 9f       	mul	r24, r29
    9d40:	f0 0d       	add	r31, r0
    9d42:	9c 9f       	mul	r25, r28
    9d44:	f0 0d       	add	r31, r0
    9d46:	11 24       	eor	r1, r1
    9d48:	e2 0f       	add	r30, r18
    9d4a:	f1 1d       	adc	r31, r1
    9d4c:	e5 5f       	subi	r30, 0xF5	; 245
    9d4e:	f5 4f       	sbci	r31, 0xF5	; 245
    9d50:	e0 82       	st	Z, r14
			c += 2;
    9d52:	82 e0       	ldi	r24, 0x02	; 2
    9d54:	f8 0e       	add	r15, r24
			hunt(c);
    9d56:	8f 2d       	mov	r24, r15
    9d58:	0e 94 14 4b 	call	0x9628	; 0x9628 <hunt>
			SetVidGrid(fx-1,fy-1,GetGrid(fx-1,fy-1));
    9d5c:	00 91 d4 0d 	lds	r16, 0x0DD4
    9d60:	01 50       	subi	r16, 0x01	; 1
    9d62:	10 91 a6 0c 	lds	r17, 0x0CA6
    9d66:	11 50       	subi	r17, 0x01	; 1
    9d68:	80 2f       	mov	r24, r16
    9d6a:	61 2f       	mov	r22, r17
    9d6c:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9d70:	48 2f       	mov	r20, r24
    9d72:	80 2f       	mov	r24, r16
    9d74:	61 2f       	mov	r22, r17
    9d76:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
		}
		
			SetVidGrid(fx-1,fy-1,GetGrid(fx-1,fy-1));
    9d7a:	10 91 d4 0d 	lds	r17, 0x0DD4
    9d7e:	11 50       	subi	r17, 0x01	; 1
    9d80:	00 91 a6 0c 	lds	r16, 0x0CA6
    9d84:	01 50       	subi	r16, 0x01	; 1
    9d86:	81 2f       	mov	r24, r17
    9d88:	60 2f       	mov	r22, r16
    9d8a:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9d8e:	48 2f       	mov	r20, r24
    9d90:	81 2f       	mov	r24, r17
    9d92:	60 2f       	mov	r22, r16
    9d94:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
	char c = -1;
	int iterations = 0;

//	WaitVsync(1);

	while(c < 0){
    9d98:	f7 fc       	sbrc	r15, 7
    9d9a:	04 cf       	rjmp	.-504    	; 0x9ba4 <FloodFill+0xc6>
		//	WaitVsync(1);
			iterations = 0;
		}
	}
	
}
    9d9c:	cd b7       	in	r28, 0x3d	; 61
    9d9e:	de b7       	in	r29, 0x3e	; 62
    9da0:	e9 e0       	ldi	r30, 0x09	; 9
    9da2:	0c 94 3b 5a 	jmp	0xb476	; 0xb476 <__epilogue_restores__+0x12>

00009da6 <DrawMenu>:
		}
	}
	
}

void DrawMenu(u8 x, u8 y, u8 w, u8 h){
    9da6:	a0 e0       	ldi	r26, 0x00	; 0
    9da8:	b0 e0       	ldi	r27, 0x00	; 0
    9daa:	e9 ed       	ldi	r30, 0xD9	; 217
    9dac:	fe e4       	ldi	r31, 0x4E	; 78
    9dae:	0c 94 1c 5a 	jmp	0xb438	; 0xb438 <__prologue_saves__+0xc>
    9db2:	b8 2e       	mov	r11, r24
    9db4:	d6 2e       	mov	r13, r22
    9db6:	14 2f       	mov	r17, r20
    9db8:	92 2e       	mov	r9, r18
	SetTile(x+0,y+0,23);//draw the corners
    9dba:	47 e1       	ldi	r20, 0x17	; 23
    9dbc:	50 e0       	ldi	r21, 0x00	; 0
    9dbe:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	SetTile(x+w,y+0,25);
    9dc2:	a1 2e       	mov	r10, r17
    9dc4:	ab 0c       	add	r10, r11
    9dc6:	8a 2d       	mov	r24, r10
    9dc8:	6d 2d       	mov	r22, r13
    9dca:	49 e1       	ldi	r20, 0x19	; 25
    9dcc:	50 e0       	ldi	r21, 0x00	; 0
    9dce:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	SetTile(x+0,y+h,28);
    9dd2:	c9 2c       	mov	r12, r9
    9dd4:	cd 0c       	add	r12, r13
    9dd6:	8b 2d       	mov	r24, r11
    9dd8:	6c 2d       	mov	r22, r12
    9dda:	4c e1       	ldi	r20, 0x1C	; 28
    9ddc:	50 e0       	ldi	r21, 0x00	; 0
    9dde:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	SetTile(x+w,y+h,29);
    9de2:	8a 2d       	mov	r24, r10
    9de4:	6c 2d       	mov	r22, r12
    9de6:	4d e1       	ldi	r20, 0x1D	; 29
    9de8:	50 e0       	ldi	r21, 0x00	; 0
    9dea:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>

	for(u8 i=x+1;i<x+w;i++){SetTile(i,y,24);SetTile(i,y+h,1);}//draw top and bottom
    9dee:	8b 2c       	mov	r8, r11
    9df0:	83 94       	inc	r8
    9df2:	08 2d       	mov	r16, r8
    9df4:	eb 2c       	mov	r14, r11
    9df6:	ff 24       	eor	r15, r15
    9df8:	e1 0e       	add	r14, r17
    9dfa:	f1 1c       	adc	r15, r1
    9dfc:	0d c0       	rjmp	.+26     	; 0x9e18 <DrawMenu+0x72>
    9dfe:	80 2f       	mov	r24, r16
    9e00:	6d 2d       	mov	r22, r13
    9e02:	48 e1       	ldi	r20, 0x18	; 24
    9e04:	50 e0       	ldi	r21, 0x00	; 0
    9e06:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    9e0a:	80 2f       	mov	r24, r16
    9e0c:	6c 2d       	mov	r22, r12
    9e0e:	41 e0       	ldi	r20, 0x01	; 1
    9e10:	50 e0       	ldi	r21, 0x00	; 0
    9e12:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    9e16:	0f 5f       	subi	r16, 0xFF	; 255
    9e18:	80 2f       	mov	r24, r16
    9e1a:	90 e0       	ldi	r25, 0x00	; 0
    9e1c:	8e 15       	cp	r24, r14
    9e1e:	9f 05       	cpc	r25, r15
    9e20:	74 f3       	brlt	.-36     	; 0x9dfe <DrawMenu+0x58>
	for(u8 i=y+1;i<y+h;i++){SetTile(x,i,26);SetTile(x+w,i,27);}
    9e22:	0d 2d       	mov	r16, r13
    9e24:	0f 5f       	subi	r16, 0xFF	; 255
    9e26:	10 2f       	mov	r17, r16
    9e28:	cd 2d       	mov	r28, r13
    9e2a:	d0 e0       	ldi	r29, 0x00	; 0
    9e2c:	c9 0d       	add	r28, r9
    9e2e:	d1 1d       	adc	r29, r1
    9e30:	0d c0       	rjmp	.+26     	; 0x9e4c <DrawMenu+0xa6>
    9e32:	8b 2d       	mov	r24, r11
    9e34:	61 2f       	mov	r22, r17
    9e36:	4a e1       	ldi	r20, 0x1A	; 26
    9e38:	50 e0       	ldi	r21, 0x00	; 0
    9e3a:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    9e3e:	8a 2d       	mov	r24, r10
    9e40:	61 2f       	mov	r22, r17
    9e42:	4b e1       	ldi	r20, 0x1B	; 27
    9e44:	50 e0       	ldi	r21, 0x00	; 0
    9e46:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    9e4a:	1f 5f       	subi	r17, 0xFF	; 255
    9e4c:	81 2f       	mov	r24, r17
    9e4e:	90 e0       	ldi	r25, 0x00	; 0
    9e50:	8c 17       	cp	r24, r28
    9e52:	9d 07       	cpc	r25, r29
    9e54:	74 f3       	brlt	.-36     	; 0x9e32 <DrawMenu+0x8c>
    9e56:	0d c0       	rjmp	.+26     	; 0x9e72 <DrawMenu+0xcc>

	for(u8 i=y+1;i<y+h;i++)
	for(u8 j=x+1;j<x+w;j++)
		SetTile(j,i,BLANKT);
    9e58:	81 2f       	mov	r24, r17
    9e5a:	60 2f       	mov	r22, r16
    9e5c:	4d e0       	ldi	r20, 0x0D	; 13
    9e5e:	50 e0       	ldi	r21, 0x00	; 0
    9e60:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>

	for(u8 i=x+1;i<x+w;i++){SetTile(i,y,24);SetTile(i,y+h,1);}//draw top and bottom
	for(u8 i=y+1;i<y+h;i++){SetTile(x,i,26);SetTile(x+w,i,27);}

	for(u8 i=y+1;i<y+h;i++)
	for(u8 j=x+1;j<x+w;j++)
    9e64:	1f 5f       	subi	r17, 0xFF	; 255
    9e66:	81 2f       	mov	r24, r17
    9e68:	90 e0       	ldi	r25, 0x00	; 0
    9e6a:	8e 15       	cp	r24, r14
    9e6c:	9f 05       	cpc	r25, r15
    9e6e:	a4 f3       	brlt	.-24     	; 0x9e58 <DrawMenu+0xb2>
	SetTile(x+w,y+h,29);

	for(u8 i=x+1;i<x+w;i++){SetTile(i,y,24);SetTile(i,y+h,1);}//draw top and bottom
	for(u8 i=y+1;i<y+h;i++){SetTile(x,i,26);SetTile(x+w,i,27);}

	for(u8 i=y+1;i<y+h;i++)
    9e70:	0f 5f       	subi	r16, 0xFF	; 255
    9e72:	80 2f       	mov	r24, r16
    9e74:	90 e0       	ldi	r25, 0x00	; 0
    9e76:	8c 17       	cp	r24, r28
    9e78:	9d 07       	cpc	r25, r29
    9e7a:	14 f4       	brge	.+4      	; 0x9e80 <DrawMenu+0xda>
    9e7c:	18 2d       	mov	r17, r8
    9e7e:	f3 cf       	rjmp	.-26     	; 0x9e66 <DrawMenu+0xc0>
	for(u8 j=x+1;j<x+w;j++)
		SetTile(j,i,BLANKT);

	
}
    9e80:	cd b7       	in	r28, 0x3d	; 61
    9e82:	de b7       	in	r29, 0x3e	; 62
    9e84:	ec e0       	ldi	r30, 0x0C	; 12
    9e86:	0c 94 38 5a 	jmp	0xb470	; 0xb470 <__epilogue_restores__+0xc>

00009e8a <printnum>:
	for(u8 x=0;x<MAXWIDTH;x++)
	for(u8 y=0;y<MAXHEIGHT;y++)
		vram[((y+7)*30)+x+1] = searchgrid[x][y];
}

void printnum(u8 x,u8 y, int val,bool zeropad){
    9e8a:	ef 92       	push	r14
    9e8c:	ff 92       	push	r15
    9e8e:	0f 93       	push	r16
    9e90:	1f 93       	push	r17
    9e92:	cf 93       	push	r28
    9e94:	df 93       	push	r29
    9e96:	18 2f       	mov	r17, r24
    9e98:	f6 2e       	mov	r15, r22
    9e9a:	ea 01       	movw	r28, r20
    9e9c:	e2 2e       	mov	r14, r18
    9e9e:	00 e0       	ldi	r16, 0x00	; 0
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
		if(val>0 || i==0){
    9ea0:	1c 16       	cp	r1, r28
    9ea2:	1d 06       	cpc	r1, r29
    9ea4:	14 f0       	brlt	.+4      	; 0x9eaa <printnum+0x20>
    9ea6:	00 23       	and	r16, r16
    9ea8:	71 f4       	brne	.+28     	; 0x9ec6 <printnum+0x3c>
			SetTile(x--,y,c+ZEROSTART);
    9eaa:	21 2f       	mov	r18, r17
    9eac:	11 50       	subi	r17, 0x01	; 1
    9eae:	ce 01       	movw	r24, r28
    9eb0:	6a e0       	ldi	r22, 0x0A	; 10
    9eb2:	70 e0       	ldi	r23, 0x00	; 0
    9eb4:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    9eb8:	48 2f       	mov	r20, r24
    9eba:	50 e0       	ldi	r21, 0x00	; 0
    9ebc:	49 57       	subi	r20, 0x79	; 121
    9ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    9ec0:	82 2f       	mov	r24, r18
    9ec2:	6f 2d       	mov	r22, r15
    9ec4:	07 c0       	rjmp	.+14     	; 0x9ed4 <printnum+0x4a>
		}else{
			if(zeropad){
    9ec6:	ee 20       	and	r14, r14
    9ec8:	39 f0       	breq	.+14     	; 0x9ed8 <printnum+0x4e>
				SetTile(x--,y,ZEROSTART);
    9eca:	81 2f       	mov	r24, r17
    9ecc:	11 50       	subi	r17, 0x01	; 1
    9ece:	6f 2d       	mov	r22, r15
    9ed0:	47 e8       	ldi	r20, 0x87	; 135
    9ed2:	50 e0       	ldi	r21, 0x00	; 0
    9ed4:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
}

void printnum(u8 x,u8 y, int val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    9ed8:	0f 5f       	subi	r16, 0xFF	; 255
    9eda:	03 30       	cpi	r16, 0x03	; 3
    9edc:	39 f0       	breq	.+14     	; 0x9eec <printnum+0x62>
				SetTile(x--,y,ZEROSTART);
			}else{
				//SetTile(x--,y,ZEROSTART);
			}
		}
		val=val/10;
    9ede:	ce 01       	movw	r24, r28
    9ee0:	6a e0       	ldi	r22, 0x0A	; 10
    9ee2:	70 e0       	ldi	r23, 0x00	; 0
    9ee4:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    9ee8:	eb 01       	movw	r28, r22
    9eea:	da cf       	rjmp	.-76     	; 0x9ea0 <printnum+0x16>
	}
		
}
    9eec:	cd b7       	in	r28, 0x3d	; 61
    9eee:	de b7       	in	r29, 0x3e	; 62
    9ef0:	e6 e0       	ldi	r30, 0x06	; 6
    9ef2:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <__epilogue_restores__+0x18>

00009ef6 <print>:

void print(int x,int y,const char *string){
    9ef6:	ff 92       	push	r15
    9ef8:	0f 93       	push	r16
    9efa:	1f 93       	push	r17
    9efc:	cf 93       	push	r28
    9efe:	df 93       	push	r29
    9f00:	f6 2e       	mov	r15, r22
    9f02:	8a 01       	movw	r16, r20
    9f04:	ec 01       	movw	r28, r24
    9f06:	03 c0       	rjmp	.+6      	; 0x9f0e <print+0x18>
    9f08:	0f 5f       	subi	r16, 0xFF	; 255
    9f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    9f0c:	21 96       	adiw	r28, 0x01	; 1

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    9f0e:	f8 01       	movw	r30, r16
    9f10:	44 91       	lpm	r20, Z+
		if(c!=0){
    9f12:	44 23       	and	r20, r20
    9f14:	f1 f0       	breq	.+60     	; 0x9f52 <print+0x5c>
			 if(c == ' '){c = '3';}//convert space for funky font
    9f16:	40 32       	cpi	r20, 0x20	; 32
    9f18:	79 f0       	breq	.+30     	; 0x9f38 <print+0x42>
			else if(c >= '0' && c <= '9'){printnum(x++,y,c-'0',false);continue;}
    9f1a:	84 2f       	mov	r24, r20
    9f1c:	80 53       	subi	r24, 0x30	; 48
    9f1e:	8a 30       	cpi	r24, 0x0A	; 10
    9f20:	60 f4       	brcc	.+24     	; 0x9f3a <print+0x44>
    9f22:	55 27       	eor	r21, r21
    9f24:	47 fd       	sbrc	r20, 7
    9f26:	50 95       	com	r21
    9f28:	40 53       	subi	r20, 0x30	; 48
    9f2a:	50 40       	sbci	r21, 0x00	; 0
    9f2c:	8c 2f       	mov	r24, r28
    9f2e:	6f 2d       	mov	r22, r15
    9f30:	20 e0       	ldi	r18, 0x00	; 0
    9f32:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
    9f36:	e8 cf       	rjmp	.-48     	; 0x9f08 <print+0x12>
    9f38:	43 e3       	ldi	r20, 0x33	; 51
			c=((c&127)-32) + RAM_TILES_COUNT;			
    9f3a:	4f 77       	andi	r20, 0x7F	; 127
    9f3c:	4f 50       	subi	r20, 0x0F	; 15
			SetTile(x++,y,c+FONTSTART-17);
    9f3e:	55 27       	eor	r21, r21
    9f40:	47 fd       	sbrc	r20, 7
    9f42:	50 95       	com	r21
    9f44:	41 5a       	subi	r20, 0xA1	; 161
    9f46:	5f 4f       	sbci	r21, 0xFF	; 255
    9f48:	8c 2f       	mov	r24, r28
    9f4a:	6f 2d       	mov	r22, r15
    9f4c:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    9f50:	db cf       	rjmp	.-74     	; 0x9f08 <print+0x12>
		}else{
			break;
		}
	}
	
}
    9f52:	cd b7       	in	r28, 0x3d	; 61
    9f54:	de b7       	in	r29, 0x3e	; 62
    9f56:	e5 e0       	ldi	r30, 0x05	; 5
    9f58:	0c 94 3f 5a 	jmp	0xb47e	; 0xb47e <__epilogue_restores__+0x1a>

00009f5c <InitField>:
			for(uint8_t y=0;y<(fheight*2);y++)
				SetTile((fwidth*2)+1+(xoff*2),y+7+(yoff*2),GRIDSTART+6);
	}
}

void InitField(){
    9f5c:	6f 92       	push	r6
    9f5e:	7f 92       	push	r7
    9f60:	9f 92       	push	r9
    9f62:	af 92       	push	r10
    9f64:	bf 92       	push	r11
    9f66:	cf 92       	push	r12
    9f68:	df 92       	push	r13
    9f6a:	ef 92       	push	r14
    9f6c:	ff 92       	push	r15
    9f6e:	0f 93       	push	r16
    9f70:	1f 93       	push	r17
    9f72:	df 93       	push	r29
    9f74:	cf 93       	push	r28
    9f76:	0f 92       	push	r0
    9f78:	cd b7       	in	r28, 0x3d	; 61
    9f7a:	de b7       	in	r29, 0x3e	; 62
    9f7c:	00 e0       	ldi	r16, 0x00	; 0
    9f7e:	0f c0       	rjmp	.+30     	; 0x9f9e <InitField+0x42>
	uint8_t x,y;

	//clear the field
	for(y=0;y<MAXHEIGHT;y++)
	for(x=0;x<MAXWIDTH;x++)
		SetGrid(x,y,0);
    9f80:	81 2f       	mov	r24, r17
    9f82:	60 2f       	mov	r22, r16
    9f84:	40 e0       	ldi	r20, 0x00	; 0
    9f86:	0e 94 07 4a 	call	0x940e	; 0x940e <SetGrid>
void InitField(){
	uint8_t x,y;

	//clear the field
	for(y=0;y<MAXHEIGHT;y++)
	for(x=0;x<MAXWIDTH;x++)
    9f8a:	1f 5f       	subi	r17, 0xFF	; 255
    9f8c:	1c 31       	cpi	r17, 0x1C	; 28
    9f8e:	c1 f7       	brne	.-16     	; 0x9f80 <InitField+0x24>

void InitField(){
	uint8_t x,y;

	//clear the field
	for(y=0;y<MAXHEIGHT;y++)
    9f90:	0f 5f       	subi	r16, 0xFF	; 255
    9f92:	04 31       	cpi	r16, 0x14	; 20
    9f94:	21 f4       	brne	.+8      	; 0x9f9e <InitField+0x42>
    9f96:	00 e0       	ldi	r16, 0x00	; 0
    9f98:	10 e0       	ldi	r17, 0x00	; 0
    9f9a:	ff 24       	eor	r15, r15
    9f9c:	2a c0       	rjmp	.+84     	; 0x9ff2 <InitField+0x96>
    9f9e:	10 e0       	ldi	r17, 0x00	; 0
    9fa0:	ef cf       	rjmp	.-34     	; 0x9f80 <InitField+0x24>

	//WaitVsync(1);	

	for(uint8_t i=0;i<nummines;i++){
		do{
			x = prand()%fwidth;
    9fa2:	0e 94 de 49 	call	0x93bc	; 0x93bc <prand>
    9fa6:	60 91 ba 0c 	lds	r22, 0x0CBA
    9faa:	70 e0       	ldi	r23, 0x00	; 0
    9fac:	0e 94 ef 59 	call	0xb3de	; 0xb3de <__udivmodhi4>
    9fb0:	d8 2e       	mov	r13, r24
			y = prand()%fheight;
    9fb2:	0e 94 de 49 	call	0x93bc	; 0x93bc <prand>
    9fb6:	60 91 b0 0c 	lds	r22, 0x0CB0
    9fba:	70 e0       	ldi	r23, 0x00	; 0
    9fbc:	0e 94 ef 59 	call	0xb3de	; 0xb3de <__udivmodhi4>
    9fc0:	e8 2e       	mov	r14, r24
		 if(++iteration > 8000){//avoid running into vsync
    9fc2:	0f 5f       	subi	r16, 0xFF	; 255
    9fc4:	1f 4f       	sbci	r17, 0xFF	; 255
    9fc6:	8f e1       	ldi	r24, 0x1F	; 31
    9fc8:	01 34       	cpi	r16, 0x41	; 65
    9fca:	18 07       	cpc	r17, r24
    9fcc:	34 f0       	brlt	.+12     	; 0x9fda <InitField+0x7e>
			 iteration = 0;
			WaitVsync(1);
    9fce:	81 e0       	ldi	r24, 0x01	; 1
    9fd0:	90 e0       	ldi	r25, 0x00	; 0
    9fd2:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    9fd6:	00 e0       	ldi	r16, 0x00	; 0
    9fd8:	10 e0       	ldi	r17, 0x00	; 0
		 }
		}
		while(GetGrid(x,y) == MINE);
    9fda:	8d 2d       	mov	r24, r13
    9fdc:	6e 2d       	mov	r22, r14
    9fde:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    9fe2:	8a 30       	cpi	r24, 0x0A	; 10
    9fe4:	f1 f2       	breq	.-68     	; 0x9fa2 <InitField+0x46>
		
		SetGrid(x,y,MINE);
    9fe6:	8d 2d       	mov	r24, r13
    9fe8:	6e 2d       	mov	r22, r14
    9fea:	4a e0       	ldi	r20, 0x0A	; 10
    9fec:	0e 94 07 4a 	call	0x940e	; 0x940e <SetGrid>
	//randomly place the mines in an open spot
	int iteration = 0;

	//WaitVsync(1);	

	for(uint8_t i=0;i<nummines;i++){
    9ff0:	f3 94       	inc	r15
    9ff2:	80 91 af 0c 	lds	r24, 0x0CAF
    9ff6:	f8 16       	cp	r15, r24
    9ff8:	a0 f2       	brcs	.-88     	; 0x9fa2 <InitField+0x46>
    9ffa:	ee 24       	eor	r14, r14
    9ffc:	48 c0       	rjmp	.+144    	; 0xa08e <InitField+0x132>
	}

	
	for(uint8_t row=0;row<fwidth;row++)
	for(uint8_t col=0;col<fheight;col++){
		if(GetGrid(row,col) != MINE){//No Mine
    9ffe:	8e 2d       	mov	r24, r14
    a000:	6f 2d       	mov	r22, r15
    a002:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    a006:	8a 30       	cpi	r24, 0x0A	; 10
    a008:	d9 f1       	breq	.+118    	; 0xa080 <InitField+0x124>
			uint8_t i,num=0,temp,ecol,erow,startrow;
		 temp=col==0?col:col-1;
    a00a:	ff 20       	and	r15, r15
    a00c:	11 f4       	brne	.+4      	; 0xa012 <InitField+0xb6>
    a00e:	bb 24       	eor	r11, r11
    a010:	02 c0       	rjmp	.+4      	; 0xa016 <InitField+0xba>
    a012:	bf 2c       	mov	r11, r15
    a014:	ba 94       	dec	r11
		 ecol=col!=fheight-1?col+1:col;
    a016:	2f 2d       	mov	r18, r15
    a018:	30 e0       	ldi	r19, 0x00	; 0
    a01a:	81 2f       	mov	r24, r17
    a01c:	90 e0       	ldi	r25, 0x00	; 0
    a01e:	01 97       	sbiw	r24, 0x01	; 1
    a020:	28 17       	cp	r18, r24
    a022:	39 07       	cpc	r19, r25
    a024:	11 f4       	brne	.+4      	; 0xa02a <InitField+0xce>
    a026:	cf 2c       	mov	r12, r15
    a028:	02 c0       	rjmp	.+4      	; 0xa02e <InitField+0xd2>
    a02a:	cf 2c       	mov	r12, r15
    a02c:	c3 94       	inc	r12
		 startrow=row==0?row:row-1;
    a02e:	ee 20       	and	r14, r14
    a030:	11 f4       	brne	.+4      	; 0xa036 <InitField+0xda>
    a032:	20 e0       	ldi	r18, 0x00	; 0
    a034:	01 c0       	rjmp	.+2      	; 0xa038 <InitField+0xdc>
    a036:	2a 2d       	mov	r18, r10
		 erow=row==fwidth-1?row:row+1;
    a038:	80 91 ba 0c 	lds	r24, 0x0CBA
    a03c:	90 e0       	ldi	r25, 0x00	; 0
    a03e:	01 97       	sbiw	r24, 0x01	; 1
    a040:	68 16       	cp	r6, r24
    a042:	79 06       	cpc	r7, r25
    a044:	11 f4       	brne	.+4      	; 0xa04a <InitField+0xee>
    a046:	de 2c       	mov	r13, r14
    a048:	01 c0       	rjmp	.+2      	; 0xa04c <InitField+0xf0>
    a04a:	d9 2c       	mov	r13, r9
    a04c:	02 2f       	mov	r16, r18
    a04e:	90 e0       	ldi	r25, 0x00	; 0
    a050:	0d c0       	rjmp	.+26     	; 0xa06c <InitField+0x110>
		 
		 for(i=startrow;i<=erow;i++)
		 for(uint8_t j=temp;j<=ecol;j++)
			 if(GetGrid(i,j)==MINE)
    a052:	80 2f       	mov	r24, r16
    a054:	61 2f       	mov	r22, r17
    a056:	99 83       	std	Y+1, r25	; 0x01
    a058:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    a05c:	99 81       	ldd	r25, Y+1	; 0x01
    a05e:	8a 30       	cpi	r24, 0x0A	; 10
    a060:	09 f4       	brne	.+2      	; 0xa064 <InitField+0x108>
		 		num++;
    a062:	9f 5f       	subi	r25, 0xFF	; 255
		 ecol=col!=fheight-1?col+1:col;
		 startrow=row==0?row:row-1;
		 erow=row==fwidth-1?row:row+1;
		 
		 for(i=startrow;i<=erow;i++)
		 for(uint8_t j=temp;j<=ecol;j++)
    a064:	1f 5f       	subi	r17, 0xFF	; 255
    a066:	c1 16       	cp	r12, r17
    a068:	a0 f7       	brcc	.-24     	; 0xa052 <InitField+0xf6>
		 temp=col==0?col:col-1;
		 ecol=col!=fheight-1?col+1:col;
		 startrow=row==0?row:row-1;
		 erow=row==fwidth-1?row:row+1;
		 
		 for(i=startrow;i<=erow;i++)
    a06a:	0f 5f       	subi	r16, 0xFF	; 255
    a06c:	d0 16       	cp	r13, r16
    a06e:	10 f0       	brcs	.+4      	; 0xa074 <InitField+0x118>
    a070:	1b 2d       	mov	r17, r11
    a072:	f9 cf       	rjmp	.-14     	; 0xa066 <InitField+0x10a>
		 for(uint8_t j=temp;j<=ecol;j++)
			 if(GetGrid(i,j)==MINE)
		 		num++;
		 
		 SetGrid(row,col,num+1);
    a074:	9f 5f       	subi	r25, 0xFF	; 255
    a076:	8e 2d       	mov	r24, r14
    a078:	6f 2d       	mov	r22, r15
    a07a:	49 2f       	mov	r20, r25
    a07c:	0e 94 07 4a 	call	0x940e	; 0x940e <SetGrid>
		SetGrid(x,y,MINE);
	}

	
	for(uint8_t row=0;row<fwidth;row++)
	for(uint8_t col=0;col<fheight;col++){
    a080:	f3 94       	inc	r15
    a082:	10 91 b0 0c 	lds	r17, 0x0CB0
    a086:	f1 16       	cp	r15, r17
    a088:	08 f4       	brcc	.+2      	; 0xa08c <InitField+0x130>
    a08a:	b9 cf       	rjmp	.-142    	; 0x9ffe <InitField+0xa2>
		
		SetGrid(x,y,MINE);
	}

	
	for(uint8_t row=0;row<fwidth;row++)
    a08c:	e3 94       	inc	r14
    a08e:	80 91 ba 0c 	lds	r24, 0x0CBA
    a092:	e8 16       	cp	r14, r24
    a094:	40 f4       	brcc	.+16     	; 0xa0a6 <InitField+0x14a>
    a096:	ff 24       	eor	r15, r15
		if(GetGrid(row,col) != MINE){//No Mine
			uint8_t i,num=0,temp,ecol,erow,startrow;
		 temp=col==0?col:col-1;
		 ecol=col!=fheight-1?col+1:col;
		 startrow=row==0?row:row-1;
		 erow=row==fwidth-1?row:row+1;
    a098:	6e 2c       	mov	r6, r14
    a09a:	77 24       	eor	r7, r7
    a09c:	9e 2c       	mov	r9, r14
    a09e:	93 94       	inc	r9
	for(uint8_t col=0;col<fheight;col++){
		if(GetGrid(row,col) != MINE){//No Mine
			uint8_t i,num=0,temp,ecol,erow,startrow;
		 temp=col==0?col:col-1;
		 ecol=col!=fheight-1?col+1:col;
		 startrow=row==0?row:row-1;
    a0a0:	ae 2c       	mov	r10, r14
    a0a2:	aa 94       	dec	r10
    a0a4:	ee cf       	rjmp	.-36     	; 0xa082 <InitField+0x126>
		 		num++;
		 
		 SetGrid(row,col,num+1);
		}
	}
}
    a0a6:	0f 90       	pop	r0
    a0a8:	cf 91       	pop	r28
    a0aa:	df 91       	pop	r29
    a0ac:	1f 91       	pop	r17
    a0ae:	0f 91       	pop	r16
    a0b0:	ff 90       	pop	r15
    a0b2:	ef 90       	pop	r14
    a0b4:	df 90       	pop	r13
    a0b6:	cf 90       	pop	r12
    a0b8:	bf 90       	pop	r11
    a0ba:	af 90       	pop	r10
    a0bc:	9f 90       	pop	r9
    a0be:	7f 90       	pop	r7
    a0c0:	6f 90       	pop	r6
    a0c2:	08 95       	ret

0000a0c4 <DrawOpeningMenu>:
		SetTile(j,i,BLANKT);

	
}

void DrawOpeningMenu(u8 x, u8 y, u8 w, u8 h, int speed){
    a0c4:	a0 e0       	ldi	r26, 0x00	; 0
    a0c6:	b0 e0       	ldi	r27, 0x00	; 0
    a0c8:	e8 e6       	ldi	r30, 0x68	; 104
    a0ca:	f0 e5       	ldi	r31, 0x50	; 80
    a0cc:	0c 94 1b 5a 	jmp	0xb436	; 0xb436 <__prologue_saves__+0xa>
    a0d0:	98 2e       	mov	r9, r24
    a0d2:	a6 2e       	mov	r10, r22
    a0d4:	74 2e       	mov	r7, r20
    a0d6:	82 2e       	mov	r8, r18
	SaveBG(x,y);
    a0d8:	90 e0       	ldi	r25, 0x00	; 0
    a0da:	70 e0       	ldi	r23, 0x00	; 0
    a0dc:	0e 94 78 49 	call	0x92f0	; 0x92f0 <SaveBG>

	u8 mt;
	u8 count;
	mt = 1;
	count = speed;
    a0e0:	b0 2e       	mov	r11, r16
    a0e2:	f0 2e       	mov	r15, r16
    a0e4:	ee 24       	eor	r14, r14
    a0e6:	e3 94       	inc	r14
	while(mt<w+1){//open horizontally
    a0e8:	c7 2c       	mov	r12, r7
    a0ea:	dd 24       	eor	r13, r13
		DrawMenu(x,y,mt,1);
		if(speed < 0){
			WaitVsync(abs(speed));
    a0ec:	cc 27       	eor	r28, r28
    a0ee:	dd 27       	eor	r29, r29
    a0f0:	c0 1b       	sub	r28, r16
    a0f2:	d1 0b       	sbc	r29, r17
    a0f4:	16 c0       	rjmp	.+44     	; 0xa122 <DrawOpeningMenu+0x5e>
	u8 mt;
	u8 count;
	mt = 1;
	count = speed;
	while(mt<w+1){//open horizontally
		DrawMenu(x,y,mt,1);
    a0f6:	89 2d       	mov	r24, r9
    a0f8:	6a 2d       	mov	r22, r10
    a0fa:	4e 2d       	mov	r20, r14
    a0fc:	21 e0       	ldi	r18, 0x01	; 1
    a0fe:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <DrawMenu>
		if(speed < 0){
    a102:	17 ff       	sbrs	r17, 7
    a104:	04 c0       	rjmp	.+8      	; 0xa10e <DrawOpeningMenu+0x4a>
			WaitVsync(abs(speed));
    a106:	ce 01       	movw	r24, r28
    a108:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a10c:	09 c0       	rjmp	.+18     	; 0xa120 <DrawOpeningMenu+0x5c>
		}
		else{
			if(!count){WaitVsync(1);count=speed;}else{count--;}
    a10e:	ff 20       	and	r15, r15
    a110:	31 f4       	brne	.+12     	; 0xa11e <DrawOpeningMenu+0x5a>
    a112:	81 e0       	ldi	r24, 0x01	; 1
    a114:	90 e0       	ldi	r25, 0x00	; 0
    a116:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a11a:	fb 2c       	mov	r15, r11
    a11c:	01 c0       	rjmp	.+2      	; 0xa120 <DrawOpeningMenu+0x5c>
    a11e:	fa 94       	dec	r15
		}
		mt++;
    a120:	e3 94       	inc	r14

	u8 mt;
	u8 count;
	mt = 1;
	count = speed;
	while(mt<w+1){//open horizontally
    a122:	8e 2d       	mov	r24, r14
    a124:	90 e0       	ldi	r25, 0x00	; 0
    a126:	c8 16       	cp	r12, r24
    a128:	d9 06       	cpc	r13, r25
    a12a:	2c f7       	brge	.-54     	; 0xa0f6 <DrawOpeningMenu+0x32>
    a12c:	fb 2c       	mov	r15, r11
    a12e:	ee 24       	eor	r14, r14
    a130:	e3 94       	inc	r14
		}
		mt++;
	}
	mt = 1;
	count = speed;
	while(mt<h+1){
    a132:	c8 2c       	mov	r12, r8
    a134:	dd 24       	eor	r13, r13
		DrawMenu(x,y,w,mt);
		if(speed < 0){
			WaitVsync(abs(speed));
    a136:	cc 27       	eor	r28, r28
    a138:	dd 27       	eor	r29, r29
    a13a:	c0 1b       	sub	r28, r16
    a13c:	d1 0b       	sbc	r29, r17
    a13e:	16 c0       	rjmp	.+44     	; 0xa16c <DrawOpeningMenu+0xa8>
		mt++;
	}
	mt = 1;
	count = speed;
	while(mt<h+1){
		DrawMenu(x,y,w,mt);
    a140:	89 2d       	mov	r24, r9
    a142:	6a 2d       	mov	r22, r10
    a144:	47 2d       	mov	r20, r7
    a146:	2e 2d       	mov	r18, r14
    a148:	0e 94 d3 4e 	call	0x9da6	; 0x9da6 <DrawMenu>
		if(speed < 0){
    a14c:	17 ff       	sbrs	r17, 7
    a14e:	04 c0       	rjmp	.+8      	; 0xa158 <DrawOpeningMenu+0x94>
			WaitVsync(abs(speed));
    a150:	ce 01       	movw	r24, r28
    a152:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a156:	09 c0       	rjmp	.+18     	; 0xa16a <DrawOpeningMenu+0xa6>
		}
		else{
			if(!count){WaitVsync(1);count=speed;}else{count--;}
    a158:	ff 20       	and	r15, r15
    a15a:	31 f4       	brne	.+12     	; 0xa168 <DrawOpeningMenu+0xa4>
    a15c:	81 e0       	ldi	r24, 0x01	; 1
    a15e:	90 e0       	ldi	r25, 0x00	; 0
    a160:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a164:	fb 2c       	mov	r15, r11
    a166:	01 c0       	rjmp	.+2      	; 0xa16a <DrawOpeningMenu+0xa6>
    a168:	fa 94       	dec	r15
		}
		mt++;
    a16a:	e3 94       	inc	r14
		}
		mt++;
	}
	mt = 1;
	count = speed;
	while(mt<h+1){
    a16c:	8e 2d       	mov	r24, r14
    a16e:	90 e0       	ldi	r25, 0x00	; 0
    a170:	c8 16       	cp	r12, r24
    a172:	d9 06       	cpc	r13, r25
    a174:	2c f7       	brge	.-54     	; 0xa140 <DrawOpeningMenu+0x7c>
		else{
			if(!count){WaitVsync(1);count=speed;}else{count--;}
		}
		mt++;
	}
}
    a176:	cd b7       	in	r28, 0x3d	; 61
    a178:	de b7       	in	r29, 0x3e	; 62
    a17a:	ed e0       	ldi	r30, 0x0D	; 13
    a17c:	0c 94 37 5a 	jmp	0xb46e	; 0xb46e <__epilogue_restores__+0xa>

0000a180 <ScoreMenu>:
		WaitVsync(1);
	}
	*/
}

void ScoreMenu(){
    a180:	ff 92       	push	r15
    a182:	0f 93       	push	r16
    a184:	1f 93       	push	r17
	flags |= GUIOPEN;
    a186:	80 91 d3 0d 	lds	r24, 0x0DD3
    a18a:	80 62       	ori	r24, 0x20	; 32
    a18c:	80 93 d3 0d 	sts	0x0DD3, r24
	DrawOpeningMenu(5,9,19,8,0);
    a190:	85 e0       	ldi	r24, 0x05	; 5
    a192:	69 e0       	ldi	r22, 0x09	; 9
    a194:	43 e1       	ldi	r20, 0x13	; 19
    a196:	28 e0       	ldi	r18, 0x08	; 8
    a198:	00 e0       	ldi	r16, 0x00	; 0
    a19a:	10 e0       	ldi	r17, 0x00	; 0
    a19c:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <DrawOpeningMenu>

	print(6,10,PSTR("BEST MINE SWEEPERS"));
    a1a0:	86 e0       	ldi	r24, 0x06	; 6
    a1a2:	90 e0       	ldi	r25, 0x00	; 0
    a1a4:	6a e0       	ldi	r22, 0x0A	; 10
    a1a6:	70 e0       	ldi	r23, 0x00	; 0
    a1a8:	4c ef       	ldi	r20, 0xFC	; 252
    a1aa:	53 e7       	ldi	r21, 0x73	; 115
    a1ac:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(6,12,PSTR("NOVICE"));
    a1b0:	86 e0       	ldi	r24, 0x06	; 6
    a1b2:	90 e0       	ldi	r25, 0x00	; 0
    a1b4:	6c e0       	ldi	r22, 0x0C	; 12
    a1b6:	70 e0       	ldi	r23, 0x00	; 0
    a1b8:	45 ef       	ldi	r20, 0xF5	; 245
    a1ba:	53 e7       	ldi	r21, 0x73	; 115
    a1bc:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(6,13,PSTR("MIDDLE"));
    a1c0:	86 e0       	ldi	r24, 0x06	; 6
    a1c2:	90 e0       	ldi	r25, 0x00	; 0
    a1c4:	6d e0       	ldi	r22, 0x0D	; 13
    a1c6:	70 e0       	ldi	r23, 0x00	; 0
    a1c8:	4e ee       	ldi	r20, 0xEE	; 238
    a1ca:	53 e7       	ldi	r21, 0x73	; 115
    a1cc:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(6,14,PSTR("EXPERT"));
    a1d0:	86 e0       	ldi	r24, 0x06	; 6
    a1d2:	90 e0       	ldi	r25, 0x00	; 0
    a1d4:	6e e0       	ldi	r22, 0x0E	; 14
    a1d6:	70 e0       	ldi	r23, 0x00	; 0
    a1d8:	47 ee       	ldi	r20, 0xE7	; 231
    a1da:	53 e7       	ldi	r21, 0x73	; 115
    a1dc:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(6,16,PSTR("        OK"));
    a1e0:	86 e0       	ldi	r24, 0x06	; 6
    a1e2:	90 e0       	ldi	r25, 0x00	; 0
    a1e4:	60 e1       	ldi	r22, 0x10	; 16
    a1e6:	70 e0       	ldi	r23, 0x00	; 0
    a1e8:	4c ed       	ldi	r20, 0xDC	; 220
    a1ea:	53 e7       	ldi	r21, 0x73	; 115
    a1ec:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    a1f0:	1c e0       	ldi	r17, 0x0C	; 12
    a1f2:	f1 2e       	mov	r15, r17
	
	for(u8 i=0;i<3;i++){
		LoadHighScore(i);	
    a1f4:	8f 2d       	mov	r24, r15
    a1f6:	8c 50       	subi	r24, 0x0C	; 12
    a1f8:	0e 94 f6 4b 	call	0x97ec	; 0x97ec <LoadHighScore>
		printnum(15,12+i,time,true);
    a1fc:	40 91 b4 0c 	lds	r20, 0x0CB4
    a200:	50 91 b5 0c 	lds	r21, 0x0CB5
    a204:	8f e0       	ldi	r24, 0x0F	; 15
    a206:	6f 2d       	mov	r22, r15
    a208:	21 e0       	ldi	r18, 0x01	; 1
    a20a:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
    a20e:	00 e0       	ldi	r16, 0x00	; 0
    a210:	10 e0       	ldi	r17, 0x00	; 0

		for(u8 j=0;j<7;j++){
			if(name[j] == ' ')
    a212:	f8 01       	movw	r30, r16
    a214:	e9 5e       	subi	r30, 0xE9	; 233
    a216:	fe 4f       	sbci	r31, 0xFE	; 254
    a218:	40 81       	ld	r20, Z
    a21a:	40 32       	cpi	r20, 0x20	; 32
    a21c:	51 f0       	breq	.+20     	; 0xa232 <ScoreMenu+0xb2>
			 continue;
			//else if(name[j] >= '0' && name[j] <= '9')
			// printnum(15+j,12+i,name[j],false);

		 SetTile(17+j,12+i,FONTSTART+name[j]-32);
    a21e:	55 27       	eor	r21, r21
    a220:	47 fd       	sbrc	r20, 7
    a222:	50 95       	com	r21
    a224:	40 5b       	subi	r20, 0xB0	; 176
    a226:	5f 4f       	sbci	r21, 0xFF	; 255
    a228:	80 2f       	mov	r24, r16
    a22a:	8f 5e       	subi	r24, 0xEF	; 239
    a22c:	6f 2d       	mov	r22, r15
    a22e:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    a232:	0f 5f       	subi	r16, 0xFF	; 255
    a234:	1f 4f       	sbci	r17, 0xFF	; 255
	
	for(u8 i=0;i<3;i++){
		LoadHighScore(i);	
		printnum(15,12+i,time,true);

		for(u8 j=0;j<7;j++){
    a236:	07 30       	cpi	r16, 0x07	; 7
    a238:	11 05       	cpc	r17, r1
    a23a:	59 f7       	brne	.-42     	; 0xa212 <ScoreMenu+0x92>
    a23c:	f3 94       	inc	r15
	print(6,12,PSTR("NOVICE"));
	print(6,13,PSTR("MIDDLE"));
	print(6,14,PSTR("EXPERT"));
	print(6,16,PSTR("        OK"));
	
	for(u8 i=0;i<3;i++){
    a23e:	8f e0       	ldi	r24, 0x0F	; 15
    a240:	f8 16       	cp	r15, r24
    a242:	c1 f6       	brne	.-80     	; 0xa1f4 <ScoreMenu+0x74>
}

void DrawCursor(){
	sprites[9].x = mx;
	sprites[9].y = my;
	sprites[9].tileIndex = 28;
    a244:	1c e1       	ldi	r17, 0x1C	; 28
	}

	while(true){
		Input();
		
		if(mlb && !mlbwd && mx >= 100 && mx <= 200 && my >= 100 && my <= 200){//ok button
    a246:	80 91 a4 0c 	lds	r24, 0x0CA4
    a24a:	88 23       	and	r24, r24
    a24c:	d1 f0       	breq	.+52     	; 0xa282 <ScoreMenu+0x102>
    a24e:	80 91 b3 0c 	lds	r24, 0x0CB3
    a252:	88 23       	and	r24, r24
    a254:	b1 f4       	brne	.+44     	; 0xa282 <ScoreMenu+0x102>
    a256:	80 91 d6 0d 	lds	r24, 0x0DD6
    a25a:	84 36       	cpi	r24, 0x64	; 100
    a25c:	90 f0       	brcs	.+36     	; 0xa282 <ScoreMenu+0x102>
    a25e:	89 3c       	cpi	r24, 0xC9	; 201
    a260:	80 f4       	brcc	.+32     	; 0xa282 <ScoreMenu+0x102>
    a262:	80 91 ac 0c 	lds	r24, 0x0CAC
    a266:	84 36       	cpi	r24, 0x64	; 100
    a268:	60 f0       	brcs	.+24     	; 0xa282 <ScoreMenu+0x102>
    a26a:	89 3c       	cpi	r24, 0xC9	; 201
    a26c:	50 f4       	brcc	.+20     	; 0xa282 <ScoreMenu+0x102>
			RestoreBG(5,9);
    a26e:	85 e0       	ldi	r24, 0x05	; 5
    a270:	90 e0       	ldi	r25, 0x00	; 0
    a272:	69 e0       	ldi	r22, 0x09	; 9
    a274:	70 e0       	ldi	r23, 0x00	; 0
    a276:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
		}

		DrawCursor();
		WaitVsync(1);
	}
}
    a27a:	1f 91       	pop	r17
    a27c:	0f 91       	pop	r16
    a27e:	ff 90       	pop	r15
    a280:	08 95       	ret
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    a282:	80 91 d6 0d 	lds	r24, 0x0DD6
    a286:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    a28a:	80 91 ac 0c 	lds	r24, 0x0CAC
    a28e:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    a292:	10 93 ae 04 	sts	0x04AE, r17
			RestoreBG(5,9);
			return;	 
		}

		DrawCursor();
		WaitVsync(1);
    a296:	81 e0       	ldi	r24, 0x01	; 1
    a298:	90 e0       	ldi	r25, 0x00	; 0
    a29a:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a29e:	d3 cf       	rjmp	.-90     	; 0xa246 <ScoreMenu+0xc6>

0000a2a0 <VictoryMenu>:
	}
}

void VictoryMenu(){
    a2a0:	a7 e0       	ldi	r26, 0x07	; 7
    a2a2:	b0 e0       	ldi	r27, 0x00	; 0
    a2a4:	e6 e5       	ldi	r30, 0x56	; 86
    a2a6:	f1 e5       	ldi	r31, 0x51	; 81
    a2a8:	0c 94 1e 5a 	jmp	0xb43c	; 0xb43c <__prologue_saves__+0x10>
	flags |= GUIOPEN;
    a2ac:	80 91 d3 0d 	lds	r24, 0x0DD3
    a2b0:	80 62       	ori	r24, 0x20	; 32
    a2b2:	80 93 d3 0d 	sts	0x0DD3, r24

	char name[7]="PLAYER3";
    a2b6:	de 01       	movw	r26, r28
    a2b8:	11 96       	adiw	r26, 0x01	; 1
    a2ba:	ef e0       	ldi	r30, 0x0F	; 15
    a2bc:	f1 e0       	ldi	r31, 0x01	; 1
    a2be:	87 e0       	ldi	r24, 0x07	; 7
    a2c0:	01 90       	ld	r0, Z+
    a2c2:	0d 92       	st	X+, r0
    a2c4:	81 50       	subi	r24, 0x01	; 1
    a2c6:	e1 f7       	brne	.-8      	; 0xa2c0 <VictoryMenu+0x20>

	DrawOpeningMenu(3,9,23,8,0);
    a2c8:	83 e0       	ldi	r24, 0x03	; 3
    a2ca:	69 e0       	ldi	r22, 0x09	; 9
    a2cc:	47 e1       	ldi	r20, 0x17	; 23
    a2ce:	28 e0       	ldi	r18, 0x08	; 8
    a2d0:	00 e0       	ldi	r16, 0x00	; 0
    a2d2:	10 e0       	ldi	r17, 0x00	; 0
    a2d4:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <DrawOpeningMenu>

	print(4,10,PSTR("YOU HAVE THE BEST TIME"));//was FASTEST instead of BEST
    a2d8:	84 e0       	ldi	r24, 0x04	; 4
    a2da:	90 e0       	ldi	r25, 0x00	; 0
    a2dc:	6a e0       	ldi	r22, 0x0A	; 10
    a2de:	70 e0       	ldi	r23, 0x00	; 0
    a2e0:	45 ec       	ldi	r20, 0xC5	; 197
    a2e2:	53 e7       	ldi	r21, 0x73	; 115
    a2e4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(4,11,PSTR("	FOR			LEVEL	"));//period omitted
    a2e8:	84 e0       	ldi	r24, 0x04	; 4
    a2ea:	90 e0       	ldi	r25, 0x00	; 0
    a2ec:	6b e0       	ldi	r22, 0x0B	; 11
    a2ee:	70 e0       	ldi	r23, 0x00	; 0
    a2f0:	47 eb       	ldi	r20, 0xB7	; 183
    a2f2:	53 e7       	ldi	r21, 0x73	; 115
    a2f4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(4,12,PSTR("PLEASE ENTER YOUR NAME"));//period omitted
    a2f8:	84 e0       	ldi	r24, 0x04	; 4
    a2fa:	90 e0       	ldi	r25, 0x00	; 0
    a2fc:	6c e0       	ldi	r22, 0x0C	; 12
    a2fe:	70 e0       	ldi	r23, 0x00	; 0
    a300:	40 ea       	ldi	r20, 0xA0	; 160
    a302:	53 e7       	ldi	r21, 0x73	; 115
    a304:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,16,PSTR("OK"));
    a308:	8d e0       	ldi	r24, 0x0D	; 13
    a30a:	90 e0       	ldi	r25, 0x00	; 0
    a30c:	60 e1       	ldi	r22, 0x10	; 16
    a30e:	70 e0       	ldi	r23, 0x00	; 0
    a310:	4d e9       	ldi	r20, 0x9D	; 157
    a312:	53 e7       	ldi	r21, 0x73	; 115
    a314:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>

	if(skill == 0)		{print(11,11,PSTR("NOVICE"));}
    a318:	80 91 84 09 	lds	r24, 0x0984
    a31c:	88 23       	and	r24, r24
    a31e:	39 f4       	brne	.+14     	; 0xa32e <VictoryMenu+0x8e>
    a320:	8b e0       	ldi	r24, 0x0B	; 11
    a322:	90 e0       	ldi	r25, 0x00	; 0
    a324:	6b e0       	ldi	r22, 0x0B	; 11
    a326:	70 e0       	ldi	r23, 0x00	; 0
    a328:	46 e9       	ldi	r20, 0x96	; 150
    a32a:	53 e7       	ldi	r21, 0x73	; 115
    a32c:	11 c0       	rjmp	.+34     	; 0xa350 <VictoryMenu+0xb0>
	else if(skill == 1){print(11,11,PSTR("MIDDLE"));}
    a32e:	81 30       	cpi	r24, 0x01	; 1
    a330:	39 f4       	brne	.+14     	; 0xa340 <VictoryMenu+0xa0>
    a332:	8b e0       	ldi	r24, 0x0B	; 11
    a334:	90 e0       	ldi	r25, 0x00	; 0
    a336:	6b e0       	ldi	r22, 0x0B	; 11
    a338:	70 e0       	ldi	r23, 0x00	; 0
    a33a:	4f e8       	ldi	r20, 0x8F	; 143
    a33c:	53 e7       	ldi	r21, 0x73	; 115
    a33e:	08 c0       	rjmp	.+16     	; 0xa350 <VictoryMenu+0xb0>
	else if(skill == 2){print(11,11,PSTR("EXPERT"));}
    a340:	82 30       	cpi	r24, 0x02	; 2
    a342:	41 f4       	brne	.+16     	; 0xa354 <VictoryMenu+0xb4>
    a344:	8b e0       	ldi	r24, 0x0B	; 11
    a346:	90 e0       	ldi	r25, 0x00	; 0
    a348:	6b e0       	ldi	r22, 0x0B	; 11
    a34a:	70 e0       	ldi	r23, 0x00	; 0
    a34c:	48 e8       	ldi	r20, 0x88	; 136
    a34e:	53 e7       	ldi	r21, 0x73	; 115
    a350:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	while(true){
		Input();

		if(mlb && !mlbwd){
			if(mx >= 11*8 && mx < 18*8 && my >=14*8 && my <= 15*8){//is on	name field
				if(--name[(mx-(11*8))/8] < 'A'-14)
    a354:	6e 01       	movw	r12, r28
    a356:	08 94       	sec
    a358:	c1 1c       	adc	r12, r1
    a35a:	d1 1c       	adc	r13, r1
				 name[(mx-(11*8))/8] = 'Z';
    a35c:	8a e5       	ldi	r24, 0x5A	; 90
    a35e:	a8 2e       	mov	r10, r24
			}
		}
		if(mrb && !mrbwd){
			if(mx >= 11*8 && mx < 18*8 && my >= 14*8 && my <= 15*8){//is on	name field
				if(++name[(mx-(11*8))/8] > 'Z')
				 name[(mx-(11*8))/8] = 'A'-14;
    a360:	03 e3       	ldi	r16, 0x33	; 51
    a362:	b0 2e       	mov	r11, r16
    a364:	0c e1       	ldi	r16, 0x1C	; 28
	else if(skill == 2){print(11,11,PSTR("EXPERT"));}
	
	while(true){
		Input();

		if(mlb && !mlbwd){
    a366:	80 91 a4 0c 	lds	r24, 0x0CA4
    a36a:	88 23       	and	r24, r24
    a36c:	09 f4       	brne	.+2      	; 0xa370 <VictoryMenu+0xd0>
    a36e:	42 c0       	rjmp	.+132    	; 0xa3f4 <VictoryMenu+0x154>
    a370:	80 91 b3 0c 	lds	r24, 0x0CB3
    a374:	88 23       	and	r24, r24
    a376:	f1 f5       	brne	.+124    	; 0xa3f4 <VictoryMenu+0x154>
			if(mx >= 11*8 && mx < 18*8 && my >=14*8 && my <= 15*8){//is on	name field
    a378:	90 91 d6 0d 	lds	r25, 0x0DD6
    a37c:	89 2f       	mov	r24, r25
    a37e:	88 55       	subi	r24, 0x58	; 88
    a380:	88 33       	cpi	r24, 0x38	; 56
    a382:	c0 f4       	brcc	.+48     	; 0xa3b4 <VictoryMenu+0x114>
    a384:	80 91 ac 0c 	lds	r24, 0x0CAC
    a388:	80 37       	cpi	r24, 0x70	; 112
    a38a:	a0 f0       	brcs	.+40     	; 0xa3b4 <VictoryMenu+0x114>
    a38c:	89 37       	cpi	r24, 0x79	; 121
    a38e:	90 f4       	brcc	.+36     	; 0xa3b4 <VictoryMenu+0x114>
				if(--name[(mx-(11*8))/8] < 'A'-14)
    a390:	89 2f       	mov	r24, r25
    a392:	90 e0       	ldi	r25, 0x00	; 0
    a394:	88 55       	subi	r24, 0x58	; 88
    a396:	90 40       	sbci	r25, 0x00	; 0
    a398:	68 e0       	ldi	r22, 0x08	; 8
    a39a:	70 e0       	ldi	r23, 0x00	; 0
    a39c:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    a3a0:	f6 01       	movw	r30, r12
    a3a2:	e6 0f       	add	r30, r22
    a3a4:	f7 1f       	adc	r31, r23
    a3a6:	80 81       	ld	r24, Z
    a3a8:	81 50       	subi	r24, 0x01	; 1
    a3aa:	80 83       	st	Z, r24
    a3ac:	83 33       	cpi	r24, 0x33	; 51
    a3ae:	14 f5       	brge	.+68     	; 0xa3f4 <VictoryMenu+0x154>
				 name[(mx-(11*8))/8] = 'Z';
    a3b0:	a0 82       	st	Z, r10
    a3b2:	20 c0       	rjmp	.+64     	; 0xa3f4 <VictoryMenu+0x154>
			}
			else if(mx >= 13*8 && mx <= 15*8 && my >= 16*8 && my <= 17*8){//is on ok
    a3b4:	98 56       	subi	r25, 0x68	; 104
    a3b6:	91 31       	cpi	r25, 0x11	; 17
    a3b8:	e8 f4       	brcc	.+58     	; 0xa3f4 <VictoryMenu+0x154>
    a3ba:	80 91 ac 0c 	lds	r24, 0x0CAC
    a3be:	87 ff       	sbrs	r24, 7
    a3c0:	19 c0       	rjmp	.+50     	; 0xa3f4 <VictoryMenu+0x154>
    a3c2:	89 38       	cpi	r24, 0x89	; 137
    a3c4:	b8 f4       	brcc	.+46     	; 0xa3f4 <VictoryMenu+0x154>
				SaveHighScore(skill,seconds,(char *)&name);
    a3c6:	60 91 b6 0c 	lds	r22, 0x0CB6
    a3ca:	70 91 b7 0c 	lds	r23, 0x0CB7
    a3ce:	80 91 84 09 	lds	r24, 0x0984
    a3d2:	ae 01       	movw	r20, r28
    a3d4:	4f 5f       	subi	r20, 0xFF	; 255
    a3d6:	5f 4f       	sbci	r21, 0xFF	; 255
    a3d8:	0e 94 93 4b 	call	0x9726	; 0x9726 <SaveHighScore>
			RestoreBG(3,9);
    a3dc:	83 e0       	ldi	r24, 0x03	; 3
    a3de:	90 e0       	ldi	r25, 0x00	; 0
    a3e0:	69 e0       	ldi	r22, 0x09	; 9
    a3e2:	70 e0       	ldi	r23, 0x00	; 0
    a3e4:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
			ScoreMenu();
    a3e8:	0e 94 c0 50 	call	0xa180	; 0xa180 <ScoreMenu>
		
		for(u8 i=0;i<7;i++){SetTile(11+i,14,name[i]+80);}//print(11,14,PSTR("PLAYER1"));
		DrawCursor();
		WaitVsync(1);
	}
}
    a3ec:	27 96       	adiw	r28, 0x07	; 7
    a3ee:	ea e0       	ldi	r30, 0x0A	; 10
    a3f0:	0c 94 3a 5a 	jmp	0xb474	; 0xb474 <__epilogue_restores__+0x10>
			RestoreBG(3,9);
			ScoreMenu();
			 return;
			}
		}
		if(mrb && !mrbwd){
    a3f4:	80 91 aa 0c 	lds	r24, 0x0CAA
    a3f8:	88 23       	and	r24, r24
    a3fa:	09 f1       	breq	.+66     	; 0xa43e <VictoryMenu+0x19e>
    a3fc:	80 91 a9 0c 	lds	r24, 0x0CA9
    a400:	88 23       	and	r24, r24
    a402:	e9 f4       	brne	.+58     	; 0xa43e <VictoryMenu+0x19e>
			if(mx >= 11*8 && mx < 18*8 && my >= 14*8 && my <= 15*8){//is on	name field
    a404:	90 91 d6 0d 	lds	r25, 0x0DD6
    a408:	89 2f       	mov	r24, r25
    a40a:	88 55       	subi	r24, 0x58	; 88
    a40c:	88 33       	cpi	r24, 0x38	; 56
    a40e:	b8 f4       	brcc	.+46     	; 0xa43e <VictoryMenu+0x19e>
    a410:	80 91 ac 0c 	lds	r24, 0x0CAC
    a414:	80 37       	cpi	r24, 0x70	; 112
    a416:	98 f0       	brcs	.+38     	; 0xa43e <VictoryMenu+0x19e>
    a418:	89 37       	cpi	r24, 0x79	; 121
    a41a:	88 f4       	brcc	.+34     	; 0xa43e <VictoryMenu+0x19e>
				if(++name[(mx-(11*8))/8] > 'Z')
    a41c:	89 2f       	mov	r24, r25
    a41e:	90 e0       	ldi	r25, 0x00	; 0
    a420:	88 55       	subi	r24, 0x58	; 88
    a422:	90 40       	sbci	r25, 0x00	; 0
    a424:	68 e0       	ldi	r22, 0x08	; 8
    a426:	70 e0       	ldi	r23, 0x00	; 0
    a428:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    a42c:	f6 01       	movw	r30, r12
    a42e:	e6 0f       	add	r30, r22
    a430:	f7 1f       	adc	r31, r23
    a432:	80 81       	ld	r24, Z
    a434:	8f 5f       	subi	r24, 0xFF	; 255
    a436:	80 83       	st	Z, r24
    a438:	8b 35       	cpi	r24, 0x5B	; 91
    a43a:	0c f0       	brlt	.+2      	; 0xa43e <VictoryMenu+0x19e>
				 name[(mx-(11*8))/8] = 'A'-14;
    a43c:	b0 82       	st	Z, r11
    a43e:	76 01       	movw	r14, r12
    a440:	1b e0       	ldi	r17, 0x0B	; 11
			}
		}
		
		for(u8 i=0;i<7;i++){SetTile(11+i,14,name[i]+80);}//print(11,14,PSTR("PLAYER1"));
    a442:	f7 01       	movw	r30, r14
    a444:	41 91       	ld	r20, Z+
    a446:	7f 01       	movw	r14, r30
    a448:	55 27       	eor	r21, r21
    a44a:	47 fd       	sbrc	r20, 7
    a44c:	50 95       	com	r21
    a44e:	40 5b       	subi	r20, 0xB0	; 176
    a450:	5f 4f       	sbci	r21, 0xFF	; 255
    a452:	81 2f       	mov	r24, r17
    a454:	6e e0       	ldi	r22, 0x0E	; 14
    a456:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    a45a:	1f 5f       	subi	r17, 0xFF	; 255
    a45c:	12 31       	cpi	r17, 0x12	; 18
    a45e:	89 f7       	brne	.-30     	; 0xa442 <VictoryMenu+0x1a2>
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    a460:	80 91 d6 0d 	lds	r24, 0x0DD6
    a464:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    a468:	80 91 ac 0c 	lds	r24, 0x0CAC
    a46c:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    a470:	00 93 ae 04 	sts	0x04AE, r16
		DrawCursor();
		WaitVsync(1);
    a474:	81 e0       	ldi	r24, 0x01	; 1
    a476:	90 e0       	ldi	r25, 0x00	; 0
    a478:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a47c:	74 cf       	rjmp	.-280    	; 0xa366 <VictoryMenu+0xc6>

0000a47e <AboutMenu>:


}


void AboutMenu(){
    a47e:	0f 93       	push	r16
    a480:	1f 93       	push	r17
	flags |= GUIOPEN;
    a482:	80 91 d3 0d 	lds	r24, 0x0DD3
    a486:	80 62       	ori	r24, 0x20	; 32
    a488:	80 93 d3 0d 	sts	0x0DD3, r24
	DrawOpeningMenu(7,9,15,7,0);
    a48c:	87 e0       	ldi	r24, 0x07	; 7
    a48e:	69 e0       	ldi	r22, 0x09	; 9
    a490:	4f e0       	ldi	r20, 0x0F	; 15
    a492:	27 e0       	ldi	r18, 0x07	; 7
    a494:	00 e0       	ldi	r16, 0x00	; 0
    a496:	10 e0       	ldi	r17, 0x00	; 0
    a498:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <DrawOpeningMenu>

	print(8,10,PSTR("	UZESWEEPER"));
    a49c:	88 e0       	ldi	r24, 0x08	; 8
    a49e:	90 e0       	ldi	r25, 0x00	; 0
    a4a0:	6a e0       	ldi	r22, 0x0A	; 10
    a4a2:	70 e0       	ldi	r23, 0x00	; 0
    a4a4:	41 e2       	ldi	r20, 0x21	; 33
    a4a6:	54 e7       	ldi	r21, 0x74	; 116
    a4a8:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(8,13,PSTR("LEE WEBER XXXX"));
    a4ac:	88 e0       	ldi	r24, 0x08	; 8
    a4ae:	90 e0       	ldi	r25, 0x00	; 0
    a4b0:	6d e0       	ldi	r22, 0x0D	; 13
    a4b2:	70 e0       	ldi	r23, 0x00	; 0
    a4b4:	42 e1       	ldi	r20, 0x12	; 18
    a4b6:	54 e7       	ldi	r21, 0x74	; 116
    a4b8:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	printnum(19,13,20,false);printnum(21,13,11,false);
    a4bc:	83 e1       	ldi	r24, 0x13	; 19
    a4be:	6d e0       	ldi	r22, 0x0D	; 13
    a4c0:	44 e1       	ldi	r20, 0x14	; 20
    a4c2:	50 e0       	ldi	r21, 0x00	; 0
    a4c4:	20 e0       	ldi	r18, 0x00	; 0
    a4c6:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
    a4ca:	85 e1       	ldi	r24, 0x15	; 21
    a4cc:	6d e0       	ldi	r22, 0x0D	; 13
    a4ce:	4b e0       	ldi	r20, 0x0B	; 11
    a4d0:	50 e0       	ldi	r21, 0x00	; 0
    a4d2:	20 e0       	ldi	r18, 0x00	; 0
    a4d4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>

	print(14,15,PSTR("OK"));
    a4d8:	8e e0       	ldi	r24, 0x0E	; 14
    a4da:	90 e0       	ldi	r25, 0x00	; 0
    a4dc:	6f e0       	ldi	r22, 0x0F	; 15
    a4de:	70 e0       	ldi	r23, 0x00	; 0
    a4e0:	4f e0       	ldi	r20, 0x0F	; 15
    a4e2:	54 e7       	ldi	r21, 0x74	; 116
    a4e4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    a4e8:	1c e1       	ldi	r17, 0x1C	; 28

	while(true){
		Input();
		
		if(mlb && !mlbwd && mx >= 14*8 && mx <= 16*8 && my >= 15*8 && my <= 16*8){
    a4ea:	80 91 a4 0c 	lds	r24, 0x0CA4
    a4ee:	88 23       	and	r24, r24
    a4f0:	c9 f0       	breq	.+50     	; 0xa524 <AboutMenu+0xa6>
    a4f2:	80 91 b3 0c 	lds	r24, 0x0CB3
    a4f6:	88 23       	and	r24, r24
    a4f8:	a9 f4       	brne	.+42     	; 0xa524 <AboutMenu+0xa6>
    a4fa:	80 91 d6 0d 	lds	r24, 0x0DD6
    a4fe:	80 37       	cpi	r24, 0x70	; 112
    a500:	88 f0       	brcs	.+34     	; 0xa524 <AboutMenu+0xa6>
    a502:	81 38       	cpi	r24, 0x81	; 129
    a504:	78 f4       	brcc	.+30     	; 0xa524 <AboutMenu+0xa6>
    a506:	80 91 ac 0c 	lds	r24, 0x0CAC
    a50a:	88 37       	cpi	r24, 0x78	; 120
    a50c:	58 f0       	brcs	.+22     	; 0xa524 <AboutMenu+0xa6>
    a50e:	81 38       	cpi	r24, 0x81	; 129
    a510:	48 f4       	brcc	.+18     	; 0xa524 <AboutMenu+0xa6>
			RestoreBG(7,9);
    a512:	87 e0       	ldi	r24, 0x07	; 7
    a514:	90 e0       	ldi	r25, 0x00	; 0
    a516:	69 e0       	ldi	r22, 0x09	; 9
    a518:	70 e0       	ldi	r23, 0x00	; 0
    a51a:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
		}		

		DrawCursor();
		WaitVsync(1);
	}
}
    a51e:	1f 91       	pop	r17
    a520:	0f 91       	pop	r16
    a522:	08 95       	ret
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    a524:	80 91 d6 0d 	lds	r24, 0x0DD6
    a528:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    a52c:	80 91 ac 0c 	lds	r24, 0x0CAC
    a530:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    a534:	10 93 ae 04 	sts	0x04AE, r17
			RestoreBG(7,9);
		 return;
		}		

		DrawCursor();
		WaitVsync(1);
    a538:	81 e0       	ldi	r24, 0x01	; 1
    a53a:	90 e0       	ldi	r25, 0x00	; 0
    a53c:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a540:	d4 cf       	rjmp	.-88     	; 0xa4ea <AboutMenu+0x6c>

0000a542 <Loss>:
	TriggerFx(VICTORYFX,255,true);
	if(skill < 3)
		VictoryMenu();
}

void Loss(){
    a542:	ff 92       	push	r15
    a544:	0f 93       	push	r16
    a546:	1f 93       	push	r17
	uint8_t t,t2;
	
	WaitVsync(1);
    a548:	81 e0       	ldi	r24, 0x01	; 1
    a54a:	90 e0       	ldi	r25, 0x00	; 0
    a54c:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    a550:	10 e0       	ldi	r17, 0x00	; 0
    a552:	2e c0       	rjmp	.+92     	; 0xa5b0 <Loss+0x6e>

	//expose all mines
	for(uint8_t x=0;x<fwidth;x++)
	for(uint8_t y=0;y<fheight;y++){
		t = GetGrid(x,y);
    a554:	81 2f       	mov	r24, r17
    a556:	60 2f       	mov	r22, r16
    a558:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    a55c:	f8 2e       	mov	r15, r24
		t2 = GetVidGrid(x,y);
    a55e:	81 2f       	mov	r24, r17
    a560:	60 2f       	mov	r22, r16
    a562:	0e 94 60 4a 	call	0x94c0	; 0x94c0 <GetVidGrid>
		if(t == MINE){
    a566:	9a e0       	ldi	r25, 0x0A	; 10
    a568:	f9 16       	cp	r15, r25
    a56a:	a9 f4       	brne	.+42     	; 0xa596 <Loss+0x54>
			if(t2 != FLAG)
    a56c:	8d 30       	cpi	r24, 0x0D	; 13
    a56e:	d1 f0       	breq	.+52     	; 0xa5a4 <Loss+0x62>
				SetVidGrid(x,y,MINE+(x == mgridx && y == mgridy));
    a570:	80 91 0a 0a 	lds	r24, 0x0A0A
    a574:	18 17       	cp	r17, r24
    a576:	19 f0       	breq	.+6      	; 0xa57e <Loss+0x3c>
    a578:	40 e0       	ldi	r20, 0x00	; 0
    a57a:	50 e0       	ldi	r21, 0x00	; 0
    a57c:	08 c0       	rjmp	.+16     	; 0xa58e <Loss+0x4c>
    a57e:	40 e0       	ldi	r20, 0x00	; 0
    a580:	50 e0       	ldi	r21, 0x00	; 0
    a582:	80 91 ad 0c 	lds	r24, 0x0CAD
    a586:	08 17       	cp	r16, r24
    a588:	11 f4       	brne	.+4      	; 0xa58e <Loss+0x4c>
    a58a:	41 e0       	ldi	r20, 0x01	; 1
    a58c:	50 e0       	ldi	r21, 0x00	; 0
    a58e:	46 5f       	subi	r20, 0xF6	; 246
    a590:	81 2f       	mov	r24, r17
    a592:	60 2f       	mov	r22, r16
    a594:	05 c0       	rjmp	.+10     	; 0xa5a0 <Loss+0x5e>
		}
		else if(t2 == FLAG)//falsely marked mine
    a596:	8d 30       	cpi	r24, 0x0D	; 13
    a598:	29 f4       	brne	.+10     	; 0xa5a4 <Loss+0x62>
			SetVidGrid(x,y,MINE+2);//draw a mine with an x over it
    a59a:	81 2f       	mov	r24, r17
    a59c:	60 2f       	mov	r22, r16
    a59e:	4c e0       	ldi	r20, 0x0C	; 12
    a5a0:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
	
	WaitVsync(1);

	//expose all mines
	for(uint8_t x=0;x<fwidth;x++)
	for(uint8_t y=0;y<fheight;y++){
    a5a4:	0f 5f       	subi	r16, 0xFF	; 255
    a5a6:	80 91 b0 0c 	lds	r24, 0x0CB0
    a5aa:	08 17       	cp	r16, r24
    a5ac:	98 f2       	brcs	.-90     	; 0xa554 <Loss+0x12>
	uint8_t t,t2;
	
	WaitVsync(1);

	//expose all mines
	for(uint8_t x=0;x<fwidth;x++)
    a5ae:	1f 5f       	subi	r17, 0xFF	; 255
    a5b0:	80 91 ba 0c 	lds	r24, 0x0CBA
    a5b4:	18 17       	cp	r17, r24
    a5b6:	10 f4       	brcc	.+4      	; 0xa5bc <Loss+0x7a>
    a5b8:	00 e0       	ldi	r16, 0x00	; 0
    a5ba:	f5 cf       	rjmp	.-22     	; 0xa5a6 <Loss+0x64>
		}
		else if(t2 == FLAG)//falsely marked mine
			SetVidGrid(x,y,MINE+2);//draw a mine with an x over it
	}
	
	flags |= LOST;
    a5bc:	80 91 d3 0d 	lds	r24, 0x0DD3
    a5c0:	81 60       	ori	r24, 0x01	; 1
    a5c2:	80 93 d3 0d 	sts	0x0DD3, r24

	if(flags & SOUND){
    a5c6:	83 ff       	sbrs	r24, 3
    a5c8:	0a c0       	rjmp	.+20     	; 0xa5de <Loss+0x9c>
		TriggerFx(EXPLODEFX,128,false);
    a5ca:	88 e2       	ldi	r24, 0x28	; 40
    a5cc:	60 e8       	ldi	r22, 0x80	; 128
    a5ce:	40 e0       	ldi	r20, 0x00	; 0
    a5d0:	0e 94 b3 43 	call	0x8766	; 0x8766 <TriggerFx>
		TriggerFx(EXPLODEFX+1,128,false);
    a5d4:	89 e2       	ldi	r24, 0x29	; 41
    a5d6:	60 e8       	ldi	r22, 0x80	; 128
    a5d8:	40 e0       	ldi	r20, 0x00	; 0
    a5da:	0e 94 b3 43 	call	0x8766	; 0x8766 <TriggerFx>
	}
}
    a5de:	1f 91       	pop	r17
    a5e0:	0f 91       	pop	r16
    a5e2:	ff 90       	pop	r15
    a5e4:	08 95       	ret

0000a5e6 <Win>:
	}

}

void Win(){
	DrawFace(108,16,4);
    a5e6:	8c e6       	ldi	r24, 0x6C	; 108
    a5e8:	60 e1       	ldi	r22, 0x10	; 16
    a5ea:	44 e0       	ldi	r20, 0x04	; 4
    a5ec:	0e 94 a2 4a 	call	0x9544	; 0x9544 <DrawFace>
	flags |= WON;
    a5f0:	80 91 d3 0d 	lds	r24, 0x0DD3
    a5f4:	82 60       	ori	r24, 0x02	; 2
    a5f6:	80 93 d3 0d 	sts	0x0DD3, r24
	TriggerFx(VICTORYFX,255,true);
    a5fa:	8a e2       	ldi	r24, 0x2A	; 42
    a5fc:	6f ef       	ldi	r22, 0xFF	; 255
    a5fe:	41 e0       	ldi	r20, 0x01	; 1
    a600:	0e 94 b3 43 	call	0x8766	; 0x8766 <TriggerFx>
	if(skill < 3)
    a604:	80 91 84 09 	lds	r24, 0x0984
    a608:	83 30       	cpi	r24, 0x03	; 3
    a60a:	10 f4       	brcc	.+4      	; 0xa610 <Win+0x2a>
		VictoryMenu();
    a60c:	0e 94 50 51 	call	0xa2a0	; 0xa2a0 <VictoryMenu>
    a610:	08 95       	ret

0000a612 <NewGame>:
	DrawFace(108,16,255);
	DrawMineCount();
	DrawCursor();
}

void NewGame(){
    a612:	0f 93       	push	r16
    a614:	1f 93       	push	r17
	if(skill == 0){
    a616:	80 91 84 09 	lds	r24, 0x0984
    a61a:	88 23       	and	r24, r24
    a61c:	39 f4       	brne	.+14     	; 0xa62c <NewGame+0x1a>
		fwidth = 9;
    a61e:	89 e0       	ldi	r24, 0x09	; 9
    a620:	80 93 ba 0c 	sts	0x0CBA, r24
		fheight = 9;
    a624:	80 93 b0 0c 	sts	0x0CB0, r24
		nummines = 10;
    a628:	8a e0       	ldi	r24, 0x0A	; 10
    a62a:	1e c0       	rjmp	.+60     	; 0xa668 <NewGame+0x56>
	}
	else if(skill == 1){
    a62c:	81 30       	cpi	r24, 0x01	; 1
    a62e:	41 f4       	brne	.+16     	; 0xa640 <NewGame+0x2e>
		fwidth = 14;//16;
    a630:	8e e0       	ldi	r24, 0x0E	; 14
    a632:	80 93 ba 0c 	sts	0x0CBA, r24
		fheight = 10;//16;
    a636:	8a e0       	ldi	r24, 0x0A	; 10
    a638:	80 93 b0 0c 	sts	0x0CB0, r24
		nummines = 28;//40;
    a63c:	8c e1       	ldi	r24, 0x1C	; 28
    a63e:	14 c0       	rjmp	.+40     	; 0xa668 <NewGame+0x56>
	}
	else if(skill == 2){
    a640:	82 30       	cpi	r24, 0x02	; 2
    a642:	41 f4       	brne	.+16     	; 0xa654 <NewGame+0x42>
		fwidth = 28;//30;
    a644:	8c e1       	ldi	r24, 0x1C	; 28
    a646:	80 93 ba 0c 	sts	0x0CBA, r24
		fheight = 20;//16;
    a64a:	84 e1       	ldi	r24, 0x14	; 20
    a64c:	80 93 b0 0c 	sts	0x0CB0, r24
		nummines = 99;
    a650:	83 e6       	ldi	r24, 0x63	; 99
    a652:	0a c0       	rjmp	.+20     	; 0xa668 <NewGame+0x56>
	}
	else{
		fwidth = customwidth;
    a654:	80 91 ab 0c 	lds	r24, 0x0CAB
    a658:	80 93 ba 0c 	sts	0x0CBA, r24
		fheight = customheight;
    a65c:	80 91 d5 0d 	lds	r24, 0x0DD5
    a660:	80 93 b0 0c 	sts	0x0CB0, r24
		nummines = custommines;
    a664:	80 91 9f 0c 	lds	r24, 0x0C9F
    a668:	80 93 af 0c 	sts	0x0CAF, r24
	}

	numflags = 0;
    a66c:	10 92 a5 0c 	sts	0x0CA5, r1
	seconds = 0;
    a670:	10 92 b7 0c 	sts	0x0CB7, r1
    a674:	10 92 b6 0c 	sts	0x0CB6, r1
	fracs = 0;
    a678:	10 92 a7 0c 	sts	0x0CA7, r1
	if(flags & LOST){flags ^= LOST;}
    a67c:	90 91 d3 0d 	lds	r25, 0x0DD3
    a680:	90 ff       	sbrs	r25, 0
    a682:	04 c0       	rjmp	.+8      	; 0xa68c <NewGame+0x7a>
    a684:	81 e0       	ldi	r24, 0x01	; 1
    a686:	98 27       	eor	r25, r24
    a688:	90 93 d3 0d 	sts	0x0DD3, r25
	if(flags & WON){flags ^= WON;}
    a68c:	90 91 d3 0d 	lds	r25, 0x0DD3
    a690:	91 ff       	sbrs	r25, 1
    a692:	04 c0       	rjmp	.+8      	; 0xa69c <NewGame+0x8a>
    a694:	82 e0       	ldi	r24, 0x02	; 2
    a696:	98 27       	eor	r25, r24
    a698:	90 93 d3 0d 	sts	0x0DD3, r25
	if(flags & STARTED){flags ^= STARTED;}
    a69c:	90 91 d3 0d 	lds	r25, 0x0DD3
    a6a0:	92 ff       	sbrs	r25, 2
    a6a2:	04 c0       	rjmp	.+8      	; 0xa6ac <NewGame+0x9a>
    a6a4:	84 e0       	ldi	r24, 0x04	; 4
    a6a6:	98 27       	eor	r25, r24
    a6a8:	90 93 d3 0d 	sts	0x0DD3, r25
	if(fwidth > 14 || fheight > 10){flags |= BIGFIELD;}else if(flags & BIGFIELD){flags ^= BIGFIELD;}
    a6ac:	20 91 ba 0c 	lds	r18, 0x0CBA
    a6b0:	2f 30       	cpi	r18, 0x0F	; 15
    a6b2:	20 f4       	brcc	.+8      	; 0xa6bc <NewGame+0xaa>
    a6b4:	80 91 b0 0c 	lds	r24, 0x0CB0
    a6b8:	8b 30       	cpi	r24, 0x0B	; 11
    a6ba:	30 f0       	brcs	.+12     	; 0xa6c8 <NewGame+0xb6>
    a6bc:	80 91 d3 0d 	lds	r24, 0x0DD3
    a6c0:	80 64       	ori	r24, 0x40	; 64
    a6c2:	80 93 d3 0d 	sts	0x0DD3, r24
    a6c6:	08 c0       	rjmp	.+16     	; 0xa6d8 <NewGame+0xc6>
    a6c8:	90 91 d3 0d 	lds	r25, 0x0DD3
    a6cc:	96 ff       	sbrs	r25, 6
    a6ce:	04 c0       	rjmp	.+8      	; 0xa6d8 <NewGame+0xc6>
    a6d0:	80 e4       	ldi	r24, 0x40	; 64
    a6d2:	98 27       	eor	r25, r24
    a6d4:	90 93 d3 0d 	sts	0x0DD3, r25
	
	if(flags & BIGFIELD){
    a6d8:	80 91 d3 0d 	lds	r24, 0x0DD3
    a6dc:	40 91 b0 0c 	lds	r20, 0x0CB0
    a6e0:	30 e0       	ldi	r19, 0x00	; 0
    a6e2:	86 ff       	sbrs	r24, 6
    a6e4:	0d c0       	rjmp	.+26     	; 0xa700 <NewGame+0xee>
		xoff = (MAXWIDTH-fwidth)/2;
    a6e6:	8c e1       	ldi	r24, 0x1C	; 28
    a6e8:	90 e0       	ldi	r25, 0x00	; 0
    a6ea:	82 1b       	sub	r24, r18
    a6ec:	93 0b       	sbc	r25, r19
    a6ee:	62 e0       	ldi	r22, 0x02	; 2
    a6f0:	70 e0       	ldi	r23, 0x00	; 0
    a6f2:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    a6f6:	60 93 a8 0c 	sts	0x0CA8, r22
		yoff = (MAXHEIGHT-fheight)/2;
    a6fa:	84 e1       	ldi	r24, 0x14	; 20
    a6fc:	90 e0       	ldi	r25, 0x00	; 0
    a6fe:	0c c0       	rjmp	.+24     	; 0xa718 <NewGame+0x106>
	}
	else{
		xoff = ((MAXWIDTH/2)-fwidth)/2;
    a700:	8e e0       	ldi	r24, 0x0E	; 14
    a702:	90 e0       	ldi	r25, 0x00	; 0
    a704:	82 1b       	sub	r24, r18
    a706:	93 0b       	sbc	r25, r19
    a708:	62 e0       	ldi	r22, 0x02	; 2
    a70a:	70 e0       	ldi	r23, 0x00	; 0
    a70c:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    a710:	60 93 a8 0c 	sts	0x0CA8, r22
		yoff = ((MAXHEIGHT/2)-fheight)/2;
    a714:	8a e0       	ldi	r24, 0x0A	; 10
    a716:	90 e0       	ldi	r25, 0x00	; 0
    a718:	84 1b       	sub	r24, r20
    a71a:	91 09       	sbc	r25, r1
    a71c:	62 e0       	ldi	r22, 0x02	; 2
    a71e:	70 e0       	ldi	r23, 0x00	; 0
    a720:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    a724:	60 93 b2 0c 	sts	0x0CB2, r22
	}

	prand();
    a728:	0e 94 de 49 	call	0x93bc	; 0x93bc <prand>
	InitField();
    a72c:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <InitField>

	//WaitVsync(1);
	DrawMap2(0,0,BGMap);
    a730:	80 e0       	ldi	r24, 0x00	; 0
    a732:	60 e0       	ldi	r22, 0x00	; 0
    a734:	47 ee       	ldi	r20, 0xE7	; 231
    a736:	58 e3       	ldi	r21, 0x38	; 56
    a738:	0e 94 8e 48 	call	0x911c	; 0x911c <DrawMap2>
    a73c:	01 e0       	ldi	r16, 0x01	; 1
    a73e:	0e c0       	rjmp	.+28     	; 0xa75c <NewGame+0x14a>

	for(uint8_t x=0;x<MAXWIDTH;x++)
	for(uint8_t y=0;y<MAXHEIGHT;y++)
		SetTile(1+x,7+y,13);
    a740:	80 2f       	mov	r24, r16
    a742:	61 2f       	mov	r22, r17
    a744:	4d e0       	ldi	r20, 0x0D	; 13
    a746:	50 e0       	ldi	r21, 0x00	; 0
    a748:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    a74c:	1f 5f       	subi	r17, 0xFF	; 255

	//WaitVsync(1);
	DrawMap2(0,0,BGMap);

	for(uint8_t x=0;x<MAXWIDTH;x++)
	for(uint8_t y=0;y<MAXHEIGHT;y++)
    a74e:	1b 31       	cpi	r17, 0x1B	; 27
    a750:	b9 f7       	brne	.-18     	; 0xa740 <NewGame+0x12e>
    a752:	0f 5f       	subi	r16, 0xFF	; 255
	InitField();

	//WaitVsync(1);
	DrawMap2(0,0,BGMap);

	for(uint8_t x=0;x<MAXWIDTH;x++)
    a754:	0d 31       	cpi	r16, 0x1D	; 29
    a756:	11 f4       	brne	.+4      	; 0xa75c <NewGame+0x14a>
    a758:	00 e0       	ldi	r16, 0x00	; 0
    a75a:	0d c0       	rjmp	.+26     	; 0xa776 <NewGame+0x164>
    a75c:	17 e0       	ldi	r17, 0x07	; 7
    a75e:	f0 cf       	rjmp	.-32     	; 0xa740 <NewGame+0x12e>
	for(uint8_t y=0;y<MAXHEIGHT;y++)
		SetTile(1+x,7+y,13);

	for(uint8_t x=0;x<fwidth;x++)
	for(uint8_t y=0;y<fheight;y++)
		SetVidGrid(x,y,0);
    a760:	80 2f       	mov	r24, r16
    a762:	61 2f       	mov	r22, r17
    a764:	40 e0       	ldi	r20, 0x00	; 0
    a766:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
	for(uint8_t x=0;x<MAXWIDTH;x++)
	for(uint8_t y=0;y<MAXHEIGHT;y++)
		SetTile(1+x,7+y,13);

	for(uint8_t x=0;x<fwidth;x++)
	for(uint8_t y=0;y<fheight;y++)
    a76a:	1f 5f       	subi	r17, 0xFF	; 255
    a76c:	80 91 b0 0c 	lds	r24, 0x0CB0
    a770:	18 17       	cp	r17, r24
    a772:	b0 f3       	brcs	.-20     	; 0xa760 <NewGame+0x14e>

	for(uint8_t x=0;x<MAXWIDTH;x++)
	for(uint8_t y=0;y<MAXHEIGHT;y++)
		SetTile(1+x,7+y,13);

	for(uint8_t x=0;x<fwidth;x++)
    a774:	0f 5f       	subi	r16, 0xFF	; 255
    a776:	80 91 ba 0c 	lds	r24, 0x0CBA
    a77a:	08 17       	cp	r16, r24
    a77c:	10 f4       	brcc	.+4      	; 0xa782 <NewGame+0x170>
    a77e:	10 e0       	ldi	r17, 0x00	; 0
    a780:	f5 cf       	rjmp	.-22     	; 0xa76c <NewGame+0x15a>
	for(uint8_t y=0;y<fheight;y++)
		SetVidGrid(x,y,0);
	
	//draw border edge
	if(flags & BIGFIELD){
    a782:	80 91 d3 0d 	lds	r24, 0x0DD3
    a786:	40 91 b0 0c 	lds	r20, 0x0CB0
    a78a:	86 ff       	sbrs	r24, 6
    a78c:	32 c0       	rjmp	.+100    	; 0xa7f2 <NewGame+0x1e0>
		if(fheight < MAXHEIGHT)
    a78e:	44 31       	cpi	r20, 0x14	; 20
    a790:	a8 f4       	brcc	.+42     	; 0xa7bc <NewGame+0x1aa>
    a792:	10 e0       	ldi	r17, 0x00	; 0
    a794:	0f c0       	rjmp	.+30     	; 0xa7b4 <NewGame+0x1a2>
			for(uint8_t x=0;x<fwidth;x++)
				SetTile(x+1+xoff,fheight+7+yoff,GRIDSTART+5);
    a796:	80 91 a8 0c 	lds	r24, 0x0CA8
    a79a:	8f 5f       	subi	r24, 0xFF	; 255
    a79c:	60 91 b0 0c 	lds	r22, 0x0CB0
    a7a0:	90 91 b2 0c 	lds	r25, 0x0CB2
    a7a4:	69 0f       	add	r22, r25
    a7a6:	69 5f       	subi	r22, 0xF9	; 249
    a7a8:	81 0f       	add	r24, r17
    a7aa:	43 e2       	ldi	r20, 0x23	; 35
    a7ac:	50 e0       	ldi	r21, 0x00	; 0
    a7ae:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
		SetVidGrid(x,y,0);
	
	//draw border edge
	if(flags & BIGFIELD){
		if(fheight < MAXHEIGHT)
			for(uint8_t x=0;x<fwidth;x++)
    a7b2:	1f 5f       	subi	r17, 0xFF	; 255
    a7b4:	80 91 ba 0c 	lds	r24, 0x0CBA
    a7b8:	18 17       	cp	r17, r24
    a7ba:	68 f3       	brcs	.-38     	; 0xa796 <NewGame+0x184>
				SetTile(x+1+xoff,fheight+7+yoff,GRIDSTART+5);
		if(fwidth < MAXWIDTH)
    a7bc:	80 91 ba 0c 	lds	r24, 0x0CBA
    a7c0:	8c 31       	cpi	r24, 0x1C	; 28
    a7c2:	08 f0       	brcs	.+2      	; 0xa7c6 <NewGame+0x1b4>
    a7c4:	5c c0       	rjmp	.+184    	; 0xa87e <NewGame+0x26c>
    a7c6:	10 e0       	ldi	r17, 0x00	; 0
    a7c8:	0f c0       	rjmp	.+30     	; 0xa7e8 <NewGame+0x1d6>
			for(uint8_t y=0;y<fheight;y++)
				SetTile(fwidth+1+xoff,y+7+yoff,GRIDSTART+6);
    a7ca:	80 91 ba 0c 	lds	r24, 0x0CBA
    a7ce:	90 91 a8 0c 	lds	r25, 0x0CA8
    a7d2:	89 0f       	add	r24, r25
    a7d4:	60 91 b2 0c 	lds	r22, 0x0CB2
    a7d8:	69 5f       	subi	r22, 0xF9	; 249
    a7da:	61 0f       	add	r22, r17
    a7dc:	8f 5f       	subi	r24, 0xFF	; 255
    a7de:	44 e2       	ldi	r20, 0x24	; 36
    a7e0:	50 e0       	ldi	r21, 0x00	; 0
    a7e2:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	if(flags & BIGFIELD){
		if(fheight < MAXHEIGHT)
			for(uint8_t x=0;x<fwidth;x++)
				SetTile(x+1+xoff,fheight+7+yoff,GRIDSTART+5);
		if(fwidth < MAXWIDTH)
			for(uint8_t y=0;y<fheight;y++)
    a7e6:	1f 5f       	subi	r17, 0xFF	; 255
    a7e8:	80 91 b0 0c 	lds	r24, 0x0CB0
    a7ec:	18 17       	cp	r17, r24
    a7ee:	68 f3       	brcs	.-38     	; 0xa7ca <NewGame+0x1b8>
    a7f0:	46 c0       	rjmp	.+140    	; 0xa87e <NewGame+0x26c>
				SetTile(fwidth+1+xoff,y+7+yoff,GRIDSTART+6);
	}
	else{
		if(fheight < MAXHEIGHT)
    a7f2:	44 31       	cpi	r20, 0x14	; 20
    a7f4:	00 f5       	brcc	.+64     	; 0xa836 <NewGame+0x224>
    a7f6:	10 e0       	ldi	r17, 0x00	; 0
    a7f8:	14 c0       	rjmp	.+40     	; 0xa822 <NewGame+0x210>
			for(uint8_t x=0;x<(fwidth*2);x++)
				SetTile(x+1+(xoff*2),(fheight*2)+7+(yoff*2),GRIDSTART+5);
    a7fa:	80 91 a8 0c 	lds	r24, 0x0CA8
    a7fe:	88 0f       	add	r24, r24
    a800:	8f 5f       	subi	r24, 0xFF	; 255
    a802:	90 91 b2 0c 	lds	r25, 0x0CB2
    a806:	60 91 b0 0c 	lds	r22, 0x0CB0
    a80a:	70 e0       	ldi	r23, 0x00	; 0
    a80c:	69 0f       	add	r22, r25
    a80e:	71 1d       	adc	r23, r1
    a810:	66 0f       	add	r22, r22
    a812:	77 1f       	adc	r23, r23
    a814:	69 5f       	subi	r22, 0xF9	; 249
    a816:	81 0f       	add	r24, r17
    a818:	43 e2       	ldi	r20, 0x23	; 35
    a81a:	50 e0       	ldi	r21, 0x00	; 0
    a81c:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
			for(uint8_t y=0;y<fheight;y++)
				SetTile(fwidth+1+xoff,y+7+yoff,GRIDSTART+6);
	}
	else{
		if(fheight < MAXHEIGHT)
			for(uint8_t x=0;x<(fwidth*2);x++)
    a820:	1f 5f       	subi	r17, 0xFF	; 255
    a822:	21 2f       	mov	r18, r17
    a824:	30 e0       	ldi	r19, 0x00	; 0
    a826:	80 91 ba 0c 	lds	r24, 0x0CBA
    a82a:	90 e0       	ldi	r25, 0x00	; 0
    a82c:	88 0f       	add	r24, r24
    a82e:	99 1f       	adc	r25, r25
    a830:	28 17       	cp	r18, r24
    a832:	39 07       	cpc	r19, r25
    a834:	14 f3       	brlt	.-60     	; 0xa7fa <NewGame+0x1e8>
				SetTile(x+1+(xoff*2),(fheight*2)+7+(yoff*2),GRIDSTART+5);
		if(fwidth < MAXWIDTH)
    a836:	80 91 ba 0c 	lds	r24, 0x0CBA
    a83a:	8c 31       	cpi	r24, 0x1C	; 28
    a83c:	00 f5       	brcc	.+64     	; 0xa87e <NewGame+0x26c>
    a83e:	10 e0       	ldi	r17, 0x00	; 0
    a840:	14 c0       	rjmp	.+40     	; 0xa86a <NewGame+0x258>
			for(uint8_t y=0;y<(fheight*2);y++)
				SetTile((fwidth*2)+1+(xoff*2),y+7+(yoff*2),GRIDSTART+6);
    a842:	20 91 a8 0c 	lds	r18, 0x0CA8
    a846:	80 91 ba 0c 	lds	r24, 0x0CBA
    a84a:	90 e0       	ldi	r25, 0x00	; 0
    a84c:	82 0f       	add	r24, r18
    a84e:	91 1d       	adc	r25, r1
    a850:	88 0f       	add	r24, r24
    a852:	99 1f       	adc	r25, r25
    a854:	60 91 b2 0c 	lds	r22, 0x0CB2
    a858:	66 0f       	add	r22, r22
    a85a:	69 5f       	subi	r22, 0xF9	; 249
    a85c:	61 0f       	add	r22, r17
    a85e:	8f 5f       	subi	r24, 0xFF	; 255
    a860:	44 e2       	ldi	r20, 0x24	; 36
    a862:	50 e0       	ldi	r21, 0x00	; 0
    a864:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	else{
		if(fheight < MAXHEIGHT)
			for(uint8_t x=0;x<(fwidth*2);x++)
				SetTile(x+1+(xoff*2),(fheight*2)+7+(yoff*2),GRIDSTART+5);
		if(fwidth < MAXWIDTH)
			for(uint8_t y=0;y<(fheight*2);y++)
    a868:	1f 5f       	subi	r17, 0xFF	; 255
    a86a:	21 2f       	mov	r18, r17
    a86c:	30 e0       	ldi	r19, 0x00	; 0
    a86e:	80 91 b0 0c 	lds	r24, 0x0CB0
    a872:	90 e0       	ldi	r25, 0x00	; 0
    a874:	88 0f       	add	r24, r24
    a876:	99 1f       	adc	r25, r25
    a878:	28 17       	cp	r18, r24
    a87a:	39 07       	cpc	r19, r25
    a87c:	14 f3       	brlt	.-60     	; 0xa842 <NewGame+0x230>
				SetTile((fwidth*2)+1+(xoff*2),y+7+(yoff*2),GRIDSTART+6);
	}
}
    a87e:	1f 91       	pop	r17
    a880:	0f 91       	pop	r16
    a882:	08 95       	ret

0000a884 <CustomMenu>:
		WaitVsync(1);

	}
}

void CustomMenu(){
    a884:	df 92       	push	r13
    a886:	ef 92       	push	r14
    a888:	ff 92       	push	r15
    a88a:	0f 93       	push	r16
    a88c:	1f 93       	push	r17
	flags |= GUIOPEN;
    a88e:	80 91 d3 0d 	lds	r24, 0x0DD3
    a892:	80 62       	ori	r24, 0x20	; 32
    a894:	80 93 d3 0d 	sts	0x0DD3, r24
	DrawOpeningMenu(10,9,10,6,0);
    a898:	8a e0       	ldi	r24, 0x0A	; 10
    a89a:	69 e0       	ldi	r22, 0x09	; 9
    a89c:	4a e0       	ldi	r20, 0x0A	; 10
    a89e:	26 e0       	ldi	r18, 0x06	; 6
    a8a0:	00 e0       	ldi	r16, 0x00	; 0
    a8a2:	10 e0       	ldi	r17, 0x00	; 0
    a8a4:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <DrawOpeningMenu>

	print(11,10,PSTR("HEIGHT"));
    a8a8:	8b e0       	ldi	r24, 0x0B	; 11
    a8aa:	90 e0       	ldi	r25, 0x00	; 0
    a8ac:	6a e0       	ldi	r22, 0x0A	; 10
    a8ae:	70 e0       	ldi	r23, 0x00	; 0
    a8b0:	42 e4       	ldi	r20, 0x42	; 66
    a8b2:	54 e7       	ldi	r21, 0x74	; 116
    a8b4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(11,11,PSTR("WIDTH"));
    a8b8:	8b e0       	ldi	r24, 0x0B	; 11
    a8ba:	90 e0       	ldi	r25, 0x00	; 0
    a8bc:	6b e0       	ldi	r22, 0x0B	; 11
    a8be:	70 e0       	ldi	r23, 0x00	; 0
    a8c0:	4c e3       	ldi	r20, 0x3C	; 60
    a8c2:	54 e7       	ldi	r21, 0x74	; 116
    a8c4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(11,12,PSTR("MINES"));
    a8c8:	8b e0       	ldi	r24, 0x0B	; 11
    a8ca:	90 e0       	ldi	r25, 0x00	; 0
    a8cc:	6c e0       	ldi	r22, 0x0C	; 12
    a8ce:	70 e0       	ldi	r23, 0x00	; 0
    a8d0:	46 e3       	ldi	r20, 0x36	; 54
    a8d2:	54 e7       	ldi	r21, 0x74	; 116
    a8d4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(14,14,PSTR("OK"));
    a8d8:	8e e0       	ldi	r24, 0x0E	; 14
    a8da:	90 e0       	ldi	r25, 0x00	; 0
    a8dc:	6e e0       	ldi	r22, 0x0E	; 14
    a8de:	70 e0       	ldi	r23, 0x00	; 0
    a8e0:	43 e3       	ldi	r20, 0x33	; 51
    a8e2:	54 e7       	ldi	r21, 0x74	; 116
    a8e4:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
				if(++customwidth > 28)
				customwidth = 28;
		 }
		 else if(my >= 10*8){//height
				if(++customheight > 20)
				customheight = 20;
    a8e8:	b4 e1       	ldi	r27, 0x14	; 20
    a8ea:	db 2e       	mov	r13, r27
			 if(++custommines > 99)
				custommines = 99;
		 }
		 else if(my >= 11*8){//width
				if(++customwidth > 28)
				customwidth = 28;
    a8ec:	0c e1       	ldi	r16, 0x1C	; 28
		 }
		}
		else if(mrb && !mrbwd && mx >= 18*8 && mx <= 20*8 && my <= 13*8){
			if(my >= 12*8){//mines
			 if(++custommines > 99)
				custommines = 99;
    a8ee:	a3 e6       	ldi	r26, 0x63	; 99
    a8f0:	ea 2e       	mov	r14, r26
				if(--customwidth < 9)
				customwidth = 9;
		 }
		 else if(my >= 10*8){//height
				if(--customheight < 9)
				customheight = 9;
    a8f2:	19 e0       	ldi	r17, 0x09	; 9
		Input();
		
		if(mlb && !mlbwd && mx >= 18*8 && mx <= 20*8 && my <= 13*8){
			if(my >= 12*8){//mines
			 if(--custommines < 10)
				custommines = 10;
    a8f4:	fa e0       	ldi	r31, 0x0A	; 10
    a8f6:	ff 2e       	mov	r15, r31
	print(14,14,PSTR("OK"));

	while(true){
		Input();
		
		if(mlb && !mlbwd && mx >= 18*8 && mx <= 20*8 && my <= 13*8){
    a8f8:	90 91 a4 0c 	lds	r25, 0x0CA4
    a8fc:	99 23       	and	r25, r25
    a8fe:	a9 f1       	breq	.+106    	; 0xa96a <CustomMenu+0xe6>
    a900:	80 91 b3 0c 	lds	r24, 0x0CB3
    a904:	88 23       	and	r24, r24
    a906:	89 f5       	brne	.+98     	; 0xa96a <CustomMenu+0xe6>
    a908:	80 91 d6 0d 	lds	r24, 0x0DD6
    a90c:	80 39       	cpi	r24, 0x90	; 144
    a90e:	68 f1       	brcs	.+90     	; 0xa96a <CustomMenu+0xe6>
    a910:	81 3a       	cpi	r24, 0xA1	; 161
    a912:	58 f5       	brcc	.+86     	; 0xa96a <CustomMenu+0xe6>
    a914:	80 91 ac 0c 	lds	r24, 0x0CAC
    a918:	89 36       	cpi	r24, 0x69	; 105
    a91a:	38 f5       	brcc	.+78     	; 0xa96a <CustomMenu+0xe6>
			if(my >= 12*8){//mines
    a91c:	80 36       	cpi	r24, 0x60	; 96
    a91e:	58 f0       	brcs	.+22     	; 0xa936 <CustomMenu+0xb2>
			 if(--custommines < 10)
    a920:	80 91 9f 0c 	lds	r24, 0x0C9F
    a924:	81 50       	subi	r24, 0x01	; 1
    a926:	80 93 9f 0c 	sts	0x0C9F, r24
    a92a:	8a 30       	cpi	r24, 0x0A	; 10
    a92c:	08 f0       	brcs	.+2      	; 0xa930 <CustomMenu+0xac>
    a92e:	54 c0       	rjmp	.+168    	; 0xa9d8 <CustomMenu+0x154>
				custommines = 10;
    a930:	f0 92 9f 0c 	sts	0x0C9F, r15
    a934:	51 c0       	rjmp	.+162    	; 0xa9d8 <CustomMenu+0x154>
		 }
		 else if(my >= 11*8){//width
    a936:	88 35       	cpi	r24, 0x58	; 88
    a938:	58 f0       	brcs	.+22     	; 0xa950 <CustomMenu+0xcc>
				if(--customwidth < 9)
    a93a:	80 91 ab 0c 	lds	r24, 0x0CAB
    a93e:	81 50       	subi	r24, 0x01	; 1
    a940:	80 93 ab 0c 	sts	0x0CAB, r24
    a944:	89 30       	cpi	r24, 0x09	; 9
    a946:	08 f0       	brcs	.+2      	; 0xa94a <CustomMenu+0xc6>
    a948:	47 c0       	rjmp	.+142    	; 0xa9d8 <CustomMenu+0x154>
				customwidth = 9;
    a94a:	10 93 ab 0c 	sts	0x0CAB, r17
    a94e:	44 c0       	rjmp	.+136    	; 0xa9d8 <CustomMenu+0x154>
		 }
		 else if(my >= 10*8){//height
    a950:	80 35       	cpi	r24, 0x50	; 80
    a952:	08 f4       	brcc	.+2      	; 0xa956 <CustomMenu+0xd2>
    a954:	41 c0       	rjmp	.+130    	; 0xa9d8 <CustomMenu+0x154>
				if(--customheight < 9)
    a956:	80 91 d5 0d 	lds	r24, 0x0DD5
    a95a:	81 50       	subi	r24, 0x01	; 1
    a95c:	80 93 d5 0d 	sts	0x0DD5, r24
    a960:	89 30       	cpi	r24, 0x09	; 9
    a962:	d0 f5       	brcc	.+116    	; 0xa9d8 <CustomMenu+0x154>
				customheight = 9;
    a964:	10 93 d5 0d 	sts	0x0DD5, r17
    a968:	37 c0       	rjmp	.+110    	; 0xa9d8 <CustomMenu+0x154>
		 }
		}
		else if(mrb && !mrbwd && mx >= 18*8 && mx <= 20*8 && my <= 13*8){
    a96a:	80 91 aa 0c 	lds	r24, 0x0CAA
    a96e:	88 23       	and	r24, r24
    a970:	89 f1       	breq	.+98     	; 0xa9d4 <CustomMenu+0x150>
    a972:	80 91 a9 0c 	lds	r24, 0x0CA9
    a976:	88 23       	and	r24, r24
    a978:	69 f5       	brne	.+90     	; 0xa9d4 <CustomMenu+0x150>
    a97a:	80 91 d6 0d 	lds	r24, 0x0DD6
    a97e:	80 39       	cpi	r24, 0x90	; 144
    a980:	48 f1       	brcs	.+82     	; 0xa9d4 <CustomMenu+0x150>
    a982:	81 3a       	cpi	r24, 0xA1	; 161
    a984:	38 f5       	brcc	.+78     	; 0xa9d4 <CustomMenu+0x150>
    a986:	80 91 ac 0c 	lds	r24, 0x0CAC
    a98a:	89 36       	cpi	r24, 0x69	; 105
    a98c:	18 f5       	brcc	.+70     	; 0xa9d4 <CustomMenu+0x150>
			if(my >= 12*8){//mines
    a98e:	80 36       	cpi	r24, 0x60	; 96
    a990:	50 f0       	brcs	.+20     	; 0xa9a6 <CustomMenu+0x122>
			 if(++custommines > 99)
    a992:	80 91 9f 0c 	lds	r24, 0x0C9F
    a996:	8f 5f       	subi	r24, 0xFF	; 255
    a998:	80 93 9f 0c 	sts	0x0C9F, r24
    a99c:	84 36       	cpi	r24, 0x64	; 100
    a99e:	d0 f0       	brcs	.+52     	; 0xa9d4 <CustomMenu+0x150>
				custommines = 99;
    a9a0:	e0 92 9f 0c 	sts	0x0C9F, r14
    a9a4:	17 c0       	rjmp	.+46     	; 0xa9d4 <CustomMenu+0x150>
		 }
		 else if(my >= 11*8){//width
    a9a6:	88 35       	cpi	r24, 0x58	; 88
    a9a8:	50 f0       	brcs	.+20     	; 0xa9be <CustomMenu+0x13a>
				if(++customwidth > 28)
    a9aa:	80 91 ab 0c 	lds	r24, 0x0CAB
    a9ae:	8f 5f       	subi	r24, 0xFF	; 255
    a9b0:	80 93 ab 0c 	sts	0x0CAB, r24
    a9b4:	8d 31       	cpi	r24, 0x1D	; 29
    a9b6:	70 f0       	brcs	.+28     	; 0xa9d4 <CustomMenu+0x150>
				customwidth = 28;
    a9b8:	00 93 ab 0c 	sts	0x0CAB, r16
    a9bc:	0b c0       	rjmp	.+22     	; 0xa9d4 <CustomMenu+0x150>
		 }
		 else if(my >= 10*8){//height
    a9be:	80 35       	cpi	r24, 0x50	; 80
    a9c0:	48 f0       	brcs	.+18     	; 0xa9d4 <CustomMenu+0x150>
				if(++customheight > 20)
    a9c2:	80 91 d5 0d 	lds	r24, 0x0DD5
    a9c6:	8f 5f       	subi	r24, 0xFF	; 255
    a9c8:	80 93 d5 0d 	sts	0x0DD5, r24
    a9cc:	85 31       	cpi	r24, 0x15	; 21
    a9ce:	10 f0       	brcs	.+4      	; 0xa9d4 <CustomMenu+0x150>
				customheight = 20;
    a9d0:	d0 92 d5 0d 	sts	0x0DD5, r13
		 }
		}
		
		if(mlb && !mlbwd && mx >= 14*8 && mx <= 16*8 && my >= 14*8 && my <= 15*8){//ok
    a9d4:	99 23       	and	r25, r25
    a9d6:	09 f1       	breq	.+66     	; 0xaa1a <CustomMenu+0x196>
    a9d8:	80 91 b3 0c 	lds	r24, 0x0CB3
    a9dc:	88 23       	and	r24, r24
    a9de:	e9 f4       	brne	.+58     	; 0xaa1a <CustomMenu+0x196>
    a9e0:	80 91 d6 0d 	lds	r24, 0x0DD6
    a9e4:	80 37       	cpi	r24, 0x70	; 112
    a9e6:	c8 f0       	brcs	.+50     	; 0xaa1a <CustomMenu+0x196>
    a9e8:	81 38       	cpi	r24, 0x81	; 129
    a9ea:	b8 f4       	brcc	.+46     	; 0xaa1a <CustomMenu+0x196>
    a9ec:	80 91 ac 0c 	lds	r24, 0x0CAC
    a9f0:	80 37       	cpi	r24, 0x70	; 112
    a9f2:	98 f0       	brcs	.+38     	; 0xaa1a <CustomMenu+0x196>
    a9f4:	89 37       	cpi	r24, 0x79	; 121
    a9f6:	88 f4       	brcc	.+34     	; 0xaa1a <CustomMenu+0x196>
			RestoreBG(10,9);
    a9f8:	8a e0       	ldi	r24, 0x0A	; 10
    a9fa:	90 e0       	ldi	r25, 0x00	; 0
    a9fc:	69 e0       	ldi	r22, 0x09	; 9
    a9fe:	70 e0       	ldi	r23, 0x00	; 0
    aa00:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
		 skill = 3;
    aa04:	83 e0       	ldi	r24, 0x03	; 3
    aa06:	80 93 84 09 	sts	0x0984, r24
		 NewGame();
    aa0a:	0e 94 09 53 	call	0xa612	; 0xa612 <NewGame>
		DrawCursor();
		WaitVsync(1);
	}


}
    aa0e:	1f 91       	pop	r17
    aa10:	0f 91       	pop	r16
    aa12:	ff 90       	pop	r15
    aa14:	ef 90       	pop	r14
    aa16:	df 90       	pop	r13
    aa18:	08 95       	ret
			RestoreBG(10,9);
		 skill = 3;
		 NewGame();
		 return;
		}	 
		if(custommines < (customwidth*customheight)/10)
    aa1a:	80 91 9f 0c 	lds	r24, 0x0C9F
    aa1e:	e8 2f       	mov	r30, r24
    aa20:	f0 e0       	ldi	r31, 0x00	; 0
    aa22:	90 91 d5 0d 	lds	r25, 0x0DD5
    aa26:	80 91 ab 0c 	lds	r24, 0x0CAB
    aa2a:	98 9f       	mul	r25, r24
    aa2c:	90 01       	movw	r18, r0
    aa2e:	11 24       	eor	r1, r1
    aa30:	c9 01       	movw	r24, r18
    aa32:	6a e0       	ldi	r22, 0x0A	; 10
    aa34:	70 e0       	ldi	r23, 0x00	; 0
    aa36:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    aa3a:	cb 01       	movw	r24, r22
    aa3c:	e6 17       	cp	r30, r22
    aa3e:	f7 07       	cpc	r31, r23
    aa40:	4c f0       	brlt	.+18     	; 0xaa54 <CustomMenu+0x1d0>
			custommines = (customwidth*customheight)/10;
		else if(custommines > (customwidth*customheight)/5)
    aa42:	c9 01       	movw	r24, r18
    aa44:	65 e0       	ldi	r22, 0x05	; 5
    aa46:	70 e0       	ldi	r23, 0x00	; 0
    aa48:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    aa4c:	cb 01       	movw	r24, r22
    aa4e:	6e 17       	cp	r22, r30
    aa50:	7f 07       	cpc	r23, r31
    aa52:	14 f4       	brge	.+4      	; 0xaa58 <CustomMenu+0x1d4>
		 custommines = (customwidth*customheight)/5;
    aa54:	80 93 9f 0c 	sts	0x0C9F, r24

		print(18,10,PSTR("	"));
    aa58:	82 e1       	ldi	r24, 0x12	; 18
    aa5a:	90 e0       	ldi	r25, 0x00	; 0
    aa5c:	6a e0       	ldi	r22, 0x0A	; 10
    aa5e:	70 e0       	ldi	r23, 0x00	; 0
    aa60:	41 e3       	ldi	r20, 0x31	; 49
    aa62:	54 e7       	ldi	r21, 0x74	; 116
    aa64:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		print(18,11,PSTR("	"));
    aa68:	82 e1       	ldi	r24, 0x12	; 18
    aa6a:	90 e0       	ldi	r25, 0x00	; 0
    aa6c:	6b e0       	ldi	r22, 0x0B	; 11
    aa6e:	70 e0       	ldi	r23, 0x00	; 0
    aa70:	4f e2       	ldi	r20, 0x2F	; 47
    aa72:	54 e7       	ldi	r21, 0x74	; 116
    aa74:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		print(18,12,PSTR("	"));
    aa78:	82 e1       	ldi	r24, 0x12	; 18
    aa7a:	90 e0       	ldi	r25, 0x00	; 0
    aa7c:	6c e0       	ldi	r22, 0x0C	; 12
    aa7e:	70 e0       	ldi	r23, 0x00	; 0
    aa80:	4d e2       	ldi	r20, 0x2D	; 45
    aa82:	54 e7       	ldi	r21, 0x74	; 116
    aa84:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		printnum(19,10,customheight,false);
    aa88:	40 91 d5 0d 	lds	r20, 0x0DD5
    aa8c:	83 e1       	ldi	r24, 0x13	; 19
    aa8e:	6a e0       	ldi	r22, 0x0A	; 10
    aa90:	50 e0       	ldi	r21, 0x00	; 0
    aa92:	20 e0       	ldi	r18, 0x00	; 0
    aa94:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
		printnum(19,11,customwidth,false);
    aa98:	40 91 ab 0c 	lds	r20, 0x0CAB
    aa9c:	83 e1       	ldi	r24, 0x13	; 19
    aa9e:	6b e0       	ldi	r22, 0x0B	; 11
    aaa0:	50 e0       	ldi	r21, 0x00	; 0
    aaa2:	20 e0       	ldi	r18, 0x00	; 0
    aaa4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
		printnum(19,12,custommines,false);
    aaa8:	40 91 9f 0c 	lds	r20, 0x0C9F
    aaac:	83 e1       	ldi	r24, 0x13	; 19
    aaae:	6c e0       	ldi	r22, 0x0C	; 12
    aab0:	50 e0       	ldi	r21, 0x00	; 0
    aab2:	20 e0       	ldi	r18, 0x00	; 0
    aab4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    aab8:	80 91 d6 0d 	lds	r24, 0x0DD6
    aabc:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    aac0:	80 91 ac 0c 	lds	r24, 0x0CAC
    aac4:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    aac8:	00 93 ae 04 	sts	0x04AE, r16

		DrawCursor();
		WaitVsync(1);
    aacc:	81 e0       	ldi	r24, 0x01	; 1
    aace:	90 e0       	ldi	r25, 0x00	; 0
    aad0:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    aad4:	11 cf       	rjmp	.-478    	; 0xa8f8 <CustomMenu+0x74>

0000aad6 <ResetBoard>:
			seconds = 999;
	}
}

void ResetBoard(){
	FadeOut(1,true);
    aad6:	81 e0       	ldi	r24, 0x01	; 1
    aad8:	61 e0       	ldi	r22, 0x01	; 1
    aada:	0e 94 3a 48 	call	0x9074	; 0x9074 <FadeOut>
	FadeIn(1,false);
    aade:	81 e0       	ldi	r24, 0x01	; 1
    aae0:	60 e0       	ldi	r22, 0x00	; 0
    aae2:	0e 94 22 48 	call	0x9044	; 0x9044 <FadeIn>
	seconds=fracs=0;
    aae6:	10 92 a7 0c 	sts	0x0CA7, r1
    aaea:	10 92 b7 0c 	sts	0x0CB7, r1
    aaee:	10 92 b6 0c 	sts	0x0CB6, r1
	NewGame();
    aaf2:	0e 94 09 53 	call	0xa612	; 0xa612 <NewGame>
}
    aaf6:	08 95       	ret

0000aaf8 <InGameMenu>:
	for(u8 y=0;y<28;y++)
		SetTile(x,y,BLANKT);
	FadeIn(3,false);
}

void InGameMenu(){
    aaf8:	cf 92       	push	r12
    aafa:	df 92       	push	r13
    aafc:	ef 92       	push	r14
    aafe:	ff 92       	push	r15
    ab00:	0f 93       	push	r16
    ab02:	1f 93       	push	r17
	flags |= GUIOPEN;
    ab04:	80 91 d3 0d 	lds	r24, 0x0DD3
    ab08:	80 62       	ori	r24, 0x20	; 32
    ab0a:	80 93 d3 0d 	sts	0x0DD3, r24

	u8 cursorpos = 0;

	DrawOpeningMenu(11,9,9,15,0);
    ab0e:	8b e0       	ldi	r24, 0x0B	; 11
    ab10:	69 e0       	ldi	r22, 0x09	; 9
    ab12:	49 e0       	ldi	r20, 0x09	; 9
    ab14:	2f e0       	ldi	r18, 0x0F	; 15
    ab16:	00 e0       	ldi	r16, 0x00	; 0
    ab18:	10 e0       	ldi	r17, 0x00	; 0
    ab1a:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <DrawOpeningMenu>

	print(13,10,PSTR("BACK"));
    ab1e:	8d e0       	ldi	r24, 0x0D	; 13
    ab20:	90 e0       	ldi	r25, 0x00	; 0
    ab22:	6a e0       	ldi	r22, 0x0A	; 10
    ab24:	70 e0       	ldi	r23, 0x00	; 0
    ab26:	42 e9       	ldi	r20, 0x92	; 146
    ab28:	54 e7       	ldi	r21, 0x74	; 116
    ab2a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,11,PSTR("NEW"));
    ab2e:	8d e0       	ldi	r24, 0x0D	; 13
    ab30:	90 e0       	ldi	r25, 0x00	; 0
    ab32:	6b e0       	ldi	r22, 0x0B	; 11
    ab34:	70 e0       	ldi	r23, 0x00	; 0
    ab36:	4e e8       	ldi	r20, 0x8E	; 142
    ab38:	54 e7       	ldi	r21, 0x74	; 116
    ab3a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>

	print(13,13,PSTR("NOVICE"));//BEGINNER
    ab3e:	8d e0       	ldi	r24, 0x0D	; 13
    ab40:	90 e0       	ldi	r25, 0x00	; 0
    ab42:	6d e0       	ldi	r22, 0x0D	; 13
    ab44:	70 e0       	ldi	r23, 0x00	; 0
    ab46:	47 e8       	ldi	r20, 0x87	; 135
    ab48:	54 e7       	ldi	r21, 0x74	; 116
    ab4a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,14,PSTR("MIDDLE"));//INTERMEDIATE
    ab4e:	8d e0       	ldi	r24, 0x0D	; 13
    ab50:	90 e0       	ldi	r25, 0x00	; 0
    ab52:	6e e0       	ldi	r22, 0x0E	; 14
    ab54:	70 e0       	ldi	r23, 0x00	; 0
    ab56:	40 e8       	ldi	r20, 0x80	; 128
    ab58:	54 e7       	ldi	r21, 0x74	; 116
    ab5a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,15,PSTR("EXPERT"));//EXPERT
    ab5e:	8d e0       	ldi	r24, 0x0D	; 13
    ab60:	90 e0       	ldi	r25, 0x00	; 0
    ab62:	6f e0       	ldi	r22, 0x0F	; 15
    ab64:	70 e0       	ldi	r23, 0x00	; 0
    ab66:	49 e7       	ldi	r20, 0x79	; 121
    ab68:	54 e7       	ldi	r21, 0x74	; 116
    ab6a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,16,PSTR("CUSTOM"));
    ab6e:	8d e0       	ldi	r24, 0x0D	; 13
    ab70:	90 e0       	ldi	r25, 0x00	; 0
    ab72:	60 e1       	ldi	r22, 0x10	; 16
    ab74:	70 e0       	ldi	r23, 0x00	; 0
    ab76:	42 e7       	ldi	r20, 0x72	; 114
    ab78:	54 e7       	ldi	r21, 0x74	; 116
    ab7a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>

	print(13,18,PSTR("MARKS"));
    ab7e:	8d e0       	ldi	r24, 0x0D	; 13
    ab80:	90 e0       	ldi	r25, 0x00	; 0
    ab82:	62 e1       	ldi	r22, 0x12	; 18
    ab84:	70 e0       	ldi	r23, 0x00	; 0
    ab86:	4c e6       	ldi	r20, 0x6C	; 108
    ab88:	54 e7       	ldi	r21, 0x74	; 116
    ab8a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,19,PSTR("SOUND"));
    ab8e:	8d e0       	ldi	r24, 0x0D	; 13
    ab90:	90 e0       	ldi	r25, 0x00	; 0
    ab92:	63 e1       	ldi	r22, 0x13	; 19
    ab94:	70 e0       	ldi	r23, 0x00	; 0
    ab96:	46 e6       	ldi	r20, 0x66	; 102
    ab98:	54 e7       	ldi	r21, 0x74	; 116
    ab9a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,20,PSTR("MUSIC"));
    ab9e:	8d e0       	ldi	r24, 0x0D	; 13
    aba0:	90 e0       	ldi	r25, 0x00	; 0
    aba2:	64 e1       	ldi	r22, 0x14	; 20
    aba4:	70 e0       	ldi	r23, 0x00	; 0
    aba6:	40 e6       	ldi	r20, 0x60	; 96
    aba8:	54 e7       	ldi	r21, 0x74	; 116
    abaa:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>


	print(13,22,PSTR("SCORE"));//BEST3TIMES
    abae:	8d e0       	ldi	r24, 0x0D	; 13
    abb0:	90 e0       	ldi	r25, 0x00	; 0
    abb2:	66 e1       	ldi	r22, 0x16	; 22
    abb4:	70 e0       	ldi	r23, 0x00	; 0
    abb6:	4a e5       	ldi	r20, 0x5A	; 90
    abb8:	54 e7       	ldi	r21, 0x74	; 116
    abba:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
	print(13,23,PSTR("ABOUT"));
    abbe:	8d e0       	ldi	r24, 0x0D	; 13
    abc0:	90 e0       	ldi	r25, 0x00	; 0
    abc2:	67 e1       	ldi	r22, 0x17	; 23
    abc4:	70 e0       	ldi	r23, 0x00	; 0
    abc6:	44 e5       	ldi	r20, 0x54	; 84
    abc8:	54 e7       	ldi	r21, 0x74	; 116
    abca:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    abce:	00 e0       	ldi	r16, 0x00	; 0
    abd0:	ff 24       	eor	r15, r15
			 flags ^= MARKS;
			else
			 flags |= MARKS;
		}else if(cursorpos == 9){
			if(flags & SOUND)
			 flags ^= SOUND;
    abd2:	28 e0       	ldi	r18, 0x08	; 8
    abd4:	c2 2e       	mov	r12, r18
		 NewGame();
		 return;
		}
		else if(cursorpos == 8){
			if(flags & MARKS)
			 flags ^= MARKS;
    abd6:	90 e1       	ldi	r25, 0x10	; 16
    abd8:	e9 2e       	mov	r14, r25
}

void DrawCursor(){
	sprites[9].x = mx;
	sprites[9].y = my;
	sprites[9].tileIndex = 28;
    abda:	8c e1       	ldi	r24, 0x1C	; 28
    abdc:	d8 2e       	mov	r13, r24
	u8 secretcount = 0;

	while(true){

	Input();
	if(mx > 107 && mx < 108+25 && my > 15 && my < 16+25){//mouse is on face
    abde:	90 91 d6 0d 	lds	r25, 0x0DD6
    abe2:	89 2f       	mov	r24, r25
    abe4:	8c 56       	subi	r24, 0x6C	; 108
    abe6:	89 31       	cpi	r24, 0x19	; 25
    abe8:	28 f5       	brcc	.+74     	; 0xac34 <InGameMenu+0x13c>
    abea:	80 91 ac 0c 	lds	r24, 0x0CAC
    abee:	80 31       	cpi	r24, 0x10	; 16
    abf0:	08 f1       	brcs	.+66     	; 0xac34 <InGameMenu+0x13c>
    abf2:	89 32       	cpi	r24, 0x29	; 41
    abf4:	f8 f4       	brcc	.+62     	; 0xac34 <InGameMenu+0x13c>
	 if(mrb && !mrbwd && ++secretcount > 45){//clicked the face 45 times, exciting secret....yeah
    abf6:	80 91 aa 0c 	lds	r24, 0x0CAA
    abfa:	88 23       	and	r24, r24
    abfc:	79 f1       	breq	.+94     	; 0xac5c <InGameMenu+0x164>
    abfe:	80 91 a9 0c 	lds	r24, 0x0CA9
    ac02:	88 23       	and	r24, r24
    ac04:	59 f5       	brne	.+86     	; 0xac5c <InGameMenu+0x164>
    ac06:	f3 94       	inc	r15
    ac08:	8d e2       	ldi	r24, 0x2D	; 45
    ac0a:	8f 15       	cp	r24, r15
    ac0c:	38 f5       	brcc	.+78     	; 0xac5c <InGameMenu+0x164>
		 DrawFace(108,16,4);
    ac0e:	8c e6       	ldi	r24, 0x6C	; 108
    ac10:	60 e1       	ldi	r22, 0x10	; 16
    ac12:	44 e0       	ldi	r20, 0x04	; 4
    ac14:	0e 94 a2 4a 	call	0x9544	; 0x9544 <DrawFace>
		flags |= DEBUG;
    ac18:	80 91 d3 0d 	lds	r24, 0x0DD3
    ac1c:	80 68       	ori	r24, 0x80	; 128
    ac1e:	80 93 d3 0d 	sts	0x0DD3, r24
		print(11,8,PSTR("DEBUG MODE"));
    ac22:	8b e0       	ldi	r24, 0x0B	; 11
    ac24:	90 e0       	ldi	r25, 0x00	; 0
    ac26:	68 e0       	ldi	r22, 0x08	; 8
    ac28:	70 e0       	ldi	r23, 0x00	; 0
    ac2a:	49 e4       	ldi	r20, 0x49	; 73
    ac2c:	54 e7       	ldi	r21, 0x74	; 116
    ac2e:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    ac32:	14 c0       	rjmp	.+40     	; 0xac5c <InGameMenu+0x164>
	}
	}
	else if(mx >= 12*8 && mx <= 21*8 && my >= 9*8 && my <= 25*8)//pointer is in valid menu area
    ac34:	90 56       	subi	r25, 0x60	; 96
    ac36:	99 34       	cpi	r25, 0x49	; 73
    ac38:	08 f0       	brcs	.+2      	; 0xac3c <InGameMenu+0x144>
    ac3a:	51 c0       	rjmp	.+162    	; 0xacde <InGameMenu+0x1e6>
    ac3c:	80 91 ac 0c 	lds	r24, 0x0CAC
    ac40:	88 34       	cpi	r24, 0x48	; 72
    ac42:	08 f4       	brcc	.+2      	; 0xac46 <InGameMenu+0x14e>
    ac44:	4c c0       	rjmp	.+152    	; 0xacde <InGameMenu+0x1e6>
    ac46:	89 3c       	cpi	r24, 0xC9	; 201
    ac48:	08 f0       	brcs	.+2      	; 0xac4c <InGameMenu+0x154>
    ac4a:	49 c0       	rjmp	.+146    	; 0xacde <InGameMenu+0x1e6>
		cursorpos = (my-(10*8))/8;
    ac4c:	90 e0       	ldi	r25, 0x00	; 0
    ac4e:	80 55       	subi	r24, 0x50	; 80
    ac50:	90 40       	sbci	r25, 0x00	; 0
    ac52:	68 e0       	ldi	r22, 0x08	; 8
    ac54:	70 e0       	ldi	r23, 0x00	; 0
    ac56:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    ac5a:	06 2f       	mov	r16, r22
	else
		cursorpos = 255;

	if(cursorpos != 255 && mlb && !mlbwd){
    ac5c:	0f 3f       	cpi	r16, 0xFF	; 255
    ac5e:	09 f4       	brne	.+2      	; 0xac62 <InGameMenu+0x16a>
    ac60:	3f c0       	rjmp	.+126    	; 0xace0 <InGameMenu+0x1e8>
    ac62:	80 91 a4 0c 	lds	r24, 0x0CA4
    ac66:	88 23       	and	r24, r24
    ac68:	d9 f1       	breq	.+118    	; 0xace0 <InGameMenu+0x1e8>
    ac6a:	80 91 b3 0c 	lds	r24, 0x0CB3
    ac6e:	88 23       	and	r24, r24
    ac70:	b9 f5       	brne	.+110    	; 0xace0 <InGameMenu+0x1e8>

		if(cursorpos == 0){//back
    ac72:	00 23       	and	r16, r16
    ac74:	39 f4       	brne	.+14     	; 0xac84 <InGameMenu+0x18c>
			RestoreBG(11,9);
    ac76:	8b e0       	ldi	r24, 0x0B	; 11
    ac78:	90 e0       	ldi	r25, 0x00	; 0
    ac7a:	69 e0       	ldi	r22, 0x09	; 9
    ac7c:	70 e0       	ldi	r23, 0x00	; 0
    ac7e:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
    ac82:	ac c0       	rjmp	.+344    	; 0xaddc <InGameMenu+0x2e4>
			return;
		}
		else if(cursorpos == 1){//new
    ac84:	01 30       	cpi	r16, 0x01	; 1
    ac86:	19 f4       	brne	.+6      	; 0xac8e <InGameMenu+0x196>
			ResetBoard();
    ac88:	0e 94 6b 55 	call	0xaad6	; 0xaad6 <ResetBoard>
    ac8c:	a7 c0       	rjmp	.+334    	; 0xaddc <InGameMenu+0x2e4>
		 return;
		}
		else if(cursorpos > 2 && cursorpos < 7){//skill level
    ac8e:	80 2f       	mov	r24, r16
    ac90:	83 50       	subi	r24, 0x03	; 3
    ac92:	84 30       	cpi	r24, 0x04	; 4
    ac94:	80 f4       	brcc	.+32     	; 0xacb6 <InGameMenu+0x1be>
		 skill = cursorpos-3;
    ac96:	80 93 84 09 	sts	0x0984, r24
		 if(skill == 3){//custom
    ac9a:	83 30       	cpi	r24, 0x03	; 3
    ac9c:	49 f4       	brne	.+18     	; 0xacb0 <InGameMenu+0x1b8>
				RestoreBG(11,9);
    ac9e:	8b e0       	ldi	r24, 0x0B	; 11
    aca0:	90 e0       	ldi	r25, 0x00	; 0
    aca2:	69 e0       	ldi	r22, 0x09	; 9
    aca4:	70 e0       	ldi	r23, 0x00	; 0
    aca6:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
			CustomMenu();
    acaa:	0e 94 42 54 	call	0xa884	; 0xa884 <CustomMenu>
    acae:	96 c0       	rjmp	.+300    	; 0xaddc <InGameMenu+0x2e4>
			 return;
		 }
		 NewGame();
    acb0:	0e 94 09 53 	call	0xa612	; 0xa612 <NewGame>
    acb4:	93 c0       	rjmp	.+294    	; 0xaddc <InGameMenu+0x2e4>
		 return;
		}
		else if(cursorpos == 8){
    acb6:	08 30       	cpi	r16, 0x08	; 8
    acb8:	51 f4       	brne	.+20     	; 0xacce <InGameMenu+0x1d6>
			if(flags & MARKS)
    acba:	80 91 d3 0d 	lds	r24, 0x0DD3
    acbe:	84 ff       	sbrs	r24, 4
    acc0:	02 c0       	rjmp	.+4      	; 0xacc6 <InGameMenu+0x1ce>
			 flags ^= MARKS;
    acc2:	8e 25       	eor	r24, r14
    acc4:	01 c0       	rjmp	.+2      	; 0xacc8 <InGameMenu+0x1d0>
			else
			 flags |= MARKS;
    acc6:	80 61       	ori	r24, 0x10	; 16
    acc8:	80 93 d3 0d 	sts	0x0DD3, r24
    accc:	09 c0       	rjmp	.+18     	; 0xace0 <InGameMenu+0x1e8>
		}else if(cursorpos == 9){
    acce:	09 30       	cpi	r16, 0x09	; 9
    acd0:	59 f4       	brne	.+22     	; 0xace8 <InGameMenu+0x1f0>
			if(flags & SOUND)
    acd2:	80 91 d3 0d 	lds	r24, 0x0DD3
    acd6:	83 ff       	sbrs	r24, 3
    acd8:	05 c0       	rjmp	.+10     	; 0xace4 <InGameMenu+0x1ec>
			 flags ^= SOUND;
    acda:	8c 25       	eor	r24, r12
    acdc:	f5 cf       	rjmp	.-22     	; 0xacc8 <InGameMenu+0x1d0>
    acde:	0f ef       	ldi	r16, 0xFF	; 255
    ace0:	1d e0       	ldi	r17, 0x0D	; 13
    ace2:	34 c0       	rjmp	.+104    	; 0xad4c <InGameMenu+0x254>
			else
			 flags |= SOUND;
    ace4:	88 60       	ori	r24, 0x08	; 8
    ace6:	f0 cf       	rjmp	.-32     	; 0xacc8 <InGameMenu+0x1d0>
		}
		else if(cursorpos == 10){//music
    ace8:	0a 30       	cpi	r16, 0x0A	; 10
    acea:	d1 f4       	brne	.+52     	; 0xad20 <InGameMenu+0x228>
			if(++music > NUMSONGS)
    acec:	80 91 1e 01 	lds	r24, 0x011E
    acf0:	8f 5f       	subi	r24, 0xFF	; 255
    acf2:	80 93 1e 01 	sts	0x011E, r24
    acf6:	86 30       	cpi	r24, 0x06	; 6
    acf8:	10 f0       	brcs	.+4      	; 0xacfe <InGameMenu+0x206>
			 music = 0;
    acfa:	10 92 1e 01 	sts	0x011E, r1
			
		 StopSong();
    acfe:	0e 94 5e 40 	call	0x80bc	; 0x80bc <StopSong>
			if(music)
    ad02:	80 91 1e 01 	lds	r24, 0x011E
    ad06:	88 23       	and	r24, r24
    ad08:	59 f3       	breq	.-42     	; 0xace0 <InGameMenu+0x1e8>
				StartSong((const char *)(pgm_read_word(&musicData[music])));
    ad0a:	e8 2f       	mov	r30, r24
    ad0c:	f0 e0       	ldi	r31, 0x00	; 0
    ad0e:	ee 0f       	add	r30, r30
    ad10:	ff 1f       	adc	r31, r31
    ad12:	ed 59       	subi	r30, 0x9D	; 157
    ad14:	fc 48       	sbci	r31, 0x8C	; 140
    ad16:	85 91       	lpm	r24, Z+
    ad18:	94 91       	lpm	r25, Z+
    ad1a:	0e 94 35 40 	call	0x806a	; 0x806a <StartSong>
    ad1e:	e0 cf       	rjmp	.-64     	; 0xace0 <InGameMenu+0x1e8>
		}
		else if(cursorpos == 12){//scores
    ad20:	0c 30       	cpi	r16, 0x0C	; 12
    ad22:	49 f4       	brne	.+18     	; 0xad36 <InGameMenu+0x23e>
			RestoreBG(11,9);
    ad24:	8b e0       	ldi	r24, 0x0B	; 11
    ad26:	90 e0       	ldi	r25, 0x00	; 0
    ad28:	69 e0       	ldi	r22, 0x09	; 9
    ad2a:	70 e0       	ldi	r23, 0x00	; 0
    ad2c:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
		 ScoreMenu();
    ad30:	0e 94 c0 50 	call	0xa180	; 0xa180 <ScoreMenu>
    ad34:	53 c0       	rjmp	.+166    	; 0xaddc <InGameMenu+0x2e4>
		 return;
		}
		else if(cursorpos == 13){//about
    ad36:	0d 30       	cpi	r16, 0x0D	; 13
    ad38:	99 f6       	brne	.-90     	; 0xace0 <InGameMenu+0x1e8>
			RestoreBG(11,9);
    ad3a:	8b e0       	ldi	r24, 0x0B	; 11
    ad3c:	90 e0       	ldi	r25, 0x00	; 0
    ad3e:	69 e0       	ldi	r22, 0x09	; 9
    ad40:	70 e0       	ldi	r23, 0x00	; 0
    ad42:	0e 94 99 49 	call	0x9332	; 0x9332 <RestoreBG>
		 AboutMenu();
    ad46:	0e 94 3f 52 	call	0xa47e	; 0xa47e <AboutMenu>
    ad4a:	48 c0       	rjmp	.+144    	; 0xaddc <InGameMenu+0x2e4>
		else{//empty spot

		}
	}		
	
	for(u8 i=0;i<4;i++){SetTile(19,13+i,BLANKT);}//cover skill check mark
    ad4c:	83 e1       	ldi	r24, 0x13	; 19
    ad4e:	61 2f       	mov	r22, r17
    ad50:	4d e0       	ldi	r20, 0x0D	; 13
    ad52:	50 e0       	ldi	r21, 0x00	; 0
    ad54:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
    ad58:	1f 5f       	subi	r17, 0xFF	; 255
    ad5a:	11 31       	cpi	r17, 0x11	; 17
    ad5c:	b9 f7       	brne	.-18     	; 0xad4c <InGameMenu+0x254>
	SetTile(19,13+skill,FONTSTART+21);	 
    ad5e:	60 91 84 09 	lds	r22, 0x0984
    ad62:	63 5f       	subi	r22, 0xF3	; 243
    ad64:	83 e1       	ldi	r24, 0x13	; 19
    ad66:	45 e8       	ldi	r20, 0x85	; 133
    ad68:	50 e0       	ldi	r21, 0x00	; 0
    ad6a:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	
	if(flags & MARKS){SetTile(19,18,FONTSTART+21);}else{SetTile(19,18,BLANKT);}	
    ad6e:	80 91 d3 0d 	lds	r24, 0x0DD3
    ad72:	84 ff       	sbrs	r24, 4
    ad74:	05 c0       	rjmp	.+10     	; 0xad80 <InGameMenu+0x288>
    ad76:	83 e1       	ldi	r24, 0x13	; 19
    ad78:	62 e1       	ldi	r22, 0x12	; 18
    ad7a:	45 e8       	ldi	r20, 0x85	; 133
    ad7c:	50 e0       	ldi	r21, 0x00	; 0
    ad7e:	04 c0       	rjmp	.+8      	; 0xad88 <InGameMenu+0x290>
    ad80:	83 e1       	ldi	r24, 0x13	; 19
    ad82:	62 e1       	ldi	r22, 0x12	; 18
    ad84:	4d e0       	ldi	r20, 0x0D	; 13
    ad86:	50 e0       	ldi	r21, 0x00	; 0
    ad88:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	if(flags & SOUND){SetTile(19,19,FONTSTART+21);}else{SetTile(19,19,BLANKT);}
    ad8c:	80 91 d3 0d 	lds	r24, 0x0DD3
    ad90:	83 ff       	sbrs	r24, 3
    ad92:	05 c0       	rjmp	.+10     	; 0xad9e <InGameMenu+0x2a6>
    ad94:	83 e1       	ldi	r24, 0x13	; 19
    ad96:	63 e1       	ldi	r22, 0x13	; 19
    ad98:	45 e8       	ldi	r20, 0x85	; 133
    ad9a:	50 e0       	ldi	r21, 0x00	; 0
    ad9c:	04 c0       	rjmp	.+8      	; 0xada6 <InGameMenu+0x2ae>
    ad9e:	83 e1       	ldi	r24, 0x13	; 19
    ada0:	63 e1       	ldi	r22, 0x13	; 19
    ada2:	4d e0       	ldi	r20, 0x0D	; 13
    ada4:	50 e0       	ldi	r21, 0x00	; 0
    ada6:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	printnum(19,20,music,false);
    adaa:	40 91 1e 01 	lds	r20, 0x011E
    adae:	83 e1       	ldi	r24, 0x13	; 19
    adb0:	64 e1       	ldi	r22, 0x14	; 20
    adb2:	50 e0       	ldi	r21, 0x00	; 0
    adb4:	20 e0       	ldi	r18, 0x00	; 0
    adb6:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    adba:	80 91 d6 0d 	lds	r24, 0x0DD6
    adbe:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    adc2:	80 91 ac 0c 	lds	r24, 0x0CAC
    adc6:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    adca:	d0 92 ae 04 	sts	0x04AE, r13
			
		DrawCursor();
		prand();
    adce:	0e 94 de 49 	call	0x93bc	; 0x93bc <prand>
		WaitVsync(1);
    add2:	81 e0       	ldi	r24, 0x01	; 1
    add4:	90 e0       	ldi	r25, 0x00	; 0
    add6:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    adda:	01 cf       	rjmp	.-510    	; 0xabde <InGameMenu+0xe6>

	}
}
    addc:	1f 91       	pop	r17
    adde:	0f 91       	pop	r16
    ade0:	ff 90       	pop	r15
    ade2:	ef 90       	pop	r14
    ade4:	df 90       	pop	r13
    ade6:	cf 90       	pop	r12
    ade8:	08 95       	ret

0000adea <MainLoop>:
	FadeIn(1,false);
	seconds=fracs=0;
	NewGame();
}

void MainLoop(){
    adea:	a0 e0       	ldi	r26, 0x00	; 0
    adec:	b0 e0       	ldi	r27, 0x00	; 0
    adee:	eb ef       	ldi	r30, 0xFB	; 251
    adf0:	f6 e5       	ldi	r31, 0x56	; 86
    adf2:	0c 94 1d 5a 	jmp	0xb43a	; 0xb43a <__prologue_saves__+0xe>
			Draw();
		 WaitVsync(1);
			continue;
		}
	else{
			flags ^= GUIOPEN;
    adf6:	30 e2       	ldi	r19, 0x20	; 32
    adf8:	93 2e       	mov	r9, r19
	}

	if(mx < 8+(xoff*8) || my < 57+(yoff*8)+(yoff*8*!(flags & BIGFIELD)) ||
		(flags & BIGFIELD && (mx > (fwidth*8)+7+(xoff*8) || my > (fheight*8)+56+(yoff*8))) ||
		(!(flags & BIGFIELD) && (mx > (fwidth*16)+7+(xoff*16) || my > (fheight*16)+56+(yoff*16))))
		mgridx = mgridy = 255;//mark grid coords invalid
    adfa:	aa 24       	eor	r10, r10
    adfc:	aa 94       	dec	r10

void MainLoop(){

	while(true){
	Input();
	if(flags & GUIOPEN){//don't use click that got us out of the gui
    adfe:	b0 90 d3 0d 	lds	r11, 0x0DD3
    ae02:	cb 2c       	mov	r12, r11
    ae04:	dd 24       	eor	r13, r13
    ae06:	b5 fe       	sbrs	r11, 5
    ae08:	18 c0       	rjmp	.+48     	; 0xae3a <MainLoop+0x50>
		if(mlb || mlbwd || mrb || mrbwd){
    ae0a:	80 91 a4 0c 	lds	r24, 0x0CA4
    ae0e:	88 23       	and	r24, r24
    ae10:	09 f0       	breq	.+2      	; 0xae14 <MainLoop+0x2a>
    ae12:	21 c2       	rjmp	.+1090   	; 0xb256 <MainLoop+0x46c>
    ae14:	80 91 b3 0c 	lds	r24, 0x0CB3
    ae18:	88 23       	and	r24, r24
    ae1a:	09 f0       	breq	.+2      	; 0xae1e <MainLoop+0x34>
    ae1c:	1c c2       	rjmp	.+1080   	; 0xb256 <MainLoop+0x46c>
    ae1e:	80 91 aa 0c 	lds	r24, 0x0CAA
    ae22:	88 23       	and	r24, r24
    ae24:	09 f0       	breq	.+2      	; 0xae28 <MainLoop+0x3e>
    ae26:	17 c2       	rjmp	.+1070   	; 0xb256 <MainLoop+0x46c>
    ae28:	80 91 a9 0c 	lds	r24, 0x0CA9
    ae2c:	88 23       	and	r24, r24
    ae2e:	09 f0       	breq	.+2      	; 0xae32 <MainLoop+0x48>
    ae30:	12 c2       	rjmp	.+1060   	; 0xb256 <MainLoop+0x46c>
			Draw();
		 WaitVsync(1);
			continue;
		}
	else{
			flags ^= GUIOPEN;
    ae32:	b9 24       	eor	r11, r9
    ae34:	b0 92 d3 0d 	sts	0x0DD3, r11
    ae38:	10 c2       	rjmp	.+1056   	; 0xb25a <MainLoop+0x470>
			WaitVsync(1);
		 continue;
		}
	}

	if(mx < 8+(xoff*8) || my < 57+(yoff*8)+(yoff*8*!(flags & BIGFIELD)) ||
    ae3a:	80 91 d6 0d 	lds	r24, 0x0DD6
    ae3e:	c8 2f       	mov	r28, r24
    ae40:	d0 e0       	ldi	r29, 0x00	; 0
    ae42:	80 91 a8 0c 	lds	r24, 0x0CA8
    ae46:	68 2f       	mov	r22, r24
    ae48:	70 e0       	ldi	r23, 0x00	; 0
    ae4a:	cb 01       	movw	r24, r22
    ae4c:	01 96       	adiw	r24, 0x01	; 1
    ae4e:	23 e0       	ldi	r18, 0x03	; 3
    ae50:	88 0f       	add	r24, r24
    ae52:	99 1f       	adc	r25, r25
    ae54:	2a 95       	dec	r18
    ae56:	e1 f7       	brne	.-8      	; 0xae50 <MainLoop+0x66>
    ae58:	c8 17       	cp	r28, r24
    ae5a:	d9 07       	cpc	r29, r25
    ae5c:	0c f4       	brge	.+2      	; 0xae60 <MainLoop+0x76>
    ae5e:	65 c0       	rjmp	.+202    	; 0xaf2a <MainLoop+0x140>
    ae60:	80 91 b2 0c 	lds	r24, 0x0CB2
    ae64:	e8 2f       	mov	r30, r24
    ae66:	f0 e0       	ldi	r31, 0x00	; 0
    ae68:	df 01       	movw	r26, r30
    ae6a:	93 e0       	ldi	r25, 0x03	; 3
    ae6c:	aa 0f       	add	r26, r26
    ae6e:	bb 1f       	adc	r27, r27
    ae70:	9a 95       	dec	r25
    ae72:	e1 f7       	brne	.-8      	; 0xae6c <MainLoop+0x82>
    ae74:	80 91 ac 0c 	lds	r24, 0x0CAC
    ae78:	08 2f       	mov	r16, r24
    ae7a:	10 e0       	ldi	r17, 0x00	; 0
    ae7c:	9d 01       	movw	r18, r26
    ae7e:	28 5c       	subi	r18, 0xC8	; 200
    ae80:	3f 4f       	sbci	r19, 0xFF	; 255
    ae82:	40 e0       	ldi	r20, 0x00	; 0
    ae84:	50 e0       	ldi	r21, 0x00	; 0
    ae86:	80 e4       	ldi	r24, 0x40	; 64
    ae88:	e8 2e       	mov	r14, r24
    ae8a:	f1 2c       	mov	r15, r1
    ae8c:	ec 20       	and	r14, r12
    ae8e:	fd 20       	and	r15, r13
    ae90:	b6 fc       	sbrc	r11, 6
    ae92:	02 c0       	rjmp	.+4      	; 0xae98 <MainLoop+0xae>
    ae94:	41 e0       	ldi	r20, 0x01	; 1
    ae96:	50 e0       	ldi	r21, 0x00	; 0
    ae98:	4a 9f       	mul	r20, r26
    ae9a:	c0 01       	movw	r24, r0
    ae9c:	4b 9f       	mul	r20, r27
    ae9e:	90 0d       	add	r25, r0
    aea0:	5a 9f       	mul	r21, r26
    aea2:	90 0d       	add	r25, r0
    aea4:	11 24       	eor	r1, r1
    aea6:	28 0f       	add	r18, r24
    aea8:	39 1f       	adc	r19, r25
    aeaa:	20 17       	cp	r18, r16
    aeac:	31 07       	cpc	r19, r17
    aeae:	ec f5       	brge	.+122    	; 0xaf2a <MainLoop+0x140>
    aeb0:	80 91 ba 0c 	lds	r24, 0x0CBA
    aeb4:	ef 28       	or	r14, r15
    aeb6:	e9 f0       	breq	.+58     	; 0xaef2 <MainLoop+0x108>
    aeb8:	9b 01       	movw	r18, r22
    aeba:	28 0f       	add	r18, r24
    aebc:	31 1d       	adc	r19, r1
    aebe:	c9 01       	movw	r24, r18
    aec0:	43 e0       	ldi	r20, 0x03	; 3
    aec2:	88 0f       	add	r24, r24
    aec4:	99 1f       	adc	r25, r25
    aec6:	4a 95       	dec	r20
    aec8:	e1 f7       	brne	.-8      	; 0xaec2 <MainLoop+0xd8>
    aeca:	07 96       	adiw	r24, 0x07	; 7
    aecc:	8c 17       	cp	r24, r28
    aece:	9d 07       	cpc	r25, r29
    aed0:	64 f1       	brlt	.+88     	; 0xaf2a <MainLoop+0x140>
    aed2:	80 91 b0 0c 	lds	r24, 0x0CB0
    aed6:	9f 01       	movw	r18, r30
    aed8:	28 0f       	add	r18, r24
    aeda:	31 1d       	adc	r19, r1
    aedc:	c9 01       	movw	r24, r18
    aede:	07 96       	adiw	r24, 0x07	; 7
    aee0:	33 e0       	ldi	r19, 0x03	; 3
    aee2:	88 0f       	add	r24, r24
    aee4:	99 1f       	adc	r25, r25
    aee6:	3a 95       	dec	r19
    aee8:	e1 f7       	brne	.-8      	; 0xaee2 <MainLoop+0xf8>
    aeea:	80 17       	cp	r24, r16
    aeec:	91 07       	cpc	r25, r17
    aeee:	ec f0       	brlt	.+58     	; 0xaf2a <MainLoop+0x140>
    aef0:	21 c0       	rjmp	.+66     	; 0xaf34 <MainLoop+0x14a>
    aef2:	9b 01       	movw	r18, r22
    aef4:	28 0f       	add	r18, r24
    aef6:	31 1d       	adc	r19, r1
    aef8:	c9 01       	movw	r24, r18
    aefa:	24 e0       	ldi	r18, 0x04	; 4
    aefc:	88 0f       	add	r24, r24
    aefe:	99 1f       	adc	r25, r25
    af00:	2a 95       	dec	r18
    af02:	e1 f7       	brne	.-8      	; 0xaefc <MainLoop+0x112>
    af04:	07 96       	adiw	r24, 0x07	; 7
    af06:	8c 17       	cp	r24, r28
    af08:	9d 07       	cpc	r25, r29
    af0a:	7c f0       	brlt	.+30     	; 0xaf2a <MainLoop+0x140>
    af0c:	80 91 b0 0c 	lds	r24, 0x0CB0
    af10:	9f 01       	movw	r18, r30
    af12:	28 0f       	add	r18, r24
    af14:	31 1d       	adc	r19, r1
    af16:	c9 01       	movw	r24, r18
    af18:	b4 e0       	ldi	r27, 0x04	; 4
    af1a:	88 0f       	add	r24, r24
    af1c:	99 1f       	adc	r25, r25
    af1e:	ba 95       	dec	r27
    af20:	e1 f7       	brne	.-8      	; 0xaf1a <MainLoop+0x130>
    af22:	c8 96       	adiw	r24, 0x38	; 56
    af24:	80 17       	cp	r24, r16
    af26:	91 07       	cpc	r25, r17
    af28:	d4 f4       	brge	.+52     	; 0xaf5e <MainLoop+0x174>
		(flags & BIGFIELD && (mx > (fwidth*8)+7+(xoff*8) || my > (fheight*8)+56+(yoff*8))) ||
		(!(flags & BIGFIELD) && (mx > (fwidth*16)+7+(xoff*16) || my > (fheight*16)+56+(yoff*16))))
		mgridx = mgridy = 255;//mark grid coords invalid
    af2a:	a0 92 ad 0c 	sts	0x0CAD, r10
    af2e:	a0 92 0a 0a 	sts	0x0A0A, r10
    af32:	33 c0       	rjmp	.+102    	; 0xaf9a <MainLoop+0x1b0>
	else{
		if(flags & BIGFIELD){
			mgridx = ((mx-(xoff*8))/8)-1;
    af34:	a3 e0       	ldi	r26, 0x03	; 3
    af36:	66 0f       	add	r22, r22
    af38:	77 1f       	adc	r23, r23
    af3a:	aa 95       	dec	r26
    af3c:	e1 f7       	brne	.-8      	; 0xaf36 <MainLoop+0x14c>
    af3e:	ce 01       	movw	r24, r28
    af40:	86 1b       	sub	r24, r22
    af42:	97 0b       	sbc	r25, r23
    af44:	68 e0       	ldi	r22, 0x08	; 8
    af46:	70 e0       	ldi	r23, 0x00	; 0
    af48:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    af4c:	61 50       	subi	r22, 0x01	; 1
    af4e:	60 93 0a 0a 	sts	0x0A0A, r22
			mgridy = ((my-(yoff*8))/8)-7;
    af52:	53 e0       	ldi	r21, 0x03	; 3
    af54:	ee 0f       	add	r30, r30
    af56:	ff 1f       	adc	r31, r31
    af58:	5a 95       	dec	r21
    af5a:	e1 f7       	brne	.-8      	; 0xaf54 <MainLoop+0x16a>
    af5c:	14 c0       	rjmp	.+40     	; 0xaf86 <MainLoop+0x19c>
		}
		else{
			mgridx = ((mx-(xoff*16))/8)-1;
    af5e:	44 e0       	ldi	r20, 0x04	; 4
    af60:	66 0f       	add	r22, r22
    af62:	77 1f       	adc	r23, r23
    af64:	4a 95       	dec	r20
    af66:	e1 f7       	brne	.-8      	; 0xaf60 <MainLoop+0x176>
    af68:	ce 01       	movw	r24, r28
    af6a:	86 1b       	sub	r24, r22
    af6c:	97 0b       	sbc	r25, r23
    af6e:	68 e0       	ldi	r22, 0x08	; 8
    af70:	70 e0       	ldi	r23, 0x00	; 0
    af72:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    af76:	61 50       	subi	r22, 0x01	; 1
    af78:	60 93 0a 0a 	sts	0x0A0A, r22
			mgridy = ((my-(yoff*16))/8)-7;
    af7c:	34 e0       	ldi	r19, 0x04	; 4
    af7e:	ee 0f       	add	r30, r30
    af80:	ff 1f       	adc	r31, r31
    af82:	3a 95       	dec	r19
    af84:	e1 f7       	brne	.-8      	; 0xaf7e <MainLoop+0x194>
    af86:	c8 01       	movw	r24, r16
    af88:	8e 1b       	sub	r24, r30
    af8a:	9f 0b       	sbc	r25, r31
    af8c:	68 e0       	ldi	r22, 0x08	; 8
    af8e:	70 e0       	ldi	r23, 0x00	; 0
    af90:	0e 94 03 5a 	call	0xb406	; 0xb406 <__divmodhi4>
    af94:	67 50       	subi	r22, 0x07	; 7
    af96:	60 93 ad 0c 	sts	0x0CAD, r22
		}
	}

	if(!(flags & BIGFIELD) && mgridx != 255){
    af9a:	c6 fc       	sbrc	r12, 6
    af9c:	0c c0       	rjmp	.+24     	; 0xafb6 <MainLoop+0x1cc>
    af9e:	80 91 0a 0a 	lds	r24, 0x0A0A
    afa2:	8f 3f       	cpi	r24, 0xFF	; 255
    afa4:	41 f0       	breq	.+16     	; 0xafb6 <MainLoop+0x1cc>
		mgridx /= 2;
    afa6:	86 95       	lsr	r24
    afa8:	80 93 0a 0a 	sts	0x0A0A, r24
		mgridy /= 2;
    afac:	80 91 ad 0c 	lds	r24, 0x0CAD
    afb0:	86 95       	lsr	r24
    afb2:	80 93 ad 0c 	sts	0x0CAD, r24
	}
	
	if(flags & DEBUG){
    afb6:	b7 fe       	sbrs	r11, 7
    afb8:	7d c0       	rjmp	.+250    	; 0xb0b4 <MainLoop+0x2ca>
		print(8,2,PSTR("X"));
    afba:	88 e0       	ldi	r24, 0x08	; 8
    afbc:	90 e0       	ldi	r25, 0x00	; 0
    afbe:	62 e0       	ldi	r22, 0x02	; 2
    afc0:	70 e0       	ldi	r23, 0x00	; 0
    afc2:	46 e8       	ldi	r20, 0x86	; 134
    afc4:	53 e7       	ldi	r21, 0x73	; 115
    afc6:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		print(8,3,PSTR("Y"));
    afca:	88 e0       	ldi	r24, 0x08	; 8
    afcc:	90 e0       	ldi	r25, 0x00	; 0
    afce:	63 e0       	ldi	r22, 0x03	; 3
    afd0:	70 e0       	ldi	r23, 0x00	; 0
    afd2:	44 e8       	ldi	r20, 0x84	; 132
    afd4:	53 e7       	ldi	r21, 0x73	; 115
    afd6:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		print(8,4,PSTR("G"));
    afda:	88 e0       	ldi	r24, 0x08	; 8
    afdc:	90 e0       	ldi	r25, 0x00	; 0
    afde:	64 e0       	ldi	r22, 0x04	; 4
    afe0:	70 e0       	ldi	r23, 0x00	; 0
    afe2:	42 e8       	ldi	r20, 0x82	; 130
    afe4:	53 e7       	ldi	r21, 0x73	; 115
    afe6:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		print(17,2,PSTR("V"));
    afea:	81 e1       	ldi	r24, 0x11	; 17
    afec:	90 e0       	ldi	r25, 0x00	; 0
    afee:	62 e0       	ldi	r22, 0x02	; 2
    aff0:	70 e0       	ldi	r23, 0x00	; 0
    aff2:	40 e8       	ldi	r20, 0x80	; 128
    aff4:	53 e7       	ldi	r21, 0x73	; 115
    aff6:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		printnum(20,2,GetVidGrid(mgridx,mgridy),true);
    affa:	80 91 0a 0a 	lds	r24, 0x0A0A
    affe:	60 91 ad 0c 	lds	r22, 0x0CAD
    b002:	0e 94 60 4a 	call	0x94c0	; 0x94c0 <GetVidGrid>
    b006:	48 2f       	mov	r20, r24
    b008:	84 e1       	ldi	r24, 0x14	; 20
    b00a:	62 e0       	ldi	r22, 0x02	; 2
    b00c:	50 e0       	ldi	r21, 0x00	; 0
    b00e:	21 e0       	ldi	r18, 0x01	; 1
    b010:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
		if(mgridx == 255){
    b014:	80 91 0a 0a 	lds	r24, 0x0A0A
    b018:	8f 3f       	cpi	r24, 0xFF	; 255
    b01a:	b1 f4       	brne	.+44     	; 0xb048 <MainLoop+0x25e>
    b01c:	c2 e0       	ldi	r28, 0x02	; 2
    b01e:	d0 e0       	ldi	r29, 0x00	; 0
			for(uint8_t i=0;i<3;i++)
				print(9,2+i,PSTR("NULL"));
    b020:	89 e0       	ldi	r24, 0x09	; 9
    b022:	90 e0       	ldi	r25, 0x00	; 0
    b024:	be 01       	movw	r22, r28
    b026:	4b e7       	ldi	r20, 0x7B	; 123
    b028:	53 e7       	ldi	r21, 0x73	; 115
    b02a:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    b02e:	21 96       	adiw	r28, 0x01	; 1
		print(8,3,PSTR("Y"));
		print(8,4,PSTR("G"));
		print(17,2,PSTR("V"));
		printnum(20,2,GetVidGrid(mgridx,mgridy),true);
		if(mgridx == 255){
			for(uint8_t i=0;i<3;i++)
    b030:	c5 30       	cpi	r28, 0x05	; 5
    b032:	d1 05       	cpc	r29, r1
    b034:	a9 f7       	brne	.-22     	; 0xb020 <MainLoop+0x236>
				print(9,2+i,PSTR("NULL"));
			
		 print(17,2,PSTR("NULL"));
    b036:	81 e1       	ldi	r24, 0x11	; 17
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	62 e0       	ldi	r22, 0x02	; 2
    b03c:	70 e0       	ldi	r23, 0x00	; 0
    b03e:	46 e7       	ldi	r20, 0x76	; 118
    b040:	53 e7       	ldi	r21, 0x73	; 115
    b042:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    b046:	2a c0       	rjmp	.+84     	; 0xb09c <MainLoop+0x2b2>
    b048:	c2 e0       	ldi	r28, 0x02	; 2
    b04a:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else{
			for(uint8_t i=0;i<3;i++)
				print(9,2+i,PSTR("	 "));
    b04c:	89 e0       	ldi	r24, 0x09	; 9
    b04e:	90 e0       	ldi	r25, 0x00	; 0
    b050:	be 01       	movw	r22, r28
    b052:	43 e7       	ldi	r20, 0x73	; 115
    b054:	53 e7       	ldi	r21, 0x73	; 115
    b056:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
    b05a:	21 96       	adiw	r28, 0x01	; 1
				print(9,2+i,PSTR("NULL"));
			
		 print(17,2,PSTR("NULL"));
		}
		else{
			for(uint8_t i=0;i<3;i++)
    b05c:	c5 30       	cpi	r28, 0x05	; 5
    b05e:	d1 05       	cpc	r29, r1
    b060:	a9 f7       	brne	.-22     	; 0xb04c <MainLoop+0x262>
				print(9,2+i,PSTR("	 "));
			
		 printnum(11,2,mgridx,true);
    b062:	40 91 0a 0a 	lds	r20, 0x0A0A
    b066:	8b e0       	ldi	r24, 0x0B	; 11
    b068:	62 e0       	ldi	r22, 0x02	; 2
    b06a:	50 e0       	ldi	r21, 0x00	; 0
    b06c:	21 e0       	ldi	r18, 0x01	; 1
    b06e:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
			printnum(11,3,mgridy,true);
    b072:	40 91 ad 0c 	lds	r20, 0x0CAD
    b076:	8b e0       	ldi	r24, 0x0B	; 11
    b078:	63 e0       	ldi	r22, 0x03	; 3
    b07a:	50 e0       	ldi	r21, 0x00	; 0
    b07c:	21 e0       	ldi	r18, 0x01	; 1
    b07e:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
			printnum(11,4,GetGrid(mgridx,mgridy),true);
    b082:	80 91 0a 0a 	lds	r24, 0x0A0A
    b086:	60 91 ad 0c 	lds	r22, 0x0CAD
    b08a:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    b08e:	48 2f       	mov	r20, r24
    b090:	8b e0       	ldi	r24, 0x0B	; 11
    b092:	64 e0       	ldi	r22, 0x04	; 4
    b094:	50 e0       	ldi	r21, 0x00	; 0
    b096:	21 e0       	ldi	r18, 0x01	; 1
    b098:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <printnum>
		}

		if(flags & WON){
    b09c:	80 91 d3 0d 	lds	r24, 0x0DD3
    b0a0:	81 ff       	sbrs	r24, 1
    b0a2:	08 c0       	rjmp	.+16     	; 0xb0b4 <MainLoop+0x2ca>
			print(0,0,PSTR("WON"));
    b0a4:	80 e0       	ldi	r24, 0x00	; 0
    b0a6:	90 e0       	ldi	r25, 0x00	; 0
    b0a8:	60 e0       	ldi	r22, 0x00	; 0
    b0aa:	70 e0       	ldi	r23, 0x00	; 0
    b0ac:	4f e6       	ldi	r20, 0x6F	; 111
    b0ae:	53 e7       	ldi	r21, 0x73	; 115
    b0b0:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <print>
		}
	}

	if(mlb && !mlbwd && my < 16+25){//mouse is on hud
    b0b4:	20 91 a4 0c 	lds	r18, 0x0CA4
    b0b8:	22 23       	and	r18, r18
    b0ba:	79 f1       	breq	.+94     	; 0xb11a <MainLoop+0x330>
    b0bc:	80 91 b3 0c 	lds	r24, 0x0CB3
    b0c0:	88 23       	and	r24, r24
    b0c2:	59 f5       	brne	.+86     	; 0xb11a <MainLoop+0x330>
    b0c4:	90 91 ac 0c 	lds	r25, 0x0CAC
    b0c8:	99 32       	cpi	r25, 0x29	; 41
    b0ca:	38 f5       	brcc	.+78     	; 0xb11a <MainLoop+0x330>
		if(mx > 107 && mx < 107+24 && my > 15 && my < 16+25){//mouse is on face
    b0cc:	80 91 d6 0d 	lds	r24, 0x0DD6
    b0d0:	8c 56       	subi	r24, 0x6C	; 108
    b0d2:	87 31       	cpi	r24, 0x17	; 23
    b0d4:	08 f0       	brcs	.+2      	; 0xb0d8 <MainLoop+0x2ee>
    b0d6:	c1 c0       	rjmp	.+386    	; 0xb25a <MainLoop+0x470>
    b0d8:	90 31       	cpi	r25, 0x10	; 16
    b0da:	08 f4       	brcc	.+2      	; 0xb0de <MainLoop+0x2f4>
    b0dc:	be c0       	rjmp	.+380    	; 0xb25a <MainLoop+0x470>
			if(flags & LOST){
    b0de:	80 91 d3 0d 	lds	r24, 0x0DD3
    b0e2:	80 ff       	sbrs	r24, 0
    b0e4:	12 c0       	rjmp	.+36     	; 0xb10a <MainLoop+0x320>
			 DrawFace(108,16,3);
    b0e6:	8c e6       	ldi	r24, 0x6C	; 108
    b0e8:	60 e1       	ldi	r22, 0x10	; 16
    b0ea:	43 e0       	ldi	r20, 0x03	; 3
    b0ec:	0e 94 a2 4a 	call	0x9544	; 0x9544 <DrawFace>
			WaitVsync(1);
    b0f0:	81 e0       	ldi	r24, 0x01	; 1
    b0f2:	90 e0       	ldi	r25, 0x00	; 0
    b0f4:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
			do{
				Input();
				WaitVsync(1);
    b0f8:	81 e0       	ldi	r24, 0x01	; 1
    b0fa:	90 e0       	ldi	r25, 0x00	; 0
    b0fc:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
				}while(mlb);
    b100:	80 91 a4 0c 	lds	r24, 0x0CA4
    b104:	88 23       	and	r24, r24
    b106:	c1 f7       	brne	.-16     	; 0xb0f8 <MainLoop+0x30e>
    b108:	02 c0       	rjmp	.+4      	; 0xb10e <MainLoop+0x324>
				ResetBoard();
		 }
			else if(flags & WON)
    b10a:	81 ff       	sbrs	r24, 1
    b10c:	03 c0       	rjmp	.+6      	; 0xb114 <MainLoop+0x32a>
			 ResetBoard();
    b10e:	0e 94 6b 55 	call	0xaad6	; 0xaad6 <ResetBoard>
    b112:	75 ce       	rjmp	.-790    	; 0xadfe <MainLoop+0x14>
			else
				InGameMenu();
    b114:	0e 94 7c 55 	call	0xaaf8	; 0xaaf8 <InGameMenu>
    b118:	72 ce       	rjmp	.-796    	; 0xadfe <MainLoop+0x14>
		}
		WaitVsync(1);
		continue;
	}
	
	if(flags & LOST){
    b11a:	00 91 d3 0d 	lds	r16, 0x0DD3
    b11e:	00 fd       	sbrc	r16, 0
    b120:	9a c0       	rjmp	.+308    	; 0xb256 <MainLoop+0x46c>
		Draw();
		WaitVsync(1);
		continue;
	}
	else if(flags & WON){
    b122:	01 fd       	sbrc	r16, 1
    b124:	98 c0       	rjmp	.+304    	; 0xb256 <MainLoop+0x46c>
		Draw();
		WaitVsync(1);
		continue;
	}
	else if(mlbwd && !mlb && mgridx != 255){//player released left mouse button, apply logic
    b126:	80 91 b3 0c 	lds	r24, 0x0CB3
    b12a:	88 23       	and	r24, r24
    b12c:	09 f4       	brne	.+2      	; 0xb130 <MainLoop+0x346>
    b12e:	48 c0       	rjmp	.+144    	; 0xb1c0 <MainLoop+0x3d6>
    b130:	22 23       	and	r18, r18
    b132:	09 f0       	breq	.+2      	; 0xb136 <MainLoop+0x34c>
    b134:	45 c0       	rjmp	.+138    	; 0xb1c0 <MainLoop+0x3d6>
    b136:	10 91 0a 0a 	lds	r17, 0x0A0A
    b13a:	1f 3f       	cpi	r17, 0xFF	; 255
    b13c:	09 f4       	brne	.+2      	; 0xb140 <MainLoop+0x356>
    b13e:	40 c0       	rjmp	.+128    	; 0xb1c0 <MainLoop+0x3d6>
		uint8_t grid = GetGrid(mgridx,mgridy);
    b140:	e0 90 ad 0c 	lds	r14, 0x0CAD
    b144:	81 2f       	mov	r24, r17
    b146:	6e 2d       	mov	r22, r14
    b148:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>

		if(grid == MINE){//lose
    b14c:	8a 30       	cpi	r24, 0x0A	; 10
    b14e:	09 f5       	brne	.+66     	; 0xb192 <MainLoop+0x3a8>
			if(!(flags & STARTED)){//dont allow a loss on the first turn
    b150:	02 fd       	sbrc	r16, 2
    b152:	19 c0       	rjmp	.+50     	; 0xb186 <MainLoop+0x39c>
				do{
					WaitVsync(1);
    b154:	81 e0       	ldi	r24, 0x01	; 1
    b156:	90 e0       	ldi	r25, 0x00	; 0
    b158:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
					InitField();
    b15c:	0e 94 ae 4f 	call	0x9f5c	; 0x9f5c <InitField>
				}while(GetGrid(mgridx,mgridy)==MINE);
    b160:	80 91 0a 0a 	lds	r24, 0x0A0A
    b164:	60 91 ad 0c 	lds	r22, 0x0CAD
    b168:	0e 94 35 4a 	call	0x946a	; 0x946a <GetGrid>
    b16c:	8a 30       	cpi	r24, 0x0A	; 10
    b16e:	91 f3       	breq	.-28     	; 0xb154 <MainLoop+0x36a>
				WaitVsync(1);
    b170:	81 e0       	ldi	r24, 0x01	; 1
    b172:	90 e0       	ldi	r25, 0x00	; 0
    b174:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
				FloodFill(mgridx,mgridy);
    b178:	80 91 0a 0a 	lds	r24, 0x0A0A
    b17c:	60 91 ad 0c 	lds	r22, 0x0CAD
    b180:	0e 94 6f 4d 	call	0x9ade	; 0x9ade <FloodFill>
    b184:	17 c0       	rjmp	.+46     	; 0xb1b4 <MainLoop+0x3ca>
		 	}
			else{
				flags |= LOST;
    b186:	01 60       	ori	r16, 0x01	; 1
    b188:	00 93 d3 0d 	sts	0x0DD3, r16
				Loss();
    b18c:	0e 94 a1 52 	call	0xa542	; 0xa542 <Loss>
    b190:	11 c0       	rjmp	.+34     	; 0xb1b4 <MainLoop+0x3ca>
			}
		}
		else if(GetVidGrid(mgridx,mgridy) == 0){//unclicked spot
    b192:	81 2f       	mov	r24, r17
    b194:	6e 2d       	mov	r22, r14
    b196:	0e 94 60 4a 	call	0x94c0	; 0x94c0 <GetVidGrid>
    b19a:	88 23       	and	r24, r24
    b19c:	59 f4       	brne	.+22     	; 0xb1b4 <MainLoop+0x3ca>
			FloodFill(mgridx,mgridy);
    b19e:	80 91 0a 0a 	lds	r24, 0x0A0A
    b1a2:	60 91 ad 0c 	lds	r22, 0x0CAD
    b1a6:	0e 94 6f 4d 	call	0x9ade	; 0x9ade <FloodFill>
			if(CheckVictory()){
    b1aa:	0e 94 e7 4a 	call	0x95ce	; 0x95ce <CheckVictory>
    b1ae:	88 23       	and	r24, r24
    b1b0:	09 f0       	breq	.+2      	; 0xb1b4 <MainLoop+0x3ca>
    b1b2:	4a c0       	rjmp	.+148    	; 0xb248 <MainLoop+0x45e>
				Win();
				continue;
			}
		}

		flags |= STARTED;
    b1b4:	80 91 d3 0d 	lds	r24, 0x0DD3
    b1b8:	84 60       	ori	r24, 0x04	; 4
    b1ba:	80 93 d3 0d 	sts	0x0DD3, r24
    b1be:	47 c0       	rjmp	.+142    	; 0xb24e <MainLoop+0x464>
		
	}
	else if(mrb && !mrbwd && mgridx != 255){//player pressed right mouse button
    b1c0:	80 91 aa 0c 	lds	r24, 0x0CAA
    b1c4:	88 23       	and	r24, r24
    b1c6:	09 f4       	brne	.+2      	; 0xb1ca <MainLoop+0x3e0>
    b1c8:	42 c0       	rjmp	.+132    	; 0xb24e <MainLoop+0x464>
    b1ca:	80 91 a9 0c 	lds	r24, 0x0CA9
    b1ce:	88 23       	and	r24, r24
    b1d0:	f1 f5       	brne	.+124    	; 0xb24e <MainLoop+0x464>
    b1d2:	80 91 0a 0a 	lds	r24, 0x0A0A
    b1d6:	8f 3f       	cpi	r24, 0xFF	; 255
    b1d8:	d1 f1       	breq	.+116    	; 0xb24e <MainLoop+0x464>

		uint8_t mark = GetVidGrid(mgridx,mgridy);
    b1da:	60 91 ad 0c 	lds	r22, 0x0CAD
    b1de:	0e 94 60 4a 	call	0x94c0	; 0x94c0 <GetVidGrid>

		if(mark < 1){//unexplored
    b1e2:	88 23       	and	r24, r24
    b1e4:	59 f4       	brne	.+22     	; 0xb1fc <MainLoop+0x412>
			SetVidGrid(mgridx,mgridy,FLAG);
    b1e6:	80 91 0a 0a 	lds	r24, 0x0A0A
    b1ea:	60 91 ad 0c 	lds	r22, 0x0CAD
    b1ee:	4d e0       	ldi	r20, 0x0D	; 13
    b1f0:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
			numflags++;
    b1f4:	80 91 a5 0c 	lds	r24, 0x0CA5
    b1f8:	8f 5f       	subi	r24, 0xFF	; 255
    b1fa:	16 c0       	rjmp	.+44     	; 0xb228 <MainLoop+0x43e>
		}else if(mark == FLAG){//flag
    b1fc:	8d 30       	cpi	r24, 0x0D	; 13
    b1fe:	b9 f4       	brne	.+46     	; 0xb22e <MainLoop+0x444>
			if(flags & MARKS)
    b200:	80 91 d3 0d 	lds	r24, 0x0DD3
    b204:	84 ff       	sbrs	r24, 4
    b206:	06 c0       	rjmp	.+12     	; 0xb214 <MainLoop+0x42a>
			 SetVidGrid(mgridx,mgridy,QUESTION);
    b208:	80 91 0a 0a 	lds	r24, 0x0A0A
    b20c:	60 91 ad 0c 	lds	r22, 0x0CAD
    b210:	4e e0       	ldi	r20, 0x0E	; 14
    b212:	05 c0       	rjmp	.+10     	; 0xb21e <MainLoop+0x434>
			else
			 SetVidGrid(mgridx,mgridy,0);
    b214:	80 91 0a 0a 	lds	r24, 0x0A0A
    b218:	60 91 ad 0c 	lds	r22, 0x0CAD
    b21c:	40 e0       	ldi	r20, 0x00	; 0
    b21e:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
		 numflags--;
    b222:	80 91 a5 0c 	lds	r24, 0x0CA5
    b226:	81 50       	subi	r24, 0x01	; 1
    b228:	80 93 a5 0c 	sts	0x0CA5, r24
    b22c:	09 c0       	rjmp	.+18     	; 0xb240 <MainLoop+0x456>
		}
		else if(mark == QUESTION)
    b22e:	8e 30       	cpi	r24, 0x0E	; 14
    b230:	39 f4       	brne	.+14     	; 0xb240 <MainLoop+0x456>
			SetVidGrid(mgridx,mgridy,0);
    b232:	80 91 0a 0a 	lds	r24, 0x0A0A
    b236:	60 91 ad 0c 	lds	r22, 0x0CAD
    b23a:	40 e0       	ldi	r20, 0x00	; 0
    b23c:	0e 94 1a 4d 	call	0x9a34	; 0x9a34 <SetVidGrid>
		
		if(CheckVictory()){
    b240:	0e 94 e7 4a 	call	0x95ce	; 0x95ce <CheckVictory>
    b244:	88 23       	and	r24, r24
    b246:	19 f0       	breq	.+6      	; 0xb24e <MainLoop+0x464>
			Win();
    b248:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <Win>
    b24c:	d8 cd       	rjmp	.-1104   	; 0xadfe <MainLoop+0x14>
		 continue;
		}
			
	}
	
	UpdateTimer();	
    b24e:	0e 94 bc 49 	call	0x9378	; 0x9378 <UpdateTimer>
	prand();
    b252:	0e 94 de 49 	call	0x93bc	; 0x93bc <prand>
	
	Draw();
    b256:	0e 94 05 4d 	call	0x9a0a	; 0x9a0a <Draw>
	WaitVsync(1);
    b25a:	81 e0       	ldi	r24, 0x01	; 1
    b25c:	90 e0       	ldi	r25, 0x00	; 0
    b25e:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
    b262:	cd cd       	rjmp	.-1126   	; 0xadfe <MainLoop+0x14>

0000b264 <MainMenu>:
		}
		mt++;
	}
}

void MainMenu(){
    b264:	0f 93       	push	r16
    b266:	1f 93       	push	r17
	mx = 124;
    b268:	8c e7       	ldi	r24, 0x7C	; 124
    b26a:	80 93 d6 0d 	sts	0x0DD6, r24
	my = 18*8;
    b26e:	80 e9       	ldi	r24, 0x90	; 144
    b270:	80 93 ac 0c 	sts	0x0CAC, r24
	FadeOut(1,true);
    b274:	81 e0       	ldi	r24, 0x01	; 1
    b276:	61 e0       	ldi	r22, 0x01	; 1
    b278:	0e 94 3a 48 	call	0x9074	; 0x9074 <FadeOut>
	FadeIn(4,false);
    b27c:	84 e0       	ldi	r24, 0x04	; 4
    b27e:	60 e0       	ldi	r22, 0x00	; 0
    b280:	0e 94 22 48 	call	0x9044	; 0x9044 <FadeIn>
	SetTileTable(TitleTiles);
    b284:	81 eb       	ldi	r24, 0xB1	; 177
    b286:	96 e5       	ldi	r25, 0x56	; 86
    b288:	0e 94 4d 3e 	call	0x7c9a	; 0x7c9a <SetTileTable>
    b28c:	00 e0       	ldi	r16, 0x00	; 0
    b28e:	0c c0       	rjmp	.+24     	; 0xb2a8 <MainMenu+0x44>
	for(u8 y=0;y<28;y++)
	for(u8 x=0;x<30;x++)
		SetTile(x,y,112);
    b290:	81 2f       	mov	r24, r17
    b292:	60 2f       	mov	r22, r16
    b294:	40 e7       	ldi	r20, 0x70	; 112
    b296:	50 e0       	ldi	r21, 0x00	; 0
    b298:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	my = 18*8;
	FadeOut(1,true);
	FadeIn(4,false);
	SetTileTable(TitleTiles);
	for(u8 y=0;y<28;y++)
	for(u8 x=0;x<30;x++)
    b29c:	1f 5f       	subi	r17, 0xFF	; 255
    b29e:	1e 31       	cpi	r17, 0x1E	; 30
    b2a0:	b9 f7       	brne	.-18     	; 0xb290 <MainMenu+0x2c>
	mx = 124;
	my = 18*8;
	FadeOut(1,true);
	FadeIn(4,false);
	SetTileTable(TitleTiles);
	for(u8 y=0;y<28;y++)
    b2a2:	0f 5f       	subi	r16, 0xFF	; 255
    b2a4:	0c 31       	cpi	r16, 0x1C	; 28
    b2a6:	11 f0       	breq	.+4      	; 0xb2ac <MainMenu+0x48>
    b2a8:	10 e0       	ldi	r17, 0x00	; 0
    b2aa:	f2 cf       	rjmp	.-28     	; 0xb290 <MainMenu+0x2c>
	for(u8 x=0;x<30;x++)
		SetTile(x,y,112);
	DrawMap2(1,4,TitleMap);
    b2ac:	81 e0       	ldi	r24, 0x01	; 1
    b2ae:	64 e0       	ldi	r22, 0x04	; 4
    b2b0:	41 ef       	ldi	r20, 0xF1	; 241
    b2b2:	52 e7       	ldi	r21, 0x72	; 114
    b2b4:	0e 94 8e 48 	call	0x911c	; 0x911c <DrawMap2>
	StartSong(Song5);
    b2b8:	8a e5       	ldi	r24, 0x5A	; 90
    b2ba:	91 e5       	ldi	r25, 0x51	; 81
    b2bc:	0e 94 35 40 	call	0x806a	; 0x806a <StartSong>
}

void DrawCursor(){
	sprites[9].x = mx;
	sprites[9].y = my;
	sprites[9].tileIndex = 28;
    b2c0:	1c e1       	ldi	r17, 0x1C	; 28
	while(true){
		Input();
		DrawFace((13*8),(16*8),mlbwd);
    b2c2:	88 e6       	ldi	r24, 0x68	; 104
    b2c4:	60 e8       	ldi	r22, 0x80	; 128
    b2c6:	40 91 b3 0c 	lds	r20, 0x0CB3
    b2ca:	0e 94 a2 4a 	call	0x9544	; 0x9544 <DrawFace>
	}
		
}

void DrawCursor(){
	sprites[9].x = mx;
    b2ce:	80 91 d6 0d 	lds	r24, 0x0DD6
    b2d2:	80 93 ac 04 	sts	0x04AC, r24
	sprites[9].y = my;
    b2d6:	80 91 ac 0c 	lds	r24, 0x0CAC
    b2da:	80 93 ad 04 	sts	0x04AD, r24
	sprites[9].tileIndex = 28;
    b2de:	10 93 ae 04 	sts	0x04AE, r17
		DrawCursor();
		prand();
    b2e2:	0e 94 de 49 	call	0x93bc	; 0x93bc <prand>
		WaitVsync(1);
    b2e6:	81 e0       	ldi	r24, 0x01	; 1
    b2e8:	90 e0       	ldi	r25, 0x00	; 0
    b2ea:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>
		if(mlbwd && !mlb && mx >= 13*8 && mx <= 16*8 && my >= 16*8 && my <= 19*8)
    b2ee:	80 91 b3 0c 	lds	r24, 0x0CB3
    b2f2:	88 23       	and	r24, r24
    b2f4:	31 f3       	breq	.-52     	; 0xb2c2 <MainMenu+0x5e>
    b2f6:	80 91 a4 0c 	lds	r24, 0x0CA4
    b2fa:	88 23       	and	r24, r24
    b2fc:	11 f7       	brne	.-60     	; 0xb2c2 <MainMenu+0x5e>
    b2fe:	80 91 d6 0d 	lds	r24, 0x0DD6
    b302:	88 36       	cpi	r24, 0x68	; 104
    b304:	f0 f2       	brcs	.-68     	; 0xb2c2 <MainMenu+0x5e>
    b306:	81 38       	cpi	r24, 0x81	; 129
    b308:	e0 f6       	brcc	.-72     	; 0xb2c2 <MainMenu+0x5e>
    b30a:	80 91 ac 0c 	lds	r24, 0x0CAC
    b30e:	87 ff       	sbrs	r24, 7
    b310:	d8 cf       	rjmp	.-80     	; 0xb2c2 <MainMenu+0x5e>
    b312:	89 39       	cpi	r24, 0x99	; 153
    b314:	b0 f6       	brcc	.-84     	; 0xb2c2 <MainMenu+0x5e>
			break;
	}
	
	FadeOut(3,true);
    b316:	83 e0       	ldi	r24, 0x03	; 3
    b318:	61 e0       	ldi	r22, 0x01	; 1
    b31a:	0e 94 3a 48 	call	0x9074	; 0x9074 <FadeOut>
	SetTileTable(GameTiles);
    b31e:	85 ee       	ldi	r24, 0xE5	; 229
    b320:	9d e0       	ldi	r25, 0x0D	; 13
    b322:	0e 94 4d 3e 	call	0x7c9a	; 0x7c9a <SetTileTable>
    b326:	00 e0       	ldi	r16, 0x00	; 0
    b328:	0c c0       	rjmp	.+24     	; 0xb342 <MainMenu+0xde>
	for(u8 x=0;x<30;x++)
	for(u8 y=0;y<28;y++)
		SetTile(x,y,BLANKT);
    b32a:	80 2f       	mov	r24, r16
    b32c:	61 2f       	mov	r22, r17
    b32e:	4d e0       	ldi	r20, 0x0D	; 13
    b330:	50 e0       	ldi	r21, 0x00	; 0
    b332:	0e 94 3c 3e 	call	0x7c78	; 0x7c78 <SetTile>
	}
	
	FadeOut(3,true);
	SetTileTable(GameTiles);
	for(u8 x=0;x<30;x++)
	for(u8 y=0;y<28;y++)
    b336:	1f 5f       	subi	r17, 0xFF	; 255
    b338:	1c 31       	cpi	r17, 0x1C	; 28
    b33a:	b9 f7       	brne	.-18     	; 0xb32a <MainMenu+0xc6>
			break;
	}
	
	FadeOut(3,true);
	SetTileTable(GameTiles);
	for(u8 x=0;x<30;x++)
    b33c:	0f 5f       	subi	r16, 0xFF	; 255
    b33e:	0e 31       	cpi	r16, 0x1E	; 30
    b340:	11 f0       	breq	.+4      	; 0xb346 <MainMenu+0xe2>
    b342:	10 e0       	ldi	r17, 0x00	; 0
    b344:	f2 cf       	rjmp	.-28     	; 0xb32a <MainMenu+0xc6>
	for(u8 y=0;y<28;y++)
		SetTile(x,y,BLANKT);
	FadeIn(3,false);
    b346:	83 e0       	ldi	r24, 0x03	; 3
    b348:	60 e0       	ldi	r22, 0x00	; 0
    b34a:	0e 94 22 48 	call	0x9044	; 0x9044 <FadeIn>
}
    b34e:	1f 91       	pop	r17
    b350:	0f 91       	pop	r16
    b352:	08 95       	ret

0000b354 <main>:

#include "defines.h"
#include "gui.h"

int main(){
	InitMusicPlayer(patches);
    b354:	85 ef       	ldi	r24, 0xF5	; 245
    b356:	94 e0       	ldi	r25, 0x04	; 4
    b358:	0e 94 1a 40 	call	0x8034	; 0x8034 <InitMusicPlayer>
	SetSpritesTileTable(GameSprites);
    b35c:	88 e7       	ldi	r24, 0x78	; 120
    b35e:	96 e0       	ldi	r25, 0x06	; 6
    b360:	0e 94 37 3e 	call	0x7c6e	; 0x7c6e <SetSpritesTileTable>
	SetTileTable(GameTiles);
    b364:	85 ee       	ldi	r24, 0xE5	; 229
    b366:	9d e0       	ldi	r25, 0x0D	; 13
    b368:	0e 94 4d 3e 	call	0x7c9a	; 0x7c9a <SetTileTable>
	SetFontTilesIndex(FONTSTART);
    b36c:	80 e7       	ldi	r24, 0x70	; 112
    b36e:	0e 94 4a 3e 	call	0x7c94	; 0x7c94 <SetFontTilesIndex>
	SetMasterVolume(200);
    b372:	88 ec       	ldi	r24, 0xC8	; 200
    b374:	0e 94 90 40 	call	0x8120	; 0x8120 <SetMasterVolume>
//	EnableSnesMouse(0,NULL);
	FadeIn(1,false);
    b378:	81 e0       	ldi	r24, 0x01	; 1
    b37a:	60 e0       	ldi	r22, 0x00	; 0
    b37c:	0e 94 22 48 	call	0x9044	; 0x9044 <FadeIn>

#ifdef DEBUGGING
	flags |= DEBUG;
#endif
	music = 1;
    b380:	81 e0       	ldi	r24, 0x01	; 1
    b382:	80 93 1e 01 	sts	0x011E, r24
	mx = my = 128;
    b386:	80 e8       	ldi	r24, 0x80	; 128
    b388:	80 93 ac 0c 	sts	0x0CAC, r24
    b38c:	80 93 d6 0d 	sts	0x0DD6, r24
	xoff = yoff = 0;
    b390:	10 92 b2 0c 	sts	0x0CB2, r1
    b394:	10 92 a8 0c 	sts	0x0CA8, r1
    b398:	e8 e8       	ldi	r30, 0x88	; 136
    b39a:	f4 e0       	ldi	r31, 0x04	; 4

	for(uint8_t i=0;i<MAX_SPRITES;i++)
		sprites[i].x = SCREEN_TILES_H*8;
    b39c:	80 ef       	ldi	r24, 0xF0	; 240
    b39e:	80 83       	st	Z, r24
    b3a0:	34 96       	adiw	r30, 0x04	; 4
#endif
	music = 1;
	mx = my = 128;
	xoff = yoff = 0;

	for(uint8_t i=0;i<MAX_SPRITES;i++)
    b3a2:	94 e0       	ldi	r25, 0x04	; 4
    b3a4:	e0 3c       	cpi	r30, 0xC0	; 192
    b3a6:	f9 07       	cpc	r31, r25
    b3a8:	d1 f7       	brne	.-12     	; 0xb39e <main+0x4a>
		sprites[i].x = SCREEN_TILES_H*8;
	WaitVsync(1);	
    b3aa:	81 e0       	ldi	r24, 0x01	; 1
    b3ac:	90 e0       	ldi	r25, 0x00	; 0
    b3ae:	0e 94 77 48 	call	0x90ee	; 0x90ee <WaitVsync>

	skill = 1;
    b3b2:	81 e0       	ldi	r24, 0x01	; 1
    b3b4:	80 93 84 09 	sts	0x0984, r24
	customwidth = 12;//MAXWIDTH;
    b3b8:	8c e0       	ldi	r24, 0x0C	; 12
    b3ba:	80 93 ab 0c 	sts	0x0CAB, r24
	customheight = 10;//MAXHEIGHT;
    b3be:	8a e0       	ldi	r24, 0x0A	; 10
    b3c0:	80 93 d5 0d 	sts	0x0DD5, r24
	custommines = 25;
    b3c4:	89 e1       	ldi	r24, 0x19	; 25
    b3c6:	80 93 9f 0c 	sts	0x0C9F, r24
	flags = SOUND | MARKS;
    b3ca:	88 e1       	ldi	r24, 0x18	; 24
    b3cc:	80 93 d3 0d 	sts	0x0DD3, r24

STACKTOP:
	MainMenu();
    b3d0:	0e 94 32 59 	call	0xb264	; 0xb264 <MainMenu>
	NewGame();
    b3d4:	0e 94 09 53 	call	0xa612	; 0xa612 <NewGame>
	MainLoop();
    b3d8:	0e 94 f5 56 	call	0xadea	; 0xadea <MainLoop>
    b3dc:	f9 cf       	rjmp	.-14     	; 0xb3d0 <main+0x7c>

0000b3de <__udivmodhi4>:
    b3de:	aa 1b       	sub	r26, r26
    b3e0:	bb 1b       	sub	r27, r27
    b3e2:	51 e1       	ldi	r21, 0x11	; 17
    b3e4:	07 c0       	rjmp	.+14     	; 0xb3f4 <__udivmodhi4_ep>

0000b3e6 <__udivmodhi4_loop>:
    b3e6:	aa 1f       	adc	r26, r26
    b3e8:	bb 1f       	adc	r27, r27
    b3ea:	a6 17       	cp	r26, r22
    b3ec:	b7 07       	cpc	r27, r23
    b3ee:	10 f0       	brcs	.+4      	; 0xb3f4 <__udivmodhi4_ep>
    b3f0:	a6 1b       	sub	r26, r22
    b3f2:	b7 0b       	sbc	r27, r23

0000b3f4 <__udivmodhi4_ep>:
    b3f4:	88 1f       	adc	r24, r24
    b3f6:	99 1f       	adc	r25, r25
    b3f8:	5a 95       	dec	r21
    b3fa:	a9 f7       	brne	.-22     	; 0xb3e6 <__udivmodhi4_loop>
    b3fc:	80 95       	com	r24
    b3fe:	90 95       	com	r25
    b400:	bc 01       	movw	r22, r24
    b402:	cd 01       	movw	r24, r26
    b404:	08 95       	ret

0000b406 <__divmodhi4>:
    b406:	97 fb       	bst	r25, 7
    b408:	09 2e       	mov	r0, r25
    b40a:	07 26       	eor	r0, r23
    b40c:	0a d0       	rcall	.+20     	; 0xb422 <__divmodhi4_neg1>
    b40e:	77 fd       	sbrc	r23, 7
    b410:	04 d0       	rcall	.+8      	; 0xb41a <__divmodhi4_neg2>
    b412:	e5 df       	rcall	.-54     	; 0xb3de <__udivmodhi4>
    b414:	06 d0       	rcall	.+12     	; 0xb422 <__divmodhi4_neg1>
    b416:	00 20       	and	r0, r0
    b418:	1a f4       	brpl	.+6      	; 0xb420 <__divmodhi4_exit>

0000b41a <__divmodhi4_neg2>:
    b41a:	70 95       	com	r23
    b41c:	61 95       	neg	r22
    b41e:	7f 4f       	sbci	r23, 0xFF	; 255

0000b420 <__divmodhi4_exit>:
    b420:	08 95       	ret

0000b422 <__divmodhi4_neg1>:
    b422:	f6 f7       	brtc	.-4      	; 0xb420 <__divmodhi4_exit>
    b424:	90 95       	com	r25
    b426:	81 95       	neg	r24
    b428:	9f 4f       	sbci	r25, 0xFF	; 255
    b42a:	08 95       	ret

0000b42c <__prologue_saves__>:
    b42c:	2f 92       	push	r2
    b42e:	3f 92       	push	r3
    b430:	4f 92       	push	r4
    b432:	5f 92       	push	r5
    b434:	6f 92       	push	r6
    b436:	7f 92       	push	r7
    b438:	8f 92       	push	r8
    b43a:	9f 92       	push	r9
    b43c:	af 92       	push	r10
    b43e:	bf 92       	push	r11
    b440:	cf 92       	push	r12
    b442:	df 92       	push	r13
    b444:	ef 92       	push	r14
    b446:	ff 92       	push	r15
    b448:	0f 93       	push	r16
    b44a:	1f 93       	push	r17
    b44c:	cf 93       	push	r28
    b44e:	df 93       	push	r29
    b450:	cd b7       	in	r28, 0x3d	; 61
    b452:	de b7       	in	r29, 0x3e	; 62
    b454:	ca 1b       	sub	r28, r26
    b456:	db 0b       	sbc	r29, r27
    b458:	0f b6       	in	r0, 0x3f	; 63
    b45a:	f8 94       	cli
    b45c:	de bf       	out	0x3e, r29	; 62
    b45e:	0f be       	out	0x3f, r0	; 63
    b460:	cd bf       	out	0x3d, r28	; 61
    b462:	09 94       	ijmp

0000b464 <__epilogue_restores__>:
    b464:	2a 88       	ldd	r2, Y+18	; 0x12
    b466:	39 88       	ldd	r3, Y+17	; 0x11
    b468:	48 88       	ldd	r4, Y+16	; 0x10
    b46a:	5f 84       	ldd	r5, Y+15	; 0x0f
    b46c:	6e 84       	ldd	r6, Y+14	; 0x0e
    b46e:	7d 84       	ldd	r7, Y+13	; 0x0d
    b470:	8c 84       	ldd	r8, Y+12	; 0x0c
    b472:	9b 84       	ldd	r9, Y+11	; 0x0b
    b474:	aa 84       	ldd	r10, Y+10	; 0x0a
    b476:	b9 84       	ldd	r11, Y+9	; 0x09
    b478:	c8 84       	ldd	r12, Y+8	; 0x08
    b47a:	df 80       	ldd	r13, Y+7	; 0x07
    b47c:	ee 80       	ldd	r14, Y+6	; 0x06
    b47e:	fd 80       	ldd	r15, Y+5	; 0x05
    b480:	0c 81       	ldd	r16, Y+4	; 0x04
    b482:	1b 81       	ldd	r17, Y+3	; 0x03
    b484:	aa 81       	ldd	r26, Y+2	; 0x02
    b486:	b9 81       	ldd	r27, Y+1	; 0x01
    b488:	ce 0f       	add	r28, r30
    b48a:	d1 1d       	adc	r29, r1
    b48c:	0f b6       	in	r0, 0x3f	; 63
    b48e:	f8 94       	cli
    b490:	de bf       	out	0x3e, r29	; 62
    b492:	0f be       	out	0x3f, r0	; 63
    b494:	cd bf       	out	0x3d, r28	; 61
    b496:	ed 01       	movw	r28, r26
    b498:	08 95       	ret

0000b49a <strcpy>:
    b49a:	fb 01       	movw	r30, r22
    b49c:	dc 01       	movw	r26, r24
    b49e:	01 90       	ld	r0, Z+
    b4a0:	0d 92       	st	X+, r0
    b4a2:	00 20       	and	r0, r0
    b4a4:	e1 f7       	brne	.-8      	; 0xb49e <strcpy+0x4>
    b4a6:	08 95       	ret

0000b4a8 <_exit>:
    b4a8:	f8 94       	cli

0000b4aa <__stop_program>:
    b4aa:	ff cf       	rjmp	.-2      	; 0xb4aa <__stop_program>
